# data file for the Fltk User Interface Designer (fluid)
version 1.0107
do_not_include_H_from_C
header_name {.hpp}
code_name {.cpp}
decl {\#include <vector>} {public
}

decl {\#include <string>} {public
}

decl {\#include "CsoundGUI.hpp"} {}

class CsoundPerformanceSettingsPanel {open
} {
  decl {CsoundPerformanceSettings performanceSettings;} {public
  }
  decl {int status;} {public
  }
  Function {CsoundPerformanceSettingsPanel(CsoundPerformanceSettings& p)} {open
  } {
    code {{
  status = 0;
  window = (Fl_Double_Window*) 0;
  performanceSettings = p;
}} {}
    Fl_Window window {
      label {Csound performance settings}
      callback {status = 1;} open
      xywh {535 436 405 540} type Double color 139
      code0 {window = o;} visible
    } {
      Fl_Tabs tabs {open
        xywh {0 0 405 505} box PLASTIC_THIN_UP_BOX color 139 selection_color 55
        code0 {tabs = o;}
      } {
        Fl_Group {} {
          label General open
          xywh {0 25 405 480} color 139
        } {
          Fl_Input orcNameInput {
            label {Orchestra/CSD}
            callback {{
  CsoundGUIMain::stripString(performanceSettings.orcName, o->value());
  if (CsoundGUIMain::isCSDFile(performanceSettings.orcName)) {
    scoNameInput->deactivate();
    scoNameButton->deactivate();
    scoNameInput->value("");
  }
  else {
    scoNameInput->activate();
    scoNameButton->activate();
    scoNameInput->value(performanceSettings.scoName.c_str());
  }
}}
            xywh {10 45 220 25} box THIN_DOWN_BOX align 8
            code0 {o->value(performanceSettings.orcName.c_str());}
          }
          Fl_Button orcNameButton {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(performanceSettings.orcName, "Select orchestra or CSD file", CSOUND5GUI_FILETYPE_ORC_CSD, false);
  orcNameInput->value(performanceSettings.orcName.c_str());
  if (CsoundGUIMain::isCSDFile(performanceSettings.orcName)) {
    scoNameInput->deactivate();
    scoNameButton->deactivate();
    scoNameInput->value("");
  }
  else {
    scoNameInput->activate();
    scoNameButton->activate();
    scoNameInput->value(performanceSettings.scoName.c_str());
  }
}}
            tooltip {Browse orchestra or CSD file} xywh {345 45 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
          }
          Fl_Input scoNameInput {
            label {Score file}
            callback {CsoundGUIMain::stripString(performanceSettings.scoName, o->value());}
            xywh {10 80 220 25} box THIN_DOWN_BOX align 8
            code0 {if (CsoundGUIMain::isCSDFile(performanceSettings.orcName)) { o->deactivate(); o->value(""); } else { o->activate(); o->value(performanceSettings.scoName.c_str()); }}
          }
          Fl_Button scoNameButton {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(performanceSettings.scoName, "Select score file", CSOUND5GUI_FILETYPE_SCORE, false);
  scoNameInput->value(performanceSettings.scoName.c_str());
}}
            tooltip {Browse score file} xywh {345 80 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            code0 {if (CsoundGUIMain::isCSDFile(performanceSettings.orcName)) o->deactivate();}
          }
          Fl_Input lineInputDeviceInput {
            label {Line input}
            callback {CsoundGUIMain::stripString(performanceSettings.lineInput, o->value());}
            tooltip {Line input device (stdin for standard input)} xywh {10 115 220 25} box THIN_DOWN_BOX align 8
            code0 {o->value(performanceSettings.lineInput.c_str());}
          }
          Fl_Button lineInputDeviceButton {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(performanceSettings.lineInput, "Select line input device file", CSOUND5GUI_FILETYPE_ALL, false);
  lineInputDeviceInput->value(performanceSettings.lineInput.c_str());
}}
            tooltip {Browse line input device file} xywh {345 115 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
          }
          Fl_Input pluginLibsInput {
            label {Plugin libraries}
            callback {CsoundGUIMain::stripString(performanceSettings.pluginLibs, o->value());}
            tooltip {Comma separated list of additional plugins to load} xywh {10 150 220 25} box THIN_DOWN_BOX align 8
            code0 {o->value(performanceSettings.pluginLibs.c_str());}
          }
          Fl_Button pluginLibsButton {
            label {...}
            callback {{
  std::string tmp;
  tmp = "";
  if (CsoundGUIMain::browseFile(tmp, "Select a plugin library", CSOUND5GUI_FILETYPE_ALL, false)) {
    if (CsoundGUIMain::isEmptyString(performanceSettings.pluginLibs))
      performanceSettings.pluginLibs = tmp;
    else {
      CsoundGUIMain::stripString(performanceSettings.pluginLibs, (char*) 0);
      performanceSettings.pluginLibs += ',';
      performanceSettings.pluginLibs += tmp;
    }
  }
  pluginLibsInput->value(performanceSettings.pluginLibs.c_str());
}}
            tooltip {Browse plugin library} xywh {345 150 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
          }
          Fl_Group {} {open
            xywh {10 185 385 215} box PLASTIC_UP_FRAME
          } {
            Fl_Choice {} {
              label {Display mode}
              callback {performanceSettings.displayMode = o->value() & 3;}
              xywh {20 195 75 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
              code0 {o->add("None|Full|ASCII|PostScript");}
              code1 {o->value(performanceSettings.displayMode);}
            } {}
            Fl_Value_Input {} {
              label {Message level}
              callback {performanceSettings.messageLevel = (int) (o->value() + 0.5) & 231;}
              xywh {205 195 60 25} box THIN_DOWN_BOX align 8 maximum 231 step 1
              code0 {o->value((double) performanceSettings.messageLevel);}
            }
            Fl_Choice {} {
              label Heartbeat
              callback {performanceSettings.heartBeatMode = o->value() & 7;} open
              xywh {20 230 75 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
              code0 {o->add("None|Bar|Dot|Time|Bell");}
              code1 {o->value(performanceSettings.heartBeatMode);}
            } {}
            Fl_Check_Button {} {
              label {Verbose messages}
              callback {performanceSettings.verbose = (o->value() == 0 ? false : true);}
              xywh {205 230 20 25} down_box PLASTIC_DOWN_BOX
              code0 {o->value(performanceSettings.verbose ? 1 : 0);}
            }
            Fl_Value_Input sampleRateInput {
              label {Sample rate}
              callback {{
  performanceSettings.sampleRateOverride = o->value();
  if (performanceSettings.sampleRateOverride <= 0.0) {
    performanceSettings.controlRateOverride = -1.0;
    controlRateInput->value(performanceSettings.controlRateOverride);
  }
  else if (performanceSettings.controlRateOverride <= 0.0) {
    performanceSettings.controlRateOverride = performanceSettings.sampleRateOverride;
    controlRateInput->value(performanceSettings.controlRateOverride);
  }
}}
              tooltip {Sample rate override (<= 0: none) (-r)} xywh {20 265 75 25} box THIN_DOWN_BOX align 8 when 4 minimum -1 maximum 1e+06
              code0 {o->value(performanceSettings.sampleRateOverride);}
            }
            Fl_Value_Input controlRateInput {
              label {Control rate}
              callback {{
  performanceSettings.controlRateOverride = o->value();
  if (performanceSettings.controlRateOverride <= 0.0) {
    performanceSettings.sampleRateOverride = -1.0;
    sampleRateInput->value(performanceSettings.sampleRateOverride);
  }
  else if (performanceSettings.sampleRateOverride <= 0.0) {
    performanceSettings.sampleRateOverride = performanceSettings.controlRateOverride;
    sampleRateInput->value(performanceSettings.sampleRateOverride);
  }
}}
              tooltip {Control rate override (<= 0: none) (-k)} xywh {205 265 75 25} box THIN_DOWN_BOX align 8 when 4 minimum -1 maximum 1e+06
              code0 {o->value(performanceSettings.controlRateOverride);}
            }
            Fl_Value_Input {} {
              label {Score offset}
              callback {{
  performanceSettings.scoreOffsetSeconds = o->value();
  if (performanceSettings.scoreOffsetSeconds < 0.0)
    performanceSettings.scoreOffsetSeconds = 0.0;
}}
              tooltip {Score offset in seconds (-+skip_seconds=)} xywh {20 300 75 25} box THIN_DOWN_BOX align 8 maximum 10000
              code0 {o->value(performanceSettings.scoreOffsetSeconds);}
            }
            Fl_Value_Input {} {
              label {Initial tempo}
              callback {performanceSettings.beatModeTempo = o->value();}
              tooltip {If greater than zero, enable beat mode with this initial tempo (EXPERIMENTAL) (-t)} xywh {205 300 75 25} box THIN_DOWN_BOX align 8 minimum -1 maximum 10000
              code0 {o->value(performanceSettings.beatModeTempo);}
            }
            Fl_Value_Input {} {
              label {String length}
              callback {performanceSettings.maxStrLen = (int) (o->value() + 0.5);}
              tooltip {Maximum length of string variables (-+max_str_len= )} xywh {20 335 75 25} box THIN_DOWN_BOX align 8 minimum 9 maximum 9999 step 1
              code0 {o->value((double) performanceSettings.maxStrLen);}
            }
            Fl_Check_Button {} {
              label {Optimize expressions}
              callback {performanceSettings.enableExpressionOpt = (o->value() == 0 ? false : true);}
              tooltip {Enable experimental optimization of orchestra expressions (--expression-opt)} xywh {205 335 20 25} down_box PLASTIC_DOWN_BOX
              code0 {o->value(performanceSettings.enableExpressionOpt ? 1 : 0);}
            }
            Fl_Check_Button {} {
              label {Skip CsOptions}
              callback {performanceSettings.ignoreCSDOptions = (o->value() == 0 ? false : true);}
              tooltip {Ignore command line flags specified in CSD files} xywh {20 370 25 25} down_box PLASTIC_DOWN_BOX
              code0 {o->value(performanceSettings.ignoreCSDOptions ? 1 : 0);}
            }
            Fl_Check_Button {} {
              label {I-time only}
              callback {performanceSettings.iTimeOnly = (o->value() == 0 ? false : true);}
              tooltip {Init time only performace. No audio output (-I)} xywh {155 370 20 25} down_box PLASTIC_DOWN_BOX
              code0 {o->value(performanceSettings.iTimeOnly ? 1 : 0);}
            }
            Fl_Check_Button {} {
              label {Defer GEN01}
              callback {performanceSettings.deferGEN1 = (o->value() == 0 ? false : true);}
              tooltip {Defer GEN01 sound file loads (-D)} xywh {260 370 20 25} down_box PLASTIC_DOWN_BOX
              code0 {o->value(performanceSettings.deferGEN1 ? 1 : 0);}
            }
          }
          Fl_Group {} {open
            xywh {10 415 385 60} box PLASTIC_UP_FRAME
          } {
            Fl_Check_Button useAdditionalFlagsToggle {
              callback {performanceSettings.useAdditionalFlags = (o->value() == 0 ? false : true);
if (o->value() == 1)
  additionalFlagsInput->activate();
else
  additionalFlagsInput->deactivate();}
              tooltip {Enables the use of additional command line flags} xywh {15 445 20 15} down_box PLASTIC_DOWN_BOX
              code0 {o->value(performanceSettings.useAdditionalFlags? 1 : 0);}
            }
            Fl_Input additionalFlagsInput {
              label {Additional command line flags}
              callback {CsoundGUIMain::stripString(performanceSettings.additionalFlags, o->value());}
              tooltip {Type any addtional command line flags to be used} xywh {35 440 340 25} align 1 deactivate
              code0 {if (performanceSettings.useAdditionalFlags) o->activate();}
              code1 {o->value(performanceSettings.additionalFlags.c_str());}
            }
          }
        }
        Fl_Group {} {
          label {File I/O} open
          xywh {0 25 400 460} color 139 hide
        } {
          Fl_Input inputFileBox {
            label {Input file}
            callback {CsoundGUIMain::stripString(performanceSettings.inputFileName, o->value());}
            tooltip {Name of input file (-i)} xywh {10 45 260 25} box THIN_DOWN_BOX align 8
            code0 {o->value(performanceSettings.inputFileName.c_str());}
          }
          Fl_Button {} {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(performanceSettings.inputFileName, "Select input sound file", CSOUND5GUI_FILETYPE_AUDIO, false);
  inputFileBox->value(performanceSettings.inputFileName.c_str());
}}
            tooltip {Browse input sound file} xywh {355 45 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
          }
          Fl_Input outputFileBox {
            label {Output file}
            callback {if (!performanceSettings.runRealtime)
  CsoundGUIMain::stripString(performanceSettings.outputFileName, o->value());}
            tooltip {Name of output file (-o)} xywh {10 80 260 25} box THIN_DOWN_BOX align 8
            code0 {if (CsoundGUIMain::isRtAudioDevice(performanceSettings.outputFileName, true))}
            code1 {o->value("test");}
            code2 else
            code3 {o->value(performanceSettings.outputFileName.c_str());}
          }
          Fl_Button {} {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(performanceSettings.outputFileName, "Select output sound file", CSOUND5GUI_FILETYPE_AUDIO, true);
  outputFileBox->value(performanceSettings.outputFileName.c_str());
}}
            tooltip {Browse output sound file} xywh {355 80 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
          }
          Fl_Choice {} {
            label {File type}
            callback {performanceSettings.soundFileType = performanceSettings.indexToFileType(o->value());} open
            tooltip {Output File type} xywh {10 125 80 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
            code0 {for (int i = 0; performanceSettings.indexToFileType(i) != (char*) 0; i++) o->add(performanceSettings.indexToFileType(i));}
            code1 {o->value(performanceSettings.fileTypeToIndex(performanceSettings.soundFileType.c_str()));}
          } {}
          Fl_Choice {} {
            label {Sample format}
            callback {performanceSettings.soundSampleFormat = performanceSettings.indexToSampleFormat(o->value());} open
            tooltip {Output File format} xywh {175 125 80 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
            code0 {for (int i = 0; performanceSettings.indexToSampleFormat(i) != (char*) 0; i++) o->add(performanceSettings.indexToSampleFormat(i));}
            code1 {o->value(performanceSettings.sampleFormatToIndex(performanceSettings.soundSampleFormat.c_str()));}
          } {}
          Fl_Check_Button {} {
            label {Peak chunks}
            callback {performanceSettings.enablePeakChunks = (o->value() == 0 ? false : true);}
            tooltip {Write peak chunks in file header (opposite of -K)} xywh {10 160 20 25} down_box PLASTIC_DOWN_BOX
            code0 {o->value(performanceSettings.enablePeakChunks ? 1 : 0);}
          }
          Fl_Check_Button {} {
            label {Enable dither}
            callback {performanceSettings.enableDither = (o->value() == 0 ? false : true);}
            tooltip {Switch on dithering of output (-Z)} xywh {135 160 20 25} down_box PLASTIC_DOWN_BOX
            code0 {o->value(performanceSettings.enableDither ? 1 : 0);}
          }
          Fl_Check_Button {} {
            label {Rewrite header}
            callback {performanceSettings.rewriteHeader = (o->value() == 0 ? false : true);}
            tooltip {Continually rewrite the header to WAV or AIFF output soundfiles  (-R)} xywh {260 160 20 25} down_box PLASTIC_DOWN_BOX
            code0 {o->value(performanceSettings.rewriteHeader ? 1 : 0);}
          }
          Fl_Group {} {
            label {Soundfile tags} open
            xywh {10 245 380 225} box PLASTIC_UP_FRAME align 5
          } {
            Fl_Input {} {
              label Artist
              callback {CsoundGUIMain::stripString(performanceSettings.sndidArtist, o->value());}
              xywh {20 255 290 25} box THIN_DOWN_BOX align 8
              code0 {o->value(performanceSettings.sndidArtist.c_str());}
            }
            Fl_Input {} {
              label Comment
              callback {CsoundGUIMain::stripString(performanceSettings.sndidComment, o->value());}
              xywh {20 290 290 25} box THIN_DOWN_BOX align 8
              code0 {o->value(performanceSettings.sndidComment.c_str());}
            }
            Fl_Input {} {
              label Copyright
              callback {CsoundGUIMain::stripString(performanceSettings.sndidCopyright, o->value());}
              xywh {20 325 290 25} box THIN_DOWN_BOX align 8
              code0 {o->value(performanceSettings.sndidCopyright.c_str());}
            }
            Fl_Input {} {
              label Date
              callback {CsoundGUIMain::stripString(performanceSettings.sndidDate, o->value());}
              xywh {20 360 290 25} box THIN_DOWN_BOX align 8
              code0 {o->value(performanceSettings.sndidDate.c_str());}
            }
            Fl_Input {} {
              label Software
              callback {CsoundGUIMain::stripString(performanceSettings.sndidSoftware, o->value());}
              xywh {20 395 290 25} box THIN_DOWN_BOX align 8
              code0 {o->value(performanceSettings.sndidSoftware.c_str());}
            }
            Fl_Input {} {
              label Title
              callback {CsoundGUIMain::stripString(performanceSettings.sndidTitle, o->value());}
              xywh {20 430 290 25} box THIN_DOWN_BOX align 8
              code0 {o->value(performanceSettings.sndidTitle.c_str());}
            }
          }
          Fl_Check_Button {} {
            label {Do not write output to disk}
            callback {performanceSettings.disableDiskOutput = (o->value() == 0 ? false : true);}
            tooltip {Do not write sound output to disk (-n)} xywh {10 190 20 25} down_box PLASTIC_DOWN_BOX
            code0 {o->value(performanceSettings.disableDiskOutput ? 1 : 0);}
          }
        }
        Fl_Group RTaudioTab {
          label {Real time audio} open
          xywh {0 25 400 480} color 139 hide
          code0 {RTaudioTab = o;}
        } {
          Fl_Choice {} {
            label {Buffer size in sample frames (-b)}
            callback {{
  performanceSettings.bufFrames_SW = (1 << ((int) o->value() + 3));
  if (performanceSettings.bufFrames_SW < 16)
    numBuffersInput->deactivate();
  else
    numBuffersInput->activate();
}} open
            tooltip {Set software buffer size (-b)} xywh {10 230 80 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
            code0 {o->add("default|16|32|64|128|256|512|1024|2048|4096|8192|16384");}
            code1 {o->value((int) (std::log((double) performanceSettings.bufFrames_SW) / std::log(2.0) + 0.5) - 3);}
          } {}
          Fl_Spinner numBuffersInput {
            label {Number of buffers}
            callback {performanceSettings.nBuffers = (int) (o->value() + 0.5);}
            tooltip {Number of software buffers for hardware buffer (-B / -b)} xywh {10 265 80 25} box THIN_DOWN_BOX align 8
            code0 {o->range(2.0, 64.0);}
            code1 {o->step(1.0);}
            code2 {o->value((double) performanceSettings.nBuffers);}
            code3 {if (performanceSettings.bufFrames_SW < 16) o->deactivate();}
          }
          Fl_Check_Button {} {
            label {Perform in a separate thread}
            callback {performanceSettings.useThreads = (o->value() == 0 ? false : true);}
            xywh {10 305 20 25} down_box PLASTIC_DOWN_BOX
            code0 {o->value(performanceSettings.useThreads ? 1 : 0);}
          }
          Fl_Input_Choice rtAudioInputDeviceInput {
            label {Input Device}
            callback {Fl_Menu_Button *button_ = o->menubutton();
Fl_Input *input_ = o->input();
if (!button_->text()) return;
if ( strcmp(button_->text(),input_->value()) == 0 || button_->changed() )
  makeAudioDeviceName(std::string(o->value()), true);
else
  CsoundGUIMain::stripString(performanceSettings.rtAudioInputDevice, input_->value());} open
            tooltip {Select realtime Audio Input device from list, or type directly in text field} xywh {10 140 380 25} align 1 when 3
          } {}
          Fl_Input_Choice rtAudioOutputDeviceInput {
            label {Output Device}
            callback {Fl_Menu_Button *button_ = o->menubutton();
Fl_Input *input_ = o->input();
if (!button_->text()) return;
if ( strcmp(button_->text(),input_->value()) == 0 || button_->changed() )
  makeAudioDeviceName(std::string(o->value()), false);
else
  CsoundGUIMain::stripString(performanceSettings.rtAudioOutputDevice, input_->value());} open
            tooltip {Select realtime Audio Ouput device from list or type name or number directly in text field} xywh {10 90 380 25} align 1 when 3
          } {}
          Fl_Input jackClientNameInput {
            label {Jack client name (Linux and Mac OS X only)}
            callback {CsoundGUIMain::stripString(performanceSettings.jackClientName, o->value());}
            tooltip {Necessary when running more than one instance of Csound5 (leave empty for default)} xywh {10 190 380 25} box THIN_DOWN_BOX align 1 deactivate
            code0 {o->value(performanceSettings.jackClientName.c_str());}
          }
          Fl_Choice rtAudioModuleInput {
            label {Real time audio module}
            callback {CsoundGUIMain::stripString(performanceSettings.rtAudioModule,
                           rtAudioModules[o->value()].c_str());
querySoundDevices();
rtAudioOutputDeviceInput->value("dac");
rtAudioInputDeviceInput->value("adc");
performanceSettings.rtAudioOutputDevice = "dac";
performanceSettings.rtAudioInputDevice = "adc";} open
            tooltip {Select realtime Audio Module (-+rtaudio)} xywh {10 40 210 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8 when 1
          } {}
        }
        Fl_Group {} {
          label MIDI open
          xywh {0 25 405 470} color 139 hide
        } {
          Fl_Group {} {
            label {MIDI file I/O} open
            xywh {10 55 385 120} box PLASTIC_UP_FRAME labelsize 12 align 5
          } {
            Fl_Input midiInFileNameInput {
              label {Input file}
              callback {CsoundGUIMain::stripString(performanceSettings.midiInFileName, o->value());}
              tooltip {MIDI Input Filename (-F)} xywh {20 65 240 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.midiInFileName.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.midiInFileName, "Select MIDI input file", CSOUND5GUI_FILETYPE_MIDI, false);
  midiInFileNameInput->value(performanceSettings.midiInFileName.c_str());
}}
              tooltip {Browse MIDI input file} xywh {345 65 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX labelsize 12
            }
            Fl_Input {} {
              label {Mute track pattern}
              callback {CsoundGUIMain::stripString(performanceSettings.midiFileMuteTracks, o->value());}
              tooltip {MIDI file tracks to be muted, defined by a pattern of 0 (not muted) and 1 (muted) characters (-+mute_tracks=)} xywh {20 95 240 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.midiFileMuteTracks.c_str());}
            }
            Fl_Check_Button {} {
              label {Terminate performance on end of MIDI input file}
              callback {performanceSettings.terminateOnMidi = (o->value() == 0 ? false : true);}
              xywh {20 120 20 20} down_box PLASTIC_DOWN_BOX labelsize 12
              code0 {o->value(performanceSettings.terminateOnMidi ? 1 : 0);}
            }
            Fl_Input midiOutFileNameInput {
              label {Output file}
              callback {CsoundGUIMain::stripString(performanceSettings.midiOutFileName, o->value());}
              tooltip {MIDI Input Filename (--midioutfile=)} xywh {20 145 240 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.midiOutFileName.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.midiOutFileName, "Select MIDI output file", CSOUND5GUI_FILETYPE_MIDI, true);
  midiOutFileNameInput->value(performanceSettings.midiOutFileName.c_str());
}}
              tooltip {Browse MIDI output file} xywh {345 145 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX labelsize 12
            }
          }
          Fl_Group {} {
            label {Real time MIDI} open
            xywh {10 195 385 125} box PLASTIC_UP_FRAME labelsize 12 align 5
          } {
            Fl_Choice rtMidiModulesChoice {
              label {Real time MIDI module}
              callback {performanceSettings.rtMidiModule = rtMidiModules[o->value()];
queryMidiDevices();
if (performanceSettings.rtMidiModule == "virtual") {
  rtMidiOutputDeviceInput->value("0");
  rtMidiInputDeviceInput->value("0");
  performanceSettings.midiOutDevName = "0";
  performanceSettings.midiInDevName = "0";
}
else {
  rtMidiOutputDeviceInput->value("Set device here");
  rtMidiInputDeviceInput->value("Set device here");
  performanceSettings.midiOutDevName = "";
  performanceSettings.midiInDevName = "";
}} open
              tooltip {Selects MIDI module used for MIDI input and output (-+rtmidi)} xywh {20 205 205 20} down_box BORDER_BOX labelsize 12 align 8 textsize 12
            } {}
            Fl_Input_Choice rtMidiInputDeviceInput {
              label {Input Device}
              callback {Fl_Menu_Button *button_ = o->menubutton();
Fl_Input *input_ = o->input();
if (!button_->text()) return;
if ( strcmp(button_->text(),input_->value()) == 0 || button_->changed() )
  makeMidiDeviceName(std::string(o->value()), true);
else
  CsoundGUIMain::stripString(performanceSettings.midiInDevName, input_->value());} open
              tooltip {Select realtime Audio Ouput device from list or type name or number directly in text field} xywh {20 235 205 20} labelsize 12 align 8 when 3 textsize 12
              code0 {//o->value(performanceSettings.midiInDevName.c_str());}
            } {}
            Fl_Input_Choice rtMidiOutputDeviceInput {
              label {Output Device}
              callback {Fl_Menu_Button *button_ = o->menubutton();
Fl_Input *input_ = o->input();
if (!button_->text()) return;
if ( strcmp(button_->text(),input_->value()) == 0 || button_->changed() )
  makeMidiDeviceName(std::string(o->value()), false);
else
  CsoundGUIMain::stripString(performanceSettings.midiOutDevName, input_->value());} open
              tooltip {Select realtime Audio Ouput device from list or type name or number directly in text field} xywh {20 265 205 20} labelsize 12 align 8 when 3 textsize 12
              code0 {//o->value(performanceSettings.midiOutDevName.c_str());}
            } {}
          }
          Fl_Check_Button {} {
            label {Raw controller mode}
            callback {performanceSettings.rawControllerMode = (o->value() == 0 ? false : true);}
            tooltip {Disable special handling of MIDI controllers like sustain pedal, all notes off etc., allowing the use of all the 128 controllers for any purpose. (-+raw_controller_mode=)} xywh {20 289 20 26} down_box PLASTIC_DOWN_BOX labelsize 12
            code0 {o->value(performanceSettings.rawControllerMode ? 1 : 0);}
          }
          Fl_Group {} {
            label {MIDI to p-field routing} open
            xywh {10 340 385 125} box PLASTIC_UP_FRAME labelsize 12 align 5
          } {
            Fl_Spinner midiKeyMidiSpinner {
              label {MIDI key (MIDI)}
              callback {performanceSettings.midiKeyMidi = (int) o->value();}
              tooltip {Passes the MIDI key values as the specified p-field of the realtime triggered instrument} xywh {35 355 65 20} labelsize 12 align 8 textsize 11 deactivate
              code0 {o->value((double) performanceSettings.midiKeyMidi);}
              code1 {if (o->value() > 0) o->activate();}
            }
            Fl_Check_Button midiKeyMidiOn {
              callback {if (o->value() == 1) {
midiKeyCpsOn->clear();
midiKeyOctOn->clear();
midiKeyPchOn->clear();
}
updateGUIState_Midi();}
              xywh {195 355 20 20} down_box PLASTIC_DOWN_BOX
              code0 {if (performanceSettings.midiKeyMidi > 0) {o->set();}}
            }
            Fl_Spinner midiKeyCpsSpinner {
              label {MIDI key (CPS)}
              callback {performanceSettings.midiKeyCps = (int) o->value();}
              tooltip {Passes the MIDI key values in Hz as the specified p-field of the realtime triggered instrument} xywh {35 380 65 20} labelsize 12 align 8 textsize 11 deactivate
              code0 {o->value((double) performanceSettings.midiKeyCps);}
              code1 {if (o->value() > 0) o->activate();}
            }
            Fl_Check_Button midiKeyCpsOn {
              callback {if (o->value() == 1) {
midiKeyMidiOn->clear();
midiKeyOctOn->clear();
midiKeyPchOn->clear();
}
updateGUIState_Midi();}
              xywh {195 380 20 20} down_box PLASTIC_DOWN_BOX
              code0 {if (performanceSettings.midiKeyCps > 0) {o->set();}}
            }
            Fl_Spinner midiKeyOctSpinner {
              label {MIDI key (OCT)}
              callback {performanceSettings.midiKeyOct = (int) o->value();}
              tooltip {Passes the MIDI key values in linear octave value as the specified p-field of the realtime triggered instrument} xywh {35 405 65 20} labelsize 12 align 8 textsize 11 deactivate
              code0 {o->value((double) performanceSettings.midiKeyOct);}
              code1 {if (o->value() > 0) o->activate();}
            }
            Fl_Check_Button midiKeyOctOn {
              callback {if (o->value() == 1) {
midiKeyMidiOn->clear();
midiKeyCpsOn->clear();
midiKeyPchOn->clear();
}
updateGUIState_Midi();}
              xywh {195 405 20 20} down_box PLASTIC_DOWN_BOX
              code0 {if (performanceSettings.midiKeyOct > 0) {o->set();}}
            }
            Fl_Spinner midiKeyPchSpinner {
              label {MIDI key (PCH)}
              callback {performanceSettings.midiKeyPch = (int) o->value();}
              tooltip {Passes the MIDI key values in pitch class noatation as the specified p-field of the realtime triggered instrument} xywh {35 430 65 20} labelsize 12 align 8 textsize 11 deactivate
              code0 {o->value((double) performanceSettings.midiKeyPch);}
              code1 {if (o->value() > 0) o->activate();}
            }
            Fl_Check_Button midiKeyPchOn {
              callback {if (o->value() == 1) {
midiKeyMidiOn->clear();
midiKeyCpsOn->clear();
midiKeyOctOn->clear();
}
updateGUIState_Midi();}
              xywh {195 430 20 20} down_box PLASTIC_DOWN_BOX
              code0 {if (performanceSettings.midiKeyPch > 0) {o->set();}}
            }
            Fl_Spinner midiVelMidiSpinner {
              label {MIDI velocity (MIDI)}
              callback {performanceSettings.midiVelMidi = (int) o->value();}
              tooltip Passes xywh {235 380 120 20} labelsize 12 align 1 textsize 11 deactivate
              code0 {o->value((double) performanceSettings.midiVelMidi);}
              code1 {if (o->value() > 0) o->activate();}
            }
            Fl_Check_Button midiVelMidiOn {
              callback {if (o->value() == 1) {
midiVelAmpOn->clear();
}
updateGUIState_Midi();}
              xywh {355 380 20 20} down_box PLASTIC_DOWN_BOX
              code0 {if (performanceSettings.midiVelMidi > 0) {o->set();}}
            }
            Fl_Spinner midiVelAmpSpinner {
              label {MIDI velocity (AMP)}
              callback {performanceSettings.midiVelAmp = (int) o->value();}
              tooltip Passes xywh {235 415 120 20} labelsize 12 align 9 textsize 11 deactivate
              code0 {o->value((double) performanceSettings.midiVelAmp);}
              code1 {if (o->value() > 0) o->activate();}
            }
            Fl_Check_Button midiVelAmpOn {
              callback {if (o->value() == 1) {
midiVelMidiOn->clear();
}
updateGUIState_Midi();}
              xywh {355 415 20 20} down_box PLASTIC_DOWN_BOX
              code0 {if (performanceSettings.midiVelAmp > 0) {o->set();}}
            }
          }
        }
        Fl_Group {} {
          label Environment open
          xywh {0 25 400 480} color 139 hide
        } {
          Fl_Group {} {
            label {Environment variables} open
            tooltip {Environment varibles set locally only on compilation} xywh {10 50 380 160} box PLASTIC_UP_FRAME align 5
          } {
            Fl_Input sadirBox {
              label SADIR
              callback {CsoundGUIMain::stripString(performanceSettings.sadirPath, o->value());}
              xywh {20 60 270 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.sadirPath.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.sadirPath, "Select directory for analysis files", CSOUND5GUI_FILETYPE_DIRECTORY, false);
  sadirBox->value(performanceSettings.sadirPath.c_str());
}}
              xywh {360 60 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Input ssdirBox {
              label SSDIR
              callback {CsoundGUIMain::stripString(performanceSettings.ssdirPath, o->value());}
              xywh {20 90 270 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.ssdirPath.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.ssdirPath, "Select directory for sound file input", CSOUND5GUI_FILETYPE_DIRECTORY, false);
  ssdirBox->value(performanceSettings.ssdirPath.c_str());
}}
              xywh {360 90 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Input sfdirBox {
              label SFDIR
              callback {CsoundGUIMain::stripString(performanceSettings.sfdirPath, o->value());}
              xywh {20 120 270 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.sfdirPath.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.sfdirPath, "Select directory for sound file output", CSOUND5GUI_FILETYPE_DIRECTORY, false);
  sfdirBox->value(performanceSettings.sfdirPath.c_str());
}}
              xywh {360 120 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Input incdirBox {
              label INCDIR
              callback {CsoundGUIMain::stripString(performanceSettings.incdirPath, o->value());}
              xywh {20 150 270 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.incdirPath.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.incdirPath, "Select directory for include files", CSOUND5GUI_FILETYPE_DIRECTORY, false);
  incdirBox->value(performanceSettings.incdirPath.c_str());
}}
              xywh {360 150 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Input csdocdirBox {
              label CSDOCDIR
              callback {CsoundGUIMain::stripString(performanceSettings.csdocdirPath, o->value());}
              xywh {20 180 270 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(performanceSettings.csdocdirPath.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(performanceSettings.csdocdirPath, "Select directory for include files", CSOUND5GUI_FILETYPE_DIRECTORY, false);
  csdocdirBox->value(performanceSettings.csdocdirPath.c_str());
}}
              xywh {360 180 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
          }
          Fl_Group {} {
            label {Set strings (strset)} open
            xywh {10 230 380 265} box PLASTIC_UP_FRAME align 5
          } {
            Fl_Input {} {
              label 1
              callback {CsoundGUIMain::stripString(performanceSettings.strsets[0], o->value());}
              xywh {35 240 345 20} box THIN_DOWN_BOX labelsize 12 textsize 12
              code0 {o->value(performanceSettings.strsets[0].c_str());}
            }
            Fl_Input {} {
              label 2
              callback {CsoundGUIMain::stripString(performanceSettings.strsets[1], o->value());}
              xywh {35 265 345 20} box THIN_DOWN_BOX labelsize 12 textsize 12
              code0 {o->value(performanceSettings.strsets[1].c_str());}
            }
            Fl_Input {} {
              label 3
              callback {CsoundGUIMain::stripString(performanceSettings.strsets[2], o->value());}
              xywh {35 290 345 20} box THIN_DOWN_BOX labelsize 12 textsize 12
              code0 {o->value(performanceSettings.strsets[2].c_str());}
            }
            Fl_Input {} {
              label 4
              callback {CsoundGUIMain::stripString(performanceSettings.strsets[3], o->value());}
              xywh {35 315 345 20} box THIN_DOWN_BOX labelsize 12 textsize 12
              code0 {o->value(performanceSettings.strsets[3].c_str());}
            }
            Fl_Input {} {
              label 5
              callback {CsoundGUIMain::stripString(performanceSettings.strsets[4], o->value());}
              xywh {35 340 345 20} box THIN_DOWN_BOX labelsize 12 textsize 12
              code0 {o->value(performanceSettings.strsets[4].c_str());}
            }
            Fl_Input {} {
              label 6
              callback {CsoundGUIMain::stripString(performanceSettings.strsets[5], o->value());}
              xywh {35 365 345 20} box THIN_DOWN_BOX labelsize 12 textsize 12
              code0 {o->value(performanceSettings.strsets[5].c_str());}
            }
            Fl_Input {} {
              label 7
              callback {CsoundGUIMain::stripString(performanceSettings.strsets[6], o->value());}
              xywh {35 390 345 20} box THIN_DOWN_BOX labelsize 12 textsize 12
              code0 {o->value(performanceSettings.strsets[6].c_str());}
            }
            Fl_Input {} {
              label 8
              callback {CsoundGUIMain::stripString(performanceSettings.strsets[7], o->value());}
              xywh {35 415 345 20} box THIN_DOWN_BOX labelsize 12 textsize 12
              code0 {o->value(performanceSettings.strsets[7].c_str());}
            }
            Fl_Input {} {
              label 9
              callback {CsoundGUIMain::stripString(performanceSettings.strsets[8], o->value());}
              xywh {35 440 345 20} box THIN_DOWN_BOX labelsize 12 textsize 12
              code0 {o->value(performanceSettings.strsets[8].c_str());}
            }
            Fl_Input {} {
              label 10
              callback {CsoundGUIMain::stripString(performanceSettings.strsets[9], o->value());}
              xywh {35 465 345 20} box THIN_DOWN_BOX labelsize 12 textsize 12
              code0 {o->value(performanceSettings.strsets[9].c_str());}
            }
          }
        }
      }
      Fl_Button {} {
        label OK
        callback {status = 1;} selected
        xywh {255 510 60 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
      }
      Fl_Button {} {
        label Cancel
        callback {status = -1;}
        xywh {320 510 60 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
      }
    }
    code {{
setPerformanceSettingsWindow(0);
querySoundDevices();
queryMidiDevices();
}} {}
  }
  Function {~CsoundPerformanceSettingsPanel()} {open
  } {
    code {{
  if (window) {
    delete window;
    window = (Fl_Double_Window*) 0;
  }
}} {}
  }
  decl {std::vector<std::string> rtAudioModules;} {}
  decl {std::vector<std::string> rtMidiModules;} {}
  decl {std::vector<deviceInfo> rtAudioOutputDevices;} {}
  decl {std::vector<deviceInfo> rtAudioInputDevices;} {}
  decl {std::vector<deviceInfo> rtMidiInputDevices;} {}
  decl {std::vector<deviceInfo> rtMidiOutputDevices;} {}
  decl {void makeAudioDeviceName(std::string Name, bool isInput);} {}
  decl {void makeMidiDeviceName(std::string Name, bool isInput);} {}
  decl {void updateGUIState_Midi()} {}
  decl {void setPerformanceSettingsWindow(int action = 0);} {}
  decl {int getNumber(std::string module, std::vector<std::string> list)} {}
  decl {void querySoundDevices();} {}
  decl {void queryMidiDevices();} {}
}

decl {\#include "CsoundPerformanceSettingsPanel.cpp"} {}
