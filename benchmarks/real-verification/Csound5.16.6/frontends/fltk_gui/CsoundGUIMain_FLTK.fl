# data file for the Fltk User Interface Designer (fluid)
version 1.0107
do_not_include_H_from_C
header_name {.hpp}
code_name {.cpp}
decl {\#include <string>} {}

decl {\#include "CsoundGUI.hpp"} {}

class CsoundGUIMain {open
} {
  decl {CsoundGlobalSettings currentGlobalSettings;} {public
  }
  decl {CsoundPerformanceSettings currentPerformanceSettings;} {public
  }
  decl {CsoundUtilitySettings currentUtilitySettings;} {public
  }
  decl {CsoundGUIConsole consoleWindow;} {}
  decl {CSOUND *csound;} {}
  decl {CsoundPerformance *csPerf;} {}
  decl {int prvTime;} {}
  decl {bool performing;} {}
  decl {bool paused;} {}
  decl {CsoundGlobalSettingsPanel *globalSettingsWindow;} {}
  decl {CsoundPerformanceSettingsPanel *performanceSettingsWindow;} {}
  decl {CsoundUtilitiesWindow *utilitiesWindow;} {}
  decl {CsoundEditorWindow *orcEditorWindow;} {}
  decl {CsoundEditorWindow *scoEditorWindow;} {}
  decl {CsoundAboutWindow *aboutWindow;} {}
  decl {CsoundUtility *utility_listOpcodes;} {}
  decl {CsoundUtility *utility_cvanal;} {}
  decl {CsoundUtility *utility_pvanal;} {}
  decl {CsoundUtility *utility_hetro;} {}
  decl {CsoundUtility *utility_lpanal;} {}
  decl {CsoundUtility *utility_sndinfo;} {}
  decl {CsoundUtility *utility_srconv;} {}
  decl {CsoundUtility *utility_dnoise;} {}
  decl {int utilityState;} {public
  }
  Function {CsoundGUIMain()} {open
  } {
    code {{ // Init Code
  csound = (CSOUND*) 0;
  csPerf = (CsoundPerformance*) 0;
  prvTime = -1;
  performing = false;
  paused = true;
  globalSettingsWindow = (CsoundGlobalSettingsPanel*) 0;
  performanceSettingsWindow = (CsoundPerformanceSettingsPanel*) 0;
  utilitiesWindow = (CsoundUtilitiesWindow*) 0;
  orcEditorWindow = (CsoundEditorWindow*) 0;
  scoEditorWindow = (CsoundEditorWindow*) 0;
  aboutWindow = (CsoundAboutWindow*) 0;
  utility_listOpcodes = (CsoundUtility*) 0;
  utility_cvanal = (CsoundUtility*) 0;
  utility_pvanal = (CsoundUtility*) 0;
  utility_hetro = (CsoundUtility*) 0;
  utility_lpanal = (CsoundUtility*) 0;
  utility_sndinfo = (CsoundUtility*) 0;
  utility_srconv = (CsoundUtility*) 0;
  utility_dnoise = (CsoundUtility*) 0;
  utilityState = 0;
}} {}
    Fl_Window window {
      label {Csound 5 GUI} open
      xywh {836 485 440 335} type Double color 0 visible
    } {
      Fl_Group {} {open
        xywh {5 5 430 100} box PLASTIC_UP_BOX color 139 selection_color 35
      } {
        Fl_Input orcNameInput {
          label {Orchestra/CSD}
          callback {stripString(currentPerformanceSettings.orcName, o->value());
updateGUIState_orcName();} selected
          xywh {45 25 325 25} box THIN_DOWN_BOX color 55 align 1
          code0 {o->value(currentPerformanceSettings.orcName.c_str());}
        }
        Fl_Button orcNameButton {
          label {...}
          callback {pushOpenOrcButton();}
          tooltip {Browse orchestra or CSD file} xywh {15 25 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
        Fl_Button editOrcButton {
          label Edit
          callback {editOrcFile();}
          tooltip {Open orchestra or CSD file with external editor} xywh {375 25 50 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
        Fl_Input scoreNameInput {
          label {Score file}
          callback {stripString(currentPerformanceSettings.scoName, o->value());
updateGUIState_scoName();}
          xywh {45 70 325 25} box THIN_DOWN_BOX color 55 align 1
          code0 {o->value(currentPerformanceSettings.scoName.c_str());}
        }
        Fl_Button scoreNameButton {
          label {...}
          callback {pushOpenScoButton();}
          tooltip {Browse score file} xywh {15 70 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
        Fl_Button editScoreButton {
          label Edit
          callback {editScoreFile();}
          tooltip {Open score file with external editor} xywh {375 70 50 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
      }
      Fl_Group {} {open
        xywh {5 110 430 85} box PLASTIC_UP_BOX color 139 selection_color 35 align 17
      } {
        Fl_Input outfileNameInput {
          label {Output file/device}
          callback {stripString(currentPerformanceSettings.outputFileName, o->value());
updateGUIState_outFile();}
          xywh {50 130 260 25} box THIN_DOWN_BOX align 1
          code0 {o->value(currentPerformanceSettings.outputFileName.c_str());}
        }
        Fl_Button outfileNameButton {
          label {...}
          callback {{
  CsoundGUIMain::browseFile(currentPerformanceSettings.outputFileName, "Select output sound file", CSOUND5GUI_FILETYPE_AUDIO, true);
  outfileNameInput->value(currentPerformanceSettings.outputFileName.c_str());
  updateGUIState_outFile();
}}
          tooltip {Browse sound output file} xywh {15 130 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
        Fl_Button editOutfileButton {
          label Edit
          callback {editSoundFile(currentPerformanceSettings.outputFileName.c_str());}
          tooltip {Open output sound file with external editor} xywh {375 130 50 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
        Fl_Button playOutfileButton {
          label {@>}
          callback {playSoundFile(currentPerformanceSettings.outputFileName.c_str());}
          tooltip {Listen to output sound file with external player} xywh {320 130 45 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
        Fl_Check_Button realtimeIOToggle {
          label {Realtime I/O}
          callback {setRealtimeCheckbox(o->value());}
          xywh {45 160 120 25} down_box PLASTIC_DOWN_BOX
        }
        Fl_Button configureRealtimeIO {
          label Configure
          callback {openPerformanceSettingsWindow(2);}
          xywh {190 160 120 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
      }
      Fl_Group {} {open
        xywh {5 200 225 130} box PLASTIC_UP_BOX color 139 selection_color 35
      } {
        Fl_Output scoreTimeDisplay {
          tooltip {The current score time (hh:mm:ss)} xywh {15 210 205 50} box EMBOSSED_BOX color 32 selection_color 7 labelfont 13 textfont 4 textsize 24 textcolor 23
          code0 {o->value("  --:--:--.-");}
        }
        Fl_Button rewindButton {
          label {@|<}
          tooltip {Rewind to the beginning of the score} xywh {15 264 50 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
        Fl_Button playButton {
          label {@>}
          callback {pushPlayPauseButton();}
          tooltip {Play/Pause} xywh {66 264 50 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
        Fl_Button fastForwardButton {
          label {@>>}
          callback {if (performing && csPerf != (CsoundPerformance*) 0)
  csPerf->AdvanceScoreTime(10.0);}
          tooltip {Fast forward 10 seconds} xywh {118 264 50 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
        Fl_Button stopButton {
          label {@square}
          callback {pushStopButton();}
          tooltip Stop xywh {170 264 50 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
        Fl_Button applyScoreOffsetButton {
          label Goto
          callback {if (performing && csPerf != (CsoundPerformance*) 0) {
  if (currentPerformanceSettings.scoreOffsetSeconds >= 0.0)
    csPerf->SetScoreOffsetSeconds(currentPerformanceSettings.scoreOffsetSeconds, true);
}}
          tooltip {Set the current score position to the specified offset} xywh {15 295 50 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25
        }
        Fl_Value_Input scoreOffsetInput {
          label Seconds
          callback {currentPerformanceSettings.scoreOffsetSeconds = o->value();
if (performing && csPerf != (CsoundPerformance*) 0)
  csPerf->SetScoreOffsetSeconds(currentPerformanceSettings.scoreOffsetSeconds, false);}
          tooltip {Score offset in seconds} xywh {78 295 72 25} box THIN_DOWN_BOX align 8 maximum 10000
          code0 {o->value(currentPerformanceSettings.scoreOffsetSeconds);}
        }
      }
      Fl_Group {} {open
        xywh {235 200 200 75} box PLASTIC_UP_BOX color 139 selection_color 50
      } {
        Fl_Menu_Button {} {
          label Options
          callback {if (o->value() == 0)
  openGlobalSettingsWindow();
else if (o->value() == 1)
  openPerformanceSettingsWindow();} open
          tooltip {Set options for Csound and the GUI interface} xywh {245 210 85 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25 selection_color 50 align 20
          code0 {o->add("GUI...|Csound...");}
          code1 {o->value(0);}
        } {}
        Fl_Button {} {
          label {Utilities...}
          callback {openUtilitiesWindow();}
          tooltip {Open Csound utilities dialog} xywh {245 240 85 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25 selection_color 50 align 20
        }
        Fl_Button {} {
          label Messages
          callback {if (!consoleWindow.window->shown()) {
  consoleWindow.window->show();
  consoleWindow.window->resize(currentGlobalSettings.consolePosX,
                                currentGlobalSettings.consolePosY,
                                currentGlobalSettings.consoleWidth,
                                currentGlobalSettings.consoleHeight);
  }
else {
  currentGlobalSettings.consolePosX = consoleWindow.window->x();
  currentGlobalSettings.consolePosY = consoleWindow.window->y();
  currentGlobalSettings.consoleWidth = consoleWindow.window->w();
  currentGlobalSettings.consoleHeight = consoleWindow.window->h();
  consoleWindow.window->hide();
  }}
          tooltip {Show/Hide Csound console messages} xywh {340 210 85 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25 selection_color 50 align 20
        }
        Fl_Menu_Button {} {
          label Help
          callback {if (o->value() == 0)
  runHelpBrowser("index.html");
else if (o->value() == 1)
  openAboutWindow();} open
          xywh {340 240 85 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX color 25 selection_color 50 align 20
          code0 {o->add("Manual|About");}
          code1 {o->value(0);}
        } {}
      }
      Fl_Group {} {
        label {Csound5 GUI} open
        tooltip {This is the FLTK frontend for Csound5} xywh {235 280 200 50} box ROUNDED_FRAME selection_color 55 labeltype SHADOW_LABEL labelfont 5 labelsize 24 labelcolor 7 align 16
      } {}
    }
  }
  decl {~CsoundGUIMain();} {public
  }
  decl {void setTimeDisplay(double timeVal);} {public
  }
  decl {static int runCmd(std::string&);} {public
  }
  decl {static bool isEmptyString(std::string&);} {public
  }
  decl {static void stripString(std::string&, const char *);} {public
  }
  decl {static bool isCSDFile(std::string&);} {public
  }
  decl {static bool isRtAudioDevice(std::string&, bool);} {public
  }
  decl {static bool browseFile(std::string&, const char *, int, bool);} {public
  }
  decl {void updateGUIState_orcName();} {public
  }
  decl {void updateGUIState_scoName();} {public
  }
  decl {void updateGUIState_outFile();} {public
  }
  decl {void updateGUIState_controls();} {public
  }
  decl {void updateGUIState_MIDI();} {public
  }
  decl {void updateGUIState();} {public
  }
  decl {void updateGUIValues();} {public
  }
  decl {void run(int argc, char **argv);} {public
  }
  decl {void startPerformance();} {public
  }
  decl {void editOrcFile();} {public
  }
  decl {void editScoreFile();} {public
  }
  decl {void editSoundFile(const char *);} {public
  }
  decl {void playSoundFile(const char*);} {public
  }
  decl {std::string oldOutFilename;} {public
  }
  decl {void setRealtimeCheckbox(int checked);} {public
  }
  decl {void runHelpBrowser(string page);} {public
  }
  decl {static int yieldCallback(CSOUND *);} {}
  decl {void checkUtilities();} {}
  decl {void openGlobalSettingsWindow();} {public
  }
  decl {void closeGlobalSettingsWindow();} {}
  decl {void openPerformanceSettingsWindow(int tab = 0);} {public
  }
  decl {void closePerformanceSettingsWindow();} {public
  }
  decl {void openUtilitiesWindow();} {public
  }
  decl {void closeUtilitiesWindow();} {}
  decl {void openAboutWindow();} {public
  }
  decl {void closeAboutWindow();} {}
  decl {void openOrcEditor(string file);} {public
  }
  decl {void closeOrcEditor();} {public
  }
  decl {void openScoEditor(string file);} {public
  }
  decl {void closeScoEditor();} {public
  }
  decl {void startListOpcodes();} {public
  }
  decl {void stopListOpcodes();} {public
  }
  decl {void startCvanal();} {public
  }
  decl {void stopCvanal();} {public
  }
  decl {void startPvanal();} {public
  }
  decl {void stopPvanal();} {public
  }
  decl {void startHetro();} {public
  }
  decl {void stopHetro();} {public
  }
  decl {void startLpanal();} {public
  }
  decl {void stopLpanal();} {public
  }
  decl {void startSndinfo();} {public
  }
  decl {void stopSndinfo();} {public
  }
  decl {void startSrconv();} {public
  }
  decl {void stopSrconv();} {public
  }
  decl {void startDnoise();} {public
  }
  decl {void stopDnoise();} {public
  }
  decl {void pushPlayPauseButton();} {public
  }
  decl {void pushStopButton();} {public
  }
  decl {void pushRewindButton();} {public
  }
  decl {void pushOpenOrcButton();} {public
  }
  decl {void pushOpenScoButton();} {public
  }
}
