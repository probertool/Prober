# data file for the Fltk User Interface Designer (fluid)
version 1.0107
do_not_include_H_from_C
header_name {.hpp}
code_name {.cpp}
decl {\#include "CsoundGUI.hpp"} {}

class CsoundUtilitiesWindow {open
} {
  decl {CsoundGUIMain *p;} {}
  decl {CsoundUtilitySettings *u_cfg;} {}
  Function {CsoundUtilitiesWindow(CsoundGUIMain *p)} {open
  } {
    code {{
  this->p = p;
  this->u_cfg = &(p->currentUtilitySettings);
}} {}
    Fl_Window window {
      label Utilities open selected
      xywh {577 478 450 390} type Double visible
    } {
      Fl_Tabs {} {open
        xywh {0 0 450 390} box PLASTIC_THIN_UP_BOX selection_color 7
      } {
        Fl_Group {} {
          label Convolve open
          tooltip {Sound file analysis for convolve} xywh {0 25 450 365} color 139 labelsize 12 hide
        } {
          Fl_Group {} {open
            xywh {10 35 430 310} box PLASTIC_UP_FRAME
          } {}
          Fl_Button cvanalButton {
            label Start
            callback {if (p->utilityState & CSOUND5GUI_CVANAL_RUNNING)
  p->stopCvanal();
else
  p->startCvanal();}
            xywh {365 355 75 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            code0 {if (!(p->utilityState & CSOUND5GUI_CVANAL_RUNNING)) o->label("Start");}
            code1 {if (p->utilityState & CSOUND5GUI_CVANAL_RUNNING) o->label("Stop");}
          }
          Fl_Input cvanalInputFileInput {
            label {Input file}
            callback {CsoundGUIMain::stripString(u_cfg->cvanal_inputFile, o->value());}
            xywh {25 50 305 25} box THIN_DOWN_BOX align 8
            code0 {o->value(u_cfg->cvanal_inputFile.c_str());}
          }
          Fl_Button {} {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(u_cfg->cvanal_inputFile, "Select input file for convolve analysis", CSOUND5GUI_FILETYPE_AUDIO, false);
  cvanalInputFileInput->value(u_cfg->cvanal_inputFile.c_str());
}}
            tooltip {Browse input file for convolve analysis} xywh {410 50 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
          }
          Fl_Input cvanalOutputFileInput {
            label {Output file}
            callback {CsoundGUIMain::stripString(u_cfg->cvanal_outputFile, o->value());}
            xywh {25 85 305 25} box THIN_DOWN_BOX align 8
            code0 {o->value(u_cfg->cvanal_outputFile.c_str());}
          }
          Fl_Button {} {
            label {...}
            callback {{
  CsoundGUIMain::browseFile(u_cfg->cvanal_outputFile, "Select output file for convolve analysis", CSOUND5GUI_FILETYPE_CONVOLVE, true);
  cvanalOutputFileInput->value(u_cfg->cvanal_outputFile.c_str());
}}
            tooltip {Browse output file for convolve analysis} xywh {410 85 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
          }
          Fl_Spinner {} {
            label {Channel number (0: all)}
            callback {u_cfg->cvanal_channel = (int) (o->value() + 0.5);}
            xywh {25 120 60 25} align 8
            code0 {o->range(0.0, 8.0);}
            code1 {o->step(1.0);}
            code2 {o->value((double) u_cfg->cvanal_channel);}
          }
          Fl_Value_Input {} {
            label {Begin time in seconds}
            callback {u_cfg->cvanal_beginTime = o->value();}
            xywh {25 155 60 25} box THIN_DOWN_BOX align 8 maximum 10000
            code0 {o->value(u_cfg->cvanal_beginTime);}
          }
          Fl_Value_Input {} {
            label {Duration in seconds (<= 0: until end of input file)}
            callback {u_cfg->cvanal_duration = o->value();}
            xywh {25 190 60 25} box THIN_DOWN_BOX align 8 minimum -1 maximum 10000
            code0 {o->value(u_cfg->cvanal_duration);}
          }
        }
        Fl_Group {} {
          label PVOC open
          tooltip {Sound file analysis for PVOC} xywh {0 25 450 365} color 139 labelsize 12 hide
        } {
          Fl_Group {} {open
            xywh {10 35 430 310} box PLASTIC_UP_FRAME
          } {
            Fl_Input pvanalInputFileInput {
              label {Input file}
              callback {CsoundGUIMain::stripString(u_cfg->pvanal_inputFile, o->value());}
              xywh {20 45 305 25} box THIN_DOWN_BOX align 8
              code0 {o->value(u_cfg->pvanal_inputFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->pvanal_inputFile, "Select input file for PVOC analysis", CSOUND5GUI_FILETYPE_AUDIO, false);
  pvanalInputFileInput->value(u_cfg->pvanal_inputFile.c_str());
}}
              tooltip {Browse input file for PVOC analysis} xywh {405 45 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Input pvanalOutputFileInput {
              label {Output file}
              callback {CsoundGUIMain::stripString(u_cfg->pvanal_outputFile, o->value());}
              xywh {20 80 305 25} box THIN_DOWN_BOX align 8
              code0 {o->value(u_cfg->pvanal_outputFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->pvanal_outputFile, "Select output file for PVOC analysis", CSOUND5GUI_FILETYPE_PVOC, true);
  pvanalOutputFileInput->value(u_cfg->pvanal_outputFile.c_str());
}}
              tooltip {Browse output file for PVOC analysis} xywh {405 80 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Spinner {} {
              label {Channel number (0: all)}
              callback {u_cfg->pvanal_channel = (int) (o->value() + 0.5);}
              xywh {20 115 60 25} box THIN_DOWN_BOX align 8
              code0 {o->range(0.0, 8.0);}
              code1 {o->step(1.0);}
              code2 {o->value((double) u_cfg->pvanal_channel);}
            }
            Fl_Value_Input {} {
              label {Begin time in seconds}
              callback {u_cfg->pvanal_beginTime = o->value();}
              xywh {20 150 60 25} box THIN_DOWN_BOX align 8 maximum 10000
              code0 {o->value(u_cfg->pvanal_beginTime);}
            }
            Fl_Value_Input {} {
              label {Duration in seconds (<= 0: until end of input file)}
              callback {u_cfg->pvanal_duration = o->value();}
              xywh {20 185 60 25} box THIN_DOWN_BOX align 8 minimum -1 maximum 10000
              code0 {o->value(u_cfg->pvanal_duration);}
            }
            Fl_Choice {} {
              label {Frame size}
              callback {u_cfg->pvanal_frameSize = (1 << ((int) (o->value() + 0.5) + 8));} open
              xywh {20 220 115 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
              code0 {o->add("256|512|1024|2048|4096|8192");}
              code1 {o->value((int) (std::log((double) u_cfg->pvanal_frameSize) / std::log(2.0) + 0.5) - 8);}
            } {}
            Fl_Choice {} {
              label Overlaps
              callback {{
  u_cfg->pvanal_overlap = (o->value() > 0 ? (1 << (int) (o->value() + 0.5)) : 0);
  if (u_cfg->pvanal_overlap > 1) {
    pvanalHopSizeInput->deactivate();
    pvanalHopSizeInput->value((int) (std::log((double) (u_cfg->pvanal_frameSize / u_cfg->pvanal_overlap)) / std::log(2.0) + 0.5) - 4);
  }
  else {
    pvanalHopSizeInput->value((int) (std::log((double) u_cfg->pvanal_hopSize) / std::log(2.0) + 0.5) - 4);
    pvanalHopSizeInput->activate();
  }
}} open
              xywh {235 220 115 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
              code0 {o->add("Use hop size|2|4|8|16");}
              code1 {o->value(u_cfg->pvanal_overlap > 1 ? (int) (std::log((double) u_cfg->pvanal_frameSize) / std::log(2.0) + 0.5) : 0);}
            } {}
            Fl_Choice {} {
              label {Window type}
              callback {u_cfg->pvanal_windowType = o->value();} open
              xywh {20 255 115 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
              code0 {o->add("Hamming|von Hann|Kaiser");}
              code1 {o->value(u_cfg->pvanal_windowType);}
            } {}
            Fl_Choice pvanalHopSizeInput {
              label {Hop size}
              callback {{
  u_cfg->pvanal_hopSize = (1 << ((int) (o->value() + 0.5) + 4));
  if (u_cfg->pvanal_hopSize >= u_cfg->pvanal_frameSize) {
    u_cfg->pvanal_hopSize = u_cfg->pvanal_frameSize >> 1;
    o->value((int) (std::log((double) u_cfg->pvanal_hopSize) / std::log(2.0) + 0.5) - 4);
  }
}} open
              xywh {235 255 115 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
              code0 {o->add("16|32|64|128|256|512|1024|2048|4096");}
              code1 {if (u_cfg->pvanal_overlap < 2) o->value((int) (std::log((double) u_cfg->pvanal_hopSize) / std::log(2.0) + 0.5) - 4);}
              code2 {if (u_cfg->pvanal_overlap >= 2) { o->deactivate(); o->value((int) (std::log((double) (u_cfg->pvanal_frameSize / u_cfg->pvanal_overlap)) / std::log(2.0) + 0.5) - 4); }}
            } {}
          }
          Fl_Button pvanalButton {
            label Start
            callback {if (p->utilityState & CSOUND5GUI_PVANAL_RUNNING)
  p->stopPvanal();
else
  p->startPvanal();}
            xywh {365 355 75 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            code0 {if (!(p->utilityState & CSOUND5GUI_PVANAL_RUNNING)) o->label("Start");}
            code1 {if (p->utilityState & CSOUND5GUI_PVANAL_RUNNING) o->label("Stop");}
          }
        }
        Fl_Group {} {
          label Adsyn open
          tooltip {Sound file analysis for adsyn} xywh {0 25 450 365} color 139 labelsize 12 hide
        } {
          Fl_Group {} {open
            xywh {10 35 430 310} box PLASTIC_UP_FRAME
          } {
            Fl_Input hetroInputFileInput {
              label {Input file}
              callback {CsoundGUIMain::stripString(u_cfg->hetro_inputFile, o->value());}
              xywh {20 45 305 25} box THIN_DOWN_BOX align 8
              code0 {o->value(u_cfg->hetro_inputFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->hetro_inputFile, "Select input file for hetrodyne analysis", CSOUND5GUI_FILETYPE_AUDIO, false);
  hetroInputFileInput->value(u_cfg->hetro_inputFile.c_str());
}}
              tooltip {Browse input file for hetrodyne analysis} xywh {405 45 25 25}
            }
            Fl_Input hetroOutputFileInput {
              label {Output file}
              callback {CsoundGUIMain::stripString(u_cfg->hetro_outputFile, o->value());}
              xywh {20 80 305 25} box THIN_DOWN_BOX align 8
              code0 {o->value(u_cfg->hetro_outputFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->hetro_outputFile, "Select output file for hetrodyne analysis", CSOUND5GUI_FILETYPE_HETRO, true);
  hetroOutputFileInput->value(u_cfg->hetro_outputFile.c_str());
}}
              tooltip {Browse output file for hetrodyne analysis} xywh {405 80 25 25}
            }
            Fl_Spinner {} {
              label {Channel number}
              callback {u_cfg->hetro_channel = (int) (o->value() + 0.5);}
              xywh {20 115 60 25} box THIN_DOWN_BOX align 8
              code0 {o->range(1.0, 8.0);}
              code1 {o->step(1.0);}
              code2 {o->value((double) u_cfg->hetro_channel);}
            }
            Fl_Value_Input {} {
              label {Begin time in seconds}
              callback {u_cfg->hetro_beginTime = o->value();}
              xywh {20 150 60 25} box THIN_DOWN_BOX align 8 maximum 10000
              code0 {o->value(u_cfg->hetro_beginTime);}
            }
            Fl_Value_Input {} {
              label {Duration in seconds (<= 0: until end of input file)}
              callback {u_cfg->hetro_duration = o->value();}
              xywh {20 185 60 25} box THIN_DOWN_BOX align 8 minimum -1 maximum 10000
              code0 {o->value(u_cfg->hetro_duration);}
            }
            Fl_Value_Input {} {
              label {Starting frequency}
              callback {u_cfg->hetro_startFreq = o->value();}
              tooltip {Estimated starting frequency of the fundamental} xywh {20 220 60 25} box THIN_DOWN_BOX align 8 minimum 10 maximum 1000
              code0 {o->value(u_cfg->hetro_startFreq);}
            }
            Fl_Value_Input {} {
              label {Number of partials}
              callback {u_cfg->hetro_partials = (int) (o->value() + 0.5);}
              tooltip {Number of harmonic partials sought in the audio file} xywh {235 220 60 25} box THIN_DOWN_BOX align 8 minimum 1 maximum 1000 step 1
              code0 {o->value((double) u_cfg->hetro_partials);}
            }
            Fl_Value_Input {} {
              label Breakpoints
              callback {u_cfg->hetro_breakPoints = (int) (o->value() + 0.5);}
              tooltip {Initial number of analysis breakpoints in each amplitude and frequency track} xywh {20 255 60 25} box THIN_DOWN_BOX align 8 minimum 10 maximum 10000 step 1
              code0 {o->value((double) u_cfg->hetro_breakPoints);}
            }
            Fl_Value_Input {} {
              label {Amplitude threshold}
              callback {u_cfg->hetro_minAmp = o->value();}
              xywh {235 255 60 25} box THIN_DOWN_BOX align 8 minimum -1 maximum 1e+06
              code0 {o->value(u_cfg->hetro_minAmp);}
            }
            Fl_Value_Input {} {
              label {Cutoff frequency}
              callback {u_cfg->hetro_cutoffFreq = o->value();}
              tooltip {If > 0, use a 3rd order Butterworth low-pass filter with this cutoff frequency (in Hz)} xywh {20 290 60 25} box THIN_DOWN_BOX align 8 minimum -1 maximum 20000
              code0 {o->value(u_cfg->hetro_cutoffFreq);}
            }
            Fl_Value_Input {} {
              label {Maximum amplitude}
              callback {u_cfg->hetro_maxAmp = o->value();}
              xywh {235 290 60 25} box THIN_DOWN_BOX align 8 minimum -1 maximum 1e+06
              code0 {o->value(u_cfg->hetro_maxAmp);}
            }
          }
          Fl_Button hetroButton {
            label Start
            callback {if (p->utilityState & CSOUND5GUI_HETRO_RUNNING)
  p->stopHetro();
else
  p->startHetro();}
            xywh {365 355 75 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            code0 {if (!(p->utilityState & CSOUND5GUI_HETRO_RUNNING)) o->label("Start");}
            code1 {if (p->utilityState & CSOUND5GUI_HETRO_RUNNING) o->label("Stop");}
          }
        }
        Fl_Group {} {
          label LPC open
          tooltip {Linear predictive analysis} xywh {0 25 450 365} color 139 labelsize 12 hide
        } {
          Fl_Group {} {open
            xywh {10 35 430 310} box PLASTIC_UP_FRAME
          } {
            Fl_Input lpanalInputFileInput {
              label {Input file}
              callback {CsoundGUIMain::stripString(u_cfg->lpanal_inputFile, o->value());}
              xywh {20 45 310 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(u_cfg->lpanal_inputFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->lpanal_inputFile, "Select input file for LPC analysis", CSOUND5GUI_FILETYPE_AUDIO, false);
  lpanalInputFileInput->value(u_cfg->lpanal_inputFile.c_str());
}}
              tooltip {Browse input file for LPC analysis} xywh {410 45 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Input lpanalOutputFileInput {
              label {Output file}
              callback {CsoundGUIMain::stripString(u_cfg->lpanal_outputFile, o->value());}
              xywh {20 75 310 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(u_cfg->lpanal_outputFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->lpanal_outputFile, "Select output file for LPC analysis", CSOUND5GUI_FILETYPE_LPC, true);
  lpanalOutputFileInput->value(u_cfg->lpanal_outputFile.c_str());
}}
              tooltip {Browse output file for LPC analysis} xywh {410 75 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Spinner {} {
              label {Channel number}
              callback {u_cfg->lpanal_channel = (int) (o->value() + 0.5);}
              xywh {20 105 60 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->range(1.0, 8.0);}
              code1 {o->step(1.0);}
              code2 {o->value((double) u_cfg->lpanal_channel);}
            }
            Fl_Value_Input {} {
              label {Begin time in seconds}
              callback {u_cfg->lpanal_beginTime = o->value();}
              xywh {20 135 60 20} box THIN_DOWN_BOX labelsize 12 align 8 maximum 10000 textsize 12
              code0 {o->value(u_cfg->lpanal_beginTime);}
            }
            Fl_Value_Input {} {
              label {Duration in seconds (<= 0: until end of input file)}
              callback {u_cfg->lpanal_duration = o->value();}
              xywh {20 165 60 20} box THIN_DOWN_BOX labelsize 12 align 8 minimum -1 maximum 10000 textsize 12
              code0 {o->value(u_cfg->lpanal_duration);}
            }
            Fl_Value_Input {} {
              label {Number of poles}
              callback {u_cfg->lpanal_poles = (int) (o->value() + 0.5);}
              xywh {20 195 60 20} box THIN_DOWN_BOX labelsize 12 align 8 minimum 5 maximum 50 step 1 textsize 12
              code0 {o->value((double) u_cfg->lpanal_poles);}
            }
            Fl_Value_Input {} {
              label {Hop size}
              callback {u_cfg->lpanal_hopSize = (int) (o->value() + 0.5);}
              tooltip {Hop size (in samples) between frames of analysis} xywh {235 195 60 20} box THIN_DOWN_BOX labelsize 12 align 8 minimum 25 maximum 500 step 1 textsize 12
              code0 {o->value((double) u_cfg->lpanal_hopSize);}
            }
            Fl_Value_Input {} {
              label {Minimum frequency}
              callback {u_cfg->lpanal_minFreq = o->value();}
              tooltip {Lowest frequency (in Hz) of pitch tracking. 0 means no pitch tracking} xywh {20 225 60 20} box THIN_DOWN_BOX labelsize 12 align 8 maximum 500 textsize 12
              code0 {o->value(u_cfg->lpanal_minFreq);}
            }
            Fl_Choice {} {
              label Verbosity
              callback {u_cfg->lpanal_verbosity = o->value();} open
              xywh {235 225 75 20} box THIN_DOWN_BOX down_box BORDER_BOX labelsize 12 align 8 textsize 12
              code0 {o->add("Normal|Verbose|Debug");}
              code1 {o->value(u_cfg->lpanal_verbosity);}
            } {}
            Fl_Value_Input {} {
              label {Maximum frequency}
              callback {u_cfg->lpanal_maxFreq = o->value();}
              tooltip {Highest frequency (in Hz) of pitch tracking. The narrower the pitch range, the more accurate the pitch estimate} xywh {20 255 60 20} box THIN_DOWN_BOX labelsize 12 align 8 minimum 10 maximum 1500 textsize 12
              code0 {o->value(u_cfg->lpanal_maxFreq);}
            }
            Fl_Check_Button {} {
              label {Alternate storage}
              callback {u_cfg->lpanal_altMode = (o->value() == 0 ? false : true);}
              tooltip {Write a file with filter poles values rather than the usual filter coefficient files} xywh {235 255 20 20} down_box DOWN_BOX labelsize 12
              code0 {o->value(u_cfg->lpanal_altMode ? 1 : 0);}
            }
            Fl_Input {} {
              label Comment
              callback {CsoundGUIMain::stripString(u_cfg->lpanal_comment, o->value());}
              xywh {20 285 340 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(u_cfg->lpanal_comment.c_str());}
            }
          }
          Fl_Button lpanalButton {
            label Start
            callback {if (p->utilityState & CSOUND5GUI_LPANAL_RUNNING)
  p->stopLpanal();
else
  p->startLpanal();}
            xywh {365 355 75 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            code0 {if (!(p->utilityState & CSOUND5GUI_LPANAL_RUNNING)) o->label("Start");}
            code1 {if (p->utilityState & CSOUND5GUI_LPANAL_RUNNING) o->label("Stop");}
          }
        }
        Fl_Group {} {
          label Srconv open
          tooltip {Sample rate conversion} xywh {0 25 450 365} color 139 labelsize 12 hide
        } {
          Fl_Group {} {open
            xywh {10 35 430 310} box PLASTIC_UP_FRAME
          } {
            Fl_Input srconvInputFileInput {
              label {Input file}
              callback {CsoundGUIMain::stripString(u_cfg->srconv_inputFile, o->value());}
              xywh {20 45 305 25} box THIN_DOWN_BOX align 8
              code0 {o->value(u_cfg->srconv_inputFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->srconv_inputFile, "Select input file for sample rate conversion", CSOUND5GUI_FILETYPE_AUDIO, false);
  srconvInputFileInput->value(u_cfg->srconv_inputFile.c_str());
}}
              tooltip {Browse input file for sample rate conversion} xywh {405 45 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Input srconvOutputFileInput {
              label {Output file}
              callback {CsoundGUIMain::stripString(u_cfg->srconv_outputFile, o->value());}
              xywh {20 80 305 25} box THIN_DOWN_BOX align 8
              code0 {o->value(u_cfg->srconv_outputFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->srconv_outputFile, "Select output file for sample rate conversion", CSOUND5GUI_FILETYPE_AUDIO, true);
  srconvOutputFileInput->value(u_cfg->srconv_outputFile.c_str());
}}
              tooltip {Browse output file for sample rate conversion} xywh {405 80 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Value_Input {} {
              label {Pitch transposition ratio}
              callback {u_cfg->srconv_pitchRatio = o->value();
if (u_cfg->srconv_pitchRatio <= 0.0) {
  srconvSampleRateInput->value(u_cfg->srconv_sampleRate);
  srconvSampleRateInput->activate();
}
else {
  srconvSampleRateInput->deactivate();
  srconvSampleRateInput->value(-1.0);
}}
              tooltip {Ratio of the original and new sample rate, a lower value means higher output sample rate (if <= 0, use output sample rate as set below instead)} xywh {20 115 60 25} box THIN_DOWN_BOX align 8 when 4 minimum -1 maximum 100
              code0 {o->value(u_cfg->srconv_pitchRatio);}
            }
            Fl_Value_Input srconvSampleRateInput {
              label {Output sample rate (Hz)}
              callback {u_cfg->srconv_sampleRate = o->value();
if (u_cfg->srconv_sampleRate <= 0.0) {
  u_cfg->srconv_sampleRate = 44100.0;
  o->value(u_cfg->srconv_sampleRate);
}}
              xywh {20 150 60 25} box THIN_DOWN_BOX align 8 when 4 minimum -1 maximum 1e+06
              code0 {if (u_cfg->srconv_pitchRatio <= 0.0) o->value(u_cfg->srconv_sampleRate);}
              code1 {if (u_cfg->srconv_pitchRatio > 0.0) { o->deactivate(); o->value(-1.0); }}
            }
            Fl_Spinner {} {
              label Quality
              callback {u_cfg->srconv_quality = (int) (o->value() + 0.5);}
              xywh {20 185 60 25} box THIN_DOWN_BOX align 8
              code0 {o->range(1.0, 8.0);}
              code1 {o->step(1.0);}
              code2 {o->value((double) u_cfg->srconv_quality);}
            }
            Fl_Check_Button {} {
              label {Enable peak chunks}
              callback {u_cfg->srconv_peakChunks = (o->value() == 0 ? false : true);}
              xywh {235 185 25 25} down_box DOWN_BOX
              code0 {o->value(u_cfg->srconv_peakChunks ? 1 : 0);}
            }
            Fl_Choice {} {
              label {File type}
              callback {u_cfg->srconv_fileType = o->value();} open
              tooltip {Type of output file} xywh {20 220 80 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
              code0 {o->add("RAW|WAV|AIFF|IRCAM");}
              code1 {o->value(u_cfg->srconv_fileType);}
            } {}
            Fl_Check_Button {} {
              label {Rewrite header}
              callback {u_cfg->srconv_rewriteHeader = (o->value() == 0 ? false : true);}
              xywh {235 220 25 25} down_box DOWN_BOX
              code0 {o->value(u_cfg->srconv_rewriteHeader ? 1 : 0);}
            }
            Fl_Choice {} {
              label {Sample format}
              callback {u_cfg->srconv_sampleFormat = o->value();} open
              tooltip {Sample format of output file} xywh {20 255 80 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
              code0 {o->add("uchar|short|long|float");}
              code1 {o->value(u_cfg->srconv_sampleFormat);}
            } {}
            Fl_Choice {} {
              label Heartbeat
              callback {u_cfg->srconv_heartBeat = o->value();} open
              xywh {235 255 80 25} box THIN_DOWN_BOX down_box BORDER_BOX align 8
              code0 {o->add("None|Bar|Dot|Time|Bell");}
              code1 {o->value(u_cfg->srconv_heartBeat);}
            } {}
          }
          Fl_Button srconvButton {
            label Start
            callback {if (p->utilityState & CSOUND5GUI_SRCONV_RUNNING)
  p->stopSrconv();
else
  p->startSrconv();}
            xywh {365 355 75 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            code0 {if (!(p->utilityState & CSOUND5GUI_SRCONV_RUNNING)) o->label("Start");}
            code1 {if (p->utilityState & CSOUND5GUI_SRCONV_RUNNING) o->label("Stop");}
          }
        }
        Fl_Group {} {
          label Dnoise open
          tooltip {Noise reduction} xywh {0 25 450 365} color 139 labelsize 12
        } {
          Fl_Group {} {open
            xywh {10 35 430 310} box PLASTIC_UP_FRAME
          } {
            Fl_Input dnoiseInputFileInput {
              label {Input file}
              callback {CsoundGUIMain::stripString(u_cfg->dnoise_inputFile, o->value());}
              xywh {20 45 310 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(u_cfg->dnoise_inputFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->dnoise_inputFile, "Select input file for noise reduction", CSOUND5GUI_FILETYPE_AUDIO, false);
  dnoiseInputFileInput->value(u_cfg->dnoise_inputFile.c_str());
}}
              tooltip {Browse input file for noise reduction} xywh {410 45 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Input dnoiseOutputFileInput {
              label {Output file}
              callback {CsoundGUIMain::stripString(u_cfg->dnoise_outputFile, o->value());}
              xywh {20 75 310 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(u_cfg->dnoise_outputFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->dnoise_outputFile, "Select output file for noise reduction", CSOUND5GUI_FILETYPE_AUDIO, true);
  dnoiseOutputFileInput->value(u_cfg->dnoise_outputFile.c_str());
}}
              tooltip {Browse output file for noise reduction} xywh {410 75 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Input dnoiseNoiseFileInput {
              label {Noise file}
              callback {CsoundGUIMain::stripString(u_cfg->dnoise_noiseFile, o->value());}
              tooltip {Noise reference sound file} xywh {20 105 310 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->value(u_cfg->dnoise_noiseFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->dnoise_noiseFile, "Select noise reference file", CSOUND5GUI_FILETYPE_AUDIO, false);
  dnoiseNoiseFileInput->value(u_cfg->dnoise_noiseFile.c_str());
}}
              tooltip {Browse noise reference file} xywh {410 105 20 20} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
            Fl_Choice {} {
              label {FFT size}
              callback {u_cfg->dnoise_fftSize = o->value();} open
              xywh {20 135 75 20} box THIN_DOWN_BOX down_box BORDER_BOX labelsize 12 align 8 textsize 12
              code0 {o->add("64|128|256|512|1024|2048|4096|8192");}
              code1 {o->value(u_cfg->dnoise_fftSize);}
            } {}
            Fl_Choice {} {
              label {Synthesis w. length}
              callback {u_cfg->dnoise_synLen = o->value();} open
              tooltip {Synthesis window length} xywh {235 135 75 20} box THIN_DOWN_BOX down_box BORDER_BOX labelsize 12 align 8 textsize 12
              code0 {o->add("Default|64|128|256|512|1024|2048|4096|8192|16384|32768");}
              code1 {o->value(u_cfg->dnoise_synLen);}
            } {}
            Fl_Choice {} {
              label {Analysis window size}
              callback {u_cfg->dnoise_overlap = o->value();} open
              xywh {20 165 75 20} box THIN_DOWN_BOX down_box BORDER_BOX labelsize 12 align 8 textsize 12
              code0 {o->add("4 * FFT size|2 * FFT size|1 * FFT size|0.5 * FFT size");}
              code1 {o->value(u_cfg->dnoise_overlap);}
            } {}
            Fl_Choice {} {
              label {Decimation factor}
              callback {u_cfg->dnoise_decFact = o->value();} open
              xywh {235 165 75 20} box THIN_DOWN_BOX down_box BORDER_BOX labelsize 12 align 8 textsize 12
              code0 {o->add("Default|8|16|32|64|128|256|512|1024|2048|4096");}
              code1 {o->value(u_cfg->dnoise_decFact);}
            } {}
            Fl_Value_Input {} {
              label {Begin time}
              callback {u_cfg->dnoise_beginTime = o->value();}
              tooltip {Begin time in noise reference file} xywh {20 195 60 20} box THIN_DOWN_BOX labelsize 12 align 8 maximum 100000 textsize 12
              code0 {o->value(u_cfg->dnoise_beginTime);}
            }
            Fl_Spinner {} {
              label {FFT frames to average}
              callback {u_cfg->dnoise_numFFT = (int) (o->value() + 0.5);}
              tooltip {Number of FFT frames to average over} xywh {235 195 60 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->range(1.0, 20.0);}
              code1 {o->step(1.0);}
              code2 {o->value((double) u_cfg->dnoise_numFFT);}
            }
            Fl_Value_Input {} {
              label {End time}
              callback {u_cfg->dnoise_endTime = o->value();}
              tooltip {End time in noise reference file (if <= 0, read until the end of the file)} xywh {20 225 60 20} box THIN_DOWN_BOX labelsize 12 align 8 minimum -1 maximum 100000 textsize 12
              code0 {o->value(u_cfg->dnoise_endTime);}
            }
            Fl_Value_Input {} {
              label {Threshold (dB)}
              callback {u_cfg->dnoise_threshold = o->value();}
              tooltip {Threshold above noise reference in dB} xywh {235 225 60 20} box THIN_DOWN_BOX labelsize 12 align 8 minimum -12 maximum 90 step 0.1 textsize 12
              code0 {o->value(u_cfg->dnoise_threshold);}
            }
            Fl_Spinner {} {
              label {Noise gate sharpness}
              callback {u_cfg->dnoise_sharpness = (int) (o->value() + 0.5);}
              tooltip {Sharpness of noise-gate turnoff} xywh {20 255 60 20} box THIN_DOWN_BOX labelsize 12 align 8 textsize 12
              code0 {o->range(1.0, 5.0);}
              code1 {o->step(1.0);}
              code2 {o->value((double) u_cfg->dnoise_sharpness);}
            }
            Fl_Value_Input {} {
              label {Minimum gain (dB)}
              callback {u_cfg->dnoise_minGain = o->value();}
              tooltip {Minimum gain of noise-gate when off in dB} xywh {235 255 60 20} box THIN_DOWN_BOX labelsize 12 align 8 minimum -96 maximum -6 step 0.1 textsize 12
              code0 {o->value(u_cfg->dnoise_minGain);}
            }
            Fl_Choice {} {
              label {File type}
              callback {u_cfg->dnoise_fileType = o->value();} open
              tooltip {Type of output file} xywh {20 285 75 20} box THIN_DOWN_BOX down_box BORDER_BOX labelsize 12 align 8 textsize 12
              code0 {o->add("RAW|WAV|AIFF|IRCAM");}
              code1 {o->value(u_cfg->dnoise_fileType);}
            } {}
            Fl_Choice {} {
              label Heartbeat
              callback {u_cfg->dnoise_heartBeat = o->value();} open
              xywh {235 285 75 20} box THIN_DOWN_BOX down_box BORDER_BOX labelsize 12 align 8 textsize 12
              code0 {o->add("None|Bar|Dot|Time|Bell");}
              code1 {o->value(u_cfg->dnoise_heartBeat);}
            } {}
            Fl_Choice {} {
              label {Sample format}
              callback {u_cfg->dnoise_sampleFormat = o->value();} open
              tooltip {Sample format of output file} xywh {20 315 75 20} box THIN_DOWN_BOX down_box BORDER_BOX labelsize 12 align 8 textsize 12
              code0 {o->add("uchar|short|long|float");}
              code1 {o->value(u_cfg->dnoise_sampleFormat);}
            } {}
            Fl_Check_Button {} {
              label {Rewrite header}
              callback {u_cfg->dnoise_rewriteHeader = (o->value() == 0 ? false : true);}
              xywh {210 315 20 20} down_box DOWN_BOX labelsize 12
              code0 {o->value(u_cfg->dnoise_rewriteHeader ? 1 : 0);}
            }
            Fl_Check_Button {} {
              label Verbose
              callback {u_cfg->dnoise_verbose = (o->value() == 0 ? false : true);}
              xywh {345 315 20 20} down_box DOWN_BOX labelsize 12
              code0 {o->value(u_cfg->dnoise_verbose ? 1 : 0);}
            }
          }
          Fl_Button dnoiseButton {
            label Start
            callback {if (p->utilityState & CSOUND5GUI_DNOISE_RUNNING)
  p->stopDnoise();
else
  p->startDnoise();}
            xywh {365 355 75 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            code0 {if (!(p->utilityState & CSOUND5GUI_DNOISE_RUNNING)) o->label("Start");}
            code1 {if (p->utilityState & CSOUND5GUI_DNOISE_RUNNING) o->label("Stop");}
          }
        }
        Fl_Group {} {
          label Sndinfo open
          tooltip {Print information about a sound file} xywh {0 25 450 365} color 139 labelsize 12 hide
        } {
          Fl_Group {} {open
            xywh {10 35 430 310} box PLASTIC_UP_FRAME
          } {
            Fl_Input sndinfoInputFileInput {
              label {Input file}
              callback {CsoundGUIMain::stripString(u_cfg->sndinfo_inputFile, o->value());}
              xywh {20 45 305 25} box THIN_DOWN_BOX align 8
              code0 {o->value(u_cfg->sndinfo_inputFile.c_str());}
            }
            Fl_Button {} {
              label {...}
              callback {{
  CsoundGUIMain::browseFile(u_cfg->sndinfo_inputFile, "Select sound file", CSOUND5GUI_FILETYPE_AUDIO, false);
  sndinfoInputFileInput->value(u_cfg->sndinfo_inputFile.c_str());
}}
              tooltip {Browse sound file} xywh {405 45 25 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            }
          }
          Fl_Button sndinfoButton {
            label Start
            callback {if (p->utilityState & CSOUND5GUI_SNDINFO_RUNNING)
  p->stopSndinfo();
else
  p->startSndinfo();}
            xywh {365 355 75 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            code0 {if (!(p->utilityState & CSOUND5GUI_SNDINFO_RUNNING)) o->label("Start");}
            code1 {if (p->utilityState & CSOUND5GUI_SNDINFO_RUNNING) o->label("Stop");}
          }
        }
        Fl_Group {} {
          label {List opcodes} open
          tooltip {List opcodes in this version of Csound} xywh {0 25 450 365} color 139 labelsize 12 hide
        } {
          Fl_Group {} {open
            xywh {10 35 430 310} box PLASTIC_UP_FRAME
          } {
            Fl_Check_Button {} {
              label {Print detailed opcode information}
              callback {u_cfg->listOpcodes_printDetails = (o->value() == 0 ? false : true);}
              xywh {20 45 25 25} down_box DOWN_BOX
              code0 {o->value(u_cfg->listOpcodes_printDetails ? 1 : 0);}
            }
          }
          Fl_Button listOpcodesButton {
            label Start
            callback {if (p->utilityState & CSOUND5GUI_LISTOPCODES_RUNNING)
  p->stopListOpcodes();
else
  p->startListOpcodes();}
            xywh {365 355 75 25} box PLASTIC_UP_BOX down_box PLASTIC_DOWN_BOX
            code0 {if (!(p->utilityState & CSOUND5GUI_LISTOPCODES_RUNNING)) o->label("Start");}
            code1 {if (p->utilityState & CSOUND5GUI_LISTOPCODES_RUNNING) o->label("Stop");}
          }
        }
      }
    }
  }
  Function {~CsoundUtilitiesWindow()} {open
  } {
    code {{
  if (window) {
    delete window;
    window = (Fl_Double_Window*) 0;
  }
}} {}
  }
}
