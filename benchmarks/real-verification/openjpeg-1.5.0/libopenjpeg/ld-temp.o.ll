; ModuleID = 'ld-temp.o'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.j2k_prog_order = type { i32, [5 x i8] }
%struct.opj_dec_mstabent = type { i32, i32, void (%struct.opj_j2k*)* }
%struct.opj_j2k = type { %struct.opj_common_struct*, i32, i32, i32, i32, i32*, i32, i32, i8*, i32, i32, i32, i8**, i32*, %struct.opj_tcp*, %struct.opj_image*, %struct.opj_cp*, %struct.opj_codestream_info*, %struct.opj_cio* }
%struct.opj_common_struct = type { %struct.opj_event_mgr*, i8*, i32, i32, i8*, i8*, i8* }
%struct.opj_event_mgr = type { void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*)* }
%struct.opj_tcp = type { i32, i32, i32, i32, i32, [100 x float], i32, i32, [32 x %struct.opj_poc], i8*, i8*, i32, i32, i32, [100 x float], %struct.opj_tccp* }
%struct.opj_poc = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tccp = type { i32, i32, i32, i32, i32, i32, i32, [97 x %struct.opj_stepsize], i32, i32, [33 x i32], [33 x i32] }
%struct.opj_stepsize = type { i32, i32 }
%struct.opj_image = type { i32, i32, i32, i32, i32, i32, %struct.opj_image_comp*, i8*, i32 }
%struct.opj_image_comp = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32* }
%struct.opj_cp = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i32*, i32, i8*, i8*, i32, i32, i32, i32, %struct.opj_tcp*, i32* }
%struct.opj_codestream_info = type { double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32, %struct.opj_marker_info_t*, i32, i32, i32, i32, %struct.opj_tile_info* }
%struct.opj_marker_info_t = type { i16, i32, i32 }
%struct.opj_tile_info = type { double*, i32, i32, i32, i32, [33 x i32], [33 x i32], [33 x i32], [33 x i32], %struct.opj_packet_info*, i32, double, i32, %struct.opj_marker_info_t*, i32, i32, %struct.opj_tp_info* }
%struct.opj_packet_info = type { i32, i32, i32, double }
%struct.opj_tp_info = type { i32, i32, i32, i32, i32 }
%struct.opj_cio = type { %struct.opj_common_struct*, i32, i8*, i32, i8*, i8*, i8* }
%struct.opj_mqc_state = type { i32, i32, %struct.opj_mqc_state*, %struct.opj_mqc_state* }
%struct.opj_bio = type { i8*, i8*, i8*, i32, i32 }
%struct.opj_jp2 = type { %struct.opj_common_struct*, %struct.opj_j2k*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, %struct.opj_jp2_comps*, i32, i32, i32, i32 }
%struct.opj_jp2_comps = type { i32, i32, i32 }
%struct.opj_tcd_tilecomp = type { i32, i32, i32, i32, i32, %struct.opj_tcd_resolution*, i32*, i32 }
%struct.opj_tcd_resolution = type { i32, i32, i32, i32, i32, i32, i32, [3 x %struct.opj_tcd_band] }
%struct.opj_tcd_band = type { i32, i32, i32, i32, i32, %struct.opj_tcd_precinct*, i32, float }
%struct.opj_tcd_precinct = type { i32, i32, i32, i32, i32, i32, %union.anon, %struct.opj_tgt_tree*, %struct.opj_tgt_tree* }
%union.anon = type { %struct.opj_tcd_cblk_enc* }
%struct.opj_tcd_cblk_enc = type { i8*, %struct.opj_tcd_layer*, %struct.opj_tcd_pass*, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_layer = type { i32, i32, double, i8* }
%struct.opj_tcd_pass = type { i32, double, i32, i32 }
%struct.opj_tgt_tree = type { i32, i32, i32, %struct.opj_tgt_node* }
%struct.opj_tgt_node = type { %struct.opj_tgt_node*, i32, i32, i32 }
%struct.dwt_local = type { i32*, i32, i32, i32 }
%struct.v4dwt_local = type { %union.v4*, i32, i32, i32 }
%union.v4 = type { [4 x float] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.opj_image_comptparm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_pi_iterator = type { i8, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.opj_poc, i32, %struct.opj_pi_comp*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_pi_comp = type { i32, i32, i32, %struct.opj_pi_resolution* }
%struct.opj_pi_resolution = type { i32, i32, i32, i32 }
%struct.opj_dparameters = type { i32, i32, [4096 x i8], [4096 x i8], i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd = type { i32, i32, i32, i32, i32, %struct.opj_common_struct*, %struct.opj_tcd_image*, %struct.opj_image*, %struct.opj_cp*, %struct.opj_tcd_tile*, %struct.opj_tcp*, i32, double }
%struct.opj_tcd_image = type { i32, i32, %struct.opj_tcd_tile* }
%struct.opj_tcd_tile = type { i32, i32, i32, i32, i32, %struct.opj_tcd_tilecomp*, i32, double, [100 x double], i32 }
%struct.opj_jpt_msg_header = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_cparameters = type { i32, i32, i32, i32, i32, i32, i32, i32, i32*, i8*, i32, i32, [32 x %struct.opj_poc], i32, i32, [100 x float], [100 x float], i32, i32, i32, i32, i32, i32, i32, i32, [33 x i32], [33 x i32], [4096 x i8], [4096 x i8], i32, [4096 x i8], i32, i32, i32, i32, i32, i32, i32, i32, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], i32, i32, i32, i32, [16 x i32], [16 x i32], i32, i32, i32, i8, i8, i8, i32 }
%struct.rusage = type { %struct.timeval, %struct.timeval, %union.anon.32, %union.anon.32, %union.anon.32, %union.anon.32, %union.anon.32, %union.anon.32, %union.anon.32, %union.anon.32, %union.anon.32, %union.anon.32, %union.anon.32, %union.anon.32, %union.anon.32, %union.anon.32 }
%struct.timeval = type { i64, i64 }
%union.anon.32 = type { i64 }
%struct.opj_jp2_color = type { i8*, i32, %struct.opj_jp2_cdef*, %struct.opj_jp2_pclr*, i8 }
%struct.opj_jp2_cdef = type { %struct.opj_jp2_cdef_info*, i16 }
%struct.opj_jp2_cdef_info = type { i16, i16, i16 }
%struct.opj_jp2_pclr = type { i32*, i8*, i8*, %struct.opj_jp2_cmap_comp*, i16, i16 }
%struct.opj_jp2_cmap_comp = type { i16, i8, i8 }
%struct.opj_mqc = type { i32, i32, i32, i8*, i8*, i8*, [19 x %struct.opj_mqc_state*], %struct.opj_mqc_state** }
%struct.opj_raw = type { i8, i32, i32, i32, i8*, i8*, i8* }
%struct.opj_t1 = type { %struct.opj_common_struct*, %struct.opj_mqc*, %struct.opj_raw*, i32*, i16*, i32, i32, i32, i32, i32 }
%struct.opj_tcd_cblk_dec = type { i8*, %struct.opj_tcd_seg*, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_seg = type { i8**, i32, i32, i32, i32, i32, i32 }
%struct.opj_t2 = type { %struct.opj_common_struct*, %struct.opj_image*, %struct.opj_cp* }

@.str = private unnamed_addr constant [50 x i8] c"Error allocating memory for compressed bitstream\0A\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"write error\0A\00", align 1
@.str.2 = private unnamed_addr constant [82 x i8] c"read error: passed the end of the codestream (start = %d, current = %d, end = %d\0A\00", align 1
@dwt_norms = internal unnamed_addr constant [4 x [10 x double]] [[10 x double] [double 1.000000e+00, double 1.500000e+00, double 2.750000e+00, double 5.375000e+00, double 1.068000e+01, double 2.134000e+01, double 4.267000e+01, double 0x4055551EB851EB85, double 1.707000e+02, double 3.413000e+02], [10 x double] [double 1.038000e+00, double 1.592000e+00, double 2.919000e+00, double 5.703000e+00, double 1.133000e+01, double 2.264000e+01, double 4.525000e+01, double 9.048000e+01, double 1.809000e+02, double 0.000000e+00], [10 x double] [double 1.038000e+00, double 1.592000e+00, double 2.919000e+00, double 5.703000e+00, double 1.133000e+01, double 2.264000e+01, double 4.525000e+01, double 9.048000e+01, double 1.809000e+02, double 0.000000e+00], [10 x double] [double 7.186000e-01, double 0x3FED7F62B6AE7D56, double 1.586000e+00, double 3.043000e+00, double 6.019000e+00, double 1.201000e+01, double 2.400000e+01, double 4.797000e+01, double 9.593000e+01, double 0.000000e+00]], align 16
@dwt_norms_real = internal unnamed_addr constant [4 x [10 x double]] [[10 x double] [double 1.000000e+00, double 1.965000e+00, double 4.177000e+00, double 8.403000e+00, double 1.690000e+01, double 3.384000e+01, double 0x4050EC28F5C28F5C, double 1.353000e+02, double 2.706000e+02, double 5.409000e+02], [10 x double] [double 2.022000e+00, double 3.989000e+00, double 8.355000e+00, double 1.704000e+01, double 3.427000e+01, double 6.863000e+01, double 1.373000e+02, double 2.746000e+02, double 5.490000e+02, double 0.000000e+00], [10 x double] [double 2.022000e+00, double 3.989000e+00, double 8.355000e+00, double 1.704000e+01, double 3.427000e+01, double 6.863000e+01, double 1.373000e+02, double 2.746000e+02, double 5.490000e+02, double 0.000000e+00], [10 x double] [double 2.080000e+00, double 3.865000e+00, double 8.307000e+00, double 1.718000e+01, double 3.471000e+01, double 6.959000e+01, double 1.393000e+02, double 2.786000e+02, double 5.572000e+02, double 0.000000e+00]], align 16
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [38 x i8] c"Unable to allocate memory for image.\0A\00", align 1
@j2k_prog_order_list = global [6 x %struct.j2k_prog_order] [%struct.j2k_prog_order { i32 4, [5 x i8] c"CPRL\00" }, %struct.j2k_prog_order { i32 0, [5 x i8] c"LRCP\00" }, %struct.j2k_prog_order { i32 3, [5 x i8] c"PCRL\00" }, %struct.j2k_prog_order { i32 1, [5 x i8] c"RLCP\00" }, %struct.j2k_prog_order { i32 2, [5 x i8] c"RPCL\00" }, %struct.j2k_prog_order { i32 -1, [5 x i8] zeroinitializer }], align 16
@.str.4 = private unnamed_addr constant [39 x i8] c"%.8x: expected a marker instead of %x\0A\00", align 1
@j2k_dec_mstab = global [20 x %struct.opj_dec_mstabent] [%struct.opj_dec_mstabent { i32 65359, i32 1, void (%struct.opj_j2k*)* @j2k_read_soc }, %struct.opj_dec_mstabent { i32 65424, i32 12, void (%struct.opj_j2k*)* @j2k_read_sot }, %struct.opj_dec_mstabent { i32 65427, i32 16, void (%struct.opj_j2k*)* @j2k_read_sod }, %struct.opj_dec_mstabent { i32 65497, i32 8, void (%struct.opj_j2k*)* @j2k_read_eoc }, %struct.opj_dec_mstabent { i32 65361, i32 2, void (%struct.opj_j2k*)* @j2k_read_siz }, %struct.opj_dec_mstabent { i32 65362, i32 20, void (%struct.opj_j2k*)* @j2k_read_cod }, %struct.opj_dec_mstabent { i32 65363, i32 20, void (%struct.opj_j2k*)* @j2k_read_coc }, %struct.opj_dec_mstabent { i32 65374, i32 20, void (%struct.opj_j2k*)* @j2k_read_rgn }, %struct.opj_dec_mstabent { i32 65372, i32 20, void (%struct.opj_j2k*)* @j2k_read_qcd }, %struct.opj_dec_mstabent { i32 65373, i32 20, void (%struct.opj_j2k*)* @j2k_read_qcc }, %struct.opj_dec_mstabent { i32 65375, i32 20, void (%struct.opj_j2k*)* @j2k_read_poc }, %struct.opj_dec_mstabent { i32 65365, i32 4, void (%struct.opj_j2k*)* @j2k_read_tlm }, %struct.opj_dec_mstabent { i32 65367, i32 4, void (%struct.opj_j2k*)* @j2k_read_plm }, %struct.opj_dec_mstabent { i32 65368, i32 16, void (%struct.opj_j2k*)* @j2k_read_plt }, %struct.opj_dec_mstabent { i32 65376, i32 4, void (%struct.opj_j2k*)* @j2k_read_ppm }, %struct.opj_dec_mstabent { i32 65377, i32 16, void (%struct.opj_j2k*)* @j2k_read_ppt }, %struct.opj_dec_mstabent { i32 65425, i32 0, void (%struct.opj_j2k*)* null }, %struct.opj_dec_mstabent { i32 65379, i32 4, void (%struct.opj_j2k*)* @j2k_read_crg }, %struct.opj_dec_mstabent { i32 65380, i32 20, void (%struct.opj_j2k*)* @j2k_read_com }, %struct.opj_dec_mstabent { i32 0, i32 20, void (%struct.opj_j2k*)* @j2k_read_unk }], align 16
@.str.1.5 = private unnamed_addr constant [28 x i8] c"%.8x: unexpected marker %x\0A\00", align 1
@.str.2.6 = private unnamed_addr constant [22 x i8] c"Main Header decoded.\0A\00", align 1
@.str.3.7 = private unnamed_addr constant [22 x i8] c"Incomplete bitstream\0A\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"Unknown marker\0A\00", align 1
@.str.10 = private unnamed_addr constant [148 x i8] c"bad number of subbands in Sqcx (%d) regarding to J2K_MAXBANDS (%d) \0A- limiting number of bands to J2K_MAXBANDS and try to move to the next markers\0A\00", align 1
@.str.9 = private unnamed_addr constant [158 x i8] c"Error decoding component %d.\0AThe number of resolutions to remove is higher than the number of resolutions of this component\0AModify the cp_reduce parameter.\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [53 x i8] c"%s: invalid image size (x0:%d, x1:%d, y0:%d, y1:%d)\0A\00", align 1
@.str.7 = private unnamed_addr constant [98 x i8] c"SOT marker inconsistency in tile %d: tile-part index greater (%d) than number of tile-parts (%d)\0A\00", align 1
@.str.4.8 = private unnamed_addr constant [60 x i8] c"[JPT-stream] : Expecting Main header first [class_Id %d] !\0A\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"[JPT-stream] : Expecting Tile info !\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"tile number %d / %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [22 x i8] c"Expected JP2H Marker\0A\00", align 1
@.str.6.13 = private unnamed_addr constant [22 x i8] c"Expected IHDR Marker\0A\00", align 1
@.str.7.14 = private unnamed_addr constant [21 x i8] c"Error with IHDR Box\0A\00", align 1
@.str.8.15 = private unnamed_addr constant [22 x i8] c"Expected BPCC Marker\0A\00", align 1
@.str.9.16 = private unnamed_addr constant [21 x i8] c"Error with BPCC Box\0A\00", align 1
@.str.10.17 = private unnamed_addr constant [26 x i8] c"Error with COLR box size\0A\00", align 1
@.str.11.18 = private unnamed_addr constant [21 x i8] c"Error with COLR Box\0A\00", align 1
@.str.5.19 = private unnamed_addr constant [42 x i8] c"Cannot handle box sizes higher than 2^32\0A\00", align 1
@.str.13 = private unnamed_addr constant [20 x i8] c"Expected JP Marker\0A\00", align 1
@.str.14 = private unnamed_addr constant [22 x i8] c"Error with JP Marker\0A\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"Error with JP Box size\0A\00", align 1
@.str.16 = private unnamed_addr constant [22 x i8] c"Expected FTYP Marker\0A\00", align 1
@.str.17 = private unnamed_addr constant [21 x i8] c"Error with FTYP Box\0A\00", align 1
@.str.1.20 = private unnamed_addr constant [32 x i8] c"Failed to decode jp2 structure\0A\00", align 1
@.str.2.21 = private unnamed_addr constant [28 x i8] c"Failed to decode J2K image\0A\00", align 1
@.str.12.22 = private unnamed_addr constant [46 x i8] c"Error with pcol value %d (max: %d). skipping\0A\00", align 1
@.str.3.23 = private unnamed_addr constant [69 x i8] c"Invalid number of components specified while setting up JP2 encoder\0A\00", align 1
@.str.4.24 = private unnamed_addr constant [24 x i8] c"Failed to encode image\0A\00", align 1
@.str.29 = private unnamed_addr constant [48 x i8] c"Forbidden value encounter in message header !!\0A\00", align 1
@mct_norms = internal unnamed_addr constant [3 x double] [double 1.732000e+00, double 8.292000e-01, double 8.292000e-01], align 16
@mct_norms_real = internal unnamed_addr constant [3 x double] [double 1.732000e+00, double 1.805000e+00, double 1.573000e+00], align 16
@mqc_states = internal global [94 x %struct.opj_mqc_state] [%struct.opj_mqc_state { i32 22017, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 48) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 72) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 22017, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 72) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 48) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 13313, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 96) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 288) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 13313, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 120) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 312) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 6145, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 144) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 432) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 6145, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 168) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 456) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 2753, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 192) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 576) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 2753, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 216) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 600) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 1313, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 240) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1392) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 1313, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 264) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1416) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 545, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1824) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1584) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 545, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1848) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1608) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 22017, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 336) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 312) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 22017, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 360) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 288) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 21505, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 384) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 672) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 21505, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 408) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 696) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 18433, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 432) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 672) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 18433, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 456) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 696) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 14337, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 480) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 672) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 14337, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 504) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 696) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 12289, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 528) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 816) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 12289, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 552) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 840) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 9217, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 576) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 864) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 9217, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 600) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 888) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 7169, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 624) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 960) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 7169, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 648) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 984) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 5633, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1392) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1008) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 5633, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1416) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1032) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 22017, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 720) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 696) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 22017, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 744) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 672) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 21505, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 768) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 672) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 21505, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 792) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 696) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 20737, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 816) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 720) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 20737, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 840) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 744) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 18433, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 864) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 768) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 18433, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 888) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 792) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 14337, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 912) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 816) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 14337, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 936) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 840) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 13313, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 960) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 864) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 13313, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 984) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 888) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 12289, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1008) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 912) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 12289, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1032) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 936) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 10241, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1056) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 912) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 10241, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1080) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 936) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 9217, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1104) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 960) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 9217, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1128) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 984) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 8705, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1152) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1008) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 8705, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1176) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1032) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 7169, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1200) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1056) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 7169, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1224) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1080) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 6145, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1248) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1104) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 6145, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1272) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1128) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 5633, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1296) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1152) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 5633, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1320) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1176) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 5121, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1344) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1200) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 5121, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1368) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1224) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 4609, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1392) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1248) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 4609, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1416) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1272) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 4353, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1440) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1296) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 4353, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1464) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1320) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 2753, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1488) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1344) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 2753, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1512) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1368) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 2497, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1536) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1392) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 2497, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1560) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1416) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 2209, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1584) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1440) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 2209, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1608) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1464) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 1313, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1632) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1488) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 1313, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1656) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1512) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 1089, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1680) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1536) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 1089, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1704) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1560) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 673, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1728) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1584) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 673, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1752) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1608) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 545, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1776) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1632) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 545, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1800) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1656) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 321, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1824) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1680) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 321, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1848) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1704) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 273, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1872) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1728) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 273, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1896) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1752) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 133, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1920) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1776) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 133, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1944) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1800) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 73, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1968) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1824) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 73, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1992) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1848) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 37, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2016) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1872) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 37, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2040) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1896) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 21, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2064) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1920) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 21, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2088) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1944) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 9, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2112) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1968) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 9, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2136) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 1992) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 5, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2160) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2016) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 5, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2184) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2040) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 1, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2160) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2064) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 1, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2184) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2088) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 22017, i32 0, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2208) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2208) to %struct.opj_mqc_state*) }, %struct.opj_mqc_state { i32 22017, i32 1, %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2232) to %struct.opj_mqc_state*), %struct.opj_mqc_state* bitcast (i8* getelementptr (i8, i8* bitcast ([94 x %struct.opj_mqc_state]* @mqc_states to i8*), i64 2232) to %struct.opj_mqc_state*) }], align 16
@.str.30 = private unnamed_addr constant [6 x i8] c"1.5.0\00", align 1
@.str.1.31 = private unnamed_addr constant [168 x i8] c"Set index to NULL when calling the opj_encode function.\0ATo extract the index, use the opj_encode_with_info() function.\0ANo index will be generated during this encoding\0A\00", align 1
@lut_nmsedec_sig = internal unnamed_addr constant [128 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 384, i16 768, i16 1152, i16 1536, i16 1920, i16 2304, i16 2688, i16 3072, i16 3456, i16 3840, i16 4224, i16 4608, i16 4992, i16 5376, i16 5760, i16 6144, i16 6528, i16 6912, i16 7296, i16 7680, i16 8064, i16 8448, i16 8832, i16 9216, i16 9600, i16 9984, i16 10368, i16 10752, i16 11136, i16 11520, i16 11904, i16 12288, i16 12672, i16 13056, i16 13440, i16 13824, i16 14208, i16 14592, i16 14976, i16 15360, i16 15744, i16 16128, i16 16512, i16 16896, i16 17280, i16 17664, i16 18048, i16 18432, i16 18816, i16 19200, i16 19584, i16 19968, i16 20352, i16 20736, i16 21120, i16 21504, i16 21888, i16 22272, i16 22656, i16 23040, i16 23424, i16 23808, i16 24192, i16 24576, i16 24960, i16 25344, i16 25728, i16 26112, i16 26496, i16 26880, i16 27264, i16 27648, i16 28032, i16 28416, i16 28800, i16 29184, i16 29568, i16 29952, i16 30336], align 16
@lut_nmsedec_sig0 = internal unnamed_addr constant [128 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 128, i16 128, i16 128, i16 128, i16 256, i16 256, i16 256, i16 384, i16 384, i16 512, i16 512, i16 640, i16 640, i16 768, i16 768, i16 896, i16 1024, i16 1024, i16 1152, i16 1280, i16 1408, i16 1408, i16 1536, i16 1664, i16 1792, i16 1920, i16 2048, i16 2176, i16 2304, i16 2432, i16 2560, i16 2688, i16 2944, i16 3072, i16 3200, i16 3328, i16 3584, i16 3712, i16 3840, i16 4096, i16 4224, i16 4480, i16 4608, i16 4864, i16 4992, i16 5248, i16 5376, i16 5632, i16 5888, i16 6016, i16 6272, i16 6528, i16 6784, i16 6912, i16 7168, i16 7424, i16 7680, i16 7936, i16 8192, i16 8448, i16 8704, i16 8960, i16 9216, i16 9472, i16 9856, i16 10112, i16 10368, i16 10624, i16 11008, i16 11264, i16 11520, i16 11904, i16 12160, i16 12544, i16 12800, i16 13184, i16 13440, i16 13824, i16 14080, i16 14464, i16 14848, i16 15104, i16 15488, i16 15872, i16 16256, i16 16512, i16 16896, i16 17280, i16 17664, i16 18048, i16 18432, i16 18816, i16 19200, i16 19584, i16 19968, i16 20352, i16 20864, i16 21248, i16 21632, i16 22016, i16 22528, i16 22912, i16 23296, i16 23808, i16 24192, i16 24704, i16 25088, i16 25600, i16 25984, i16 26496, i16 26880, i16 27392, i16 27904, i16 28288, i16 28800, i16 29312, i16 29824, i16 30208, i16 30720, i16 31232, i16 31744, i16 32256], align 16
@lut_ctxno_zc = internal unnamed_addr constant [1024 x i8] calign 16
@lut_ctxno_sc = internal unnamed_addr constant [256 x i8] calign 16
@lut_spb = internal unnamed_addr constant [256 x i8] calign 16
@t1_updateflags.mod = internal unnamed_addr constant [8 x i16] [i16 64, i16 1088, i16 32, i16 544, i16 128, i16 2176, i16 16, i16 272], align 16
@lut_nmsedec_ref = internal unnamed_addr constant [128 x i16] [i16 6144, i16 6016, i16 5888, i16 5760, i16 5632, i16 5504, i16 5376, i16 5248, i16 5120, i16 4992, i16 4864, i16 4736, i16 4608, i16 4480, i16 4352, i16 4224, i16 4096, i16 3968, i16 3840, i16 3712, i16 3584, i16 3456, i16 3328, i16 3200, i16 3072, i16 2944, i16 2816, i16 2688, i16 2560, i16 2432, i16 2304, i16 2176, i16 2048, i16 1920, i16 1792, i16 1664, i16 1536, i16 1408, i16 1280, i16 1152, i16 1024, i16 896, i16 768, i16 640, i16 512, i16 384, i16 256, i16 128, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 128, i16 256, i16 384, i16 512, i16 640, i16 768, i16 896, i16 1024, i16 1152, i16 1280, i16 1408, i16 1536, i16 1664, i16 1792, i16 1920, i16 2048, i16 2176, i16 2304, i16 2432, i16 2560, i16 2688, i16 2816, i16 2944, i16 3072, i16 3200, i16 3328, i16 3456, i16 3584, i16 3712, i16 3840, i16 3968, i16 4096, i16 4224, i16 4352, i16 4480, i16 4608, i16 4736, i16 4864, i16 4992, i16 5120, i16 5248, i16 5376, i16 5504, i16 5632, i16 5760, i16 5888, i16 6016], align 16
@lut_nmsedec_ref0 = internal unnamed_addr constant [128 x i16] [i16 8192, i16 7936, i16 7680, i16 7424, i16 7168, i16 6912, i16 6784, i16 6528, i16 6272, i16 6016, i16 5888, i16 5632, i16 5376, i16 5248, i16 4992, i16 4864, i16 4608, i16 4480, i16 4224, i16 4096, i16 3840, i16 3712, i16 3584, i16 3328, i16 3200, i16 3072, i16 2944, i16 2688, i16 2560, i16 2432, i16 2304, i16 2176, i16 2048, i16 1920, i16 1792, i16 1664, i16 1536, i16 1408, i16 1408, i16 1280, i16 1152, i16 1024, i16 1024, i16 896, i16 768, i16 768, i16 640, i16 640, i16 512, i16 512, i16 384, i16 384, i16 256, i16 256, i16 256, i16 128, i16 128, i16 128, i16 128, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 128, i16 128, i16 128, i16 128, i16 256, i16 256, i16 256, i16 384, i16 384, i16 512, i16 512, i16 640, i16 640, i16 768, i16 768, i16 896, i16 1024, i16 1024, i16 1152, i16 1280, i16 1408, i16 1408, i16 1536, i16 1664, i16 1792, i16 1920, i16 2048, i16 2176, i16 2304, i16 2432, i16 2560, i16 2688, i16 2944, i16 3072, i16 3200, i16 3328, i16 3584, i16 3712, i16 3840, i16 4096, i16 4224, i16 4480, i16 4608, i16 4864, i16 4992, i16 5248, i16 5376, i16 5632, i16 5888, i16 6016, i16 6272, i16 6528, i16 6784, i16 6912, i16 7168, i16 7424, i16 7680, i16 7936], align 16
@.str.36 = private unnamed_addr constant [9 x i8] c"0x%04x, \00", align 1
@.str.1.37 = private unnamed_addr constant [4 x i8] c"\0A  \00", align 1
@.str.2.38 = private unnamed_addr constant [12 x i8] c"0x%04x\0A};\0A\0A\00", align 1
@str = private unnamed_addr constant [67 x i8] c"/* This file was automatically generated by t1_generate_luts.c */\0A\00", align 1
@.str.4.39 = private unnamed_addr constant [38 x i8] c"static char lut_ctxno_zc[1024] = {\0A  \00", align 1
@.str.5.40 = private unnamed_addr constant [5 x i8] c"%i, \00", align 1
@.str.6.41 = private unnamed_addr constant [8 x i8] c"%i\0A};\0A\0A\00", align 1
@.str.7.42 = private unnamed_addr constant [37 x i8] c"static char lut_ctxno_sc[256] = {\0A  \00", align 1
@.str.8.43 = private unnamed_addr constant [7 x i8] c"0x%x, \00", align 1
@.str.9.44 = private unnamed_addr constant [10 x i8] c"0x%x\0A};\0A\0A\00", align 1
@.str.10.45 = private unnamed_addr constant [32 x i8] c"static char lut_spb[256] = {\0A  \00", align 1
@.str.11.46 = private unnamed_addr constant [58 x i8] c"static short lut_nmsedec_sig[1 << T1_NMSEDEC_BITS] = {\0A  \00", align 1
@.str.12.47 = private unnamed_addr constant [59 x i8] c"static short lut_nmsedec_sig0[1 << T1_NMSEDEC_BITS] = {\0A  \00", align 1
@.str.13.48 = private unnamed_addr constant [58 x i8] c"static short lut_nmsedec_ref[1 << T1_NMSEDEC_BITS] = {\0A  \00", align 1
@.str.14.49 = private unnamed_addr constant [59 x i8] c"static short lut_nmsedec_ref0[1 << T1_NMSEDEC_BITS] = {\0A  \00", align 1
@.str.50 = private unnamed_addr constant [36 x i8] c"Error initializing Packet Iterator\0A\00", align 1
@.str.1.51 = private unnamed_addr constant [21 x i8] c"Expected SOP marker\0A\00", align 1
@str.52 = private unnamed_addr constant [28 x i8] c"Error : expected EPH marker\00", align 1
@.str.3.53 = private unnamed_addr constant [21 x i8] c"Expected EPH marker\0A\00", align 1
@.str.54 = private unnamed_addr constant [9 x i8] c"image {\0A\00", align 1
@.str.1.55 = private unnamed_addr constant [40 x i8] c"  tw=%d, th=%d x0=%d x1=%d y0=%d y1=%d\0A\00", align 1
@.str.2.56 = private unnamed_addr constant [10 x i8] c"  tile {\0A\00", align 1
@.str.3.57 = private unnamed_addr constant [45 x i8] c"    x0=%d, y0=%d, x1=%d, y1=%d, numcomps=%d\0A\00", align 1
@.str.4.58 = private unnamed_addr constant [13 x i8] c"    tilec {\0A\00", align 1
@.str.5.59 = private unnamed_addr constant [53 x i8] c"      x0=%d, y0=%d, x1=%d, y1=%d, numresolutions=%d\0A\00", align 1
@.str.6.60 = private unnamed_addr constant [11 x i8] c"\0A   res {\0A\00", align 1
@.str.7.61 = private unnamed_addr constant [65 x i8] c"          x0=%d, y0=%d, x1=%d, y1=%d, pw=%d, ph=%d, numbands=%d\0A\00", align 1
@.str.8.62 = private unnamed_addr constant [16 x i8] c"        band {\0A\00", align 1
@.str.9.63 = private unnamed_addr constant [62 x i8] c"          x0=%d, y0=%d, x1=%d, y1=%d, stepsize=%f, numbps=%d\0A\00", align 1
@.str.10.64 = private unnamed_addr constant [18 x i8] c"          prec {\0A\00", align 1
@.str.11.65 = private unnamed_addr constant [54 x i8] c"            x0=%d, y0=%d, x1=%d, y1=%d, cw=%d, ch=%d\0A\00", align 1
@.str.12.66 = private unnamed_addr constant [13 x i8] c"          }\0A\00", align 1
@.str.13.67 = private unnamed_addr constant [11 x i8] c"        }\0A\00", align 1
@.str.14.68 = private unnamed_addr constant [9 x i8] c"      }\0A\00", align 1
@.str.15.69 = private unnamed_addr constant [7 x i8] c"    }\0A\00", align 1
@.str.16.70 = private unnamed_addr constant [5 x i8] c"  }\0A\00", align 1
@.str.17.71 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@.str.18 = private unnamed_addr constant [24 x i8] c"- tile encoded in %f s\0A\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"tile %d of %d\0A\00", align 1
@.str.20 = private unnamed_addr constant [33 x i8] c"tcd_decode: incomplete bistream\0A\00", align 1
@.str.21 = private unnamed_addr constant [21 x i8] c"- tiers-1 took %f s\0A\00", align 1
@.str.22 = private unnamed_addr constant [171 x i8] c"Error decoding tile. The number of resolutions to remove [%d+1] is higher than the number  of resolutions in the original codestream [%d]\0AModify the cp_reduce parameter.\0A\00", align 1
@.str.23 = private unnamed_addr constant [17 x i8] c"- dwt took %f s\0A\00", align 1
@.str.24 = private unnamed_addr constant [74 x i8] c"Number of components (%d) is inconsistent with a MCT. Skip the MCT step.\0A\00", align 1
@.str.25 = private unnamed_addr constant [24 x i8] c"- tile decoded in %f s\0A\00", align 1
@.str.110 = private unnamed_addr constant [25 x i8] c"failed to ppix indexing\0A\00", align 1
@.str.113 = private unnamed_addr constant [25 x i8] c"failed to ppix indexing\0A\00", align 1

; Function Attrs: nounwind uwtable
define noalias %struct.opj_bio* @bio_create() #0 {
  %1 = tail call noalias i8* @malloc(i64 32) #9
  %2 = bitcast i8* %1 to %struct.opj_bio*
  ret %struct.opj_bio* %2
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define void @bio_destroy(%struct.opj_bio*) #0 {
  %2 = icmp eq %struct.opj_bio* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.opj_bio* %0 to i8*
  tail call void @free(i8* %4) #9
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @bio_numbytes(%struct.opj_bio* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 2
  %3 = bitcast i8** %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !5
  %5 = bitcast %struct.opj_bio* %0 to i64*
  %6 = load i64, i64* %5, align 8, !tbaa !11
  %7 = sub i64 %4, %6
  %8 = trunc i64 %7 to i32
  ret i32 %8
}

; Function Attrs: norecurse nounwind uwtable writeonly
define void @bio_init_enc(%struct.opj_bio* nocapture, i8*, i32) #3 {
  %4 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 0
  store i8* %1, i8** %4, align 8, !tbaa !11
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 1
  store i8* %6, i8** %7, align 8, !tbaa !12
  %8 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 2
  store i8* %1, i8** %8, align 8, !tbaa !5
  %9 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 3
  store i32 0, i32* %9, align 8, !tbaa !13
  %10 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 4
  store i32 8, i32* %10, align 4, !tbaa !14
  ret void
}

; Function Attrs: norecurse nounwind uwtable writeonly
define void @bio_init_dec(%struct.opj_bio* nocapture, i8*, i32) #3 {
  %4 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 0
  store i8* %1, i8** %4, align 8, !tbaa !11
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 1
  store i8* %6, i8** %7, align 8, !tbaa !12
  %8 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 2
  store i8* %1, i8** %8, align 8, !tbaa !5
  %9 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 3
  store i32 0, i32* %9, align 8, !tbaa !13
  %10 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 4
  store i32 0, i32* %10, align 4, !tbaa !14
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @bio_write(%struct.opj_bio* nocapture, i32, i32) #4 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %38

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 4
  %7 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 3
  %8 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 2
  %9 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 1
  %10 = load i32, i32* %6, align 4, !tbaa !14
  br label %11

11:                                               ; preds = %31, %5
  %12 = phi i32 [ %10, %5 ], [ %33, %31 ]
  %13 = phi i32 [ %2, %5 ], [ %14, %31 ]
  %14 = add nsw i32 %13, -1
  %15 = lshr i32 %1, %14
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %12, 0
  br i1 %17, label %18, label %31

18:                                               ; preds = %11
  %19 = load i32, i32* %7, align 8, !tbaa !13
  %20 = shl i32 %19, 8
  %21 = and i32 %20, 65280
  store i32 %21, i32* %7, align 8, !tbaa !13
  %22 = icmp eq i32 %21, 65280
  %23 = select i1 %22, i32 7, i32 8
  store i32 %23, i32* %6, align 4, !tbaa !14
  %24 = load i8*, i8** %8, align 8, !tbaa !5
  %25 = load i8*, i8** %9, align 8, !tbaa !12
  %26 = icmp ult i8* %24, %25
  br i1 %26, label %27, label %31

27:                                               ; preds = %18
  %28 = trunc i32 %19 to i8
  %29 = getelementptr inbounds i8, i8* %24, i64 1
  store i8* %29, i8** %8, align 8, !tbaa !5
  store i8 %28, i8* %24, align 1, !tbaa !15
  %30 = load i32, i32* %6, align 4, !tbaa !14
  br label %31

31:                                               ; preds = %27, %18, %11
  %32 = phi i32 [ %30, %27 ], [ %23, %18 ], [ %12, %11 ]
  %33 = add nsw i32 %32, -1
  store i32 %33, i32* %6, align 4, !tbaa !14
  %34 = shl i32 %16, %33
  %35 = load i32, i32* %7, align 8, !tbaa !13
  %36 = or i32 %35, %34
  store i32 %36, i32* %7, align 8, !tbaa !13
  %37 = icmp sgt i32 %14, 0
  br i1 %37, label %11, label %38

38:                                               ; preds = %31, %3
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define i32 @bio_read(%struct.opj_bio* nocapture, i32) #4 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %40

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 4
  %6 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 3
  %7 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 2
  %8 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 1
  %9 = load i32, i32* %5, align 4, !tbaa !14
  %10 = load i32, i32* %6, align 8, !tbaa !13
  br label %11

11:                                               ; preds = %31, %4
  %12 = phi i32 [ %10, %4 ], [ %32, %31 ]
  %13 = phi i32 [ %9, %4 ], [ %34, %31 ]
  %14 = phi i32 [ %1, %4 ], [ %16, %31 ]
  %15 = phi i32 [ 0, %4 ], [ %38, %31 ]
  %16 = add nsw i32 %14, -1
  %17 = icmp eq i32 %13, 0
  br i1 %17, label %18, label %31

18:                                               ; preds = %11
  %19 = shl i32 %12, 8
  %20 = and i32 %19, 65280
  store i32 %20, i32* %6, align 8, !tbaa !13
  %21 = icmp eq i32 %20, 65280
  %22 = select i1 %21, i32 7, i32 8
  store i32 %22, i32* %5, align 4, !tbaa !14
  %23 = load i8*, i8** %7, align 8, !tbaa !5
  %24 = load i8*, i8** %8, align 8, !tbaa !12
  %25 = icmp ult i8* %23, %24
  br i1 %25, label %26, label %31

26:                                               ; preds = %18
  %27 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %27, i8** %7, align 8, !tbaa !5
  %28 = load i8, i8* %23, align 1, !tbaa !15
  %29 = zext i8 %28 to i32
  %30 = or i32 %20, %29
  store i32 %30, i32* %6, align 8, !tbaa !13
  br label %31

31:                                               ; preds = %26, %18, %11
  %32 = phi i32 [ %30, %26 ], [ %20, %18 ], [ %12, %11 ]
  %33 = phi i32 [ %22, %26 ], [ %22, %18 ], [ %13, %11 ]
  %34 = add nsw i32 %33, -1
  store i32 %34, i32* %5, align 4, !tbaa !14
  %35 = lshr i32 %32, %34
  %36 = and i32 %35, 1
  %37 = shl i32 %36, %16
  %38 = add nsw i32 %37, %15
  %39 = icmp sgt i32 %16, 0
  br i1 %39, label %11, label %40

40:                                               ; preds = %31, %2
  %41 = phi i32 [ 0, %2 ], [ %38, %31 ]
  ret i32 %41
}

; Function Attrs: norecurse nounwind uwtable
define i32 @bio_flush(%struct.opj_bio* nocapture) #4 {
  %2 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 4
  %3 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8, !tbaa !13
  %5 = shl i32 %4, 8
  %6 = and i32 %5, 65280
  store i32 %6, i32* %3, align 8, !tbaa !13
  %7 = icmp eq i32 %6, 65280
  %8 = select i1 %7, i32 7, i32 8
  store i32 %8, i32* %2, align 4, !tbaa !14
  %9 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8, !tbaa !5
  %11 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8, !tbaa !12
  %13 = icmp ult i8* %10, %12
  br i1 %13, label %14, label %31

14:                                               ; preds = %1
  %15 = trunc i32 %4 to i8
  %16 = getelementptr inbounds i8, i8* %10, i64 1
  store i8* %16, i8** %9, align 8, !tbaa !5
  store i8 %15, i8* %10, align 1, !tbaa !15
  %17 = load i32, i32* %2, align 4, !tbaa !14
  %18 = icmp eq i32 %17, 7
  br i1 %18, label %19, label %31

19:                                               ; preds = %14
  %20 = load i32, i32* %3, align 8, !tbaa !13
  %21 = shl i32 %20, 8
  %22 = and i32 %21, 65280
  store i32 %22, i32* %3, align 8, !tbaa !13
  %23 = icmp eq i32 %22, 65280
  %24 = select i1 %23, i32 7, i32 8
  store i32 %24, i32* %2, align 4, !tbaa !14
  %25 = load i8*, i8** %9, align 8, !tbaa !5
  %26 = load i8*, i8** %11, align 8, !tbaa !12
  %27 = icmp ult i8* %25, %26
  br i1 %27, label %28, label %31

28:                                               ; preds = %19
  %29 = trunc i32 %20 to i8
  %30 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %30, i8** %9, align 8, !tbaa !5
  store i8 %29, i8* %25, align 1, !tbaa !15
  br label %31

31:                                               ; preds = %28, %19, %14, %1
  %32 = phi i32 [ 1, %1 ], [ 1, %19 ], [ 0, %28 ], [ 0, %14 ]
  ret i32 %32
}

; Function Attrs: norecurse nounwind uwtable
define i32 @bio_inalign(%struct.opj_bio* nocapture) #4 {
  %2 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 4
  store i32 0, i32* %2, align 4, !tbaa !14
  %3 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8, !tbaa !13
  %5 = and i32 %4, 255
  %6 = icmp eq i32 %5, 255
  br i1 %6, label %7, label %22

7:                                                ; preds = %1
  %8 = shl i32 %4, 8
  %9 = and i32 %8, 65280
  store i32 %9, i32* %3, align 8, !tbaa !13
  %10 = icmp eq i32 %9, 65280
  %11 = select i1 %10, i32 7, i32 8
  store i32 %11, i32* %2, align 4, !tbaa !14
  %12 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 2
  %13 = load i8*, i8** %12, align 8, !tbaa !5
  %14 = getelementptr inbounds %struct.opj_bio, %struct.opj_bio* %0, i64 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !12
  %16 = icmp ult i8* %13, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %7
  %18 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %18, i8** %12, align 8, !tbaa !5
  %19 = load i8, i8* %13, align 1, !tbaa !15
  %20 = zext i8 %19 to i32
  %21 = or i32 %9, %20
  store i32 %21, i32* %3, align 8, !tbaa !13
  store i32 0, i32* %2, align 4, !tbaa !14
  br label %22

22:                                               ; preds = %17, %7, %1
  %23 = phi i32 [ 0, %17 ], [ 0, %1 ], [ 1, %7 ]
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define noalias %struct.opj_cio* @opj_cio_open(%struct.opj_common_struct*, i8*, i32) #0 {
  %4 = tail call noalias i8* @malloc(i64 56) #9
  %5 = bitcast i8* %4 to %struct.opj_cio*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %71, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %4 to %struct.opj_common_struct**
  store %struct.opj_common_struct* %0, %struct.opj_common_struct** %8, align 8, !tbaa !16
  %9 = icmp ne i8* %1, null
  %10 = icmp ne i32 %2, 0
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %7
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i32*
  store i32 1, i32* %14, align 8, !tbaa !18
  %15 = getelementptr inbounds i8, i8* %4, i64 16
  %16 = bitcast i8* %15 to i8**
  store i8* %1, i8** %16, align 8, !tbaa !19
  %17 = getelementptr inbounds i8, i8* %4, i64 24
  %18 = bitcast i8* %17 to i32*
  store i32 %2, i32* %18, align 8, !tbaa !20
  br label %59

19:                                               ; preds = %7
  %20 = or i1 %9, %10
  %21 = xor i1 %20, true
  %22 = icmp ne %struct.opj_common_struct* %0, null
  %23 = and i1 %22, %21
  br i1 %23, label %24, label %58

24:                                               ; preds = %19
  %25 = getelementptr inbounds i8, i8* %4, i64 8
  %26 = bitcast i8* %25 to i32*
  store i32 2, i32* %26, align 8, !tbaa !18
  %27 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 3
  %28 = load i32, i32* %27, align 4, !tbaa !21
  switch i32 %28, label %37 [
    i32 0, label %29
    i32 2, label %32
  ]

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 4
  %31 = bitcast i8** %30 to %struct.opj_j2k**
  br label %38

32:                                               ; preds = %24
  %33 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 5
  %34 = bitcast i8** %33 to %struct.opj_jp2**
  %35 = load %struct.opj_jp2*, %struct.opj_jp2** %34, align 8, !tbaa !23
  %36 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %35, i64 0, i32 1
  br label %38

37:                                               ; preds = %24
  tail call void @free(i8* nonnull %4) #9
  br label %71

38:                                               ; preds = %32, %29
  %39 = phi %struct.opj_j2k** [ %36, %32 ], [ %31, %29 ]
  %40 = load %struct.opj_j2k*, %struct.opj_j2k** %39, align 8, !tbaa !24
  %41 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %40, i64 0, i32 16
  %42 = load %struct.opj_cp*, %struct.opj_cp** %41, align 8, !tbaa !25
  %43 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %42, i64 0, i32 2
  %44 = load i32, i32* %43, align 8, !tbaa !27
  %45 = sitofp i32 %44 to double
  %46 = fmul double %45, 1.625000e-01
  %47 = fadd double %46, 2.000000e+03
  %48 = fptoui double %47 to i32
  %49 = getelementptr inbounds i8, i8* %4, i64 24
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 8, !tbaa !20
  %51 = sext i32 %48 to i64
  %52 = tail call noalias i8* @malloc(i64 %51) #9
  %53 = getelementptr inbounds i8, i8* %4, i64 16
  %54 = bitcast i8* %53 to i8**
  store i8* %52, i8** %54, align 8, !tbaa !19
  %55 = icmp eq i8* %52, null
  br i1 %55, label %56, label %59

56:                                               ; preds = %38
  %57 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* nonnull %0, i32 1, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0)) #9
  tail call void @free(i8* nonnull %4) #9
  br label %71

58:                                               ; preds = %19
  tail call void @free(i8* nonnull %4) #9
  br label %71

59:                                               ; preds = %38, %12
  %60 = phi i32 [ %48, %38 ], [ %2, %12 ]
  %61 = phi i8* [ %52, %38 ], [ %1, %12 ]
  %62 = ptrtoint i8* %61 to i64
  %63 = getelementptr inbounds i8, i8* %4, i64 32
  %64 = bitcast i8* %63 to i64*
  store i64 %62, i64* %64, align 8, !tbaa !29
  %65 = sext i32 %60 to i64
  %66 = getelementptr inbounds i8, i8* %61, i64 %65
  %67 = getelementptr inbounds i8, i8* %4, i64 40
  %68 = bitcast i8* %67 to i8**
  store i8* %66, i8** %68, align 8, !tbaa !30
  %69 = getelementptr inbounds i8, i8* %4, i64 48
  %70 = bitcast i8* %69 to i64*
  store i64 %62, i64* %70, align 8, !tbaa !31
  br label %71

71:                                               ; preds = %59, %58, %56, %37, %3
  %72 = phi %struct.opj_cio* [ %5, %59 ], [ null, %37 ], [ null, %56 ], [ null, %58 ], [ null, %3 ]
  ret %struct.opj_cio* %72
}

; Function Attrs: nounwind uwtable
define void @opj_cio_close(%struct.opj_cio*) #0 {
  %2 = icmp eq %struct.opj_cio* %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8, !tbaa !18
  %6 = icmp eq i32 %5, 2
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 2
  %9 = load i8*, i8** %8, align 8, !tbaa !19
  tail call void @free(i8* %9) #9
  br label %10

10:                                               ; preds = %7, %3
  %11 = bitcast %struct.opj_cio* %0 to i8*
  tail call void @free(i8* %11) #9
  br label %12

12:                                               ; preds = %10, %1
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @cio_tell(%struct.opj_cio* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !31
  %5 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 4
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !29
  %8 = sub i64 %4, %7
  %9 = trunc i64 %8 to i32
  ret i32 %9
}

; Function Attrs: norecurse nounwind uwtable
define void @cio_seek(%struct.opj_cio* nocapture, i32) #4 {
  %3 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 4
  %4 = load i8*, i8** %3, align 8, !tbaa !29
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds i8, i8* %4, i64 %5
  %7 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 6
  store i8* %6, i8** %7, align 8, !tbaa !31
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @cio_numbytesleft(%struct.opj_cio* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 5
  %3 = bitcast i8** %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !30
  %5 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 6
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !31
  %8 = sub i64 %4, %7
  %9 = trunc i64 %8 to i32
  ret i32 %9
}

; Function Attrs: norecurse nounwind readonly uwtable
define i8* @cio_getbp(%struct.opj_cio* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 6
  %3 = load i8*, i8** %2, align 8, !tbaa !31
  ret i8* %3
}

; Function Attrs: nounwind uwtable
define i32 @cio_byteout(%struct.opj_cio* nocapture, i8 zeroext) #0 {
  %3 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 6
  %4 = load i8*, i8** %3, align 8, !tbaa !31
  %5 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 5
  %6 = load i8*, i8** %5, align 8, !tbaa !30
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %12, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 0
  %10 = load %struct.opj_common_struct*, %struct.opj_common_struct** %9, align 8, !tbaa !16
  %11 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %10, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)) #9
  br label %14

12:                                               ; preds = %2
  %13 = getelementptr inbounds i8, i8* %4, i64 1
  store i8* %13, i8** %3, align 8, !tbaa !31
  store i8 %1, i8* %4, align 1, !tbaa !15
  br label %14

14:                                               ; preds = %12, %8
  %15 = phi i32 [ 0, %8 ], [ 1, %12 ]
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define zeroext i8 @cio_bytein(%struct.opj_cio* nocapture) #0 {
  %2 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 6
  %3 = load i8*, i8** %2, align 8, !tbaa !31
  %4 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 5
  %5 = load i8*, i8** %4, align 8, !tbaa !30
  %6 = icmp ult i8* %3, %5
  br i1 %6, label %13, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 0
  %9 = load %struct.opj_common_struct*, %struct.opj_common_struct** %8, align 8, !tbaa !16
  %10 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 4
  %11 = load i8*, i8** %10, align 8, !tbaa !29
  %12 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %9, i32 1, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %3, i8* %5) #9
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds i8, i8* %3, i64 1
  store i8* %14, i8** %2, align 8, !tbaa !31
  %15 = load i8, i8* %3, align 1, !tbaa !15
  br label %16

16:                                               ; preds = %13, %7
  %17 = phi i8 [ 0, %7 ], [ %15, %13 ]
  ret i8 %17
}

; Function Attrs: nounwind uwtable
define i32 @cio_write(%struct.opj_cio* nocapture, i64, i32) #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %25

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 6
  %7 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 5
  br label %8

8:                                                ; preds = %18, %5
  %9 = phi i32 [ %2, %5 ], [ %10, %18 ]
  %10 = add nsw i32 %9, -1
  %11 = load i8*, i8** %6, align 8, !tbaa !31
  %12 = load i8*, i8** %7, align 8, !tbaa !30
  %13 = icmp ult i8* %11, %12
  br i1 %13, label %18, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 0
  %16 = load %struct.opj_common_struct*, %struct.opj_common_struct** %15, align 8, !tbaa !16
  %17 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %16, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)) #9
  br label %25

18:                                               ; preds = %8
  %19 = shl i32 %10, 3
  %20 = zext i32 %19 to i64
  %21 = lshr i64 %1, %20
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %23, i8** %6, align 8, !tbaa !31
  store i8 %22, i8* %11, align 1, !tbaa !15
  %24 = icmp sgt i32 %10, 0
  br i1 %24, label %8, label %25

25:                                               ; preds = %18, %14, %3
  %26 = phi i32 [ 0, %14 ], [ %2, %3 ], [ %2, %18 ]
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define i32 @cio_read(%struct.opj_cio* nocapture, i32) #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %30

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 6
  %6 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 5
  %7 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 0
  %8 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 4
  br label %9

9:                                                ; preds = %23, %4
  %10 = phi i32 [ %1, %4 ], [ %12, %23 ]
  %11 = phi i32 [ 0, %4 ], [ %28, %23 ]
  %12 = add nsw i32 %10, -1
  %13 = load i8*, i8** %5, align 8, !tbaa !31
  %14 = load i8*, i8** %6, align 8, !tbaa !30
  %15 = icmp ult i8* %13, %14
  br i1 %15, label %20, label %16

16:                                               ; preds = %9
  %17 = load %struct.opj_common_struct*, %struct.opj_common_struct** %7, align 8, !tbaa !16
  %18 = load i8*, i8** %8, align 8, !tbaa !29
  %19 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %17, i32 1, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.2, i64 0, i64 0), i8* %18, i8* %13, i8* %14) #9
  br label %23

20:                                               ; preds = %9
  %21 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %21, i8** %5, align 8, !tbaa !31
  %22 = load i8, i8* %13, align 1, !tbaa !15
  br label %23

23:                                               ; preds = %20, %16
  %24 = phi i8 [ 0, %16 ], [ %22, %20 ]
  %25 = zext i8 %24 to i32
  %26 = shl i32 %12, 3
  %27 = shl i32 %25, %26
  %28 = add i32 %27, %11
  %29 = icmp sgt i32 %12, 0
  br i1 %29, label %9, label %30

30:                                               ; preds = %23, %2
  %31 = phi i32 [ 0, %2 ], [ %28, %23 ]
  ret i32 %31
}

; Function Attrs: norecurse nounwind uwtable
define void @cio_skip(%struct.opj_cio* nocapture, i32) #4 {
  %3 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %0, i64 0, i32 6
  %4 = load i8*, i8** %3, align 8, !tbaa !31
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds i8, i8* %4, i64 %5
  store i8* %6, i8** %3, align 8, !tbaa !31
  ret void
}

; Function Attrs: nounwind uwtable
define void @dwt_encode(%struct.opj_tcd_tilecomp* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8, !tbaa !32
  %4 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8, !tbaa !34
  %6 = sub i32 %3, %5
  %7 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 4
  %8 = load i32, i32* %7, align 8, !tbaa !35
  %9 = add i32 %8, -1
  %10 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 6
  %11 = load i32*, i32** %10, align 8, !tbaa !36
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %584

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 5
  %15 = sext i32 %6 to i64
  %16 = sext i32 %9 to i64
  %17 = zext i32 %9 to i64
  br label %18

18:                                               ; preds = %581, %13
  %19 = phi i64 [ 0, %13 ], [ %582, %581 ]
  %20 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %14, align 8, !tbaa !37
  %21 = sub nsw i64 %16, %19
  %22 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %21, i32 2
  %23 = load i32, i32* %22, align 8, !tbaa !38
  %24 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %21, i32 0
  %25 = load i32, i32* %24, align 8, !tbaa !40
  %26 = sub i32 %23, %25
  %27 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %21, i32 3
  %28 = load i32, i32* %27, align 4, !tbaa !41
  %29 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %21, i32 1
  %30 = load i32, i32* %29, align 4, !tbaa !42
  %31 = sub i32 %28, %30
  %32 = add nsw i64 %21, -1
  %33 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %32, i32 2
  %34 = load i32, i32* %33, align 8, !tbaa !38
  %35 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %32, i32 0
  %36 = load i32, i32* %35, align 8, !tbaa !40
  %37 = sub nsw i32 %34, %36
  %38 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %32, i32 3
  %39 = load i32, i32* %38, align 4, !tbaa !41
  %40 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %32, i32 1
  %41 = load i32, i32* %40, align 4, !tbaa !42
  %42 = sub nsw i32 %39, %41
  %43 = srem i32 %25, 2
  %44 = srem i32 %30, 2
  %45 = sub nsw i32 %31, %42
  %46 = sext i32 %31 to i64
  %47 = shl nsw i64 %46, 2
  %48 = tail call noalias i8* @malloc(i64 %47) #9
  %49 = bitcast i8* %48 to i32*
  %50 = icmp sgt i32 %26, 0
  br i1 %50, label %51, label %320

51:                                               ; preds = %18
  %52 = icmp sgt i32 %31, 0
  %53 = icmp sgt i32 %42, 0
  %54 = sext i32 %44 to i64
  %55 = zext i32 %42 to i64
  %56 = icmp sgt i32 %45, 0
  %57 = sext i32 %42 to i64
  %58 = zext i32 %45 to i64
  br i1 %52, label %59, label %181

59:                                               ; preds = %51
  %60 = zext i32 %31 to i64
  %61 = zext i32 %26 to i64
  %62 = and i64 %60, 1
  %63 = icmp eq i32 %31, 1
  %64 = sub nsw i64 %60, %62
  %65 = icmp eq i64 %62, 0
  %66 = and i64 %55, 1
  %67 = icmp eq i32 %42, 1
  %68 = sub nsw i64 %55, %66
  %69 = icmp eq i64 %66, 0
  %70 = and i64 %58, 1
  %71 = icmp eq i32 %45, 1
  %72 = sub nsw i64 %58, %70
  %73 = icmp eq i64 %70, 0
  br label %74

74:                                               ; preds = %147, %59
  %75 = phi i64 [ 0, %59 ], [ %148, %147 ]
  %76 = getelementptr inbounds i32, i32* %11, i64 %75
  br i1 %63, label %170, label %150

77:                                               ; preds = %180, %77
  %78 = phi i64 [ %93, %77 ], [ 0, %180 ]
  %79 = phi i64 [ %94, %77 ], [ %68, %180 ]
  %80 = shl nuw nsw i64 %78, 1
  %81 = add nsw i64 %80, %54
  %82 = getelementptr inbounds i32, i32* %49, i64 %81
  %83 = load i32, i32* %82, align 4, !tbaa !43
  %84 = mul nsw i64 %78, %15
  %85 = getelementptr inbounds i32, i32* %76, i64 %84
  store i32 %83, i32* %85, align 4, !tbaa !43
  %86 = or i64 %78, 1
  %87 = shl nuw nsw i64 %86, 1
  %88 = add nsw i64 %87, %54
  %89 = getelementptr inbounds i32, i32* %49, i64 %88
  %90 = load i32, i32* %89, align 4, !tbaa !43
  %91 = mul nsw i64 %86, %15
  %92 = getelementptr inbounds i32, i32* %76, i64 %91
  store i32 %90, i32* %92, align 4, !tbaa !43
  %93 = add nuw nsw i64 %78, 2
  %94 = add i64 %79, -2
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %77

96:                                               ; preds = %180, %77
  %97 = phi i64 [ 0, %180 ], [ %93, %77 ]
  br i1 %69, label %105, label %98

98:                                               ; preds = %96
  %99 = shl nuw nsw i64 %97, 1
  %100 = add nsw i64 %99, %54
  %101 = getelementptr inbounds i32, i32* %49, i64 %100
  %102 = load i32, i32* %101, align 4, !tbaa !43
  %103 = mul nsw i64 %97, %15
  %104 = getelementptr inbounds i32, i32* %76, i64 %103
  store i32 %102, i32* %104, align 4, !tbaa !43
  br label %105

105:                                              ; preds = %179, %98, %96
  br i1 %56, label %106, label %147

106:                                              ; preds = %105
  br i1 %71, label %134, label %107

107:                                              ; preds = %107, %106
  %108 = phi i64 [ %131, %107 ], [ 0, %106 ]
  %109 = phi i64 [ %132, %107 ], [ %72, %106 ]
  %110 = trunc i64 %108 to i32
  %111 = shl i32 %110, 1
  %112 = or i32 %111, 1
  %113 = sub nsw i32 %112, %44
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i32, i32* %49, i64 %114
  %116 = load i32, i32* %115, align 4, !tbaa !43
  %117 = add nsw i64 %108, %57
  %118 = mul nsw i64 %117, %15
  %119 = getelementptr inbounds i32, i32* %76, i64 %118
  store i32 %116, i32* %119, align 4, !tbaa !43
  %120 = or i64 %108, 1
  %121 = trunc i64 %120 to i32
  %122 = shl i32 %121, 1
  %123 = or i32 %122, 1
  %124 = sub nsw i32 %123, %44
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i32, i32* %49, i64 %125
  %127 = load i32, i32* %126, align 4, !tbaa !43
  %128 = add nsw i64 %120, %57
  %129 = mul nsw i64 %128, %15
  %130 = getelementptr inbounds i32, i32* %76, i64 %129
  store i32 %127, i32* %130, align 4, !tbaa !43
  %131 = add nuw nsw i64 %108, 2
  %132 = add i64 %109, -2
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %107

134:                                              ; preds = %107, %106
  %135 = phi i64 [ 0, %106 ], [ %131, %107 ]
  br i1 %73, label %147, label %136

136:                                              ; preds = %134
  %137 = trunc i64 %135 to i32
  %138 = shl i32 %137, 1
  %139 = or i32 %138, 1
  %140 = sub nsw i32 %139, %44
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i32, i32* %49, i64 %141
  %143 = load i32, i32* %142, align 4, !tbaa !43
  %144 = add nsw i64 %135, %57
  %145 = mul nsw i64 %144, %15
  %146 = getelementptr inbounds i32, i32* %76, i64 %145
  store i32 %143, i32* %146, align 4, !tbaa !43
  br label %147

147:                                              ; preds = %136, %134, %105
  %148 = add nuw nsw i64 %75, 1
  %149 = icmp eq i64 %148, %61
  br i1 %149, label %320, label %74

150:                                              ; preds = %150, %74
  %151 = phi i64 [ %166, %150 ], [ 0, %74 ]
  %152 = phi i32 [ %167, %150 ], [ 0, %74 ]
  %153 = phi i64 [ %168, %150 ], [ %64, %74 ]
  %154 = mul nsw i32 %152, %6
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i32, i32* %76, i64 %155
  %157 = load i32, i32* %156, align 4, !tbaa !43
  %158 = getelementptr inbounds i32, i32* %49, i64 %151
  store i32 %157, i32* %158, align 4, !tbaa !43
  %159 = or i64 %151, 1
  %160 = or i32 %152, 1
  %161 = mul nsw i32 %160, %6
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i32, i32* %76, i64 %162
  %164 = load i32, i32* %163, align 4, !tbaa !43
  %165 = getelementptr inbounds i32, i32* %49, i64 %159
  store i32 %164, i32* %165, align 4, !tbaa !43
  %166 = add nuw nsw i64 %151, 2
  %167 = add nuw nsw i32 %152, 2
  %168 = add i64 %153, -2
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %150

170:                                              ; preds = %150, %74
  %171 = phi i64 [ 0, %74 ], [ %166, %150 ]
  %172 = phi i32 [ 0, %74 ], [ %167, %150 ]
  br i1 %65, label %179, label %173

173:                                              ; preds = %170
  %174 = mul nsw i32 %172, %6
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i32, i32* %76, i64 %175
  %177 = load i32, i32* %176, align 4, !tbaa !43
  %178 = getelementptr inbounds i32, i32* %49, i64 %171
  store i32 %177, i32* %178, align 4, !tbaa !43
  br label %179

179:                                              ; preds = %173, %170
  tail call fastcc void @dwt_encode_1(i32* nonnull %49, i32 %45, i32 %42, i32 %44)
  br i1 %53, label %180, label %105

180:                                              ; preds = %179
  br i1 %67, label %96, label %77

181:                                              ; preds = %51
  %182 = zext i32 %26 to i64
  br i1 %53, label %188, label %183

183:                                              ; preds = %181
  %184 = and i64 %58, 1
  %185 = icmp eq i32 %45, 1
  %186 = sub nsw i64 %58, %184
  %187 = icmp eq i64 %184, 0
  br label %273

188:                                              ; preds = %181
  %189 = and i64 %55, 1
  %190 = icmp eq i32 %42, 1
  %191 = sub nsw i64 %55, %189
  %192 = icmp eq i64 %189, 0
  %193 = and i64 %58, 1
  %194 = icmp eq i32 %45, 1
  %195 = sub nsw i64 %58, %193
  %196 = icmp eq i64 %193, 0
  br label %197

197:                                              ; preds = %259, %188
  %198 = phi i64 [ %260, %259 ], [ 0, %188 ]
  %199 = getelementptr inbounds i32, i32* %11, i64 %198
  tail call fastcc void @dwt_encode_1(i32* %49, i32 %45, i32 %42, i32 %44)
  br i1 %190, label %262, label %200

200:                                              ; preds = %200, %197
  %201 = phi i64 [ %216, %200 ], [ 0, %197 ]
  %202 = phi i64 [ %217, %200 ], [ %191, %197 ]
  %203 = shl nuw nsw i64 %201, 1
  %204 = add nsw i64 %203, %54
  %205 = getelementptr inbounds i32, i32* %49, i64 %204
  %206 = load i32, i32* %205, align 4, !tbaa !43
  %207 = mul nsw i64 %201, %15
  %208 = getelementptr inbounds i32, i32* %199, i64 %207
  store i32 %206, i32* %208, align 4, !tbaa !43
  %209 = or i64 %201, 1
  %210 = shl nuw nsw i64 %209, 1
  %211 = add nsw i64 %210, %54
  %212 = getelementptr inbounds i32, i32* %49, i64 %211
  %213 = load i32, i32* %212, align 4, !tbaa !43
  %214 = mul nsw i64 %209, %15
  %215 = getelementptr inbounds i32, i32* %199, i64 %214
  store i32 %213, i32* %215, align 4, !tbaa !43
  %216 = add nuw nsw i64 %201, 2
  %217 = add i64 %202, -2
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %262, label %200

219:                                              ; preds = %272, %219
  %220 = phi i64 [ %243, %219 ], [ 0, %272 ]
  %221 = phi i64 [ %244, %219 ], [ %195, %272 ]
  %222 = trunc i64 %220 to i32
  %223 = shl i32 %222, 1
  %224 = or i32 %223, 1
  %225 = sub nsw i32 %224, %44
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i32, i32* %49, i64 %226
  %228 = load i32, i32* %227, align 4, !tbaa !43
  %229 = add nsw i64 %220, %57
  %230 = mul nsw i64 %229, %15
  %231 = getelementptr inbounds i32, i32* %199, i64 %230
  store i32 %228, i32* %231, align 4, !tbaa !43
  %232 = or i64 %220, 1
  %233 = trunc i64 %232 to i32
  %234 = shl i32 %233, 1
  %235 = or i32 %234, 1
  %236 = sub nsw i32 %235, %44
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds i32, i32* %49, i64 %237
  %239 = load i32, i32* %238, align 4, !tbaa !43
  %240 = add nsw i64 %232, %57
  %241 = mul nsw i64 %240, %15
  %242 = getelementptr inbounds i32, i32* %199, i64 %241
  store i32 %239, i32* %242, align 4, !tbaa !43
  %243 = add nuw nsw i64 %220, 2
  %244 = add i64 %221, -2
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %246, label %219

246:                                              ; preds = %272, %219
  %247 = phi i64 [ 0, %272 ], [ %243, %219 ]
  br i1 %196, label %259, label %248

248:                                              ; preds = %246
  %249 = trunc i64 %247 to i32
  %250 = shl i32 %249, 1
  %251 = or i32 %250, 1
  %252 = sub nsw i32 %251, %44
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i32, i32* %49, i64 %253
  %255 = load i32, i32* %254, align 4, !tbaa !43
  %256 = add nsw i64 %247, %57
  %257 = mul nsw i64 %256, %15
  %258 = getelementptr inbounds i32, i32* %199, i64 %257
  store i32 %255, i32* %258, align 4, !tbaa !43
  br label %259

259:                                              ; preds = %271, %248, %246
  %260 = add nuw nsw i64 %198, 1
  %261 = icmp eq i64 %260, %182
  br i1 %261, label %320, label %197

262:                                              ; preds = %200, %197
  %263 = phi i64 [ 0, %197 ], [ %216, %200 ]
  br i1 %192, label %271, label %264

264:                                              ; preds = %262
  %265 = shl nuw nsw i64 %263, 1
  %266 = add nsw i64 %265, %54
  %267 = getelementptr inbounds i32, i32* %49, i64 %266
  %268 = load i32, i32* %267, align 4, !tbaa !43
  %269 = mul nsw i64 %263, %15
  %270 = getelementptr inbounds i32, i32* %199, i64 %269
  store i32 %268, i32* %270, align 4, !tbaa !43
  br label %271

271:                                              ; preds = %264, %262
  br i1 %56, label %272, label %259

272:                                              ; preds = %271
  br i1 %194, label %246, label %219

273:                                              ; preds = %317, %183
  %274 = phi i64 [ %318, %317 ], [ 0, %183 ]
  %275 = getelementptr inbounds i32, i32* %11, i64 %274
  tail call fastcc void @dwt_encode_1(i32* %49, i32 %45, i32 %42, i32 %44)
  br i1 %56, label %276, label %317

276:                                              ; preds = %273
  br i1 %185, label %304, label %277

277:                                              ; preds = %277, %276
  %278 = phi i64 [ %301, %277 ], [ 0, %276 ]
  %279 = phi i64 [ %302, %277 ], [ %186, %276 ]
  %280 = trunc i64 %278 to i32
  %281 = shl i32 %280, 1
  %282 = or i32 %281, 1
  %283 = sub nsw i32 %282, %44
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds i32, i32* %49, i64 %284
  %286 = load i32, i32* %285, align 4, !tbaa !43
  %287 = add nsw i64 %278, %57
  %288 = mul nsw i64 %287, %15
  %289 = getelementptr inbounds i32, i32* %275, i64 %288
  store i32 %286, i32* %289, align 4, !tbaa !43
  %290 = or i64 %278, 1
  %291 = trunc i64 %290 to i32
  %292 = shl i32 %291, 1
  %293 = or i32 %292, 1
  %294 = sub nsw i32 %293, %44
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds i32, i32* %49, i64 %295
  %297 = load i32, i32* %296, align 4, !tbaa !43
  %298 = add nsw i64 %290, %57
  %299 = mul nsw i64 %298, %15
  %300 = getelementptr inbounds i32, i32* %275, i64 %299
  store i32 %297, i32* %300, align 4, !tbaa !43
  %301 = add nuw nsw i64 %278, 2
  %302 = add i64 %279, -2
  %303 = icmp eq i64 %302, 0
  br i1 %303, label %304, label %277

304:                                              ; preds = %277, %276
  %305 = phi i64 [ 0, %276 ], [ %301, %277 ]
  br i1 %187, label %317, label %306

306:                                              ; preds = %304
  %307 = trunc i64 %305 to i32
  %308 = shl i32 %307, 1
  %309 = or i32 %308, 1
  %310 = sub nsw i32 %309, %44
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i32, i32* %49, i64 %311
  %313 = load i32, i32* %312, align 4, !tbaa !43
  %314 = add nsw i64 %305, %57
  %315 = mul nsw i64 %314, %15
  %316 = getelementptr inbounds i32, i32* %275, i64 %315
  store i32 %313, i32* %316, align 4, !tbaa !43
  br label %317

317:                                              ; preds = %306, %304, %273
  %318 = add nuw nsw i64 %274, 1
  %319 = icmp eq i64 %318, %182
  br i1 %319, label %320, label %273

320:                                              ; preds = %317, %259, %147, %18
  tail call void @free(i8* %48) #9
  %321 = sub nsw i32 %26, %37
  %322 = sext i32 %26 to i64
  %323 = shl nsw i64 %322, 2
  %324 = tail call noalias i8* @malloc(i64 %323) #9
  %325 = bitcast i8* %324 to i32*
  %326 = icmp sgt i32 %31, 0
  br i1 %326, label %327, label %581

327:                                              ; preds = %320
  %328 = icmp sgt i32 %37, 0
  %329 = sext i32 %43 to i64
  %330 = zext i32 %37 to i64
  %331 = icmp sgt i32 %321, 0
  %332 = sext i32 %37 to i64
  %333 = zext i32 %321 to i64
  br i1 %50, label %334, label %435

334:                                              ; preds = %327
  %335 = xor i32 %25, -1
  %336 = add i32 %23, %335
  %337 = zext i32 %336 to i64
  %338 = shl nuw nsw i64 %337, 2
  %339 = add nuw nsw i64 %338, 4
  %340 = zext i32 %31 to i64
  %341 = icmp ult i32 %37, 9
  %342 = and i64 %330, 7
  %343 = icmp eq i64 %342, 0
  %344 = select i1 %343, i64 8, i64 %342
  %345 = sub nsw i64 %330, %344
  %346 = and i64 %333, 1
  %347 = icmp eq i32 %321, 1
  %348 = sub nsw i64 %333, %346
  %349 = icmp eq i64 %346, 0
  br label %350

350:                                              ; preds = %431, %334
  %351 = phi i64 [ 0, %334 ], [ %432, %431 ]
  %352 = phi i32 [ 0, %334 ], [ %433, %431 ]
  %353 = mul nsw i64 %351, %15
  %354 = getelementptr i32, i32* %11, i64 %353
  %355 = bitcast i32* %354 to i8*
  %356 = mul nsw i32 %352, %6
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds i32, i32* %11, i64 %357
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %324, i8* align 4 %355, i64 %339, i1 false)
  tail call fastcc void @dwt_encode_1(i32* %325, i32 %321, i32 %37, i32 %43)
  br i1 %328, label %359, label %392

359:                                              ; preds = %350
  br i1 %341, label %381, label %360

360:                                              ; preds = %360, %359
  %361 = phi i64 [ %379, %360 ], [ 0, %359 ]
  %362 = shl nuw nsw i64 %361, 1
  %363 = shl i64 %361, 1
  %364 = or i64 %363, 8
  %365 = add nsw i64 %362, %329
  %366 = add nsw i64 %364, %329
  %367 = getelementptr inbounds i32, i32* %325, i64 %365
  %368 = getelementptr inbounds i32, i32* %325, i64 %366
  %369 = bitcast i32* %367 to <8 x i32>*
  %370 = bitcast i32* %368 to <8 x i32>*
  %371 = load <8 x i32>, <8 x i32>* %369, align 4, !tbaa !43
  %372 = load <8 x i32>, <8 x i32>* %370, align 4, !tbaa !43
  %373 = shufflevector <8 x i32> %371, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %374 = shufflevector <8 x i32> %372, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %375 = getelementptr inbounds i32, i32* %358, i64 %361
  %376 = bitcast i32* %375 to <4 x i32>*
  store <4 x i32> %373, <4 x i32>* %376, align 4, !tbaa !43
  %377 = getelementptr inbounds i32, i32* %375, i64 4
  %378 = bitcast i32* %377 to <4 x i32>*
  store <4 x i32> %374, <4 x i32>* %378, align 4, !tbaa !43
  %379 = add i64 %361, 8
  %380 = icmp eq i64 %379, %345
  br i1 %380, label %381, label %360, !llvm.loop !44

381:                                              ; preds = %360, %359
  %382 = phi i64 [ 0, %359 ], [ %345, %360 ]
  br label %383

383:                                              ; preds = %383, %381
  %384 = phi i64 [ %390, %383 ], [ %382, %381 ]
  %385 = shl nuw nsw i64 %384, 1
  %386 = add nsw i64 %385, %329
  %387 = getelementptr inbounds i32, i32* %325, i64 %386
  %388 = load i32, i32* %387, align 4, !tbaa !43
  %389 = getelementptr inbounds i32, i32* %358, i64 %384
  store i32 %388, i32* %389, align 4, !tbaa !43
  %390 = add nuw nsw i64 %384, 1
  %391 = icmp eq i64 %390, %330
  br i1 %391, label %392, label %383, !llvm.loop !46

392:                                              ; preds = %383, %350
  br i1 %331, label %393, label %431

393:                                              ; preds = %392
  br i1 %347, label %419, label %394

394:                                              ; preds = %394, %393
  %395 = phi i64 [ %416, %394 ], [ 0, %393 ]
  %396 = phi i64 [ %417, %394 ], [ %348, %393 ]
  %397 = trunc i64 %395 to i32
  %398 = shl i32 %397, 1
  %399 = or i32 %398, 1
  %400 = sub nsw i32 %399, %43
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds i32, i32* %325, i64 %401
  %403 = load i32, i32* %402, align 4, !tbaa !43
  %404 = add nsw i64 %395, %332
  %405 = getelementptr inbounds i32, i32* %358, i64 %404
  store i32 %403, i32* %405, align 4, !tbaa !43
  %406 = or i64 %395, 1
  %407 = trunc i64 %406 to i32
  %408 = shl i32 %407, 1
  %409 = or i32 %408, 1
  %410 = sub nsw i32 %409, %43
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds i32, i32* %325, i64 %411
  %413 = load i32, i32* %412, align 4, !tbaa !43
  %414 = add nsw i64 %406, %332
  %415 = getelementptr inbounds i32, i32* %358, i64 %414
  store i32 %413, i32* %415, align 4, !tbaa !43
  %416 = add nuw nsw i64 %395, 2
  %417 = add i64 %396, -2
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %419, label %394

419:                                              ; preds = %394, %393
  %420 = phi i64 [ 0, %393 ], [ %416, %394 ]
  br i1 %349, label %431, label %421

421:                                              ; preds = %419
  %422 = trunc i64 %420 to i32
  %423 = shl i32 %422, 1
  %424 = or i32 %423, 1
  %425 = sub nsw i32 %424, %43
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds i32, i32* %325, i64 %426
  %428 = load i32, i32* %427, align 4, !tbaa !43
  %429 = add nsw i64 %420, %332
  %430 = getelementptr inbounds i32, i32* %358, i64 %429
  store i32 %428, i32* %430, align 4, !tbaa !43
  br label %431

431:                                              ; preds = %421, %419, %392
  %432 = add nuw nsw i64 %351, 1
  %433 = add nuw nsw i32 %352, 1
  %434 = icmp eq i64 %432, %340
  br i1 %434, label %581, label %350

435:                                              ; preds = %327
  %436 = zext i32 %31 to i64
  br i1 %328, label %442, label %437

437:                                              ; preds = %435
  %438 = and i64 %333, 1
  %439 = icmp eq i32 %321, 1
  %440 = sub nsw i64 %333, %438
  %441 = icmp eq i64 %438, 0
  br label %533

442:                                              ; preds = %435
  %443 = icmp ult i32 %37, 9
  %444 = and i64 %330, 7
  %445 = icmp eq i64 %444, 0
  %446 = select i1 %445, i64 8, i64 %444
  %447 = sub nsw i64 %330, %446
  %448 = and i64 %333, 1
  %449 = icmp eq i32 %321, 1
  %450 = sub nsw i64 %333, %448
  %451 = icmp eq i64 %448, 0
  br label %452

452:                                              ; preds = %527, %442
  %453 = phi i64 [ %528, %527 ], [ 0, %442 ]
  %454 = phi i32 [ %529, %527 ], [ 0, %442 ]
  %455 = mul nsw i32 %454, %6
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds i32, i32* %11, i64 %456
  tail call fastcc void @dwt_encode_1(i32* %325, i32 %321, i32 %37, i32 %43)
  br i1 %443, label %479, label %458

458:                                              ; preds = %458, %452
  %459 = phi i64 [ %477, %458 ], [ 0, %452 ]
  %460 = shl nuw nsw i64 %459, 1
  %461 = shl i64 %459, 1
  %462 = or i64 %461, 8
  %463 = add nsw i64 %460, %329
  %464 = add nsw i64 %462, %329
  %465 = getelementptr inbounds i32, i32* %325, i64 %463
  %466 = getelementptr inbounds i32, i32* %325, i64 %464
  %467 = bitcast i32* %465 to <8 x i32>*
  %468 = bitcast i32* %466 to <8 x i32>*
  %469 = load <8 x i32>, <8 x i32>* %467, align 4, !tbaa !43
  %470 = load <8 x i32>, <8 x i32>* %468, align 4, !tbaa !43
  %471 = shufflevector <8 x i32> %469, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %472 = shufflevector <8 x i32> %470, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %473 = getelementptr inbounds i32, i32* %457, i64 %459
  %474 = bitcast i32* %473 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %474, align 4, !tbaa !43
  %475 = getelementptr inbounds i32, i32* %473, i64 4
  %476 = bitcast i32* %475 to <4 x i32>*
  store <4 x i32> %472, <4 x i32>* %476, align 4, !tbaa !43
  %477 = add i64 %459, 8
  %478 = icmp eq i64 %477, %447
  br i1 %478, label %479, label %458, !llvm.loop !48

479:                                              ; preds = %458, %452
  %480 = phi i64 [ 0, %452 ], [ %447, %458 ]
  br label %481

481:                                              ; preds = %481, %479
  %482 = phi i64 [ %488, %481 ], [ %480, %479 ]
  %483 = shl nuw nsw i64 %482, 1
  %484 = add nsw i64 %483, %329
  %485 = getelementptr inbounds i32, i32* %325, i64 %484
  %486 = load i32, i32* %485, align 4, !tbaa !43
  %487 = getelementptr inbounds i32, i32* %457, i64 %482
  store i32 %486, i32* %487, align 4, !tbaa !43
  %488 = add nuw nsw i64 %482, 1
  %489 = icmp eq i64 %488, %330
  br i1 %489, label %531, label %481, !llvm.loop !49

490:                                              ; preds = %532, %490
  %491 = phi i64 [ %512, %490 ], [ 0, %532 ]
  %492 = phi i64 [ %513, %490 ], [ %450, %532 ]
  %493 = trunc i64 %491 to i32
  %494 = shl i32 %493, 1
  %495 = or i32 %494, 1
  %496 = sub nsw i32 %495, %43
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds i32, i32* %325, i64 %497
  %499 = load i32, i32* %498, align 4, !tbaa !43
  %500 = add nsw i64 %491, %332
  %501 = getelementptr inbounds i32, i32* %457, i64 %500
  store i32 %499, i32* %501, align 4, !tbaa !43
  %502 = or i64 %491, 1
  %503 = trunc i64 %502 to i32
  %504 = shl i32 %503, 1
  %505 = or i32 %504, 1
  %506 = sub nsw i32 %505, %43
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds i32, i32* %325, i64 %507
  %509 = load i32, i32* %508, align 4, !tbaa !43
  %510 = add nsw i64 %502, %332
  %511 = getelementptr inbounds i32, i32* %457, i64 %510
  store i32 %509, i32* %511, align 4, !tbaa !43
  %512 = add nuw nsw i64 %491, 2
  %513 = add i64 %492, -2
  %514 = icmp eq i64 %513, 0
  br i1 %514, label %515, label %490

515:                                              ; preds = %532, %490
  %516 = phi i64 [ 0, %532 ], [ %512, %490 ]
  br i1 %451, label %527, label %517

517:                                              ; preds = %515
  %518 = trunc i64 %516 to i32
  %519 = shl i32 %518, 1
  %520 = or i32 %519, 1
  %521 = sub nsw i32 %520, %43
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds i32, i32* %325, i64 %522
  %524 = load i32, i32* %523, align 4, !tbaa !43
  %525 = add nsw i64 %516, %332
  %526 = getelementptr inbounds i32, i32* %457, i64 %525
  store i32 %524, i32* %526, align 4, !tbaa !43
  br label %527

527:                                              ; preds = %531, %517, %515
  %528 = add nuw nsw i64 %453, 1
  %529 = add nuw nsw i32 %454, 1
  %530 = icmp eq i64 %528, %436
  br i1 %530, label %581, label %452

531:                                              ; preds = %481
  br i1 %331, label %532, label %527

532:                                              ; preds = %531
  br i1 %449, label %515, label %490

533:                                              ; preds = %577, %437
  %534 = phi i64 [ %578, %577 ], [ 0, %437 ]
  %535 = phi i32 [ %579, %577 ], [ 0, %437 ]
  %536 = mul nsw i32 %535, %6
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds i32, i32* %11, i64 %537
  tail call fastcc void @dwt_encode_1(i32* %325, i32 %321, i32 %37, i32 %43)
  br i1 %331, label %539, label %577

539:                                              ; preds = %533
  br i1 %439, label %565, label %540

540:                                              ; preds = %540, %539
  %541 = phi i64 [ %562, %540 ], [ 0, %539 ]
  %542 = phi i64 [ %563, %540 ], [ %440, %539 ]
  %543 = trunc i64 %541 to i32
  %544 = shl i32 %543, 1
  %545 = or i32 %544, 1
  %546 = sub nsw i32 %545, %43
  %547 = sext i32 %546 to i64
  %548 = getelementptr inbounds i32, i32* %325, i64 %547
  %549 = load i32, i32* %548, align 4, !tbaa !43
  %550 = add nsw i64 %541, %332
  %551 = getelementptr inbounds i32, i32* %538, i64 %550
  store i32 %549, i32* %551, align 4, !tbaa !43
  %552 = or i64 %541, 1
  %553 = trunc i64 %552 to i32
  %554 = shl i32 %553, 1
  %555 = or i32 %554, 1
  %556 = sub nsw i32 %555, %43
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds i32, i32* %325, i64 %557
  %559 = load i32, i32* %558, align 4, !tbaa !43
  %560 = add nsw i64 %552, %332
  %561 = getelementptr inbounds i32, i32* %538, i64 %560
  store i32 %559, i32* %561, align 4, !tbaa !43
  %562 = add nuw nsw i64 %541, 2
  %563 = add i64 %542, -2
  %564 = icmp eq i64 %563, 0
  br i1 %564, label %565, label %540

565:                                              ; preds = %540, %539
  %566 = phi i64 [ 0, %539 ], [ %562, %540 ]
  br i1 %441, label %577, label %567

567:                                              ; preds = %565
  %568 = trunc i64 %566 to i32
  %569 = shl i32 %568, 1
  %570 = or i32 %569, 1
  %571 = sub nsw i32 %570, %43
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds i32, i32* %325, i64 %572
  %574 = load i32, i32* %573, align 4, !tbaa !43
  %575 = add nsw i64 %566, %332
  %576 = getelementptr inbounds i32, i32* %538, i64 %575
  store i32 %574, i32* %576, align 4, !tbaa !43
  br label %577

577:                                              ; preds = %567, %565, %533
  %578 = add nuw nsw i64 %534, 1
  %579 = add nuw nsw i32 %535, 1
  %580 = icmp eq i64 %578, %436
  br i1 %580, label %581, label %533

581:                                              ; preds = %577, %527, %431, %320
  tail call void @free(i8* %324) #9
  %582 = add nuw nsw i64 %19, 1
  %583 = icmp eq i64 %582, %17
  br i1 %583, label %584, label %18

584:                                              ; preds = %581, %1
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @dwt_encode_1(i32* nocapture, i32, i32, i32) unnamed_addr #4 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %6, label %75

6:                                                ; preds = %4
  %7 = icmp sgt i32 %1, 0
  %8 = icmp sgt i32 %2, 1
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %147

10:                                               ; preds = %6
  br i1 %7, label %11, label %17

11:                                               ; preds = %10
  %12 = shl i32 %2, 1
  %13 = add i32 %12, -2
  %14 = sext i32 %13 to i64
  %15 = sext i32 %2 to i64
  %16 = zext i32 %1 to i64
  br label %27

17:                                               ; preds = %27, %10
  %18 = icmp sgt i32 %2, 0
  br i1 %18, label %19, label %147

19:                                               ; preds = %17
  %20 = shl i32 %1, 1
  %21 = add i32 %20, -1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, i32* %0, i64 %22
  %24 = getelementptr inbounds i32, i32* %0, i64 1
  %25 = sext i32 %1 to i64
  %26 = zext i32 %2 to i64
  br label %47

27:                                               ; preds = %27, %11
  %28 = phi i64 [ 0, %11 ], [ %34, %27 ]
  %29 = icmp slt i64 %28, %15
  %30 = shl nuw nsw i64 %28, 1
  %31 = select i1 %29, i64 %30, i64 %14
  %32 = getelementptr inbounds i32, i32* %0, i64 %31
  %33 = load i32, i32* %32, align 4, !tbaa !43
  %34 = add nuw nsw i64 %28, 1
  %35 = icmp slt i64 %34, %15
  %36 = shl nuw nsw i64 %34, 1
  %37 = select i1 %35, i64 %36, i64 %14
  %38 = getelementptr inbounds i32, i32* %0, i64 %37
  %39 = load i32, i32* %38, align 4, !tbaa !43
  %40 = add nsw i32 %39, %33
  %41 = ashr i32 %40, 1
  %42 = or i64 %30, 1
  %43 = getelementptr inbounds i32, i32* %0, i64 %42
  %44 = load i32, i32* %43, align 4, !tbaa !43
  %45 = sub nsw i32 %44, %41
  store i32 %45, i32* %43, align 4, !tbaa !43
  %46 = icmp eq i64 %34, %16
  br i1 %46, label %17, label %27

47:                                               ; preds = %58, %19
  %48 = phi i64 [ 0, %19 ], [ %73, %58 ]
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %47
  %51 = icmp sgt i64 %48, %25
  br i1 %51, label %58, label %52

52:                                               ; preds = %50
  %53 = trunc i64 %48 to i32
  %54 = shl i32 %53, 1
  %55 = add i32 %54, -1
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %0, i64 %56
  br label %58

58:                                               ; preds = %52, %50, %47
  %59 = phi i32* [ %57, %52 ], [ %24, %47 ], [ %23, %50 ]
  %60 = load i32, i32* %59, align 4, !tbaa !43
  %61 = icmp slt i64 %48, %25
  %62 = shl nuw nsw i64 %48, 1
  %63 = or i64 %62, 1
  %64 = select i1 %61, i64 %63, i64 %22
  %65 = getelementptr inbounds i32, i32* %0, i64 %64
  %66 = load i32, i32* %65, align 4, !tbaa !43
  %67 = add i32 %60, 2
  %68 = add i32 %67, %66
  %69 = ashr i32 %68, 2
  %70 = getelementptr inbounds i32, i32* %0, i64 %62
  %71 = load i32, i32* %70, align 4, !tbaa !43
  %72 = add nsw i32 %69, %71
  store i32 %72, i32* %70, align 4, !tbaa !43
  %73 = add nuw nsw i64 %48, 1
  %74 = icmp eq i64 %73, %26
  br i1 %74, label %147, label %47

75:                                               ; preds = %4
  %76 = icmp eq i32 %2, 0
  %77 = icmp eq i32 %1, 1
  %78 = and i1 %77, %76
  br i1 %78, label %89, label %79

79:                                               ; preds = %75
  %80 = icmp sgt i32 %1, 0
  br i1 %80, label %81, label %92

81:                                               ; preds = %79
  %82 = shl i32 %2, 1
  %83 = add i32 %82, -1
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i32, i32* %0, i64 %84
  %86 = getelementptr inbounds i32, i32* %0, i64 1
  %87 = sext i32 %2 to i64
  %88 = zext i32 %1 to i64
  br label %100

89:                                               ; preds = %75
  %90 = load i32, i32* %0, align 4, !tbaa !43
  %91 = shl nsw i32 %90, 1
  store i32 %91, i32* %0, align 4, !tbaa !43
  br label %147

92:                                               ; preds = %116, %79
  %93 = icmp sgt i32 %2, 0
  br i1 %93, label %94, label %147

94:                                               ; preds = %92
  %95 = shl i32 %1, 1
  %96 = add i32 %95, -2
  %97 = sext i32 %96 to i64
  %98 = sext i32 %1 to i64
  %99 = zext i32 %2 to i64
  br label %126

100:                                              ; preds = %116, %81
  %101 = phi i64 [ 0, %81 ], [ %124, %116 ]
  %102 = icmp slt i64 %101, %87
  %103 = shl nuw i64 %101, 1
  %104 = or i64 %103, 1
  %105 = select i1 %102, i64 %104, i64 %84
  %106 = getelementptr inbounds i32, i32* %0, i64 %105
  %107 = load i32, i32* %106, align 4, !tbaa !43
  %108 = icmp eq i64 %101, 0
  br i1 %108, label %116, label %109

109:                                              ; preds = %100
  %110 = icmp sgt i64 %101, %87
  br i1 %110, label %116, label %111

111:                                              ; preds = %109
  %112 = shl i64 %101, 33
  %113 = add i64 %112, -4294967296
  %114 = ashr exact i64 %113, 32
  %115 = getelementptr inbounds i32, i32* %0, i64 %114
  br label %116

116:                                              ; preds = %111, %109, %100
  %117 = phi i32* [ %115, %111 ], [ %86, %100 ], [ %85, %109 ]
  %118 = load i32, i32* %117, align 4, !tbaa !43
  %119 = add nsw i32 %118, %107
  %120 = ashr i32 %119, 1
  %121 = getelementptr inbounds i32, i32* %0, i64 %103
  %122 = load i32, i32* %121, align 4, !tbaa !43
  %123 = sub nsw i32 %122, %120
  store i32 %123, i32* %121, align 4, !tbaa !43
  %124 = add nuw nsw i64 %101, 1
  %125 = icmp eq i64 %124, %88
  br i1 %125, label %92, label %100

126:                                              ; preds = %126, %94
  %127 = phi i64 [ 0, %94 ], [ %133, %126 ]
  %128 = icmp slt i64 %127, %98
  %129 = shl nuw nsw i64 %127, 1
  %130 = select i1 %128, i64 %129, i64 %97
  %131 = getelementptr inbounds i32, i32* %0, i64 %130
  %132 = load i32, i32* %131, align 4, !tbaa !43
  %133 = add nuw nsw i64 %127, 1
  %134 = icmp slt i64 %133, %98
  %135 = shl nuw nsw i64 %133, 1
  %136 = select i1 %134, i64 %135, i64 %97
  %137 = getelementptr inbounds i32, i32* %0, i64 %136
  %138 = load i32, i32* %137, align 4, !tbaa !43
  %139 = add i32 %132, 2
  %140 = add i32 %139, %138
  %141 = ashr i32 %140, 2
  %142 = or i64 %129, 1
  %143 = getelementptr inbounds i32, i32* %0, i64 %142
  %144 = load i32, i32* %143, align 4, !tbaa !43
  %145 = add nsw i32 %141, %144
  store i32 %145, i32* %143, align 4, !tbaa !43
  %146 = icmp eq i64 %133, %99
  br i1 %146, label %147, label %126

147:                                              ; preds = %126, %92, %89, %58, %17, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind uwtable
define void @dwt_decode(%struct.opj_tcd_tilecomp* nocapture readonly, i32) #0 {
  %3 = alloca %struct.dwt_local, align 8
  %4 = alloca %struct.dwt_local, align 8
  %5 = bitcast %struct.dwt_local* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #9
  %6 = bitcast %struct.dwt_local* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  %7 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 5
  %8 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %7, align 8, !tbaa !37
  %9 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 8, !tbaa !38
  %11 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %8, i64 0, i32 0
  %12 = load i32, i32* %11, align 8, !tbaa !40
  %13 = sub nsw i32 %10, %12
  %14 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %8, i64 0, i32 3
  %15 = load i32, i32* %14, align 4, !tbaa !41
  %16 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4, !tbaa !42
  %18 = sub nsw i32 %15, %17
  %19 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 2
  %20 = load i32, i32* %19, align 8, !tbaa !32
  %21 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 0
  %22 = load i32, i32* %21, align 8, !tbaa !34
  %23 = sub nsw i32 %20, %22
  %24 = add nsw i32 %1, -1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %2
  %27 = add i32 %1, -1
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %1, 2
  br i1 %29, label %71, label %30

30:                                               ; preds = %26
  %31 = sub i32 %27, %28
  br label %36

32:                                               ; preds = %2
  %33 = tail call noalias i8* @malloc(i64 4) #9
  %34 = bitcast %struct.dwt_local* %3 to i8**
  store i8* %33, i8** %34, align 8, !tbaa !50
  %35 = bitcast %struct.dwt_local* %4 to i8**
  store i8* %33, i8** %35, align 8, !tbaa !50
  br label %801

36:                                               ; preds = %36, %30
  %37 = phi i32 [ 1, %30 ], [ %68, %36 ]
  %38 = phi %struct.opj_tcd_resolution* [ %8, %30 ], [ %54, %36 ]
  %39 = phi i32 [ %31, %30 ], [ %69, %36 ]
  %40 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %38, i64 1, i32 2
  %41 = load i32, i32* %40, align 8, !tbaa !38, !alias.scope !52
  %42 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %38, i64 1, i32 0
  %43 = load i32, i32* %42, align 8, !tbaa !40, !alias.scope !52
  %44 = sub nsw i32 %41, %43
  %45 = icmp slt i32 %37, %44
  %46 = select i1 %45, i32 %44, i32 %37
  %47 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %38, i64 1, i32 3
  %48 = load i32, i32* %47, align 4, !tbaa !41, !alias.scope !52
  %49 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %38, i64 1, i32 1
  %50 = load i32, i32* %49, align 4, !tbaa !42, !alias.scope !52
  %51 = sub nsw i32 %48, %50
  %52 = icmp slt i32 %46, %51
  %53 = select i1 %52, i32 %51, i32 %46
  %54 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %38, i64 2
  %55 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %38, i64 2, i32 2
  %56 = load i32, i32* %55, align 8, !tbaa !38, !alias.scope !52
  %57 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %54, i64 0, i32 0
  %58 = load i32, i32* %57, align 8, !tbaa !40, !alias.scope !52
  %59 = sub nsw i32 %56, %58
  %60 = icmp slt i32 %53, %59
  %61 = select i1 %60, i32 %59, i32 %53
  %62 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %38, i64 2, i32 3
  %63 = load i32, i32* %62, align 4, !tbaa !41, !alias.scope !52
  %64 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %38, i64 2, i32 1
  %65 = load i32, i32* %64, align 4, !tbaa !42, !alias.scope !52
  %66 = sub nsw i32 %63, %65
  %67 = icmp slt i32 %61, %66
  %68 = select i1 %67, i32 %66, i32 %61
  %69 = add i32 %39, -2
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %36

71:                                               ; preds = %36, %26
  %72 = phi i32 [ undef, %26 ], [ %68, %36 ]
  %73 = phi i32 [ 1, %26 ], [ %68, %36 ]
  %74 = phi %struct.opj_tcd_resolution* [ %8, %26 ], [ %54, %36 ]
  %75 = icmp eq i32 %28, 0
  br i1 %75, label %91, label %76

76:                                               ; preds = %71
  %77 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %74, i64 1, i32 2
  %78 = load i32, i32* %77, align 8, !tbaa !38, !alias.scope !52
  %79 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %74, i64 1, i32 0
  %80 = load i32, i32* %79, align 8, !tbaa !40, !alias.scope !52
  %81 = sub nsw i32 %78, %80
  %82 = icmp slt i32 %73, %81
  %83 = select i1 %82, i32 %81, i32 %73
  %84 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %74, i64 1, i32 3
  %85 = load i32, i32* %84, align 4, !tbaa !41, !alias.scope !52
  %86 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %74, i64 1, i32 1
  %87 = load i32, i32* %86, align 4, !tbaa !42, !alias.scope !52
  %88 = sub nsw i32 %85, %87
  %89 = icmp slt i32 %83, %88
  %90 = select i1 %89, i32 %88, i32 %83
  br label %91

91:                                               ; preds = %76, %71
  %92 = phi i32 [ %72, %71 ], [ %90, %76 ]
  %93 = sext i32 %92 to i64
  %94 = shl nsw i64 %93, 2
  %95 = tail call noalias i8* @malloc(i64 %94) #9
  %96 = bitcast %struct.dwt_local* %3 to i8**
  store i8* %95, i8** %96, align 8, !tbaa !50
  %97 = bitcast %struct.dwt_local* %4 to i8**
  store i8* %95, i8** %97, align 8, !tbaa !50
  %98 = bitcast i8* %95 to i32*
  %99 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 6
  %100 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %3, i64 0, i32 2
  %101 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %4, i64 0, i32 2
  %102 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %3, i64 0, i32 1
  %103 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %3, i64 0, i32 3
  %104 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %4, i64 0, i32 1
  %105 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %4, i64 0, i32 3
  %106 = sext i32 %23 to i64
  %107 = getelementptr inbounds i8, i8* %95, i64 4
  %108 = bitcast i8* %107 to i32*
  br label %112

109:                                              ; preds = %796, %677, %616, %513, %339
  %110 = add nsw i32 %113, -1
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %801, label %112

112:                                              ; preds = %109, %91
  %113 = phi i32 [ %24, %91 ], [ %110, %109 ]
  %114 = phi %struct.opj_tcd_resolution* [ %8, %91 ], [ %118, %109 ]
  %115 = phi i32 [ %18, %91 ], [ %128, %109 ]
  %116 = phi i32 [ %13, %91 ], [ %123, %109 ]
  %117 = load i32*, i32** %99, align 8, !tbaa !36
  %118 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %114, i64 1
  store i32 %116, i32* %100, align 4, !tbaa !55
  store i32 %115, i32* %101, align 4, !tbaa !55
  %119 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %114, i64 1, i32 2
  %120 = load i32, i32* %119, align 8, !tbaa !38
  %121 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %118, i64 0, i32 0
  %122 = load i32, i32* %121, align 8, !tbaa !40
  %123 = sub i32 %120, %122
  %124 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %114, i64 1, i32 3
  %125 = load i32, i32* %124, align 4, !tbaa !41
  %126 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %114, i64 1, i32 1
  %127 = load i32, i32* %126, align 4, !tbaa !42
  %128 = sub i32 %125, %127
  %129 = sub nsw i32 %123, %116
  store i32 %129, i32* %102, align 8, !tbaa !56
  %130 = srem i32 %122, 2
  store i32 %130, i32* %103, align 8, !tbaa !57
  %131 = icmp sgt i32 %128, 0
  br i1 %131, label %132, label %339

132:                                              ; preds = %112
  %133 = icmp eq i32 %129, 0
  %134 = sext i32 %123 to i64
  %135 = shl nsw i64 %134, 2
  %136 = zext i32 %128 to i64
  br i1 %133, label %146, label %137

137:                                              ; preds = %132
  %138 = sub i32 %120, %116
  %139 = sub i32 %138, %122
  %140 = xor i32 %116, -1
  %141 = add i32 %120, %140
  %142 = sub i32 %141, %122
  %143 = and i32 %139, 7
  %144 = icmp eq i32 %143, 0
  %145 = icmp ult i32 %142, 7
  br label %214

146:                                              ; preds = %211, %132
  %147 = phi i32 [ %213, %211 ], [ %116, %132 ]
  %148 = phi i64 [ %209, %211 ], [ 0, %132 ]
  %149 = phi i32 [ %212, %211 ], [ 0, %132 ]
  %150 = mul nsw i32 %149, %23
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i32, i32* %117, i64 %151
  %153 = icmp eq i32 %147, 0
  br i1 %153, label %207, label %154

154:                                              ; preds = %146
  %155 = load i32, i32* %103, align 8, !tbaa !57
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i32, i32* %98, i64 %156
  %158 = add i32 %147, -1
  %159 = and i32 %147, 7
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %172, label %161

161:                                              ; preds = %161, %154
  %162 = phi i32 [ %166, %161 ], [ %147, %154 ]
  %163 = phi i32* [ %169, %161 ], [ %157, %154 ]
  %164 = phi i32* [ %167, %161 ], [ %152, %154 ]
  %165 = phi i32 [ %170, %161 ], [ %159, %154 ]
  %166 = add nsw i32 %162, -1
  %167 = getelementptr inbounds i32, i32* %164, i64 1
  %168 = load i32, i32* %164, align 4, !tbaa !43
  store i32 %168, i32* %163, align 4, !tbaa !43
  %169 = getelementptr inbounds i32, i32* %163, i64 2
  %170 = add i32 %165, -1
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %161, !llvm.loop !58

172:                                              ; preds = %161, %154
  %173 = phi i32 [ %147, %154 ], [ %166, %161 ]
  %174 = phi i32* [ %157, %154 ], [ %169, %161 ]
  %175 = phi i32* [ %152, %154 ], [ %167, %161 ]
  %176 = icmp ult i32 %158, 7
  br i1 %176, label %207, label %177

177:                                              ; preds = %177, %172
  %178 = phi i32 [ %202, %177 ], [ %173, %172 ]
  %179 = phi i32* [ %205, %177 ], [ %174, %172 ]
  %180 = phi i32* [ %203, %177 ], [ %175, %172 ]
  %181 = getelementptr inbounds i32, i32* %180, i64 1
  %182 = load i32, i32* %180, align 4, !tbaa !43
  store i32 %182, i32* %179, align 4, !tbaa !43
  %183 = getelementptr inbounds i32, i32* %179, i64 2
  %184 = getelementptr inbounds i32, i32* %180, i64 2
  %185 = load i32, i32* %181, align 4, !tbaa !43
  store i32 %185, i32* %183, align 4, !tbaa !43
  %186 = getelementptr inbounds i32, i32* %179, i64 4
  %187 = getelementptr inbounds i32, i32* %180, i64 3
  %188 = load i32, i32* %184, align 4, !tbaa !43
  store i32 %188, i32* %186, align 4, !tbaa !43
  %189 = getelementptr inbounds i32, i32* %179, i64 6
  %190 = getelementptr inbounds i32, i32* %180, i64 4
  %191 = load i32, i32* %187, align 4, !tbaa !43
  store i32 %191, i32* %189, align 4, !tbaa !43
  %192 = getelementptr inbounds i32, i32* %179, i64 8
  %193 = getelementptr inbounds i32, i32* %180, i64 5
  %194 = load i32, i32* %190, align 4, !tbaa !43
  store i32 %194, i32* %192, align 4, !tbaa !43
  %195 = getelementptr inbounds i32, i32* %179, i64 10
  %196 = getelementptr inbounds i32, i32* %180, i64 6
  %197 = load i32, i32* %193, align 4, !tbaa !43
  store i32 %197, i32* %195, align 4, !tbaa !43
  %198 = getelementptr inbounds i32, i32* %179, i64 12
  %199 = getelementptr inbounds i32, i32* %180, i64 7
  %200 = load i32, i32* %196, align 4, !tbaa !43
  store i32 %200, i32* %198, align 4, !tbaa !43
  %201 = getelementptr inbounds i32, i32* %179, i64 14
  %202 = add nsw i32 %178, -8
  %203 = getelementptr inbounds i32, i32* %180, i64 8
  %204 = load i32, i32* %199, align 4, !tbaa !43
  store i32 %204, i32* %201, align 4, !tbaa !43
  %205 = getelementptr inbounds i32, i32* %179, i64 16
  %206 = icmp eq i32 %202, 0
  br i1 %206, label %207, label %177

207:                                              ; preds = %177, %172, %146
  call fastcc void @dwt_decode_1(%struct.dwt_local* nonnull %3) #9
  %208 = bitcast i32* %152 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %208, i8* align 4 %95, i64 %135, i1 false) #9
  %209 = add nuw nsw i64 %148, 1
  %210 = icmp eq i64 %209, %136
  br i1 %210, label %339, label %211

211:                                              ; preds = %207
  %212 = add nuw nsw i32 %149, 1
  %213 = load i32, i32* %100, align 4, !tbaa !55
  br label %146

214:                                              ; preds = %335, %137
  %215 = phi i32 [ %338, %335 ], [ %116, %137 ]
  %216 = phi i32 [ %337, %335 ], [ %130, %137 ]
  %217 = phi i64 [ %333, %335 ], [ 0, %137 ]
  %218 = phi i32 [ %336, %335 ], [ 0, %137 ]
  %219 = mul nsw i32 %218, %23
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds i32, i32* %117, i64 %220
  %222 = sext i32 %216 to i64
  %223 = icmp eq i32 %215, 0
  br i1 %223, label %280, label %224

224:                                              ; preds = %214
  %225 = getelementptr inbounds i32, i32* %98, i64 %222
  %226 = add i32 %215, -1
  %227 = and i32 %215, 7
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %240, label %229

229:                                              ; preds = %229, %224
  %230 = phi i32 [ %234, %229 ], [ %215, %224 ]
  %231 = phi i32* [ %237, %229 ], [ %225, %224 ]
  %232 = phi i32* [ %235, %229 ], [ %221, %224 ]
  %233 = phi i32 [ %238, %229 ], [ %227, %224 ]
  %234 = add nsw i32 %230, -1
  %235 = getelementptr inbounds i32, i32* %232, i64 1
  %236 = load i32, i32* %232, align 4, !tbaa !43
  store i32 %236, i32* %231, align 4, !tbaa !43
  %237 = getelementptr inbounds i32, i32* %231, i64 2
  %238 = add i32 %233, -1
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %229, !llvm.loop !60

240:                                              ; preds = %229, %224
  %241 = phi i32 [ %215, %224 ], [ %234, %229 ]
  %242 = phi i32* [ %225, %224 ], [ %237, %229 ]
  %243 = phi i32* [ %221, %224 ], [ %235, %229 ]
  %244 = icmp ult i32 %226, 7
  br i1 %244, label %275, label %245

245:                                              ; preds = %245, %240
  %246 = phi i32 [ %270, %245 ], [ %241, %240 ]
  %247 = phi i32* [ %273, %245 ], [ %242, %240 ]
  %248 = phi i32* [ %271, %245 ], [ %243, %240 ]
  %249 = getelementptr inbounds i32, i32* %248, i64 1
  %250 = load i32, i32* %248, align 4, !tbaa !43
  store i32 %250, i32* %247, align 4, !tbaa !43
  %251 = getelementptr inbounds i32, i32* %247, i64 2
  %252 = getelementptr inbounds i32, i32* %248, i64 2
  %253 = load i32, i32* %249, align 4, !tbaa !43
  store i32 %253, i32* %251, align 4, !tbaa !43
  %254 = getelementptr inbounds i32, i32* %247, i64 4
  %255 = getelementptr inbounds i32, i32* %248, i64 3
  %256 = load i32, i32* %252, align 4, !tbaa !43
  store i32 %256, i32* %254, align 4, !tbaa !43
  %257 = getelementptr inbounds i32, i32* %247, i64 6
  %258 = getelementptr inbounds i32, i32* %248, i64 4
  %259 = load i32, i32* %255, align 4, !tbaa !43
  store i32 %259, i32* %257, align 4, !tbaa !43
  %260 = getelementptr inbounds i32, i32* %247, i64 8
  %261 = getelementptr inbounds i32, i32* %248, i64 5
  %262 = load i32, i32* %258, align 4, !tbaa !43
  store i32 %262, i32* %260, align 4, !tbaa !43
  %263 = getelementptr inbounds i32, i32* %247, i64 10
  %264 = getelementptr inbounds i32, i32* %248, i64 6
  %265 = load i32, i32* %261, align 4, !tbaa !43
  store i32 %265, i32* %263, align 4, !tbaa !43
  %266 = getelementptr inbounds i32, i32* %247, i64 12
  %267 = getelementptr inbounds i32, i32* %248, i64 7
  %268 = load i32, i32* %264, align 4, !tbaa !43
  store i32 %268, i32* %266, align 4, !tbaa !43
  %269 = getelementptr inbounds i32, i32* %247, i64 14
  %270 = add nsw i32 %246, -8
  %271 = getelementptr inbounds i32, i32* %248, i64 8
  %272 = load i32, i32* %267, align 4, !tbaa !43
  store i32 %272, i32* %269, align 4, !tbaa !43
  %273 = getelementptr inbounds i32, i32* %247, i64 16
  %274 = icmp eq i32 %270, 0
  br i1 %274, label %275, label %245

275:                                              ; preds = %245, %240
  %276 = load i32, i32* %100, align 4, !tbaa !55
  %277 = load i32, i32* %103, align 8, !tbaa !57
  %278 = sext i32 %277 to i64
  %279 = sext i32 %276 to i64
  br label %280

280:                                              ; preds = %275, %214
  %281 = phi i64 [ %278, %275 ], [ %222, %214 ]
  %282 = phi i64 [ %279, %275 ], [ 0, %214 ]
  %283 = sub nsw i64 0, %281
  %284 = getelementptr inbounds i32, i32* %108, i64 %283
  %285 = getelementptr inbounds i32, i32* %221, i64 %282
  br i1 %144, label %297, label %286

286:                                              ; preds = %286, %280
  %287 = phi i32 [ %291, %286 ], [ %129, %280 ]
  %288 = phi i32* [ %294, %286 ], [ %284, %280 ]
  %289 = phi i32* [ %292, %286 ], [ %285, %280 ]
  %290 = phi i32 [ %295, %286 ], [ %143, %280 ]
  %291 = add nsw i32 %287, -1
  %292 = getelementptr inbounds i32, i32* %289, i64 1
  %293 = load i32, i32* %289, align 4, !tbaa !43
  store i32 %293, i32* %288, align 4, !tbaa !43
  %294 = getelementptr inbounds i32, i32* %288, i64 2
  %295 = add i32 %290, -1
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %297, label %286, !llvm.loop !61

297:                                              ; preds = %286, %280
  %298 = phi i32 [ %129, %280 ], [ %291, %286 ]
  %299 = phi i32* [ %284, %280 ], [ %294, %286 ]
  %300 = phi i32* [ %285, %280 ], [ %292, %286 ]
  br i1 %145, label %331, label %301

301:                                              ; preds = %301, %297
  %302 = phi i32 [ %326, %301 ], [ %298, %297 ]
  %303 = phi i32* [ %329, %301 ], [ %299, %297 ]
  %304 = phi i32* [ %327, %301 ], [ %300, %297 ]
  %305 = getelementptr inbounds i32, i32* %304, i64 1
  %306 = load i32, i32* %304, align 4, !tbaa !43
  store i32 %306, i32* %303, align 4, !tbaa !43
  %307 = getelementptr inbounds i32, i32* %303, i64 2
  %308 = getelementptr inbounds i32, i32* %304, i64 2
  %309 = load i32, i32* %305, align 4, !tbaa !43
  store i32 %309, i32* %307, align 4, !tbaa !43
  %310 = getelementptr inbounds i32, i32* %303, i64 4
  %311 = getelementptr inbounds i32, i32* %304, i64 3
  %312 = load i32, i32* %308, align 4, !tbaa !43
  store i32 %312, i32* %310, align 4, !tbaa !43
  %313 = getelementptr inbounds i32, i32* %303, i64 6
  %314 = getelementptr inbounds i32, i32* %304, i64 4
  %315 = load i32, i32* %311, align 4, !tbaa !43
  store i32 %315, i32* %313, align 4, !tbaa !43
  %316 = getelementptr inbounds i32, i32* %303, i64 8
  %317 = getelementptr inbounds i32, i32* %304, i64 5
  %318 = load i32, i32* %314, align 4, !tbaa !43
  store i32 %318, i32* %316, align 4, !tbaa !43
  %319 = getelementptr inbounds i32, i32* %303, i64 10
  %320 = getelementptr inbounds i32, i32* %304, i64 6
  %321 = load i32, i32* %317, align 4, !tbaa !43
  store i32 %321, i32* %319, align 4, !tbaa !43
  %322 = getelementptr inbounds i32, i32* %303, i64 12
  %323 = getelementptr inbounds i32, i32* %304, i64 7
  %324 = load i32, i32* %320, align 4, !tbaa !43
  store i32 %324, i32* %322, align 4, !tbaa !43
  %325 = getelementptr inbounds i32, i32* %303, i64 14
  %326 = add nsw i32 %302, -8
  %327 = getelementptr inbounds i32, i32* %304, i64 8
  %328 = load i32, i32* %323, align 4, !tbaa !43
  store i32 %328, i32* %325, align 4, !tbaa !43
  %329 = getelementptr inbounds i32, i32* %303, i64 16
  %330 = icmp eq i32 %326, 0
  br i1 %330, label %331, label %301

331:                                              ; preds = %301, %297
  call fastcc void @dwt_decode_1(%struct.dwt_local* nonnull %3) #9
  %332 = bitcast i32* %221 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %332, i8* align 4 %95, i64 %135, i1 false) #9
  %333 = add nuw nsw i64 %217, 1
  %334 = icmp eq i64 %333, %136
  br i1 %334, label %339, label %335

335:                                              ; preds = %331
  %336 = add nuw nsw i32 %218, 1
  %337 = load i32, i32* %103, align 8, !tbaa !57
  %338 = load i32, i32* %100, align 4, !tbaa !55
  br label %214

339:                                              ; preds = %331, %207, %112
  %340 = load i32, i32* %101, align 4, !tbaa !55
  %341 = sub nsw i32 %128, %340
  store i32 %341, i32* %104, align 8, !tbaa !56
  %342 = load i32, i32* %126, align 4, !tbaa !42
  %343 = srem i32 %342, 2
  store i32 %343, i32* %105, align 8, !tbaa !57
  %344 = icmp sgt i32 %123, 0
  br i1 %344, label %345, label %109

345:                                              ; preds = %339
  %346 = icmp eq i32 %341, 0
  %347 = zext i32 %128 to i64
  %348 = zext i32 %123 to i64
  br i1 %346, label %516, label %349

349:                                              ; preds = %345
  %350 = sub i32 %125, %127
  %351 = sub i32 %350, %340
  %352 = xor i32 %127, -1
  %353 = add i32 %125, %352
  %354 = sub i32 %353, %340
  %355 = and i32 %351, 7
  %356 = icmp eq i32 %355, 0
  %357 = icmp ult i32 %354, 7
  br i1 %131, label %358, label %682

358:                                              ; preds = %349
  %359 = and i64 %347, 1
  %360 = icmp eq i32 %128, 1
  %361 = sub nsw i64 %347, %359
  %362 = icmp eq i64 %359, 0
  br label %363

363:                                              ; preds = %501, %358
  %364 = phi i32 [ %502, %501 ], [ %340, %358 ]
  %365 = phi i64 [ %514, %501 ], [ 0, %358 ]
  %366 = getelementptr inbounds i32, i32* %117, i64 %365
  %367 = icmp eq i32 %364, 0
  br i1 %367, label %423, label %368

368:                                              ; preds = %363
  %369 = load i32, i32* %105, align 8, !tbaa !57
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds i32, i32* %98, i64 %370
  %372 = add i32 %364, -1
  %373 = and i32 %364, 7
  %374 = icmp eq i32 %373, 0
  br i1 %374, label %386, label %375

375:                                              ; preds = %375, %368
  %376 = phi i32 [ %380, %375 ], [ %364, %368 ]
  %377 = phi i32* [ %382, %375 ], [ %371, %368 ]
  %378 = phi i32* [ %383, %375 ], [ %366, %368 ]
  %379 = phi i32 [ %384, %375 ], [ %373, %368 ]
  %380 = add nsw i32 %376, -1
  %381 = load i32, i32* %378, align 4, !tbaa !43
  store i32 %381, i32* %377, align 4, !tbaa !43
  %382 = getelementptr inbounds i32, i32* %377, i64 2
  %383 = getelementptr inbounds i32, i32* %378, i64 %106
  %384 = add i32 %379, -1
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %386, label %375, !llvm.loop !62

386:                                              ; preds = %375, %368
  %387 = phi i32 [ %364, %368 ], [ %380, %375 ]
  %388 = phi i32* [ %371, %368 ], [ %382, %375 ]
  %389 = phi i32* [ %366, %368 ], [ %383, %375 ]
  %390 = icmp ult i32 %372, 7
  br i1 %390, label %421, label %391

391:                                              ; preds = %391, %386
  %392 = phi i32 [ %416, %391 ], [ %387, %386 ]
  %393 = phi i32* [ %418, %391 ], [ %388, %386 ]
  %394 = phi i32* [ %419, %391 ], [ %389, %386 ]
  %395 = load i32, i32* %394, align 4, !tbaa !43
  store i32 %395, i32* %393, align 4, !tbaa !43
  %396 = getelementptr inbounds i32, i32* %393, i64 2
  %397 = getelementptr inbounds i32, i32* %394, i64 %106
  %398 = load i32, i32* %397, align 4, !tbaa !43
  store i32 %398, i32* %396, align 4, !tbaa !43
  %399 = getelementptr inbounds i32, i32* %393, i64 4
  %400 = getelementptr inbounds i32, i32* %397, i64 %106
  %401 = load i32, i32* %400, align 4, !tbaa !43
  store i32 %401, i32* %399, align 4, !tbaa !43
  %402 = getelementptr inbounds i32, i32* %393, i64 6
  %403 = getelementptr inbounds i32, i32* %400, i64 %106
  %404 = load i32, i32* %403, align 4, !tbaa !43
  store i32 %404, i32* %402, align 4, !tbaa !43
  %405 = getelementptr inbounds i32, i32* %393, i64 8
  %406 = getelementptr inbounds i32, i32* %403, i64 %106
  %407 = load i32, i32* %406, align 4, !tbaa !43
  store i32 %407, i32* %405, align 4, !tbaa !43
  %408 = getelementptr inbounds i32, i32* %393, i64 10
  %409 = getelementptr inbounds i32, i32* %406, i64 %106
  %410 = load i32, i32* %409, align 4, !tbaa !43
  store i32 %410, i32* %408, align 4, !tbaa !43
  %411 = getelementptr inbounds i32, i32* %393, i64 12
  %412 = getelementptr inbounds i32, i32* %409, i64 %106
  %413 = load i32, i32* %412, align 4, !tbaa !43
  store i32 %413, i32* %411, align 4, !tbaa !43
  %414 = getelementptr inbounds i32, i32* %393, i64 14
  %415 = getelementptr inbounds i32, i32* %412, i64 %106
  %416 = add nsw i32 %392, -8
  %417 = load i32, i32* %415, align 4, !tbaa !43
  store i32 %417, i32* %414, align 4, !tbaa !43
  %418 = getelementptr inbounds i32, i32* %393, i64 16
  %419 = getelementptr inbounds i32, i32* %415, i64 %106
  %420 = icmp eq i32 %416, 0
  br i1 %420, label %421, label %391

421:                                              ; preds = %391, %386
  %422 = load i32, i32* %101, align 4, !tbaa !55
  br label %423

423:                                              ; preds = %421, %363
  %424 = phi i32 [ %422, %421 ], [ 0, %363 ]
  %425 = load i32, i32* %105, align 8, !tbaa !57
  %426 = sext i32 %425 to i64
  %427 = sub nsw i64 0, %426
  %428 = getelementptr inbounds i32, i32* %108, i64 %427
  %429 = mul nsw i32 %424, %23
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds i32, i32* %366, i64 %430
  br i1 %356, label %443, label %432

432:                                              ; preds = %432, %423
  %433 = phi i32 [ %437, %432 ], [ %341, %423 ]
  %434 = phi i32* [ %439, %432 ], [ %428, %423 ]
  %435 = phi i32* [ %440, %432 ], [ %431, %423 ]
  %436 = phi i32 [ %441, %432 ], [ %355, %423 ]
  %437 = add nsw i32 %433, -1
  %438 = load i32, i32* %435, align 4, !tbaa !43
  store i32 %438, i32* %434, align 4, !tbaa !43
  %439 = getelementptr inbounds i32, i32* %434, i64 2
  %440 = getelementptr inbounds i32, i32* %435, i64 %106
  %441 = add i32 %436, -1
  %442 = icmp eq i32 %441, 0
  br i1 %442, label %443, label %432, !llvm.loop !63

443:                                              ; preds = %432, %423
  %444 = phi i32 [ %341, %423 ], [ %437, %432 ]
  %445 = phi i32* [ %428, %423 ], [ %439, %432 ]
  %446 = phi i32* [ %431, %423 ], [ %440, %432 ]
  br i1 %357, label %477, label %447

447:                                              ; preds = %447, %443
  %448 = phi i32 [ %472, %447 ], [ %444, %443 ]
  %449 = phi i32* [ %474, %447 ], [ %445, %443 ]
  %450 = phi i32* [ %475, %447 ], [ %446, %443 ]
  %451 = load i32, i32* %450, align 4, !tbaa !43
  store i32 %451, i32* %449, align 4, !tbaa !43
  %452 = getelementptr inbounds i32, i32* %449, i64 2
  %453 = getelementptr inbounds i32, i32* %450, i64 %106
  %454 = load i32, i32* %453, align 4, !tbaa !43
  store i32 %454, i32* %452, align 4, !tbaa !43
  %455 = getelementptr inbounds i32, i32* %449, i64 4
  %456 = getelementptr inbounds i32, i32* %453, i64 %106
  %457 = load i32, i32* %456, align 4, !tbaa !43
  store i32 %457, i32* %455, align 4, !tbaa !43
  %458 = getelementptr inbounds i32, i32* %449, i64 6
  %459 = getelementptr inbounds i32, i32* %456, i64 %106
  %460 = load i32, i32* %459, align 4, !tbaa !43
  store i32 %460, i32* %458, align 4, !tbaa !43
  %461 = getelementptr inbounds i32, i32* %449, i64 8
  %462 = getelementptr inbounds i32, i32* %459, i64 %106
  %463 = load i32, i32* %462, align 4, !tbaa !43
  store i32 %463, i32* %461, align 4, !tbaa !43
  %464 = getelementptr inbounds i32, i32* %449, i64 10
  %465 = getelementptr inbounds i32, i32* %462, i64 %106
  %466 = load i32, i32* %465, align 4, !tbaa !43
  store i32 %466, i32* %464, align 4, !tbaa !43
  %467 = getelementptr inbounds i32, i32* %449, i64 12
  %468 = getelementptr inbounds i32, i32* %465, i64 %106
  %469 = load i32, i32* %468, align 4, !tbaa !43
  store i32 %469, i32* %467, align 4, !tbaa !43
  %470 = getelementptr inbounds i32, i32* %449, i64 14
  %471 = getelementptr inbounds i32, i32* %468, i64 %106
  %472 = add nsw i32 %448, -8
  %473 = load i32, i32* %471, align 4, !tbaa !43
  store i32 %473, i32* %470, align 4, !tbaa !43
  %474 = getelementptr inbounds i32, i32* %449, i64 16
  %475 = getelementptr inbounds i32, i32* %471, i64 %106
  %476 = icmp eq i32 %472, 0
  br i1 %476, label %477, label %447

477:                                              ; preds = %447, %443
  call fastcc void @dwt_decode_1(%struct.dwt_local* nonnull %4) #9
  %478 = trunc i64 %365 to i32
  br i1 %360, label %503, label %479

479:                                              ; preds = %479, %477
  %480 = phi i64 [ %497, %479 ], [ 0, %477 ]
  %481 = phi i32 [ %498, %479 ], [ 0, %477 ]
  %482 = phi i64 [ %499, %479 ], [ %361, %477 ]
  %483 = getelementptr inbounds i32, i32* %98, i64 %480
  %484 = load i32, i32* %483, align 4, !tbaa !43
  %485 = mul nsw i32 %481, %23
  %486 = add nsw i32 %485, %478
  %487 = sext i32 %486 to i64
  %488 = getelementptr inbounds i32, i32* %117, i64 %487
  store i32 %484, i32* %488, align 4, !tbaa !43
  %489 = or i64 %480, 1
  %490 = or i32 %481, 1
  %491 = getelementptr inbounds i32, i32* %98, i64 %489
  %492 = load i32, i32* %491, align 4, !tbaa !43
  %493 = mul nsw i32 %490, %23
  %494 = add nsw i32 %493, %478
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds i32, i32* %117, i64 %495
  store i32 %492, i32* %496, align 4, !tbaa !43
  %497 = add nuw nsw i64 %480, 2
  %498 = add nuw nsw i32 %481, 2
  %499 = add i64 %482, -2
  %500 = icmp eq i64 %499, 0
  br i1 %500, label %503, label %479

501:                                              ; preds = %513
  %502 = load i32, i32* %101, align 4, !tbaa !55
  br label %363

503:                                              ; preds = %479, %477
  %504 = phi i64 [ 0, %477 ], [ %497, %479 ]
  %505 = phi i32 [ 0, %477 ], [ %498, %479 ]
  br i1 %362, label %513, label %506

506:                                              ; preds = %503
  %507 = getelementptr inbounds i32, i32* %98, i64 %504
  %508 = load i32, i32* %507, align 4, !tbaa !43
  %509 = mul nsw i32 %505, %23
  %510 = add nsw i32 %509, %478
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds i32, i32* %117, i64 %511
  store i32 %508, i32* %512, align 4, !tbaa !43
  br label %513

513:                                              ; preds = %506, %503
  %514 = add nuw nsw i64 %365, 1
  %515 = icmp eq i64 %514, %348
  br i1 %515, label %109, label %501

516:                                              ; preds = %345
  br i1 %131, label %517, label %619

517:                                              ; preds = %516
  %518 = and i64 %347, 1
  %519 = icmp eq i32 %128, 1
  %520 = sub nsw i64 %347, %518
  %521 = icmp eq i64 %518, 0
  br label %522

522:                                              ; preds = %604, %517
  %523 = phi i32 [ %605, %604 ], [ %340, %517 ]
  %524 = phi i64 [ %617, %604 ], [ 0, %517 ]
  %525 = icmp eq i32 %523, 0
  br i1 %525, label %580, label %526

526:                                              ; preds = %522
  %527 = getelementptr inbounds i32, i32* %117, i64 %524
  %528 = load i32, i32* %105, align 8, !tbaa !57
  %529 = sext i32 %528 to i64
  %530 = getelementptr inbounds i32, i32* %98, i64 %529
  %531 = add i32 %523, -1
  %532 = and i32 %523, 7
  %533 = icmp eq i32 %532, 0
  br i1 %533, label %545, label %534

534:                                              ; preds = %534, %526
  %535 = phi i32 [ %539, %534 ], [ %523, %526 ]
  %536 = phi i32* [ %541, %534 ], [ %530, %526 ]
  %537 = phi i32* [ %542, %534 ], [ %527, %526 ]
  %538 = phi i32 [ %543, %534 ], [ %532, %526 ]
  %539 = add nsw i32 %535, -1
  %540 = load i32, i32* %537, align 4, !tbaa !43
  store i32 %540, i32* %536, align 4, !tbaa !43
  %541 = getelementptr inbounds i32, i32* %536, i64 2
  %542 = getelementptr inbounds i32, i32* %537, i64 %106
  %543 = add i32 %538, -1
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %545, label %534, !llvm.loop !64

545:                                              ; preds = %534, %526
  %546 = phi i32 [ %523, %526 ], [ %539, %534 ]
  %547 = phi i32* [ %530, %526 ], [ %541, %534 ]
  %548 = phi i32* [ %527, %526 ], [ %542, %534 ]
  %549 = icmp ult i32 %531, 7
  br i1 %549, label %580, label %550

550:                                              ; preds = %550, %545
  %551 = phi i32 [ %575, %550 ], [ %546, %545 ]
  %552 = phi i32* [ %577, %550 ], [ %547, %545 ]
  %553 = phi i32* [ %578, %550 ], [ %548, %545 ]
  %554 = load i32, i32* %553, align 4, !tbaa !43
  store i32 %554, i32* %552, align 4, !tbaa !43
  %555 = getelementptr inbounds i32, i32* %552, i64 2
  %556 = getelementptr inbounds i32, i32* %553, i64 %106
  %557 = load i32, i32* %556, align 4, !tbaa !43
  store i32 %557, i32* %555, align 4, !tbaa !43
  %558 = getelementptr inbounds i32, i32* %552, i64 4
  %559 = getelementptr inbounds i32, i32* %556, i64 %106
  %560 = load i32, i32* %559, align 4, !tbaa !43
  store i32 %560, i32* %558, align 4, !tbaa !43
  %561 = getelementptr inbounds i32, i32* %552, i64 6
  %562 = getelementptr inbounds i32, i32* %559, i64 %106
  %563 = load i32, i32* %562, align 4, !tbaa !43
  store i32 %563, i32* %561, align 4, !tbaa !43
  %564 = getelementptr inbounds i32, i32* %552, i64 8
  %565 = getelementptr inbounds i32, i32* %562, i64 %106
  %566 = load i32, i32* %565, align 4, !tbaa !43
  store i32 %566, i32* %564, align 4, !tbaa !43
  %567 = getelementptr inbounds i32, i32* %552, i64 10
  %568 = getelementptr inbounds i32, i32* %565, i64 %106
  %569 = load i32, i32* %568, align 4, !tbaa !43
  store i32 %569, i32* %567, align 4, !tbaa !43
  %570 = getelementptr inbounds i32, i32* %552, i64 12
  %571 = getelementptr inbounds i32, i32* %568, i64 %106
  %572 = load i32, i32* %571, align 4, !tbaa !43
  store i32 %572, i32* %570, align 4, !tbaa !43
  %573 = getelementptr inbounds i32, i32* %552, i64 14
  %574 = getelementptr inbounds i32, i32* %571, i64 %106
  %575 = add nsw i32 %551, -8
  %576 = load i32, i32* %574, align 4, !tbaa !43
  store i32 %576, i32* %573, align 4, !tbaa !43
  %577 = getelementptr inbounds i32, i32* %552, i64 16
  %578 = getelementptr inbounds i32, i32* %574, i64 %106
  %579 = icmp eq i32 %575, 0
  br i1 %579, label %580, label %550

580:                                              ; preds = %550, %545, %522
  call fastcc void @dwt_decode_1(%struct.dwt_local* nonnull %4) #9
  %581 = trunc i64 %524 to i32
  br i1 %519, label %606, label %582

582:                                              ; preds = %582, %580
  %583 = phi i64 [ %600, %582 ], [ 0, %580 ]
  %584 = phi i32 [ %601, %582 ], [ 0, %580 ]
  %585 = phi i64 [ %602, %582 ], [ %520, %580 ]
  %586 = getelementptr inbounds i32, i32* %98, i64 %583
  %587 = load i32, i32* %586, align 4, !tbaa !43
  %588 = mul nsw i32 %584, %23
  %589 = add nsw i32 %588, %581
  %590 = sext i32 %589 to i64
  %591 = getelementptr inbounds i32, i32* %117, i64 %590
  store i32 %587, i32* %591, align 4, !tbaa !43
  %592 = or i64 %583, 1
  %593 = or i32 %584, 1
  %594 = getelementptr inbounds i32, i32* %98, i64 %592
  %595 = load i32, i32* %594, align 4, !tbaa !43
  %596 = mul nsw i32 %593, %23
  %597 = add nsw i32 %596, %581
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds i32, i32* %117, i64 %598
  store i32 %595, i32* %599, align 4, !tbaa !43
  %600 = add nuw nsw i64 %583, 2
  %601 = add nuw nsw i32 %584, 2
  %602 = add i64 %585, -2
  %603 = icmp eq i64 %602, 0
  br i1 %603, label %606, label %582

604:                                              ; preds = %616
  %605 = load i32, i32* %101, align 4, !tbaa !55
  br label %522

606:                                              ; preds = %582, %580
  %607 = phi i64 [ 0, %580 ], [ %600, %582 ]
  %608 = phi i32 [ 0, %580 ], [ %601, %582 ]
  br i1 %521, label %616, label %609

609:                                              ; preds = %606
  %610 = getelementptr inbounds i32, i32* %98, i64 %607
  %611 = load i32, i32* %610, align 4, !tbaa !43
  %612 = mul nsw i32 %608, %23
  %613 = add nsw i32 %612, %581
  %614 = sext i32 %613 to i64
  %615 = getelementptr inbounds i32, i32* %117, i64 %614
  store i32 %611, i32* %615, align 4, !tbaa !43
  br label %616

616:                                              ; preds = %609, %606
  %617 = add nuw nsw i64 %524, 1
  %618 = icmp eq i64 %617, %348
  br i1 %618, label %109, label %604

619:                                              ; preds = %680, %516
  %620 = phi i32 [ %681, %680 ], [ %340, %516 ]
  %621 = phi i64 [ %678, %680 ], [ 0, %516 ]
  %622 = icmp eq i32 %620, 0
  br i1 %622, label %677, label %623

623:                                              ; preds = %619
  %624 = getelementptr inbounds i32, i32* %117, i64 %621
  %625 = load i32, i32* %105, align 8, !tbaa !57
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds i32, i32* %98, i64 %626
  %628 = add i32 %620, -1
  %629 = and i32 %620, 7
  %630 = icmp eq i32 %629, 0
  br i1 %630, label %642, label %631

631:                                              ; preds = %631, %623
  %632 = phi i32 [ %636, %631 ], [ %620, %623 ]
  %633 = phi i32* [ %638, %631 ], [ %627, %623 ]
  %634 = phi i32* [ %639, %631 ], [ %624, %623 ]
  %635 = phi i32 [ %640, %631 ], [ %629, %623 ]
  %636 = add nsw i32 %632, -1
  %637 = load i32, i32* %634, align 4, !tbaa !43
  store i32 %637, i32* %633, align 4, !tbaa !43
  %638 = getelementptr inbounds i32, i32* %633, i64 2
  %639 = getelementptr inbounds i32, i32* %634, i64 %106
  %640 = add i32 %635, -1
  %641 = icmp eq i32 %640, 0
  br i1 %641, label %642, label %631, !llvm.loop !65

642:                                              ; preds = %631, %623
  %643 = phi i32 [ %620, %623 ], [ %636, %631 ]
  %644 = phi i32* [ %627, %623 ], [ %638, %631 ]
  %645 = phi i32* [ %624, %623 ], [ %639, %631 ]
  %646 = icmp ult i32 %628, 7
  br i1 %646, label %677, label %647

647:                                              ; preds = %647, %642
  %648 = phi i32 [ %672, %647 ], [ %643, %642 ]
  %649 = phi i32* [ %674, %647 ], [ %644, %642 ]
  %650 = phi i32* [ %675, %647 ], [ %645, %642 ]
  %651 = load i32, i32* %650, align 4, !tbaa !43
  store i32 %651, i32* %649, align 4, !tbaa !43
  %652 = getelementptr inbounds i32, i32* %649, i64 2
  %653 = getelementptr inbounds i32, i32* %650, i64 %106
  %654 = load i32, i32* %653, align 4, !tbaa !43
  store i32 %654, i32* %652, align 4, !tbaa !43
  %655 = getelementptr inbounds i32, i32* %649, i64 4
  %656 = getelementptr inbounds i32, i32* %653, i64 %106
  %657 = load i32, i32* %656, align 4, !tbaa !43
  store i32 %657, i32* %655, align 4, !tbaa !43
  %658 = getelementptr inbounds i32, i32* %649, i64 6
  %659 = getelementptr inbounds i32, i32* %656, i64 %106
  %660 = load i32, i32* %659, align 4, !tbaa !43
  store i32 %660, i32* %658, align 4, !tbaa !43
  %661 = getelementptr inbounds i32, i32* %649, i64 8
  %662 = getelementptr inbounds i32, i32* %659, i64 %106
  %663 = load i32, i32* %662, align 4, !tbaa !43
  store i32 %663, i32* %661, align 4, !tbaa !43
  %664 = getelementptr inbounds i32, i32* %649, i64 10
  %665 = getelementptr inbounds i32, i32* %662, i64 %106
  %666 = load i32, i32* %665, align 4, !tbaa !43
  store i32 %666, i32* %664, align 4, !tbaa !43
  %667 = getelementptr inbounds i32, i32* %649, i64 12
  %668 = getelementptr inbounds i32, i32* %665, i64 %106
  %669 = load i32, i32* %668, align 4, !tbaa !43
  store i32 %669, i32* %667, align 4, !tbaa !43
  %670 = getelementptr inbounds i32, i32* %649, i64 14
  %671 = getelementptr inbounds i32, i32* %668, i64 %106
  %672 = add nsw i32 %648, -8
  %673 = load i32, i32* %671, align 4, !tbaa !43
  store i32 %673, i32* %670, align 4, !tbaa !43
  %674 = getelementptr inbounds i32, i32* %649, i64 16
  %675 = getelementptr inbounds i32, i32* %671, i64 %106
  %676 = icmp eq i32 %672, 0
  br i1 %676, label %677, label %647

677:                                              ; preds = %647, %642, %619
  call fastcc void @dwt_decode_1(%struct.dwt_local* nonnull %4) #9
  %678 = add nuw nsw i64 %621, 1
  %679 = icmp eq i64 %678, %348
  br i1 %679, label %109, label %680

680:                                              ; preds = %677
  %681 = load i32, i32* %101, align 4, !tbaa !55
  br label %619

682:                                              ; preds = %799, %349
  %683 = phi i32 [ %800, %799 ], [ %340, %349 ]
  %684 = phi i64 [ %797, %799 ], [ 0, %349 ]
  %685 = getelementptr inbounds i32, i32* %117, i64 %684
  %686 = icmp eq i32 %683, 0
  br i1 %686, label %742, label %687

687:                                              ; preds = %682
  %688 = load i32, i32* %105, align 8, !tbaa !57
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds i32, i32* %98, i64 %689
  %691 = add i32 %683, -1
  %692 = and i32 %683, 7
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %705, label %694

694:                                              ; preds = %694, %687
  %695 = phi i32 [ %699, %694 ], [ %683, %687 ]
  %696 = phi i32* [ %701, %694 ], [ %690, %687 ]
  %697 = phi i32* [ %702, %694 ], [ %685, %687 ]
  %698 = phi i32 [ %703, %694 ], [ %692, %687 ]
  %699 = add nsw i32 %695, -1
  %700 = load i32, i32* %697, align 4, !tbaa !43
  store i32 %700, i32* %696, align 4, !tbaa !43
  %701 = getelementptr inbounds i32, i32* %696, i64 2
  %702 = getelementptr inbounds i32, i32* %697, i64 %106
  %703 = add i32 %698, -1
  %704 = icmp eq i32 %703, 0
  br i1 %704, label %705, label %694, !llvm.loop !66

705:                                              ; preds = %694, %687
  %706 = phi i32 [ %683, %687 ], [ %699, %694 ]
  %707 = phi i32* [ %690, %687 ], [ %701, %694 ]
  %708 = phi i32* [ %685, %687 ], [ %702, %694 ]
  %709 = icmp ult i32 %691, 7
  br i1 %709, label %740, label %710

710:                                              ; preds = %710, %705
  %711 = phi i32 [ %735, %710 ], [ %706, %705 ]
  %712 = phi i32* [ %737, %710 ], [ %707, %705 ]
  %713 = phi i32* [ %738, %710 ], [ %708, %705 ]
  %714 = load i32, i32* %713, align 4, !tbaa !43
  store i32 %714, i32* %712, align 4, !tbaa !43
  %715 = getelementptr inbounds i32, i32* %712, i64 2
  %716 = getelementptr inbounds i32, i32* %713, i64 %106
  %717 = load i32, i32* %716, align 4, !tbaa !43
  store i32 %717, i32* %715, align 4, !tbaa !43
  %718 = getelementptr inbounds i32, i32* %712, i64 4
  %719 = getelementptr inbounds i32, i32* %716, i64 %106
  %720 = load i32, i32* %719, align 4, !tbaa !43
  store i32 %720, i32* %718, align 4, !tbaa !43
  %721 = getelementptr inbounds i32, i32* %712, i64 6
  %722 = getelementptr inbounds i32, i32* %719, i64 %106
  %723 = load i32, i32* %722, align 4, !tbaa !43
  store i32 %723, i32* %721, align 4, !tbaa !43
  %724 = getelementptr inbounds i32, i32* %712, i64 8
  %725 = getelementptr inbounds i32, i32* %722, i64 %106
  %726 = load i32, i32* %725, align 4, !tbaa !43
  store i32 %726, i32* %724, align 4, !tbaa !43
  %727 = getelementptr inbounds i32, i32* %712, i64 10
  %728 = getelementptr inbounds i32, i32* %725, i64 %106
  %729 = load i32, i32* %728, align 4, !tbaa !43
  store i32 %729, i32* %727, align 4, !tbaa !43
  %730 = getelementptr inbounds i32, i32* %712, i64 12
  %731 = getelementptr inbounds i32, i32* %728, i64 %106
  %732 = load i32, i32* %731, align 4, !tbaa !43
  store i32 %732, i32* %730, align 4, !tbaa !43
  %733 = getelementptr inbounds i32, i32* %712, i64 14
  %734 = getelementptr inbounds i32, i32* %731, i64 %106
  %735 = add nsw i32 %711, -8
  %736 = load i32, i32* %734, align 4, !tbaa !43
  store i32 %736, i32* %733, align 4, !tbaa !43
  %737 = getelementptr inbounds i32, i32* %712, i64 16
  %738 = getelementptr inbounds i32, i32* %734, i64 %106
  %739 = icmp eq i32 %735, 0
  br i1 %739, label %740, label %710

740:                                              ; preds = %710, %705
  %741 = load i32, i32* %101, align 4, !tbaa !55
  br label %742

742:                                              ; preds = %740, %682
  %743 = phi i32 [ %741, %740 ], [ 0, %682 ]
  %744 = load i32, i32* %105, align 8, !tbaa !57
  %745 = sext i32 %744 to i64
  %746 = sub nsw i64 0, %745
  %747 = getelementptr inbounds i32, i32* %108, i64 %746
  %748 = mul nsw i32 %743, %23
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds i32, i32* %685, i64 %749
  br i1 %356, label %762, label %751

751:                                              ; preds = %751, %742
  %752 = phi i32 [ %756, %751 ], [ %341, %742 ]
  %753 = phi i32* [ %758, %751 ], [ %747, %742 ]
  %754 = phi i32* [ %759, %751 ], [ %750, %742 ]
  %755 = phi i32 [ %760, %751 ], [ %355, %742 ]
  %756 = add nsw i32 %752, -1
  %757 = load i32, i32* %754, align 4, !tbaa !43
  store i32 %757, i32* %753, align 4, !tbaa !43
  %758 = getelementptr inbounds i32, i32* %753, i64 2
  %759 = getelementptr inbounds i32, i32* %754, i64 %106
  %760 = add i32 %755, -1
  %761 = icmp eq i32 %760, 0
  br i1 %761, label %762, label %751, !llvm.loop !67

762:                                              ; preds = %751, %742
  %763 = phi i32 [ %341, %742 ], [ %756, %751 ]
  %764 = phi i32* [ %747, %742 ], [ %758, %751 ]
  %765 = phi i32* [ %750, %742 ], [ %759, %751 ]
  br i1 %357, label %796, label %766

766:                                              ; preds = %766, %762
  %767 = phi i32 [ %791, %766 ], [ %763, %762 ]
  %768 = phi i32* [ %793, %766 ], [ %764, %762 ]
  %769 = phi i32* [ %794, %766 ], [ %765, %762 ]
  %770 = load i32, i32* %769, align 4, !tbaa !43
  store i32 %770, i32* %768, align 4, !tbaa !43
  %771 = getelementptr inbounds i32, i32* %768, i64 2
  %772 = getelementptr inbounds i32, i32* %769, i64 %106
  %773 = load i32, i32* %772, align 4, !tbaa !43
  store i32 %773, i32* %771, align 4, !tbaa !43
  %774 = getelementptr inbounds i32, i32* %768, i64 4
  %775 = getelementptr inbounds i32, i32* %772, i64 %106
  %776 = load i32, i32* %775, align 4, !tbaa !43
  store i32 %776, i32* %774, align 4, !tbaa !43
  %777 = getelementptr inbounds i32, i32* %768, i64 6
  %778 = getelementptr inbounds i32, i32* %775, i64 %106
  %779 = load i32, i32* %778, align 4, !tbaa !43
  store i32 %779, i32* %777, align 4, !tbaa !43
  %780 = getelementptr inbounds i32, i32* %768, i64 8
  %781 = getelementptr inbounds i32, i32* %778, i64 %106
  %782 = load i32, i32* %781, align 4, !tbaa !43
  store i32 %782, i32* %780, align 4, !tbaa !43
  %783 = getelementptr inbounds i32, i32* %768, i64 10
  %784 = getelementptr inbounds i32, i32* %781, i64 %106
  %785 = load i32, i32* %784, align 4, !tbaa !43
  store i32 %785, i32* %783, align 4, !tbaa !43
  %786 = getelementptr inbounds i32, i32* %768, i64 12
  %787 = getelementptr inbounds i32, i32* %784, i64 %106
  %788 = load i32, i32* %787, align 4, !tbaa !43
  store i32 %788, i32* %786, align 4, !tbaa !43
  %789 = getelementptr inbounds i32, i32* %768, i64 14
  %790 = getelementptr inbounds i32, i32* %787, i64 %106
  %791 = add nsw i32 %767, -8
  %792 = load i32, i32* %790, align 4, !tbaa !43
  store i32 %792, i32* %789, align 4, !tbaa !43
  %793 = getelementptr inbounds i32, i32* %768, i64 16
  %794 = getelementptr inbounds i32, i32* %790, i64 %106
  %795 = icmp eq i32 %791, 0
  br i1 %795, label %796, label %766

796:                                              ; preds = %766, %762
  call fastcc void @dwt_decode_1(%struct.dwt_local* nonnull %4) #9
  %797 = add nuw nsw i64 %684, 1
  %798 = icmp eq i64 %797, %348
  br i1 %798, label %109, label %799

799:                                              ; preds = %796
  %800 = load i32, i32* %101, align 4, !tbaa !55
  br label %682

801:                                              ; preds = %109, %32
  %802 = phi i8* [ %33, %32 ], [ %95, %109 ]
  tail call void @free(i8* %802) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @dwt_decode_1(%struct.dwt_local* nocapture readonly) unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8, !tbaa !50
  %4 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8, !tbaa !56
  %6 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4, !tbaa !55
  %8 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 8, !tbaa !57
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %80

11:                                               ; preds = %1
  %12 = icmp sgt i32 %5, 0
  %13 = icmp sgt i32 %7, 1
  %14 = or i1 %12, %13
  br i1 %14, label %15, label %152

15:                                               ; preds = %11
  %16 = icmp sgt i32 %7, 0
  br i1 %16, label %17, label %25

17:                                               ; preds = %15
  %18 = shl i32 %5, 1
  %19 = add i32 %18, -1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %3, i64 %20
  %22 = getelementptr inbounds i32, i32* %3, i64 1
  %23 = sext i32 %5 to i64
  %24 = zext i32 %7 to i64
  br label %32

25:                                               ; preds = %43, %15
  br i1 %12, label %26, label %152

26:                                               ; preds = %25
  %27 = shl i32 %7, 1
  %28 = add i32 %27, -2
  %29 = sext i32 %28 to i64
  %30 = sext i32 %7 to i64
  %31 = zext i32 %5 to i64
  br label %60

32:                                               ; preds = %43, %17
  %33 = phi i64 [ 0, %17 ], [ %58, %43 ]
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %43, label %35

35:                                               ; preds = %32
  %36 = icmp sgt i64 %33, %23
  br i1 %36, label %43, label %37

37:                                               ; preds = %35
  %38 = trunc i64 %33 to i32
  %39 = shl i32 %38, 1
  %40 = add i32 %39, -1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %3, i64 %41
  br label %43

43:                                               ; preds = %37, %35, %32
  %44 = phi i32* [ %42, %37 ], [ %22, %32 ], [ %21, %35 ]
  %45 = load i32, i32* %44, align 4, !tbaa !43
  %46 = icmp slt i64 %33, %23
  %47 = shl nuw nsw i64 %33, 1
  %48 = or i64 %47, 1
  %49 = select i1 %46, i64 %48, i64 %20
  %50 = getelementptr inbounds i32, i32* %3, i64 %49
  %51 = load i32, i32* %50, align 4, !tbaa !43
  %52 = add i32 %45, 2
  %53 = add i32 %52, %51
  %54 = ashr i32 %53, 2
  %55 = getelementptr inbounds i32, i32* %3, i64 %47
  %56 = load i32, i32* %55, align 4, !tbaa !43
  %57 = sub nsw i32 %56, %54
  store i32 %57, i32* %55, align 4, !tbaa !43
  %58 = add nuw nsw i64 %33, 1
  %59 = icmp eq i64 %58, %24
  br i1 %59, label %25, label %32

60:                                               ; preds = %60, %26
  %61 = phi i64 [ 0, %26 ], [ %67, %60 ]
  %62 = icmp slt i64 %61, %30
  %63 = shl nuw nsw i64 %61, 1
  %64 = select i1 %62, i64 %63, i64 %29
  %65 = getelementptr inbounds i32, i32* %3, i64 %64
  %66 = load i32, i32* %65, align 4, !tbaa !43
  %67 = add nuw nsw i64 %61, 1
  %68 = icmp slt i64 %67, %30
  %69 = shl nuw nsw i64 %67, 1
  %70 = select i1 %68, i64 %69, i64 %29
  %71 = getelementptr inbounds i32, i32* %3, i64 %70
  %72 = load i32, i32* %71, align 4, !tbaa !43
  %73 = add nsw i32 %72, %66
  %74 = ashr i32 %73, 1
  %75 = or i64 %63, 1
  %76 = getelementptr inbounds i32, i32* %3, i64 %75
  %77 = load i32, i32* %76, align 4, !tbaa !43
  %78 = add nsw i32 %74, %77
  store i32 %78, i32* %76, align 4, !tbaa !43
  %79 = icmp eq i64 %67, %31
  br i1 %79, label %152, label %60

80:                                               ; preds = %1
  %81 = icmp eq i32 %7, 0
  %82 = icmp eq i32 %5, 1
  %83 = and i1 %82, %81
  br i1 %83, label %92, label %84

84:                                               ; preds = %80
  %85 = icmp sgt i32 %7, 0
  br i1 %85, label %86, label %95

86:                                               ; preds = %84
  %87 = shl i32 %5, 1
  %88 = add i32 %87, -2
  %89 = sext i32 %88 to i64
  %90 = sext i32 %5 to i64
  %91 = zext i32 %7 to i64
  br label %105

92:                                               ; preds = %80
  %93 = load i32, i32* %3, align 4, !tbaa !43
  %94 = sdiv i32 %93, 2
  store i32 %94, i32* %3, align 4, !tbaa !43
  br label %152

95:                                               ; preds = %105, %84
  %96 = icmp sgt i32 %5, 0
  br i1 %96, label %97, label %152

97:                                               ; preds = %95
  %98 = shl i32 %7, 1
  %99 = add i32 %98, -1
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i32, i32* %3, i64 %100
  %102 = getelementptr inbounds i32, i32* %3, i64 1
  %103 = sext i32 %7 to i64
  %104 = zext i32 %5 to i64
  br label %126

105:                                              ; preds = %105, %86
  %106 = phi i64 [ 0, %86 ], [ %112, %105 ]
  %107 = icmp slt i64 %106, %90
  %108 = shl nuw nsw i64 %106, 1
  %109 = select i1 %107, i64 %108, i64 %89
  %110 = getelementptr inbounds i32, i32* %3, i64 %109
  %111 = load i32, i32* %110, align 4, !tbaa !43
  %112 = add nuw nsw i64 %106, 1
  %113 = icmp slt i64 %112, %90
  %114 = shl nuw nsw i64 %112, 1
  %115 = select i1 %113, i64 %114, i64 %89
  %116 = getelementptr inbounds i32, i32* %3, i64 %115
  %117 = load i32, i32* %116, align 4, !tbaa !43
  %118 = add i32 %111, 2
  %119 = add i32 %118, %117
  %120 = ashr i32 %119, 2
  %121 = or i64 %108, 1
  %122 = getelementptr inbounds i32, i32* %3, i64 %121
  %123 = load i32, i32* %122, align 4, !tbaa !43
  %124 = sub nsw i32 %123, %120
  store i32 %124, i32* %122, align 4, !tbaa !43
  %125 = icmp eq i64 %112, %91
  br i1 %125, label %95, label %105

126:                                              ; preds = %142, %97
  %127 = phi i64 [ 0, %97 ], [ %150, %142 ]
  %128 = icmp slt i64 %127, %103
  %129 = shl nuw i64 %127, 1
  %130 = or i64 %129, 1
  %131 = select i1 %128, i64 %130, i64 %100
  %132 = getelementptr inbounds i32, i32* %3, i64 %131
  %133 = load i32, i32* %132, align 4, !tbaa !43
  %134 = icmp eq i64 %127, 0
  br i1 %134, label %142, label %135

135:                                              ; preds = %126
  %136 = icmp sgt i64 %127, %103
  br i1 %136, label %142, label %137

137:                                              ; preds = %135
  %138 = shl i64 %127, 33
  %139 = add i64 %138, -4294967296
  %140 = ashr exact i64 %139, 32
  %141 = getelementptr inbounds i32, i32* %3, i64 %140
  br label %142

142:                                              ; preds = %137, %135, %126
  %143 = phi i32* [ %141, %137 ], [ %102, %126 ], [ %101, %135 ]
  %144 = load i32, i32* %143, align 4, !tbaa !43
  %145 = add nsw i32 %144, %133
  %146 = ashr i32 %145, 1
  %147 = getelementptr inbounds i32, i32* %3, i64 %129
  %148 = load i32, i32* %147, align 4, !tbaa !43
  %149 = add nsw i32 %146, %148
  store i32 %149, i32* %147, align 4, !tbaa !43
  %150 = add nuw nsw i64 %127, 1
  %151 = icmp eq i64 %150, %104
  br i1 %151, label %152, label %126

152:                                              ; preds = %142, %95, %92, %60, %25, %11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @dwt_getgain(i32) #6 {
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = add i32 %0, -1
  %5 = icmp ult i32 %4, 2
  %6 = select i1 %5, i32 1, i32 2
  br label %7

7:                                                ; preds = %3, %1
  %8 = phi i32 [ 0, %1 ], [ %6, %3 ]
  ret i32 %8
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @dwt_getnorm(i32, i32) #6 {
  %3 = sext i32 %1 to i64
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [4 x [10 x double]], [4 x [10 x double]]* @dwt_norms, i64 0, i64 %3, i64 %4
  %6 = load double, double* %5, align 8, !tbaa !68
  ret double %6
}

; Function Attrs: nounwind uwtable
define void @dwt_encode_real(%struct.opj_tcd_tilecomp* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8, !tbaa !32
  %4 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8, !tbaa !34
  %6 = sub nsw i32 %3, %5
  %7 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 4
  %8 = load i32, i32* %7, align 8, !tbaa !35
  %9 = add i32 %8, -1
  %10 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 6
  %11 = load i32*, i32** %10, align 8, !tbaa !36
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %818

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 5
  %15 = sext i32 %6 to i64
  %16 = sext i32 %9 to i64
  %17 = zext i32 %9 to i64
  %18 = sub i32 %3, %5
  %19 = sext i32 %18 to i64
  %20 = sext i32 %18 to i64
  br label %21

21:                                               ; preds = %815, %13
  %22 = phi i64 [ 0, %13 ], [ %816, %815 ]
  %23 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %14, align 8, !tbaa !37
  %24 = sub nsw i64 %16, %22
  %25 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 2
  %26 = load i32, i32* %25, align 8, !tbaa !38
  %27 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 0
  %28 = load i32, i32* %27, align 8, !tbaa !40
  %29 = sub i32 %26, %28
  %30 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 3
  %31 = load i32, i32* %30, align 4, !tbaa !41
  %32 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 1
  %33 = load i32, i32* %32, align 4, !tbaa !42
  %34 = sub i32 %31, %33
  %35 = add nsw i64 %24, -1
  %36 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %35, i32 2
  %37 = load i32, i32* %36, align 8, !tbaa !38
  %38 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %35, i32 0
  %39 = load i32, i32* %38, align 8, !tbaa !40
  %40 = sub nsw i32 %37, %39
  %41 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %35, i32 3
  %42 = load i32, i32* %41, align 4, !tbaa !41
  %43 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %35, i32 1
  %44 = load i32, i32* %43, align 4, !tbaa !42
  %45 = sub nsw i32 %42, %44
  %46 = srem i32 %28, 2
  %47 = srem i32 %33, 2
  %48 = sub nsw i32 %34, %45
  %49 = sext i32 %34 to i64
  %50 = shl nsw i64 %49, 2
  %51 = tail call noalias i8* @malloc(i64 %50) #9
  %52 = bitcast i8* %51 to i32*
  %53 = icmp sgt i32 %29, 0
  br i1 %53, label %54, label %323

54:                                               ; preds = %21
  %55 = icmp sgt i32 %34, 0
  %56 = icmp sgt i32 %45, 0
  %57 = sext i32 %47 to i64
  %58 = zext i32 %45 to i64
  %59 = icmp sgt i32 %48, 0
  %60 = sext i32 %45 to i64
  %61 = zext i32 %48 to i64
  br i1 %55, label %62, label %184

62:                                               ; preds = %54
  %63 = zext i32 %34 to i64
  %64 = zext i32 %29 to i64
  %65 = and i64 %63, 1
  %66 = icmp eq i32 %34, 1
  %67 = sub nsw i64 %63, %65
  %68 = icmp eq i64 %65, 0
  %69 = and i64 %58, 1
  %70 = icmp eq i32 %45, 1
  %71 = sub nsw i64 %58, %69
  %72 = icmp eq i64 %69, 0
  %73 = and i64 %61, 1
  %74 = icmp eq i32 %48, 1
  %75 = sub nsw i64 %61, %73
  %76 = icmp eq i64 %73, 0
  br label %77

77:                                               ; preds = %150, %62
  %78 = phi i64 [ 0, %62 ], [ %151, %150 ]
  %79 = getelementptr inbounds i32, i32* %11, i64 %78
  br i1 %66, label %173, label %153

80:                                               ; preds = %183, %80
  %81 = phi i64 [ %96, %80 ], [ 0, %183 ]
  %82 = phi i64 [ %97, %80 ], [ %71, %183 ]
  %83 = shl nuw nsw i64 %81, 1
  %84 = add nsw i64 %83, %57
  %85 = getelementptr inbounds i32, i32* %52, i64 %84
  %86 = load i32, i32* %85, align 4, !tbaa !43
  %87 = mul nsw i64 %81, %15
  %88 = getelementptr inbounds i32, i32* %79, i64 %87
  store i32 %86, i32* %88, align 4, !tbaa !43
  %89 = or i64 %81, 1
  %90 = shl nuw nsw i64 %89, 1
  %91 = add nsw i64 %90, %57
  %92 = getelementptr inbounds i32, i32* %52, i64 %91
  %93 = load i32, i32* %92, align 4, !tbaa !43
  %94 = mul nsw i64 %89, %15
  %95 = getelementptr inbounds i32, i32* %79, i64 %94
  store i32 %93, i32* %95, align 4, !tbaa !43
  %96 = add nuw nsw i64 %81, 2
  %97 = add i64 %82, -2
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %80

99:                                               ; preds = %183, %80
  %100 = phi i64 [ 0, %183 ], [ %96, %80 ]
  br i1 %72, label %108, label %101

101:                                              ; preds = %99
  %102 = shl nuw nsw i64 %100, 1
  %103 = add nsw i64 %102, %57
  %104 = getelementptr inbounds i32, i32* %52, i64 %103
  %105 = load i32, i32* %104, align 4, !tbaa !43
  %106 = mul nsw i64 %100, %15
  %107 = getelementptr inbounds i32, i32* %79, i64 %106
  store i32 %105, i32* %107, align 4, !tbaa !43
  br label %108

108:                                              ; preds = %182, %101, %99
  br i1 %59, label %109, label %150

109:                                              ; preds = %108
  br i1 %74, label %137, label %110

110:                                              ; preds = %110, %109
  %111 = phi i64 [ %134, %110 ], [ 0, %109 ]
  %112 = phi i64 [ %135, %110 ], [ %75, %109 ]
  %113 = trunc i64 %111 to i32
  %114 = shl i32 %113, 1
  %115 = or i32 %114, 1
  %116 = sub nsw i32 %115, %47
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i32, i32* %52, i64 %117
  %119 = load i32, i32* %118, align 4, !tbaa !43
  %120 = add nsw i64 %111, %60
  %121 = mul nsw i64 %120, %15
  %122 = getelementptr inbounds i32, i32* %79, i64 %121
  store i32 %119, i32* %122, align 4, !tbaa !43
  %123 = or i64 %111, 1
  %124 = trunc i64 %123 to i32
  %125 = shl i32 %124, 1
  %126 = or i32 %125, 1
  %127 = sub nsw i32 %126, %47
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i32, i32* %52, i64 %128
  %130 = load i32, i32* %129, align 4, !tbaa !43
  %131 = add nsw i64 %123, %60
  %132 = mul nsw i64 %131, %15
  %133 = getelementptr inbounds i32, i32* %79, i64 %132
  store i32 %130, i32* %133, align 4, !tbaa !43
  %134 = add nuw nsw i64 %111, 2
  %135 = add i64 %112, -2
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %110

137:                                              ; preds = %110, %109
  %138 = phi i64 [ 0, %109 ], [ %134, %110 ]
  br i1 %76, label %150, label %139

139:                                              ; preds = %137
  %140 = trunc i64 %138 to i32
  %141 = shl i32 %140, 1
  %142 = or i32 %141, 1
  %143 = sub nsw i32 %142, %47
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i32, i32* %52, i64 %144
  %146 = load i32, i32* %145, align 4, !tbaa !43
  %147 = add nsw i64 %138, %60
  %148 = mul nsw i64 %147, %15
  %149 = getelementptr inbounds i32, i32* %79, i64 %148
  store i32 %146, i32* %149, align 4, !tbaa !43
  br label %150

150:                                              ; preds = %139, %137, %108
  %151 = add nuw nsw i64 %78, 1
  %152 = icmp eq i64 %151, %64
  br i1 %152, label %323, label %77

153:                                              ; preds = %153, %77
  %154 = phi i64 [ %169, %153 ], [ 0, %77 ]
  %155 = phi i32 [ %170, %153 ], [ 0, %77 ]
  %156 = phi i64 [ %171, %153 ], [ %67, %77 ]
  %157 = mul nsw i32 %155, %6
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds i32, i32* %79, i64 %158
  %160 = load i32, i32* %159, align 4, !tbaa !43
  %161 = getelementptr inbounds i32, i32* %52, i64 %154
  store i32 %160, i32* %161, align 4, !tbaa !43
  %162 = or i64 %154, 1
  %163 = or i32 %155, 1
  %164 = mul nsw i32 %163, %6
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i32, i32* %79, i64 %165
  %167 = load i32, i32* %166, align 4, !tbaa !43
  %168 = getelementptr inbounds i32, i32* %52, i64 %162
  store i32 %167, i32* %168, align 4, !tbaa !43
  %169 = add nuw nsw i64 %154, 2
  %170 = add nuw nsw i32 %155, 2
  %171 = add i64 %156, -2
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %153

173:                                              ; preds = %153, %77
  %174 = phi i64 [ 0, %77 ], [ %169, %153 ]
  %175 = phi i32 [ 0, %77 ], [ %170, %153 ]
  br i1 %68, label %182, label %176

176:                                              ; preds = %173
  %177 = mul nsw i32 %175, %6
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i32, i32* %79, i64 %178
  %180 = load i32, i32* %179, align 4, !tbaa !43
  %181 = getelementptr inbounds i32, i32* %52, i64 %174
  store i32 %180, i32* %181, align 4, !tbaa !43
  br label %182

182:                                              ; preds = %176, %173
  tail call fastcc void @dwt_encode_1_real(i32* nonnull %52, i32 %48, i32 %45, i32 %47)
  br i1 %56, label %183, label %108

183:                                              ; preds = %182
  br i1 %70, label %99, label %80

184:                                              ; preds = %54
  %185 = zext i32 %29 to i64
  br i1 %56, label %191, label %186

186:                                              ; preds = %184
  %187 = and i64 %61, 1
  %188 = icmp eq i32 %48, 1
  %189 = sub nsw i64 %61, %187
  %190 = icmp eq i64 %187, 0
  br label %276

191:                                              ; preds = %184
  %192 = and i64 %58, 1
  %193 = icmp eq i32 %45, 1
  %194 = sub nsw i64 %58, %192
  %195 = icmp eq i64 %192, 0
  %196 = and i64 %61, 1
  %197 = icmp eq i32 %48, 1
  %198 = sub nsw i64 %61, %196
  %199 = icmp eq i64 %196, 0
  br label %200

200:                                              ; preds = %262, %191
  %201 = phi i64 [ %263, %262 ], [ 0, %191 ]
  %202 = getelementptr inbounds i32, i32* %11, i64 %201
  tail call fastcc void @dwt_encode_1_real(i32* %52, i32 %48, i32 %45, i32 %47)
  br i1 %193, label %265, label %203

203:                                              ; preds = %203, %200
  %204 = phi i64 [ %219, %203 ], [ 0, %200 ]
  %205 = phi i64 [ %220, %203 ], [ %194, %200 ]
  %206 = shl nuw nsw i64 %204, 1
  %207 = add nsw i64 %206, %57
  %208 = getelementptr inbounds i32, i32* %52, i64 %207
  %209 = load i32, i32* %208, align 4, !tbaa !43
  %210 = mul nsw i64 %204, %15
  %211 = getelementptr inbounds i32, i32* %202, i64 %210
  store i32 %209, i32* %211, align 4, !tbaa !43
  %212 = or i64 %204, 1
  %213 = shl nuw nsw i64 %212, 1
  %214 = add nsw i64 %213, %57
  %215 = getelementptr inbounds i32, i32* %52, i64 %214
  %216 = load i32, i32* %215, align 4, !tbaa !43
  %217 = mul nsw i64 %212, %15
  %218 = getelementptr inbounds i32, i32* %202, i64 %217
  store i32 %216, i32* %218, align 4, !tbaa !43
  %219 = add nuw nsw i64 %204, 2
  %220 = add i64 %205, -2
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %265, label %203

222:                                              ; preds = %275, %222
  %223 = phi i64 [ %246, %222 ], [ 0, %275 ]
  %224 = phi i64 [ %247, %222 ], [ %198, %275 ]
  %225 = trunc i64 %223 to i32
  %226 = shl i32 %225, 1
  %227 = or i32 %226, 1
  %228 = sub nsw i32 %227, %47
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds i32, i32* %52, i64 %229
  %231 = load i32, i32* %230, align 4, !tbaa !43
  %232 = add nsw i64 %223, %60
  %233 = mul nsw i64 %232, %15
  %234 = getelementptr inbounds i32, i32* %202, i64 %233
  store i32 %231, i32* %234, align 4, !tbaa !43
  %235 = or i64 %223, 1
  %236 = trunc i64 %235 to i32
  %237 = shl i32 %236, 1
  %238 = or i32 %237, 1
  %239 = sub nsw i32 %238, %47
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds i32, i32* %52, i64 %240
  %242 = load i32, i32* %241, align 4, !tbaa !43
  %243 = add nsw i64 %235, %60
  %244 = mul nsw i64 %243, %15
  %245 = getelementptr inbounds i32, i32* %202, i64 %244
  store i32 %242, i32* %245, align 4, !tbaa !43
  %246 = add nuw nsw i64 %223, 2
  %247 = add i64 %224, -2
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %222

249:                                              ; preds = %275, %222
  %250 = phi i64 [ 0, %275 ], [ %246, %222 ]
  br i1 %199, label %262, label %251

251:                                              ; preds = %249
  %252 = trunc i64 %250 to i32
  %253 = shl i32 %252, 1
  %254 = or i32 %253, 1
  %255 = sub nsw i32 %254, %47
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds i32, i32* %52, i64 %256
  %258 = load i32, i32* %257, align 4, !tbaa !43
  %259 = add nsw i64 %250, %60
  %260 = mul nsw i64 %259, %15
  %261 = getelementptr inbounds i32, i32* %202, i64 %260
  store i32 %258, i32* %261, align 4, !tbaa !43
  br label %262

262:                                              ; preds = %274, %251, %249
  %263 = add nuw nsw i64 %201, 1
  %264 = icmp eq i64 %263, %185
  br i1 %264, label %323, label %200

265:                                              ; preds = %203, %200
  %266 = phi i64 [ 0, %200 ], [ %219, %203 ]
  br i1 %195, label %274, label %267

267:                                              ; preds = %265
  %268 = shl nuw nsw i64 %266, 1
  %269 = add nsw i64 %268, %57
  %270 = getelementptr inbounds i32, i32* %52, i64 %269
  %271 = load i32, i32* %270, align 4, !tbaa !43
  %272 = mul nsw i64 %266, %15
  %273 = getelementptr inbounds i32, i32* %202, i64 %272
  store i32 %271, i32* %273, align 4, !tbaa !43
  br label %274

274:                                              ; preds = %267, %265
  br i1 %59, label %275, label %262

275:                                              ; preds = %274
  br i1 %197, label %249, label %222

276:                                              ; preds = %320, %186
  %277 = phi i64 [ %321, %320 ], [ 0, %186 ]
  %278 = getelementptr inbounds i32, i32* %11, i64 %277
  tail call fastcc void @dwt_encode_1_real(i32* %52, i32 %48, i32 %45, i32 %47)
  br i1 %59, label %279, label %320

279:                                              ; preds = %276
  br i1 %188, label %307, label %280

280:                                              ; preds = %280, %279
  %281 = phi i64 [ %304, %280 ], [ 0, %279 ]
  %282 = phi i64 [ %305, %280 ], [ %189, %279 ]
  %283 = trunc i64 %281 to i32
  %284 = shl i32 %283, 1
  %285 = or i32 %284, 1
  %286 = sub nsw i32 %285, %47
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds i32, i32* %52, i64 %287
  %289 = load i32, i32* %288, align 4, !tbaa !43
  %290 = add nsw i64 %281, %60
  %291 = mul nsw i64 %290, %15
  %292 = getelementptr inbounds i32, i32* %278, i64 %291
  store i32 %289, i32* %292, align 4, !tbaa !43
  %293 = or i64 %281, 1
  %294 = trunc i64 %293 to i32
  %295 = shl i32 %294, 1
  %296 = or i32 %295, 1
  %297 = sub nsw i32 %296, %47
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds i32, i32* %52, i64 %298
  %300 = load i32, i32* %299, align 4, !tbaa !43
  %301 = add nsw i64 %293, %60
  %302 = mul nsw i64 %301, %15
  %303 = getelementptr inbounds i32, i32* %278, i64 %302
  store i32 %300, i32* %303, align 4, !tbaa !43
  %304 = add nuw nsw i64 %281, 2
  %305 = add i64 %282, -2
  %306 = icmp eq i64 %305, 0
  br i1 %306, label %307, label %280

307:                                              ; preds = %280, %279
  %308 = phi i64 [ 0, %279 ], [ %304, %280 ]
  br i1 %190, label %320, label %309

309:                                              ; preds = %307
  %310 = trunc i64 %308 to i32
  %311 = shl i32 %310, 1
  %312 = or i32 %311, 1
  %313 = sub nsw i32 %312, %47
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds i32, i32* %52, i64 %314
  %316 = load i32, i32* %315, align 4, !tbaa !43
  %317 = add nsw i64 %308, %60
  %318 = mul nsw i64 %317, %15
  %319 = getelementptr inbounds i32, i32* %278, i64 %318
  store i32 %316, i32* %319, align 4, !tbaa !43
  br label %320

320:                                              ; preds = %309, %307, %276
  %321 = add nuw nsw i64 %277, 1
  %322 = icmp eq i64 %321, %185
  br i1 %322, label %323, label %276

323:                                              ; preds = %320, %262, %150, %21
  tail call void @free(i8* %51) #9
  %324 = sub nsw i32 %29, %40
  %325 = sext i32 %29 to i64
  %326 = shl nsw i64 %325, 2
  %327 = tail call noalias i8* @malloc(i64 %326) #9
  %328 = bitcast i8* %327 to i32*
  %329 = icmp sgt i32 %34, 0
  br i1 %329, label %330, label %815

330:                                              ; preds = %323
  %331 = icmp sgt i32 %40, 0
  %332 = sext i32 %46 to i64
  %333 = zext i32 %40 to i64
  %334 = icmp sgt i32 %324, 0
  %335 = sext i32 %40 to i64
  %336 = zext i32 %324 to i64
  br i1 %53, label %337, label %614

337:                                              ; preds = %330
  %338 = zext i32 %29 to i64
  %339 = zext i32 %34 to i64
  %340 = shl nsw i64 %332, 2
  %341 = getelementptr i8, i8* %327, i64 %340
  %342 = getelementptr i8, i8* %327, i64 -4
  %343 = shl nuw nsw i64 %333, 3
  %344 = add nsw i64 %343, %340
  %345 = getelementptr i8, i8* %342, i64 %344
  %346 = shl nuw nsw i64 %338, 2
  %347 = getelementptr i8, i8* %327, i64 %346
  %348 = and i64 %338, 4294967288
  %349 = add nsw i64 %348, -8
  %350 = lshr exact i64 %349, 3
  %351 = add nuw nsw i64 %350, 1
  %352 = icmp ult i32 %29, 8
  %353 = and i64 %338, 4294967288
  %354 = and i64 %351, 3
  %355 = icmp ult i64 %349, 24
  %356 = sub nsw i64 %351, %354
  %357 = icmp eq i64 %354, 0
  %358 = icmp eq i64 %353, %338
  %359 = and i64 %338, 3
  %360 = icmp eq i64 %359, 0
  %361 = icmp ult i32 %40, 9
  %362 = and i64 %333, 7
  %363 = icmp eq i64 %362, 0
  %364 = select i1 %363, i64 8, i64 %362
  %365 = sub nsw i64 %333, %364
  %366 = and i64 %336, 1
  %367 = icmp eq i32 %324, 1
  %368 = sub nsw i64 %336, %366
  %369 = icmp eq i64 %366, 0
  br label %370

370:                                              ; preds = %543, %337
  %371 = phi i64 [ 0, %337 ], [ %544, %543 ]
  %372 = phi i32 [ 0, %337 ], [ %545, %543 ]
  %373 = mul i64 %371, %20
  %374 = mul i64 %371, %19
  %375 = getelementptr i32, i32* %11, i64 %374
  %376 = bitcast i32* %375 to i8*
  %377 = add i64 %374, %333
  %378 = getelementptr i32, i32* %11, i64 %377
  %379 = bitcast i32* %378 to i8*
  %380 = mul nsw i32 %372, %6
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds i32, i32* %11, i64 %381
  br i1 %352, label %383, label %399

383:                                              ; preds = %476, %399, %370
  %384 = phi i64 [ 0, %399 ], [ 0, %370 ], [ %353, %476 ]
  %385 = xor i64 %384, -1
  %386 = add nsw i64 %385, %338
  br i1 %360, label %396, label %387

387:                                              ; preds = %387, %383
  %388 = phi i64 [ %393, %387 ], [ %384, %383 ]
  %389 = phi i64 [ %394, %387 ], [ %359, %383 ]
  %390 = getelementptr inbounds i32, i32* %382, i64 %388
  %391 = load i32, i32* %390, align 4, !tbaa !43
  %392 = getelementptr inbounds i32, i32* %328, i64 %388
  store i32 %391, i32* %392, align 4, !tbaa !43
  %393 = add nuw nsw i64 %388, 1
  %394 = add i64 %389, -1
  %395 = icmp eq i64 %394, 0
  br i1 %395, label %396, label %387, !llvm.loop !70

396:                                              ; preds = %387, %383
  %397 = phi i64 [ %384, %383 ], [ %393, %387 ]
  %398 = icmp ult i64 %386, 3
  br i1 %398, label %566, label %547

399:                                              ; preds = %370
  %400 = add i64 %373, %338
  %401 = getelementptr i32, i32* %11, i64 %400
  %402 = bitcast i32* %401 to i8*
  %403 = getelementptr i32, i32* %11, i64 %373
  %404 = bitcast i32* %403 to i8*
  %405 = icmp ult i8* %327, %402
  %406 = icmp ugt i8* %347, %404
  %407 = and i1 %405, %406
  br i1 %407, label %383, label %408

408:                                              ; preds = %399
  br i1 %355, label %458, label %409

409:                                              ; preds = %409, %408
  %410 = phi i64 [ %455, %409 ], [ 0, %408 ]
  %411 = phi i64 [ %456, %409 ], [ %356, %408 ]
  %412 = getelementptr inbounds i32, i32* %382, i64 %410
  %413 = bitcast i32* %412 to <4 x i32>*
  %414 = load <4 x i32>, <4 x i32>* %413, align 4, !tbaa !43, !alias.scope !71
  %415 = getelementptr inbounds i32, i32* %412, i64 4
  %416 = bitcast i32* %415 to <4 x i32>*
  %417 = load <4 x i32>, <4 x i32>* %416, align 4, !tbaa !43, !alias.scope !71
  %418 = getelementptr inbounds i32, i32* %328, i64 %410
  %419 = bitcast i32* %418 to <4 x i32>*
  store <4 x i32> %414, <4 x i32>* %419, align 4, !tbaa !43, !alias.scope !74, !noalias !71
  %420 = getelementptr inbounds i32, i32* %418, i64 4
  %421 = bitcast i32* %420 to <4 x i32>*
  store <4 x i32> %417, <4 x i32>* %421, align 4, !tbaa !43, !alias.scope !74, !noalias !71
  %422 = or i64 %410, 8
  %423 = getelementptr inbounds i32, i32* %382, i64 %422
  %424 = bitcast i32* %423 to <4 x i32>*
  %425 = load <4 x i32>, <4 x i32>* %424, align 4, !tbaa !43, !alias.scope !71
  %426 = getelementptr inbounds i32, i32* %423, i64 4
  %427 = bitcast i32* %426 to <4 x i32>*
  %428 = load <4 x i32>, <4 x i32>* %427, align 4, !tbaa !43, !alias.scope !71
  %429 = getelementptr inbounds i32, i32* %328, i64 %422
  %430 = bitcast i32* %429 to <4 x i32>*
  store <4 x i32> %425, <4 x i32>* %430, align 4, !tbaa !43, !alias.scope !74, !noalias !71
  %431 = getelementptr inbounds i32, i32* %429, i64 4
  %432 = bitcast i32* %431 to <4 x i32>*
  store <4 x i32> %428, <4 x i32>* %432, align 4, !tbaa !43, !alias.scope !74, !noalias !71
  %433 = or i64 %410, 16
  %434 = getelementptr inbounds i32, i32* %382, i64 %433
  %435 = bitcast i32* %434 to <4 x i32>*
  %436 = load <4 x i32>, <4 x i32>* %435, align 4, !tbaa !43, !alias.scope !71
  %437 = getelementptr inbounds i32, i32* %434, i64 4
  %438 = bitcast i32* %437 to <4 x i32>*
  %439 = load <4 x i32>, <4 x i32>* %438, align 4, !tbaa !43, !alias.scope !71
  %440 = getelementptr inbounds i32, i32* %328, i64 %433
  %441 = bitcast i32* %440 to <4 x i32>*
  store <4 x i32> %436, <4 x i32>* %441, align 4, !tbaa !43, !alias.scope !74, !noalias !71
  %442 = getelementptr inbounds i32, i32* %440, i64 4
  %443 = bitcast i32* %442 to <4 x i32>*
  store <4 x i32> %439, <4 x i32>* %443, align 4, !tbaa !43, !alias.scope !74, !noalias !71
  %444 = or i64 %410, 24
  %445 = getelementptr inbounds i32, i32* %382, i64 %444
  %446 = bitcast i32* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 4, !tbaa !43, !alias.scope !71
  %448 = getelementptr inbounds i32, i32* %445, i64 4
  %449 = bitcast i32* %448 to <4 x i32>*
  %450 = load <4 x i32>, <4 x i32>* %449, align 4, !tbaa !43, !alias.scope !71
  %451 = getelementptr inbounds i32, i32* %328, i64 %444
  %452 = bitcast i32* %451 to <4 x i32>*
  store <4 x i32> %447, <4 x i32>* %452, align 4, !tbaa !43, !alias.scope !74, !noalias !71
  %453 = getelementptr inbounds i32, i32* %451, i64 4
  %454 = bitcast i32* %453 to <4 x i32>*
  store <4 x i32> %450, <4 x i32>* %454, align 4, !tbaa !43, !alias.scope !74, !noalias !71
  %455 = add i64 %410, 32
  %456 = add i64 %411, -4
  %457 = icmp eq i64 %456, 0
  br i1 %457, label %458, label %409, !llvm.loop !76

458:                                              ; preds = %409, %408
  %459 = phi i64 [ 0, %408 ], [ %455, %409 ]
  br i1 %357, label %476, label %460

460:                                              ; preds = %460, %458
  %461 = phi i64 [ %473, %460 ], [ %459, %458 ]
  %462 = phi i64 [ %474, %460 ], [ %354, %458 ]
  %463 = getelementptr inbounds i32, i32* %382, i64 %461
  %464 = bitcast i32* %463 to <4 x i32>*
  %465 = load <4 x i32>, <4 x i32>* %464, align 4, !tbaa !43, !alias.scope !71
  %466 = getelementptr inbounds i32, i32* %463, i64 4
  %467 = bitcast i32* %466 to <4 x i32>*
  %468 = load <4 x i32>, <4 x i32>* %467, align 4, !tbaa !43, !alias.scope !71
  %469 = getelementptr inbounds i32, i32* %328, i64 %461
  %470 = bitcast i32* %469 to <4 x i32>*
  store <4 x i32> %465, <4 x i32>* %470, align 4, !tbaa !43, !alias.scope !74, !noalias !71
  %471 = getelementptr inbounds i32, i32* %469, i64 4
  %472 = bitcast i32* %471 to <4 x i32>*
  store <4 x i32> %468, <4 x i32>* %472, align 4, !tbaa !43, !alias.scope !74, !noalias !71
  %473 = add i64 %461, 8
  %474 = add i64 %462, -1
  %475 = icmp eq i64 %474, 0
  br i1 %475, label %476, label %460, !llvm.loop !77

476:                                              ; preds = %460, %458
  br i1 %358, label %566, label %383

477:                                              ; preds = %586, %477
  %478 = phi i64 [ %502, %477 ], [ %587, %586 ]
  %479 = shl nuw nsw i64 %478, 1
  %480 = add nsw i64 %479, %332
  %481 = getelementptr inbounds i32, i32* %328, i64 %480
  %482 = load i32, i32* %481, align 4, !tbaa !43
  %483 = getelementptr inbounds i32, i32* %382, i64 %478
  store i32 %482, i32* %483, align 4, !tbaa !43
  %484 = add nuw nsw i64 %478, 1
  %485 = shl nuw nsw i64 %484, 1
  %486 = add nsw i64 %485, %332
  %487 = getelementptr inbounds i32, i32* %328, i64 %486
  %488 = load i32, i32* %487, align 4, !tbaa !43
  %489 = getelementptr inbounds i32, i32* %382, i64 %484
  store i32 %488, i32* %489, align 4, !tbaa !43
  %490 = add nsw i64 %478, 2
  %491 = shl nuw nsw i64 %490, 1
  %492 = add nsw i64 %491, %332
  %493 = getelementptr inbounds i32, i32* %328, i64 %492
  %494 = load i32, i32* %493, align 4, !tbaa !43
  %495 = getelementptr inbounds i32, i32* %382, i64 %490
  store i32 %494, i32* %495, align 4, !tbaa !43
  %496 = add nsw i64 %478, 3
  %497 = shl nuw nsw i64 %496, 1
  %498 = add nsw i64 %497, %332
  %499 = getelementptr inbounds i32, i32* %328, i64 %498
  %500 = load i32, i32* %499, align 4, !tbaa !43
  %501 = getelementptr inbounds i32, i32* %382, i64 %496
  store i32 %500, i32* %501, align 4, !tbaa !43
  %502 = add nsw i64 %478, 4
  %503 = icmp eq i64 %502, %333
  br i1 %503, label %504, label %477, !llvm.loop !78

504:                                              ; preds = %586, %566, %477
  br i1 %334, label %505, label %543

505:                                              ; preds = %504
  br i1 %367, label %531, label %506

506:                                              ; preds = %506, %505
  %507 = phi i64 [ %528, %506 ], [ 0, %505 ]
  %508 = phi i64 [ %529, %506 ], [ %368, %505 ]
  %509 = trunc i64 %507 to i32
  %510 = shl i32 %509, 1
  %511 = or i32 %510, 1
  %512 = sub nsw i32 %511, %46
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds i32, i32* %328, i64 %513
  %515 = load i32, i32* %514, align 4, !tbaa !43
  %516 = add nsw i64 %507, %335
  %517 = getelementptr inbounds i32, i32* %382, i64 %516
  store i32 %515, i32* %517, align 4, !tbaa !43
  %518 = or i64 %507, 1
  %519 = trunc i64 %518 to i32
  %520 = shl i32 %519, 1
  %521 = or i32 %520, 1
  %522 = sub nsw i32 %521, %46
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds i32, i32* %328, i64 %523
  %525 = load i32, i32* %524, align 4, !tbaa !43
  %526 = add nsw i64 %518, %335
  %527 = getelementptr inbounds i32, i32* %382, i64 %526
  store i32 %525, i32* %527, align 4, !tbaa !43
  %528 = add nuw nsw i64 %507, 2
  %529 = add i64 %508, -2
  %530 = icmp eq i64 %529, 0
  br i1 %530, label %531, label %506

531:                                              ; preds = %506, %505
  %532 = phi i64 [ 0, %505 ], [ %528, %506 ]
  br i1 %369, label %543, label %533

533:                                              ; preds = %531
  %534 = trunc i64 %532 to i32
  %535 = shl i32 %534, 1
  %536 = or i32 %535, 1
  %537 = sub nsw i32 %536, %46
  %538 = sext i32 %537 to i64
  %539 = getelementptr inbounds i32, i32* %328, i64 %538
  %540 = load i32, i32* %539, align 4, !tbaa !43
  %541 = add nsw i64 %532, %335
  %542 = getelementptr inbounds i32, i32* %382, i64 %541
  store i32 %540, i32* %542, align 4, !tbaa !43
  br label %543

543:                                              ; preds = %533, %531, %504
  %544 = add nuw nsw i64 %371, 1
  %545 = add nuw nsw i32 %372, 1
  %546 = icmp eq i64 %544, %339
  br i1 %546, label %815, label %370

547:                                              ; preds = %547, %396
  %548 = phi i64 [ %564, %547 ], [ %397, %396 ]
  %549 = getelementptr inbounds i32, i32* %382, i64 %548
  %550 = load i32, i32* %549, align 4, !tbaa !43
  %551 = getelementptr inbounds i32, i32* %328, i64 %548
  store i32 %550, i32* %551, align 4, !tbaa !43
  %552 = add nuw nsw i64 %548, 1
  %553 = getelementptr inbounds i32, i32* %382, i64 %552
  %554 = load i32, i32* %553, align 4, !tbaa !43
  %555 = getelementptr inbounds i32, i32* %328, i64 %552
  store i32 %554, i32* %555, align 4, !tbaa !43
  %556 = add nsw i64 %548, 2
  %557 = getelementptr inbounds i32, i32* %382, i64 %556
  %558 = load i32, i32* %557, align 4, !tbaa !43
  %559 = getelementptr inbounds i32, i32* %328, i64 %556
  store i32 %558, i32* %559, align 4, !tbaa !43
  %560 = add nsw i64 %548, 3
  %561 = getelementptr inbounds i32, i32* %382, i64 %560
  %562 = load i32, i32* %561, align 4, !tbaa !43
  %563 = getelementptr inbounds i32, i32* %328, i64 %560
  store i32 %562, i32* %563, align 4, !tbaa !43
  %564 = add nsw i64 %548, 4
  %565 = icmp eq i64 %564, %338
  br i1 %565, label %566, label %547, !llvm.loop !79

566:                                              ; preds = %547, %476, %396
  tail call fastcc void @dwt_encode_1_real(i32* nonnull %328, i32 %324, i32 %40, i32 %46)
  br i1 %331, label %567, label %504

567:                                              ; preds = %566
  br i1 %361, label %568, label %589

568:                                              ; preds = %593, %589, %567
  %569 = phi i64 [ 0, %589 ], [ 0, %567 ], [ %365, %593 ]
  %570 = sub nsw i64 %333, %569
  %571 = xor i64 %569, -1
  %572 = add nsw i64 %571, %333
  %573 = and i64 %570, 3
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %586, label %575

575:                                              ; preds = %575, %568
  %576 = phi i64 [ %583, %575 ], [ %569, %568 ]
  %577 = phi i64 [ %584, %575 ], [ %573, %568 ]
  %578 = shl nuw nsw i64 %576, 1
  %579 = add nsw i64 %578, %332
  %580 = getelementptr inbounds i32, i32* %328, i64 %579
  %581 = load i32, i32* %580, align 4, !tbaa !43
  %582 = getelementptr inbounds i32, i32* %382, i64 %576
  store i32 %581, i32* %582, align 4, !tbaa !43
  %583 = add nuw nsw i64 %576, 1
  %584 = add i64 %577, -1
  %585 = icmp eq i64 %584, 0
  br i1 %585, label %586, label %575, !llvm.loop !80

586:                                              ; preds = %575, %568
  %587 = phi i64 [ %569, %568 ], [ %583, %575 ]
  %588 = icmp ult i64 %572, 3
  br i1 %588, label %504, label %477

589:                                              ; preds = %567
  %590 = icmp ugt i8* %345, %376
  %591 = icmp ult i8* %341, %379
  %592 = and i1 %590, %591
  br i1 %592, label %568, label %593

593:                                              ; preds = %593, %589
  %594 = phi i64 [ %612, %593 ], [ 0, %589 ]
  %595 = shl nuw nsw i64 %594, 1
  %596 = shl i64 %594, 1
  %597 = or i64 %596, 8
  %598 = add nsw i64 %595, %332
  %599 = add nsw i64 %597, %332
  %600 = getelementptr inbounds i32, i32* %328, i64 %598
  %601 = getelementptr inbounds i32, i32* %328, i64 %599
  %602 = bitcast i32* %600 to <8 x i32>*
  %603 = bitcast i32* %601 to <8 x i32>*
  %604 = load <8 x i32>, <8 x i32>* %602, align 4, !tbaa !43
  %605 = load <8 x i32>, <8 x i32>* %603, align 4, !tbaa !43
  %606 = shufflevector <8 x i32> %604, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %607 = shufflevector <8 x i32> %605, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %608 = getelementptr inbounds i32, i32* %382, i64 %594
  %609 = bitcast i32* %608 to <4 x i32>*
  store <4 x i32> %606, <4 x i32>* %609, align 4, !tbaa !43, !alias.scope !81, !noalias !84
  %610 = getelementptr inbounds i32, i32* %608, i64 4
  %611 = bitcast i32* %610 to <4 x i32>*
  store <4 x i32> %607, <4 x i32>* %611, align 4, !tbaa !43, !alias.scope !81, !noalias !84
  %612 = add i64 %594, 8
  %613 = icmp eq i64 %612, %365
  br i1 %613, label %568, label %593, !llvm.loop !86

614:                                              ; preds = %330
  %615 = zext i32 %34 to i64
  br i1 %331, label %621, label %616

616:                                              ; preds = %614
  %617 = and i64 %336, 1
  %618 = icmp eq i32 %324, 1
  %619 = sub nsw i64 %336, %617
  %620 = icmp eq i64 %617, 0
  br label %767

621:                                              ; preds = %614
  %622 = getelementptr i32, i32* %11, i64 %333
  %623 = shl nsw i64 %332, 2
  %624 = getelementptr i8, i8* %327, i64 %623
  %625 = getelementptr i8, i8* %327, i64 -4
  %626 = shl nuw nsw i64 %333, 3
  %627 = add nsw i64 %626, %623
  %628 = getelementptr i8, i8* %625, i64 %627
  %629 = icmp ult i32 %40, 9
  %630 = and i64 %333, 7
  %631 = icmp eq i64 %630, 0
  %632 = select i1 %631, i64 8, i64 %630
  %633 = sub nsw i64 %333, %632
  %634 = and i64 %336, 1
  %635 = icmp eq i32 %324, 1
  %636 = sub nsw i64 %336, %634
  %637 = icmp eq i64 %634, 0
  br label %638

638:                                              ; preds = %761, %621
  %639 = phi i64 [ %762, %761 ], [ 0, %621 ]
  %640 = phi i32 [ %763, %761 ], [ 0, %621 ]
  %641 = trunc i64 %639 to i32
  %642 = mul i32 %18, %641
  %643 = sext i32 %642 to i64
  %644 = mul nsw i32 %640, %6
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds i32, i32* %11, i64 %645
  tail call fastcc void @dwt_encode_1_real(i32* %328, i32 %324, i32 %40, i32 %46)
  br i1 %629, label %676, label %647

647:                                              ; preds = %638
  %648 = getelementptr i32, i32* %622, i64 %643
  %649 = bitcast i32* %648 to i8*
  %650 = getelementptr i32, i32* %11, i64 %643
  %651 = bitcast i32* %650 to i8*
  %652 = icmp ugt i8* %628, %651
  %653 = icmp ult i8* %624, %649
  %654 = and i1 %652, %653
  br i1 %654, label %676, label %655

655:                                              ; preds = %655, %647
  %656 = phi i64 [ %674, %655 ], [ 0, %647 ]
  %657 = shl nuw nsw i64 %656, 1
  %658 = shl i64 %656, 1
  %659 = or i64 %658, 8
  %660 = add nsw i64 %657, %332
  %661 = add nsw i64 %659, %332
  %662 = getelementptr inbounds i32, i32* %328, i64 %660
  %663 = getelementptr inbounds i32, i32* %328, i64 %661
  %664 = bitcast i32* %662 to <8 x i32>*
  %665 = bitcast i32* %663 to <8 x i32>*
  %666 = load <8 x i32>, <8 x i32>* %664, align 4, !tbaa !43
  %667 = load <8 x i32>, <8 x i32>* %665, align 4, !tbaa !43
  %668 = shufflevector <8 x i32> %666, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %669 = shufflevector <8 x i32> %667, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %670 = getelementptr inbounds i32, i32* %646, i64 %656
  %671 = bitcast i32* %670 to <4 x i32>*
  store <4 x i32> %668, <4 x i32>* %671, align 4, !tbaa !43, !alias.scope !87, !noalias !90
  %672 = getelementptr inbounds i32, i32* %670, i64 4
  %673 = bitcast i32* %672 to <4 x i32>*
  store <4 x i32> %669, <4 x i32>* %673, align 4, !tbaa !43, !alias.scope !87, !noalias !90
  %674 = add i64 %656, 8
  %675 = icmp eq i64 %674, %633
  br i1 %675, label %676, label %655, !llvm.loop !92

676:                                              ; preds = %655, %647, %638
  %677 = phi i64 [ 0, %647 ], [ 0, %638 ], [ %633, %655 ]
  %678 = sub nsw i64 %333, %677
  %679 = xor i64 %677, -1
  %680 = add nsw i64 %679, %333
  %681 = and i64 %678, 3
  %682 = icmp eq i64 %681, 0
  br i1 %682, label %694, label %683

683:                                              ; preds = %683, %676
  %684 = phi i64 [ %691, %683 ], [ %677, %676 ]
  %685 = phi i64 [ %692, %683 ], [ %681, %676 ]
  %686 = shl nuw nsw i64 %684, 1
  %687 = add nsw i64 %686, %332
  %688 = getelementptr inbounds i32, i32* %328, i64 %687
  %689 = load i32, i32* %688, align 4, !tbaa !43
  %690 = getelementptr inbounds i32, i32* %646, i64 %684
  store i32 %689, i32* %690, align 4, !tbaa !43
  %691 = add nuw nsw i64 %684, 1
  %692 = add i64 %685, -1
  %693 = icmp eq i64 %692, 0
  br i1 %693, label %694, label %683, !llvm.loop !93

694:                                              ; preds = %683, %676
  %695 = phi i64 [ %677, %676 ], [ %691, %683 ]
  %696 = icmp ult i64 %680, 3
  br i1 %696, label %765, label %697

697:                                              ; preds = %697, %694
  %698 = phi i64 [ %722, %697 ], [ %695, %694 ]
  %699 = shl nuw nsw i64 %698, 1
  %700 = add nsw i64 %699, %332
  %701 = getelementptr inbounds i32, i32* %328, i64 %700
  %702 = load i32, i32* %701, align 4, !tbaa !43
  %703 = getelementptr inbounds i32, i32* %646, i64 %698
  store i32 %702, i32* %703, align 4, !tbaa !43
  %704 = add nuw nsw i64 %698, 1
  %705 = shl nuw nsw i64 %704, 1
  %706 = add nsw i64 %705, %332
  %707 = getelementptr inbounds i32, i32* %328, i64 %706
  %708 = load i32, i32* %707, align 4, !tbaa !43
  %709 = getelementptr inbounds i32, i32* %646, i64 %704
  store i32 %708, i32* %709, align 4, !tbaa !43
  %710 = add nsw i64 %698, 2
  %711 = shl nuw nsw i64 %710, 1
  %712 = add nsw i64 %711, %332
  %713 = getelementptr inbounds i32, i32* %328, i64 %712
  %714 = load i32, i32* %713, align 4, !tbaa !43
  %715 = getelementptr inbounds i32, i32* %646, i64 %710
  store i32 %714, i32* %715, align 4, !tbaa !43
  %716 = add nsw i64 %698, 3
  %717 = shl nuw nsw i64 %716, 1
  %718 = add nsw i64 %717, %332
  %719 = getelementptr inbounds i32, i32* %328, i64 %718
  %720 = load i32, i32* %719, align 4, !tbaa !43
  %721 = getelementptr inbounds i32, i32* %646, i64 %716
  store i32 %720, i32* %721, align 4, !tbaa !43
  %722 = add nsw i64 %698, 4
  %723 = icmp eq i64 %722, %333
  br i1 %723, label %765, label %697, !llvm.loop !94

724:                                              ; preds = %766, %724
  %725 = phi i64 [ %746, %724 ], [ 0, %766 ]
  %726 = phi i64 [ %747, %724 ], [ %636, %766 ]
  %727 = trunc i64 %725 to i32
  %728 = shl i32 %727, 1
  %729 = or i32 %728, 1
  %730 = sub nsw i32 %729, %46
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds i32, i32* %328, i64 %731
  %733 = load i32, i32* %732, align 4, !tbaa !43
  %734 = add nsw i64 %725, %335
  %735 = getelementptr inbounds i32, i32* %646, i64 %734
  store i32 %733, i32* %735, align 4, !tbaa !43
  %736 = or i64 %725, 1
  %737 = trunc i64 %736 to i32
  %738 = shl i32 %737, 1
  %739 = or i32 %738, 1
  %740 = sub nsw i32 %739, %46
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds i32, i32* %328, i64 %741
  %743 = load i32, i32* %742, align 4, !tbaa !43
  %744 = add nsw i64 %736, %335
  %745 = getelementptr inbounds i32, i32* %646, i64 %744
  store i32 %743, i32* %745, align 4, !tbaa !43
  %746 = add nuw nsw i64 %725, 2
  %747 = add i64 %726, -2
  %748 = icmp eq i64 %747, 0
  br i1 %748, label %749, label %724

749:                                              ; preds = %766, %724
  %750 = phi i64 [ 0, %766 ], [ %746, %724 ]
  br i1 %637, label %761, label %751

751:                                              ; preds = %749
  %752 = trunc i64 %750 to i32
  %753 = shl i32 %752, 1
  %754 = or i32 %753, 1
  %755 = sub nsw i32 %754, %46
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i32, i32* %328, i64 %756
  %758 = load i32, i32* %757, align 4, !tbaa !43
  %759 = add nsw i64 %750, %335
  %760 = getelementptr inbounds i32, i32* %646, i64 %759
  store i32 %758, i32* %760, align 4, !tbaa !43
  br label %761

761:                                              ; preds = %765, %751, %749
  %762 = add nuw nsw i64 %639, 1
  %763 = add nuw nsw i32 %640, 1
  %764 = icmp eq i64 %762, %615
  br i1 %764, label %815, label %638

765:                                              ; preds = %697, %694
  br i1 %334, label %766, label %761

766:                                              ; preds = %765
  br i1 %635, label %749, label %724

767:                                              ; preds = %811, %616
  %768 = phi i64 [ %812, %811 ], [ 0, %616 ]
  %769 = phi i32 [ %813, %811 ], [ 0, %616 ]
  %770 = mul nsw i32 %769, %6
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds i32, i32* %11, i64 %771
  tail call fastcc void @dwt_encode_1_real(i32* %328, i32 %324, i32 %40, i32 %46)
  br i1 %334, label %773, label %811

773:                                              ; preds = %767
  br i1 %618, label %799, label %774

774:                                              ; preds = %774, %773
  %775 = phi i64 [ %796, %774 ], [ 0, %773 ]
  %776 = phi i64 [ %797, %774 ], [ %619, %773 ]
  %777 = trunc i64 %775 to i32
  %778 = shl i32 %777, 1
  %779 = or i32 %778, 1
  %780 = sub nsw i32 %779, %46
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds i32, i32* %328, i64 %781
  %783 = load i32, i32* %782, align 4, !tbaa !43
  %784 = add nsw i64 %775, %335
  %785 = getelementptr inbounds i32, i32* %772, i64 %784
  store i32 %783, i32* %785, align 4, !tbaa !43
  %786 = or i64 %775, 1
  %787 = trunc i64 %786 to i32
  %788 = shl i32 %787, 1
  %789 = or i32 %788, 1
  %790 = sub nsw i32 %789, %46
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i32, i32* %328, i64 %791
  %793 = load i32, i32* %792, align 4, !tbaa !43
  %794 = add nsw i64 %786, %335
  %795 = getelementptr inbounds i32, i32* %772, i64 %794
  store i32 %793, i32* %795, align 4, !tbaa !43
  %796 = add nuw nsw i64 %775, 2
  %797 = add i64 %776, -2
  %798 = icmp eq i64 %797, 0
  br i1 %798, label %799, label %774

799:                                              ; preds = %774, %773
  %800 = phi i64 [ 0, %773 ], [ %796, %774 ]
  br i1 %620, label %811, label %801

801:                                              ; preds = %799
  %802 = trunc i64 %800 to i32
  %803 = shl i32 %802, 1
  %804 = or i32 %803, 1
  %805 = sub nsw i32 %804, %46
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i32, i32* %328, i64 %806
  %808 = load i32, i32* %807, align 4, !tbaa !43
  %809 = add nsw i64 %800, %335
  %810 = getelementptr inbounds i32, i32* %772, i64 %809
  store i32 %808, i32* %810, align 4, !tbaa !43
  br label %811

811:                                              ; preds = %801, %799, %767
  %812 = add nuw nsw i64 %768, 1
  %813 = add nuw nsw i32 %769, 1
  %814 = icmp eq i64 %812, %615
  br i1 %814, label %815, label %767

815:                                              ; preds = %811, %761, %543, %323
  tail call void @free(i8* %327) #9
  %816 = add nuw nsw i64 %22, 1
  %817 = icmp eq i64 %816, %17
  br i1 %817, label %818, label %21

818:                                              ; preds = %815, %1
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @dwt_encode_1_real(i32*, i32, i32, i32) unnamed_addr #4 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %6, label %237

6:                                                ; preds = %4
  %7 = icmp sgt i32 %1, 0
  %8 = icmp sgt i32 %2, 1
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %494

10:                                               ; preds = %6
  br i1 %7, label %11, label %17

11:                                               ; preds = %10
  %12 = shl i32 %2, 1
  %13 = add i32 %12, -2
  %14 = sext i32 %13 to i64
  %15 = sext i32 %2 to i64
  %16 = zext i32 %1 to i64
  br label %27

17:                                               ; preds = %27, %10
  %18 = icmp sgt i32 %2, 0
  br i1 %18, label %19, label %52

19:                                               ; preds = %17
  %20 = shl i32 %1, 1
  %21 = add i32 %20, -1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, i32* %0, i64 %22
  %24 = getelementptr inbounds i32, i32* %0, i64 1
  %25 = sext i32 %1 to i64
  %26 = zext i32 %2 to i64
  br label %59

27:                                               ; preds = %27, %11
  %28 = phi i64 [ 0, %11 ], [ %34, %27 ]
  %29 = icmp slt i64 %28, %15
  %30 = shl nuw nsw i64 %28, 1
  %31 = select i1 %29, i64 %30, i64 %14
  %32 = getelementptr inbounds i32, i32* %0, i64 %31
  %33 = load i32, i32* %32, align 4, !tbaa !43
  %34 = add nuw nsw i64 %28, 1
  %35 = icmp slt i64 %34, %15
  %36 = shl nuw nsw i64 %34, 1
  %37 = select i1 %35, i64 %36, i64 %14
  %38 = getelementptr inbounds i32, i32* %0, i64 %37
  %39 = load i32, i32* %38, align 4, !tbaa !43
  %40 = add nsw i32 %39, %33
  %41 = sext i32 %40 to i64
  %42 = mul nsw i64 %41, 12993
  %43 = and i64 %42, 4096
  %44 = add nsw i64 %43, %42
  %45 = lshr i64 %44, 13
  %46 = trunc i64 %45 to i32
  %47 = or i64 %30, 1
  %48 = getelementptr inbounds i32, i32* %0, i64 %47
  %49 = load i32, i32* %48, align 4, !tbaa !43
  %50 = sub nsw i32 %49, %46
  store i32 %50, i32* %48, align 4, !tbaa !43
  %51 = icmp eq i64 %34, %16
  br i1 %51, label %17, label %27

52:                                               ; preds = %70, %17
  br i1 %7, label %53, label %91

53:                                               ; preds = %52
  %54 = shl i32 %2, 1
  %55 = add i32 %54, -2
  %56 = sext i32 %55 to i64
  %57 = sext i32 %2 to i64
  %58 = zext i32 %1 to i64
  br label %100

59:                                               ; preds = %70, %19
  %60 = phi i64 [ 0, %19 ], [ %89, %70 ]
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %70, label %62

62:                                               ; preds = %59
  %63 = icmp sgt i64 %60, %25
  br i1 %63, label %70, label %64

64:                                               ; preds = %62
  %65 = trunc i64 %60 to i32
  %66 = shl i32 %65, 1
  %67 = add i32 %66, -1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32* %0, i64 %68
  br label %70

70:                                               ; preds = %64, %62, %59
  %71 = phi i32* [ %69, %64 ], [ %24, %59 ], [ %23, %62 ]
  %72 = load i32, i32* %71, align 4, !tbaa !43
  %73 = icmp slt i64 %60, %25
  %74 = shl nuw nsw i64 %60, 1
  %75 = or i64 %74, 1
  %76 = select i1 %73, i64 %75, i64 %22
  %77 = getelementptr inbounds i32, i32* %0, i64 %76
  %78 = load i32, i32* %77, align 4, !tbaa !43
  %79 = add nsw i32 %78, %72
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %80, 434
  %82 = and i64 %81, 4096
  %83 = add nsw i64 %82, %81
  %84 = lshr i64 %83, 13
  %85 = trunc i64 %84 to i32
  %86 = getelementptr inbounds i32, i32* %0, i64 %74
  %87 = load i32, i32* %86, align 4, !tbaa !43
  %88 = sub nsw i32 %87, %85
  store i32 %88, i32* %86, align 4, !tbaa !43
  %89 = add nuw nsw i64 %60, 1
  %90 = icmp eq i64 %89, %26
  br i1 %90, label %52, label %59

91:                                               ; preds = %100, %52
  br i1 %18, label %92, label %125

92:                                               ; preds = %91
  %93 = shl i32 %1, 1
  %94 = add i32 %93, -1
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i32, i32* %0, i64 %95
  %97 = getelementptr inbounds i32, i32* %0, i64 1
  %98 = sext i32 %1 to i64
  %99 = zext i32 %2 to i64
  br label %132

100:                                              ; preds = %100, %53
  %101 = phi i64 [ 0, %53 ], [ %107, %100 ]
  %102 = icmp slt i64 %101, %57
  %103 = shl nuw nsw i64 %101, 1
  %104 = select i1 %102, i64 %103, i64 %56
  %105 = getelementptr inbounds i32, i32* %0, i64 %104
  %106 = load i32, i32* %105, align 4, !tbaa !43
  %107 = add nuw nsw i64 %101, 1
  %108 = icmp slt i64 %107, %57
  %109 = shl nuw nsw i64 %107, 1
  %110 = select i1 %108, i64 %109, i64 %56
  %111 = getelementptr inbounds i32, i32* %0, i64 %110
  %112 = load i32, i32* %111, align 4, !tbaa !43
  %113 = add nsw i32 %112, %106
  %114 = sext i32 %113 to i64
  %115 = mul nsw i64 %114, 7233
  %116 = and i64 %115, 4096
  %117 = add nsw i64 %116, %115
  %118 = lshr i64 %117, 13
  %119 = trunc i64 %118 to i32
  %120 = or i64 %103, 1
  %121 = getelementptr inbounds i32, i32* %0, i64 %120
  %122 = load i32, i32* %121, align 4, !tbaa !43
  %123 = add nsw i32 %122, %119
  store i32 %123, i32* %121, align 4, !tbaa !43
  %124 = icmp eq i64 %107, %58
  br i1 %124, label %91, label %100

125:                                              ; preds = %143, %91
  br i1 %7, label %126, label %179

126:                                              ; preds = %125
  %127 = zext i32 %1 to i64
  %128 = and i64 %127, 1
  %129 = icmp eq i32 %1, 1
  br i1 %129, label %167, label %130

130:                                              ; preds = %126
  %131 = sub nsw i64 %127, %128
  br label %186

132:                                              ; preds = %143, %92
  %133 = phi i64 [ 0, %92 ], [ %162, %143 ]
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %143, label %135

135:                                              ; preds = %132
  %136 = icmp sgt i64 %133, %98
  br i1 %136, label %143, label %137

137:                                              ; preds = %135
  %138 = trunc i64 %133 to i32
  %139 = shl i32 %138, 1
  %140 = add i32 %139, -1
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i32, i32* %0, i64 %141
  br label %143

143:                                              ; preds = %137, %135, %132
  %144 = phi i32* [ %142, %137 ], [ %97, %132 ], [ %96, %135 ]
  %145 = load i32, i32* %144, align 4, !tbaa !43
  %146 = icmp slt i64 %133, %98
  %147 = shl nuw nsw i64 %133, 1
  %148 = or i64 %147, 1
  %149 = select i1 %146, i64 %148, i64 %95
  %150 = getelementptr inbounds i32, i32* %0, i64 %149
  %151 = load i32, i32* %150, align 4, !tbaa !43
  %152 = add nsw i32 %151, %145
  %153 = sext i32 %152 to i64
  %154 = mul nsw i64 %153, 3633
  %155 = and i64 %154, 4096
  %156 = add nsw i64 %155, %154
  %157 = lshr i64 %156, 13
  %158 = trunc i64 %157 to i32
  %159 = getelementptr inbounds i32, i32* %0, i64 %147
  %160 = load i32, i32* %159, align 4, !tbaa !43
  %161 = add nsw i32 %160, %158
  store i32 %161, i32* %159, align 4, !tbaa !43
  %162 = add nuw nsw i64 %133, 1
  %163 = icmp eq i64 %162, %99
  br i1 %163, label %125, label %132

164:                                              ; preds = %186
  %165 = shl nuw i64 %209, 1
  %166 = or i64 %165, 1
  br label %167

167:                                              ; preds = %164, %126
  %168 = phi i64 [ 1, %126 ], [ %166, %164 ]
  %169 = icmp eq i64 %128, 0
  br i1 %169, label %179, label %170

170:                                              ; preds = %167
  %171 = getelementptr inbounds i32, i32* %0, i64 %168
  %172 = load i32, i32* %171, align 4, !tbaa !43
  %173 = sext i32 %172 to i64
  %174 = mul nsw i64 %173, 5038
  %175 = and i64 %174, 4096
  %176 = add nsw i64 %175, %174
  %177 = lshr i64 %176, 13
  %178 = trunc i64 %177 to i32
  store i32 %178, i32* %171, align 4, !tbaa !43
  br label %179

179:                                              ; preds = %170, %167, %125
  br i1 %18, label %180, label %494

180:                                              ; preds = %179
  %181 = zext i32 %2 to i64
  %182 = and i64 %181, 1
  %183 = icmp eq i32 %2, 1
  br i1 %183, label %467, label %184

184:                                              ; preds = %180
  %185 = sub nsw i64 %181, %182
  br label %212

186:                                              ; preds = %186, %130
  %187 = phi i64 [ 0, %130 ], [ %209, %186 ]
  %188 = phi i64 [ %131, %130 ], [ %210, %186 ]
  %189 = shl nuw nsw i64 %187, 1
  %190 = or i64 %189, 1
  %191 = getelementptr inbounds i32, i32* %0, i64 %190
  %192 = load i32, i32* %191, align 4, !tbaa !43
  %193 = sext i32 %192 to i64
  %194 = mul nsw i64 %193, 5038
  %195 = and i64 %194, 4096
  %196 = add nsw i64 %195, %194
  %197 = lshr i64 %196, 13
  %198 = trunc i64 %197 to i32
  store i32 %198, i32* %191, align 4, !tbaa !43
  %199 = shl nuw i64 %187, 1
  %200 = or i64 %199, 3
  %201 = getelementptr inbounds i32, i32* %0, i64 %200
  %202 = load i32, i32* %201, align 4, !tbaa !43
  %203 = sext i32 %202 to i64
  %204 = mul nsw i64 %203, 5038
  %205 = and i64 %204, 4096
  %206 = add nsw i64 %205, %204
  %207 = lshr i64 %206, 13
  %208 = trunc i64 %207 to i32
  store i32 %208, i32* %201, align 4, !tbaa !43
  %209 = add nuw nsw i64 %187, 2
  %210 = add i64 %188, -2
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %164, label %186

212:                                              ; preds = %212, %184
  %213 = phi i64 [ 0, %184 ], [ %234, %212 ]
  %214 = phi i64 [ %185, %184 ], [ %235, %212 ]
  %215 = shl nuw nsw i64 %213, 1
  %216 = getelementptr inbounds i32, i32* %0, i64 %215
  %217 = load i32, i32* %216, align 4, !tbaa !43
  %218 = sext i32 %217 to i64
  %219 = mul nsw i64 %218, 6659
  %220 = and i64 %219, 4096
  %221 = add nsw i64 %220, %219
  %222 = lshr i64 %221, 13
  %223 = trunc i64 %222 to i32
  store i32 %223, i32* %216, align 4, !tbaa !43
  %224 = shl nuw i64 %213, 1
  %225 = or i64 %224, 2
  %226 = getelementptr inbounds i32, i32* %0, i64 %225
  %227 = load i32, i32* %226, align 4, !tbaa !43
  %228 = sext i32 %227 to i64
  %229 = mul nsw i64 %228, 6659
  %230 = and i64 %229, 4096
  %231 = add nsw i64 %230, %229
  %232 = lshr i64 %231, 13
  %233 = trunc i64 %232 to i32
  store i32 %233, i32* %226, align 4, !tbaa !43
  %234 = add nuw nsw i64 %213, 2
  %235 = add i64 %214, -2
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %465, label %212

237:                                              ; preds = %4
  %238 = icmp sgt i32 %2, 0
  %239 = icmp sgt i32 %1, 1
  %240 = or i1 %239, %238
  br i1 %240, label %241, label %494

241:                                              ; preds = %237
  %242 = icmp sgt i32 %1, 0
  br i1 %242, label %243, label %251

243:                                              ; preds = %241
  %244 = shl i32 %2, 1
  %245 = add i32 %244, -1
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i32, i32* %0, i64 %246
  %248 = getelementptr inbounds i32, i32* %0, i64 1
  %249 = sext i32 %2 to i64
  %250 = zext i32 %1 to i64
  br label %258

251:                                              ; preds = %274, %241
  br i1 %238, label %252, label %289

252:                                              ; preds = %251
  %253 = shl i32 %1, 1
  %254 = add i32 %253, -2
  %255 = sext i32 %254 to i64
  %256 = sext i32 %1 to i64
  %257 = zext i32 %2 to i64
  br label %298

258:                                              ; preds = %274, %243
  %259 = phi i64 [ 0, %243 ], [ %287, %274 ]
  %260 = icmp slt i64 %259, %249
  %261 = shl nuw i64 %259, 1
  %262 = or i64 %261, 1
  %263 = select i1 %260, i64 %262, i64 %246
  %264 = getelementptr inbounds i32, i32* %0, i64 %263
  %265 = load i32, i32* %264, align 4, !tbaa !43
  %266 = icmp eq i64 %259, 0
  br i1 %266, label %274, label %267

267:                                              ; preds = %258
  %268 = icmp sgt i64 %259, %249
  br i1 %268, label %274, label %269

269:                                              ; preds = %267
  %270 = shl i64 %259, 33
  %271 = add i64 %270, -4294967296
  %272 = ashr exact i64 %271, 32
  %273 = getelementptr inbounds i32, i32* %0, i64 %272
  br label %274

274:                                              ; preds = %269, %267, %258
  %275 = phi i32* [ %273, %269 ], [ %248, %258 ], [ %247, %267 ]
  %276 = load i32, i32* %275, align 4, !tbaa !43
  %277 = add nsw i32 %276, %265
  %278 = sext i32 %277 to i64
  %279 = mul nsw i64 %278, 12993
  %280 = and i64 %279, 4096
  %281 = add nsw i64 %280, %279
  %282 = lshr i64 %281, 13
  %283 = trunc i64 %282 to i32
  %284 = getelementptr inbounds i32, i32* %0, i64 %261
  %285 = load i32, i32* %284, align 4, !tbaa !43
  %286 = sub nsw i32 %285, %283
  store i32 %286, i32* %284, align 4, !tbaa !43
  %287 = add nuw nsw i64 %259, 1
  %288 = icmp eq i64 %287, %250
  br i1 %288, label %251, label %258

289:                                              ; preds = %298, %251
  br i1 %242, label %290, label %323

290:                                              ; preds = %289
  %291 = shl i32 %2, 1
  %292 = add i32 %291, -1
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds i32, i32* %0, i64 %293
  %295 = getelementptr inbounds i32, i32* %0, i64 1
  %296 = sext i32 %2 to i64
  %297 = zext i32 %1 to i64
  br label %330

298:                                              ; preds = %298, %252
  %299 = phi i64 [ 0, %252 ], [ %305, %298 ]
  %300 = icmp slt i64 %299, %256
  %301 = shl nuw nsw i64 %299, 1
  %302 = select i1 %300, i64 %301, i64 %255
  %303 = getelementptr inbounds i32, i32* %0, i64 %302
  %304 = load i32, i32* %303, align 4, !tbaa !43
  %305 = add nuw nsw i64 %299, 1
  %306 = icmp slt i64 %305, %256
  %307 = shl nuw nsw i64 %305, 1
  %308 = select i1 %306, i64 %307, i64 %255
  %309 = getelementptr inbounds i32, i32* %0, i64 %308
  %310 = load i32, i32* %309, align 4, !tbaa !43
  %311 = add nsw i32 %310, %304
  %312 = sext i32 %311 to i64
  %313 = mul nsw i64 %312, 434
  %314 = and i64 %313, 4096
  %315 = add nsw i64 %314, %313
  %316 = lshr i64 %315, 13
  %317 = trunc i64 %316 to i32
  %318 = or i64 %301, 1
  %319 = getelementptr inbounds i32, i32* %0, i64 %318
  %320 = load i32, i32* %319, align 4, !tbaa !43
  %321 = sub nsw i32 %320, %317
  store i32 %321, i32* %319, align 4, !tbaa !43
  %322 = icmp eq i64 %305, %257
  br i1 %322, label %289, label %298

323:                                              ; preds = %346, %289
  br i1 %238, label %324, label %361

324:                                              ; preds = %323
  %325 = shl i32 %1, 1
  %326 = add i32 %325, -2
  %327 = sext i32 %326 to i64
  %328 = sext i32 %1 to i64
  %329 = zext i32 %2 to i64
  br label %368

330:                                              ; preds = %346, %290
  %331 = phi i64 [ 0, %290 ], [ %359, %346 ]
  %332 = icmp slt i64 %331, %296
  %333 = shl nuw i64 %331, 1
  %334 = or i64 %333, 1
  %335 = select i1 %332, i64 %334, i64 %293
  %336 = getelementptr inbounds i32, i32* %0, i64 %335
  %337 = load i32, i32* %336, align 4, !tbaa !43
  %338 = icmp eq i64 %331, 0
  br i1 %338, label %346, label %339

339:                                              ; preds = %330
  %340 = icmp sgt i64 %331, %296
  br i1 %340, label %346, label %341

341:                                              ; preds = %339
  %342 = shl i64 %331, 33
  %343 = add i64 %342, -4294967296
  %344 = ashr exact i64 %343, 32
  %345 = getelementptr inbounds i32, i32* %0, i64 %344
  br label %346

346:                                              ; preds = %341, %339, %330
  %347 = phi i32* [ %345, %341 ], [ %295, %330 ], [ %294, %339 ]
  %348 = load i32, i32* %347, align 4, !tbaa !43
  %349 = add nsw i32 %348, %337
  %350 = sext i32 %349 to i64
  %351 = mul nsw i64 %350, 7233
  %352 = and i64 %351, 4096
  %353 = add nsw i64 %352, %351
  %354 = lshr i64 %353, 13
  %355 = trunc i64 %354 to i32
  %356 = getelementptr inbounds i32, i32* %0, i64 %333
  %357 = load i32, i32* %356, align 4, !tbaa !43
  %358 = add nsw i32 %357, %355
  store i32 %358, i32* %356, align 4, !tbaa !43
  %359 = add nuw nsw i64 %331, 1
  %360 = icmp eq i64 %359, %297
  br i1 %360, label %323, label %330

361:                                              ; preds = %368, %323
  br i1 %242, label %362, label %407

362:                                              ; preds = %361
  %363 = zext i32 %1 to i64
  %364 = and i64 %363, 1
  %365 = icmp eq i32 %1, 1
  br i1 %365, label %395, label %366

366:                                              ; preds = %362
  %367 = sub nsw i64 %363, %364
  br label %414

368:                                              ; preds = %368, %324
  %369 = phi i64 [ 0, %324 ], [ %375, %368 ]
  %370 = icmp slt i64 %369, %328
  %371 = shl nuw nsw i64 %369, 1
  %372 = select i1 %370, i64 %371, i64 %327
  %373 = getelementptr inbounds i32, i32* %0, i64 %372
  %374 = load i32, i32* %373, align 4, !tbaa !43
  %375 = add nuw nsw i64 %369, 1
  %376 = icmp slt i64 %375, %328
  %377 = shl nuw nsw i64 %375, 1
  %378 = select i1 %376, i64 %377, i64 %327
  %379 = getelementptr inbounds i32, i32* %0, i64 %378
  %380 = load i32, i32* %379, align 4, !tbaa !43
  %381 = add nsw i32 %380, %374
  %382 = sext i32 %381 to i64
  %383 = mul nsw i64 %382, 3633
  %384 = and i64 %383, 4096
  %385 = add nsw i64 %384, %383
  %386 = lshr i64 %385, 13
  %387 = trunc i64 %386 to i32
  %388 = or i64 %371, 1
  %389 = getelementptr inbounds i32, i32* %0, i64 %388
  %390 = load i32, i32* %389, align 4, !tbaa !43
  %391 = add nsw i32 %390, %387
  store i32 %391, i32* %389, align 4, !tbaa !43
  %392 = icmp eq i64 %375, %329
  br i1 %392, label %361, label %368

393:                                              ; preds = %414
  %394 = shl nuw i64 %436, 1
  br label %395

395:                                              ; preds = %393, %362
  %396 = phi i64 [ 0, %362 ], [ %394, %393 ]
  %397 = icmp eq i64 %364, 0
  br i1 %397, label %407, label %398

398:                                              ; preds = %395
  %399 = getelementptr inbounds i32, i32* %0, i64 %396
  %400 = load i32, i32* %399, align 4, !tbaa !43
  %401 = sext i32 %400 to i64
  %402 = mul nsw i64 %401, 5038
  %403 = and i64 %402, 4096
  %404 = add nsw i64 %403, %402
  %405 = lshr i64 %404, 13
  %406 = trunc i64 %405 to i32
  store i32 %406, i32* %399, align 4, !tbaa !43
  br label %407

407:                                              ; preds = %398, %395, %361
  br i1 %238, label %408, label %494

408:                                              ; preds = %407
  %409 = zext i32 %2 to i64
  %410 = and i64 %409, 1
  %411 = icmp eq i32 %2, 1
  br i1 %411, label %482, label %412

412:                                              ; preds = %408
  %413 = sub nsw i64 %409, %410
  br label %439

414:                                              ; preds = %414, %366
  %415 = phi i64 [ 0, %366 ], [ %436, %414 ]
  %416 = phi i64 [ %367, %366 ], [ %437, %414 ]
  %417 = shl nuw nsw i64 %415, 1
  %418 = getelementptr inbounds i32, i32* %0, i64 %417
  %419 = load i32, i32* %418, align 4, !tbaa !43
  %420 = sext i32 %419 to i64
  %421 = mul nsw i64 %420, 5038
  %422 = and i64 %421, 4096
  %423 = add nsw i64 %422, %421
  %424 = lshr i64 %423, 13
  %425 = trunc i64 %424 to i32
  store i32 %425, i32* %418, align 4, !tbaa !43
  %426 = shl nuw i64 %415, 1
  %427 = or i64 %426, 2
  %428 = getelementptr inbounds i32, i32* %0, i64 %427
  %429 = load i32, i32* %428, align 4, !tbaa !43
  %430 = sext i32 %429 to i64
  %431 = mul nsw i64 %430, 5038
  %432 = and i64 %431, 4096
  %433 = add nsw i64 %432, %431
  %434 = lshr i64 %433, 13
  %435 = trunc i64 %434 to i32
  store i32 %435, i32* %428, align 4, !tbaa !43
  %436 = add nuw nsw i64 %415, 2
  %437 = add i64 %416, -2
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %393, label %414

439:                                              ; preds = %439, %412
  %440 = phi i64 [ 0, %412 ], [ %462, %439 ]
  %441 = phi i64 [ %413, %412 ], [ %463, %439 ]
  %442 = shl nuw nsw i64 %440, 1
  %443 = or i64 %442, 1
  %444 = getelementptr inbounds i32, i32* %0, i64 %443
  %445 = load i32, i32* %444, align 4, !tbaa !43
  %446 = sext i32 %445 to i64
  %447 = mul nsw i64 %446, 6659
  %448 = and i64 %447, 4096
  %449 = add nsw i64 %448, %447
  %450 = lshr i64 %449, 13
  %451 = trunc i64 %450 to i32
  store i32 %451, i32* %444, align 4, !tbaa !43
  %452 = shl nuw i64 %440, 1
  %453 = or i64 %452, 3
  %454 = getelementptr inbounds i32, i32* %0, i64 %453
  %455 = load i32, i32* %454, align 4, !tbaa !43
  %456 = sext i32 %455 to i64
  %457 = mul nsw i64 %456, 6659
  %458 = and i64 %457, 4096
  %459 = add nsw i64 %458, %457
  %460 = lshr i64 %459, 13
  %461 = trunc i64 %460 to i32
  store i32 %461, i32* %454, align 4, !tbaa !43
  %462 = add nuw nsw i64 %440, 2
  %463 = add i64 %441, -2
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %479, label %439

465:                                              ; preds = %212
  %466 = shl nuw i64 %234, 1
  br label %467

467:                                              ; preds = %465, %180
  %468 = phi i64 [ 0, %180 ], [ %466, %465 ]
  %469 = icmp eq i64 %182, 0
  br i1 %469, label %494, label %470

470:                                              ; preds = %467
  %471 = getelementptr inbounds i32, i32* %0, i64 %468
  %472 = load i32, i32* %471, align 4, !tbaa !43
  %473 = sext i32 %472 to i64
  %474 = mul nsw i64 %473, 6659
  %475 = and i64 %474, 4096
  %476 = add nsw i64 %475, %474
  %477 = lshr i64 %476, 13
  %478 = trunc i64 %477 to i32
  store i32 %478, i32* %471, align 4, !tbaa !43
  br label %494

479:                                              ; preds = %439
  %480 = shl nuw i64 %462, 1
  %481 = or i64 %480, 1
  br label %482

482:                                              ; preds = %479, %408
  %483 = phi i64 [ 1, %408 ], [ %481, %479 ]
  %484 = icmp eq i64 %410, 0
  br i1 %484, label %494, label %485

485:                                              ; preds = %482
  %486 = getelementptr inbounds i32, i32* %0, i64 %483
  %487 = load i32, i32* %486, align 4, !tbaa !43
  %488 = sext i32 %487 to i64
  %489 = mul nsw i64 %488, 6659
  %490 = and i64 %489, 4096
  %491 = add nsw i64 %490, %489
  %492 = lshr i64 %491, 13
  %493 = trunc i64 %492 to i32
  store i32 %493, i32* %486, align 4, !tbaa !43
  br label %494

494:                                              ; preds = %485, %482, %470, %467, %407, %237, %179, %6
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @dwt_getgain_real(i32) #6 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @dwt_getnorm_real(i32, i32) #6 {
  %3 = sext i32 %1 to i64
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [4 x [10 x double]], [4 x [10 x double]]* @dwt_norms_real, i64 0, i64 %3, i64 %4
  %6 = load double, double* %5, align 8, !tbaa !68
  ret double %6
}

; Function Attrs: nounwind uwtable
define void @dwt_calc_explicit_stepsizes(%struct.opj_tccp* nocapture, i32) #0 {
  %3 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4, !tbaa !95
  %5 = mul i32 %4, 3
  %6 = add i32 %5, -2
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %139

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 5
  %10 = load i32, i32* %9, align 4, !tbaa !97
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 6
  %13 = load i32, i32* %12, align 4, !tbaa !98
  %14 = icmp eq i32 %13, 0
  br i1 %11, label %18, label %15

15:                                               ; preds = %8
  %16 = add i32 %4, -1
  %17 = zext i32 %6 to i64
  br label %76

18:                                               ; preds = %8
  %19 = zext i32 %6 to i64
  br label %20

20:                                               ; preds = %67, %18
  %21 = phi i64 [ 0, %18 ], [ %74, %67 ]
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %30, label %23

23:                                               ; preds = %20
  %24 = trunc i64 %21 to i32
  %25 = add i32 %24, -1
  %26 = sdiv i32 %25, 3
  %27 = add nsw i32 %26, 1
  %28 = srem i32 %25, 3
  %29 = add nsw i32 %28, 1
  br label %30

30:                                               ; preds = %23, %20
  %31 = phi i32 [ %27, %23 ], [ 0, %20 ]
  %32 = phi i32 [ %29, %23 ], [ 0, %20 ]
  br i1 %14, label %41, label %33

33:                                               ; preds = %30
  %34 = xor i32 %31, -1
  %35 = add i32 %4, %34
  %36 = sext i32 %32 to i64
  %37 = sext i32 %35 to i64
  %38 = getelementptr inbounds [4 x [10 x double]], [4 x [10 x double]]* @dwt_norms_real, i64 0, i64 %36, i64 %37
  %39 = load double, double* %38, align 8, !tbaa !68
  %40 = fdiv double 1.000000e+00, %39
  br label %41

41:                                               ; preds = %33, %30
  %42 = phi double [ %40, %33 ], [ 1.000000e+00, %30 ]
  %43 = fmul double %42, 8.192000e+03
  %44 = tail call double @llvm.floor.f64(double %43)
  %45 = fptosi double %44 to i32
  %46 = icmp sgt i32 %45, 1
  br i1 %46, label %47, label %67

47:                                               ; preds = %47, %41
  %48 = phi i32 [ %51, %47 ], [ 0, %41 ]
  %49 = phi i32 [ %50, %47 ], [ %45, %41 ]
  %50 = lshr i32 %49, 1
  %51 = add nuw nsw i32 %48, 1
  %52 = icmp ugt i32 %49, 3
  br i1 %52, label %47, label %53

53:                                               ; preds = %53, %47
  %54 = phi i32 [ %57, %53 ], [ 0, %47 ]
  %55 = phi i32 [ %56, %53 ], [ %45, %47 ]
  %56 = lshr i32 %55, 1
  %57 = add nuw nsw i32 %54, 1
  %58 = icmp ugt i32 %55, 3
  br i1 %58, label %53, label %59

59:                                               ; preds = %53
  %60 = add nsw i32 %48, -12
  %61 = sub nsw i32 10, %54
  %62 = icmp slt i32 %61, 0
  %63 = sub nsw i32 0, %61
  %64 = ashr i32 %45, %63
  %65 = shl i32 %45, %61
  %66 = select i1 %62, i32 %64, i32 %65
  br label %67

67:                                               ; preds = %59, %41
  %68 = phi i32 [ %60, %59 ], [ -13, %41 ]
  %69 = phi i32 [ %66, %59 ], [ 0, %41 ]
  %70 = and i32 %69, 2047
  %71 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 7, i64 %21, i32 1
  store i32 %70, i32* %71, align 4, !tbaa !99
  %72 = sub i32 %1, %68
  %73 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 7, i64 %21, i32 0
  store i32 %72, i32* %73, align 4, !tbaa !101
  %74 = add nuw nsw i64 %21, 1
  %75 = icmp eq i64 %74, %19
  br i1 %75, label %139, label %20

76:                                               ; preds = %130, %15
  %77 = phi i64 [ 0, %15 ], [ %137, %130 ]
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %91, label %79

79:                                               ; preds = %76
  %80 = trunc i64 %77 to i32
  %81 = add i32 %80, -1
  %82 = sdiv i32 %81, 3
  %83 = srem i32 %81, 3
  %84 = add nsw i32 %83, 1
  %85 = sub nsw i32 -2, %82
  %86 = add i32 %4, %85
  %87 = icmp eq i32 %84, 0
  br i1 %87, label %91, label %88

88:                                               ; preds = %79
  %89 = icmp ult i32 %83, 2
  %90 = select i1 %89, i32 1, i32 2
  br label %91

91:                                               ; preds = %88, %79, %76
  %92 = phi i32 [ %86, %79 ], [ %86, %88 ], [ %16, %76 ]
  %93 = phi i32 [ 0, %79 ], [ %84, %88 ], [ 0, %76 ]
  %94 = phi i32 [ 0, %79 ], [ %90, %88 ], [ 0, %76 ]
  br i1 %14, label %103, label %95

95:                                               ; preds = %91
  %96 = sext i32 %93 to i64
  %97 = sext i32 %92 to i64
  %98 = getelementptr inbounds [4 x [10 x double]], [4 x [10 x double]]* @dwt_norms_real, i64 0, i64 %96, i64 %97
  %99 = load double, double* %98, align 8, !tbaa !68
  %100 = shl i32 1, %94
  %101 = sitofp i32 %100 to double
  %102 = fdiv double %101, %99
  br label %103

103:                                              ; preds = %95, %91
  %104 = phi double [ %102, %95 ], [ 1.000000e+00, %91 ]
  %105 = fmul double %104, 8.192000e+03
  %106 = tail call double @llvm.floor.f64(double %105)
  %107 = fptosi double %106 to i32
  %108 = add nsw i32 %94, %1
  %109 = icmp sgt i32 %107, 1
  br i1 %109, label %110, label %130

110:                                              ; preds = %110, %103
  %111 = phi i32 [ %114, %110 ], [ 0, %103 ]
  %112 = phi i32 [ %113, %110 ], [ %107, %103 ]
  %113 = lshr i32 %112, 1
  %114 = add nuw nsw i32 %111, 1
  %115 = icmp ugt i32 %112, 3
  br i1 %115, label %110, label %116

116:                                              ; preds = %116, %110
  %117 = phi i32 [ %120, %116 ], [ 0, %110 ]
  %118 = phi i32 [ %119, %116 ], [ %107, %110 ]
  %119 = lshr i32 %118, 1
  %120 = add nuw nsw i32 %117, 1
  %121 = icmp ugt i32 %118, 3
  br i1 %121, label %116, label %122

122:                                              ; preds = %116
  %123 = add nsw i32 %111, -12
  %124 = sub nsw i32 10, %117
  %125 = icmp slt i32 %124, 0
  %126 = sub nsw i32 0, %124
  %127 = ashr i32 %107, %126
  %128 = shl i32 %107, %124
  %129 = select i1 %125, i32 %127, i32 %128
  br label %130

130:                                              ; preds = %122, %103
  %131 = phi i32 [ %123, %122 ], [ -13, %103 ]
  %132 = phi i32 [ %129, %122 ], [ 0, %103 ]
  %133 = and i32 %132, 2047
  %134 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 7, i64 %77, i32 1
  store i32 %133, i32* %134, align 4, !tbaa !99
  %135 = sub i32 %108, %131
  %136 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 7, i64 %77, i32 0
  store i32 %135, i32* %136, align 4, !tbaa !101
  %137 = add nuw nsw i64 %77, 1
  %138 = icmp eq i64 %137, %17
  br i1 %138, label %139, label %76

139:                                              ; preds = %130, %67, %2
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #7

; Function Attrs: nounwind uwtable
define void @dwt_decode_real(%struct.opj_tcd_tilecomp* noalias nocapture readonly, i32) #0 {
  %3 = alloca %struct.v4dwt_local, align 8
  %4 = alloca %struct.v4dwt_local, align 8
  %5 = bitcast %struct.v4dwt_local* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #9
  %6 = bitcast %struct.v4dwt_local* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  %7 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 5
  %8 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %7, align 8, !tbaa !37
  %9 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 8, !tbaa !38
  %11 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %8, i64 0, i32 0
  %12 = load i32, i32* %11, align 8, !tbaa !40
  %13 = sub nsw i32 %10, %12
  %14 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %8, i64 0, i32 3
  %15 = load i32, i32* %14, align 4, !tbaa !41
  %16 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4, !tbaa !42
  %18 = sub nsw i32 %15, %17
  %19 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 2
  %20 = load i32, i32* %19, align 8, !tbaa !32
  %21 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 0
  %22 = load i32, i32* %21, align 8, !tbaa !34
  %23 = sub nsw i32 %20, %22
  %24 = add nsw i32 %1, -1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %92, label %26

26:                                               ; preds = %2
  %27 = add i32 %1, -1
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %1, 2
  br i1 %29, label %67, label %30

30:                                               ; preds = %26
  %31 = sub i32 %27, %28
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i32 [ 1, %30 ], [ %64, %32 ]
  %34 = phi %struct.opj_tcd_resolution* [ %8, %30 ], [ %50, %32 ]
  %35 = phi i32 [ %31, %30 ], [ %65, %32 ]
  %36 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 1, i32 2
  %37 = load i32, i32* %36, align 8, !tbaa !38, !alias.scope !102
  %38 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 1, i32 0
  %39 = load i32, i32* %38, align 8, !tbaa !40, !alias.scope !102
  %40 = sub nsw i32 %37, %39
  %41 = icmp slt i32 %33, %40
  %42 = select i1 %41, i32 %40, i32 %33
  %43 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 1, i32 3
  %44 = load i32, i32* %43, align 4, !tbaa !41, !alias.scope !102
  %45 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 1, i32 1
  %46 = load i32, i32* %45, align 4, !tbaa !42, !alias.scope !102
  %47 = sub nsw i32 %44, %46
  %48 = icmp slt i32 %42, %47
  %49 = select i1 %48, i32 %47, i32 %42
  %50 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 2
  %51 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 2, i32 2
  %52 = load i32, i32* %51, align 8, !tbaa !38, !alias.scope !102
  %53 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %50, i64 0, i32 0
  %54 = load i32, i32* %53, align 8, !tbaa !40, !alias.scope !102
  %55 = sub nsw i32 %52, %54
  %56 = icmp slt i32 %49, %55
  %57 = select i1 %56, i32 %55, i32 %49
  %58 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 2, i32 3
  %59 = load i32, i32* %58, align 4, !tbaa !41, !alias.scope !102
  %60 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 2, i32 1
  %61 = load i32, i32* %60, align 4, !tbaa !42, !alias.scope !102
  %62 = sub nsw i32 %59, %61
  %63 = icmp slt i32 %57, %62
  %64 = select i1 %63, i32 %62, i32 %57
  %65 = add i32 %35, -2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %32

67:                                               ; preds = %32, %26
  %68 = phi i32 [ undef, %26 ], [ %64, %32 ]
  %69 = phi i32 [ 1, %26 ], [ %64, %32 ]
  %70 = phi %struct.opj_tcd_resolution* [ %8, %26 ], [ %50, %32 ]
  %71 = icmp eq i32 %28, 0
  br i1 %71, label %87, label %72

72:                                               ; preds = %67
  %73 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %70, i64 1, i32 2
  %74 = load i32, i32* %73, align 8, !tbaa !38, !alias.scope !102
  %75 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %70, i64 1, i32 0
  %76 = load i32, i32* %75, align 8, !tbaa !40, !alias.scope !102
  %77 = sub nsw i32 %74, %76
  %78 = icmp slt i32 %69, %77
  %79 = select i1 %78, i32 %77, i32 %69
  %80 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %70, i64 1, i32 3
  %81 = load i32, i32* %80, align 4, !tbaa !41, !alias.scope !102
  %82 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %70, i64 1, i32 1
  %83 = load i32, i32* %82, align 4, !tbaa !42, !alias.scope !102
  %84 = sub nsw i32 %81, %83
  %85 = icmp slt i32 %79, %84
  %86 = select i1 %85, i32 %84, i32 %79
  br label %87

87:                                               ; preds = %72, %67
  %88 = phi i32 [ %68, %67 ], [ %86, %72 ]
  %89 = add i32 %88, 5
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  br label %92

92:                                               ; preds = %87, %2
  %93 = phi i64 [ 96, %2 ], [ %91, %87 ]
  %94 = tail call noalias i8* @malloc(i64 %93) #9
  %95 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %3, i64 0, i32 0
  %96 = bitcast %struct.v4dwt_local* %3 to i8**
  store i8* %94, i8** %96, align 8, !tbaa !105
  %97 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %4, i64 0, i32 0
  %98 = bitcast %struct.v4dwt_local* %4 to i8**
  store i8* %94, i8** %98, align 8, !tbaa !105
  %99 = bitcast i8* %94 to %union.v4*
  br i1 %25, label %719, label %100

100:                                              ; preds = %92
  %101 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 6
  %102 = bitcast i32** %101 to float**
  %103 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 3
  %104 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 1
  %105 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %3, i64 0, i32 2
  %106 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %4, i64 0, i32 2
  %107 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %3, i64 0, i32 1
  %108 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %3, i64 0, i32 3
  %109 = shl i32 %23, 1
  %110 = mul nsw i32 %23, 3
  %111 = shl nsw i32 %23, 2
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %4, i64 0, i32 1
  %114 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %4, i64 0, i32 3
  %115 = sext i32 %23 to i64
  %116 = sext i32 %110 to i64
  %117 = sext i32 %109 to i64
  br label %118

118:                                              ; preds = %716, %100
  %119 = phi i8* [ %94, %100 ], [ %578, %716 ]
  %120 = phi %union.v4* [ %99, %100 ], [ %712, %716 ]
  %121 = phi %union.v4* [ %99, %100 ], [ %713, %716 ]
  %122 = phi %union.v4* [ %99, %100 ], [ %577, %716 ]
  %123 = phi i32 [ %22, %100 ], [ %718, %716 ]
  %124 = phi i32 [ %20, %100 ], [ %717, %716 ]
  %125 = phi i32 [ %24, %100 ], [ %714, %716 ]
  %126 = phi i32 [ %18, %100 ], [ %145, %716 ]
  %127 = phi i32 [ %13, %100 ], [ %140, %716 ]
  %128 = phi %struct.opj_tcd_resolution* [ %8, %100 ], [ %135, %716 ]
  %129 = load float*, float** %102, align 8, !tbaa !36
  %130 = sub nsw i32 %124, %123
  %131 = load i32, i32* %103, align 4, !tbaa !107
  %132 = load i32, i32* %104, align 4, !tbaa !108
  %133 = sub nsw i32 %131, %132
  %134 = mul nsw i32 %133, %130
  store i32 %127, i32* %105, align 4, !tbaa !109
  store i32 %126, i32* %106, align 4, !tbaa !109
  %135 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %128, i64 1
  %136 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %128, i64 1, i32 2
  %137 = load i32, i32* %136, align 8, !tbaa !38
  %138 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %135, i64 0, i32 0
  %139 = load i32, i32* %138, align 8, !tbaa !40
  %140 = sub i32 %137, %139
  %141 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %128, i64 1, i32 3
  %142 = load i32, i32* %141, align 4, !tbaa !41
  %143 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %128, i64 1, i32 1
  %144 = load i32, i32* %143, align 4, !tbaa !42
  %145 = sub i32 %142, %144
  %146 = sub nsw i32 %140, %127
  store i32 %146, i32* %107, align 8, !tbaa !110
  %147 = srem i32 %139, 2
  store i32 %147, i32* %108, align 8, !tbaa !111
  %148 = icmp sgt i32 %145, 3
  br i1 %148, label %149, label %200

149:                                              ; preds = %118
  %150 = icmp sgt i32 %140, 0
  br i1 %150, label %151, label %192

151:                                              ; preds = %149
  %152 = sext i32 %140 to i64
  br label %153

153:                                              ; preds = %187, %151
  %154 = phi i32 [ %190, %187 ], [ %145, %151 ]
  %155 = phi i32 [ %189, %187 ], [ %134, %151 ]
  %156 = phi float* [ %188, %187 ], [ %129, %151 ]
  call fastcc void @v4dwt_interleave_h(%struct.v4dwt_local* nonnull %3, float* %156, i32 %23, i32 %155)
  call fastcc void @v4dwt_decode(%struct.v4dwt_local* nonnull %3)
  br label %157

157:                                              ; preds = %157, %153
  %158 = phi i64 [ %152, %153 ], [ %160, %157 ]
  %159 = phi i32 [ %140, %153 ], [ %161, %157 ]
  %160 = add nsw i64 %158, -1
  %161 = add nsw i32 %159, -1
  %162 = getelementptr inbounds %union.v4, %union.v4* %122, i64 %160, i32 0, i64 0
  %163 = bitcast float* %162 to i32*
  %164 = load i32, i32* %163, align 4, !tbaa !15
  %165 = getelementptr inbounds float, float* %156, i64 %160
  %166 = bitcast float* %165 to i32*
  store i32 %164, i32* %166, align 4, !tbaa !112
  %167 = getelementptr inbounds %union.v4, %union.v4* %122, i64 %160, i32 0, i64 1
  %168 = bitcast float* %167 to i32*
  %169 = load i32, i32* %168, align 4, !tbaa !15
  %170 = add nsw i32 %161, %23
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %156, i64 %171
  %173 = bitcast float* %172 to i32*
  store i32 %169, i32* %173, align 4, !tbaa !112
  %174 = getelementptr inbounds %union.v4, %union.v4* %122, i64 %160, i32 0, i64 2
  %175 = bitcast float* %174 to i32*
  %176 = load i32, i32* %175, align 4, !tbaa !15
  %177 = add nsw i64 %160, %117
  %178 = getelementptr inbounds float, float* %156, i64 %177
  %179 = bitcast float* %178 to i32*
  store i32 %176, i32* %179, align 4, !tbaa !112
  %180 = getelementptr inbounds %union.v4, %union.v4* %122, i64 %160, i32 0, i64 3
  %181 = bitcast float* %180 to i32*
  %182 = load i32, i32* %181, align 4, !tbaa !15
  %183 = add nsw i64 %160, %116
  %184 = getelementptr inbounds float, float* %156, i64 %183
  %185 = bitcast float* %184 to i32*
  store i32 %182, i32* %185, align 4, !tbaa !112
  %186 = icmp sgt i64 %160, 0
  br i1 %186, label %157, label %187

187:                                              ; preds = %157
  %188 = getelementptr inbounds float, float* %156, i64 %112
  %189 = sub nsw i32 %155, %111
  %190 = add nsw i32 %154, -4
  %191 = icmp sgt i32 %190, 3
  br i1 %191, label %153, label %200

192:                                              ; preds = %192, %149
  %193 = phi i32 [ %198, %192 ], [ %145, %149 ]
  %194 = phi i32 [ %197, %192 ], [ %134, %149 ]
  %195 = phi float* [ %196, %192 ], [ %129, %149 ]
  call fastcc void @v4dwt_interleave_h(%struct.v4dwt_local* nonnull %3, float* %195, i32 %23, i32 %194)
  call fastcc void @v4dwt_decode(%struct.v4dwt_local* nonnull %3)
  %196 = getelementptr inbounds float, float* %195, i64 %112
  %197 = sub nsw i32 %194, %111
  %198 = add nsw i32 %193, -4
  %199 = icmp sgt i32 %198, 3
  br i1 %199, label %192, label %200

200:                                              ; preds = %192, %187, %118
  %201 = phi float* [ %129, %118 ], [ %188, %187 ], [ %196, %192 ]
  %202 = phi i32 [ %134, %118 ], [ %189, %187 ], [ %197, %192 ]
  %203 = and i32 %145, 3
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %342, label %205

205:                                              ; preds = %200
  call fastcc void @v4dwt_interleave_h(%struct.v4dwt_local* nonnull %3, float* %201, i32 %23, i32 %202)
  call fastcc void @v4dwt_decode(%struct.v4dwt_local* nonnull %3)
  %206 = add nsw i32 %140, -1
  %207 = icmp sgt i32 %140, 0
  br i1 %207, label %212, label %208

208:                                              ; preds = %205
  %209 = sub nsw i32 %145, %126
  store i32 %209, i32* %113, align 8, !tbaa !110
  %210 = load i32, i32* %143, align 4, !tbaa !42
  %211 = srem i32 %210, 2
  store i32 %211, i32* %114, align 8, !tbaa !111
  br label %574

212:                                              ; preds = %205
  %213 = load %union.v4*, %union.v4** %95, align 8
  %214 = bitcast %union.v4* %213 to i8*
  switch i32 %203, label %342 [
    i32 3, label %257
    i32 2, label %234
    i32 1, label %215
  ]

215:                                              ; preds = %212
  %216 = sext i32 %140 to i64
  %217 = add nsw i64 %216, -1
  %218 = and i64 %216, 3
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %231, label %220

220:                                              ; preds = %220, %215
  %221 = phi i64 [ %223, %220 ], [ %216, %215 ]
  %222 = phi i64 [ %229, %220 ], [ %218, %215 ]
  %223 = add i64 %221, -1
  %224 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %223, i32 0, i64 0
  %225 = bitcast float* %224 to i32*
  %226 = load i32, i32* %225, align 4, !tbaa !15
  %227 = getelementptr inbounds float, float* %201, i64 %223
  %228 = bitcast float* %227 to i32*
  store i32 %226, i32* %228, align 4, !tbaa !112
  %229 = add i64 %222, -1
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %231, label %220, !llvm.loop !114

231:                                              ; preds = %220, %215
  %232 = phi i64 [ %216, %215 ], [ %223, %220 ]
  %233 = icmp ult i64 %217, 3
  br i1 %233, label %342, label %315

234:                                              ; preds = %212
  %235 = sext i32 %140 to i64
  %236 = and i64 %235, 1
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %253, label %238

238:                                              ; preds = %234
  %239 = add nsw i64 %235, -1
  %240 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %239, i32 0, i64 1
  %241 = bitcast float* %240 to i32*
  %242 = load i32, i32* %241, align 4, !tbaa !15
  %243 = add nsw i32 %206, %23
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds float, float* %201, i64 %244
  %246 = bitcast float* %245 to i32*
  store i32 %242, i32* %246, align 4, !tbaa !112
  %247 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %239, i32 0, i64 0
  %248 = bitcast float* %247 to i32*
  %249 = load i32, i32* %248, align 4, !tbaa !15
  %250 = getelementptr inbounds float, float* %201, i64 %239
  %251 = bitcast float* %250 to i32*
  store i32 %249, i32* %251, align 4, !tbaa !112
  %252 = add nsw i32 %140, -2
  br label %253

253:                                              ; preds = %238, %234
  %254 = phi i64 [ %239, %238 ], [ %235, %234 ]
  %255 = phi i32 [ %252, %238 ], [ %206, %234 ]
  %256 = icmp eq i32 %140, 1
  br i1 %256, label %342, label %283

257:                                              ; preds = %212
  %258 = sext i32 %140 to i64
  br label %259

259:                                              ; preds = %259, %257
  %260 = phi i64 [ %258, %257 ], [ %262, %259 ]
  %261 = phi i32 [ %206, %257 ], [ %281, %259 ]
  %262 = add i64 %260, -1
  %263 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %262, i32 0, i64 2
  %264 = bitcast float* %263 to i32*
  %265 = load i32, i32* %264, align 4, !tbaa !15
  %266 = add nsw i64 %262, %117
  %267 = getelementptr inbounds float, float* %201, i64 %266
  %268 = bitcast float* %267 to i32*
  store i32 %265, i32* %268, align 4, !tbaa !112
  %269 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %262, i32 0, i64 1
  %270 = bitcast float* %269 to i32*
  %271 = load i32, i32* %270, align 4, !tbaa !15
  %272 = add nsw i32 %261, %23
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds float, float* %201, i64 %273
  %275 = bitcast float* %274 to i32*
  store i32 %271, i32* %275, align 4, !tbaa !112
  %276 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %262, i32 0, i64 0
  %277 = bitcast float* %276 to i32*
  %278 = load i32, i32* %277, align 4, !tbaa !15
  %279 = getelementptr inbounds float, float* %201, i64 %262
  %280 = bitcast float* %279 to i32*
  store i32 %278, i32* %280, align 4, !tbaa !112
  %281 = add nsw i32 %261, -1
  %282 = icmp sgt i64 %262, 0
  br i1 %282, label %259, label %342

283:                                              ; preds = %283, %253
  %284 = phi i64 [ %300, %283 ], [ %254, %253 ]
  %285 = phi i32 [ %313, %283 ], [ %255, %253 ]
  %286 = add nsw i64 %284, -1
  %287 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %286, i32 0, i64 1
  %288 = bitcast float* %287 to i32*
  %289 = load i32, i32* %288, align 4, !tbaa !15
  %290 = add nsw i32 %285, %23
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds float, float* %201, i64 %291
  %293 = bitcast float* %292 to i32*
  store i32 %289, i32* %293, align 4, !tbaa !112
  %294 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %286, i32 0, i64 0
  %295 = bitcast float* %294 to i32*
  %296 = load i32, i32* %295, align 4, !tbaa !15
  %297 = getelementptr inbounds float, float* %201, i64 %286
  %298 = bitcast float* %297 to i32*
  store i32 %296, i32* %298, align 4, !tbaa !112
  %299 = add nsw i32 %285, -1
  %300 = add nsw i64 %284, -2
  %301 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %300, i32 0, i64 1
  %302 = bitcast float* %301 to i32*
  %303 = load i32, i32* %302, align 4, !tbaa !15
  %304 = add nsw i32 %299, %23
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds float, float* %201, i64 %305
  %307 = bitcast float* %306 to i32*
  store i32 %303, i32* %307, align 4, !tbaa !112
  %308 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %300, i32 0, i64 0
  %309 = bitcast float* %308 to i32*
  %310 = load i32, i32* %309, align 4, !tbaa !15
  %311 = getelementptr inbounds float, float* %201, i64 %300
  %312 = bitcast float* %311 to i32*
  store i32 %310, i32* %312, align 4, !tbaa !112
  %313 = add nsw i32 %285, -2
  %314 = icmp sgt i64 %300, 0
  br i1 %314, label %283, label %342

315:                                              ; preds = %315, %231
  %316 = phi i64 [ %335, %315 ], [ %232, %231 ]
  %317 = add nsw i64 %316, -1
  %318 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %317, i32 0, i64 0
  %319 = bitcast float* %318 to i32*
  %320 = load i32, i32* %319, align 4, !tbaa !15
  %321 = getelementptr inbounds float, float* %201, i64 %317
  %322 = bitcast float* %321 to i32*
  store i32 %320, i32* %322, align 4, !tbaa !112
  %323 = add i64 %316, -2
  %324 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %323, i32 0, i64 0
  %325 = bitcast float* %324 to i32*
  %326 = load i32, i32* %325, align 4, !tbaa !15
  %327 = getelementptr inbounds float, float* %201, i64 %323
  %328 = bitcast float* %327 to i32*
  store i32 %326, i32* %328, align 4, !tbaa !112
  %329 = add i64 %316, -3
  %330 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %329, i32 0, i64 0
  %331 = bitcast float* %330 to i32*
  %332 = load i32, i32* %331, align 4, !tbaa !15
  %333 = getelementptr inbounds float, float* %201, i64 %329
  %334 = bitcast float* %333 to i32*
  store i32 %332, i32* %334, align 4, !tbaa !112
  %335 = add i64 %316, -4
  %336 = getelementptr inbounds %union.v4, %union.v4* %213, i64 %335, i32 0, i64 0
  %337 = bitcast float* %336 to i32*
  %338 = load i32, i32* %337, align 4, !tbaa !15
  %339 = getelementptr inbounds float, float* %201, i64 %335
  %340 = bitcast float* %339 to i32*
  store i32 %338, i32* %340, align 4, !tbaa !112
  %341 = icmp sgt i64 %335, 0
  br i1 %341, label %315, label %342

342:                                              ; preds = %315, %283, %259, %253, %231, %212, %200
  %343 = phi i8* [ %119, %200 ], [ %214, %212 ], [ %214, %259 ], [ %214, %283 ], [ %214, %253 ], [ %214, %315 ], [ %214, %231 ]
  %344 = phi %union.v4* [ %122, %200 ], [ %213, %212 ], [ %213, %259 ], [ %213, %283 ], [ %213, %253 ], [ %213, %315 ], [ %213, %231 ]
  %345 = sub nsw i32 %145, %126
  store i32 %345, i32* %113, align 8, !tbaa !110
  %346 = load i32, i32* %143, align 4, !tbaa !42
  %347 = srem i32 %346, 2
  store i32 %347, i32* %114, align 8, !tbaa !111
  %348 = icmp sgt i32 %140, 3
  br i1 %348, label %349, label %574

349:                                              ; preds = %342
  %350 = icmp sgt i32 %145, 0
  %351 = sext i32 %347 to i64
  br i1 %350, label %374, label %352

352:                                              ; preds = %349
  %353 = getelementptr inbounds %union.v4, %union.v4* %121, i64 %351
  %354 = icmp sgt i32 %126, 0
  %355 = sext i32 %126 to i64
  %356 = mul nsw i32 %126, %23
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds %union.v4, %union.v4* %121, i64 1
  %359 = sub nsw i64 0, %351
  %360 = getelementptr inbounds %union.v4, %union.v4* %358, i64 %359
  %361 = icmp sgt i32 %345, 0
  %362 = sext i32 %345 to i64
  %363 = sext i32 %145 to i64
  %364 = xor i64 %355, -1
  %365 = and i64 %355, 1
  %366 = icmp eq i32 %126, 1
  %367 = sub nsw i64 %355, %365
  %368 = icmp eq i64 %365, 0
  %369 = and i64 %362, 1
  %370 = sub nsw i64 0, %363
  %371 = icmp eq i64 %364, %370
  %372 = sub nsw i64 %362, %369
  %373 = icmp eq i64 %369, 0
  br label %507

374:                                              ; preds = %349
  %375 = icmp sgt i32 %126, 0
  %376 = sext i32 %126 to i64
  %377 = mul nsw i32 %126, %23
  %378 = sext i32 %377 to i64
  %379 = sub nsw i64 0, %351
  %380 = icmp sgt i32 %345, 0
  %381 = sext i32 %345 to i64
  %382 = zext i32 %145 to i64
  %383 = sext i32 %145 to i64
  %384 = xor i64 %376, -1
  %385 = and i64 %376, 1
  %386 = icmp eq i32 %126, 1
  %387 = sub nsw i64 %376, %385
  %388 = icmp eq i64 %385, 0
  %389 = and i64 %381, 1
  %390 = sub nsw i64 0, %383
  %391 = icmp eq i64 %384, %390
  %392 = sub nsw i64 %381, %389
  %393 = icmp eq i64 %389, 0
  %394 = and i64 %382, 1
  %395 = icmp eq i32 %145, 1
  %396 = sub nsw i64 %382, %394
  %397 = icmp eq i64 %394, 0
  br label %398

398:                                              ; preds = %502, %374
  %399 = phi %union.v4* [ %503, %502 ], [ %120, %374 ]
  %400 = phi i32 [ %505, %502 ], [ %140, %374 ]
  %401 = phi float* [ %504, %502 ], [ %129, %374 ]
  %402 = getelementptr inbounds %union.v4, %union.v4* %399, i64 %351
  br i1 %375, label %403, label %432

403:                                              ; preds = %398
  br i1 %386, label %423, label %404

404:                                              ; preds = %404, %403
  %405 = phi i64 [ %420, %404 ], [ 0, %403 ]
  %406 = phi i64 [ %421, %404 ], [ %387, %403 ]
  %407 = shl nuw nsw i64 %405, 1
  %408 = getelementptr inbounds %union.v4, %union.v4* %402, i64 %407
  %409 = bitcast %union.v4* %408 to i8*
  %410 = mul nsw i64 %405, %115
  %411 = getelementptr inbounds float, float* %401, i64 %410
  %412 = bitcast float* %411 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %409, i8* align 4 %412, i64 16, i1 false) #9, !noalias !115
  %413 = or i64 %405, 1
  %414 = shl nuw nsw i64 %413, 1
  %415 = getelementptr inbounds %union.v4, %union.v4* %402, i64 %414
  %416 = bitcast %union.v4* %415 to i8*
  %417 = mul nsw i64 %413, %115
  %418 = getelementptr inbounds float, float* %401, i64 %417
  %419 = bitcast float* %418 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %416, i8* align 4 %419, i64 16, i1 false) #9, !noalias !115
  %420 = add nuw nsw i64 %405, 2
  %421 = add i64 %406, -2
  %422 = icmp eq i64 %421, 0
  br i1 %422, label %423, label %404

423:                                              ; preds = %404, %403
  %424 = phi i64 [ 0, %403 ], [ %420, %404 ]
  br i1 %388, label %432, label %425

425:                                              ; preds = %423
  %426 = shl nuw nsw i64 %424, 1
  %427 = getelementptr inbounds %union.v4, %union.v4* %402, i64 %426
  %428 = bitcast %union.v4* %427 to i8*
  %429 = mul nsw i64 %424, %115
  %430 = getelementptr inbounds float, float* %401, i64 %429
  %431 = bitcast float* %430 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %428, i8* align 4 %431, i64 16, i1 false) #9, !noalias !115
  br label %432

432:                                              ; preds = %425, %423, %398
  %433 = getelementptr inbounds float, float* %401, i64 %378
  %434 = getelementptr inbounds %union.v4, %union.v4* %399, i64 1
  %435 = getelementptr inbounds %union.v4, %union.v4* %434, i64 %379
  br i1 %380, label %436, label %465

436:                                              ; preds = %432
  br i1 %391, label %456, label %437

437:                                              ; preds = %437, %436
  %438 = phi i64 [ %453, %437 ], [ 0, %436 ]
  %439 = phi i64 [ %454, %437 ], [ %392, %436 ]
  %440 = shl nuw nsw i64 %438, 1
  %441 = getelementptr inbounds %union.v4, %union.v4* %435, i64 %440
  %442 = bitcast %union.v4* %441 to i8*
  %443 = mul nsw i64 %438, %115
  %444 = getelementptr inbounds float, float* %433, i64 %443
  %445 = bitcast float* %444 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %442, i8* align 4 %445, i64 16, i1 false) #9, !noalias !115
  %446 = or i64 %438, 1
  %447 = shl nuw nsw i64 %446, 1
  %448 = getelementptr inbounds %union.v4, %union.v4* %435, i64 %447
  %449 = bitcast %union.v4* %448 to i8*
  %450 = mul nsw i64 %446, %115
  %451 = getelementptr inbounds float, float* %433, i64 %450
  %452 = bitcast float* %451 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %449, i8* align 4 %452, i64 16, i1 false) #9, !noalias !115
  %453 = add nuw nsw i64 %438, 2
  %454 = add i64 %439, -2
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %456, label %437

456:                                              ; preds = %437, %436
  %457 = phi i64 [ 0, %436 ], [ %453, %437 ]
  br i1 %393, label %465, label %458

458:                                              ; preds = %456
  %459 = shl nuw nsw i64 %457, 1
  %460 = getelementptr inbounds %union.v4, %union.v4* %435, i64 %459
  %461 = bitcast %union.v4* %460 to i8*
  %462 = mul nsw i64 %457, %115
  %463 = getelementptr inbounds float, float* %433, i64 %462
  %464 = bitcast float* %463 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %461, i8* align 4 %464, i64 16, i1 false) #9, !noalias !115
  br label %465

465:                                              ; preds = %458, %456, %432
  call fastcc void @v4dwt_decode(%struct.v4dwt_local* nonnull %4)
  br i1 %395, label %490, label %466

466:                                              ; preds = %466, %465
  %467 = phi i64 [ %486, %466 ], [ 0, %465 ]
  %468 = phi i32 [ %487, %466 ], [ 0, %465 ]
  %469 = phi i64 [ %488, %466 ], [ %396, %465 ]
  %470 = mul nsw i32 %468, %23
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds float, float* %401, i64 %471
  %473 = bitcast float* %472 to i8*
  %474 = load %union.v4*, %union.v4** %97, align 8, !tbaa !105
  %475 = getelementptr inbounds %union.v4, %union.v4* %474, i64 %467
  %476 = bitcast %union.v4* %475 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %473, i8* align 4 %476, i64 16, i1 false)
  %477 = or i64 %467, 1
  %478 = or i32 %468, 1
  %479 = mul nsw i32 %478, %23
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds float, float* %401, i64 %480
  %482 = bitcast float* %481 to i8*
  %483 = load %union.v4*, %union.v4** %97, align 8, !tbaa !105
  %484 = getelementptr inbounds %union.v4, %union.v4* %483, i64 %477
  %485 = bitcast %union.v4* %484 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %482, i8* nonnull align 4 %485, i64 16, i1 false)
  %486 = add nuw nsw i64 %467, 2
  %487 = add nuw nsw i32 %468, 2
  %488 = add i64 %469, -2
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %490, label %466

490:                                              ; preds = %466, %465
  %491 = phi %union.v4* [ undef, %465 ], [ %483, %466 ]
  %492 = phi i64 [ 0, %465 ], [ %486, %466 ]
  %493 = phi i32 [ 0, %465 ], [ %487, %466 ]
  br i1 %397, label %502, label %494

494:                                              ; preds = %490
  %495 = mul nsw i32 %493, %23
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds float, float* %401, i64 %496
  %498 = bitcast float* %497 to i8*
  %499 = load %union.v4*, %union.v4** %97, align 8, !tbaa !105
  %500 = getelementptr inbounds %union.v4, %union.v4* %499, i64 %492
  %501 = bitcast %union.v4* %500 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %498, i8* align 4 %501, i64 16, i1 false)
  br label %502

502:                                              ; preds = %494, %490
  %503 = phi %union.v4* [ %491, %490 ], [ %499, %494 ]
  %504 = getelementptr inbounds float, float* %401, i64 4
  %505 = add nsw i32 %400, -4
  %506 = icmp sgt i32 %505, 3
  br i1 %506, label %398, label %574

507:                                              ; preds = %570, %352
  %508 = phi i32 [ %572, %570 ], [ %140, %352 ]
  %509 = phi float* [ %571, %570 ], [ %129, %352 ]
  br i1 %354, label %510, label %539

510:                                              ; preds = %507
  br i1 %366, label %530, label %511

511:                                              ; preds = %511, %510
  %512 = phi i64 [ %527, %511 ], [ 0, %510 ]
  %513 = phi i64 [ %528, %511 ], [ %367, %510 ]
  %514 = shl nuw nsw i64 %512, 1
  %515 = getelementptr inbounds %union.v4, %union.v4* %353, i64 %514
  %516 = bitcast %union.v4* %515 to i8*
  %517 = mul nsw i64 %512, %115
  %518 = getelementptr inbounds float, float* %509, i64 %517
  %519 = bitcast float* %518 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %516, i8* align 4 %519, i64 16, i1 false) #9, !noalias !115
  %520 = or i64 %512, 1
  %521 = shl nuw nsw i64 %520, 1
  %522 = getelementptr inbounds %union.v4, %union.v4* %353, i64 %521
  %523 = bitcast %union.v4* %522 to i8*
  %524 = mul nsw i64 %520, %115
  %525 = getelementptr inbounds float, float* %509, i64 %524
  %526 = bitcast float* %525 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %523, i8* align 4 %526, i64 16, i1 false) #9, !noalias !115
  %527 = add nuw nsw i64 %512, 2
  %528 = add i64 %513, -2
  %529 = icmp eq i64 %528, 0
  br i1 %529, label %530, label %511

530:                                              ; preds = %511, %510
  %531 = phi i64 [ 0, %510 ], [ %527, %511 ]
  br i1 %368, label %539, label %532

532:                                              ; preds = %530
  %533 = shl nuw nsw i64 %531, 1
  %534 = getelementptr inbounds %union.v4, %union.v4* %353, i64 %533
  %535 = bitcast %union.v4* %534 to i8*
  %536 = mul nsw i64 %531, %115
  %537 = getelementptr inbounds float, float* %509, i64 %536
  %538 = bitcast float* %537 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %535, i8* align 4 %538, i64 16, i1 false) #9, !noalias !115
  br label %539

539:                                              ; preds = %532, %530, %507
  %540 = getelementptr inbounds float, float* %509, i64 %357
  br i1 %361, label %541, label %570

541:                                              ; preds = %539
  br i1 %371, label %561, label %542

542:                                              ; preds = %542, %541
  %543 = phi i64 [ %558, %542 ], [ 0, %541 ]
  %544 = phi i64 [ %559, %542 ], [ %372, %541 ]
  %545 = shl nuw nsw i64 %543, 1
  %546 = getelementptr inbounds %union.v4, %union.v4* %360, i64 %545
  %547 = bitcast %union.v4* %546 to i8*
  %548 = mul nsw i64 %543, %115
  %549 = getelementptr inbounds float, float* %540, i64 %548
  %550 = bitcast float* %549 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %547, i8* align 4 %550, i64 16, i1 false) #9, !noalias !115
  %551 = or i64 %543, 1
  %552 = shl nuw nsw i64 %551, 1
  %553 = getelementptr inbounds %union.v4, %union.v4* %360, i64 %552
  %554 = bitcast %union.v4* %553 to i8*
  %555 = mul nsw i64 %551, %115
  %556 = getelementptr inbounds float, float* %540, i64 %555
  %557 = bitcast float* %556 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %554, i8* align 4 %557, i64 16, i1 false) #9, !noalias !115
  %558 = add nuw nsw i64 %543, 2
  %559 = add i64 %544, -2
  %560 = icmp eq i64 %559, 0
  br i1 %560, label %561, label %542

561:                                              ; preds = %542, %541
  %562 = phi i64 [ 0, %541 ], [ %558, %542 ]
  br i1 %373, label %570, label %563

563:                                              ; preds = %561
  %564 = shl nuw nsw i64 %562, 1
  %565 = getelementptr inbounds %union.v4, %union.v4* %360, i64 %564
  %566 = bitcast %union.v4* %565 to i8*
  %567 = mul nsw i64 %562, %115
  %568 = getelementptr inbounds float, float* %540, i64 %567
  %569 = bitcast float* %568 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %566, i8* align 4 %569, i64 16, i1 false) #9, !noalias !115
  br label %570

570:                                              ; preds = %563, %561, %539
  call fastcc void @v4dwt_decode(%struct.v4dwt_local* nonnull %4)
  %571 = getelementptr inbounds float, float* %509, i64 4
  %572 = add nsw i32 %508, -4
  %573 = icmp sgt i32 %572, 3
  br i1 %573, label %507, label %574

574:                                              ; preds = %570, %502, %342, %208
  %575 = phi i32 [ %347, %342 ], [ %211, %208 ], [ %347, %502 ], [ %347, %570 ]
  %576 = phi i32 [ %345, %342 ], [ %209, %208 ], [ %345, %502 ], [ %345, %570 ]
  %577 = phi %union.v4* [ %344, %342 ], [ %122, %208 ], [ %344, %502 ], [ %344, %570 ]
  %578 = phi i8* [ %343, %342 ], [ %119, %208 ], [ %343, %502 ], [ %343, %570 ]
  %579 = phi %union.v4* [ %120, %342 ], [ %120, %208 ], [ %503, %502 ], [ %120, %570 ]
  %580 = phi %union.v4* [ %121, %342 ], [ %121, %208 ], [ %503, %502 ], [ %121, %570 ]
  %581 = phi float* [ %129, %342 ], [ %129, %208 ], [ %504, %502 ], [ %571, %570 ]
  %582 = and i32 %140, 3
  %583 = icmp eq i32 %582, 0
  br i1 %583, label %711, label %584

584:                                              ; preds = %574
  %585 = load %union.v4*, %union.v4** %97, align 8, !tbaa !105, !alias.scope !118, !noalias !121
  %586 = sext i32 %575 to i64
  %587 = getelementptr inbounds %union.v4, %union.v4* %585, i64 %586
  %588 = load i32, i32* %106, align 4, !tbaa !109, !alias.scope !118, !noalias !121
  %589 = icmp sgt i32 %588, 0
  br i1 %589, label %590, label %625

590:                                              ; preds = %584
  %591 = sext i32 %588 to i64
  %592 = and i64 %591, 1
  %593 = icmp eq i32 %588, 1
  br i1 %593, label %615, label %594

594:                                              ; preds = %590
  %595 = sub nsw i64 %591, %592
  br label %596

596:                                              ; preds = %596, %594
  %597 = phi i64 [ 0, %594 ], [ %612, %596 ]
  %598 = phi i64 [ %595, %594 ], [ %613, %596 ]
  %599 = shl nuw nsw i64 %597, 1
  %600 = getelementptr inbounds %union.v4, %union.v4* %587, i64 %599
  %601 = bitcast %union.v4* %600 to i8*
  %602 = mul nsw i64 %597, %115
  %603 = getelementptr inbounds float, float* %581, i64 %602
  %604 = bitcast float* %603 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %601, i8* align 4 %604, i64 16, i1 false) #9, !noalias !118
  %605 = or i64 %597, 1
  %606 = shl nuw nsw i64 %605, 1
  %607 = getelementptr inbounds %union.v4, %union.v4* %587, i64 %606
  %608 = bitcast %union.v4* %607 to i8*
  %609 = mul nsw i64 %605, %115
  %610 = getelementptr inbounds float, float* %581, i64 %609
  %611 = bitcast float* %610 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %608, i8* align 4 %611, i64 16, i1 false) #9, !noalias !118
  %612 = add nuw nsw i64 %597, 2
  %613 = add i64 %598, -2
  %614 = icmp eq i64 %613, 0
  br i1 %614, label %615, label %596

615:                                              ; preds = %596, %590
  %616 = phi i64 [ 0, %590 ], [ %612, %596 ]
  %617 = icmp eq i64 %592, 0
  br i1 %617, label %625, label %618

618:                                              ; preds = %615
  %619 = shl nuw nsw i64 %616, 1
  %620 = getelementptr inbounds %union.v4, %union.v4* %587, i64 %619
  %621 = bitcast %union.v4* %620 to i8*
  %622 = mul nsw i64 %616, %115
  %623 = getelementptr inbounds float, float* %581, i64 %622
  %624 = bitcast float* %623 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %621, i8* align 4 %624, i64 16, i1 false) #9, !noalias !118
  br label %625

625:                                              ; preds = %618, %615, %584
  %626 = mul nsw i32 %588, %23
  %627 = sext i32 %626 to i64
  %628 = getelementptr inbounds float, float* %581, i64 %627
  %629 = getelementptr inbounds %union.v4, %union.v4* %585, i64 1
  %630 = sub nsw i64 0, %586
  %631 = getelementptr inbounds %union.v4, %union.v4* %629, i64 %630
  %632 = icmp sgt i32 %576, 0
  br i1 %632, label %633, label %668

633:                                              ; preds = %625
  %634 = sext i32 %576 to i64
  %635 = and i64 %634, 1
  %636 = icmp eq i32 %576, 1
  br i1 %636, label %658, label %637

637:                                              ; preds = %633
  %638 = sub nsw i64 %634, %635
  br label %639

639:                                              ; preds = %639, %637
  %640 = phi i64 [ 0, %637 ], [ %655, %639 ]
  %641 = phi i64 [ %638, %637 ], [ %656, %639 ]
  %642 = shl nuw nsw i64 %640, 1
  %643 = getelementptr inbounds %union.v4, %union.v4* %631, i64 %642
  %644 = bitcast %union.v4* %643 to i8*
  %645 = mul nsw i64 %640, %115
  %646 = getelementptr inbounds float, float* %628, i64 %645
  %647 = bitcast float* %646 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %644, i8* align 4 %647, i64 16, i1 false) #9, !noalias !118
  %648 = or i64 %640, 1
  %649 = shl nuw nsw i64 %648, 1
  %650 = getelementptr inbounds %union.v4, %union.v4* %631, i64 %649
  %651 = bitcast %union.v4* %650 to i8*
  %652 = mul nsw i64 %648, %115
  %653 = getelementptr inbounds float, float* %628, i64 %652
  %654 = bitcast float* %653 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %651, i8* align 4 %654, i64 16, i1 false) #9, !noalias !118
  %655 = add nuw nsw i64 %640, 2
  %656 = add i64 %641, -2
  %657 = icmp eq i64 %656, 0
  br i1 %657, label %658, label %639

658:                                              ; preds = %639, %633
  %659 = phi i64 [ 0, %633 ], [ %655, %639 ]
  %660 = icmp eq i64 %635, 0
  br i1 %660, label %668, label %661

661:                                              ; preds = %658
  %662 = shl nuw nsw i64 %659, 1
  %663 = getelementptr inbounds %union.v4, %union.v4* %631, i64 %662
  %664 = bitcast %union.v4* %663 to i8*
  %665 = mul nsw i64 %659, %115
  %666 = getelementptr inbounds float, float* %628, i64 %665
  %667 = bitcast float* %666 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %664, i8* align 4 %667, i64 16, i1 false) #9, !noalias !118
  br label %668

668:                                              ; preds = %661, %658, %625
  call fastcc void @v4dwt_decode(%struct.v4dwt_local* nonnull %4)
  %669 = icmp sgt i32 %145, 0
  br i1 %669, label %670, label %711

670:                                              ; preds = %668
  %671 = shl nuw nsw i32 %582, 2
  %672 = zext i32 %671 to i64
  %673 = zext i32 %145 to i64
  %674 = and i64 %673, 1
  %675 = icmp eq i32 %145, 1
  br i1 %675, label %700, label %676

676:                                              ; preds = %670
  %677 = sub nsw i64 %673, %674
  br label %678

678:                                              ; preds = %678, %676
  %679 = phi i64 [ 0, %676 ], [ %696, %678 ]
  %680 = phi i32 [ 0, %676 ], [ %697, %678 ]
  %681 = phi i64 [ %677, %676 ], [ %698, %678 ]
  %682 = mul nsw i32 %680, %23
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds float, float* %581, i64 %683
  %685 = bitcast float* %684 to i8*
  %686 = getelementptr inbounds %union.v4, %union.v4* %585, i64 %679
  %687 = bitcast %union.v4* %686 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %685, i8* align 4 %687, i64 %672, i1 false)
  %688 = or i64 %679, 1
  %689 = or i32 %680, 1
  %690 = mul nsw i32 %689, %23
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds float, float* %581, i64 %691
  %693 = bitcast float* %692 to i8*
  %694 = getelementptr inbounds %union.v4, %union.v4* %585, i64 %688
  %695 = bitcast %union.v4* %694 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %693, i8* nonnull align 4 %695, i64 %672, i1 false)
  %696 = add nuw nsw i64 %679, 2
  %697 = add nuw nsw i32 %680, 2
  %698 = add i64 %681, -2
  %699 = icmp eq i64 %698, 0
  br i1 %699, label %700, label %678

700:                                              ; preds = %678, %670
  %701 = phi i64 [ 0, %670 ], [ %696, %678 ]
  %702 = phi i32 [ 0, %670 ], [ %697, %678 ]
  %703 = icmp eq i64 %674, 0
  br i1 %703, label %711, label %704

704:                                              ; preds = %700
  %705 = mul nsw i32 %702, %23
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds float, float* %581, i64 %706
  %708 = bitcast float* %707 to i8*
  %709 = getelementptr inbounds %union.v4, %union.v4* %585, i64 %701
  %710 = bitcast %union.v4* %709 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %708, i8* align 4 %710, i64 %672, i1 false)
  br label %711

711:                                              ; preds = %704, %700, %668, %574
  %712 = phi %union.v4* [ %585, %668 ], [ %579, %574 ], [ %585, %700 ], [ %585, %704 ]
  %713 = phi %union.v4* [ %585, %668 ], [ %580, %574 ], [ %585, %700 ], [ %585, %704 ]
  %714 = add nsw i32 %125, -1
  %715 = icmp eq i32 %714, 0
  br i1 %715, label %719, label %716

716:                                              ; preds = %711
  %717 = load i32, i32* %19, align 8, !tbaa !32
  %718 = load i32, i32* %21, align 8, !tbaa !34
  br label %118

719:                                              ; preds = %711, %92
  %720 = phi i8* [ %94, %92 ], [ %578, %711 ]
  tail call void @free(i8* %720) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #9
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @v4dwt_interleave_h(%struct.v4dwt_local* noalias nocapture readonly, float* noalias, i32, i32) unnamed_addr #4 {
  %5 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 0
  %6 = load %union.v4*, %union.v4** %5, align 8, !tbaa !105
  %7 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8, !tbaa !111
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 0
  %11 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4, !tbaa !43
  %13 = mul nsw i32 %2, 3
  %14 = and i32 %2, 15
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %union.v4, %union.v4* %6, i64 1
  %17 = sub nsw i64 0, %9
  %18 = getelementptr inbounds %union.v4, %union.v4* %16, i64 %17
  %19 = sext i32 %12 to i64
  %20 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 4, !tbaa !43
  %22 = sext i32 %2 to i64
  br i1 %15, label %25, label %23

23:                                               ; preds = %4
  %24 = icmp sgt i32 %12, 0
  br i1 %24, label %131, label %177

25:                                               ; preds = %4
  %26 = add nsw i32 %12, %13
  %27 = icmp slt i32 %26, %3
  br i1 %27, label %28, label %36

28:                                               ; preds = %25
  %29 = ptrtoint float* %1 to i64
  %30 = and i64 %29, 15
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = ptrtoint float* %10 to i64
  %34 = and i64 %33, 15
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %127, label %36

36:                                               ; preds = %32, %28, %25
  %37 = icmp sgt i32 %12, 0
  br i1 %37, label %38, label %86

38:                                               ; preds = %36
  %39 = zext i32 %12 to i64
  br label %40

40:                                               ; preds = %83, %38
  %41 = phi i64 [ 0, %38 ], [ %84, %83 ]
  %42 = getelementptr inbounds float, float* %1, i64 %41
  %43 = bitcast float* %42 to i32*
  %44 = load i32, i32* %43, align 4, !tbaa !112
  %45 = trunc i64 %41 to i32
  %46 = shl nsw i32 %45, 3
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %47
  %49 = bitcast float* %48 to i32*
  store i32 %44, i32* %49, align 4, !tbaa !112
  %50 = add nsw i32 %45, %2
  %51 = icmp sgt i32 %50, %3
  br i1 %51, label %83, label %52

52:                                               ; preds = %40
  %53 = sext i32 %50 to i64
  %54 = getelementptr inbounds float, float* %1, i64 %53
  %55 = bitcast float* %54 to i32*
  %56 = load i32, i32* %55, align 4, !tbaa !112
  %57 = or i32 %46, 1
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %58
  %60 = bitcast float* %59 to i32*
  store i32 %56, i32* %60, align 4, !tbaa !112
  %61 = add nsw i32 %50, %2
  %62 = icmp sgt i32 %61, %3
  br i1 %62, label %83, label %63

63:                                               ; preds = %52
  %64 = sext i32 %61 to i64
  %65 = getelementptr inbounds float, float* %1, i64 %64
  %66 = bitcast float* %65 to i32*
  %67 = load i32, i32* %66, align 4, !tbaa !112
  %68 = or i32 %46, 2
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %69
  %71 = bitcast float* %70 to i32*
  store i32 %67, i32* %71, align 4, !tbaa !112
  %72 = add nsw i32 %61, %2
  %73 = icmp sgt i32 %72, %3
  br i1 %73, label %83, label %74

74:                                               ; preds = %63
  %75 = sext i32 %72 to i64
  %76 = getelementptr inbounds float, float* %1, i64 %75
  %77 = bitcast float* %76 to i32*
  %78 = load i32, i32* %77, align 4, !tbaa !112
  %79 = or i32 %46, 3
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %80
  %82 = bitcast float* %81 to i32*
  store i32 %78, i32* %82, align 4, !tbaa !112
  br label %83

83:                                               ; preds = %74, %63, %52, %40
  %84 = add nuw nsw i64 %41, 1
  %85 = icmp eq i64 %84, %39
  br i1 %85, label %86, label %40

86:                                               ; preds = %127, %91, %83, %36
  %87 = getelementptr inbounds float, float* %1, i64 %19
  %88 = sub nsw i32 %3, %12
  %89 = add nsw i32 %21, %13
  %90 = icmp slt i32 %89, %88
  br i1 %90, label %181, label %189

91:                                               ; preds = %129, %91
  %92 = phi i64 [ 0, %129 ], [ %125, %91 ]
  %93 = getelementptr inbounds float, float* %1, i64 %92
  %94 = bitcast float* %93 to i32*
  %95 = load i32, i32* %94, align 4, !tbaa !112
  %96 = trunc i64 %92 to i32
  %97 = shl nsw i32 %96, 3
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %98
  %100 = bitcast float* %99 to i32*
  store i32 %95, i32* %100, align 4, !tbaa !112
  %101 = add nsw i64 %92, %22
  %102 = getelementptr inbounds float, float* %1, i64 %101
  %103 = bitcast float* %102 to i32*
  %104 = load i32, i32* %103, align 4, !tbaa !112
  %105 = or i32 %97, 1
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %106
  %108 = bitcast float* %107 to i32*
  store i32 %104, i32* %108, align 4, !tbaa !112
  %109 = add nsw i64 %101, %22
  %110 = getelementptr inbounds float, float* %1, i64 %109
  %111 = bitcast float* %110 to i32*
  %112 = load i32, i32* %111, align 4, !tbaa !112
  %113 = or i32 %97, 2
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %114
  %116 = bitcast float* %115 to i32*
  store i32 %112, i32* %116, align 4, !tbaa !112
  %117 = add nsw i64 %109, %22
  %118 = getelementptr inbounds float, float* %1, i64 %117
  %119 = bitcast float* %118 to i32*
  %120 = load i32, i32* %119, align 4, !tbaa !112
  %121 = or i32 %97, 3
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %122
  %124 = bitcast float* %123 to i32*
  store i32 %120, i32* %124, align 4, !tbaa !112
  %125 = add nuw nsw i64 %92, 1
  %126 = icmp eq i64 %125, %130
  br i1 %126, label %86, label %91

127:                                              ; preds = %32
  %128 = icmp sgt i32 %12, 0
  br i1 %128, label %129, label %86

129:                                              ; preds = %127
  %130 = zext i32 %12 to i64
  br label %91

131:                                              ; preds = %23
  %132 = sext i32 %3 to i64
  %133 = zext i32 %12 to i64
  br label %134

134:                                              ; preds = %174, %131
  %135 = phi i64 [ 0, %131 ], [ %175, %174 ]
  %136 = getelementptr inbounds float, float* %1, i64 %135
  %137 = bitcast float* %136 to i32*
  %138 = load i32, i32* %137, align 4, !tbaa !112
  %139 = trunc i64 %135 to i32
  %140 = shl nsw i32 %139, 3
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %141
  %143 = bitcast float* %142 to i32*
  store i32 %138, i32* %143, align 4, !tbaa !112
  %144 = add nsw i64 %135, %22
  %145 = icmp sgt i64 %144, %132
  br i1 %145, label %174, label %146

146:                                              ; preds = %134
  %147 = getelementptr inbounds float, float* %1, i64 %144
  %148 = bitcast float* %147 to i32*
  %149 = load i32, i32* %148, align 4, !tbaa !112
  %150 = or i32 %140, 1
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %151
  %153 = bitcast float* %152 to i32*
  store i32 %149, i32* %153, align 4, !tbaa !112
  %154 = add nsw i64 %144, %22
  %155 = icmp sgt i64 %154, %132
  br i1 %155, label %174, label %156

156:                                              ; preds = %146
  %157 = getelementptr inbounds float, float* %1, i64 %154
  %158 = bitcast float* %157 to i32*
  %159 = load i32, i32* %158, align 4, !tbaa !112
  %160 = or i32 %140, 2
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %161
  %163 = bitcast float* %162 to i32*
  store i32 %159, i32* %163, align 4, !tbaa !112
  %164 = add nsw i64 %154, %22
  %165 = icmp sgt i64 %164, %132
  br i1 %165, label %174, label %166

166:                                              ; preds = %156
  %167 = getelementptr inbounds float, float* %1, i64 %164
  %168 = bitcast float* %167 to i32*
  %169 = load i32, i32* %168, align 4, !tbaa !112
  %170 = or i32 %140, 3
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds %union.v4, %union.v4* %6, i64 %9, i32 0, i64 %171
  %173 = bitcast float* %172 to i32*
  store i32 %169, i32* %173, align 4, !tbaa !112
  br label %174

174:                                              ; preds = %166, %156, %146, %134
  %175 = add nuw nsw i64 %135, 1
  %176 = icmp eq i64 %175, %133
  br i1 %176, label %177, label %134

177:                                              ; preds = %174, %23
  %178 = getelementptr inbounds float, float* %1, i64 %19
  %179 = icmp sgt i32 %21, 0
  br i1 %179, label %279, label %180

180:                                              ; preds = %323, %243, %239, %236, %189, %177
  ret void

181:                                              ; preds = %86
  %182 = ptrtoint float* %87 to i64
  %183 = and i64 %182, 15
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %189

185:                                              ; preds = %181
  %186 = ptrtoint %union.v4* %18 to i64
  %187 = and i64 %186, 15
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %239, label %189

189:                                              ; preds = %185, %181, %86
  %190 = icmp sgt i32 %21, 0
  br i1 %190, label %191, label %180

191:                                              ; preds = %189
  %192 = zext i32 %21 to i64
  br label %193

193:                                              ; preds = %236, %191
  %194 = phi i64 [ 0, %191 ], [ %237, %236 ]
  %195 = getelementptr inbounds float, float* %87, i64 %194
  %196 = bitcast float* %195 to i32*
  %197 = load i32, i32* %196, align 4, !tbaa !112
  %198 = trunc i64 %194 to i32
  %199 = shl nsw i32 %198, 3
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %200
  %202 = bitcast float* %201 to i32*
  store i32 %197, i32* %202, align 4, !tbaa !112
  %203 = add nsw i32 %198, %2
  %204 = icmp sgt i32 %203, %88
  br i1 %204, label %236, label %205

205:                                              ; preds = %193
  %206 = sext i32 %203 to i64
  %207 = getelementptr inbounds float, float* %87, i64 %206
  %208 = bitcast float* %207 to i32*
  %209 = load i32, i32* %208, align 4, !tbaa !112
  %210 = or i32 %199, 1
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %211
  %213 = bitcast float* %212 to i32*
  store i32 %209, i32* %213, align 4, !tbaa !112
  %214 = add nsw i32 %203, %2
  %215 = icmp sgt i32 %214, %88
  br i1 %215, label %236, label %216

216:                                              ; preds = %205
  %217 = sext i32 %214 to i64
  %218 = getelementptr inbounds float, float* %87, i64 %217
  %219 = bitcast float* %218 to i32*
  %220 = load i32, i32* %219, align 4, !tbaa !112
  %221 = or i32 %199, 2
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %222
  %224 = bitcast float* %223 to i32*
  store i32 %220, i32* %224, align 4, !tbaa !112
  %225 = add nsw i32 %214, %2
  %226 = icmp sgt i32 %225, %88
  br i1 %226, label %236, label %227

227:                                              ; preds = %216
  %228 = sext i32 %225 to i64
  %229 = getelementptr inbounds float, float* %87, i64 %228
  %230 = bitcast float* %229 to i32*
  %231 = load i32, i32* %230, align 4, !tbaa !112
  %232 = or i32 %199, 3
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %233
  %235 = bitcast float* %234 to i32*
  store i32 %231, i32* %235, align 4, !tbaa !112
  br label %236

236:                                              ; preds = %227, %216, %205, %193
  %237 = add nuw nsw i64 %194, 1
  %238 = icmp eq i64 %237, %192
  br i1 %238, label %180, label %193

239:                                              ; preds = %185
  %240 = icmp sgt i32 %21, 0
  br i1 %240, label %241, label %180

241:                                              ; preds = %239
  %242 = zext i32 %21 to i64
  br label %243

243:                                              ; preds = %243, %241
  %244 = phi i64 [ 0, %241 ], [ %277, %243 ]
  %245 = getelementptr inbounds float, float* %87, i64 %244
  %246 = bitcast float* %245 to i32*
  %247 = load i32, i32* %246, align 4, !tbaa !112
  %248 = trunc i64 %244 to i32
  %249 = shl nsw i32 %248, 3
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %250
  %252 = bitcast float* %251 to i32*
  store i32 %247, i32* %252, align 4, !tbaa !112
  %253 = add nsw i64 %244, %22
  %254 = getelementptr inbounds float, float* %87, i64 %253
  %255 = bitcast float* %254 to i32*
  %256 = load i32, i32* %255, align 4, !tbaa !112
  %257 = or i32 %249, 1
  %258 = zext i32 %257 to i64
  %259 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %258
  %260 = bitcast float* %259 to i32*
  store i32 %256, i32* %260, align 4, !tbaa !112
  %261 = add nsw i64 %253, %22
  %262 = getelementptr inbounds float, float* %87, i64 %261
  %263 = bitcast float* %262 to i32*
  %264 = load i32, i32* %263, align 4, !tbaa !112
  %265 = or i32 %249, 2
  %266 = zext i32 %265 to i64
  %267 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %266
  %268 = bitcast float* %267 to i32*
  store i32 %264, i32* %268, align 4, !tbaa !112
  %269 = add nsw i64 %261, %22
  %270 = getelementptr inbounds float, float* %87, i64 %269
  %271 = bitcast float* %270 to i32*
  %272 = load i32, i32* %271, align 4, !tbaa !112
  %273 = or i32 %249, 3
  %274 = zext i32 %273 to i64
  %275 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %274
  %276 = bitcast float* %275 to i32*
  store i32 %272, i32* %276, align 4, !tbaa !112
  %277 = add nuw nsw i64 %244, 1
  %278 = icmp eq i64 %277, %242
  br i1 %278, label %180, label %243

279:                                              ; preds = %177
  %280 = sub nsw i32 %3, %12
  %281 = sext i32 %280 to i64
  %282 = zext i32 %21 to i64
  br label %283

283:                                              ; preds = %323, %279
  %284 = phi i64 [ 0, %279 ], [ %324, %323 ]
  %285 = getelementptr inbounds float, float* %178, i64 %284
  %286 = bitcast float* %285 to i32*
  %287 = load i32, i32* %286, align 4, !tbaa !112
  %288 = trunc i64 %284 to i32
  %289 = shl nsw i32 %288, 3
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %290
  %292 = bitcast float* %291 to i32*
  store i32 %287, i32* %292, align 4, !tbaa !112
  %293 = add nsw i64 %284, %22
  %294 = icmp sgt i64 %293, %281
  br i1 %294, label %323, label %295

295:                                              ; preds = %283
  %296 = getelementptr inbounds float, float* %178, i64 %293
  %297 = bitcast float* %296 to i32*
  %298 = load i32, i32* %297, align 4, !tbaa !112
  %299 = or i32 %289, 1
  %300 = zext i32 %299 to i64
  %301 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %300
  %302 = bitcast float* %301 to i32*
  store i32 %298, i32* %302, align 4, !tbaa !112
  %303 = add nsw i64 %293, %22
  %304 = icmp sgt i64 %303, %281
  br i1 %304, label %323, label %305

305:                                              ; preds = %295
  %306 = getelementptr inbounds float, float* %178, i64 %303
  %307 = bitcast float* %306 to i32*
  %308 = load i32, i32* %307, align 4, !tbaa !112
  %309 = or i32 %289, 2
  %310 = zext i32 %309 to i64
  %311 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %310
  %312 = bitcast float* %311 to i32*
  store i32 %308, i32* %312, align 4, !tbaa !112
  %313 = add nsw i64 %303, %22
  %314 = icmp sgt i64 %313, %281
  br i1 %314, label %323, label %315

315:                                              ; preds = %305
  %316 = getelementptr inbounds float, float* %178, i64 %313
  %317 = bitcast float* %316 to i32*
  %318 = load i32, i32* %317, align 4, !tbaa !112
  %319 = or i32 %289, 3
  %320 = zext i32 %319 to i64
  %321 = getelementptr inbounds %union.v4, %union.v4* %18, i64 0, i32 0, i64 %320
  %322 = bitcast float* %321 to i32*
  store i32 %318, i32* %322, align 4, !tbaa !112
  br label %323

323:                                              ; preds = %315, %305, %295, %283
  %324 = add nuw nsw i64 %284, 1
  %325 = icmp eq i64 %324, %282
  br i1 %325, label %180, label %283
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @v4dwt_decode(%struct.v4dwt_local* noalias nocapture readonly) unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8, !tbaa !111
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8, !tbaa !110
  %8 = icmp sgt i32 %7, 0
  %9 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 4, !tbaa !109
  %11 = icmp sgt i32 %10, 1
  %12 = or i1 %8, %11
  br i1 %12, label %21, label %386

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 4, !tbaa !109
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8, !tbaa !110
  %20 = icmp sgt i32 %19, 1
  br i1 %20, label %21, label %386

21:                                               ; preds = %17, %13, %5
  %22 = phi i32 [ %15, %17 ], [ %15, %13 ], [ %10, %5 ]
  %23 = phi i32 [ 1, %17 ], [ 1, %13 ], [ 0, %5 ]
  %24 = phi i32 [ 0, %17 ], [ 0, %13 ], [ 1, %5 ]
  %25 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 0
  %26 = load %union.v4*, %union.v4** %25, align 8, !tbaa !105
  %27 = zext i32 %23 to i64
  %28 = getelementptr inbounds %union.v4, %union.v4* %26, i64 %27
  %29 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 2
  %30 = bitcast %union.v4* %28 to <4 x float>*
  %31 = ashr i32 %22, 2
  %32 = icmp sgt i32 %22, 3
  br i1 %32, label %33, label %50

33:                                               ; preds = %33, %21
  %34 = phi i32 [ %48, %33 ], [ 0, %21 ]
  %35 = phi <4 x float>* [ %47, %33 ], [ %30, %21 ]
  %36 = load <4 x float>, <4 x float>* %35, align 16, !tbaa !15
  %37 = fmul <4 x float> %36, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %37, <4 x float>* %35, align 16, !tbaa !15
  %38 = getelementptr inbounds <4 x float>, <4 x float>* %35, i64 2
  %39 = load <4 x float>, <4 x float>* %38, align 16, !tbaa !15
  %40 = fmul <4 x float> %39, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %40, <4 x float>* %38, align 16, !tbaa !15
  %41 = getelementptr inbounds <4 x float>, <4 x float>* %35, i64 4
  %42 = load <4 x float>, <4 x float>* %41, align 16, !tbaa !15
  %43 = fmul <4 x float> %42, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %43, <4 x float>* %41, align 16, !tbaa !15
  %44 = getelementptr inbounds <4 x float>, <4 x float>* %35, i64 6
  %45 = load <4 x float>, <4 x float>* %44, align 16, !tbaa !15
  %46 = fmul <4 x float> %45, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %46, <4 x float>* %44, align 16, !tbaa !15
  %47 = getelementptr inbounds <4 x float>, <4 x float>* %35, i64 8
  %48 = add nuw nsw i32 %34, 1
  %49 = icmp slt i32 %48, %31
  br i1 %49, label %33, label %50

50:                                               ; preds = %33, %21
  %51 = phi <4 x float>* [ %30, %21 ], [ %47, %33 ]
  %52 = and i32 %22, 3
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %59, label %54

54:                                               ; preds = %50
  %55 = load <4 x float>, <4 x float>* %51, align 16, !tbaa !15
  %56 = fmul <4 x float> %55, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %56, <4 x float>* %51, align 16, !tbaa !15
  %57 = getelementptr inbounds <4 x float>, <4 x float>* %51, i64 2
  %58 = icmp eq i32 %52, 1
  br i1 %58, label %59, label %395

59:                                               ; preds = %400, %395, %54, %50
  %60 = load %union.v4*, %union.v4** %25, align 8, !tbaa !105
  %61 = zext i32 %24 to i64
  %62 = getelementptr inbounds %union.v4, %union.v4* %60, i64 %61
  %63 = getelementptr inbounds %struct.v4dwt_local, %struct.v4dwt_local* %0, i64 0, i32 1
  %64 = load i32, i32* %63, align 8, !tbaa !110
  %65 = bitcast %union.v4* %62 to <4 x float>*
  %66 = ashr i32 %64, 2
  %67 = icmp sgt i32 %64, 3
  br i1 %67, label %68, label %85

68:                                               ; preds = %68, %59
  %69 = phi i32 [ %83, %68 ], [ 0, %59 ]
  %70 = phi <4 x float>* [ %82, %68 ], [ %65, %59 ]
  %71 = load <4 x float>, <4 x float>* %70, align 16, !tbaa !15
  %72 = fmul <4 x float> %71, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %72, <4 x float>* %70, align 16, !tbaa !15
  %73 = getelementptr inbounds <4 x float>, <4 x float>* %70, i64 2
  %74 = load <4 x float>, <4 x float>* %73, align 16, !tbaa !15
  %75 = fmul <4 x float> %74, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %75, <4 x float>* %73, align 16, !tbaa !15
  %76 = getelementptr inbounds <4 x float>, <4 x float>* %70, i64 4
  %77 = load <4 x float>, <4 x float>* %76, align 16, !tbaa !15
  %78 = fmul <4 x float> %77, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %78, <4 x float>* %76, align 16, !tbaa !15
  %79 = getelementptr inbounds <4 x float>, <4 x float>* %70, i64 6
  %80 = load <4 x float>, <4 x float>* %79, align 16, !tbaa !15
  %81 = fmul <4 x float> %80, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %81, <4 x float>* %79, align 16, !tbaa !15
  %82 = getelementptr inbounds <4 x float>, <4 x float>* %70, i64 8
  %83 = add nuw nsw i32 %69, 1
  %84 = icmp slt i32 %83, %66
  br i1 %84, label %68, label %85

85:                                               ; preds = %68, %59
  %86 = phi <4 x float>* [ %65, %59 ], [ %82, %68 ]
  %87 = and i32 %64, 3
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %94, label %89

89:                                               ; preds = %85
  %90 = load <4 x float>, <4 x float>* %86, align 16, !tbaa !15
  %91 = fmul <4 x float> %90, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %91, <4 x float>* %86, align 16, !tbaa !15
  %92 = getelementptr inbounds <4 x float>, <4 x float>* %86, i64 2
  %93 = icmp eq i32 %87, 1
  br i1 %93, label %94, label %387

94:                                               ; preds = %392, %387, %89, %85
  %95 = load %union.v4*, %union.v4** %25, align 8, !tbaa !105
  %96 = getelementptr inbounds %union.v4, %union.v4* %95, i64 %27
  %97 = getelementptr inbounds %union.v4, %union.v4* %96, i64 1
  %98 = load i32, i32* %29, align 4, !tbaa !109
  %99 = load i32, i32* %63, align 8, !tbaa !110
  %100 = sub nsw i32 %99, %23
  %101 = icmp slt i32 %98, %100
  %102 = select i1 %101, i32 %98, i32 %100
  %103 = bitcast %union.v4* %97 to <4 x float>*
  %104 = icmp sgt i32 %102, 0
  br i1 %104, label %105, label %151

105:                                              ; preds = %94
  %106 = getelementptr inbounds %union.v4, %union.v4* %95, i64 %61
  %107 = bitcast %union.v4* %106 to <4 x float>*
  %108 = load <4 x float>, <4 x float>* %107, align 16, !tbaa !15
  %109 = xor i32 %99, -1
  %110 = add i32 %23, %109
  %111 = xor i32 %98, -1
  %112 = icmp sgt i32 %110, %111
  %113 = select i1 %112, i32 %110, i32 %111
  %114 = and i32 %102, 1
  %115 = icmp eq i32 %113, -2
  br i1 %115, label %138, label %116

116:                                              ; preds = %105
  %117 = sub i32 %102, %114
  br label %118

118:                                              ; preds = %118, %116
  %119 = phi <4 x float> [ %108, %116 ], [ %131, %118 ]
  %120 = phi <4 x float>* [ %103, %116 ], [ %135, %118 ]
  %121 = phi i32 [ %117, %116 ], [ %136, %118 ]
  %122 = getelementptr inbounds <4 x float>, <4 x float>* %120, i64 -1
  %123 = load <4 x float>, <4 x float>* %122, align 16, !tbaa !15
  %124 = load <4 x float>, <4 x float>* %120, align 16, !tbaa !15
  %125 = fadd <4 x float> %119, %124
  %126 = fmul <4 x float> %125, <float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000>
  %127 = fadd <4 x float> %123, %126
  store <4 x float> %127, <4 x float>* %122, align 16, !tbaa !15
  %128 = getelementptr inbounds <4 x float>, <4 x float>* %120, i64 2
  %129 = getelementptr inbounds <4 x float>, <4 x float>* %120, i64 1
  %130 = load <4 x float>, <4 x float>* %129, align 16, !tbaa !15
  %131 = load <4 x float>, <4 x float>* %128, align 16, !tbaa !15
  %132 = fadd <4 x float> %124, %131
  %133 = fmul <4 x float> %132, <float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000>
  %134 = fadd <4 x float> %130, %133
  store <4 x float> %134, <4 x float>* %129, align 16, !tbaa !15
  %135 = getelementptr inbounds <4 x float>, <4 x float>* %120, i64 4
  %136 = add i32 %121, -2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %118

138:                                              ; preds = %118, %105
  %139 = phi <4 x float>* [ undef, %105 ], [ %135, %118 ]
  %140 = phi <4 x float> [ %108, %105 ], [ %131, %118 ]
  %141 = phi <4 x float>* [ %103, %105 ], [ %135, %118 ]
  %142 = icmp eq i32 %114, 0
  br i1 %142, label %151, label %143

143:                                              ; preds = %138
  %144 = getelementptr inbounds <4 x float>, <4 x float>* %141, i64 -1
  %145 = load <4 x float>, <4 x float>* %144, align 16, !tbaa !15
  %146 = load <4 x float>, <4 x float>* %141, align 16, !tbaa !15
  %147 = fadd <4 x float> %140, %146
  %148 = fmul <4 x float> %147, <float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000>
  %149 = fadd <4 x float> %145, %148
  store <4 x float> %149, <4 x float>* %144, align 16, !tbaa !15
  %150 = getelementptr inbounds <4 x float>, <4 x float>* %141, i64 2
  br label %151

151:                                              ; preds = %143, %138, %94
  %152 = phi <4 x float>* [ %103, %94 ], [ %139, %138 ], [ %150, %143 ]
  %153 = icmp sgt i32 %98, %100
  br i1 %153, label %154, label %167

154:                                              ; preds = %151
  %155 = getelementptr inbounds <4 x float>, <4 x float>* %152, i64 -2
  %156 = load <4 x float>, <4 x float>* %155, align 16, !tbaa !15
  %157 = fmul <4 x float> %156, <float 0xBFEC626AA0000000, float 0xBFEC626AA0000000, float 0xBFEC626AA0000000, float 0xBFEC626AA0000000>
  br label %158

158:                                              ; preds = %158, %154
  %159 = phi i32 [ %102, %154 ], [ %165, %158 ]
  %160 = phi <4 x float>* [ %152, %154 ], [ %164, %158 ]
  %161 = getelementptr inbounds <4 x float>, <4 x float>* %160, i64 -1
  %162 = load <4 x float>, <4 x float>* %161, align 16, !tbaa !15
  %163 = fadd <4 x float> %157, %162
  store <4 x float> %163, <4 x float>* %161, align 16, !tbaa !15
  %164 = getelementptr inbounds <4 x float>, <4 x float>* %160, i64 2
  %165 = add nsw i32 %159, 1
  %166 = icmp eq i32 %165, %98
  br i1 %166, label %167, label %158

167:                                              ; preds = %158, %151
  %168 = load %union.v4*, %union.v4** %25, align 8, !tbaa !105
  %169 = getelementptr inbounds %union.v4, %union.v4* %168, i64 %61
  %170 = getelementptr inbounds %union.v4, %union.v4* %169, i64 1
  %171 = load i32, i32* %63, align 8, !tbaa !110
  %172 = load i32, i32* %29, align 4, !tbaa !109
  %173 = sub nsw i32 %172, %24
  %174 = icmp slt i32 %171, %173
  %175 = select i1 %174, i32 %171, i32 %173
  %176 = bitcast %union.v4* %170 to <4 x float>*
  %177 = icmp sgt i32 %175, 0
  br i1 %177, label %178, label %224

178:                                              ; preds = %167
  %179 = getelementptr inbounds %union.v4, %union.v4* %168, i64 %27
  %180 = bitcast %union.v4* %179 to <4 x float>*
  %181 = load <4 x float>, <4 x float>* %180, align 16, !tbaa !15
  %182 = xor i32 %172, -1
  %183 = add i32 %24, %182
  %184 = xor i32 %171, -1
  %185 = icmp sgt i32 %183, %184
  %186 = select i1 %185, i32 %183, i32 %184
  %187 = and i32 %175, 1
  %188 = icmp eq i32 %186, -2
  br i1 %188, label %211, label %189

189:                                              ; preds = %178
  %190 = sub i32 %175, %187
  br label %191

191:                                              ; preds = %191, %189
  %192 = phi <4 x float> [ %181, %189 ], [ %204, %191 ]
  %193 = phi <4 x float>* [ %176, %189 ], [ %208, %191 ]
  %194 = phi i32 [ %190, %189 ], [ %209, %191 ]
  %195 = getelementptr inbounds <4 x float>, <4 x float>* %193, i64 -1
  %196 = load <4 x float>, <4 x float>* %195, align 16, !tbaa !15
  %197 = load <4 x float>, <4 x float>* %193, align 16, !tbaa !15
  %198 = fadd <4 x float> %192, %197
  %199 = fmul <4 x float> %198, <float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000>
  %200 = fadd <4 x float> %196, %199
  store <4 x float> %200, <4 x float>* %195, align 16, !tbaa !15
  %201 = getelementptr inbounds <4 x float>, <4 x float>* %193, i64 2
  %202 = getelementptr inbounds <4 x float>, <4 x float>* %193, i64 1
  %203 = load <4 x float>, <4 x float>* %202, align 16, !tbaa !15
  %204 = load <4 x float>, <4 x float>* %201, align 16, !tbaa !15
  %205 = fadd <4 x float> %197, %204
  %206 = fmul <4 x float> %205, <float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000>
  %207 = fadd <4 x float> %203, %206
  store <4 x float> %207, <4 x float>* %202, align 16, !tbaa !15
  %208 = getelementptr inbounds <4 x float>, <4 x float>* %193, i64 4
  %209 = add i32 %194, -2
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %191

211:                                              ; preds = %191, %178
  %212 = phi <4 x float>* [ undef, %178 ], [ %208, %191 ]
  %213 = phi <4 x float> [ %181, %178 ], [ %204, %191 ]
  %214 = phi <4 x float>* [ %176, %178 ], [ %208, %191 ]
  %215 = icmp eq i32 %187, 0
  br i1 %215, label %224, label %216

216:                                              ; preds = %211
  %217 = getelementptr inbounds <4 x float>, <4 x float>* %214, i64 -1
  %218 = load <4 x float>, <4 x float>* %217, align 16, !tbaa !15
  %219 = load <4 x float>, <4 x float>* %214, align 16, !tbaa !15
  %220 = fadd <4 x float> %213, %219
  %221 = fmul <4 x float> %220, <float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000>
  %222 = fadd <4 x float> %218, %221
  store <4 x float> %222, <4 x float>* %217, align 16, !tbaa !15
  %223 = getelementptr inbounds <4 x float>, <4 x float>* %214, i64 2
  br label %224

224:                                              ; preds = %216, %211, %167
  %225 = phi <4 x float>* [ %176, %167 ], [ %212, %211 ], [ %223, %216 ]
  %226 = icmp sgt i32 %171, %173
  br i1 %226, label %227, label %240

227:                                              ; preds = %224
  %228 = getelementptr inbounds <4 x float>, <4 x float>* %225, i64 -2
  %229 = load <4 x float>, <4 x float>* %228, align 16, !tbaa !15
  %230 = fmul <4 x float> %229, <float 0xBFFC40CEC0000000, float 0xBFFC40CEC0000000, float 0xBFFC40CEC0000000, float 0xBFFC40CEC0000000>
  br label %231

231:                                              ; preds = %231, %227
  %232 = phi i32 [ %175, %227 ], [ %238, %231 ]
  %233 = phi <4 x float>* [ %225, %227 ], [ %237, %231 ]
  %234 = getelementptr inbounds <4 x float>, <4 x float>* %233, i64 -1
  %235 = load <4 x float>, <4 x float>* %234, align 16, !tbaa !15
  %236 = fadd <4 x float> %230, %235
  store <4 x float> %236, <4 x float>* %234, align 16, !tbaa !15
  %237 = getelementptr inbounds <4 x float>, <4 x float>* %233, i64 2
  %238 = add nsw i32 %232, 1
  %239 = icmp eq i32 %238, %171
  br i1 %239, label %240, label %231

240:                                              ; preds = %231, %224
  %241 = load %union.v4*, %union.v4** %25, align 8, !tbaa !105
  %242 = getelementptr inbounds %union.v4, %union.v4* %241, i64 %27
  %243 = getelementptr inbounds %union.v4, %union.v4* %242, i64 1
  %244 = load i32, i32* %29, align 4, !tbaa !109
  %245 = load i32, i32* %63, align 8, !tbaa !110
  %246 = sub nsw i32 %245, %23
  %247 = icmp slt i32 %244, %246
  %248 = select i1 %247, i32 %244, i32 %246
  %249 = bitcast %union.v4* %243 to <4 x float>*
  %250 = icmp sgt i32 %248, 0
  br i1 %250, label %251, label %297

251:                                              ; preds = %240
  %252 = getelementptr inbounds %union.v4, %union.v4* %241, i64 %61
  %253 = bitcast %union.v4* %252 to <4 x float>*
  %254 = load <4 x float>, <4 x float>* %253, align 16, !tbaa !15
  %255 = xor i32 %245, -1
  %256 = add i32 %23, %255
  %257 = xor i32 %244, -1
  %258 = icmp sgt i32 %256, %257
  %259 = select i1 %258, i32 %256, i32 %257
  %260 = and i32 %248, 1
  %261 = icmp eq i32 %259, -2
  br i1 %261, label %284, label %262

262:                                              ; preds = %251
  %263 = sub i32 %248, %260
  br label %264

264:                                              ; preds = %264, %262
  %265 = phi <4 x float> [ %254, %262 ], [ %277, %264 ]
  %266 = phi <4 x float>* [ %249, %262 ], [ %281, %264 ]
  %267 = phi i32 [ %263, %262 ], [ %282, %264 ]
  %268 = getelementptr inbounds <4 x float>, <4 x float>* %266, i64 -1
  %269 = load <4 x float>, <4 x float>* %268, align 16, !tbaa !15
  %270 = load <4 x float>, <4 x float>* %266, align 16, !tbaa !15
  %271 = fadd <4 x float> %265, %270
  %272 = fmul <4 x float> %271, <float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000>
  %273 = fadd <4 x float> %269, %272
  store <4 x float> %273, <4 x float>* %268, align 16, !tbaa !15
  %274 = getelementptr inbounds <4 x float>, <4 x float>* %266, i64 2
  %275 = getelementptr inbounds <4 x float>, <4 x float>* %266, i64 1
  %276 = load <4 x float>, <4 x float>* %275, align 16, !tbaa !15
  %277 = load <4 x float>, <4 x float>* %274, align 16, !tbaa !15
  %278 = fadd <4 x float> %270, %277
  %279 = fmul <4 x float> %278, <float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000>
  %280 = fadd <4 x float> %276, %279
  store <4 x float> %280, <4 x float>* %275, align 16, !tbaa !15
  %281 = getelementptr inbounds <4 x float>, <4 x float>* %266, i64 4
  %282 = add i32 %267, -2
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %284, label %264

284:                                              ; preds = %264, %251
  %285 = phi <4 x float>* [ undef, %251 ], [ %281, %264 ]
  %286 = phi <4 x float> [ %254, %251 ], [ %277, %264 ]
  %287 = phi <4 x float>* [ %249, %251 ], [ %281, %264 ]
  %288 = icmp eq i32 %260, 0
  br i1 %288, label %297, label %289

289:                                              ; preds = %284
  %290 = getelementptr inbounds <4 x float>, <4 x float>* %287, i64 -1
  %291 = load <4 x float>, <4 x float>* %290, align 16, !tbaa !15
  %292 = load <4 x float>, <4 x float>* %287, align 16, !tbaa !15
  %293 = fadd <4 x float> %286, %292
  %294 = fmul <4 x float> %293, <float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000>
  %295 = fadd <4 x float> %291, %294
  store <4 x float> %295, <4 x float>* %290, align 16, !tbaa !15
  %296 = getelementptr inbounds <4 x float>, <4 x float>* %287, i64 2
  br label %297

297:                                              ; preds = %289, %284, %240
  %298 = phi <4 x float>* [ %249, %240 ], [ %285, %284 ], [ %296, %289 ]
  %299 = icmp sgt i32 %244, %246
  br i1 %299, label %300, label %313

300:                                              ; preds = %297
  %301 = getelementptr inbounds <4 x float>, <4 x float>* %298, i64 -2
  %302 = load <4 x float>, <4 x float>* %301, align 16, !tbaa !15
  %303 = fmul <4 x float> %302, <float 0x3FBB2035C0000000, float 0x3FBB2035C0000000, float 0x3FBB2035C0000000, float 0x3FBB2035C0000000>
  br label %304

304:                                              ; preds = %304, %300
  %305 = phi i32 [ %248, %300 ], [ %311, %304 ]
  %306 = phi <4 x float>* [ %298, %300 ], [ %310, %304 ]
  %307 = getelementptr inbounds <4 x float>, <4 x float>* %306, i64 -1
  %308 = load <4 x float>, <4 x float>* %307, align 16, !tbaa !15
  %309 = fadd <4 x float> %303, %308
  store <4 x float> %309, <4 x float>* %307, align 16, !tbaa !15
  %310 = getelementptr inbounds <4 x float>, <4 x float>* %306, i64 2
  %311 = add nsw i32 %305, 1
  %312 = icmp eq i32 %311, %244
  br i1 %312, label %313, label %304

313:                                              ; preds = %304, %297
  %314 = load %union.v4*, %union.v4** %25, align 8, !tbaa !105
  %315 = getelementptr inbounds %union.v4, %union.v4* %314, i64 %61
  %316 = getelementptr inbounds %union.v4, %union.v4* %315, i64 1
  %317 = load i32, i32* %63, align 8, !tbaa !110
  %318 = load i32, i32* %29, align 4, !tbaa !109
  %319 = sub nsw i32 %318, %24
  %320 = icmp slt i32 %317, %319
  %321 = select i1 %320, i32 %317, i32 %319
  %322 = bitcast %union.v4* %316 to <4 x float>*
  %323 = icmp sgt i32 %321, 0
  br i1 %323, label %324, label %370

324:                                              ; preds = %313
  %325 = getelementptr inbounds %union.v4, %union.v4* %314, i64 %27
  %326 = bitcast %union.v4* %325 to <4 x float>*
  %327 = load <4 x float>, <4 x float>* %326, align 16, !tbaa !15
  %328 = xor i32 %318, -1
  %329 = add i32 %24, %328
  %330 = xor i32 %317, -1
  %331 = icmp sgt i32 %329, %330
  %332 = select i1 %331, i32 %329, i32 %330
  %333 = and i32 %321, 1
  %334 = icmp eq i32 %332, -2
  br i1 %334, label %357, label %335

335:                                              ; preds = %324
  %336 = sub i32 %321, %333
  br label %337

337:                                              ; preds = %337, %335
  %338 = phi <4 x float> [ %327, %335 ], [ %350, %337 ]
  %339 = phi <4 x float>* [ %322, %335 ], [ %354, %337 ]
  %340 = phi i32 [ %336, %335 ], [ %355, %337 ]
  %341 = getelementptr inbounds <4 x float>, <4 x float>* %339, i64 -1
  %342 = load <4 x float>, <4 x float>* %341, align 16, !tbaa !15
  %343 = load <4 x float>, <4 x float>* %339, align 16, !tbaa !15
  %344 = fadd <4 x float> %338, %343
  %345 = fmul <4 x float> %344, <float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000>
  %346 = fadd <4 x float> %342, %345
  store <4 x float> %346, <4 x float>* %341, align 16, !tbaa !15
  %347 = getelementptr inbounds <4 x float>, <4 x float>* %339, i64 2
  %348 = getelementptr inbounds <4 x float>, <4 x float>* %339, i64 1
  %349 = load <4 x float>, <4 x float>* %348, align 16, !tbaa !15
  %350 = load <4 x float>, <4 x float>* %347, align 16, !tbaa !15
  %351 = fadd <4 x float> %343, %350
  %352 = fmul <4 x float> %351, <float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000>
  %353 = fadd <4 x float> %349, %352
  store <4 x float> %353, <4 x float>* %348, align 16, !tbaa !15
  %354 = getelementptr inbounds <4 x float>, <4 x float>* %339, i64 4
  %355 = add i32 %340, -2
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %357, label %337

357:                                              ; preds = %337, %324
  %358 = phi <4 x float>* [ undef, %324 ], [ %354, %337 ]
  %359 = phi <4 x float> [ %327, %324 ], [ %350, %337 ]
  %360 = phi <4 x float>* [ %322, %324 ], [ %354, %337 ]
  %361 = icmp eq i32 %333, 0
  br i1 %361, label %370, label %362

362:                                              ; preds = %357
  %363 = getelementptr inbounds <4 x float>, <4 x float>* %360, i64 -1
  %364 = load <4 x float>, <4 x float>* %363, align 16, !tbaa !15
  %365 = load <4 x float>, <4 x float>* %360, align 16, !tbaa !15
  %366 = fadd <4 x float> %359, %365
  %367 = fmul <4 x float> %366, <float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000>
  %368 = fadd <4 x float> %364, %367
  store <4 x float> %368, <4 x float>* %363, align 16, !tbaa !15
  %369 = getelementptr inbounds <4 x float>, <4 x float>* %360, i64 2
  br label %370

370:                                              ; preds = %362, %357, %313
  %371 = phi <4 x float>* [ %322, %313 ], [ %358, %357 ], [ %369, %362 ]
  %372 = icmp sgt i32 %317, %319
  br i1 %372, label %373, label %386

373:                                              ; preds = %370
  %374 = getelementptr inbounds <4 x float>, <4 x float>* %371, i64 -2
  %375 = load <4 x float>, <4 x float>* %374, align 16, !tbaa !15
  %376 = fmul <4 x float> %375, <float 0x400960CE60000000, float 0x400960CE60000000, float 0x400960CE60000000, float 0x400960CE60000000>
  br label %377

377:                                              ; preds = %377, %373
  %378 = phi i32 [ %321, %373 ], [ %384, %377 ]
  %379 = phi <4 x float>* [ %371, %373 ], [ %383, %377 ]
  %380 = getelementptr inbounds <4 x float>, <4 x float>* %379, i64 -1
  %381 = load <4 x float>, <4 x float>* %380, align 16, !tbaa !15
  %382 = fadd <4 x float> %376, %381
  store <4 x float> %382, <4 x float>* %380, align 16, !tbaa !15
  %383 = getelementptr inbounds <4 x float>, <4 x float>* %379, i64 2
  %384 = add nsw i32 %378, 1
  %385 = icmp eq i32 %384, %317
  br i1 %385, label %386, label %377

386:                                              ; preds = %377, %370, %17, %5
  ret void

387:                                              ; preds = %89
  %388 = load <4 x float>, <4 x float>* %92, align 16, !tbaa !15
  %389 = fmul <4 x float> %388, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %389, <4 x float>* %92, align 16, !tbaa !15
  %390 = getelementptr inbounds <4 x float>, <4 x float>* %86, i64 4
  %391 = icmp eq i32 %87, 2
  br i1 %391, label %94, label %392

392:                                              ; preds = %387
  %393 = load <4 x float>, <4 x float>* %390, align 16, !tbaa !15
  %394 = fmul <4 x float> %393, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %394, <4 x float>* %390, align 16, !tbaa !15
  br label %94

395:                                              ; preds = %54
  %396 = load <4 x float>, <4 x float>* %57, align 16, !tbaa !15
  %397 = fmul <4 x float> %396, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %397, <4 x float>* %57, align 16, !tbaa !15
  %398 = getelementptr inbounds <4 x float>, <4 x float>* %51, i64 4
  %399 = icmp eq i32 %52, 2
  br i1 %399, label %59, label %400

400:                                              ; preds = %395
  %401 = load <4 x float>, <4 x float>* %398, align 16, !tbaa !15
  %402 = fmul <4 x float> %401, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %402, <4 x float>* %398, align 16, !tbaa !15
  br label %59
}

; Function Attrs: norecurse nounwind uwtable
define %struct.opj_event_mgr* @opj_set_event_mgr(%struct.opj_common_struct*, %struct.opj_event_mgr*, i8*) #4 {
  %4 = icmp eq %struct.opj_common_struct* %0, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 0
  %7 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %6, align 8, !tbaa !123
  store %struct.opj_event_mgr* %1, %struct.opj_event_mgr** %6, align 8, !tbaa !123
  %8 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 1
  store i8* %2, i8** %8, align 8, !tbaa !124
  br label %9

9:                                                ; preds = %5, %3
  %10 = phi %struct.opj_event_mgr* [ %7, %5 ], [ null, %3 ]
  ret %struct.opj_event_mgr* %10
}

; Function Attrs: nounwind uwtable
define i32 @opj_event_msg(%struct.opj_common_struct* nocapture readonly, i32, i8* readonly, ...) #0 {
  %4 = alloca [1 x %struct.__va_list_tag], align 16
  %5 = alloca [512 x i8], align 16
  %6 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 0
  %7 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %6, align 8, !tbaa !123
  %8 = icmp eq %struct.opj_event_mgr* %7, null
  br i1 %8, label %29, label %9

9:                                                ; preds = %3
  switch i32 %1, label %29 [
    i32 1, label %10
    i32 2, label %12
    i32 4, label %14
  ]

10:                                               ; preds = %9
  %11 = getelementptr inbounds %struct.opj_event_mgr, %struct.opj_event_mgr* %7, i64 0, i32 0
  br label %16

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.opj_event_mgr, %struct.opj_event_mgr* %7, i64 0, i32 1
  br label %16

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.opj_event_mgr, %struct.opj_event_mgr* %7, i64 0, i32 2
  br label %16

16:                                               ; preds = %14, %12, %10
  %17 = phi void (i8*, i8*)** [ %15, %14 ], [ %13, %12 ], [ %11, %10 ]
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %17, align 8, !tbaa !24
  %19 = icmp eq void (i8*, i8*)* %18, null
  br i1 %19, label %29, label %20

20:                                               ; preds = %16
  %21 = icmp eq i8* %2, null
  br i1 %21, label %29, label %22

22:                                               ; preds = %20
  %23 = bitcast [1 x %struct.__va_list_tag]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #9
  %24 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %24) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 0, i64 512, i1 false)
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %4, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %23)
  %26 = call i32 @vsprintf(i8* nonnull %24, i8* nonnull %2, %struct.__va_list_tag* nonnull %25) #9
  call void @llvm.va_end(i8* nonnull %23)
  %27 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 1
  %28 = load i8*, i8** %27, align 8, !tbaa !124
  call void %18(i8* nonnull %24, i8* %28) #9
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %24) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #9
  br label %29

29:                                               ; preds = %22, %20, %16, %9, %3
  %30 = phi i32 [ 0, %16 ], [ 0, %3 ], [ 1, %20 ], [ 1, %22 ], [ 0, %9 ]
  ret i32 %30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #9

; Function Attrs: nounwind
declare i32 @vsprintf(i8* nocapture, i8* nocapture readonly, %struct.__va_list_tag*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #9

; Function Attrs: nounwind uwtable
define noalias %struct.opj_image* @opj_image_create0() #0 {
  %1 = tail call noalias i8* @calloc(i64 1, i64 48) #9
  %2 = bitcast i8* %1 to %struct.opj_image*
  ret %struct.opj_image* %2
}

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define noalias %struct.opj_image* @opj_image_create(i32, %struct.opj_image_comptparm* nocapture readonly, i32) #0 {
  %4 = tail call noalias i8* @calloc(i64 1, i64 48) #9
  %5 = bitcast i8* %4 to %struct.opj_image*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %64, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds i8, i8* %4, i64 20
  %9 = bitcast i8* %8 to i32*
  store i32 %2, i32* %9, align 4, !tbaa !125
  %10 = getelementptr inbounds i8, i8* %4, i64 16
  %11 = bitcast i8* %10 to i32*
  store i32 %0, i32* %11, align 8, !tbaa !127
  %12 = sext i32 %0 to i64
  %13 = mul nsw i64 %12, 56
  %14 = tail call noalias i8* @malloc(i64 %13) #9
  %15 = getelementptr inbounds i8, i8* %4, i64 24
  %16 = bitcast i8* %15 to i8**
  store i8* %14, i8** %16, align 8, !tbaa !128
  %17 = icmp eq i8* %14, null
  %18 = bitcast i8* %14 to %struct.opj_image_comp*
  br i1 %17, label %21, label %19

19:                                               ; preds = %7
  %20 = icmp sgt i32 %0, 0
  br i1 %20, label %26, label %64

21:                                               ; preds = %7
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !24
  %23 = tail call i64 @fwrite(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0), i64 37, i64 1, %struct._IO_FILE* %22) #11
  tail call void @free(i8* nonnull %4) #9
  br label %64

24:                                               ; preds = %26
  %25 = icmp slt i64 %49, %12
  br i1 %25, label %26, label %64

26:                                               ; preds = %24, %19
  %27 = phi i64 [ %49, %24 ], [ 0, %19 ]
  %28 = getelementptr inbounds %struct.opj_image_comptparm, %struct.opj_image_comptparm* %1, i64 %27, i32 0
  %29 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %18, i64 %27, i32 0
  %30 = bitcast i32* %28 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 4, !tbaa !43
  %32 = bitcast i32* %29 to <4 x i32>*
  store <4 x i32> %31, <4 x i32>* %32, align 8, !tbaa !43
  %33 = getelementptr inbounds %struct.opj_image_comptparm, %struct.opj_image_comptparm* %1, i64 %27, i32 4
  %34 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %18, i64 %27, i32 4
  %35 = bitcast i32* %33 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4, !tbaa !43
  %37 = bitcast i32* %34 to <4 x i32>*
  store <4 x i32> %36, <4 x i32>* %37, align 8, !tbaa !43
  %38 = getelementptr inbounds %struct.opj_image_comptparm, %struct.opj_image_comptparm* %1, i64 %27, i32 8
  %39 = load i32, i32* %38, align 4, !tbaa !129
  %40 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %18, i64 %27, i32 8
  store i32 %39, i32* %40, align 8, !tbaa !131
  %41 = extractelement <4 x i32> %31, i32 2
  %42 = extractelement <4 x i32> %31, i32 3
  %43 = mul nsw i32 %42, %41
  %44 = sext i32 %43 to i64
  %45 = tail call noalias i8* @calloc(i64 %44, i64 4) #9
  %46 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %18, i64 %27, i32 11
  %47 = bitcast i32** %46 to i8**
  store i8* %45, i8** %47, align 8, !tbaa !133
  %48 = icmp eq i8* %45, null
  %49 = add nuw nsw i64 %27, 1
  br i1 %48, label %50, label %24

50:                                               ; preds = %26
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !24
  %52 = tail call i64 @fwrite(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0), i64 37, i64 1, %struct._IO_FILE* %51) #11
  br label %53

53:                                               ; preds = %60, %50
  %54 = phi i64 [ %61, %60 ], [ 0, %50 ]
  %55 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %18, i64 %54, i32 11
  %56 = load i32*, i32** %55, align 8, !tbaa !133
  %57 = icmp eq i32* %56, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %53
  %59 = bitcast i32* %56 to i8*
  tail call void @free(i8* %59) #9
  br label %60

60:                                               ; preds = %58, %53
  %61 = add nuw nsw i64 %54, 1
  %62 = icmp eq i64 %61, %12
  br i1 %62, label %63, label %53

63:                                               ; preds = %60
  tail call void @free(i8* nonnull %14) #9
  tail call void @free(i8* nonnull %4) #9
  br label %64

64:                                               ; preds = %63, %24, %21, %19, %3
  %65 = phi %struct.opj_image* [ null, %21 ], [ null, %63 ], [ %5, %3 ], [ %5, %19 ], [ %5, %24 ]
  ret %struct.opj_image* %65
}

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #9

; Function Attrs: nounwind uwtable
define void @opj_image_destroy(%struct.opj_image*) #0 {
  %2 = icmp eq %struct.opj_image* %0, null
  br i1 %2, label %36, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %5 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8, !tbaa !128
  %6 = icmp eq %struct.opj_image_comp* %5, null
  br i1 %6, label %34, label %7

7:                                                ; preds = %3
  %8 = bitcast %struct.opj_image_comp* %5 to i8*
  %9 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %10 = load i32, i32* %9, align 8, !tbaa !127
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %32

12:                                               ; preds = %27, %7
  %13 = phi i32 [ %23, %27 ], [ %10, %7 ]
  %14 = phi %struct.opj_image_comp* [ %28, %27 ], [ %5, %7 ]
  %15 = phi i64 [ %24, %27 ], [ 0, %7 ]
  %16 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %14, i64 %15, i32 11
  %17 = load i32*, i32** %16, align 8, !tbaa !133
  %18 = icmp eq i32* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %12
  %20 = bitcast i32* %17 to i8*
  tail call void @free(i8* %20) #9
  %21 = load i32, i32* %9, align 8, !tbaa !127
  br label %22

22:                                               ; preds = %19, %12
  %23 = phi i32 [ %13, %12 ], [ %21, %19 ]
  %24 = add nuw nsw i64 %15, 1
  %25 = sext i32 %23 to i64
  %26 = icmp slt i64 %24, %25
  br i1 %26, label %27, label %29

27:                                               ; preds = %22
  %28 = load %struct.opj_image_comp*, %struct.opj_image_comp** %4, align 8, !tbaa !128
  br label %12

29:                                               ; preds = %22
  %30 = bitcast %struct.opj_image_comp** %4 to i8**
  %31 = load i8*, i8** %30, align 8, !tbaa !128
  br label %32

32:                                               ; preds = %29, %7
  %33 = phi i8* [ %31, %29 ], [ %8, %7 ]
  tail call void @free(i8* %33) #9
  br label %34

34:                                               ; preds = %32, %3
  %35 = bitcast %struct.opj_image* %0 to i8*
  tail call void @free(i8* %35) #9
  br label %36

36:                                               ; preds = %34, %1
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define nonnull i8* @j2k_convert_progression_order(i32) #2 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi %struct.j2k_prog_order* [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 0), %1 ], [ %9, %2 ]
  %4 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 4, !tbaa !134
  %6 = icmp eq i32 %5, -1
  %7 = icmp eq i32 %5, %0
  %8 = or i1 %6, %7
  %9 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %3, i64 1
  br i1 %8, label %10, label %2

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %3, i64 0, i32 1, i64 0
  ret i8* %11
}

; Function Attrs: nounwind uwtable
define i32 @j2k_calculate_tp(%struct.opj_cp*, i32, %struct.opj_image*, %struct.opj_j2k* nocapture) #0 {
  %5 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 18
  %6 = load i32, i32* %5, align 8, !tbaa !136
  %7 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 19
  %8 = load i32, i32* %7, align 4, !tbaa !137
  %9 = mul nsw i32 %8, %6
  %10 = sext i32 %9 to i64
  %11 = shl nsw i64 %10, 2
  %12 = tail call noalias i8* @malloc(i64 %11) #9
  %13 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %3, i64 0, i32 5
  %14 = bitcast i32** %13 to i8**
  store i8* %12, i8** %14, align 8, !tbaa !138
  %15 = icmp sgt i32 %9, 0
  br i1 %15, label %16, label %69

16:                                               ; preds = %4
  %17 = bitcast i8* %12 to i32*
  %18 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 28
  %19 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %3, i64 0, i32 17
  br label %20

20:                                               ; preds = %62, %16
  %21 = phi i32* [ %17, %16 ], [ %46, %62 ]
  %22 = phi i64 [ 0, %16 ], [ %63, %62 ]
  %23 = phi i32 [ 0, %16 ], [ %47, %62 ]
  %24 = load %struct.opj_tcp*, %struct.opj_tcp** %18, align 8, !tbaa !139
  %25 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 %22, i32 6
  %26 = load i32, i32* %25, align 4, !tbaa !140
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %45, label %28

28:                                               ; preds = %20
  %29 = trunc i64 %22 to i32
  br label %30

30:                                               ; preds = %36, %28
  %31 = phi i32 [ %40, %36 ], [ 0, %28 ]
  %32 = phi i32 [ %39, %36 ], [ 0, %28 ]
  %33 = phi i32 [ %38, %36 ], [ %23, %28 ]
  %34 = tail call %struct.opj_pi_iterator* @pi_initialise_encode(%struct.opj_image* %2, %struct.opj_cp* %0, i32 %29, i32 1) #9
  %35 = icmp eq %struct.opj_pi_iterator* %34, null
  br i1 %35, label %69, label %36

36:                                               ; preds = %30
  %37 = tail call fastcc i32 @j2k_get_num_tp(%struct.opj_cp* %0, i32 %31, i32 %29)
  %38 = add nsw i32 %37, %33
  %39 = add nsw i32 %37, %32
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %34, %struct.opj_cp* %0, i32 %29) #9
  %40 = add nuw nsw i32 %31, 1
  %41 = load i32, i32* %25, align 4, !tbaa !140
  %42 = icmp slt i32 %31, %41
  br i1 %42, label %30, label %43

43:                                               ; preds = %36
  %44 = load i32*, i32** %13, align 8, !tbaa !138
  br label %45

45:                                               ; preds = %43, %20
  %46 = phi i32* [ %21, %20 ], [ %44, %43 ]
  %47 = phi i32 [ %23, %20 ], [ %38, %43 ]
  %48 = phi i32 [ 0, %20 ], [ %39, %43 ]
  %49 = getelementptr inbounds i32, i32* %46, i64 %22
  store i32 %48, i32* %49, align 4, !tbaa !43
  %50 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %19, align 8, !tbaa !142
  %51 = icmp eq %struct.opj_codestream_info* %50, null
  br i1 %51, label %62, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %50, i64 0, i32 21
  %54 = load %struct.opj_tile_info*, %struct.opj_tile_info** %53, align 8, !tbaa !143
  %55 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %54, i64 %22, i32 15
  store i32 %48, i32* %55, align 4, !tbaa !145
  %56 = sext i32 %48 to i64
  %57 = mul nsw i64 %56, 20
  %58 = tail call noalias i8* @malloc(i64 %57) #9
  %59 = load %struct.opj_tile_info*, %struct.opj_tile_info** %53, align 8, !tbaa !143
  %60 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %59, i64 %22, i32 16
  %61 = bitcast %struct.opj_tp_info** %60 to i8**
  store i8* %58, i8** %61, align 8, !tbaa !147
  br label %62

62:                                               ; preds = %52, %45
  %63 = add nuw nsw i64 %22, 1
  %64 = load i32, i32* %5, align 8, !tbaa !136
  %65 = load i32, i32* %7, align 4, !tbaa !137
  %66 = mul nsw i32 %65, %64
  %67 = sext i32 %66 to i64
  %68 = icmp slt i64 %63, %67
  br i1 %68, label %20, label %69

69:                                               ; preds = %62, %30, %4
  %70 = phi i32 [ 0, %4 ], [ -1, %30 ], [ %47, %62 ]
  ret i32 %70
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc i32 @j2k_get_num_tp(%struct.opj_cp* nocapture, i32, i32) unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 28
  %5 = load %struct.opj_tcp*, %struct.opj_tcp** %4, align 8, !tbaa !139
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 2
  %8 = load i32, i32* %7, align 8, !tbaa !148
  br label %9

9:                                                ; preds = %9, %3
  %10 = phi %struct.j2k_prog_order* [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 0), %3 ], [ %16, %9 ]
  %11 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 4, !tbaa !134
  %13 = icmp eq i32 %12, -1
  %14 = icmp eq i32 %12, %8
  %15 = or i1 %13, %14
  %16 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %10, i64 1
  br i1 %15, label %17, label %9

17:                                               ; preds = %9
  %18 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 4
  %19 = load i8, i8* %18, align 8, !tbaa !149
  %20 = icmp eq i8 %19, 1
  br i1 %20, label %21, label %48

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 5
  %23 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 6
  %24 = sext i32 %1 to i64
  %25 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 8, i64 %24, i32 20
  %26 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 8, i64 %24, i32 23
  %27 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 8, i64 %24, i32 21
  %28 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 8, i64 %24, i32 22
  %29 = load i8, i8* %22, align 1, !tbaa !150
  %30 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %10, i64 0, i32 1, i64 0
  %31 = load i8, i8* %30, align 1, !tbaa !15
  %32 = icmp eq i8 %29, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %21
  store i32 0, i32* %23, align 4, !tbaa !151
  %34 = load i8, i8* %30, align 1, !tbaa !15
  br label %35

35:                                               ; preds = %33, %21
  %36 = phi i8 [ %34, %33 ], [ %31, %21 ]
  %37 = phi i32 [ 1, %33 ], [ 0, %21 ]
  %38 = sext i8 %36 to i32
  switch i32 %38, label %45 [
    i32 67, label %42
    i32 82, label %39
    i32 80, label %40
    i32 76, label %41
  ]

39:                                               ; preds = %35
  br label %42

40:                                               ; preds = %35
  br label %42

41:                                               ; preds = %35
  br label %42

42:                                               ; preds = %41, %40, %39, %35
  %43 = phi i32* [ %25, %41 ], [ %26, %40 ], [ %27, %39 ], [ %28, %35 ]
  %44 = load i32, i32* %43, align 4, !tbaa !43
  br label %45

45:                                               ; preds = %42, %35
  %46 = phi i32 [ 1, %35 ], [ %44, %42 ]
  %47 = icmp eq i32 %37, 1
  br i1 %47, label %48, label %50

48:                                               ; preds = %111, %108, %105, %102, %99, %89, %68, %45, %17
  %49 = phi i32 [ 1, %17 ], [ %90, %99 ], [ %104, %102 ], [ %107, %105 ], [ %110, %108 ], [ %113, %111 ], [ %90, %89 ], [ %69, %68 ], [ %46, %45 ]
  ret i32 %49

50:                                               ; preds = %45
  %51 = load i8, i8* %22, align 1, !tbaa !150
  %52 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %10, i64 0, i32 1, i64 1
  %53 = load i8, i8* %52, align 1, !tbaa !15
  %54 = icmp eq i8 %51, %53
  br i1 %54, label %55, label %57

55:                                               ; preds = %50
  store i32 1, i32* %23, align 4, !tbaa !151
  %56 = load i8, i8* %52, align 1, !tbaa !15
  br label %57

57:                                               ; preds = %55, %50
  %58 = phi i8 [ %56, %55 ], [ %53, %50 ]
  %59 = phi i32 [ 1, %55 ], [ 0, %50 ]
  %60 = sext i8 %58 to i32
  switch i32 %60, label %68 [
    i32 67, label %63
    i32 82, label %62
    i32 80, label %61
    i32 76, label %64
  ]

61:                                               ; preds = %57
  br label %64

62:                                               ; preds = %57
  br label %64

63:                                               ; preds = %57
  br label %64

64:                                               ; preds = %63, %62, %61, %57
  %65 = phi i32* [ %28, %63 ], [ %27, %62 ], [ %26, %61 ], [ %25, %57 ]
  %66 = load i32, i32* %65, align 4, !tbaa !43
  %67 = mul nsw i32 %66, %46
  br label %68

68:                                               ; preds = %64, %57
  %69 = phi i32 [ %46, %57 ], [ %67, %64 ]
  %70 = icmp eq i32 %59, 1
  br i1 %70, label %48, label %71

71:                                               ; preds = %68
  %72 = load i8, i8* %22, align 1, !tbaa !150
  %73 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %10, i64 0, i32 1, i64 2
  %74 = load i8, i8* %73, align 1, !tbaa !15
  %75 = icmp eq i8 %72, %74
  br i1 %75, label %76, label %78

76:                                               ; preds = %71
  store i32 2, i32* %23, align 4, !tbaa !151
  %77 = load i8, i8* %73, align 1, !tbaa !15
  br label %78

78:                                               ; preds = %76, %71
  %79 = phi i8 [ %77, %76 ], [ %74, %71 ]
  %80 = phi i32 [ 1, %76 ], [ 0, %71 ]
  %81 = sext i8 %79 to i32
  switch i32 %81, label %89 [
    i32 67, label %84
    i32 82, label %83
    i32 80, label %82
    i32 76, label %85
  ]

82:                                               ; preds = %78
  br label %85

83:                                               ; preds = %78
  br label %85

84:                                               ; preds = %78
  br label %85

85:                                               ; preds = %84, %83, %82, %78
  %86 = phi i32* [ %28, %84 ], [ %27, %83 ], [ %26, %82 ], [ %25, %78 ]
  %87 = load i32, i32* %86, align 4, !tbaa !43
  %88 = mul nsw i32 %87, %69
  br label %89

89:                                               ; preds = %85, %78
  %90 = phi i32 [ %69, %78 ], [ %88, %85 ]
  %91 = icmp eq i32 %80, 1
  br i1 %91, label %48, label %92

92:                                               ; preds = %89
  %93 = load i8, i8* %22, align 1, !tbaa !150
  %94 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %10, i64 0, i32 1, i64 3
  %95 = load i8, i8* %94, align 1, !tbaa !15
  %96 = icmp eq i8 %93, %95
  br i1 %96, label %97, label %99

97:                                               ; preds = %92
  store i32 3, i32* %23, align 4, !tbaa !151
  %98 = load i8, i8* %94, align 1, !tbaa !15
  br label %99

99:                                               ; preds = %97, %92
  %100 = phi i8 [ %98, %97 ], [ %95, %92 ]
  %101 = sext i8 %100 to i32
  switch i32 %101, label %48 [
    i32 67, label %111
    i32 82, label %108
    i32 80, label %105
    i32 76, label %102
  ]

102:                                              ; preds = %99
  %103 = load i32, i32* %25, align 4, !tbaa !152
  %104 = mul nsw i32 %103, %90
  br label %48

105:                                              ; preds = %99
  %106 = load i32, i32* %26, align 4, !tbaa !154
  %107 = mul nsw i32 %106, %90
  br label %48

108:                                              ; preds = %99
  %109 = load i32, i32* %27, align 4, !tbaa !155
  %110 = mul nsw i32 %109, %90
  br label %48

111:                                              ; preds = %99
  %112 = load i32, i32* %28, align 4, !tbaa !156
  %113 = mul nsw i32 %112, %90
  br label %48
}

; Function Attrs: nounwind uwtable
define noalias %struct.opj_j2k* @j2k_create_decompress(%struct.opj_common_struct*) #0 {
  %2 = tail call noalias i8* @calloc(i64 1, i64 120) #9
  %3 = bitcast i8* %2 to %struct.opj_j2k*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = tail call noalias i8* @calloc(i64 1, i64 5608) #9
  %7 = getelementptr inbounds i8, i8* %2, i64 80
  %8 = bitcast i8* %7 to i8**
  store i8* %6, i8** %8, align 8, !tbaa !157
  %9 = icmp eq i8* %6, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %5
  tail call void @free(i8* nonnull %2) #9
  br label %13

11:                                               ; preds = %5
  %12 = bitcast i8* %2 to %struct.opj_common_struct**
  store %struct.opj_common_struct* %0, %struct.opj_common_struct** %12, align 8, !tbaa !158
  br label %13

13:                                               ; preds = %11, %10, %1
  %14 = phi %struct.opj_j2k* [ %3, %11 ], [ null, %10 ], [ null, %1 ]
  ret %struct.opj_j2k* %14
}

; Function Attrs: nounwind uwtable
define void @j2k_destroy_decompress(%struct.opj_j2k* nocapture) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 13
  %3 = load i32*, i32** %2, align 8, !tbaa !159
  %4 = icmp eq i32* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i32* %3 to i8*
  tail call void @free(i8* %6) #9
  br label %7

7:                                                ; preds = %5, %1
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 12
  %9 = load i8**, i8*** %8, align 8, !tbaa !160
  %10 = icmp eq i8** %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = bitcast i8** %9 to i8*
  tail call void @free(i8* %12) #9
  br label %13

13:                                               ; preds = %11, %7
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 14
  %15 = load %struct.opj_tcp*, %struct.opj_tcp** %14, align 8, !tbaa !157
  %16 = icmp eq %struct.opj_tcp* %15, null
  br i1 %16, label %36, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %15, i64 0, i32 10
  %19 = load i8*, i8** %18, align 8, !tbaa !161
  %20 = icmp eq i8* %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  tail call void @free(i8* nonnull %19) #9
  %22 = load %struct.opj_tcp*, %struct.opj_tcp** %14, align 8, !tbaa !157
  br label %23

23:                                               ; preds = %21, %17
  %24 = phi %struct.opj_tcp* [ %15, %17 ], [ %22, %21 ]
  %25 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 0, i32 15
  %26 = load %struct.opj_tccp*, %struct.opj_tccp** %25, align 8, !tbaa !162
  %27 = icmp eq %struct.opj_tccp* %26, null
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  %29 = bitcast %struct.opj_tcp* %24 to i8*
  br label %34

30:                                               ; preds = %23
  %31 = bitcast %struct.opj_tccp* %26 to i8*
  tail call void @free(i8* %31) #9
  %32 = bitcast %struct.opj_tcp** %14 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !157
  br label %34

34:                                               ; preds = %30, %28
  %35 = phi i8* [ %29, %28 ], [ %33, %30 ]
  tail call void @free(i8* %35) #9
  br label %36

36:                                               ; preds = %34, %13
  %37 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %38 = load %struct.opj_cp*, %struct.opj_cp** %37, align 8, !tbaa !25
  %39 = icmp eq %struct.opj_cp* %38, null
  br i1 %39, label %96, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %38, i64 0, i32 28
  %42 = load %struct.opj_tcp*, %struct.opj_tcp** %41, align 8, !tbaa !139
  %43 = icmp eq %struct.opj_tcp* %42, null
  br i1 %43, label %78, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %38, i64 0, i32 18
  %46 = load i32, i32* %45, align 8, !tbaa !136
  %47 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %38, i64 0, i32 19
  %48 = load i32, i32* %47, align 4, !tbaa !137
  %49 = mul nsw i32 %48, %46
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %75

51:                                               ; preds = %67, %44
  %52 = phi %struct.opj_tcp* [ %68, %67 ], [ %42, %44 ]
  %53 = phi i64 [ %69, %67 ], [ 0, %44 ]
  %54 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %52, i64 %53, i32 10
  %55 = load i8*, i8** %54, align 8, !tbaa !161
  %56 = icmp eq i8* %55, null
  br i1 %56, label %59, label %57

57:                                               ; preds = %51
  tail call void @free(i8* nonnull %55) #9
  %58 = load %struct.opj_tcp*, %struct.opj_tcp** %41, align 8, !tbaa !139
  br label %59

59:                                               ; preds = %57, %51
  %60 = phi %struct.opj_tcp* [ %52, %51 ], [ %58, %57 ]
  %61 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %60, i64 %53, i32 15
  %62 = load %struct.opj_tccp*, %struct.opj_tccp** %61, align 8, !tbaa !162
  %63 = icmp eq %struct.opj_tccp* %62, null
  br i1 %63, label %67, label %64

64:                                               ; preds = %59
  %65 = bitcast %struct.opj_tccp* %62 to i8*
  tail call void @free(i8* %65) #9
  %66 = load %struct.opj_tcp*, %struct.opj_tcp** %41, align 8, !tbaa !139
  br label %67

67:                                               ; preds = %64, %59
  %68 = phi %struct.opj_tcp* [ %60, %59 ], [ %66, %64 ]
  %69 = add nuw nsw i64 %53, 1
  %70 = load i32, i32* %45, align 8, !tbaa !136
  %71 = load i32, i32* %47, align 4, !tbaa !137
  %72 = mul nsw i32 %71, %70
  %73 = sext i32 %72 to i64
  %74 = icmp slt i64 %69, %73
  br i1 %74, label %51, label %75

75:                                               ; preds = %67, %44
  %76 = phi %struct.opj_tcp* [ %42, %44 ], [ %68, %67 ]
  %77 = bitcast %struct.opj_tcp* %76 to i8*
  tail call void @free(i8* %77) #9
  br label %78

78:                                               ; preds = %75, %40
  %79 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %38, i64 0, i32 23
  %80 = load i8*, i8** %79, align 8, !tbaa !163
  %81 = icmp eq i8* %80, null
  br i1 %81, label %83, label %82

82:                                               ; preds = %78
  tail call void @free(i8* nonnull %80) #9
  br label %83

83:                                               ; preds = %82, %78
  %84 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %38, i64 0, i32 20
  %85 = load i32*, i32** %84, align 8, !tbaa !164
  %86 = icmp eq i32* %85, null
  br i1 %86, label %89, label %87

87:                                               ; preds = %83
  %88 = bitcast i32* %85 to i8*
  tail call void @free(i8* %88) #9
  br label %89

89:                                               ; preds = %87, %83
  %90 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %38, i64 0, i32 17
  %91 = load i8*, i8** %90, align 8, !tbaa !165
  %92 = icmp eq i8* %91, null
  br i1 %92, label %94, label %93

93:                                               ; preds = %89
  tail call void @free(i8* nonnull %91) #9
  br label %94

94:                                               ; preds = %93, %89
  %95 = bitcast %struct.opj_cp* %38 to i8*
  tail call void @free(i8* %95) #9
  br label %96

96:                                               ; preds = %94, %36
  %97 = bitcast %struct.opj_j2k* %0 to i8*
  tail call void @free(i8* %97) #9
  ret void
}

; Function Attrs: nounwind uwtable
define void @j2k_setup_decoder(%struct.opj_j2k*, %struct.opj_dparameters* readonly) #0 {
  %3 = icmp ne %struct.opj_j2k* %0, null
  %4 = icmp ne %struct.opj_dparameters* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %22

6:                                                ; preds = %2
  %7 = tail call noalias i8* @calloc(i64 1, i64 144) #9
  %8 = getelementptr inbounds %struct.opj_dparameters, %struct.opj_dparameters* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 4, !tbaa !166
  %10 = getelementptr inbounds i8, i8* %7, i64 36
  %11 = bitcast i8* %10 to i32*
  store i32 %9, i32* %11, align 4, !tbaa !168
  %12 = getelementptr inbounds %struct.opj_dparameters, %struct.opj_dparameters* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 4, !tbaa !169
  %14 = getelementptr inbounds i8, i8* %7, i64 40
  %15 = bitcast i8* %14 to i32*
  store i32 %13, i32* %15, align 8, !tbaa !170
  %16 = getelementptr inbounds %struct.opj_dparameters, %struct.opj_dparameters* %1, i64 0, i32 9
  %17 = load i32, i32* %16, align 4, !tbaa !171
  %18 = getelementptr inbounds i8, i8* %7, i64 44
  %19 = bitcast i8* %18 to i32*
  store i32 %17, i32* %19, align 4, !tbaa !172
  %20 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %21 = bitcast %struct.opj_cp** %20 to i8**
  store i8* %7, i8** %21, align 8, !tbaa !25
  br label %22

22:                                               ; preds = %6, %2
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.opj_image* @j2k_decode(%struct.opj_j2k*, %struct.opj_cio*, %struct.opj_codestream_info*) #0 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 0
  %5 = load %struct.opj_common_struct*, %struct.opj_common_struct** %4, align 8, !tbaa !158
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  store %struct.opj_cio* %1, %struct.opj_cio** %6, align 8, !tbaa !173
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 17
  store %struct.opj_codestream_info* %2, %struct.opj_codestream_info** %7, align 8, !tbaa !142
  %8 = icmp eq %struct.opj_codestream_info* %2, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = bitcast %struct.opj_codestream_info* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 112, i1 false)
  br label %11

11:                                               ; preds = %9, %3
  %12 = tail call %struct.opj_image* @opj_image_create0() #9
  %13 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  store %struct.opj_image* %12, %struct.opj_image** %13, align 8, !tbaa !174
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  store i32 1, i32* %14, align 8, !tbaa !175
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  br label %16

16:                                               ; preds = %61, %11
  %17 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 2) #9
  %18 = and i32 %17, -256
  %19 = icmp eq i32 %18, 65280
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  tail call void @opj_image_destroy(%struct.opj_image* %12) #9
  %21 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %22 = add nsw i32 %21, -2
  %23 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %5, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0), i32 %22, i32 %17) #9
  br label %67

24:                                               ; preds = %24, %16
  %25 = phi %struct.opj_dec_mstabent* [ %31, %24 ], [ getelementptr inbounds ([20 x %struct.opj_dec_mstabent], [20 x %struct.opj_dec_mstabent]* @j2k_dec_mstab, i64 0, i64 0), %16 ]
  %26 = getelementptr inbounds %struct.opj_dec_mstabent, %struct.opj_dec_mstabent* %25, i64 0, i32 0
  %27 = load i32, i32* %26, align 8, !tbaa !176
  %28 = icmp eq i32 %27, 0
  %29 = icmp eq i32 %27, %17
  %30 = or i1 %28, %29
  %31 = getelementptr inbounds %struct.opj_dec_mstabent, %struct.opj_dec_mstabent* %25, i64 1
  br i1 %30, label %32, label %24

32:                                               ; preds = %24
  %33 = load i32, i32* %14, align 8, !tbaa !175
  %34 = getelementptr inbounds %struct.opj_dec_mstabent, %struct.opj_dec_mstabent* %25, i64 0, i32 1
  %35 = load i32, i32* %34, align 4, !tbaa !178
  %36 = and i32 %35, %33
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %32
  tail call void @opj_image_destroy(%struct.opj_image* %12) #9
  %39 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %40 = add nsw i32 %39, -2
  %41 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %5, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1.5, i64 0, i64 0), i32 %40, i32 %17) #9
  br label %67

42:                                               ; preds = %32
  %43 = icmp eq i32 %27, 65424
  br i1 %43, label %44, label %51

44:                                               ; preds = %42
  %45 = load %struct.opj_cp*, %struct.opj_cp** %15, align 8, !tbaa !25
  %46 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %45, i64 0, i32 12
  %47 = load i32, i32* %46, align 4, !tbaa !172
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %49, label %51

49:                                               ; preds = %44
  %50 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %5, i32 4, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2.6, i64 0, i64 0)) #9
  br label %67

51:                                               ; preds = %44, %42
  %52 = getelementptr inbounds %struct.opj_dec_mstabent, %struct.opj_dec_mstabent* %25, i64 0, i32 2
  %53 = load void (%struct.opj_j2k*)*, void (%struct.opj_j2k*)** %52, align 8, !tbaa !179
  %54 = icmp eq void (%struct.opj_j2k*)* %53, null
  br i1 %54, label %57, label %55

55:                                               ; preds = %51
  tail call void %53(%struct.opj_j2k* nonnull %0) #9
  %56 = load i32, i32* %14, align 8, !tbaa !175
  br label %57

57:                                               ; preds = %55, %51
  %58 = phi i32 [ %33, %51 ], [ %56, %55 ]
  %59 = trunc i32 %58 to i8
  %60 = icmp slt i8 %59, 0
  br i1 %60, label %67, label %61

61:                                               ; preds = %57
  switch i32 %58, label %16 [
    i32 64, label %62
    i32 32, label %67
  ]

62:                                               ; preds = %61
  tail call void @j2k_read_eoc(%struct.opj_j2k* nonnull %0)
  %63 = load i32, i32* %14, align 8, !tbaa !175
  %64 = icmp eq i32 %63, 32
  br i1 %64, label %67, label %65

65:                                               ; preds = %62
  %66 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %5, i32 2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3.7, i64 0, i64 0)) #9
  br label %67

67:                                               ; preds = %65, %62, %61, %57, %49, %38, %20
  %68 = phi %struct.opj_image* [ %12, %62 ], [ %12, %65 ], [ null, %38 ], [ %12, %49 ], [ null, %20 ], [ %12, %61 ], [ null, %57 ]
  ret %struct.opj_image* %68
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_eoc(%struct.opj_j2k* nocapture) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %3 = load %struct.opj_cp*, %struct.opj_cp** %2, align 8, !tbaa !25
  %4 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 12
  %5 = load i32, i32* %4, align 4, !tbaa !172
  %6 = icmp eq i32 %5, 2
  br i1 %6, label %7, label %13

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 21
  %9 = load i32, i32* %8, align 8, !tbaa !180
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %85

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 12
  br label %66

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 0
  %15 = load %struct.opj_common_struct*, %struct.opj_common_struct** %14, align 8, !tbaa !158
  %16 = tail call %struct.opj_tcd* @tcd_create(%struct.opj_common_struct* %15) #9
  %17 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %18 = load %struct.opj_image*, %struct.opj_image** %17, align 8, !tbaa !174
  %19 = load %struct.opj_cp*, %struct.opj_cp** %2, align 8, !tbaa !25
  tail call void @tcd_malloc_decode(%struct.opj_tcd* %16, %struct.opj_image* %18, %struct.opj_cp* %19) #9
  %20 = load %struct.opj_cp*, %struct.opj_cp** %2, align 8, !tbaa !25
  %21 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %20, i64 0, i32 21
  %22 = load i32, i32* %21, align 8, !tbaa !180
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %65

24:                                               ; preds = %13
  %25 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 17
  %26 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 12
  %27 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 13
  br label %34

28:                                               ; preds = %34
  %29 = load %struct.opj_cp*, %struct.opj_cp** %2, align 8, !tbaa !25
  %30 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %29, i64 0, i32 21
  %31 = load i32, i32* %30, align 8, !tbaa !180
  %32 = sext i32 %31 to i64
  %33 = icmp slt i64 %60, %32
  br i1 %33, label %34, label %65

34:                                               ; preds = %28, %24
  %35 = phi i64 [ 0, %24 ], [ %60, %28 ]
  %36 = phi %struct.opj_cp* [ %20, %24 ], [ %29, %28 ]
  %37 = load %struct.opj_image*, %struct.opj_image** %17, align 8, !tbaa !174
  %38 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %25, align 8, !tbaa !142
  %39 = trunc i64 %35 to i32
  tail call void @tcd_malloc_decode_tile(%struct.opj_tcd* %16, %struct.opj_image* %37, %struct.opj_cp* %36, i32 %39, %struct.opj_codestream_info* %38) #9
  %40 = load %struct.opj_cp*, %struct.opj_cp** %2, align 8, !tbaa !25
  %41 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %40, i64 0, i32 20
  %42 = load i32*, i32** %41, align 8, !tbaa !164
  %43 = getelementptr inbounds i32, i32* %42, i64 %35
  %44 = load i32, i32* %43, align 4, !tbaa !43
  %45 = load i8**, i8*** %26, align 8, !tbaa !160
  %46 = sext i32 %44 to i64
  %47 = getelementptr inbounds i8*, i8** %45, i64 %46
  %48 = load i8*, i8** %47, align 8, !tbaa !24
  %49 = load i32*, i32** %27, align 8, !tbaa !159
  %50 = getelementptr inbounds i32, i32* %49, i64 %46
  %51 = load i32, i32* %50, align 4, !tbaa !43
  %52 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %25, align 8, !tbaa !142
  %53 = tail call i32 @tcd_decode_tile(%struct.opj_tcd* %16, i8* %48, i32 %51, i32 %44, %struct.opj_codestream_info* %52) #9
  %54 = load i8**, i8*** %26, align 8, !tbaa !160
  %55 = getelementptr inbounds i8*, i8** %54, i64 %46
  %56 = load i8*, i8** %55, align 8, !tbaa !24
  tail call void @free(i8* %56) #9
  %57 = load i8**, i8*** %26, align 8, !tbaa !160
  %58 = getelementptr inbounds i8*, i8** %57, i64 %46
  store i8* null, i8** %58, align 8, !tbaa !24
  tail call void @tcd_free_decode_tile(%struct.opj_tcd* %16, i32 %39) #9
  %59 = icmp eq i32 %53, 0
  %60 = add nuw nsw i64 %35, 1
  br i1 %59, label %61, label %28

61:                                               ; preds = %34
  %62 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %63 = load i32, i32* %62, align 8, !tbaa !175
  %64 = or i32 %63, 128
  store i32 %64, i32* %62, align 8, !tbaa !175
  br label %65

65:                                               ; preds = %61, %28, %13
  tail call void @tcd_free_decode(%struct.opj_tcd* %16) #9
  tail call void @tcd_destroy(%struct.opj_tcd* %16) #9
  br label %85

66:                                               ; preds = %66, %11
  %67 = phi i64 [ 0, %11 ], [ %79, %66 ]
  %68 = phi %struct.opj_cp* [ %3, %11 ], [ %80, %66 ]
  %69 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %68, i64 0, i32 20
  %70 = load i32*, i32** %69, align 8, !tbaa !164
  %71 = getelementptr inbounds i32, i32* %70, i64 %67
  %72 = load i32, i32* %71, align 4, !tbaa !43
  %73 = load i8**, i8*** %12, align 8, !tbaa !160
  %74 = sext i32 %72 to i64
  %75 = getelementptr inbounds i8*, i8** %73, i64 %74
  %76 = load i8*, i8** %75, align 8, !tbaa !24
  tail call void @free(i8* %76) #9
  %77 = load i8**, i8*** %12, align 8, !tbaa !160
  %78 = getelementptr inbounds i8*, i8** %77, i64 %74
  store i8* null, i8** %78, align 8, !tbaa !24
  %79 = add nuw nsw i64 %67, 1
  %80 = load %struct.opj_cp*, %struct.opj_cp** %2, align 8, !tbaa !25
  %81 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %80, i64 0, i32 21
  %82 = load i32, i32* %81, align 8, !tbaa !180
  %83 = sext i32 %82 to i64
  %84 = icmp slt i64 %79, %83
  br i1 %84, label %66, label %85

85:                                               ; preds = %66, %65, %7
  %86 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %87 = load i32, i32* %86, align 8, !tbaa !175
  %88 = and i32 %87, 128
  %89 = or i32 %88, 32
  store i32 %89, i32* %86, align 8, !tbaa !175
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_soc(%struct.opj_j2k* nocapture) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  store i32 2, i32* %2, align 8, !tbaa !175
  %3 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 17
  %4 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %3, align 8, !tbaa !142
  %5 = icmp eq %struct.opj_codestream_info* %4, null
  br i1 %5, label %21, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %8 = load %struct.opj_cio*, %struct.opj_cio** %7, align 8, !tbaa !173
  %9 = tail call i32 @cio_tell(%struct.opj_cio* %8) #9
  %10 = add nsw i32 %9, -2
  %11 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %3, align 8, !tbaa !142
  %12 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %11, i64 0, i32 18
  store i32 %10, i32* %12, align 4, !tbaa !181
  %13 = load %struct.opj_cio*, %struct.opj_cio** %7, align 8, !tbaa !173
  %14 = tail call i32 @cio_numbytesleft(%struct.opj_cio* %13) #9
  %15 = add nsw i32 %14, 2
  %16 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %3, align 8, !tbaa !142
  %17 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %16, i64 0, i32 18
  %18 = load i32, i32* %17, align 4, !tbaa !181
  %19 = sub i32 %15, %18
  %20 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %16, i64 0, i32 20
  store i32 %19, i32* %20, align 4, !tbaa !182
  br label %21

21:                                               ; preds = %6, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_sot(%struct.opj_j2k* nocapture) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %3 = load %struct.opj_cp*, %struct.opj_cp** %2, align 8, !tbaa !25
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %5 = load %struct.opj_cio*, %struct.opj_cio** %4, align 8, !tbaa !173
  %6 = tail call i32 @cio_read(%struct.opj_cio* %5, i32 2) #9
  %7 = tail call i32 @cio_read(%struct.opj_cio* %5, i32 2) #9
  %8 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 21
  %9 = load i32, i32* %8, align 8, !tbaa !180
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %1
  %12 = icmp sgt i32 %9, 0
  %13 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 20
  %14 = load i32*, i32** %13, align 8, !tbaa !164
  %15 = sext i32 %9 to i64
  br i1 %12, label %19, label %28

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 20
  %18 = load i32*, i32** %17, align 8, !tbaa !164
  br label %30

19:                                               ; preds = %19, %11
  %20 = phi i64 [ %24, %19 ], [ 0, %11 ]
  %21 = getelementptr inbounds i32, i32* %14, i64 %20
  %22 = load i32, i32* %21, align 4, !tbaa !43
  %23 = icmp ne i32 %22, %7
  %24 = add nuw nsw i64 %20, 1
  %25 = icmp slt i64 %24, %15
  %26 = and i1 %23, %25
  br i1 %26, label %19, label %27

27:                                               ; preds = %19
  br i1 %23, label %28, label %34

28:                                               ; preds = %27, %11
  %29 = getelementptr inbounds i32, i32* %14, i64 %15
  br label %30

30:                                               ; preds = %28, %16
  %31 = phi i32* [ %29, %28 ], [ %18, %16 ]
  store i32 %7, i32* %31, align 4, !tbaa !43
  %32 = load i32, i32* %8, align 8, !tbaa !180
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %8, align 8, !tbaa !180
  br label %34

34:                                               ; preds = %30, %27
  %35 = tail call i32 @cio_read(%struct.opj_cio* %5, i32 4) #9
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %34
  %38 = tail call i32 @cio_numbytesleft(%struct.opj_cio* %5) #9
  %39 = add nsw i32 %38, 8
  br label %40

40:                                               ; preds = %37, %34
  %41 = phi i32 [ %35, %34 ], [ %39, %37 ]
  %42 = tail call i32 @cio_read(%struct.opj_cio* %5, i32 1) #9
  %43 = tail call i32 @cio_read(%struct.opj_cio* %5, i32 1) #9
  %44 = icmp slt i32 %42, %43
  br i1 %44, label %50, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 0
  %47 = load %struct.opj_common_struct*, %struct.opj_common_struct** %46, align 8, !tbaa !158
  %48 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %47, i32 2, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.7, i64 0, i64 0), i32 %7, i32 %42, i32 %43) #9
  %49 = add nsw i32 %42, 1
  br label %50

50:                                               ; preds = %45, %40
  %51 = phi i32 [ %49, %45 ], [ %43, %40 ]
  %52 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  store i32 %7, i32* %52, align 4, !tbaa !183
  %53 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  store i32 %42, i32* %53, align 4, !tbaa !184
  %54 = tail call i8* @cio_getbp(%struct.opj_cio* %5) #9
  %55 = getelementptr inbounds i8, i8* %54, i64 -12
  %56 = sext i32 %41 to i64
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  store i8* %57, i8** %58, align 8, !tbaa !185
  %59 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  store i32 16, i32* %59, align 8, !tbaa !175
  %60 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 28
  %61 = load %struct.opj_tcp*, %struct.opj_tcp** %60, align 8, !tbaa !139
  %62 = load i32, i32* %52, align 4, !tbaa !183
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %61, i64 %63
  %65 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 17
  %66 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %65, align 8, !tbaa !142
  %67 = icmp eq %struct.opj_codestream_info* %66, null
  br i1 %67, label %130, label %68

68:                                               ; preds = %50
  %69 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %64, i64 0, i32 0
  %70 = load i32, i32* %69, align 8, !tbaa !186
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %94, label %72

72:                                               ; preds = %68
  %73 = icmp eq i32 %7, 0
  br i1 %73, label %74, label %79

74:                                               ; preds = %72
  %75 = tail call i32 @cio_tell(%struct.opj_cio* %5) #9
  %76 = add nsw i32 %75, -13
  %77 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %65, align 8, !tbaa !142
  %78 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %77, i64 0, i32 19
  store i32 %76, i32* %78, align 8, !tbaa !187
  br label %79

79:                                               ; preds = %74, %72
  %80 = phi %struct.opj_codestream_info* [ %77, %74 ], [ %66, %72 ]
  %81 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %80, i64 0, i32 21
  %82 = load %struct.opj_tile_info*, %struct.opj_tile_info** %81, align 8, !tbaa !143
  %83 = sext i32 %7 to i64
  %84 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %82, i64 %83, i32 1
  store i32 %7, i32* %84, align 8, !tbaa !188
  %85 = tail call i32 @cio_tell(%struct.opj_cio* %5) #9
  %86 = add nsw i32 %85, -12
  %87 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %65, align 8, !tbaa !142
  %88 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %87, i64 0, i32 21
  %89 = load %struct.opj_tile_info*, %struct.opj_tile_info** %88, align 8, !tbaa !143
  %90 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %89, i64 %83, i32 2
  store i32 %86, i32* %90, align 4, !tbaa !189
  %91 = add i32 %41, -1
  %92 = add i32 %91, %86
  %93 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %89, i64 %83, i32 4
  store i32 %92, i32* %93, align 4, !tbaa !190
  br label %101

94:                                               ; preds = %68
  %95 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %66, i64 0, i32 21
  %96 = load %struct.opj_tile_info*, %struct.opj_tile_info** %95, align 8, !tbaa !143
  %97 = sext i32 %7 to i64
  %98 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %96, i64 %97, i32 4
  %99 = load i32, i32* %98, align 4, !tbaa !190
  %100 = add nsw i32 %99, %41
  store i32 %100, i32* %98, align 4, !tbaa !190
  br label %101

101:                                              ; preds = %94, %79
  %102 = phi i64 [ %97, %94 ], [ %83, %79 ]
  %103 = phi %struct.opj_tile_info* [ %96, %94 ], [ %89, %79 ]
  %104 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %103, i64 %102, i32 15
  store i32 %51, i32* %104, align 4, !tbaa !145
  %105 = icmp eq i32 %51, 0
  %106 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %103, i64 %102, i32 16
  %107 = bitcast %struct.opj_tp_info** %106 to i8**
  %108 = load i8*, i8** %107, align 8, !tbaa !147
  %109 = sext i32 %51 to i64
  %110 = mul nsw i64 %109, 20
  %111 = select i1 %105, i64 200, i64 %110
  %112 = tail call i8* @realloc(i8* %108, i64 %111) #9
  %113 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %65, align 8, !tbaa !142
  %114 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %113, i64 0, i32 21
  %115 = load %struct.opj_tile_info*, %struct.opj_tile_info** %114, align 8, !tbaa !143
  %116 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %115, i64 %102, i32 16
  %117 = bitcast %struct.opj_tp_info** %116 to i8**
  store i8* %112, i8** %117, align 8, !tbaa !147
  %118 = tail call i32 @cio_tell(%struct.opj_cio* %5) #9
  %119 = add nsw i32 %118, -12
  %120 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %65, align 8, !tbaa !142
  %121 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %120, i64 0, i32 21
  %122 = load %struct.opj_tile_info*, %struct.opj_tile_info** %121, align 8, !tbaa !143
  %123 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %122, i64 %102, i32 16
  %124 = load %struct.opj_tp_info*, %struct.opj_tp_info** %123, align 8, !tbaa !147
  %125 = sext i32 %42 to i64
  %126 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %124, i64 %125, i32 0
  store i32 %119, i32* %126, align 4, !tbaa !191
  %127 = add i32 %41, -1
  %128 = add i32 %127, %119
  %129 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %124, i64 %125, i32 2
  store i32 %128, i32* %129, align 4, !tbaa !193
  br label %130

130:                                              ; preds = %101, %50
  %131 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %64, i64 0, i32 0
  %132 = load i32, i32* %131, align 8, !tbaa !186
  %133 = icmp eq i32 %132, 1
  br i1 %133, label %134, label %180

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %61, i64 %63, i32 15
  %136 = bitcast %struct.opj_tccp** %135 to i64*
  %137 = load i64, i64* %136, align 8, !tbaa !162
  %138 = bitcast %struct.opj_tcp* %64 to i8*
  %139 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 14
  %140 = bitcast %struct.opj_tcp** %139 to i8**
  %141 = load i8*, i8** %140, align 8, !tbaa !157
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %141, i64 5608, i1 false)
  %142 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %61, i64 %63, i32 9
  %143 = bitcast i8** %142 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 0, i64 20, i1 false)
  store i64 %137, i64* %136, align 8, !tbaa !162
  %144 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %145 = load %struct.opj_image*, %struct.opj_image** %144, align 8, !tbaa !174
  %146 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %145, i64 0, i32 4
  %147 = load i32, i32* %146, align 8, !tbaa !127
  %148 = icmp sgt i32 %147, 0
  br i1 %148, label %149, label %175

149:                                              ; preds = %134
  %150 = load %struct.opj_tcp*, %struct.opj_tcp** %139, align 8, !tbaa !157
  %151 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %150, i64 0, i32 15
  %152 = bitcast %struct.opj_tccp** %151 to i8**
  %153 = load i8*, i8** %152, align 8, !tbaa !162
  %154 = inttoptr i64 %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %154, i8* align 4 %153, i64 1076, i1 false), !tbaa.struct !194
  %155 = load %struct.opj_image*, %struct.opj_image** %144, align 8, !tbaa !174
  %156 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %155, i64 0, i32 4
  %157 = load i32, i32* %156, align 8, !tbaa !127
  %158 = icmp sgt i32 %157, 1
  br i1 %158, label %159, label %175

159:                                              ; preds = %159, %149
  %160 = phi i64 [ %169, %159 ], [ 1, %149 ]
  %161 = load %struct.opj_tccp*, %struct.opj_tccp** %135, align 8, !tbaa !162
  %162 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %161, i64 %160
  %163 = load %struct.opj_tcp*, %struct.opj_tcp** %139, align 8, !tbaa !157
  %164 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %163, i64 0, i32 15
  %165 = load %struct.opj_tccp*, %struct.opj_tccp** %164, align 8, !tbaa !162
  %166 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %165, i64 %160
  %167 = bitcast %struct.opj_tccp* %162 to i8*
  %168 = bitcast %struct.opj_tccp* %166 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %167, i8* nonnull align 4 %168, i64 1076, i1 false), !tbaa.struct !194
  %169 = add nuw nsw i64 %160, 1
  %170 = load %struct.opj_image*, %struct.opj_image** %144, align 8, !tbaa !174
  %171 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %170, i64 0, i32 4
  %172 = load i32, i32* %171, align 8, !tbaa !127
  %173 = sext i32 %172 to i64
  %174 = icmp slt i64 %169, %173
  br i1 %174, label %159, label %175

175:                                              ; preds = %159, %149, %134
  %176 = load %struct.opj_tcp*, %struct.opj_tcp** %60, align 8, !tbaa !139
  %177 = load i32, i32* %52, align 4, !tbaa !183
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %176, i64 %178, i32 0
  store i32 0, i32* %179, align 8, !tbaa !186
  br label %180

180:                                              ; preds = %175, %130
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_sod(%struct.opj_j2k* nocapture) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %3 = load %struct.opj_cio*, %struct.opj_cio** %2, align 8, !tbaa !173
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4, !tbaa !183
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 17
  %7 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %6, align 8, !tbaa !142
  %8 = icmp eq %struct.opj_codestream_info* %7, null
  br i1 %8, label %41, label %9

9:                                                ; preds = %1
  %10 = tail call i32 @cio_tell(%struct.opj_cio* %3) #9
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 11
  %12 = load i32, i32* %11, align 8, !tbaa !195
  %13 = add i32 %10, -1
  %14 = add i32 %13, %12
  %15 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %6, align 8, !tbaa !142
  %16 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %15, i64 0, i32 21
  %17 = load %struct.opj_tile_info*, %struct.opj_tile_info** %16, align 8, !tbaa !143
  %18 = load i32, i32* %4, align 4, !tbaa !183
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %17, i64 %19, i32 16
  %21 = load %struct.opj_tp_info*, %struct.opj_tp_info** %20, align 8, !tbaa !147
  %22 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  %23 = load i32, i32* %22, align 4, !tbaa !184
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %21, i64 %24, i32 1
  store i32 %14, i32* %25, align 4, !tbaa !196
  %26 = icmp eq i32 %23, 0
  br i1 %26, label %27, label %38

27:                                               ; preds = %9
  %28 = tail call i32 @cio_tell(%struct.opj_cio* %3) #9
  %29 = load i32, i32* %11, align 8, !tbaa !195
  %30 = add i32 %28, -1
  %31 = add i32 %30, %29
  %32 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %6, align 8, !tbaa !142
  %33 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %32, i64 0, i32 21
  %34 = load %struct.opj_tile_info*, %struct.opj_tile_info** %33, align 8, !tbaa !143
  %35 = load i32, i32* %4, align 4, !tbaa !183
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %34, i64 %36, i32 3
  store i32 %31, i32* %37, align 8, !tbaa !197
  br label %38

38:                                               ; preds = %27, %9
  %39 = phi %struct.opj_codestream_info* [ %32, %27 ], [ %15, %9 ]
  %40 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %39, i64 0, i32 1
  store i32 0, i32* %40, align 8, !tbaa !198
  br label %41

41:                                               ; preds = %38, %1
  %42 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %43 = bitcast i8** %42 to i64*
  %44 = load i64, i64* %43, align 8, !tbaa !185
  %45 = tail call i8* @cio_getbp(%struct.opj_cio* %3) #9
  %46 = ptrtoint i8* %45 to i64
  %47 = sub i64 %44, %46
  %48 = trunc i64 %47 to i32
  %49 = tail call i32 @cio_numbytesleft(%struct.opj_cio* %3) #9
  %50 = add nsw i32 %49, 1
  %51 = icmp sgt i32 %50, %48
  %52 = select i1 %51, i32 %48, i32 %50
  %53 = tail call i32 @cio_numbytesleft(%struct.opj_cio* %3) #9
  %54 = add nsw i32 %53, 1
  %55 = icmp eq i32 %52, %54
  %56 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 12
  %57 = load i8**, i8*** %56, align 8, !tbaa !160
  %58 = sext i32 %5 to i64
  %59 = getelementptr inbounds i8*, i8** %57, i64 %58
  %60 = load i8*, i8** %59, align 8, !tbaa !24
  %61 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 13
  %62 = load i32*, i32** %61, align 8, !tbaa !159
  %63 = getelementptr inbounds i32, i32* %62, i64 %58
  %64 = load i32, i32* %63, align 4, !tbaa !43
  %65 = add nsw i32 %64, %52
  %66 = sext i32 %65 to i64
  %67 = tail call i8* @realloc(i8* %60, i64 %66) #9
  %68 = load i32*, i32** %61, align 8, !tbaa !159
  %69 = getelementptr inbounds i32, i32* %68, i64 %58
  %70 = load i32, i32* %69, align 4, !tbaa !43
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %67, i64 %71
  %73 = icmp sgt i32 %52, 0
  br i1 %73, label %74, label %87

74:                                               ; preds = %41
  %75 = sext i32 %52 to i64
  br label %76

76:                                               ; preds = %76, %74
  %77 = phi i64 [ 0, %74 ], [ %81, %76 ]
  %78 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %72, i64 %77
  store i8 %79, i8* %80, align 1, !tbaa !15
  %81 = add nuw nsw i64 %77, 1
  %82 = icmp slt i64 %81, %75
  br i1 %82, label %76, label %83

83:                                               ; preds = %76
  %84 = load i32*, i32** %61, align 8, !tbaa !159
  %85 = getelementptr inbounds i32, i32* %84, i64 %58
  %86 = load i32, i32* %85, align 4, !tbaa !43
  br label %87

87:                                               ; preds = %83, %41
  %88 = phi i32 [ %86, %83 ], [ %70, %41 ]
  %89 = phi i32* [ %84, %83 ], [ %68, %41 ]
  %90 = getelementptr inbounds i32, i32* %89, i64 %58
  %91 = add nsw i32 %88, %52
  store i32 %91, i32* %90, align 4, !tbaa !43
  %92 = load i8**, i8*** %56, align 8, !tbaa !160
  %93 = getelementptr inbounds i8*, i8** %92, i64 %58
  store i8* %67, i8** %93, align 8, !tbaa !24
  %94 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %95 = select i1 %55, i32 64, i32 8
  store i32 %95, i32* %94, align 8, !tbaa !175
  %96 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  %97 = load i32, i32* %96, align 4, !tbaa !184
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %96, align 4, !tbaa !184
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_siz(%struct.opj_j2k* nocapture) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %3 = load %struct.opj_cio*, %struct.opj_cio** %2, align 8, !tbaa !173
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %5 = load %struct.opj_image*, %struct.opj_image** %4, align 8, !tbaa !174
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %7 = load %struct.opj_cp*, %struct.opj_cp** %6, align 8, !tbaa !25
  %8 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %9 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %10 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 4) #9
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 2
  store i32 %10, i32* %11, align 8, !tbaa !199
  %12 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 4) #9
  %13 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 3
  store i32 %12, i32* %13, align 4, !tbaa !200
  %14 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 4) #9
  %15 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 0
  store i32 %14, i32* %15, align 8, !tbaa !201
  %16 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 4) #9
  %17 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 1
  store i32 %16, i32* %17, align 4, !tbaa !202
  %18 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 4) #9
  %19 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 15
  store i32 %18, i32* %19, align 8, !tbaa !203
  %20 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 4) #9
  %21 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 16
  store i32 %20, i32* %21, align 4, !tbaa !204
  %22 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 4) #9
  %23 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 13
  store i32 %22, i32* %23, align 8, !tbaa !205
  %24 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 4) #9
  %25 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 14
  store i32 %24, i32* %25, align 4, !tbaa !206
  %26 = load i32, i32* %15, align 8, !tbaa !201
  %27 = load i32, i32* %11, align 8, !tbaa !199
  %28 = or i32 %26, %27
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %1
  %31 = load i32, i32* %17, align 4, !tbaa !202
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %30
  %34 = load i32, i32* %13, align 4, !tbaa !200
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %36, label %42

36:                                               ; preds = %33, %30, %1
  %37 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 0
  %38 = load %struct.opj_common_struct*, %struct.opj_common_struct** %37, align 8, !tbaa !158
  %39 = load i32, i32* %17, align 4, !tbaa !202
  %40 = load i32, i32* %13, align 4, !tbaa !200
  %41 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %38, i32 1, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i32 %26, i32 %27, i32 %39, i32 %40) #9
  br label %209

42:                                               ; preds = %33
  %43 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %44 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 4
  store i32 %43, i32* %44, align 8, !tbaa !127
  %45 = sext i32 %43 to i64
  %46 = tail call noalias i8* @calloc(i64 %45, i64 56) #9
  %47 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 6
  %48 = bitcast %struct.opj_image_comp** %47 to i8**
  store i8* %46, i8** %48, align 8, !tbaa !128
  %49 = load i32, i32* %44, align 8, !tbaa !127
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %75

51:                                               ; preds = %42
  %52 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 10
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %71, %53 ]
  %55 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %56 = and i32 %55, 127
  %57 = add nuw nsw i32 %56, 1
  %58 = load %struct.opj_image_comp*, %struct.opj_image_comp** %47, align 8, !tbaa !128
  %59 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %58, i64 %54, i32 6
  store i32 %57, i32* %59, align 8, !tbaa !207
  %60 = ashr i32 %55, 7
  %61 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %58, i64 %54, i32 8
  store i32 %60, i32* %61, align 8, !tbaa !131
  %62 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %63 = load %struct.opj_image_comp*, %struct.opj_image_comp** %47, align 8, !tbaa !128
  %64 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %63, i64 %54, i32 0
  store i32 %62, i32* %64, align 8, !tbaa !208
  %65 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %66 = load %struct.opj_image_comp*, %struct.opj_image_comp** %47, align 8, !tbaa !128
  %67 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %66, i64 %54, i32 1
  store i32 %65, i32* %67, align 4, !tbaa !209
  %68 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %66, i64 %54, i32 9
  store i32 0, i32* %68, align 4, !tbaa !210
  %69 = load i32, i32* %52, align 4, !tbaa !168
  %70 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %66, i64 %54, i32 10
  store i32 %69, i32* %70, align 8, !tbaa !211
  %71 = add nuw nsw i64 %54, 1
  %72 = load i32, i32* %44, align 8, !tbaa !127
  %73 = sext i32 %72 to i64
  %74 = icmp slt i64 %71, %73
  br i1 %74, label %53, label %75

75:                                               ; preds = %53, %42
  %76 = load i32, i32* %11, align 8, !tbaa !199
  %77 = load i32, i32* %23, align 8, !tbaa !205
  %78 = load i32, i32* %19, align 8, !tbaa !203
  %79 = xor i32 %77, -1
  %80 = add i32 %76, %79
  %81 = add i32 %80, %78
  %82 = sdiv i32 %81, %78
  %83 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 18
  store i32 %82, i32* %83, align 8, !tbaa !136
  %84 = load i32, i32* %13, align 4, !tbaa !200
  %85 = load i32, i32* %25, align 4, !tbaa !206
  %86 = load i32, i32* %21, align 4, !tbaa !204
  %87 = xor i32 %85, -1
  %88 = add i32 %84, %87
  %89 = add i32 %88, %86
  %90 = sdiv i32 %89, %86
  %91 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 19
  store i32 %90, i32* %91, align 4, !tbaa !137
  %92 = mul nsw i32 %90, %82
  %93 = sext i32 %92 to i64
  %94 = tail call noalias i8* @calloc(i64 %93, i64 5608) #9
  %95 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 28
  %96 = bitcast %struct.opj_tcp** %95 to i8**
  store i8* %94, i8** %96, align 8, !tbaa !139
  %97 = load i32, i32* %83, align 8, !tbaa !136
  %98 = load i32, i32* %91, align 4, !tbaa !137
  %99 = mul nsw i32 %98, %97
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 2
  %102 = tail call noalias i8* @malloc(i64 %101) #9
  %103 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 20
  %104 = bitcast i32** %103 to i8**
  store i8* %102, i8** %104, align 8, !tbaa !164
  %105 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 21
  store i32 0, i32* %105, align 8, !tbaa !180
  %106 = load i32, i32* %83, align 8, !tbaa !136
  %107 = load i32, i32* %91, align 4, !tbaa !137
  %108 = mul nsw i32 %107, %106
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %137

110:                                              ; preds = %75
  %111 = load %struct.opj_tcp*, %struct.opj_tcp** %95, align 8, !tbaa !139
  %112 = sext i32 %108 to i64
  %113 = and i64 %112, 1
  %114 = icmp eq i32 %108, 1
  br i1 %114, label %130, label %115

115:                                              ; preds = %110
  %116 = sub nsw i64 %112, %113
  br label %117

117:                                              ; preds = %117, %115
  %118 = phi i64 [ 0, %115 ], [ %127, %117 ]
  %119 = phi i64 [ %116, %115 ], [ %128, %117 ]
  %120 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %111, i64 %118, i32 7
  store i32 0, i32* %120, align 8, !tbaa !212
  %121 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %111, i64 %118, i32 6
  store i32 0, i32* %121, align 4, !tbaa !140
  %122 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %111, i64 %118, i32 0
  store i32 1, i32* %122, align 8, !tbaa !186
  %123 = or i64 %118, 1
  %124 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %111, i64 %123, i32 7
  store i32 0, i32* %124, align 8, !tbaa !212
  %125 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %111, i64 %123, i32 6
  store i32 0, i32* %125, align 4, !tbaa !140
  %126 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %111, i64 %123, i32 0
  store i32 1, i32* %126, align 8, !tbaa !186
  %127 = add nuw nsw i64 %118, 2
  %128 = add i64 %119, -2
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %117

130:                                              ; preds = %117, %110
  %131 = phi i64 [ 0, %110 ], [ %127, %117 ]
  %132 = icmp eq i64 %113, 0
  br i1 %132, label %137, label %133

133:                                              ; preds = %130
  %134 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %111, i64 %131, i32 7
  store i32 0, i32* %134, align 8, !tbaa !212
  %135 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %111, i64 %131, i32 6
  store i32 0, i32* %135, align 4, !tbaa !140
  %136 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %111, i64 %131, i32 0
  store i32 1, i32* %136, align 8, !tbaa !186
  br label %137

137:                                              ; preds = %133, %130, %75
  %138 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 22
  %139 = bitcast i8** %138 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %139, i8 0, i64 28, i1 false)
  %140 = load i32, i32* %44, align 8, !tbaa !127
  %141 = sext i32 %140 to i64
  %142 = tail call noalias i8* @calloc(i64 %141, i64 1076) #9
  %143 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 14
  %144 = load %struct.opj_tcp*, %struct.opj_tcp** %143, align 8, !tbaa !157
  %145 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %144, i64 0, i32 15
  %146 = bitcast %struct.opj_tccp** %145 to i8**
  store i8* %142, i8** %146, align 8, !tbaa !162
  %147 = load i32, i32* %83, align 8, !tbaa !136
  %148 = load i32, i32* %91, align 4, !tbaa !137
  %149 = mul nsw i32 %148, %147
  %150 = icmp sgt i32 %149, 0
  br i1 %150, label %153, label %151

151:                                              ; preds = %137
  %152 = sext i32 %149 to i64
  br label %168

153:                                              ; preds = %153, %137
  %154 = phi i64 [ %162, %153 ], [ 0, %137 ]
  %155 = load i32, i32* %44, align 8, !tbaa !127
  %156 = sext i32 %155 to i64
  %157 = mul nsw i64 %156, 1076
  %158 = tail call noalias i8* @malloc(i64 %157) #9
  %159 = load %struct.opj_tcp*, %struct.opj_tcp** %95, align 8, !tbaa !139
  %160 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %159, i64 %154, i32 15
  %161 = bitcast %struct.opj_tccp** %160 to i8**
  store i8* %158, i8** %161, align 8, !tbaa !162
  %162 = add nuw nsw i64 %154, 1
  %163 = load i32, i32* %83, align 8, !tbaa !136
  %164 = load i32, i32* %91, align 4, !tbaa !137
  %165 = mul nsw i32 %164, %163
  %166 = sext i32 %165 to i64
  %167 = icmp slt i64 %162, %166
  br i1 %167, label %153, label %168

168:                                              ; preds = %153, %151
  %169 = phi i64 [ %152, %151 ], [ %166, %153 ]
  %170 = tail call noalias i8* @calloc(i64 %169, i64 8) #9
  %171 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 12
  %172 = bitcast i8*** %171 to i8**
  store i8* %170, i8** %172, align 8, !tbaa !160
  %173 = load i32, i32* %83, align 8, !tbaa !136
  %174 = load i32, i32* %91, align 4, !tbaa !137
  %175 = mul nsw i32 %174, %173
  %176 = sext i32 %175 to i64
  %177 = tail call noalias i8* @calloc(i64 %176, i64 4) #9
  %178 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 13
  %179 = bitcast i32** %178 to i8**
  store i8* %177, i8** %179, align 8, !tbaa !159
  %180 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  store i32 4, i32* %180, align 8, !tbaa !175
  %181 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 17
  %182 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %181, align 8, !tbaa !142
  %183 = icmp eq %struct.opj_codestream_info* %182, null
  br i1 %183, label %209, label %184

184:                                              ; preds = %168
  %185 = load i32, i32* %11, align 8, !tbaa !199
  %186 = load i32, i32* %15, align 8, !tbaa !201
  %187 = sub nsw i32 %185, %186
  %188 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %182, i64 0, i32 3
  store i32 %187, i32* %188, align 8, !tbaa !213
  %189 = load i32, i32* %13, align 4, !tbaa !200
  %190 = load i32, i32* %17, align 4, !tbaa !202
  %191 = sub nsw i32 %189, %190
  %192 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %182, i64 0, i32 4
  store i32 %191, i32* %192, align 4, !tbaa !214
  %193 = load i32, i32* %44, align 8, !tbaa !127
  %194 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %182, i64 0, i32 12
  store i32 %193, i32* %194, align 4, !tbaa !215
  %195 = load i32, i32* %83, align 8, !tbaa !136
  %196 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %182, i64 0, i32 10
  store i32 %195, i32* %196, align 4, !tbaa !216
  %197 = load i32, i32* %91, align 4, !tbaa !137
  %198 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %182, i64 0, i32 11
  store i32 %197, i32* %198, align 8, !tbaa !217
  %199 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %182, i64 0, i32 6
  %200 = bitcast i32* %23 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 8, !tbaa !43
  %202 = shufflevector <4 x i32> %201, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %203 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> %202, <4 x i32>* %203, align 4, !tbaa !43
  %204 = mul nsw i32 %197, %195
  %205 = sext i32 %204 to i64
  %206 = tail call noalias i8* @calloc(i64 %205, i64 608) #9
  %207 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %182, i64 0, i32 21
  %208 = bitcast %struct.opj_tile_info** %207 to i8**
  store i8* %206, i8** %208, align 8, !tbaa !143
  br label %209

209:                                              ; preds = %184, %168, %36
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_cod(%struct.opj_j2k* nocapture) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %3 = load %struct.opj_cio*, %struct.opj_cio** %2, align 8, !tbaa !173
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8, !tbaa !175
  %6 = icmp eq i32 %5, 16
  br i1 %6, label %7, label %16

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %9 = load %struct.opj_cp*, %struct.opj_cp** %8, align 8, !tbaa !25
  %10 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %9, i64 0, i32 28
  %11 = load %struct.opj_tcp*, %struct.opj_tcp** %10, align 8, !tbaa !139
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4, !tbaa !183
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %14
  br label %19

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 14
  %18 = load %struct.opj_tcp*, %struct.opj_tcp** %17, align 8, !tbaa !157
  br label %19

19:                                               ; preds = %16, %7
  %20 = phi %struct.opj_tcp* [ %15, %7 ], [ %18, %16 ]
  %21 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %22 = load %struct.opj_image*, %struct.opj_image** %21, align 8, !tbaa !174
  %23 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %24 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %25 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 0, i32 1
  store i32 %24, i32* %25, align 4, !tbaa !218
  %26 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %27 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 0, i32 2
  store i32 %26, i32* %27, align 8, !tbaa !148
  %28 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %29 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 0, i32 3
  store i32 %28, i32* %29, align 4, !tbaa !219
  %30 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %31 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 0, i32 4
  store i32 %30, i32* %31, align 8, !tbaa !220
  %32 = tail call i32 @cio_tell(%struct.opj_cio* %3) #9
  %33 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %22, i64 0, i32 4
  %34 = load i32, i32* %33, align 8, !tbaa !127
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %49

36:                                               ; preds = %19
  %37 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 0, i32 15
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi i64 [ 0, %36 ], [ %45, %38 ]
  %40 = load i32, i32* %25, align 4, !tbaa !218
  %41 = and i32 %40, 1
  %42 = load %struct.opj_tccp*, %struct.opj_tccp** %37, align 8, !tbaa !162
  %43 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %42, i64 %39, i32 0
  store i32 %41, i32* %43, align 4, !tbaa !221
  tail call void @cio_seek(%struct.opj_cio* %3, i32 %32) #9
  %44 = trunc i64 %39 to i32
  tail call fastcc void @j2k_read_cox(%struct.opj_j2k* %0, i32 %44)
  %45 = add nuw nsw i64 %39, 1
  %46 = load i32, i32* %33, align 8, !tbaa !127
  %47 = sext i32 %46 to i64
  %48 = icmp slt i64 %45, %47
  br i1 %48, label %38, label %49

49:                                               ; preds = %38, %19
  %50 = phi i32 [ %34, %19 ], [ %46, %38 ]
  %51 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 17
  %52 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %51, align 8, !tbaa !142
  %53 = icmp eq %struct.opj_codestream_info* %52, null
  br i1 %53, label %80, label %54

54:                                               ; preds = %49
  %55 = load i32, i32* %27, align 8, !tbaa !148
  %56 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %52, i64 0, i32 5
  store i32 %55, i32* %56, align 8, !tbaa !222
  %57 = load i32, i32* %29, align 4, !tbaa !219
  %58 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %52, i64 0, i32 13
  store i32 %57, i32* %58, align 8, !tbaa !223
  %59 = sext i32 %50 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call noalias i8* @malloc(i64 %60) #9
  %62 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %52, i64 0, i32 14
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !tbaa !224
  %64 = load i32, i32* %33, align 8, !tbaa !127
  %65 = icmp sgt i32 %64, 0
  %66 = bitcast i8* %61 to i32*
  br i1 %65, label %67, label %80

67:                                               ; preds = %54
  %68 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 0, i32 15
  %69 = load %struct.opj_tccp*, %struct.opj_tccp** %68, align 8, !tbaa !162
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i64 [ 0, %67 ], [ %76, %70 ]
  %72 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %71, i32 1
  %73 = load i32, i32* %72, align 4, !tbaa !95
  %74 = add nsw i32 %73, -1
  %75 = getelementptr inbounds i32, i32* %66, i64 %71
  store i32 %74, i32* %75, align 4, !tbaa !43
  %76 = add nuw nsw i64 %71, 1
  %77 = load i32, i32* %33, align 8, !tbaa !127
  %78 = sext i32 %77 to i64
  %79 = icmp slt i64 %76, %78
  br i1 %79, label %70, label %80

80:                                               ; preds = %70, %54, %49
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_coc(%struct.opj_j2k* nocapture) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8, !tbaa !175
  %4 = icmp eq i32 %3, 16
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %7 = load %struct.opj_cp*, %struct.opj_cp** %6, align 8, !tbaa !25
  %8 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 28
  %9 = load %struct.opj_tcp*, %struct.opj_tcp** %8, align 8, !tbaa !139
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4, !tbaa !183
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %12
  br label %17

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 14
  %16 = load %struct.opj_tcp*, %struct.opj_tcp** %15, align 8, !tbaa !157
  br label %17

17:                                               ; preds = %14, %5
  %18 = phi %struct.opj_tcp* [ %13, %5 ], [ %16, %14 ]
  %19 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %20 = load %struct.opj_image*, %struct.opj_image** %19, align 8, !tbaa !174
  %21 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %22 = load %struct.opj_cio*, %struct.opj_cio** %21, align 8, !tbaa !173
  %23 = tail call i32 @cio_read(%struct.opj_cio* %22, i32 2) #9
  %24 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %20, i64 0, i32 4
  %25 = load i32, i32* %24, align 8, !tbaa !127
  %26 = icmp slt i32 %25, 257
  %27 = select i1 %26, i32 1, i32 2
  %28 = tail call i32 @cio_read(%struct.opj_cio* %22, i32 %27) #9
  %29 = tail call i32 @cio_read(%struct.opj_cio* %22, i32 1) #9
  %30 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %18, i64 0, i32 15
  %31 = load %struct.opj_tccp*, %struct.opj_tccp** %30, align 8, !tbaa !162
  %32 = sext i32 %28 to i64
  %33 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %31, i64 %32, i32 0
  store i32 %29, i32* %33, align 4, !tbaa !221
  tail call fastcc void @j2k_read_cox(%struct.opj_j2k* nonnull %0, i32 %28)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_rgn(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8, !tbaa !175
  %4 = icmp eq i32 %3, 16
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %7 = load %struct.opj_cp*, %struct.opj_cp** %6, align 8, !tbaa !25
  %8 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 28
  %9 = load %struct.opj_tcp*, %struct.opj_tcp** %8, align 8, !tbaa !139
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4, !tbaa !183
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %12
  br label %17

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 14
  %16 = load %struct.opj_tcp*, %struct.opj_tcp** %15, align 8, !tbaa !157
  br label %17

17:                                               ; preds = %14, %5
  %18 = phi %struct.opj_tcp* [ %13, %5 ], [ %16, %14 ]
  %19 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %20 = load %struct.opj_cio*, %struct.opj_cio** %19, align 8, !tbaa !173
  %21 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %22 = load %struct.opj_image*, %struct.opj_image** %21, align 8, !tbaa !174
  %23 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %22, i64 0, i32 4
  %24 = load i32, i32* %23, align 8, !tbaa !127
  %25 = tail call i32 @cio_read(%struct.opj_cio* %20, i32 2) #9
  %26 = icmp slt i32 %24, 257
  %27 = select i1 %26, i32 1, i32 2
  %28 = tail call i32 @cio_read(%struct.opj_cio* %20, i32 %27) #9
  %29 = tail call i32 @cio_read(%struct.opj_cio* %20, i32 1) #9
  %30 = tail call i32 @cio_read(%struct.opj_cio* %20, i32 1) #9
  %31 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %18, i64 0, i32 15
  %32 = load %struct.opj_tccp*, %struct.opj_tccp** %31, align 8, !tbaa !162
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 %33, i32 9
  store i32 %30, i32* %34, align 4, !tbaa !225
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_qcd(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %3 = load %struct.opj_cio*, %struct.opj_cio** %2, align 8, !tbaa !173
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %5 = load %struct.opj_image*, %struct.opj_image** %4, align 8, !tbaa !174
  %6 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %7 = tail call i32 @cio_tell(%struct.opj_cio* %3) #9
  %8 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 4
  %9 = load i32, i32* %8, align 8, !tbaa !127
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %1
  %12 = add nsw i32 %6, -2
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i32 [ 0, %11 ], [ %15, %13 ]
  tail call void @cio_seek(%struct.opj_cio* %3, i32 %7) #9
  tail call fastcc void @j2k_read_qcx(%struct.opj_j2k* %0, i32 %14, i32 %12)
  %15 = add nuw nsw i32 %14, 1
  %16 = load i32, i32* %8, align 8, !tbaa !127
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %13, label %18

18:                                               ; preds = %13, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_qcc(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %3 = load %struct.opj_image*, %struct.opj_image** %2, align 8, !tbaa !174
  %4 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %3, i64 0, i32 4
  %5 = load i32, i32* %4, align 8, !tbaa !127
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %7 = load %struct.opj_cio*, %struct.opj_cio** %6, align 8, !tbaa !173
  %8 = tail call i32 @cio_read(%struct.opj_cio* %7, i32 2) #9
  %9 = icmp slt i32 %5, 257
  %10 = select i1 %9, i32 1, i32 2
  %11 = tail call i32 @cio_read(%struct.opj_cio* %7, i32 %10) #9
  %12 = add nsw i32 %8, -2
  %13 = sub i32 %12, %10
  tail call fastcc void @j2k_read_qcx(%struct.opj_j2k* %0, i32 %11, i32 %13)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_poc(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %3 = load %struct.opj_image*, %struct.opj_image** %2, align 8, !tbaa !174
  %4 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %3, i64 0, i32 4
  %5 = load i32, i32* %4, align 8, !tbaa !127
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8, !tbaa !175
  %8 = icmp eq i32 %7, 16
  br i1 %8, label %9, label %18

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %11 = load %struct.opj_cp*, %struct.opj_cp** %10, align 8, !tbaa !25
  %12 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %11, i64 0, i32 28
  %13 = load %struct.opj_tcp*, %struct.opj_tcp** %12, align 8, !tbaa !139
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 4, !tbaa !183
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %16
  br label %21

18:                                               ; preds = %1
  %19 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 14
  %20 = load %struct.opj_tcp*, %struct.opj_tcp** %19, align 8, !tbaa !157
  br label %21

21:                                               ; preds = %18, %9
  %22 = phi %struct.opj_tcp* [ %17, %9 ], [ %20, %18 ]
  %23 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %24 = load %struct.opj_cio*, %struct.opj_cio** %23, align 8, !tbaa !173
  %25 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 7
  %26 = load i32, i32* %25, align 8, !tbaa !212
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 6
  %30 = load i32, i32* %29, align 4, !tbaa !140
  %31 = add nsw i32 %30, 1
  br label %32

32:                                               ; preds = %28, %21
  %33 = phi i32 [ %31, %28 ], [ 0, %21 ]
  store i32 1, i32* %25, align 8, !tbaa !212
  %34 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 2) #9
  %35 = add nsw i32 %34, -2
  %36 = icmp slt i32 %5, 257
  %37 = select i1 %36, i32 1, i32 2
  %38 = shl nuw nsw i32 %37, 1
  %39 = add nuw nsw i32 %38, 5
  %40 = sdiv i32 %35, %39
  %41 = add nsw i32 %40, %33
  %42 = icmp sgt i32 %40, 0
  br i1 %42, label %43, label %64

43:                                               ; preds = %32
  %44 = sext i32 %33 to i64
  %45 = sext i32 %41 to i64
  br label %46

46:                                               ; preds = %46, %43
  %47 = phi i64 [ %44, %43 ], [ %62, %46 ]
  %48 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 1) #9
  %49 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 8, i64 %47, i32 0
  store i32 %48, i32* %49, align 4, !tbaa !226
  %50 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 %37) #9
  %51 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 8, i64 %47, i32 1
  store i32 %50, i32* %51, align 4, !tbaa !227
  %52 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 2) #9
  %53 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 8, i64 %47, i32 2
  store i32 %52, i32* %53, align 4, !tbaa !228
  %54 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 1) #9
  %55 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 8, i64 %47, i32 3
  store i32 %54, i32* %55, align 4, !tbaa !229
  %56 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 %37) #9
  %57 = icmp slt i32 %56, %5
  %58 = select i1 %57, i32 %56, i32 %5
  %59 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 8, i64 %47, i32 4
  store i32 %58, i32* %59, align 4, !tbaa !230
  %60 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 1) #9
  %61 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 8, i64 %47, i32 9
  store i32 %60, i32* %61, align 4, !tbaa !231
  %62 = add nsw i64 %47, 1
  %63 = icmp slt i64 %62, %45
  br i1 %63, label %46, label %64

64:                                               ; preds = %46, %32
  %65 = add nsw i32 %41, -1
  %66 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 6
  store i32 %65, i32* %66, align 4, !tbaa !140
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_tlm(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %3 = load %struct.opj_cio*, %struct.opj_cio** %2, align 8, !tbaa !173
  %4 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %5 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %6 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %7 = lshr i32 %6, 4
  %8 = and i32 %7, 3
  %9 = lshr i32 %6, 6
  %10 = and i32 %9, 1
  %11 = add nsw i32 %4, -4
  %12 = shl nuw nsw i32 %10, 1
  %13 = add nuw nsw i32 %8, 2
  %14 = add nuw nsw i32 %13, %12
  %15 = sdiv i32 %11, %14
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %26

17:                                               ; preds = %1
  %18 = icmp eq i32 %10, 0
  %19 = select i1 %18, i32 2, i32 4
  br label %20

20:                                               ; preds = %20, %17
  %21 = phi i32 [ 0, %17 ], [ %24, %20 ]
  %22 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 %8) #9
  %23 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 %19) #9
  %24 = add nuw nsw i32 %21, 1
  %25 = icmp eq i32 %24, %15
  br i1 %25, label %26, label %20

26:                                               ; preds = %20, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_plm(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %3 = load %struct.opj_cio*, %struct.opj_cio** %2, align 8, !tbaa !173
  %4 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %5 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %6 = add nsw i32 %4, -3
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %25

8:                                                ; preds = %22, %1
  %9 = phi i32 [ %23, %22 ], [ %6, %1 ]
  %10 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 4) #9
  %11 = add nsw i32 %9, -4
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %13, %8
  %14 = phi i32 [ %17, %13 ], [ %11, %8 ]
  %15 = phi i32 [ %19, %13 ], [ %10, %8 ]
  %16 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %17 = add nsw i32 %14, -1
  %18 = icmp sgt i32 %14, 1
  %19 = add nsw i32 %15, -1
  %20 = icmp sgt i32 %19, 0
  %21 = and i1 %18, %20
  br i1 %21, label %13, label %22

22:                                               ; preds = %13, %8
  %23 = phi i32 [ %11, %8 ], [ %17, %13 ]
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %8, label %25

25:                                               ; preds = %22, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_plt(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %3 = load %struct.opj_cio*, %struct.opj_cio** %2, align 8, !tbaa !173
  %4 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %5 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %6 = add nsw i32 %4, -3
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %8, %1
  %9 = phi i32 [ %11, %8 ], [ %6, %1 ]
  %10 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %11 = add nsw i32 %9, -1
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %8, label %13

13:                                               ; preds = %8, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_ppm(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %3 = load %struct.opj_cp*, %struct.opj_cp** %2, align 8, !tbaa !25
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %5 = load %struct.opj_cio*, %struct.opj_cio** %4, align 8, !tbaa !173
  %6 = tail call i32 @cio_read(%struct.opj_cio* %5, i32 2) #9
  %7 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 24
  store i32 1, i32* %7, align 8, !tbaa !232
  %8 = tail call i32 @cio_read(%struct.opj_cio* %5, i32 1) #9
  %9 = add nsw i32 %6, -3
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %105

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 26
  %13 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 25
  %14 = icmp eq i32 %8, 0
  %15 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 22
  %16 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 23
  %17 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 27
  %18 = load i32, i32* %12, align 8, !tbaa !233
  br i1 %14, label %19, label %60

19:                                               ; preds = %54, %11
  %20 = phi i32 [ %58, %54 ], [ %18, %11 ]
  %21 = phi i32 [ %57, %54 ], [ %9, %11 ]
  %22 = icmp eq i32 %20, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %19
  %24 = tail call i32 @cio_read(%struct.opj_cio* %5, i32 4) #9
  %25 = add nsw i32 %21, -4
  br label %26

26:                                               ; preds = %23, %19
  %27 = phi i32 [ %24, %23 ], [ %20, %19 ]
  %28 = phi i32 [ %25, %23 ], [ %21, %19 ]
  %29 = load i32, i32* %13, align 4, !tbaa !234
  %30 = sext i32 %27 to i64
  %31 = tail call noalias i8* @malloc(i64 %30) #9
  store i8* %31, i8** %15, align 8, !tbaa !235
  store i8* %31, i8** %16, align 8, !tbaa !163
  store i32 %27, i32* %17, align 4, !tbaa !236
  %32 = icmp sgt i32 %27, 0
  br i1 %32, label %33, label %54

33:                                               ; preds = %26
  %34 = sext i32 %29 to i64
  br label %35

35:                                               ; preds = %49, %33
  %36 = phi i64 [ %34, %33 ], [ %43, %49 ]
  %37 = phi i32 [ %28, %33 ], [ %44, %49 ]
  %38 = phi i32 [ %27, %33 ], [ %50, %49 ]
  %39 = tail call i32 @cio_read(%struct.opj_cio* %5, i32 1) #9
  %40 = trunc i32 %39 to i8
  %41 = load i8*, i8** %15, align 8, !tbaa !235
  %42 = getelementptr inbounds i8, i8* %41, i64 %36
  store i8 %40, i8* %42, align 1, !tbaa !15
  %43 = add nsw i64 %36, 1
  %44 = add nsw i32 %37, -1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %35
  %47 = trunc i64 %43 to i32
  %48 = add nsw i32 %38, -1
  store i32 %48, i32* %12, align 8, !tbaa !233
  store i32 %47, i32* %13, align 4, !tbaa !234
  br label %105

49:                                               ; preds = %35
  %50 = add nsw i32 %38, -1
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %35, label %52

52:                                               ; preds = %49
  %53 = trunc i64 %43 to i32
  br label %54

54:                                               ; preds = %52, %26
  %55 = phi i32 [ %27, %26 ], [ 0, %52 ]
  %56 = phi i32 [ %29, %26 ], [ %53, %52 ]
  %57 = phi i32 [ %28, %26 ], [ %44, %52 ]
  %58 = add nsw i32 %55, -1
  store i32 %58, i32* %12, align 8, !tbaa !233
  store i32 %56, i32* %13, align 4, !tbaa !234
  %59 = icmp sgt i32 %57, 0
  br i1 %59, label %19, label %105

60:                                               ; preds = %99, %11
  %61 = phi i32 [ %103, %99 ], [ %18, %11 ]
  %62 = phi i32 [ %102, %99 ], [ %9, %11 ]
  %63 = icmp eq i32 %61, 0
  br i1 %63, label %64, label %67

64:                                               ; preds = %60
  %65 = tail call i32 @cio_read(%struct.opj_cio* %5, i32 4) #9
  %66 = add nsw i32 %62, -4
  br label %67

67:                                               ; preds = %64, %60
  %68 = phi i32 [ %65, %64 ], [ %61, %60 ]
  %69 = phi i32 [ %66, %64 ], [ %62, %60 ]
  %70 = load i32, i32* %13, align 4, !tbaa !234
  %71 = load i8*, i8** %15, align 8, !tbaa !235
  %72 = add nsw i32 %70, %68
  %73 = sext i32 %72 to i64
  %74 = tail call i8* @realloc(i8* %71, i64 %73) #9
  store i8* %74, i8** %15, align 8, !tbaa !235
  store i8* %74, i8** %16, align 8, !tbaa !163
  %75 = load i32, i32* %13, align 4, !tbaa !234
  %76 = add nsw i32 %75, %68
  store i32 %76, i32* %17, align 4, !tbaa !236
  %77 = icmp sgt i32 %68, 0
  br i1 %77, label %78, label %99

78:                                               ; preds = %67
  %79 = sext i32 %70 to i64
  br label %80

80:                                               ; preds = %94, %78
  %81 = phi i64 [ %79, %78 ], [ %88, %94 ]
  %82 = phi i32 [ %69, %78 ], [ %89, %94 ]
  %83 = phi i32 [ %68, %78 ], [ %95, %94 ]
  %84 = tail call i32 @cio_read(%struct.opj_cio* %5, i32 1) #9
  %85 = trunc i32 %84 to i8
  %86 = load i8*, i8** %15, align 8, !tbaa !235
  %87 = getelementptr inbounds i8, i8* %86, i64 %81
  store i8 %85, i8* %87, align 1, !tbaa !15
  %88 = add nsw i64 %81, 1
  %89 = add nsw i32 %82, -1
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %94

91:                                               ; preds = %80
  %92 = trunc i64 %88 to i32
  %93 = add nsw i32 %83, -1
  store i32 %93, i32* %12, align 8, !tbaa !233
  store i32 %92, i32* %13, align 4, !tbaa !234
  br label %105

94:                                               ; preds = %80
  %95 = add nsw i32 %83, -1
  %96 = icmp sgt i32 %95, 0
  br i1 %96, label %80, label %97

97:                                               ; preds = %94
  %98 = trunc i64 %88 to i32
  br label %99

99:                                               ; preds = %97, %67
  %100 = phi i32 [ %68, %67 ], [ 0, %97 ]
  %101 = phi i32 [ %70, %67 ], [ %98, %97 ]
  %102 = phi i32 [ %69, %67 ], [ %89, %97 ]
  %103 = add nsw i32 %100, -1
  store i32 %103, i32* %12, align 8, !tbaa !233
  store i32 %101, i32* %13, align 4, !tbaa !234
  %104 = icmp sgt i32 %102, 0
  br i1 %104, label %60, label %105

105:                                              ; preds = %99, %91, %54, %46, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_ppt(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %3 = load %struct.opj_cp*, %struct.opj_cp** %2, align 8, !tbaa !25
  %4 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %3, i64 0, i32 28
  %5 = load %struct.opj_tcp*, %struct.opj_tcp** %4, align 8, !tbaa !139
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4, !tbaa !183
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %10 = load %struct.opj_cio*, %struct.opj_cio** %9, align 8, !tbaa !173
  %11 = tail call i32 @cio_read(%struct.opj_cio* %10, i32 2) #9
  %12 = tail call i32 @cio_read(%struct.opj_cio* %10, i32 1) #9
  %13 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 11
  store i32 1, i32* %13, align 8, !tbaa !237
  %14 = icmp eq i32 %12, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %1
  %16 = add nsw i32 %11, -3
  %17 = sext i32 %16 to i64
  %18 = tail call noalias i8* @malloc(i64 %17) #9
  %19 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 9
  store i8* %18, i8** %19, align 8, !tbaa !238
  %20 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 12
  store i32 0, i32* %20, align 4, !tbaa !239
  br label %32

21:                                               ; preds = %1
  %22 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 9
  %23 = load i8*, i8** %22, align 8, !tbaa !238
  %24 = add nsw i32 %11, -3
  %25 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 12
  %26 = load i32, i32* %25, align 4, !tbaa !239
  %27 = add nsw i32 %26, %24
  %28 = sext i32 %27 to i64
  %29 = tail call i8* @realloc(i8* %23, i64 %28) #9
  store i8* %29, i8** %22, align 8, !tbaa !238
  %30 = load i32, i32* %25, align 4, !tbaa !239
  %31 = add nsw i32 %30, %24
  br label %32

32:                                               ; preds = %21, %15
  %33 = phi i32 [ %24, %21 ], [ %16, %15 ]
  %34 = phi i32 [ %30, %21 ], [ 0, %15 ]
  %35 = phi i8* [ %29, %21 ], [ %18, %15 ]
  %36 = phi i32 [ %31, %21 ], [ %16, %15 ]
  %37 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 10
  store i8* %35, i8** %37, align 8
  %38 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 13
  store i32 %36, i32* %38, align 8
  %39 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 12
  %40 = icmp sgt i32 %33, 0
  br i1 %40, label %41, label %56

41:                                               ; preds = %32
  %42 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 9
  %43 = sext i32 %34 to i64
  br label %44

44:                                               ; preds = %44, %41
  %45 = phi i64 [ %43, %41 ], [ %51, %44 ]
  %46 = phi i32 [ %33, %41 ], [ %52, %44 ]
  %47 = tail call i32 @cio_read(%struct.opj_cio* %10, i32 1) #9
  %48 = trunc i32 %47 to i8
  %49 = load i8*, i8** %42, align 8, !tbaa !238
  %50 = getelementptr inbounds i8, i8* %49, i64 %45
  store i8 %48, i8* %50, align 1, !tbaa !15
  %51 = add nsw i64 %45, 1
  %52 = add nsw i32 %46, -1
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %44, label %54

54:                                               ; preds = %44
  %55 = trunc i64 %51 to i32
  br label %56

56:                                               ; preds = %54, %32
  %57 = phi i32 [ %34, %32 ], [ %55, %54 ]
  store i32 %57, i32* %39, align 4, !tbaa !239
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_crg(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %3 = load %struct.opj_cio*, %struct.opj_cio** %2, align 8, !tbaa !173
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %5 = load %struct.opj_image*, %struct.opj_image** %4, align 8, !tbaa !174
  %6 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 4
  %7 = load i32, i32* %6, align 8, !tbaa !127
  %8 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %9 = icmp sgt i32 %7, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %10, %1
  %11 = phi i32 [ %14, %10 ], [ 0, %1 ]
  %12 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %13 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %14 = add nuw nsw i32 %11, 1
  %15 = icmp eq i32 %14, %7
  br i1 %15, label %16, label %10

16:                                               ; preds = %10, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_com(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %3 = load %struct.opj_cio*, %struct.opj_cio** %2, align 8, !tbaa !173
  %4 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 2) #9
  %5 = add nsw i32 %4, -2
  tail call void @cio_skip(%struct.opj_cio* %3, i32 %5) #9
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @j2k_read_unk(%struct.opj_j2k* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 0
  %3 = load %struct.opj_common_struct*, %struct.opj_common_struct** %2, align 8, !tbaa !158
  %4 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %3, i32 2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i64 0, i64 0)) #9
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define internal fastcc void @j2k_read_qcx(%struct.opj_j2k* nocapture readonly, i32, i32) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8, !tbaa !175
  %6 = icmp eq i32 %5, 16
  br i1 %6, label %7, label %16

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %9 = load %struct.opj_cp*, %struct.opj_cp** %8, align 8, !tbaa !25
  %10 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %9, i64 0, i32 28
  %11 = load %struct.opj_tcp*, %struct.opj_tcp** %10, align 8, !tbaa !139
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4, !tbaa !183
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %14
  br label %19

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 14
  %18 = load %struct.opj_tcp*, %struct.opj_tcp** %17, align 8, !tbaa !157
  br label %19

19:                                               ; preds = %16, %7
  %20 = phi %struct.opj_tcp* [ %15, %7 ], [ %18, %16 ]
  %21 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 0, i32 15
  %22 = load %struct.opj_tccp*, %struct.opj_tccp** %21, align 8, !tbaa !162
  %23 = sext i32 %1 to i64
  %24 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %25 = load %struct.opj_cio*, %struct.opj_cio** %24, align 8, !tbaa !173
  %26 = tail call i32 @cio_read(%struct.opj_cio* %25, i32 1) #9
  %27 = and i32 %26, 31
  %28 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %22, i64 %23, i32 6
  store i32 %27, i32* %28, align 4, !tbaa !98
  %29 = ashr i32 %26, 5
  %30 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %22, i64 %23, i32 8
  store i32 %29, i32* %30, align 4, !tbaa !240
  %31 = icmp eq i32 %27, 1
  br i1 %31, label %46, label %32

32:                                               ; preds = %19
  %33 = icmp eq i32 %27, 0
  %34 = add nsw i32 %2, -1
  %35 = sdiv i32 %34, 2
  %36 = select i1 %33, i32 %34, i32 %35
  %37 = icmp ugt i32 %36, 96
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 0
  %40 = load %struct.opj_common_struct*, %struct.opj_common_struct** %39, align 8, !tbaa !158
  %41 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %40, i32 2, i8* getelementptr inbounds ([148 x i8], [148 x i8]* @.str.10, i64 0, i64 0), i32 %36, i32 97) #9
  %42 = load i32, i32* %28, align 4, !tbaa !98
  br label %43

43:                                               ; preds = %38, %32
  %44 = phi i32 [ %27, %32 ], [ %42, %38 ]
  %45 = icmp sgt i32 %36, 0
  br i1 %45, label %46, label %72

46:                                               ; preds = %43, %19
  %47 = phi i32 [ %36, %43 ], [ 1, %19 ]
  %48 = phi i32 [ %44, %43 ], [ 1, %19 ]
  %49 = zext i32 %47 to i64
  br label %50

50:                                               ; preds = %68, %46
  %51 = phi i64 [ 0, %46 ], [ %69, %68 ]
  %52 = phi i32 [ %48, %46 ], [ %70, %68 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %50
  %55 = tail call i32 @cio_read(%struct.opj_cio* %25, i32 1) #9
  %56 = lshr i32 %55, 3
  br label %61

57:                                               ; preds = %50
  %58 = tail call i32 @cio_read(%struct.opj_cio* %25, i32 2) #9
  %59 = ashr i32 %58, 11
  %60 = and i32 %58, 2047
  br label %61

61:                                               ; preds = %57, %54
  %62 = phi i32 [ %56, %54 ], [ %59, %57 ]
  %63 = phi i32 [ 0, %54 ], [ %60, %57 ]
  %64 = icmp ult i64 %51, 97
  br i1 %64, label %65, label %68

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %22, i64 %23, i32 7, i64 %51, i32 0
  store i32 %62, i32* %66, align 4, !tbaa !101
  %67 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %22, i64 %23, i32 7, i64 %51, i32 1
  store i32 %63, i32* %67, align 4, !tbaa !99
  br label %68

68:                                               ; preds = %65, %61
  %69 = add nuw nsw i64 %51, 1
  %70 = load i32, i32* %28, align 4, !tbaa !98
  %71 = icmp eq i64 %69, %49
  br i1 %71, label %72, label %50

72:                                               ; preds = %68, %43
  %73 = phi i32 [ %44, %43 ], [ %70, %68 ]
  %74 = icmp eq i32 %73, 1
  br i1 %74, label %75, label %92

75:                                               ; preds = %72
  %76 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %22, i64 %23, i32 7, i64 0, i32 0
  %77 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %22, i64 %23, i32 7, i64 0, i32 1
  br label %78

78:                                               ; preds = %78, %75
  %79 = phi i64 [ 1, %75 ], [ %90, %78 ]
  %80 = load i32, i32* %76, align 4, !tbaa !101
  %81 = trunc i64 %79 to i32
  %82 = add i32 %81, -1
  %83 = udiv i32 %82, 3
  %84 = sub nsw i32 %80, %83
  %85 = icmp sgt i32 %84, 0
  %86 = select i1 %85, i32 %84, i32 0
  %87 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %22, i64 %23, i32 7, i64 %79, i32 0
  store i32 %86, i32* %87, align 4, !tbaa !101
  %88 = load i32, i32* %77, align 4, !tbaa !99
  %89 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %22, i64 %23, i32 7, i64 %79, i32 1
  store i32 %88, i32* %89, align 4, !tbaa !99
  %90 = add nuw nsw i64 %79, 1
  %91 = icmp eq i64 %90, 97
  br i1 %91, label %92, label %78

92:                                               ; preds = %78, %72
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @j2k_read_cox(%struct.opj_j2k* nocapture, i32) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %4 = load %struct.opj_cp*, %struct.opj_cp** %3, align 8, !tbaa !25
  %5 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8, !tbaa !175
  %7 = icmp eq i32 %6, 16
  br i1 %7, label %8, label %15

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %4, i64 0, i32 28
  %10 = load %struct.opj_tcp*, %struct.opj_tcp** %9, align 8, !tbaa !139
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4, !tbaa !183
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %10, i64 %13
  br label %18

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 14
  %17 = load %struct.opj_tcp*, %struct.opj_tcp** %16, align 8, !tbaa !157
  br label %18

18:                                               ; preds = %15, %8
  %19 = phi %struct.opj_tcp* [ %14, %8 ], [ %17, %15 ]
  %20 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %19, i64 0, i32 15
  %21 = load %struct.opj_tccp*, %struct.opj_tccp** %20, align 8, !tbaa !162
  %22 = sext i32 %1 to i64
  %23 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %24 = load %struct.opj_cio*, %struct.opj_cio** %23, align 8, !tbaa !173
  %25 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 1) #9
  %26 = add i32 %25, 1
  %27 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %21, i64 %22, i32 1
  store i32 %26, i32* %27, align 4, !tbaa !95
  %28 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %4, i64 0, i32 10
  %29 = load i32, i32* %28, align 4, !tbaa !168
  %30 = icmp slt i32 %29, %26
  br i1 %30, label %37, label %31

31:                                               ; preds = %18
  %32 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 0
  %33 = load %struct.opj_common_struct*, %struct.opj_common_struct** %32, align 8, !tbaa !158
  %34 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %33, i32 1, i8* getelementptr inbounds ([158 x i8], [158 x i8]* @.str.9, i64 0, i64 0), i32 %1) #9
  %35 = load i32, i32* %5, align 8, !tbaa !175
  %36 = or i32 %35, 128
  store i32 %36, i32* %5, align 8, !tbaa !175
  br label %37

37:                                               ; preds = %31, %18
  %38 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 1) #9
  %39 = add i32 %38, 2
  %40 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %21, i64 %22, i32 2
  store i32 %39, i32* %40, align 4, !tbaa !241
  %41 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 1) #9
  %42 = add i32 %41, 2
  %43 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %21, i64 %22, i32 3
  store i32 %42, i32* %43, align 4, !tbaa !242
  %44 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 1) #9
  %45 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %21, i64 %22, i32 4
  store i32 %44, i32* %45, align 4, !tbaa !243
  %46 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 1) #9
  %47 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %21, i64 %22, i32 5
  store i32 %46, i32* %47, align 4, !tbaa !97
  %48 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %21, i64 %22, i32 0
  %49 = load i32, i32* %48, align 4, !tbaa !221
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %66, label %52

52:                                               ; preds = %37
  %53 = load i32, i32* %27, align 4, !tbaa !95
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %55, label %66

55:                                               ; preds = %55, %52
  %56 = phi i64 [ %62, %55 ], [ 0, %52 ]
  %57 = tail call i32 @cio_read(%struct.opj_cio* %24, i32 1) #9
  %58 = and i32 %57, 15
  %59 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %21, i64 %22, i32 10, i64 %56
  store i32 %58, i32* %59, align 4, !tbaa !43
  %60 = ashr i32 %57, 4
  %61 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %21, i64 %22, i32 11, i64 %56
  store i32 %60, i32* %61, align 4, !tbaa !43
  %62 = add nuw nsw i64 %56, 1
  %63 = load i32, i32* %27, align 4, !tbaa !95
  %64 = sext i32 %63 to i64
  %65 = icmp slt i64 %62, %64
  br i1 %65, label %55, label %66

66:                                               ; preds = %55, %52, %37
  %67 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 17
  %68 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %67, align 8, !tbaa !142
  %69 = icmp ne %struct.opj_codestream_info* %68, null
  %70 = icmp eq i32 %1, 0
  %71 = and i1 %70, %69
  br i1 %71, label %72, label %108

72:                                               ; preds = %66
  %73 = load i32, i32* %27, align 4, !tbaa !95
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %75, label %108

75:                                               ; preds = %72
  %76 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %68, i64 0, i32 21
  %77 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  br label %78

78:                                               ; preds = %103, %75
  %79 = phi i64 [ 0, %75 ], [ %104, %103 ]
  %80 = load i32, i32* %48, align 4, !tbaa !221
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %95, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %21, i64 %22, i32 10, i64 %79
  %85 = load i32, i32* %84, align 4, !tbaa !43
  %86 = load %struct.opj_tile_info*, %struct.opj_tile_info** %76, align 8, !tbaa !143
  %87 = load i32, i32* %77, align 4, !tbaa !183
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %86, i64 %88, i32 7, i64 %79
  store i32 %85, i32* %89, align 4, !tbaa !43
  %90 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %21, i64 %22, i32 11, i64 %79
  %91 = load i32, i32* %90, align 4, !tbaa !43
  %92 = load i32, i32* %77, align 4, !tbaa !183
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %86, i64 %93, i32 8, i64 %79
  store i32 %91, i32* %94, align 4, !tbaa !43
  br label %103

95:                                               ; preds = %78
  %96 = load %struct.opj_tile_info*, %struct.opj_tile_info** %76, align 8, !tbaa !143
  %97 = load i32, i32* %77, align 4, !tbaa !183
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %96, i64 %98, i32 7, i64 %79
  store i32 15, i32* %99, align 4, !tbaa !43
  %100 = load i32, i32* %77, align 4, !tbaa !183
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %96, i64 %101, i32 7, i64 %79
  store i32 15, i32* %102, align 4, !tbaa !43
  br label %103

103:                                              ; preds = %95, %83
  %104 = add nuw nsw i64 %79, 1
  %105 = load i32, i32* %27, align 4, !tbaa !95
  %106 = sext i32 %105 to i64
  %107 = icmp slt i64 %104, %106
  br i1 %107, label %78, label %108

108:                                              ; preds = %103, %72, %66
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.opj_image* @j2k_decode_jpt_stream(%struct.opj_j2k*, %struct.opj_cio*, %struct.opj_codestream_info* nocapture readnone) #0 {
  %4 = alloca %struct.opj_jpt_msg_header, align 4
  %5 = bitcast %struct.opj_jpt_msg_header* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %5) #9
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 0
  %7 = load %struct.opj_common_struct*, %struct.opj_common_struct** %6, align 8, !tbaa !158
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  store %struct.opj_cio* %1, %struct.opj_cio** %8, align 8, !tbaa !173
  %9 = tail call %struct.opj_image* @opj_image_create0() #9
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  store %struct.opj_image* %9, %struct.opj_image** %10, align 8, !tbaa !174
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  store i32 1, i32* %11, align 8, !tbaa !175
  call void @jpt_init_msg_header(%struct.opj_jpt_msg_header* nonnull %4) #9
  call void @jpt_read_msg_header(%struct.opj_common_struct* %7, %struct.opj_cio* %1, %struct.opj_jpt_msg_header* nonnull %4) #9
  %12 = call i32 @cio_tell(%struct.opj_cio* %1) #9
  %13 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %4, i64 0, i32 2
  %14 = load i32, i32* %13, align 4, !tbaa !244
  %15 = icmp eq i32 %14, 6
  br i1 %15, label %16, label %18

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %4, i64 0, i32 5
  br label %21

18:                                               ; preds = %3
  call void @opj_image_destroy(%struct.opj_image* %9) #9
  %19 = load i32, i32* %13, align 4, !tbaa !244
  %20 = call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %7, i32 1, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4.8, i64 0, i64 0), i32 %19) #9
  br label %77

21:                                               ; preds = %70, %16
  %22 = phi i32 [ %38, %70 ], [ %12, %16 ]
  %23 = call i32 @cio_numbytesleft(%struct.opj_cio* %1) #9
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  call void @j2k_read_eoc(%struct.opj_j2k* nonnull %0)
  br label %77

26:                                               ; preds = %21
  %27 = call i32 @cio_tell(%struct.opj_cio* %1) #9
  %28 = sub nsw i32 %27, %22
  %29 = load i32, i32* %17, align 4, !tbaa !246
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %31, label %37

31:                                               ; preds = %26
  call void @jpt_read_msg_header(%struct.opj_common_struct* %7, %struct.opj_cio* %1, %struct.opj_jpt_msg_header* nonnull %4) #9
  %32 = call i32 @cio_tell(%struct.opj_cio* %1) #9
  %33 = load i32, i32* %13, align 4, !tbaa !244
  %34 = icmp eq i32 %33, 4
  br i1 %34, label %37, label %35

35:                                               ; preds = %31
  call void @opj_image_destroy(%struct.opj_image* %9) #9
  %36 = call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %7, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0)) #9
  br label %77

37:                                               ; preds = %31, %26
  %38 = phi i32 [ %32, %31 ], [ %22, %26 ]
  %39 = call i32 @cio_read(%struct.opj_cio* %1, i32 2) #9
  %40 = and i32 %39, -256
  %41 = icmp eq i32 %40, 65280
  br i1 %41, label %46, label %42

42:                                               ; preds = %37
  call void @opj_image_destroy(%struct.opj_image* %9) #9
  %43 = call i32 @cio_tell(%struct.opj_cio* %1) #9
  %44 = add nsw i32 %43, -2
  %45 = call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %7, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0), i32 %44, i32 %39) #9
  br label %77

46:                                               ; preds = %46, %37
  %47 = phi %struct.opj_dec_mstabent* [ %53, %46 ], [ getelementptr inbounds ([20 x %struct.opj_dec_mstabent], [20 x %struct.opj_dec_mstabent]* @j2k_dec_mstab, i64 0, i64 0), %37 ]
  %48 = getelementptr inbounds %struct.opj_dec_mstabent, %struct.opj_dec_mstabent* %47, i64 0, i32 0
  %49 = load i32, i32* %48, align 8, !tbaa !176
  %50 = icmp eq i32 %49, 0
  %51 = icmp eq i32 %49, %39
  %52 = or i1 %50, %51
  %53 = getelementptr inbounds %struct.opj_dec_mstabent, %struct.opj_dec_mstabent* %47, i64 1
  br i1 %52, label %54, label %46

54:                                               ; preds = %46
  %55 = load i32, i32* %11, align 8, !tbaa !175
  %56 = getelementptr inbounds %struct.opj_dec_mstabent, %struct.opj_dec_mstabent* %47, i64 0, i32 1
  %57 = load i32, i32* %56, align 4, !tbaa !178
  %58 = and i32 %57, %55
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %64

60:                                               ; preds = %54
  call void @opj_image_destroy(%struct.opj_image* %9) #9
  %61 = call i32 @cio_tell(%struct.opj_cio* %1) #9
  %62 = add nsw i32 %61, -2
  %63 = call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %7, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1.5, i64 0, i64 0), i32 %62, i32 %39) #9
  br label %77

64:                                               ; preds = %54
  %65 = getelementptr inbounds %struct.opj_dec_mstabent, %struct.opj_dec_mstabent* %47, i64 0, i32 2
  %66 = load void (%struct.opj_j2k*)*, void (%struct.opj_j2k*)** %65, align 8, !tbaa !179
  %67 = icmp eq void (%struct.opj_j2k*)* %66, null
  br i1 %67, label %70, label %68

68:                                               ; preds = %64
  call void %66(%struct.opj_j2k* nonnull %0) #9
  %69 = load i32, i32* %11, align 8, !tbaa !175
  br label %70

70:                                               ; preds = %68, %64
  %71 = phi i32 [ %55, %64 ], [ %69, %68 ]
  switch i32 %71, label %21 [
    i32 64, label %72
    i32 32, label %77
  ]

72:                                               ; preds = %70
  call void @j2k_read_eoc(%struct.opj_j2k* nonnull %0)
  %73 = load i32, i32* %11, align 8, !tbaa !175
  %74 = icmp eq i32 %73, 32
  br i1 %74, label %77, label %75

75:                                               ; preds = %72
  %76 = call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %7, i32 2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3.7, i64 0, i64 0)) #9
  br label %77

77:                                               ; preds = %75, %72, %70, %60, %42, %35, %25, %18
  %78 = phi %struct.opj_image* [ null, %18 ], [ %9, %72 ], [ %9, %75 ], [ %9, %25 ], [ null, %60 ], [ null, %42 ], [ null, %35 ], [ %9, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %5) #9
  ret %struct.opj_image* %78
}

; Function Attrs: nounwind uwtable
define noalias %struct.opj_j2k* @j2k_create_compress(%struct.opj_common_struct*) #0 {
  %2 = tail call noalias i8* @calloc(i64 1, i64 120) #9
  %3 = bitcast i8* %2 to %struct.opj_j2k*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i8* %2 to %struct.opj_common_struct**
  store %struct.opj_common_struct* %0, %struct.opj_common_struct** %6, align 8, !tbaa !158
  br label %7

7:                                                ; preds = %5, %1
  ret %struct.opj_j2k* %3
}

; Function Attrs: nounwind uwtable
define void @j2k_destroy_compress(%struct.opj_j2k*) #0 {
  %2 = icmp eq %struct.opj_j2k* %0, null
  br i1 %2, label %46, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %5 = load %struct.opj_cp*, %struct.opj_cp** %4, align 8, !tbaa !25
  %6 = icmp eq %struct.opj_cp* %5, null
  br i1 %6, label %44, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %5, i64 0, i32 17
  %9 = load i8*, i8** %8, align 8, !tbaa !165
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @free(i8* nonnull %9) #9
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %5, i64 0, i32 29
  %14 = load i32*, i32** %13, align 8, !tbaa !247
  %15 = icmp eq i32* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = bitcast i32* %14 to i8*
  tail call void @free(i8* %17) #9
  br label %18

18:                                               ; preds = %16, %12
  %19 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %5, i64 0, i32 18
  %20 = load i32, i32* %19, align 8, !tbaa !136
  %21 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %5, i64 0, i32 19
  %22 = load i32, i32* %21, align 4, !tbaa !137
  %23 = mul nsw i32 %22, %20
  %24 = icmp sgt i32 %23, 0
  %25 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %5, i64 0, i32 28
  %26 = load %struct.opj_tcp*, %struct.opj_tcp** %25, align 8, !tbaa !139
  br i1 %24, label %27, label %40

27:                                               ; preds = %27, %18
  %28 = phi i64 [ %33, %27 ], [ 0, %18 ]
  %29 = phi %struct.opj_tcp* [ %39, %27 ], [ %26, %18 ]
  %30 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %29, i64 %28, i32 15
  %31 = bitcast %struct.opj_tccp** %30 to i8**
  %32 = load i8*, i8** %31, align 8, !tbaa !162
  tail call void @free(i8* %32) #9
  %33 = add nuw nsw i64 %28, 1
  %34 = load i32, i32* %19, align 8, !tbaa !136
  %35 = load i32, i32* %21, align 4, !tbaa !137
  %36 = mul nsw i32 %35, %34
  %37 = sext i32 %36 to i64
  %38 = icmp slt i64 %33, %37
  %39 = load %struct.opj_tcp*, %struct.opj_tcp** %25, align 8, !tbaa !139
  br i1 %38, label %27, label %40

40:                                               ; preds = %27, %18
  %41 = phi %struct.opj_tcp* [ %26, %18 ], [ %39, %27 ]
  %42 = bitcast %struct.opj_tcp* %41 to i8*
  tail call void @free(i8* %42) #9
  %43 = bitcast %struct.opj_cp* %5 to i8*
  tail call void @free(i8* %43) #9
  br label %44

44:                                               ; preds = %40, %3
  %45 = bitcast %struct.opj_j2k* %0 to i8*
  tail call void @free(i8* %45) #9
  br label %46

46:                                               ; preds = %44, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @j2k_setup_encoder(%struct.opj_j2k*, %struct.opj_cparameters* readonly, %struct.opj_image* readonly) #0 {
  %4 = icmp ne %struct.opj_j2k* %0, null
  %5 = icmp ne %struct.opj_cparameters* %1, null
  %6 = and i1 %4, %5
  %7 = icmp ne %struct.opj_image* %2, null
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %1100

9:                                                ; preds = %3
  %10 = tail call noalias i8* @calloc(i64 1, i64 144) #9
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %12 = bitcast %struct.opj_cp** %11 to i8**
  store i8* %10, i8** %12, align 8, !tbaa !25
  %13 = getelementptr inbounds i8, i8* %10, i64 72
  %14 = bitcast i8* %13 to i32*
  store i32 1, i32* %14, align 8, !tbaa !136
  %15 = getelementptr inbounds i8, i8* %10, i64 76
  %16 = bitcast i8* %15 to i32*
  store i32 1, i32* %16, align 4, !tbaa !137
  %17 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 50
  %18 = load i32, i32* %17, align 4, !tbaa !248
  %19 = bitcast i8* %10 to i32*
  store i32 %18, i32* %19, align 8, !tbaa !250
  %20 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 51
  %21 = load i32, i32* %20, align 8, !tbaa !251
  %22 = getelementptr inbounds i8, i8* %10, i64 4
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 4, !tbaa !252
  %24 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 52
  %25 = load i32, i32* %24, align 4, !tbaa !253
  %26 = getelementptr inbounds i8, i8* %10, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4, !tbaa !254
  %28 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 5
  %29 = load i32, i32* %28, align 4, !tbaa !255
  %30 = getelementptr inbounds i8, i8* %10, i64 24
  %31 = bitcast i8* %30 to i32*
  store i32 %29, i32* %31, align 8, !tbaa !256
  %32 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 6
  %33 = load i32, i32* %32, align 8, !tbaa !257
  %34 = getelementptr inbounds i8, i8* %10, i64 28
  %35 = bitcast i8* %34 to i32*
  store i32 %33, i32* %35, align 4, !tbaa !258
  %36 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 7
  %37 = load i32, i32* %36, align 4, !tbaa !259
  %38 = getelementptr inbounds i8, i8* %10, i64 32
  %39 = bitcast i8* %38 to i32*
  store i32 %37, i32* %39, align 8, !tbaa !260
  %40 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 8
  %41 = load i32*, i32** %40, align 8, !tbaa !261
  %42 = icmp eq i32* %41, null
  br i1 %42, label %56, label %43

43:                                               ; preds = %9
  %44 = bitcast i32* %41 to i8*
  %45 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 14
  %46 = load i32, i32* %45, align 4, !tbaa !262
  %47 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 17
  %48 = load i32, i32* %47, align 8, !tbaa !263
  %49 = mul i32 %46, 3
  %50 = mul i32 %49, %48
  %51 = sext i32 %50 to i64
  %52 = shl nsw i64 %51, 2
  %53 = tail call noalias i8* @malloc(i64 %52) #9
  %54 = getelementptr inbounds i8, i8* %10, i64 136
  %55 = bitcast i8* %54 to i8**
  store i8* %53, i8** %55, align 8, !tbaa !247
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %53, i8* nonnull align 4 %44, i64 %52, i1 false)
  br label %56

56:                                               ; preds = %43, %9
  %57 = getelementptr inbounds i8, i8* %10, i64 56
  %58 = bitcast i8* %57 to i32*
  %59 = getelementptr inbounds i8, i8* %10, i64 60
  %60 = bitcast i8* %59 to i32*
  %61 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 1
  %62 = getelementptr inbounds i8, i8* %10, i64 48
  %63 = bitcast i8* %62 to i32*
  %64 = bitcast i32* %61 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4, !tbaa !43
  %66 = getelementptr inbounds i8, i8* %10, i64 52
  %67 = bitcast i8* %66 to i32*
  %68 = bitcast i8* %62 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %68, align 8, !tbaa !43
  %69 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 9
  %70 = load i8*, i8** %69, align 8, !tbaa !264
  %71 = icmp eq i8* %70, null
  %72 = extractelement <4 x i32> %65, i32 0
  br i1 %71, label %83, label %73

73:                                               ; preds = %56
  %74 = tail call i64 @strlen(i8* nonnull %70) #12
  %75 = add i64 %74, 1
  %76 = tail call noalias i8* @malloc(i64 %75) #9
  %77 = getelementptr inbounds i8, i8* %10, i64 64
  %78 = bitcast i8* %77 to i8**
  store i8* %76, i8** %78, align 8, !tbaa !165
  %79 = icmp eq i8* %76, null
  br i1 %79, label %83, label %80

80:                                               ; preds = %73
  %81 = tail call i8* @strcpy(i8* nonnull %76, i8* nonnull %70) #9
  %82 = load i32, i32* %63, align 8, !tbaa !205
  br label %83

83:                                               ; preds = %80, %73, %56
  %84 = phi i32 [ %72, %73 ], [ %72, %56 ], [ %82, %80 ]
  %85 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 0
  %86 = load i32, i32* %85, align 8, !tbaa !265
  %87 = icmp eq i32 %86, 0
  %88 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 2
  %89 = load i32, i32* %88, align 8, !tbaa !199
  %90 = sub nsw i32 %89, %84
  br i1 %87, label %104, label %91

91:                                               ; preds = %83
  %92 = load i32, i32* %58, align 8, !tbaa !203
  %93 = add i32 %90, -1
  %94 = add i32 %93, %92
  %95 = sdiv i32 %94, %92
  store i32 %95, i32* %14, align 8, !tbaa !136
  %96 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 3
  %97 = load i32, i32* %96, align 4, !tbaa !200
  %98 = load i32, i32* %67, align 4, !tbaa !206
  %99 = load i32, i32* %60, align 4, !tbaa !204
  %100 = xor i32 %98, -1
  %101 = add i32 %97, %100
  %102 = add i32 %101, %99
  %103 = sdiv i32 %102, %99
  store i32 %103, i32* %16, align 4, !tbaa !137
  br label %109

104:                                              ; preds = %83
  store i32 %90, i32* %58, align 8, !tbaa !203
  %105 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 3
  %106 = load i32, i32* %105, align 4, !tbaa !200
  %107 = load i32, i32* %67, align 4, !tbaa !206
  %108 = sub nsw i32 %106, %107
  store i32 %108, i32* %60, align 4, !tbaa !204
  br label %109

109:                                              ; preds = %104, %91
  %110 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 53
  %111 = load i8, i8* %110, align 8, !tbaa !266
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %118, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 54
  %115 = load i8, i8* %114, align 1, !tbaa !267
  %116 = getelementptr inbounds i8, i8* %10, i64 17
  store i8 %115, i8* %116, align 1, !tbaa !150
  %117 = getelementptr inbounds i8, i8* %10, i64 16
  store i8 1, i8* %117, align 8, !tbaa !149
  br label %118

118:                                              ; preds = %113, %109
  %119 = getelementptr inbounds i8, i8* %10, i64 8
  %120 = bitcast i8* %119 to i32*
  store i32 0, i32* %120, align 8, !tbaa !27
  %121 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %122 = load i32, i32* %121, align 8, !tbaa !127
  %123 = icmp sgt i32 %122, 0
  br i1 %123, label %124, label %175

124:                                              ; preds = %118
  %125 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %126 = load %struct.opj_image_comp*, %struct.opj_image_comp** %125, align 8, !tbaa !128
  %127 = sext i32 %122 to i64
  %128 = and i64 %127, 1
  %129 = icmp eq i32 %122, 1
  br i1 %129, label %158, label %130

130:                                              ; preds = %124
  %131 = sub nsw i64 %127, %128
  br label %132

132:                                              ; preds = %132, %130
  %133 = phi i64 [ 0, %130 ], [ %155, %132 ]
  %134 = phi i32 [ 0, %130 ], [ %154, %132 ]
  %135 = phi i64 [ %131, %130 ], [ %156, %132 ]
  %136 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %126, i64 %133, i32 2
  %137 = load i32, i32* %136, align 8, !tbaa !268
  %138 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %126, i64 %133, i32 3
  %139 = load i32, i32* %138, align 4, !tbaa !269
  %140 = mul nsw i32 %139, %137
  %141 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %126, i64 %133, i32 6
  %142 = load i32, i32* %141, align 8, !tbaa !207
  %143 = mul nsw i32 %140, %142
  %144 = add nsw i32 %134, %143
  %145 = or i64 %133, 1
  %146 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %126, i64 %145, i32 2
  %147 = load i32, i32* %146, align 8, !tbaa !268
  %148 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %126, i64 %145, i32 3
  %149 = load i32, i32* %148, align 4, !tbaa !269
  %150 = mul nsw i32 %149, %147
  %151 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %126, i64 %145, i32 6
  %152 = load i32, i32* %151, align 8, !tbaa !207
  %153 = mul nsw i32 %150, %152
  %154 = add nsw i32 %144, %153
  %155 = add nuw nsw i64 %133, 2
  %156 = add i64 %135, -2
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %132

158:                                              ; preds = %132, %124
  %159 = phi i32 [ undef, %124 ], [ %154, %132 ]
  %160 = phi i64 [ 0, %124 ], [ %155, %132 ]
  %161 = phi i32 [ 0, %124 ], [ %154, %132 ]
  %162 = icmp eq i64 %128, 0
  br i1 %162, label %173, label %163

163:                                              ; preds = %158
  %164 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %126, i64 %160, i32 3
  %165 = load i32, i32* %164, align 4, !tbaa !269
  %166 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %126, i64 %160, i32 2
  %167 = load i32, i32* %166, align 8, !tbaa !268
  %168 = mul nsw i32 %165, %167
  %169 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %126, i64 %160, i32 6
  %170 = load i32, i32* %169, align 8, !tbaa !207
  %171 = mul nsw i32 %168, %170
  %172 = add nsw i32 %161, %171
  br label %173

173:                                              ; preds = %163, %158
  %174 = phi i32 [ %159, %158 ], [ %172, %163 ]
  store i32 %174, i32* %120, align 8, !tbaa !27
  br label %175

175:                                              ; preds = %173, %118
  %176 = load i32, i32* %14, align 8, !tbaa !136
  %177 = load i32, i32* %16, align 4, !tbaa !137
  %178 = mul nsw i32 %177, %176
  %179 = sext i32 %178 to i64
  %180 = tail call noalias i8* @calloc(i64 %179, i64 5608) #9
  %181 = getelementptr inbounds i8, i8* %10, i64 128
  %182 = bitcast i8* %181 to %struct.opj_tcp**
  %183 = bitcast i8* %181 to i8**
  store i8* %180, i8** %183, align 8, !tbaa !139
  %184 = icmp sgt i32 %178, 0
  br i1 %184, label %185, label %1100

185:                                              ; preds = %175
  %186 = bitcast i8* %180 to %struct.opj_tcp*
  %187 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 14
  %188 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 10
  %189 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 11
  %190 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 55
  %191 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 13
  %192 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 17
  %193 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 18
  %194 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 19
  %195 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 20
  %196 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 21
  %197 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 22
  %198 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 23
  %199 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 24
  %200 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %201 = getelementptr %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 0
  %202 = getelementptr %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 0
  %203 = getelementptr %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 0
  %204 = getelementptr %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 0
  br label %205

205:                                              ; preds = %1098, %185
  %206 = phi i32 [ %177, %185 ], [ %1091, %1098 ]
  %207 = phi i32 [ %176, %185 ], [ %1092, %1098 ]
  %208 = phi i32 [ %122, %185 ], [ %1093, %1098 ]
  %209 = phi %struct.opj_tcp* [ %186, %185 ], [ %1099, %1098 ]
  %210 = phi i64 [ 0, %185 ], [ %1094, %1098 ]
  %211 = load i32, i32* %187, align 4, !tbaa !262
  %212 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 3
  store i32 %211, i32* %212, align 4, !tbaa !219
  %213 = icmp sgt i32 %211, 0
  br i1 %213, label %214, label %761

214:                                              ; preds = %205
  %215 = load i32, i32* %19, align 8, !tbaa !250
  %216 = icmp eq i32 %215, 0
  %217 = load i32, i32* %39, align 8, !tbaa !260
  %218 = icmp ne i32 %217, 0
  %219 = zext i32 %211 to i64
  %220 = icmp ult i32 %211, 8
  br i1 %216, label %221, label %490

221:                                              ; preds = %214
  br i1 %218, label %329, label %222

222:                                              ; preds = %221
  br i1 %220, label %223, label %243

223:                                              ; preds = %327, %243, %222
  %224 = phi i64 [ 0, %243 ], [ 0, %222 ], [ %251, %327 ]
  %225 = xor i64 %224, -1
  %226 = add nsw i64 %225, %219
  %227 = and i64 %219, 3
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %240, label %229

229:                                              ; preds = %229, %223
  %230 = phi i64 [ %237, %229 ], [ %224, %223 ]
  %231 = phi i64 [ %238, %229 ], [ %227, %223 ]
  %232 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %230
  %233 = bitcast float* %232 to i32*
  %234 = load i32, i32* %233, align 4, !tbaa !112
  %235 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %230
  %236 = bitcast float* %235 to i32*
  store i32 %234, i32* %236, align 4, !tbaa !112
  %237 = add nuw nsw i64 %230, 1
  %238 = add i64 %231, -1
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %229, !llvm.loop !270

240:                                              ; preds = %229, %223
  %241 = phi i64 [ %224, %223 ], [ %237, %229 ]
  %242 = icmp ult i64 %226, 3
  br i1 %242, label %761, label %463

243:                                              ; preds = %222
  %244 = getelementptr %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 0
  %245 = getelementptr %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %219
  %246 = getelementptr %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %219
  %247 = icmp ult float* %244, %246
  %248 = icmp ult float* %202, %245
  %249 = and i1 %247, %248
  br i1 %249, label %223, label %250

250:                                              ; preds = %243
  %251 = and i64 %219, 4294967288
  %252 = add nsw i64 %251, -8
  %253 = lshr exact i64 %252, 3
  %254 = add nuw nsw i64 %253, 1
  %255 = and i64 %254, 3
  %256 = icmp ult i64 %252, 24
  br i1 %256, label %308, label %257

257:                                              ; preds = %250
  %258 = sub nsw i64 %254, %255
  br label %259

259:                                              ; preds = %259, %257
  %260 = phi i64 [ 0, %257 ], [ %305, %259 ]
  %261 = phi i64 [ %258, %257 ], [ %306, %259 ]
  %262 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %260
  %263 = bitcast float* %262 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 4, !tbaa !112, !alias.scope !271
  %265 = getelementptr inbounds float, float* %262, i64 4
  %266 = bitcast float* %265 to <4 x i32>*
  %267 = load <4 x i32>, <4 x i32>* %266, align 4, !tbaa !112, !alias.scope !271
  %268 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %260
  %269 = bitcast float* %268 to <4 x i32>*
  store <4 x i32> %264, <4 x i32>* %269, align 4, !tbaa !112, !alias.scope !274, !noalias !271
  %270 = getelementptr inbounds float, float* %268, i64 4
  %271 = bitcast float* %270 to <4 x i32>*
  store <4 x i32> %267, <4 x i32>* %271, align 4, !tbaa !112, !alias.scope !274, !noalias !271
  %272 = or i64 %260, 8
  %273 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %272
  %274 = bitcast float* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 4, !tbaa !112, !alias.scope !271
  %276 = getelementptr inbounds float, float* %273, i64 4
  %277 = bitcast float* %276 to <4 x i32>*
  %278 = load <4 x i32>, <4 x i32>* %277, align 4, !tbaa !112, !alias.scope !271
  %279 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %272
  %280 = bitcast float* %279 to <4 x i32>*
  store <4 x i32> %275, <4 x i32>* %280, align 4, !tbaa !112, !alias.scope !274, !noalias !271
  %281 = getelementptr inbounds float, float* %279, i64 4
  %282 = bitcast float* %281 to <4 x i32>*
  store <4 x i32> %278, <4 x i32>* %282, align 4, !tbaa !112, !alias.scope !274, !noalias !271
  %283 = or i64 %260, 16
  %284 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %283
  %285 = bitcast float* %284 to <4 x i32>*
  %286 = load <4 x i32>, <4 x i32>* %285, align 4, !tbaa !112, !alias.scope !271
  %287 = getelementptr inbounds float, float* %284, i64 4
  %288 = bitcast float* %287 to <4 x i32>*
  %289 = load <4 x i32>, <4 x i32>* %288, align 4, !tbaa !112, !alias.scope !271
  %290 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %283
  %291 = bitcast float* %290 to <4 x i32>*
  store <4 x i32> %286, <4 x i32>* %291, align 4, !tbaa !112, !alias.scope !274, !noalias !271
  %292 = getelementptr inbounds float, float* %290, i64 4
  %293 = bitcast float* %292 to <4 x i32>*
  store <4 x i32> %289, <4 x i32>* %293, align 4, !tbaa !112, !alias.scope !274, !noalias !271
  %294 = or i64 %260, 24
  %295 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %294
  %296 = bitcast float* %295 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 4, !tbaa !112, !alias.scope !271
  %298 = getelementptr inbounds float, float* %295, i64 4
  %299 = bitcast float* %298 to <4 x i32>*
  %300 = load <4 x i32>, <4 x i32>* %299, align 4, !tbaa !112, !alias.scope !271
  %301 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %294
  %302 = bitcast float* %301 to <4 x i32>*
  store <4 x i32> %297, <4 x i32>* %302, align 4, !tbaa !112, !alias.scope !274, !noalias !271
  %303 = getelementptr inbounds float, float* %301, i64 4
  %304 = bitcast float* %303 to <4 x i32>*
  store <4 x i32> %300, <4 x i32>* %304, align 4, !tbaa !112, !alias.scope !274, !noalias !271
  %305 = add i64 %260, 32
  %306 = add i64 %261, -4
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %308, label %259, !llvm.loop !276

308:                                              ; preds = %259, %250
  %309 = phi i64 [ 0, %250 ], [ %305, %259 ]
  %310 = icmp eq i64 %255, 0
  br i1 %310, label %327, label %311

311:                                              ; preds = %311, %308
  %312 = phi i64 [ %324, %311 ], [ %309, %308 ]
  %313 = phi i64 [ %325, %311 ], [ %255, %308 ]
  %314 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %312
  %315 = bitcast float* %314 to <4 x i32>*
  %316 = load <4 x i32>, <4 x i32>* %315, align 4, !tbaa !112, !alias.scope !271
  %317 = getelementptr inbounds float, float* %314, i64 4
  %318 = bitcast float* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 4, !tbaa !112, !alias.scope !271
  %320 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %312
  %321 = bitcast float* %320 to <4 x i32>*
  store <4 x i32> %316, <4 x i32>* %321, align 4, !tbaa !112, !alias.scope !274, !noalias !271
  %322 = getelementptr inbounds float, float* %320, i64 4
  %323 = bitcast float* %322 to <4 x i32>*
  store <4 x i32> %319, <4 x i32>* %323, align 4, !tbaa !112, !alias.scope !274, !noalias !271
  %324 = add i64 %312, 8
  %325 = add i64 %313, -1
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %327, label %311, !llvm.loop !277

327:                                              ; preds = %311, %308
  %328 = icmp eq i64 %251, %219
  br i1 %328, label %761, label %223

329:                                              ; preds = %221
  br i1 %220, label %416, label %330

330:                                              ; preds = %329
  %331 = getelementptr %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 0
  %332 = getelementptr %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %219
  %333 = getelementptr %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %219
  %334 = icmp ult float* %331, %333
  %335 = icmp ult float* %201, %332
  %336 = and i1 %334, %335
  br i1 %336, label %416, label %337

337:                                              ; preds = %330
  %338 = and i64 %219, 4294967288
  %339 = add nsw i64 %338, -8
  %340 = lshr exact i64 %339, 3
  %341 = add nuw nsw i64 %340, 1
  %342 = and i64 %341, 3
  %343 = icmp ult i64 %339, 24
  br i1 %343, label %395, label %344

344:                                              ; preds = %337
  %345 = sub nsw i64 %341, %342
  br label %346

346:                                              ; preds = %346, %344
  %347 = phi i64 [ 0, %344 ], [ %392, %346 ]
  %348 = phi i64 [ %345, %344 ], [ %393, %346 ]
  %349 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %347
  %350 = bitcast float* %349 to <4 x i32>*
  %351 = load <4 x i32>, <4 x i32>* %350, align 4, !tbaa !112, !alias.scope !278
  %352 = getelementptr inbounds float, float* %349, i64 4
  %353 = bitcast float* %352 to <4 x i32>*
  %354 = load <4 x i32>, <4 x i32>* %353, align 4, !tbaa !112, !alias.scope !278
  %355 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %347
  %356 = bitcast float* %355 to <4 x i32>*
  store <4 x i32> %351, <4 x i32>* %356, align 4, !tbaa !112, !alias.scope !281, !noalias !278
  %357 = getelementptr inbounds float, float* %355, i64 4
  %358 = bitcast float* %357 to <4 x i32>*
  store <4 x i32> %354, <4 x i32>* %358, align 4, !tbaa !112, !alias.scope !281, !noalias !278
  %359 = or i64 %347, 8
  %360 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %359
  %361 = bitcast float* %360 to <4 x i32>*
  %362 = load <4 x i32>, <4 x i32>* %361, align 4, !tbaa !112, !alias.scope !278
  %363 = getelementptr inbounds float, float* %360, i64 4
  %364 = bitcast float* %363 to <4 x i32>*
  %365 = load <4 x i32>, <4 x i32>* %364, align 4, !tbaa !112, !alias.scope !278
  %366 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %359
  %367 = bitcast float* %366 to <4 x i32>*
  store <4 x i32> %362, <4 x i32>* %367, align 4, !tbaa !112, !alias.scope !281, !noalias !278
  %368 = getelementptr inbounds float, float* %366, i64 4
  %369 = bitcast float* %368 to <4 x i32>*
  store <4 x i32> %365, <4 x i32>* %369, align 4, !tbaa !112, !alias.scope !281, !noalias !278
  %370 = or i64 %347, 16
  %371 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %370
  %372 = bitcast float* %371 to <4 x i32>*
  %373 = load <4 x i32>, <4 x i32>* %372, align 4, !tbaa !112, !alias.scope !278
  %374 = getelementptr inbounds float, float* %371, i64 4
  %375 = bitcast float* %374 to <4 x i32>*
  %376 = load <4 x i32>, <4 x i32>* %375, align 4, !tbaa !112, !alias.scope !278
  %377 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %370
  %378 = bitcast float* %377 to <4 x i32>*
  store <4 x i32> %373, <4 x i32>* %378, align 4, !tbaa !112, !alias.scope !281, !noalias !278
  %379 = getelementptr inbounds float, float* %377, i64 4
  %380 = bitcast float* %379 to <4 x i32>*
  store <4 x i32> %376, <4 x i32>* %380, align 4, !tbaa !112, !alias.scope !281, !noalias !278
  %381 = or i64 %347, 24
  %382 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %381
  %383 = bitcast float* %382 to <4 x i32>*
  %384 = load <4 x i32>, <4 x i32>* %383, align 4, !tbaa !112, !alias.scope !278
  %385 = getelementptr inbounds float, float* %382, i64 4
  %386 = bitcast float* %385 to <4 x i32>*
  %387 = load <4 x i32>, <4 x i32>* %386, align 4, !tbaa !112, !alias.scope !278
  %388 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %381
  %389 = bitcast float* %388 to <4 x i32>*
  store <4 x i32> %384, <4 x i32>* %389, align 4, !tbaa !112, !alias.scope !281, !noalias !278
  %390 = getelementptr inbounds float, float* %388, i64 4
  %391 = bitcast float* %390 to <4 x i32>*
  store <4 x i32> %387, <4 x i32>* %391, align 4, !tbaa !112, !alias.scope !281, !noalias !278
  %392 = add i64 %347, 32
  %393 = add i64 %348, -4
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %395, label %346, !llvm.loop !283

395:                                              ; preds = %346, %337
  %396 = phi i64 [ 0, %337 ], [ %392, %346 ]
  %397 = icmp eq i64 %342, 0
  br i1 %397, label %414, label %398

398:                                              ; preds = %398, %395
  %399 = phi i64 [ %411, %398 ], [ %396, %395 ]
  %400 = phi i64 [ %412, %398 ], [ %342, %395 ]
  %401 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %399
  %402 = bitcast float* %401 to <4 x i32>*
  %403 = load <4 x i32>, <4 x i32>* %402, align 4, !tbaa !112, !alias.scope !278
  %404 = getelementptr inbounds float, float* %401, i64 4
  %405 = bitcast float* %404 to <4 x i32>*
  %406 = load <4 x i32>, <4 x i32>* %405, align 4, !tbaa !112, !alias.scope !278
  %407 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %399
  %408 = bitcast float* %407 to <4 x i32>*
  store <4 x i32> %403, <4 x i32>* %408, align 4, !tbaa !112, !alias.scope !281, !noalias !278
  %409 = getelementptr inbounds float, float* %407, i64 4
  %410 = bitcast float* %409 to <4 x i32>*
  store <4 x i32> %406, <4 x i32>* %410, align 4, !tbaa !112, !alias.scope !281, !noalias !278
  %411 = add i64 %399, 8
  %412 = add i64 %400, -1
  %413 = icmp eq i64 %412, 0
  br i1 %413, label %414, label %398, !llvm.loop !284

414:                                              ; preds = %398, %395
  %415 = icmp eq i64 %338, %219
  br i1 %415, label %761, label %416

416:                                              ; preds = %414, %330, %329
  %417 = phi i64 [ 0, %330 ], [ 0, %329 ], [ %338, %414 ]
  %418 = xor i64 %417, -1
  %419 = add nsw i64 %418, %219
  %420 = and i64 %219, 3
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %433, label %422

422:                                              ; preds = %422, %416
  %423 = phi i64 [ %430, %422 ], [ %417, %416 ]
  %424 = phi i64 [ %431, %422 ], [ %420, %416 ]
  %425 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %423
  %426 = bitcast float* %425 to i32*
  %427 = load i32, i32* %426, align 4, !tbaa !112
  %428 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %423
  %429 = bitcast float* %428 to i32*
  store i32 %427, i32* %429, align 4, !tbaa !112
  %430 = add nuw nsw i64 %423, 1
  %431 = add i64 %424, -1
  %432 = icmp eq i64 %431, 0
  br i1 %432, label %433, label %422, !llvm.loop !285

433:                                              ; preds = %422, %416
  %434 = phi i64 [ %417, %416 ], [ %430, %422 ]
  %435 = icmp ult i64 %419, 3
  br i1 %435, label %761, label %436

436:                                              ; preds = %436, %433
  %437 = phi i64 [ %461, %436 ], [ %434, %433 ]
  %438 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %437
  %439 = bitcast float* %438 to i32*
  %440 = load i32, i32* %439, align 4, !tbaa !112
  %441 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %437
  %442 = bitcast float* %441 to i32*
  store i32 %440, i32* %442, align 4, !tbaa !112
  %443 = add nuw nsw i64 %437, 1
  %444 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %443
  %445 = bitcast float* %444 to i32*
  %446 = load i32, i32* %445, align 4, !tbaa !112
  %447 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %443
  %448 = bitcast float* %447 to i32*
  store i32 %446, i32* %448, align 4, !tbaa !112
  %449 = add nsw i64 %437, 2
  %450 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %449
  %451 = bitcast float* %450 to i32*
  %452 = load i32, i32* %451, align 4, !tbaa !112
  %453 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %449
  %454 = bitcast float* %453 to i32*
  store i32 %452, i32* %454, align 4, !tbaa !112
  %455 = add nsw i64 %437, 3
  %456 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %455
  %457 = bitcast float* %456 to i32*
  %458 = load i32, i32* %457, align 4, !tbaa !112
  %459 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %455
  %460 = bitcast float* %459 to i32*
  store i32 %458, i32* %460, align 4, !tbaa !112
  %461 = add nsw i64 %437, 4
  %462 = icmp eq i64 %461, %219
  br i1 %462, label %761, label %436, !llvm.loop !286

463:                                              ; preds = %463, %240
  %464 = phi i64 [ %488, %463 ], [ %241, %240 ]
  %465 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %464
  %466 = bitcast float* %465 to i32*
  %467 = load i32, i32* %466, align 4, !tbaa !112
  %468 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %464
  %469 = bitcast float* %468 to i32*
  store i32 %467, i32* %469, align 4, !tbaa !112
  %470 = add nuw nsw i64 %464, 1
  %471 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %470
  %472 = bitcast float* %471 to i32*
  %473 = load i32, i32* %472, align 4, !tbaa !112
  %474 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %470
  %475 = bitcast float* %474 to i32*
  store i32 %473, i32* %475, align 4, !tbaa !112
  %476 = add nsw i64 %464, 2
  %477 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %476
  %478 = bitcast float* %477 to i32*
  %479 = load i32, i32* %478, align 4, !tbaa !112
  %480 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %476
  %481 = bitcast float* %480 to i32*
  store i32 %479, i32* %481, align 4, !tbaa !112
  %482 = add nsw i64 %464, 3
  %483 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %482
  %484 = bitcast float* %483 to i32*
  %485 = load i32, i32* %484, align 4, !tbaa !112
  %486 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %482
  %487 = bitcast float* %486 to i32*
  store i32 %485, i32* %487, align 4, !tbaa !112
  %488 = add nsw i64 %464, 4
  %489 = icmp eq i64 %488, %219
  br i1 %489, label %761, label %463, !llvm.loop !287

490:                                              ; preds = %214
  br i1 %218, label %598, label %491

491:                                              ; preds = %490
  br i1 %220, label %492, label %512

492:                                              ; preds = %596, %512, %491
  %493 = phi i64 [ 0, %512 ], [ 0, %491 ], [ %520, %596 ]
  %494 = xor i64 %493, -1
  %495 = add nsw i64 %494, %219
  %496 = and i64 %219, 3
  %497 = icmp eq i64 %496, 0
  br i1 %497, label %509, label %498

498:                                              ; preds = %498, %492
  %499 = phi i64 [ %506, %498 ], [ %493, %492 ]
  %500 = phi i64 [ %507, %498 ], [ %496, %492 ]
  %501 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %499
  %502 = bitcast float* %501 to i32*
  %503 = load i32, i32* %502, align 4, !tbaa !112
  %504 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %499
  %505 = bitcast float* %504 to i32*
  store i32 %503, i32* %505, align 4, !tbaa !112
  %506 = add nuw nsw i64 %499, 1
  %507 = add i64 %500, -1
  %508 = icmp eq i64 %507, 0
  br i1 %508, label %509, label %498, !llvm.loop !288

509:                                              ; preds = %498, %492
  %510 = phi i64 [ %493, %492 ], [ %506, %498 ]
  %511 = icmp ult i64 %495, 3
  br i1 %511, label %761, label %734

512:                                              ; preds = %491
  %513 = getelementptr %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 0
  %514 = getelementptr %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %219
  %515 = getelementptr %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %219
  %516 = icmp ult float* %513, %515
  %517 = icmp ult float* %204, %514
  %518 = and i1 %516, %517
  br i1 %518, label %492, label %519

519:                                              ; preds = %512
  %520 = and i64 %219, 4294967288
  %521 = add nsw i64 %520, -8
  %522 = lshr exact i64 %521, 3
  %523 = add nuw nsw i64 %522, 1
  %524 = and i64 %523, 3
  %525 = icmp ult i64 %521, 24
  br i1 %525, label %577, label %526

526:                                              ; preds = %519
  %527 = sub nsw i64 %523, %524
  br label %528

528:                                              ; preds = %528, %526
  %529 = phi i64 [ 0, %526 ], [ %574, %528 ]
  %530 = phi i64 [ %527, %526 ], [ %575, %528 ]
  %531 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %529
  %532 = bitcast float* %531 to <4 x i32>*
  %533 = load <4 x i32>, <4 x i32>* %532, align 4, !tbaa !112, !alias.scope !289
  %534 = getelementptr inbounds float, float* %531, i64 4
  %535 = bitcast float* %534 to <4 x i32>*
  %536 = load <4 x i32>, <4 x i32>* %535, align 4, !tbaa !112, !alias.scope !289
  %537 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %529
  %538 = bitcast float* %537 to <4 x i32>*
  store <4 x i32> %533, <4 x i32>* %538, align 4, !tbaa !112, !alias.scope !292, !noalias !289
  %539 = getelementptr inbounds float, float* %537, i64 4
  %540 = bitcast float* %539 to <4 x i32>*
  store <4 x i32> %536, <4 x i32>* %540, align 4, !tbaa !112, !alias.scope !292, !noalias !289
  %541 = or i64 %529, 8
  %542 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %541
  %543 = bitcast float* %542 to <4 x i32>*
  %544 = load <4 x i32>, <4 x i32>* %543, align 4, !tbaa !112, !alias.scope !289
  %545 = getelementptr inbounds float, float* %542, i64 4
  %546 = bitcast float* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 4, !tbaa !112, !alias.scope !289
  %548 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %541
  %549 = bitcast float* %548 to <4 x i32>*
  store <4 x i32> %544, <4 x i32>* %549, align 4, !tbaa !112, !alias.scope !292, !noalias !289
  %550 = getelementptr inbounds float, float* %548, i64 4
  %551 = bitcast float* %550 to <4 x i32>*
  store <4 x i32> %547, <4 x i32>* %551, align 4, !tbaa !112, !alias.scope !292, !noalias !289
  %552 = or i64 %529, 16
  %553 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %552
  %554 = bitcast float* %553 to <4 x i32>*
  %555 = load <4 x i32>, <4 x i32>* %554, align 4, !tbaa !112, !alias.scope !289
  %556 = getelementptr inbounds float, float* %553, i64 4
  %557 = bitcast float* %556 to <4 x i32>*
  %558 = load <4 x i32>, <4 x i32>* %557, align 4, !tbaa !112, !alias.scope !289
  %559 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %552
  %560 = bitcast float* %559 to <4 x i32>*
  store <4 x i32> %555, <4 x i32>* %560, align 4, !tbaa !112, !alias.scope !292, !noalias !289
  %561 = getelementptr inbounds float, float* %559, i64 4
  %562 = bitcast float* %561 to <4 x i32>*
  store <4 x i32> %558, <4 x i32>* %562, align 4, !tbaa !112, !alias.scope !292, !noalias !289
  %563 = or i64 %529, 24
  %564 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %563
  %565 = bitcast float* %564 to <4 x i32>*
  %566 = load <4 x i32>, <4 x i32>* %565, align 4, !tbaa !112, !alias.scope !289
  %567 = getelementptr inbounds float, float* %564, i64 4
  %568 = bitcast float* %567 to <4 x i32>*
  %569 = load <4 x i32>, <4 x i32>* %568, align 4, !tbaa !112, !alias.scope !289
  %570 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %563
  %571 = bitcast float* %570 to <4 x i32>*
  store <4 x i32> %566, <4 x i32>* %571, align 4, !tbaa !112, !alias.scope !292, !noalias !289
  %572 = getelementptr inbounds float, float* %570, i64 4
  %573 = bitcast float* %572 to <4 x i32>*
  store <4 x i32> %569, <4 x i32>* %573, align 4, !tbaa !112, !alias.scope !292, !noalias !289
  %574 = add i64 %529, 32
  %575 = add i64 %530, -4
  %576 = icmp eq i64 %575, 0
  br i1 %576, label %577, label %528, !llvm.loop !294

577:                                              ; preds = %528, %519
  %578 = phi i64 [ 0, %519 ], [ %574, %528 ]
  %579 = icmp eq i64 %524, 0
  br i1 %579, label %596, label %580

580:                                              ; preds = %580, %577
  %581 = phi i64 [ %593, %580 ], [ %578, %577 ]
  %582 = phi i64 [ %594, %580 ], [ %524, %577 ]
  %583 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %581
  %584 = bitcast float* %583 to <4 x i32>*
  %585 = load <4 x i32>, <4 x i32>* %584, align 4, !tbaa !112, !alias.scope !289
  %586 = getelementptr inbounds float, float* %583, i64 4
  %587 = bitcast float* %586 to <4 x i32>*
  %588 = load <4 x i32>, <4 x i32>* %587, align 4, !tbaa !112, !alias.scope !289
  %589 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %581
  %590 = bitcast float* %589 to <4 x i32>*
  store <4 x i32> %585, <4 x i32>* %590, align 4, !tbaa !112, !alias.scope !292, !noalias !289
  %591 = getelementptr inbounds float, float* %589, i64 4
  %592 = bitcast float* %591 to <4 x i32>*
  store <4 x i32> %588, <4 x i32>* %592, align 4, !tbaa !112, !alias.scope !292, !noalias !289
  %593 = add i64 %581, 8
  %594 = add i64 %582, -1
  %595 = icmp eq i64 %594, 0
  br i1 %595, label %596, label %580, !llvm.loop !295

596:                                              ; preds = %580, %577
  %597 = icmp eq i64 %520, %219
  br i1 %597, label %761, label %492

598:                                              ; preds = %490
  br i1 %220, label %688, label %599

599:                                              ; preds = %598
  %600 = getelementptr %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 0
  %601 = getelementptr %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %219
  %602 = getelementptr %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %219
  %603 = icmp ult float* %600, %602
  %604 = icmp ult float* %203, %601
  %605 = and i1 %603, %604
  br i1 %605, label %688, label %606

606:                                              ; preds = %599
  %607 = and i64 %219, 4294967288
  %608 = add nsw i64 %607, -8
  %609 = lshr exact i64 %608, 3
  %610 = add nuw nsw i64 %609, 1
  %611 = and i64 %610, 1
  %612 = icmp eq i64 %608, 0
  br i1 %612, label %662, label %613

613:                                              ; preds = %606
  %614 = sub nuw nsw i64 %610, %611
  br label %615

615:                                              ; preds = %615, %613
  %616 = phi i64 [ 0, %613 ], [ %659, %615 ]
  %617 = phi i64 [ %614, %613 ], [ %660, %615 ]
  %618 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %616
  %619 = bitcast float* %618 to <4 x i32>*
  %620 = load <4 x i32>, <4 x i32>* %619, align 4, !tbaa !112, !alias.scope !296
  %621 = getelementptr inbounds float, float* %618, i64 4
  %622 = bitcast float* %621 to <4 x i32>*
  %623 = load <4 x i32>, <4 x i32>* %622, align 4, !tbaa !112, !alias.scope !296
  %624 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %616
  %625 = bitcast float* %624 to <4 x i32>*
  store <4 x i32> %620, <4 x i32>* %625, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  %626 = getelementptr inbounds float, float* %624, i64 4
  %627 = bitcast float* %626 to <4 x i32>*
  store <4 x i32> %623, <4 x i32>* %627, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  %628 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %616
  %629 = bitcast float* %628 to <4 x i32>*
  %630 = load <4 x i32>, <4 x i32>* %629, align 4, !tbaa !112, !alias.scope !296
  %631 = getelementptr inbounds float, float* %628, i64 4
  %632 = bitcast float* %631 to <4 x i32>*
  %633 = load <4 x i32>, <4 x i32>* %632, align 4, !tbaa !112, !alias.scope !296
  %634 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %616
  %635 = bitcast float* %634 to <4 x i32>*
  store <4 x i32> %630, <4 x i32>* %635, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  %636 = getelementptr inbounds float, float* %634, i64 4
  %637 = bitcast float* %636 to <4 x i32>*
  store <4 x i32> %633, <4 x i32>* %637, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  %638 = or i64 %616, 8
  %639 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %638
  %640 = bitcast float* %639 to <4 x i32>*
  %641 = load <4 x i32>, <4 x i32>* %640, align 4, !tbaa !112, !alias.scope !296
  %642 = getelementptr inbounds float, float* %639, i64 4
  %643 = bitcast float* %642 to <4 x i32>*
  %644 = load <4 x i32>, <4 x i32>* %643, align 4, !tbaa !112, !alias.scope !296
  %645 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %638
  %646 = bitcast float* %645 to <4 x i32>*
  store <4 x i32> %641, <4 x i32>* %646, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  %647 = getelementptr inbounds float, float* %645, i64 4
  %648 = bitcast float* %647 to <4 x i32>*
  store <4 x i32> %644, <4 x i32>* %648, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  %649 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %638
  %650 = bitcast float* %649 to <4 x i32>*
  %651 = load <4 x i32>, <4 x i32>* %650, align 4, !tbaa !112, !alias.scope !296
  %652 = getelementptr inbounds float, float* %649, i64 4
  %653 = bitcast float* %652 to <4 x i32>*
  %654 = load <4 x i32>, <4 x i32>* %653, align 4, !tbaa !112, !alias.scope !296
  %655 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %638
  %656 = bitcast float* %655 to <4 x i32>*
  store <4 x i32> %651, <4 x i32>* %656, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  %657 = getelementptr inbounds float, float* %655, i64 4
  %658 = bitcast float* %657 to <4 x i32>*
  store <4 x i32> %654, <4 x i32>* %658, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  %659 = add i64 %616, 16
  %660 = add i64 %617, -2
  %661 = icmp eq i64 %660, 0
  br i1 %661, label %662, label %615, !llvm.loop !301

662:                                              ; preds = %615, %606
  %663 = phi i64 [ 0, %606 ], [ %659, %615 ]
  %664 = icmp eq i64 %611, 0
  br i1 %664, label %686, label %665

665:                                              ; preds = %662
  %666 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %663
  %667 = bitcast float* %666 to <4 x i32>*
  %668 = load <4 x i32>, <4 x i32>* %667, align 4, !tbaa !112, !alias.scope !296
  %669 = getelementptr inbounds float, float* %666, i64 4
  %670 = bitcast float* %669 to <4 x i32>*
  %671 = load <4 x i32>, <4 x i32>* %670, align 4, !tbaa !112, !alias.scope !296
  %672 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %663
  %673 = bitcast float* %672 to <4 x i32>*
  store <4 x i32> %668, <4 x i32>* %673, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  %674 = getelementptr inbounds float, float* %672, i64 4
  %675 = bitcast float* %674 to <4 x i32>*
  store <4 x i32> %671, <4 x i32>* %675, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  %676 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %663
  %677 = bitcast float* %676 to <4 x i32>*
  %678 = load <4 x i32>, <4 x i32>* %677, align 4, !tbaa !112, !alias.scope !296
  %679 = getelementptr inbounds float, float* %676, i64 4
  %680 = bitcast float* %679 to <4 x i32>*
  %681 = load <4 x i32>, <4 x i32>* %680, align 4, !tbaa !112, !alias.scope !296
  %682 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %663
  %683 = bitcast float* %682 to <4 x i32>*
  store <4 x i32> %678, <4 x i32>* %683, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  %684 = getelementptr inbounds float, float* %682, i64 4
  %685 = bitcast float* %684 to <4 x i32>*
  store <4 x i32> %681, <4 x i32>* %685, align 4, !tbaa !112, !alias.scope !299, !noalias !296
  br label %686

686:                                              ; preds = %665, %662
  %687 = icmp eq i64 %607, %219
  br i1 %687, label %761, label %688

688:                                              ; preds = %686, %599, %598
  %689 = phi i64 [ 0, %599 ], [ 0, %598 ], [ %607, %686 ]
  %690 = xor i64 %689, -1
  %691 = and i64 %219, 1
  %692 = icmp eq i64 %691, 0
  br i1 %692, label %705, label %693

693:                                              ; preds = %688
  %694 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %689
  %695 = bitcast float* %694 to i32*
  %696 = load i32, i32* %695, align 4, !tbaa !112
  %697 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %689
  %698 = bitcast float* %697 to i32*
  store i32 %696, i32* %698, align 4, !tbaa !112
  %699 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %689
  %700 = bitcast float* %699 to i32*
  %701 = load i32, i32* %700, align 4, !tbaa !112
  %702 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %689
  %703 = bitcast float* %702 to i32*
  store i32 %701, i32* %703, align 4, !tbaa !112
  %704 = or i64 %689, 1
  br label %705

705:                                              ; preds = %693, %688
  %706 = phi i64 [ %704, %693 ], [ %689, %688 ]
  %707 = sub nsw i64 0, %219
  %708 = icmp eq i64 %690, %707
  br i1 %708, label %761, label %709

709:                                              ; preds = %709, %705
  %710 = phi i64 [ %732, %709 ], [ %706, %705 ]
  %711 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %710
  %712 = bitcast float* %711 to i32*
  %713 = load i32, i32* %712, align 4, !tbaa !112
  %714 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %710
  %715 = bitcast float* %714 to i32*
  store i32 %713, i32* %715, align 4, !tbaa !112
  %716 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %710
  %717 = bitcast float* %716 to i32*
  %718 = load i32, i32* %717, align 4, !tbaa !112
  %719 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %710
  %720 = bitcast float* %719 to i32*
  store i32 %718, i32* %720, align 4, !tbaa !112
  %721 = add nuw nsw i64 %710, 1
  %722 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %721
  %723 = bitcast float* %722 to i32*
  %724 = load i32, i32* %723, align 4, !tbaa !112
  %725 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 14, i64 %721
  %726 = bitcast float* %725 to i32*
  store i32 %724, i32* %726, align 4, !tbaa !112
  %727 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %721
  %728 = bitcast float* %727 to i32*
  %729 = load i32, i32* %728, align 4, !tbaa !112
  %730 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %721
  %731 = bitcast float* %730 to i32*
  store i32 %729, i32* %731, align 4, !tbaa !112
  %732 = add nsw i64 %710, 2
  %733 = icmp eq i64 %732, %219
  br i1 %733, label %761, label %709, !llvm.loop !302

734:                                              ; preds = %734, %509
  %735 = phi i64 [ %759, %734 ], [ %510, %509 ]
  %736 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %735
  %737 = bitcast float* %736 to i32*
  %738 = load i32, i32* %737, align 4, !tbaa !112
  %739 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %735
  %740 = bitcast float* %739 to i32*
  store i32 %738, i32* %740, align 4, !tbaa !112
  %741 = add nuw nsw i64 %735, 1
  %742 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %741
  %743 = bitcast float* %742 to i32*
  %744 = load i32, i32* %743, align 4, !tbaa !112
  %745 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %741
  %746 = bitcast float* %745 to i32*
  store i32 %744, i32* %746, align 4, !tbaa !112
  %747 = add nsw i64 %735, 2
  %748 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %747
  %749 = bitcast float* %748 to i32*
  %750 = load i32, i32* %749, align 4, !tbaa !112
  %751 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %747
  %752 = bitcast float* %751 to i32*
  store i32 %750, i32* %752, align 4, !tbaa !112
  %753 = add nsw i64 %735, 3
  %754 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %753
  %755 = bitcast float* %754 to i32*
  %756 = load i32, i32* %755, align 4, !tbaa !112
  %757 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 5, i64 %753
  %758 = bitcast float* %757 to i32*
  store i32 %756, i32* %758, align 4, !tbaa !112
  %759 = add nsw i64 %735, 4
  %760 = icmp eq i64 %759, %219
  br i1 %760, label %761, label %734, !llvm.loop !303

761:                                              ; preds = %734, %709, %705, %686, %596, %509, %463, %436, %433, %414, %327, %240, %205
  %762 = load i32, i32* %188, align 8, !tbaa !304
  %763 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 1
  store i32 %762, i32* %763, align 4, !tbaa !218
  %764 = load i32, i32* %189, align 4, !tbaa !305
  %765 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 2
  store i32 %764, i32* %765, align 8, !tbaa !148
  %766 = load i8, i8* %190, align 2, !tbaa !306
  %767 = sext i8 %766 to i32
  %768 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 4
  store i32 %767, i32* %768, align 8, !tbaa !220
  %769 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 7
  store i32 0, i32* %769, align 8, !tbaa !212
  %770 = load i32, i32* %191, align 8, !tbaa !307
  %771 = icmp eq i32 %770, 0
  br i1 %771, label %810, label %772

772:                                              ; preds = %761
  store i32 1, i32* %769, align 8, !tbaa !212
  %773 = icmp sgt i32 %770, 0
  br i1 %773, label %774, label %807

774:                                              ; preds = %772
  %775 = zext i32 %770 to i64
  br label %776

776:                                              ; preds = %803, %774
  %777 = phi i64 [ 0, %774 ], [ %805, %803 ]
  %778 = phi i32 [ 0, %774 ], [ %804, %803 ]
  %779 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %777, i32 11
  %780 = load i32, i32* %779, align 4, !tbaa !308
  %781 = add nsw i32 %780, -1
  %782 = zext i32 %781 to i64
  %783 = icmp eq i64 %210, %782
  %784 = icmp eq i32 %780, -1
  %785 = or i1 %784, %783
  br i1 %785, label %786, label %803

786:                                              ; preds = %776
  %787 = sext i32 %778 to i64
  %788 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %787, i32 0
  %789 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 8, i64 %787, i32 0
  %790 = bitcast i32* %788 to <4 x i32>*
  %791 = load <4 x i32>, <4 x i32>* %790, align 4, !tbaa !43
  %792 = bitcast i32* %789 to <4 x i32>*
  store <4 x i32> %791, <4 x i32>* %792, align 4, !tbaa !43
  %793 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %787, i32 4
  %794 = load i32, i32* %793, align 4, !tbaa !230
  %795 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 8, i64 %787, i32 4
  store i32 %794, i32* %795, align 4, !tbaa !230
  %796 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %787, i32 8
  %797 = load i32, i32* %796, align 4, !tbaa !309
  %798 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 8, i64 %787, i32 8
  store i32 %797, i32* %798, align 4, !tbaa !309
  %799 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %787, i32 11
  %800 = load i32, i32* %799, align 4, !tbaa !308
  %801 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 8, i64 %787, i32 11
  store i32 %800, i32* %801, align 4, !tbaa !308
  %802 = add nsw i32 %778, 1
  br label %803

803:                                              ; preds = %786, %776
  %804 = phi i32 [ %802, %786 ], [ %778, %776 ]
  %805 = add nuw nsw i64 %777, 1
  %806 = icmp eq i64 %805, %775
  br i1 %806, label %807, label %776

807:                                              ; preds = %803, %772
  %808 = phi i32 [ 0, %772 ], [ %804, %803 ]
  %809 = add nsw i32 %808, -1
  br label %810

810:                                              ; preds = %807, %761
  %811 = phi i32 [ %809, %807 ], [ 0, %761 ]
  %812 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 6
  store i32 %811, i32* %812, align 4, !tbaa !140
  %813 = sext i32 %208 to i64
  %814 = tail call noalias i8* @calloc(i64 %813, i64 1076) #9
  %815 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %209, i64 %210, i32 15
  %816 = bitcast %struct.opj_tccp** %815 to i8**
  store i8* %814, i8** %816, align 8, !tbaa !162
  %817 = icmp sgt i32 %208, 0
  br i1 %817, label %818, label %1090

818:                                              ; preds = %810
  %819 = bitcast i8* %814 to %struct.opj_tccp*
  br label %820

820:                                              ; preds = %1084, %818
  %821 = phi i32 [ %762, %818 ], [ %1086, %1084 ]
  %822 = phi %struct.opj_tccp* [ %819, %818 ], [ %1085, %1084 ]
  %823 = phi i64 [ 0, %818 ], [ %1080, %1084 ]
  %824 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823
  %825 = and i32 %821, 1
  %826 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %824, i64 0, i32 0
  store i32 %825, i32* %826, align 4, !tbaa !221
  %827 = load i32, i32* %192, align 8, !tbaa !263
  %828 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 1
  store i32 %827, i32* %828, align 4, !tbaa !95
  %829 = load i32, i32* %193, align 4, !tbaa !310
  %830 = icmp sgt i32 %829, 1
  br i1 %830, label %831, label %837

831:                                              ; preds = %831, %820
  %832 = phi i32 [ %835, %831 ], [ 0, %820 ]
  %833 = phi i32 [ %834, %831 ], [ %829, %820 ]
  %834 = lshr i32 %833, 1
  %835 = add nuw nsw i32 %832, 1
  %836 = icmp ugt i32 %833, 3
  br i1 %836, label %831, label %837

837:                                              ; preds = %831, %820
  %838 = phi i32 [ 0, %820 ], [ %835, %831 ]
  %839 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 2
  store i32 %838, i32* %839, align 4, !tbaa !241
  %840 = load i32, i32* %194, align 8, !tbaa !311
  %841 = icmp sgt i32 %840, 1
  br i1 %841, label %842, label %848

842:                                              ; preds = %842, %837
  %843 = phi i32 [ %846, %842 ], [ 0, %837 ]
  %844 = phi i32 [ %845, %842 ], [ %840, %837 ]
  %845 = lshr i32 %844, 1
  %846 = add nuw nsw i32 %843, 1
  %847 = icmp ugt i32 %844, 3
  br i1 %847, label %842, label %848

848:                                              ; preds = %842, %837
  %849 = phi i32 [ 0, %837 ], [ %846, %842 ]
  %850 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 3
  store i32 %849, i32* %850, align 4, !tbaa !242
  %851 = load i32, i32* %195, align 4, !tbaa !312
  %852 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 4
  store i32 %851, i32* %852, align 4, !tbaa !243
  %853 = load i32, i32* %196, align 8, !tbaa !313
  %854 = icmp eq i32 %853, 0
  %855 = zext i1 %854 to i32
  %856 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 5
  store i32 %855, i32* %856, align 4, !tbaa !97
  %857 = select i1 %854, i32 0, i32 2
  %858 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 6
  store i32 %857, i32* %858, align 4, !tbaa !98
  %859 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 8
  store i32 2, i32* %859, align 4, !tbaa !240
  %860 = load i32, i32* %197, align 4, !tbaa !314
  %861 = zext i32 %860 to i64
  %862 = icmp eq i64 %823, %861
  br i1 %862, label %863, label %865

863:                                              ; preds = %848
  %864 = load i32, i32* %198, align 8, !tbaa !315
  br label %865

865:                                              ; preds = %863, %848
  %866 = phi i32 [ %864, %863 ], [ 0, %848 ]
  %867 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 9
  store i32 %866, i32* %867, align 4
  %868 = load i32, i32* %17, align 4, !tbaa !248
  %869 = icmp eq i32 %868, 0
  br i1 %869, label %938, label %870

870:                                              ; preds = %865
  %871 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 0
  store i32 7, i32* %871, align 4, !tbaa !43
  %872 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 0
  store i32 7, i32* %872, align 4, !tbaa !43
  %873 = icmp sgt i32 %827, 1
  br i1 %873, label %874, label %1076

874:                                              ; preds = %870
  %875 = zext i32 %827 to i64
  %876 = add nsw i64 %875, -1
  %877 = icmp ult i64 %876, 4
  br i1 %877, label %930, label %878

878:                                              ; preds = %874
  %879 = and i64 %876, -4
  %880 = or i64 %879, 1
  %881 = add nsw i64 %879, -4
  %882 = lshr exact i64 %881, 2
  %883 = add nuw nsw i64 %882, 1
  %884 = and i64 %883, 3
  %885 = icmp ult i64 %881, 12
  br i1 %885, label %914, label %886

886:                                              ; preds = %878
  %887 = sub nsw i64 %883, %884
  br label %888

888:                                              ; preds = %888, %886
  %889 = phi i64 [ 0, %886 ], [ %911, %888 ]
  %890 = phi i64 [ %887, %886 ], [ %912, %888 ]
  %891 = or i64 %889, 1
  %892 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %891
  %893 = bitcast i32* %892 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %893, align 4, !tbaa !43
  %894 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %891
  %895 = bitcast i32* %894 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %895, align 4, !tbaa !43
  %896 = or i64 %889, 5
  %897 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %896
  %898 = bitcast i32* %897 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %898, align 4, !tbaa !43
  %899 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %896
  %900 = bitcast i32* %899 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %900, align 4, !tbaa !43
  %901 = or i64 %889, 9
  %902 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %901
  %903 = bitcast i32* %902 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %903, align 4, !tbaa !43
  %904 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %901
  %905 = bitcast i32* %904 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %905, align 4, !tbaa !43
  %906 = or i64 %889, 13
  %907 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %906
  %908 = bitcast i32* %907 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %908, align 4, !tbaa !43
  %909 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %906
  %910 = bitcast i32* %909 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %910, align 4, !tbaa !43
  %911 = add i64 %889, 16
  %912 = add i64 %890, -4
  %913 = icmp eq i64 %912, 0
  br i1 %913, label %914, label %888, !llvm.loop !316

914:                                              ; preds = %888, %878
  %915 = phi i64 [ 0, %878 ], [ %911, %888 ]
  %916 = icmp eq i64 %884, 0
  br i1 %916, label %928, label %917

917:                                              ; preds = %917, %914
  %918 = phi i64 [ %925, %917 ], [ %915, %914 ]
  %919 = phi i64 [ %926, %917 ], [ %884, %914 ]
  %920 = or i64 %918, 1
  %921 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %920
  %922 = bitcast i32* %921 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %922, align 4, !tbaa !43
  %923 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %920
  %924 = bitcast i32* %923 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %924, align 4, !tbaa !43
  %925 = add i64 %918, 4
  %926 = add i64 %919, -1
  %927 = icmp eq i64 %926, 0
  br i1 %927, label %928, label %917, !llvm.loop !317

928:                                              ; preds = %917, %914
  %929 = icmp eq i64 %876, %879
  br i1 %929, label %1076, label %930

930:                                              ; preds = %928, %874
  %931 = phi i64 [ 1, %874 ], [ %880, %928 ]
  br label %932

932:                                              ; preds = %932, %930
  %933 = phi i64 [ %936, %932 ], [ %931, %930 ]
  %934 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %933
  store i32 8, i32* %934, align 4, !tbaa !43
  %935 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %933
  store i32 8, i32* %935, align 4, !tbaa !43
  %936 = add nuw nsw i64 %933, 1
  %937 = icmp eq i64 %936, %875
  br i1 %937, label %1076, label %932, !llvm.loop !318

938:                                              ; preds = %865
  %939 = icmp eq i32 %825, 0
  %940 = icmp sgt i32 %827, 0
  br i1 %939, label %945, label %941

941:                                              ; preds = %938
  br i1 %940, label %942, label %1076

942:                                              ; preds = %941
  %943 = sext i32 %827 to i64
  %944 = zext i32 %827 to i64
  br label %1000

945:                                              ; preds = %938
  br i1 %940, label %946, label %1076

946:                                              ; preds = %945
  %947 = zext i32 %827 to i64
  %948 = icmp ult i32 %827, 4
  br i1 %948, label %949, label %951

949:                                              ; preds = %998, %946
  %950 = phi i64 [ 0, %946 ], [ %952, %998 ]
  br label %1070

951:                                              ; preds = %946
  %952 = and i64 %947, 4294967292
  %953 = add nsw i64 %952, -4
  %954 = lshr exact i64 %953, 2
  %955 = add nuw nsw i64 %954, 1
  %956 = and i64 %955, 3
  %957 = icmp ult i64 %953, 12
  br i1 %957, label %985, label %958

958:                                              ; preds = %951
  %959 = sub nsw i64 %955, %956
  br label %960

960:                                              ; preds = %960, %958
  %961 = phi i64 [ 0, %958 ], [ %982, %960 ]
  %962 = phi i64 [ %959, %958 ], [ %983, %960 ]
  %963 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %961
  %964 = bitcast i32* %963 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %964, align 4, !tbaa !43
  %965 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %961
  %966 = bitcast i32* %965 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %966, align 4, !tbaa !43
  %967 = or i64 %961, 4
  %968 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %967
  %969 = bitcast i32* %968 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %969, align 4, !tbaa !43
  %970 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %967
  %971 = bitcast i32* %970 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %971, align 4, !tbaa !43
  %972 = or i64 %961, 8
  %973 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %972
  %974 = bitcast i32* %973 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %974, align 4, !tbaa !43
  %975 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %972
  %976 = bitcast i32* %975 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %976, align 4, !tbaa !43
  %977 = or i64 %961, 12
  %978 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %977
  %979 = bitcast i32* %978 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %979, align 4, !tbaa !43
  %980 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %977
  %981 = bitcast i32* %980 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %981, align 4, !tbaa !43
  %982 = add i64 %961, 16
  %983 = add i64 %962, -4
  %984 = icmp eq i64 %983, 0
  br i1 %984, label %985, label %960, !llvm.loop !319

985:                                              ; preds = %960, %951
  %986 = phi i64 [ 0, %951 ], [ %982, %960 ]
  %987 = icmp eq i64 %956, 0
  br i1 %987, label %998, label %988

988:                                              ; preds = %988, %985
  %989 = phi i64 [ %995, %988 ], [ %986, %985 ]
  %990 = phi i64 [ %996, %988 ], [ %956, %985 ]
  %991 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %989
  %992 = bitcast i32* %991 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %992, align 4, !tbaa !43
  %993 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %989
  %994 = bitcast i32* %993 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %994, align 4, !tbaa !43
  %995 = add i64 %989, 4
  %996 = add i64 %990, -1
  %997 = icmp eq i64 %996, 0
  br i1 %997, label %998, label %988, !llvm.loop !320

998:                                              ; preds = %988, %985
  %999 = icmp eq i64 %952, %947
  br i1 %999, label %1076, label %949

1000:                                             ; preds = %1065, %942
  %1001 = phi i64 [ 0, %942 ], [ %1068, %1065 ]
  %1002 = phi i64 [ %943, %942 ], [ %1003, %1065 ]
  %1003 = add nsw i64 %1002, -1
  %1004 = load i32, i32* %199, align 4, !tbaa !321
  %1005 = sext i32 %1004 to i64
  %1006 = icmp slt i64 %1001, %1005
  br i1 %1006, label %1007, label %1033

1007:                                             ; preds = %1000
  %1008 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %1001
  %1009 = load i32, i32* %1008, align 4, !tbaa !43
  %1010 = icmp slt i32 %1009, 1
  br i1 %1010, label %1019, label %1011

1011:                                             ; preds = %1007
  %1012 = icmp eq i32 %1009, 1
  br i1 %1012, label %1019, label %1013

1013:                                             ; preds = %1013, %1011
  %1014 = phi i32 [ %1017, %1013 ], [ 0, %1011 ]
  %1015 = phi i32 [ %1016, %1013 ], [ %1009, %1011 ]
  %1016 = lshr i32 %1015, 1
  %1017 = add nuw nsw i32 %1014, 1
  %1018 = icmp ugt i32 %1015, 3
  br i1 %1018, label %1013, label %1019

1019:                                             ; preds = %1013, %1011, %1007
  %1020 = phi i32 [ 1, %1007 ], [ 0, %1011 ], [ %1017, %1013 ]
  %1021 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %1003
  store i32 %1020, i32* %1021, align 4, !tbaa !43
  %1022 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %1001
  %1023 = load i32, i32* %1022, align 4, !tbaa !43
  %1024 = icmp slt i32 %1023, 1
  br i1 %1024, label %1065, label %1025

1025:                                             ; preds = %1019
  %1026 = icmp eq i32 %1023, 1
  br i1 %1026, label %1065, label %1027

1027:                                             ; preds = %1027, %1025
  %1028 = phi i32 [ %1031, %1027 ], [ 0, %1025 ]
  %1029 = phi i32 [ %1030, %1027 ], [ %1023, %1025 ]
  %1030 = lshr i32 %1029, 1
  %1031 = add nuw nsw i32 %1028, 1
  %1032 = icmp ugt i32 %1029, 3
  br i1 %1032, label %1027, label %1065

1033:                                             ; preds = %1000
  %1034 = add nsw i32 %1004, -1
  %1035 = sext i32 %1034 to i64
  %1036 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %1035
  %1037 = load i32, i32* %1036, align 4, !tbaa !43
  %1038 = trunc i64 %1001 to i32
  %1039 = sub nsw i32 %1038, %1034
  %1040 = ashr i32 %1037, %1039
  %1041 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %1035
  %1042 = load i32, i32* %1041, align 4, !tbaa !43
  %1043 = ashr i32 %1042, %1039
  %1044 = icmp slt i32 %1040, 1
  br i1 %1044, label %1053, label %1045

1045:                                             ; preds = %1033
  %1046 = icmp eq i32 %1040, 1
  br i1 %1046, label %1053, label %1047

1047:                                             ; preds = %1047, %1045
  %1048 = phi i32 [ %1051, %1047 ], [ 0, %1045 ]
  %1049 = phi i32 [ %1050, %1047 ], [ %1040, %1045 ]
  %1050 = lshr i32 %1049, 1
  %1051 = add nuw nsw i32 %1048, 1
  %1052 = icmp ugt i32 %1049, 3
  br i1 %1052, label %1047, label %1053

1053:                                             ; preds = %1047, %1045, %1033
  %1054 = phi i32 [ 1, %1033 ], [ 0, %1045 ], [ %1051, %1047 ]
  %1055 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %1003
  store i32 %1054, i32* %1055, align 4, !tbaa !43
  %1056 = icmp slt i32 %1043, 1
  br i1 %1056, label %1065, label %1057

1057:                                             ; preds = %1053
  %1058 = icmp eq i32 %1043, 1
  br i1 %1058, label %1065, label %1059

1059:                                             ; preds = %1059, %1057
  %1060 = phi i32 [ %1063, %1059 ], [ 0, %1057 ]
  %1061 = phi i32 [ %1062, %1059 ], [ %1043, %1057 ]
  %1062 = lshr i32 %1061, 1
  %1063 = add nuw nsw i32 %1060, 1
  %1064 = icmp ugt i32 %1061, 3
  br i1 %1064, label %1059, label %1065

1065:                                             ; preds = %1059, %1057, %1053, %1027, %1025, %1019
  %1066 = phi i32 [ 1, %1019 ], [ 0, %1025 ], [ 1, %1053 ], [ 0, %1057 ], [ %1031, %1027 ], [ %1063, %1059 ]
  %1067 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %1003
  store i32 %1066, i32* %1067, align 4, !tbaa !43
  %1068 = add nuw nsw i64 %1001, 1
  %1069 = icmp eq i64 %1068, %944
  br i1 %1069, label %1076, label %1000

1070:                                             ; preds = %1070, %949
  %1071 = phi i64 [ %1074, %1070 ], [ %950, %949 ]
  %1072 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 10, i64 %1071
  store i32 15, i32* %1072, align 4, !tbaa !43
  %1073 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %822, i64 %823, i32 11, i64 %1071
  store i32 15, i32* %1073, align 4, !tbaa !43
  %1074 = add nuw nsw i64 %1071, 1
  %1075 = icmp eq i64 %1074, %947
  br i1 %1075, label %1076, label %1070, !llvm.loop !322

1076:                                             ; preds = %1070, %1065, %998, %945, %941, %932, %928, %870
  %1077 = load %struct.opj_image_comp*, %struct.opj_image_comp** %200, align 8, !tbaa !128
  %1078 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %1077, i64 %823, i32 6
  %1079 = load i32, i32* %1078, align 8, !tbaa !207
  tail call void @dwt_calc_explicit_stepsizes(%struct.opj_tccp* nonnull %824, i32 %1079) #9
  %1080 = add nuw nsw i64 %823, 1
  %1081 = load i32, i32* %121, align 8, !tbaa !127
  %1082 = sext i32 %1081 to i64
  %1083 = icmp slt i64 %1080, %1082
  br i1 %1083, label %1084, label %1087

1084:                                             ; preds = %1076
  %1085 = load %struct.opj_tccp*, %struct.opj_tccp** %815, align 8, !tbaa !162
  %1086 = load i32, i32* %188, align 8, !tbaa !304
  br label %820

1087:                                             ; preds = %1076
  %1088 = load i32, i32* %14, align 8, !tbaa !136
  %1089 = load i32, i32* %16, align 4, !tbaa !137
  br label %1090

1090:                                             ; preds = %1087, %810
  %1091 = phi i32 [ %1089, %1087 ], [ %206, %810 ]
  %1092 = phi i32 [ %1088, %1087 ], [ %207, %810 ]
  %1093 = phi i32 [ %1081, %1087 ], [ %208, %810 ]
  %1094 = add nuw nsw i64 %210, 1
  %1095 = mul nsw i32 %1091, %1092
  %1096 = sext i32 %1095 to i64
  %1097 = icmp slt i64 %1094, %1096
  br i1 %1097, label %1098, label %1100

1098:                                             ; preds = %1090
  %1099 = load %struct.opj_tcp*, %struct.opj_tcp** %182, align 8, !tbaa !139
  br label %205

1100:                                             ; preds = %1090, %175, %3
  ret void
}

; Function Attrs: argmemonly nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

; Function Attrs: nounwind
declare i8* @strcpy(i8* returned, i8* nocapture readonly) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @j2k_encode(%struct.opj_j2k*, %struct.opj_cio*, %struct.opj_image*, %struct.opj_codestream_info*) #0 {
  %5 = getelementptr %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  store %struct.opj_cio* %1, %struct.opj_cio** %5, align 8, !tbaa !173
  %6 = getelementptr %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  store %struct.opj_image* %2, %struct.opj_image** %6, align 8, !tbaa !174
  %7 = getelementptr %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %8 = load %struct.opj_cp*, %struct.opj_cp** %7, align 8, !tbaa !25
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 17
  store %struct.opj_codestream_info* %3, %struct.opj_codestream_info** %9, align 8, !tbaa !142
  %10 = icmp ne %struct.opj_codestream_info* %3, null
  br i1 %10, label %11, label %152

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 18
  %13 = load i32, i32* %12, align 8, !tbaa !136
  %14 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 19
  %15 = load i32, i32* %14, align 4, !tbaa !137
  %16 = mul nsw i32 %15, %13
  %17 = sext i32 %16 to i64
  %18 = mul nsw i64 %17, 608
  %19 = tail call noalias i8* @malloc(i64 %18) #9
  %20 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 21
  %21 = bitcast %struct.opj_tile_info** %20 to i8**
  store i8* %19, i8** %21, align 8, !tbaa !143
  %22 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 2
  %23 = load i32, i32* %22, align 8, !tbaa !199
  %24 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 0
  %25 = load i32, i32* %24, align 8, !tbaa !201
  %26 = sub nsw i32 %23, %25
  %27 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 3
  store i32 %26, i32* %27, align 8, !tbaa !213
  %28 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 3
  %29 = load i32, i32* %28, align 4, !tbaa !200
  %30 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 1
  %31 = load i32, i32* %30, align 4, !tbaa !202
  %32 = sub nsw i32 %29, %31
  %33 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 4
  store i32 %32, i32* %33, align 4, !tbaa !214
  %34 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 28
  %35 = load %struct.opj_tcp*, %struct.opj_tcp** %34, align 8, !tbaa !139
  %36 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %35, i64 0, i32 2
  %37 = load i32, i32* %36, align 8, !tbaa !148
  %38 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 5
  store i32 %37, i32* %38, align 8, !tbaa !222
  %39 = load i32, i32* %12, align 8, !tbaa !136
  %40 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 10
  store i32 %39, i32* %40, align 4, !tbaa !216
  %41 = load i32, i32* %14, align 4, !tbaa !137
  %42 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 11
  store i32 %41, i32* %42, align 8, !tbaa !217
  %43 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 6
  %44 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 13
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 8, !tbaa !43
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %48 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> %47, <4 x i32>* %48, align 4, !tbaa !43
  %49 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %50 = load i32, i32* %49, align 8, !tbaa !127
  %51 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 12
  store i32 %50, i32* %51, align 4, !tbaa !215
  %52 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %35, i64 0, i32 3
  %53 = load i32, i32* %52, align 4, !tbaa !219
  %54 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 13
  store i32 %53, i32* %54, align 8, !tbaa !223
  %55 = sext i32 %50 to i64
  %56 = shl nsw i64 %55, 2
  %57 = tail call noalias i8* @malloc(i64 %56) #9
  %58 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 14
  %59 = bitcast i32** %58 to i8**
  store i8* %57, i8** %59, align 8, !tbaa !224
  %60 = icmp sgt i32 %50, 0
  %61 = bitcast i8* %57 to i32*
  br i1 %60, label %62, label %142

62:                                               ; preds = %11
  %63 = load %struct.opj_tcp*, %struct.opj_tcp** %34, align 8, !tbaa !139
  %64 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %63, i64 0, i32 15
  %65 = load %struct.opj_tccp*, %struct.opj_tccp** %64, align 8, !tbaa !162
  %66 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %65, i64 0, i32 1
  %67 = icmp ult i32 %50, 8
  br i1 %67, label %133, label %68

68:                                               ; preds = %62
  %69 = shl nsw i64 %55, 2
  %70 = getelementptr i8, i8* %57, i64 %69
  %71 = getelementptr %struct.opj_tccp, %struct.opj_tccp* %65, i64 0, i32 1
  %72 = bitcast i32* %71 to i8*
  %73 = getelementptr i8, i8* %72, i64 1
  %74 = bitcast i32* %66 to i8*
  %75 = icmp ult i8* %57, %73
  %76 = icmp ugt i8* %70, %74
  %77 = and i1 %75, %76
  br i1 %77, label %133, label %78

78:                                               ; preds = %68
  %79 = and i64 %55, -8
  %80 = add nsw i64 %79, -8
  %81 = lshr exact i64 %80, 3
  %82 = add nuw nsw i64 %81, 1
  %83 = and i64 %82, 1
  %84 = icmp eq i64 %80, 0
  br i1 %84, label %116, label %85

85:                                               ; preds = %78
  %86 = sub nuw nsw i64 %82, %83
  %87 = load i32, i32* %66, align 4, !tbaa !95, !alias.scope !323
  %88 = insertelement <4 x i32> undef, i32 %87, i32 0
  %89 = insertelement <4 x i32> undef, i32 %87, i32 0
  %90 = add nsw <4 x i32> %88, <i32 -1, i32 undef, i32 undef, i32 undef>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> zeroinitializer
  %92 = add nsw <4 x i32> %89, <i32 -1, i32 undef, i32 undef, i32 undef>
  %93 = shufflevector <4 x i32> %92, <4 x i32> undef, <4 x i32> zeroinitializer
  %94 = load i32, i32* %66, align 4, !tbaa !95, !alias.scope !323
  %95 = insertelement <4 x i32> undef, i32 %94, i32 0
  %96 = insertelement <4 x i32> undef, i32 %94, i32 0
  %97 = add nsw <4 x i32> %95, <i32 -1, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> zeroinitializer
  %99 = add nsw <4 x i32> %96, <i32 -1, i32 undef, i32 undef, i32 undef>
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %101

101:                                              ; preds = %101, %85
  %102 = phi i64 [ 0, %85 ], [ %113, %101 ]
  %103 = phi i64 [ %86, %85 ], [ %114, %101 ]
  %104 = getelementptr inbounds i32, i32* %61, i64 %102
  %105 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %105, align 4, !tbaa !43, !alias.scope !326, !noalias !323
  %106 = getelementptr inbounds i32, i32* %104, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %107, align 4, !tbaa !43, !alias.scope !326, !noalias !323
  %108 = or i64 %102, 8
  %109 = getelementptr inbounds i32, i32* %61, i64 %108
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %98, <4 x i32>* %110, align 4, !tbaa !43, !alias.scope !326, !noalias !323
  %111 = getelementptr inbounds i32, i32* %109, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %112, align 4, !tbaa !43, !alias.scope !326, !noalias !323
  %113 = add i64 %102, 16
  %114 = add i64 %103, -2
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %101, !llvm.loop !328

116:                                              ; preds = %101, %78
  %117 = phi i64 [ 0, %78 ], [ %113, %101 ]
  %118 = icmp eq i64 %83, 0
  br i1 %118, label %131, label %119

119:                                              ; preds = %116
  %120 = load i32, i32* %66, align 4, !tbaa !95, !alias.scope !323
  %121 = insertelement <4 x i32> undef, i32 %120, i32 0
  %122 = insertelement <4 x i32> undef, i32 %120, i32 0
  %123 = add nsw <4 x i32> %121, <i32 -1, i32 undef, i32 undef, i32 undef>
  %124 = shufflevector <4 x i32> %123, <4 x i32> undef, <4 x i32> zeroinitializer
  %125 = add nsw <4 x i32> %122, <i32 -1, i32 undef, i32 undef, i32 undef>
  %126 = shufflevector <4 x i32> %125, <4 x i32> undef, <4 x i32> zeroinitializer
  %127 = getelementptr inbounds i32, i32* %61, i64 %117
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %128, align 4, !tbaa !43, !alias.scope !326, !noalias !323
  %129 = getelementptr inbounds i32, i32* %127, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %130, align 4, !tbaa !43, !alias.scope !326, !noalias !323
  br label %131

131:                                              ; preds = %119, %116
  %132 = icmp eq i64 %79, %55
  br i1 %132, label %142, label %133

133:                                              ; preds = %131, %68, %62
  %134 = phi i64 [ 0, %68 ], [ 0, %62 ], [ %79, %131 ]
  br label %135

135:                                              ; preds = %135, %133
  %136 = phi i64 [ %140, %135 ], [ %134, %133 ]
  %137 = load i32, i32* %66, align 4, !tbaa !95
  %138 = add nsw i32 %137, -1
  %139 = getelementptr inbounds i32, i32* %61, i64 %136
  store i32 %138, i32* %139, align 4, !tbaa !43
  %140 = add nuw nsw i64 %136, 1
  %141 = icmp slt i64 %140, %55
  br i1 %141, label %135, label %142, !llvm.loop !329

142:                                              ; preds = %135, %131, %11
  %143 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 0
  store double 0.000000e+00, double* %143, align 8, !tbaa !330
  %144 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %145 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 18
  store i32 %144, i32* %145, align 4, !tbaa !181
  %146 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 17
  store i32 100, i32* %146, align 8, !tbaa !331
  %147 = tail call noalias i8* @malloc(i64 1200) #9
  %148 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 16
  %149 = bitcast %struct.opj_marker_info_t** %148 to i8**
  store i8* %147, i8** %149, align 8, !tbaa !332
  %150 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 15
  store i32 0, i32* %150, align 8, !tbaa !333
  %151 = load %struct.opj_cio*, %struct.opj_cio** %5, align 8, !tbaa !173
  br label %152

152:                                              ; preds = %142, %4
  %153 = phi %struct.opj_cio* [ %151, %142 ], [ %1, %4 ]
  %154 = tail call i32 @cio_write(%struct.opj_cio* %153, i64 65359, i32 2) #9
  %155 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %9, align 8, !tbaa !142
  %156 = icmp eq %struct.opj_codestream_info* %155, null
  br i1 %156, label %186, label %157

157:                                              ; preds = %152
  %158 = tail call i32 @cio_tell(%struct.opj_cio* %153) #9
  %159 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %155, i64 0, i32 15
  %160 = load i32, i32* %159, align 8, !tbaa !333
  %161 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %155, i64 0, i32 17
  %162 = load i32, i32* %161, align 8, !tbaa !331
  %163 = icmp slt i32 %160, %162
  br i1 %163, label %164, label %167

164:                                              ; preds = %157
  %165 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %155, i64 0, i32 16
  %166 = load %struct.opj_marker_info_t*, %struct.opj_marker_info_t** %165, align 8, !tbaa !332
  br label %178

167:                                              ; preds = %157
  %168 = sitofp i32 %162 to float
  %169 = fptosi float %168 to i32
  %170 = add nsw i32 %169, 100
  store i32 %170, i32* %161, align 8, !tbaa !331
  %171 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %155, i64 0, i32 16
  %172 = bitcast %struct.opj_marker_info_t** %171 to i8**
  %173 = load i8*, i8** %172, align 8, !tbaa !332
  %174 = sext i32 %170 to i64
  %175 = tail call i8* @realloc(i8* %173, i64 %174) #9
  store i8* %175, i8** %172, align 8, !tbaa !332
  %176 = bitcast i8* %175 to %struct.opj_marker_info_t*
  %177 = load i32, i32* %159, align 8, !tbaa !333
  br label %178

178:                                              ; preds = %167, %164
  %179 = phi i32 [ %160, %164 ], [ %177, %167 ]
  %180 = phi %struct.opj_marker_info_t* [ %166, %164 ], [ %176, %167 ]
  %181 = sext i32 %179 to i64
  %182 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %180, i64 %181, i32 0
  store i16 -177, i16* %182, align 4, !tbaa !334
  %183 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %180, i64 %181, i32 1
  store i32 %158, i32* %183, align 4, !tbaa !337
  %184 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %180, i64 %181, i32 2
  store i32 0, i32* %184, align 4, !tbaa !338
  %185 = add nsw i32 %179, 1
  store i32 %185, i32* %159, align 8, !tbaa !333
  br label %186

186:                                              ; preds = %178, %152
  %187 = load %struct.opj_cio*, %struct.opj_cio** %5, align 8, !tbaa !173
  %188 = load %struct.opj_image*, %struct.opj_image** %6, align 8, !tbaa !174
  %189 = load %struct.opj_cp*, %struct.opj_cp** %7, align 8, !tbaa !25
  %190 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 65361, i32 2) #9
  %191 = tail call i32 @cio_tell(%struct.opj_cio* %187) #9
  tail call void @cio_skip(%struct.opj_cio* %187, i32 2) #9
  %192 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %189, i64 0, i32 3
  %193 = load i32, i32* %192, align 4, !tbaa !254
  %194 = zext i32 %193 to i64
  %195 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %194, i32 2) #9
  %196 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %188, i64 0, i32 2
  %197 = load i32, i32* %196, align 8, !tbaa !199
  %198 = sext i32 %197 to i64
  %199 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %198, i32 4) #9
  %200 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %188, i64 0, i32 3
  %201 = load i32, i32* %200, align 4, !tbaa !200
  %202 = sext i32 %201 to i64
  %203 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %202, i32 4) #9
  %204 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %188, i64 0, i32 0
  %205 = load i32, i32* %204, align 8, !tbaa !201
  %206 = sext i32 %205 to i64
  %207 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %206, i32 4) #9
  %208 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %188, i64 0, i32 1
  %209 = load i32, i32* %208, align 4, !tbaa !202
  %210 = sext i32 %209 to i64
  %211 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %210, i32 4) #9
  %212 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %189, i64 0, i32 15
  %213 = load i32, i32* %212, align 8, !tbaa !203
  %214 = sext i32 %213 to i64
  %215 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %214, i32 4) #9
  %216 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %189, i64 0, i32 16
  %217 = load i32, i32* %216, align 4, !tbaa !204
  %218 = sext i32 %217 to i64
  %219 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %218, i32 4) #9
  %220 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %189, i64 0, i32 13
  %221 = load i32, i32* %220, align 8, !tbaa !205
  %222 = sext i32 %221 to i64
  %223 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %222, i32 4) #9
  %224 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %189, i64 0, i32 14
  %225 = load i32, i32* %224, align 4, !tbaa !206
  %226 = sext i32 %225 to i64
  %227 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %226, i32 4) #9
  %228 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %188, i64 0, i32 4
  %229 = load i32, i32* %228, align 8, !tbaa !127
  %230 = sext i32 %229 to i64
  %231 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %230, i32 2) #9
  %232 = load i32, i32* %228, align 8, !tbaa !127
  %233 = icmp sgt i32 %232, 0
  br i1 %233, label %234, label %262

234:                                              ; preds = %186
  %235 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %188, i64 0, i32 6
  br label %236

236:                                              ; preds = %236, %234
  %237 = phi i64 [ 0, %234 ], [ %258, %236 ]
  %238 = load %struct.opj_image_comp*, %struct.opj_image_comp** %235, align 8, !tbaa !128
  %239 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %238, i64 %237, i32 6
  %240 = load i32, i32* %239, align 8, !tbaa !207
  %241 = add nsw i32 %240, -1
  %242 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %238, i64 %237, i32 8
  %243 = load i32, i32* %242, align 8, !tbaa !131
  %244 = shl i32 %243, 7
  %245 = add nsw i32 %241, %244
  %246 = sext i32 %245 to i64
  %247 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %246, i32 1) #9
  %248 = load %struct.opj_image_comp*, %struct.opj_image_comp** %235, align 8, !tbaa !128
  %249 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %248, i64 %237, i32 0
  %250 = load i32, i32* %249, align 8, !tbaa !208
  %251 = sext i32 %250 to i64
  %252 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %251, i32 1) #9
  %253 = load %struct.opj_image_comp*, %struct.opj_image_comp** %235, align 8, !tbaa !128
  %254 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %253, i64 %237, i32 1
  %255 = load i32, i32* %254, align 4, !tbaa !209
  %256 = sext i32 %255 to i64
  %257 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %256, i32 1) #9
  %258 = add nuw nsw i64 %237, 1
  %259 = load i32, i32* %228, align 8, !tbaa !127
  %260 = sext i32 %259 to i64
  %261 = icmp slt i64 %258, %260
  br i1 %261, label %236, label %262

262:                                              ; preds = %236, %186
  %263 = tail call i32 @cio_tell(%struct.opj_cio* %187) #9
  %264 = sub nsw i32 %263, %191
  tail call void @cio_seek(%struct.opj_cio* %187, i32 %191) #9
  %265 = sext i32 %264 to i64
  %266 = tail call i32 @cio_write(%struct.opj_cio* %187, i64 %265, i32 2) #9
  tail call void @cio_seek(%struct.opj_cio* %187, i32 %263) #9
  %267 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %9, align 8, !tbaa !142
  %268 = icmp eq %struct.opj_codestream_info* %267, null
  br i1 %268, label %297, label %269

269:                                              ; preds = %262
  %270 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %267, i64 0, i32 15
  %271 = load i32, i32* %270, align 8, !tbaa !333
  %272 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %267, i64 0, i32 17
  %273 = load i32, i32* %272, align 8, !tbaa !331
  %274 = icmp slt i32 %271, %273
  br i1 %274, label %275, label %278

275:                                              ; preds = %269
  %276 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %267, i64 0, i32 16
  %277 = load %struct.opj_marker_info_t*, %struct.opj_marker_info_t** %276, align 8, !tbaa !332
  br label %289

278:                                              ; preds = %269
  %279 = sitofp i32 %273 to float
  %280 = fptosi float %279 to i32
  %281 = add nsw i32 %280, 100
  store i32 %281, i32* %272, align 8, !tbaa !331
  %282 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %267, i64 0, i32 16
  %283 = bitcast %struct.opj_marker_info_t** %282 to i8**
  %284 = load i8*, i8** %283, align 8, !tbaa !332
  %285 = sext i32 %281 to i64
  %286 = tail call i8* @realloc(i8* %284, i64 %285) #9
  store i8* %286, i8** %283, align 8, !tbaa !332
  %287 = bitcast i8* %286 to %struct.opj_marker_info_t*
  %288 = load i32, i32* %270, align 8, !tbaa !333
  br label %289

289:                                              ; preds = %278, %275
  %290 = phi i32 [ %271, %275 ], [ %288, %278 ]
  %291 = phi %struct.opj_marker_info_t* [ %277, %275 ], [ %287, %278 ]
  %292 = sext i32 %290 to i64
  %293 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %291, i64 %292, i32 0
  store i16 -175, i16* %293, align 4, !tbaa !334
  %294 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %291, i64 %292, i32 1
  store i32 %191, i32* %294, align 4, !tbaa !337
  %295 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %291, i64 %292, i32 2
  store i32 %264, i32* %295, align 4, !tbaa !338
  %296 = add nsw i32 %290, 1
  store i32 %296, i32* %270, align 8, !tbaa !333
  br label %297

297:                                              ; preds = %289, %262
  %298 = load %struct.opj_cio*, %struct.opj_cio** %5, align 8, !tbaa !173
  %299 = tail call i32 @cio_write(%struct.opj_cio* %298, i64 65362, i32 2) #9
  %300 = tail call i32 @cio_tell(%struct.opj_cio* %298) #9
  tail call void @cio_skip(%struct.opj_cio* %298, i32 2) #9
  %301 = load %struct.opj_cp*, %struct.opj_cp** %7, align 8, !tbaa !25
  %302 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %301, i64 0, i32 28
  %303 = load %struct.opj_tcp*, %struct.opj_tcp** %302, align 8, !tbaa !139
  %304 = getelementptr %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %305 = load i32, i32* %304, align 4, !tbaa !183
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %303, i64 %306, i32 1
  %308 = load i32, i32* %307, align 4, !tbaa !218
  %309 = sext i32 %308 to i64
  %310 = tail call i32 @cio_write(%struct.opj_cio* %298, i64 %309, i32 1) #9
  %311 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %303, i64 %306, i32 2
  %312 = load i32, i32* %311, align 8, !tbaa !148
  %313 = sext i32 %312 to i64
  %314 = tail call i32 @cio_write(%struct.opj_cio* %298, i64 %313, i32 1) #9
  %315 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %303, i64 %306, i32 3
  %316 = load i32, i32* %315, align 4, !tbaa !219
  %317 = sext i32 %316 to i64
  %318 = tail call i32 @cio_write(%struct.opj_cio* %298, i64 %317, i32 2) #9
  %319 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %303, i64 %306, i32 4
  %320 = load i32, i32* %319, align 8, !tbaa !220
  %321 = sext i32 %320 to i64
  %322 = tail call i32 @cio_write(%struct.opj_cio* %298, i64 %321, i32 1) #9
  %323 = load i32, i32* %304, align 4, !tbaa !183
  %324 = load %struct.opj_cp*, %struct.opj_cp** %7, align 8, !tbaa !25
  %325 = load %struct.opj_cio*, %struct.opj_cio** %5, align 8, !tbaa !173
  %326 = getelementptr %struct.opj_cp, %struct.opj_cp* %324, i64 0, i32 28
  %327 = load %struct.opj_tcp*, %struct.opj_tcp** %326, align 8, !tbaa !139
  tail call fastcc void @j2k_write_cox(i32 %323, %struct.opj_tcp* %327, %struct.opj_cio* %325, i32 0) #9
  %328 = tail call i32 @cio_tell(%struct.opj_cio* %298) #9
  %329 = sub nsw i32 %328, %300
  tail call void @cio_seek(%struct.opj_cio* %298, i32 %300) #9
  %330 = sext i32 %329 to i64
  %331 = tail call i32 @cio_write(%struct.opj_cio* %298, i64 %330, i32 2) #9
  tail call void @cio_seek(%struct.opj_cio* %298, i32 %328) #9
  %332 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %9, align 8, !tbaa !142
  %333 = icmp eq %struct.opj_codestream_info* %332, null
  br i1 %333, label %362, label %334

334:                                              ; preds = %297
  %335 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %332, i64 0, i32 15
  %336 = load i32, i32* %335, align 8, !tbaa !333
  %337 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %332, i64 0, i32 17
  %338 = load i32, i32* %337, align 8, !tbaa !331
  %339 = icmp slt i32 %336, %338
  br i1 %339, label %340, label %343

340:                                              ; preds = %334
  %341 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %332, i64 0, i32 16
  %342 = load %struct.opj_marker_info_t*, %struct.opj_marker_info_t** %341, align 8, !tbaa !332
  br label %354

343:                                              ; preds = %334
  %344 = sitofp i32 %338 to float
  %345 = fptosi float %344 to i32
  %346 = add nsw i32 %345, 100
  store i32 %346, i32* %337, align 8, !tbaa !331
  %347 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %332, i64 0, i32 16
  %348 = bitcast %struct.opj_marker_info_t** %347 to i8**
  %349 = load i8*, i8** %348, align 8, !tbaa !332
  %350 = sext i32 %346 to i64
  %351 = tail call i8* @realloc(i8* %349, i64 %350) #9
  store i8* %351, i8** %348, align 8, !tbaa !332
  %352 = bitcast i8* %351 to %struct.opj_marker_info_t*
  %353 = load i32, i32* %335, align 8, !tbaa !333
  br label %354

354:                                              ; preds = %343, %340
  %355 = phi i32 [ %336, %340 ], [ %353, %343 ]
  %356 = phi %struct.opj_marker_info_t* [ %342, %340 ], [ %352, %343 ]
  %357 = sext i32 %355 to i64
  %358 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %356, i64 %357, i32 0
  store i16 -174, i16* %358, align 4, !tbaa !334
  %359 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %356, i64 %357, i32 1
  store i32 %300, i32* %359, align 4, !tbaa !337
  %360 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %356, i64 %357, i32 2
  store i32 %329, i32* %360, align 4, !tbaa !338
  %361 = add nsw i32 %355, 1
  store i32 %361, i32* %335, align 8, !tbaa !333
  br label %362

362:                                              ; preds = %354, %297
  %363 = load %struct.opj_cio*, %struct.opj_cio** %5, align 8, !tbaa !173
  %364 = tail call i32 @cio_write(%struct.opj_cio* %363, i64 65372, i32 2) #9
  %365 = tail call i32 @cio_tell(%struct.opj_cio* %363) #9
  tail call void @cio_skip(%struct.opj_cio* %363, i32 2) #9
  %366 = load i32, i32* %304, align 4, !tbaa !183
  %367 = load %struct.opj_cp*, %struct.opj_cp** %7, align 8, !tbaa !25
  %368 = load %struct.opj_cio*, %struct.opj_cio** %5, align 8, !tbaa !173
  %369 = getelementptr %struct.opj_cp, %struct.opj_cp* %367, i64 0, i32 28
  %370 = load %struct.opj_tcp*, %struct.opj_tcp** %369, align 8, !tbaa !139
  %371 = sext i32 %366 to i64
  %372 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %370, i64 %371, i32 15
  %373 = load %struct.opj_tccp*, %struct.opj_tccp** %372, align 8, !tbaa !162
  %374 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %373, i64 0, i32 6
  %375 = load i32, i32* %374, align 4, !tbaa !98
  %376 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %373, i64 0, i32 8
  %377 = load i32, i32* %376, align 4, !tbaa !240
  %378 = shl i32 %377, 5
  %379 = add nsw i32 %378, %375
  %380 = sext i32 %379 to i64
  %381 = tail call i32 @cio_write(%struct.opj_cio* %368, i64 %380, i32 1) #9
  %382 = load i32, i32* %374, align 4, !tbaa !98
  %383 = icmp eq i32 %382, 1
  br i1 %383, label %390, label %384

384:                                              ; preds = %362
  %385 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %373, i64 0, i32 1
  %386 = load i32, i32* %385, align 4, !tbaa !95
  %387 = mul nsw i32 %386, 3
  %388 = add nsw i32 %387, -2
  %389 = icmp sgt i32 %388, 0
  br i1 %389, label %390, label %415

390:                                              ; preds = %384, %362
  %391 = phi i32 [ %388, %384 ], [ 1, %362 ]
  %392 = zext i32 %391 to i64
  br label %393

393:                                              ; preds = %413, %390
  %394 = phi i32 [ %382, %390 ], [ %414, %413 ]
  %395 = phi i64 [ 0, %390 ], [ %411, %413 ]
  %396 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %373, i64 0, i32 7, i64 %395, i32 0
  %397 = load i32, i32* %396, align 4, !tbaa !101
  %398 = icmp eq i32 %394, 0
  br i1 %398, label %399, label %403

399:                                              ; preds = %393
  %400 = shl i32 %397, 3
  %401 = sext i32 %400 to i64
  %402 = tail call i32 @cio_write(%struct.opj_cio* %368, i64 %401, i32 1) #9
  br label %410

403:                                              ; preds = %393
  %404 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %373, i64 0, i32 7, i64 %395, i32 1
  %405 = load i32, i32* %404, align 4, !tbaa !99
  %406 = shl i32 %397, 11
  %407 = add nsw i32 %405, %406
  %408 = sext i32 %407 to i64
  %409 = tail call i32 @cio_write(%struct.opj_cio* %368, i64 %408, i32 2) #9
  br label %410

410:                                              ; preds = %403, %399
  %411 = add nuw nsw i64 %395, 1
  %412 = icmp eq i64 %411, %392
  br i1 %412, label %415, label %413

413:                                              ; preds = %410
  %414 = load i32, i32* %374, align 4, !tbaa !98
  br label %393

415:                                              ; preds = %410, %384
  %416 = tail call i32 @cio_tell(%struct.opj_cio* %363) #9
  %417 = sub nsw i32 %416, %365
  tail call void @cio_seek(%struct.opj_cio* %363, i32 %365) #9
  %418 = sext i32 %417 to i64
  %419 = tail call i32 @cio_write(%struct.opj_cio* %363, i64 %418, i32 2) #9
  tail call void @cio_seek(%struct.opj_cio* %363, i32 %416) #9
  %420 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %9, align 8, !tbaa !142
  %421 = icmp eq %struct.opj_codestream_info* %420, null
  br i1 %421, label %450, label %422

422:                                              ; preds = %415
  %423 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %420, i64 0, i32 15
  %424 = load i32, i32* %423, align 8, !tbaa !333
  %425 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %420, i64 0, i32 17
  %426 = load i32, i32* %425, align 8, !tbaa !331
  %427 = icmp slt i32 %424, %426
  br i1 %427, label %428, label %431

428:                                              ; preds = %422
  %429 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %420, i64 0, i32 16
  %430 = load %struct.opj_marker_info_t*, %struct.opj_marker_info_t** %429, align 8, !tbaa !332
  br label %442

431:                                              ; preds = %422
  %432 = sitofp i32 %426 to float
  %433 = fptosi float %432 to i32
  %434 = add nsw i32 %433, 100
  store i32 %434, i32* %425, align 8, !tbaa !331
  %435 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %420, i64 0, i32 16
  %436 = bitcast %struct.opj_marker_info_t** %435 to i8**
  %437 = load i8*, i8** %436, align 8, !tbaa !332
  %438 = sext i32 %434 to i64
  %439 = tail call i8* @realloc(i8* %437, i64 %438) #9
  store i8* %439, i8** %436, align 8, !tbaa !332
  %440 = bitcast i8* %439 to %struct.opj_marker_info_t*
  %441 = load i32, i32* %423, align 8, !tbaa !333
  br label %442

442:                                              ; preds = %431, %428
  %443 = phi i32 [ %424, %428 ], [ %441, %431 ]
  %444 = phi %struct.opj_marker_info_t* [ %430, %428 ], [ %440, %431 ]
  %445 = sext i32 %443 to i64
  %446 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %444, i64 %445, i32 0
  store i16 -164, i16* %446, align 4, !tbaa !334
  %447 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %444, i64 %445, i32 1
  store i32 %365, i32* %447, align 4, !tbaa !337
  %448 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %444, i64 %445, i32 2
  store i32 %417, i32* %448, align 4, !tbaa !338
  %449 = add nsw i32 %443, 1
  store i32 %449, i32* %423, align 8, !tbaa !333
  br label %450

450:                                              ; preds = %442, %415
  %451 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 0
  %452 = load i32, i32* %451, align 8, !tbaa !250
  %453 = icmp ne i32 %452, 0
  %454 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %455 = load i32, i32* %454, align 8, !tbaa !127
  %456 = icmp sgt i32 %455, 1
  %457 = and i1 %453, %456
  br i1 %457, label %458, label %463

458:                                              ; preds = %458, %450
  %459 = phi i32 [ %460, %458 ], [ 1, %450 ]
  tail call fastcc void @j2k_write_coc(%struct.opj_j2k* %0, i32 %459)
  tail call fastcc void @j2k_write_qcc(%struct.opj_j2k* %0, i32 %459)
  %460 = add nuw nsw i32 %459, 1
  %461 = load i32, i32* %454, align 8, !tbaa !127
  %462 = icmp slt i32 %460, %461
  br i1 %462, label %458, label %463

463:                                              ; preds = %458, %450
  %464 = phi i32 [ %455, %450 ], [ %461, %458 ]
  %465 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %466 = icmp sgt i32 %464, 0
  br i1 %466, label %467, label %505

467:                                              ; preds = %463
  %468 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 28
  br label %469

469:                                              ; preds = %500, %467
  %470 = phi i32 [ %464, %467 ], [ %501, %500 ]
  %471 = phi i64 [ 0, %467 ], [ %502, %500 ]
  %472 = load %struct.opj_tcp*, %struct.opj_tcp** %468, align 8, !tbaa !139
  %473 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %472, i64 0, i32 15
  %474 = load %struct.opj_tccp*, %struct.opj_tccp** %473, align 8, !tbaa !162
  %475 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %474, i64 %471, i32 9
  %476 = load i32, i32* %475, align 4, !tbaa !225
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %500, label %478

478:                                              ; preds = %469
  %479 = load %struct.opj_image*, %struct.opj_image** %6, align 8, !tbaa !174
  %480 = load %struct.opj_cp*, %struct.opj_cp** %7, align 8, !tbaa !25
  %481 = load %struct.opj_cio*, %struct.opj_cio** %5, align 8, !tbaa !173
  %482 = getelementptr %struct.opj_image, %struct.opj_image* %479, i64 0, i32 4
  %483 = load i32, i32* %482, align 8, !tbaa !127
  %484 = getelementptr %struct.opj_cp, %struct.opj_cp* %480, i64 0, i32 28
  %485 = load %struct.opj_tcp*, %struct.opj_tcp** %484, align 8, !tbaa !139
  %486 = tail call i32 @cio_write(%struct.opj_cio* %481, i64 65374, i32 2) #9
  %487 = icmp slt i32 %483, 257
  %488 = select i1 %487, i64 5, i64 6
  %489 = tail call i32 @cio_write(%struct.opj_cio* %481, i64 %488, i32 2) #9
  %490 = select i1 %487, i32 1, i32 2
  %491 = tail call i32 @cio_write(%struct.opj_cio* %481, i64 %471, i32 %490) #9
  %492 = tail call i32 @cio_write(%struct.opj_cio* %481, i64 0, i32 1) #9
  %493 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %485, i64 0, i32 15
  %494 = load %struct.opj_tccp*, %struct.opj_tccp** %493, align 8, !tbaa !162
  %495 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %494, i64 %471, i32 9
  %496 = load i32, i32* %495, align 4, !tbaa !225
  %497 = sext i32 %496 to i64
  %498 = tail call i32 @cio_write(%struct.opj_cio* %481, i64 %497, i32 1) #9
  %499 = load i32, i32* %465, align 8, !tbaa !127
  br label %500

500:                                              ; preds = %478, %469
  %501 = phi i32 [ %470, %469 ], [ %499, %478 ]
  %502 = add nuw nsw i64 %471, 1
  %503 = sext i32 %501 to i64
  %504 = icmp slt i64 %502, %503
  br i1 %504, label %469, label %505

505:                                              ; preds = %500, %463
  %506 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 17
  %507 = load i8*, i8** %506, align 8, !tbaa !165
  %508 = icmp eq i8* %507, null
  br i1 %508, label %572, label %509

509:                                              ; preds = %505
  %510 = load %struct.opj_cp*, %struct.opj_cp** %7, align 8, !tbaa !25
  %511 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %510, i64 0, i32 17
  %512 = load i8*, i8** %511, align 8, !tbaa !165
  %513 = icmp eq i8* %512, null
  br i1 %513, label %572, label %514

514:                                              ; preds = %509
  %515 = load %struct.opj_cio*, %struct.opj_cio** %5, align 8, !tbaa !173
  %516 = tail call i32 @cio_write(%struct.opj_cio* %515, i64 65380, i32 2) #9
  %517 = tail call i32 @cio_tell(%struct.opj_cio* %515) #9
  tail call void @cio_skip(%struct.opj_cio* %515, i32 2) #9
  %518 = tail call i32 @cio_write(%struct.opj_cio* %515, i64 1, i32 2) #9
  %519 = load i8, i8* %512, align 1
  %520 = icmp eq i8 %519, 0
  br i1 %520, label %537, label %521

521:                                              ; preds = %514
  %522 = sext i8 %519 to i64
  %523 = tail call i32 @cio_write(%struct.opj_cio* %515, i64 %522, i32 1) #9
  %524 = tail call i64 @strlen(i8* nonnull %512) #12
  %525 = icmp ugt i64 %524, 1
  br i1 %525, label %526, label %537

526:                                              ; preds = %526, %521
  %527 = phi i64 [ %534, %526 ], [ 1, %521 ]
  %528 = phi i32 [ %533, %526 ], [ 1, %521 ]
  %529 = getelementptr inbounds i8, i8* %512, i64 %527
  %530 = load i8, i8* %529, align 1, !tbaa !15
  %531 = sext i8 %530 to i64
  %532 = tail call i32 @cio_write(%struct.opj_cio* %515, i64 %531, i32 1) #9
  %533 = add i32 %528, 1
  %534 = zext i32 %533 to i64
  %535 = tail call i64 @strlen(i8* nonnull %512) #12
  %536 = icmp ugt i64 %535, %534
  br i1 %536, label %526, label %537

537:                                              ; preds = %526, %521, %514
  %538 = tail call i32 @cio_tell(%struct.opj_cio* %515) #9
  %539 = sub nsw i32 %538, %517
  tail call void @cio_seek(%struct.opj_cio* %515, i32 %517) #9
  %540 = sext i32 %539 to i64
  %541 = tail call i32 @cio_write(%struct.opj_cio* %515, i64 %540, i32 2) #9
  tail call void @cio_seek(%struct.opj_cio* %515, i32 %538) #9
  %542 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %9, align 8, !tbaa !142
  %543 = icmp eq %struct.opj_codestream_info* %542, null
  br i1 %543, label %572, label %544

544:                                              ; preds = %537
  %545 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %542, i64 0, i32 15
  %546 = load i32, i32* %545, align 8, !tbaa !333
  %547 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %542, i64 0, i32 17
  %548 = load i32, i32* %547, align 8, !tbaa !331
  %549 = icmp slt i32 %546, %548
  br i1 %549, label %550, label %553

550:                                              ; preds = %544
  %551 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %542, i64 0, i32 16
  %552 = load %struct.opj_marker_info_t*, %struct.opj_marker_info_t** %551, align 8, !tbaa !332
  br label %564

553:                                              ; preds = %544
  %554 = sitofp i32 %548 to float
  %555 = fptosi float %554 to i32
  %556 = add nsw i32 %555, 100
  store i32 %556, i32* %547, align 8, !tbaa !331
  %557 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %542, i64 0, i32 16
  %558 = bitcast %struct.opj_marker_info_t** %557 to i8**
  %559 = load i8*, i8** %558, align 8, !tbaa !332
  %560 = sext i32 %556 to i64
  %561 = tail call i8* @realloc(i8* %559, i64 %560) #9
  store i8* %561, i8** %558, align 8, !tbaa !332
  %562 = bitcast i8* %561 to %struct.opj_marker_info_t*
  %563 = load i32, i32* %545, align 8, !tbaa !333
  br label %564

564:                                              ; preds = %553, %550
  %565 = phi i32 [ %546, %550 ], [ %563, %553 ]
  %566 = phi %struct.opj_marker_info_t* [ %552, %550 ], [ %562, %553 ]
  %567 = sext i32 %565 to i64
  %568 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %566, i64 %567, i32 0
  store i16 -156, i16* %568, align 4, !tbaa !334
  %569 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %566, i64 %567, i32 1
  store i32 %517, i32* %569, align 4, !tbaa !337
  %570 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %566, i64 %567, i32 2
  store i32 %539, i32* %570, align 4, !tbaa !338
  %571 = add nsw i32 %565, 1
  store i32 %571, i32* %545, align 8, !tbaa !333
  br label %572

572:                                              ; preds = %564, %537, %509, %505
  %573 = tail call i32 @j2k_calculate_tp(%struct.opj_cp* %8, i32 undef, %struct.opj_image* %2, %struct.opj_j2k* %0)
  %574 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  store i32 %573, i32* %574, align 4, !tbaa !339
  %575 = load i32, i32* %451, align 8, !tbaa !250
  %576 = icmp eq i32 %575, 0
  br i1 %576, label %594, label %577

577:                                              ; preds = %572
  %578 = load %struct.opj_cio*, %struct.opj_cio** %5, align 8, !tbaa !173
  %579 = tail call i32 @cio_tell(%struct.opj_cio* %578) #9
  %580 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 6
  store i32 %579, i32* %580, align 8, !tbaa !340
  %581 = tail call i32 @cio_write(%struct.opj_cio* %578, i64 65365, i32 2) #9
  %582 = load i32, i32* %574, align 4, !tbaa !339
  %583 = mul nsw i32 %582, 5
  %584 = add nsw i32 %583, 4
  %585 = sext i32 %584 to i64
  %586 = tail call i32 @cio_write(%struct.opj_cio* %578, i64 %585, i32 2) #9
  %587 = tail call i32 @cio_write(%struct.opj_cio* %578, i64 0, i32 1) #9
  %588 = tail call i32 @cio_write(%struct.opj_cio* %578, i64 80, i32 1) #9
  %589 = load i32, i32* %574, align 4, !tbaa !339
  %590 = mul nsw i32 %589, 5
  tail call void @cio_skip(%struct.opj_cio* %578, i32 %590) #9
  %591 = load i32, i32* %451, align 8, !tbaa !250
  %592 = icmp eq i32 %591, 3
  br i1 %592, label %593, label %594

593:                                              ; preds = %577
  tail call fastcc void @j2k_write_poc(%struct.opj_j2k* nonnull %0)
  br label %594

594:                                              ; preds = %593, %577, %572
  br i1 %10, label %595, label %599

595:                                              ; preds = %594
  %596 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %597 = add nsw i32 %596, -1
  %598 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 19
  store i32 %597, i32* %598, align 8, !tbaa !187
  br label %599

599:                                              ; preds = %595, %594
  %600 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 0
  %601 = load %struct.opj_common_struct*, %struct.opj_common_struct** %600, align 8, !tbaa !158
  %602 = tail call %struct.opj_tcd* @tcd_create(%struct.opj_common_struct* %601) #9
  %603 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 18
  %604 = load i32, i32* %603, align 8, !tbaa !136
  %605 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 19
  %606 = load i32, i32* %605, align 4, !tbaa !137
  %607 = mul nsw i32 %606, %604
  %608 = icmp sgt i32 %607, 0
  br i1 %608, label %609, label %823

609:                                              ; preds = %599
  %610 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 28
  %611 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  %612 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 5
  %613 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %602, i64 0, i32 3
  %614 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 11
  %615 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 21
  %616 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %602, i64 0, i32 4
  %617 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 6
  %618 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %602, i64 0, i32 0
  %619 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  %620 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %621 = bitcast %struct.opj_tcd* %602 to i8*
  %622 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 1
  br label %623

623:                                              ; preds = %817, %609
  %624 = phi i64 [ 0, %609 ], [ %628, %817 ]
  %625 = phi i32 [ %607, %609 ], [ %820, %817 ]
  %626 = load %struct.opj_tcp*, %struct.opj_tcp** %610, align 8, !tbaa !139
  %627 = load %struct.opj_common_struct*, %struct.opj_common_struct** %600, align 8, !tbaa !158
  %628 = add nuw nsw i64 %624, 1
  %629 = trunc i64 %628 to i32
  %630 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %627, i32 4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 %629, i32 %625) #9
  %631 = trunc i64 %624 to i32
  store i32 %631, i32* %304, align 4, !tbaa !183
  store i32 0, i32* %611, align 4, !tbaa !184
  %632 = load i32*, i32** %612, align 8, !tbaa !138
  %633 = getelementptr inbounds i32, i32* %632, i64 %624
  %634 = load i32, i32* %633, align 4, !tbaa !43
  store i32 %634, i32* %613, align 4, !tbaa !341
  %635 = icmp eq i64 %624, 0
  br i1 %635, label %636, label %637

636:                                              ; preds = %623
  tail call void @tcd_malloc_encode(%struct.opj_tcd* nonnull %602, %struct.opj_image* %2, %struct.opj_cp* nonnull %8, i32 0) #9
  br label %638

637:                                              ; preds = %623
  tail call void @tcd_init_encode(%struct.opj_tcd* nonnull %602, %struct.opj_image* %2, %struct.opj_cp* nonnull %8, i32 %631) #9
  br label %638

638:                                              ; preds = %637, %636
  br i1 %10, label %639, label %652

639:                                              ; preds = %638
  %640 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %641 = load i32, i32* %614, align 8, !tbaa !195
  %642 = add nsw i32 %641, %640
  %643 = load %struct.opj_tile_info*, %struct.opj_tile_info** %615, align 8, !tbaa !143
  %644 = load i32, i32* %304, align 4, !tbaa !183
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %643, i64 %645, i32 2
  store i32 %642, i32* %646, align 4, !tbaa !189
  %647 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %643, i64 %645, i32 14
  store i32 10, i32* %647, align 8, !tbaa !343
  %648 = tail call noalias i8* @malloc(i64 120) #9
  %649 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %643, i64 %645, i32 13
  %650 = bitcast %struct.opj_marker_info_t** %649 to i8**
  store i8* %648, i8** %650, align 8, !tbaa !344
  %651 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %643, i64 %645, i32 12
  store i32 0, i32* %651, align 8, !tbaa !345
  br label %652

652:                                              ; preds = %639, %638
  %653 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %626, i64 %624, i32 6
  %654 = load i32, i32* %653, align 4, !tbaa !140
  %655 = icmp slt i32 %654, 0
  br i1 %655, label %807, label %656

656:                                              ; preds = %802, %652
  %657 = phi i32 [ %803, %802 ], [ 0, %652 ]
  %658 = phi i32 [ %804, %802 ], [ 0, %652 ]
  store i32 %658, i32* %616, align 8, !tbaa !346
  %659 = tail call fastcc i32 @j2k_get_num_tp(%struct.opj_cp* %8, i32 %658, i32 %631)
  %660 = load i32, i32* %617, align 4, !tbaa !151
  store i32 %660, i32* %618, align 8, !tbaa !347
  %661 = icmp sgt i32 %659, 0
  br i1 %661, label %662, label %802

662:                                              ; preds = %796, %656
  %663 = phi i32 [ %798, %796 ], [ %657, %656 ]
  %664 = phi i32 [ %800, %796 ], [ 0, %656 ]
  store i32 %664, i32* %619, align 8, !tbaa !348
  br i1 %10, label %665, label %677

665:                                              ; preds = %662
  %666 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %667 = load i32, i32* %614, align 8, !tbaa !195
  %668 = add nsw i32 %667, %666
  %669 = load %struct.opj_tile_info*, %struct.opj_tile_info** %615, align 8, !tbaa !143
  %670 = load i32, i32* %304, align 4, !tbaa !183
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %669, i64 %671, i32 16
  %673 = load %struct.opj_tp_info*, %struct.opj_tp_info** %672, align 8, !tbaa !147
  %674 = load i32, i32* %611, align 4, !tbaa !184
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %673, i64 %675, i32 0
  store i32 %668, i32* %676, align 4, !tbaa !191
  br label %677

677:                                              ; preds = %665, %662
  %678 = load %struct.opj_cio*, %struct.opj_cio** %5, align 8, !tbaa !173
  %679 = tail call i32 @cio_tell(%struct.opj_cio* %678) #9
  store i32 %679, i32* %620, align 8, !tbaa !349
  %680 = tail call i32 @cio_write(%struct.opj_cio* %678, i64 65424, i32 2) #9
  %681 = tail call i32 @cio_tell(%struct.opj_cio* %678) #9
  tail call void @cio_skip(%struct.opj_cio* %678, i32 2) #9
  %682 = load i32, i32* %304, align 4, !tbaa !183
  %683 = sext i32 %682 to i64
  %684 = tail call i32 @cio_write(%struct.opj_cio* %678, i64 %683, i32 2) #9
  tail call void @cio_skip(%struct.opj_cio* %678, i32 4) #9
  %685 = load i32, i32* %611, align 4, !tbaa !184
  %686 = sext i32 %685 to i64
  %687 = tail call i32 @cio_write(%struct.opj_cio* %678, i64 %686, i32 1) #9
  %688 = load i32*, i32** %612, align 8, !tbaa !138
  %689 = load i32, i32* %304, align 4, !tbaa !183
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds i32, i32* %688, i64 %690
  %692 = load i32, i32* %691, align 4, !tbaa !43
  %693 = sext i32 %692 to i64
  %694 = tail call i32 @cio_write(%struct.opj_cio* %678, i64 %693, i32 1) #9
  %695 = tail call i32 @cio_tell(%struct.opj_cio* %678) #9
  %696 = sub nsw i32 %695, %681
  tail call void @cio_seek(%struct.opj_cio* %678, i32 %681) #9
  %697 = sext i32 %696 to i64
  %698 = tail call i32 @cio_write(%struct.opj_cio* %678, i64 %697, i32 2) #9
  tail call void @cio_seek(%struct.opj_cio* %678, i32 %695) #9
  %699 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %9, align 8, !tbaa !142
  %700 = icmp eq %struct.opj_codestream_info* %699, null
  br i1 %700, label %744, label %701

701:                                              ; preds = %677
  %702 = load i32, i32* %611, align 4, !tbaa !184
  %703 = icmp eq i32 %702, 0
  br i1 %703, label %704, label %764

704:                                              ; preds = %701
  %705 = load i32, i32* %304, align 4, !tbaa !183
  %706 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %699, i64 0, i32 21
  %707 = load %struct.opj_tile_info*, %struct.opj_tile_info** %706, align 8, !tbaa !143
  %708 = sext i32 %705 to i64
  %709 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %707, i64 %708, i32 12
  %710 = load i32, i32* %709, align 8, !tbaa !345
  %711 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %707, i64 %708, i32 14
  %712 = load i32, i32* %711, align 8, !tbaa !343
  %713 = icmp slt i32 %710, %712
  br i1 %713, label %714, label %717

714:                                              ; preds = %704
  %715 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %707, i64 %708, i32 13
  %716 = load %struct.opj_marker_info_t*, %struct.opj_marker_info_t** %715, align 8, !tbaa !344
  br label %734

717:                                              ; preds = %704
  %718 = sitofp i32 %712 to float
  %719 = fptosi float %718 to i32
  %720 = add nsw i32 %719, 100
  store i32 %720, i32* %711, align 8, !tbaa !343
  %721 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %707, i64 %708, i32 13
  %722 = bitcast %struct.opj_marker_info_t** %721 to i8**
  %723 = load i8*, i8** %722, align 8, !tbaa !344
  %724 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %699, i64 0, i32 17
  %725 = load i32, i32* %724, align 8, !tbaa !331
  %726 = sext i32 %725 to i64
  %727 = tail call i8* @realloc(i8* %723, i64 %726) #9
  %728 = load %struct.opj_tile_info*, %struct.opj_tile_info** %706, align 8, !tbaa !143
  %729 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %728, i64 %708, i32 13
  %730 = bitcast %struct.opj_marker_info_t** %729 to i8**
  store i8* %727, i8** %730, align 8, !tbaa !344
  %731 = bitcast i8* %727 to %struct.opj_marker_info_t*
  %732 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %728, i64 %708, i32 12
  %733 = load i32, i32* %732, align 8, !tbaa !345
  br label %734

734:                                              ; preds = %717, %714
  %735 = phi i32 [ %710, %714 ], [ %733, %717 ]
  %736 = phi %struct.opj_marker_info_t* [ %716, %714 ], [ %731, %717 ]
  %737 = phi %struct.opj_tile_info* [ %707, %714 ], [ %728, %717 ]
  %738 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %737, i64 %708, i32 12
  %739 = sext i32 %735 to i64
  %740 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %736, i64 %739, i32 0
  store i16 -112, i16* %740, align 4, !tbaa !334
  %741 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %736, i64 %739, i32 1
  store i32 %681, i32* %741, align 4, !tbaa !337
  %742 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %736, i64 %739, i32 2
  store i32 %696, i32* %742, align 4, !tbaa !338
  %743 = add nsw i32 %735, 1
  store i32 %743, i32* %738, align 8, !tbaa !345
  br label %744

744:                                              ; preds = %734, %677
  %745 = load i32, i32* %611, align 4, !tbaa !184
  %746 = icmp eq i32 %745, 0
  br i1 %746, label %747, label %764

747:                                              ; preds = %744
  %748 = load i32, i32* %451, align 8, !tbaa !250
  %749 = icmp eq i32 %748, 0
  br i1 %749, label %750, label %764

750:                                              ; preds = %747
  %751 = load i32, i32* %465, align 8, !tbaa !127
  %752 = icmp sgt i32 %751, 1
  br i1 %752, label %753, label %758

753:                                              ; preds = %753, %750
  %754 = phi i32 [ %755, %753 ], [ 1, %750 ]
  tail call fastcc void @j2k_write_coc(%struct.opj_j2k* %0, i32 %754)
  tail call fastcc void @j2k_write_qcc(%struct.opj_j2k* %0, i32 %754)
  %755 = add nuw nsw i32 %754, 1
  %756 = load i32, i32* %465, align 8, !tbaa !127
  %757 = icmp slt i32 %755, %756
  br i1 %757, label %753, label %758

758:                                              ; preds = %753, %750
  %759 = load %struct.opj_tcp*, %struct.opj_tcp** %610, align 8, !tbaa !139
  %760 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %759, i64 %624, i32 6
  %761 = load i32, i32* %760, align 4, !tbaa !140
  %762 = icmp eq i32 %761, 0
  br i1 %762, label %764, label %763

763:                                              ; preds = %758
  tail call fastcc void @j2k_write_poc(%struct.opj_j2k* %0)
  br label %764

764:                                              ; preds = %763, %758, %747, %744, %701
  br i1 %10, label %765, label %794

765:                                              ; preds = %764
  %766 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %767 = load i32, i32* %614, align 8, !tbaa !195
  %768 = add i32 %766, 1
  %769 = add i32 %768, %767
  %770 = load %struct.opj_tile_info*, %struct.opj_tile_info** %615, align 8, !tbaa !143
  %771 = load i32, i32* %304, align 4, !tbaa !183
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %770, i64 %772, i32 16
  %774 = load %struct.opj_tp_info*, %struct.opj_tp_info** %773, align 8, !tbaa !147
  %775 = load i32, i32* %611, align 4, !tbaa !184
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %774, i64 %776, i32 1
  store i32 %769, i32* %777, align 4, !tbaa !196
  tail call fastcc void @j2k_write_sod(%struct.opj_j2k* %0, i8* %621)
  %778 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %779 = load i32, i32* %614, align 8, !tbaa !195
  %780 = add i32 %778, -1
  %781 = add i32 %780, %779
  %782 = load %struct.opj_tile_info*, %struct.opj_tile_info** %615, align 8, !tbaa !143
  %783 = load i32, i32* %304, align 4, !tbaa !183
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %782, i64 %784, i32 16
  %786 = load %struct.opj_tp_info*, %struct.opj_tp_info** %785, align 8, !tbaa !147
  %787 = load i32, i32* %611, align 4, !tbaa !184
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %786, i64 %788, i32 2
  store i32 %781, i32* %789, align 4, !tbaa !193
  %790 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %786, i64 %788, i32 3
  store i32 %663, i32* %790, align 4, !tbaa !350
  %791 = load i32, i32* %622, align 8, !tbaa !198
  %792 = sub nsw i32 %791, %663
  %793 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %786, i64 %788, i32 4
  store i32 %792, i32* %793, align 4, !tbaa !351
  br label %796

794:                                              ; preds = %764
  tail call fastcc void @j2k_write_sod(%struct.opj_j2k* %0, i8* %621)
  %795 = load i32, i32* %611, align 4, !tbaa !184
  br label %796

796:                                              ; preds = %794, %765
  %797 = phi i32 [ %787, %765 ], [ %795, %794 ]
  %798 = phi i32 [ %791, %765 ], [ %663, %794 ]
  %799 = add nsw i32 %797, 1
  store i32 %799, i32* %611, align 4, !tbaa !184
  %800 = add nuw nsw i32 %664, 1
  %801 = icmp eq i32 %800, %659
  br i1 %801, label %802, label %662

802:                                              ; preds = %796, %656
  %803 = phi i32 [ %657, %656 ], [ %798, %796 ]
  %804 = add nuw nsw i32 %658, 1
  %805 = load i32, i32* %653, align 4, !tbaa !140
  %806 = icmp slt i32 %658, %805
  br i1 %806, label %656, label %807

807:                                              ; preds = %802, %652
  br i1 %10, label %808, label %817

808:                                              ; preds = %807
  %809 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %810 = load i32, i32* %614, align 8, !tbaa !195
  %811 = add i32 %809, -1
  %812 = add i32 %811, %810
  %813 = load %struct.opj_tile_info*, %struct.opj_tile_info** %615, align 8, !tbaa !143
  %814 = load i32, i32* %304, align 4, !tbaa !183
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %813, i64 %815, i32 4
  store i32 %812, i32* %816, align 4, !tbaa !190
  br label %817

817:                                              ; preds = %808, %807
  %818 = load i32, i32* %603, align 8, !tbaa !136
  %819 = load i32, i32* %605, align 4, !tbaa !137
  %820 = mul nsw i32 %819, %818
  %821 = sext i32 %820 to i64
  %822 = icmp slt i64 %628, %821
  br i1 %822, label %623, label %823

823:                                              ; preds = %817, %599
  tail call void @tcd_free_encode(%struct.opj_tcd* %602) #9
  tail call void @tcd_destroy(%struct.opj_tcd* %602) #9
  %824 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 5
  %825 = bitcast i32** %824 to i8**
  %826 = load i8*, i8** %825, align 8, !tbaa !138
  tail call void @free(i8* %826) #9
  %827 = load %struct.opj_cio*, %struct.opj_cio** %5, align 8, !tbaa !173
  %828 = tail call i32 @cio_write(%struct.opj_cio* %827, i64 65497, i32 2) #9
  br i1 %10, label %829, label %838

829:                                              ; preds = %823
  %830 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %831 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 11
  %832 = load i32, i32* %831, align 8, !tbaa !195
  %833 = add nsw i32 %832, %830
  %834 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 20
  %835 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 18
  %836 = load i32, i32* %835, align 4, !tbaa !181
  %837 = sub nsw i32 %833, %836
  store i32 %837, i32* %834, align 4, !tbaa !182
  br label %838

838:                                              ; preds = %829, %823
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal fastcc void @j2k_write_cox(i32, %struct.opj_tcp*, %struct.opj_cio*, i32) unnamed_addr #0 {
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1, i64 %5, i32 15
  %7 = load %struct.opj_tccp*, %struct.opj_tccp** %6, align 8, !tbaa !162
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %7, i64 %8, i32 1
  %10 = load i32, i32* %9, align 4, !tbaa !95
  %11 = add nsw i32 %10, -1
  %12 = sext i32 %11 to i64
  %13 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %12, i32 1) #9
  %14 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %7, i64 %8, i32 2
  %15 = load i32, i32* %14, align 4, !tbaa !241
  %16 = add nsw i32 %15, -2
  %17 = sext i32 %16 to i64
  %18 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %17, i32 1) #9
  %19 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %7, i64 %8, i32 3
  %20 = load i32, i32* %19, align 4, !tbaa !242
  %21 = add nsw i32 %20, -2
  %22 = sext i32 %21 to i64
  %23 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %22, i32 1) #9
  %24 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %7, i64 %8, i32 4
  %25 = load i32, i32* %24, align 4, !tbaa !243
  %26 = sext i32 %25 to i64
  %27 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %26, i32 1) #9
  %28 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %7, i64 %8, i32 5
  %29 = load i32, i32* %28, align 4, !tbaa !97
  %30 = sext i32 %29 to i64
  %31 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %30, i32 1) #9
  %32 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %7, i64 %8, i32 0
  %33 = load i32, i32* %32, align 4, !tbaa !221
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %53, label %36

36:                                               ; preds = %4
  %37 = load i32, i32* %9, align 4, !tbaa !95
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %53

39:                                               ; preds = %39, %36
  %40 = phi i64 [ %49, %39 ], [ 0, %36 ]
  %41 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %7, i64 %8, i32 10, i64 %40
  %42 = load i32, i32* %41, align 4, !tbaa !43
  %43 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %7, i64 %8, i32 11, i64 %40
  %44 = load i32, i32* %43, align 4, !tbaa !43
  %45 = shl i32 %44, 4
  %46 = add nsw i32 %45, %42
  %47 = sext i32 %46 to i64
  %48 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %47, i32 1) #9
  %49 = add nuw nsw i64 %40, 1
  %50 = load i32, i32* %9, align 4, !tbaa !95
  %51 = sext i32 %50 to i64
  %52 = icmp slt i64 %49, %51
  br i1 %52, label %39, label %53

53:                                               ; preds = %39, %36, %4
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @j2k_write_coc(%struct.opj_j2k* nocapture readonly, i32) unnamed_addr #0 {
  %3 = getelementptr %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %4 = load %struct.opj_cp*, %struct.opj_cp** %3, align 8, !tbaa !25
  %5 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %4, i64 0, i32 28
  %6 = load %struct.opj_tcp*, %struct.opj_tcp** %5, align 8, !tbaa !139
  %7 = getelementptr %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 4, !tbaa !183
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %11 = load %struct.opj_image*, %struct.opj_image** %10, align 8, !tbaa !174
  %12 = getelementptr %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %13 = load %struct.opj_cio*, %struct.opj_cio** %12, align 8, !tbaa !173
  %14 = tail call i32 @cio_write(%struct.opj_cio* %13, i64 65363, i32 2) #9
  %15 = tail call i32 @cio_tell(%struct.opj_cio* %13) #9
  tail call void @cio_skip(%struct.opj_cio* %13, i32 2) #9
  %16 = sext i32 %1 to i64
  %17 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %11, i64 0, i32 4
  %18 = load i32, i32* %17, align 8, !tbaa !127
  %19 = icmp slt i32 %18, 257
  %20 = select i1 %19, i32 1, i32 2
  %21 = tail call i32 @cio_write(%struct.opj_cio* %13, i64 %16, i32 %20) #9
  %22 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %9, i32 15
  %23 = load %struct.opj_tccp*, %struct.opj_tccp** %22, align 8, !tbaa !162
  %24 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %23, i64 %16, i32 0
  %25 = load i32, i32* %24, align 4, !tbaa !221
  %26 = sext i32 %25 to i64
  %27 = tail call i32 @cio_write(%struct.opj_cio* %13, i64 %26, i32 1) #9
  %28 = load i32, i32* %7, align 4, !tbaa !183
  %29 = load %struct.opj_cp*, %struct.opj_cp** %3, align 8, !tbaa !25
  %30 = load %struct.opj_cio*, %struct.opj_cio** %12, align 8, !tbaa !173
  %31 = getelementptr %struct.opj_cp, %struct.opj_cp* %29, i64 0, i32 28
  %32 = load %struct.opj_tcp*, %struct.opj_tcp** %31, align 8, !tbaa !139
  tail call fastcc void @j2k_write_cox(i32 %28, %struct.opj_tcp* %32, %struct.opj_cio* %30, i32 %1)
  %33 = tail call i32 @cio_tell(%struct.opj_cio* %13) #9
  %34 = sub nsw i32 %33, %15
  tail call void @cio_seek(%struct.opj_cio* %13, i32 %15) #9
  %35 = sext i32 %34 to i64
  %36 = tail call i32 @cio_write(%struct.opj_cio* %13, i64 %35, i32 2) #9
  tail call void @cio_seek(%struct.opj_cio* %13, i32 %33) #9
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @j2k_write_qcc(%struct.opj_j2k* nocapture readonly, i32) unnamed_addr #0 {
  %3 = getelementptr %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %4 = load %struct.opj_cio*, %struct.opj_cio** %3, align 8, !tbaa !173
  %5 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 65373, i32 2) #9
  %6 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  tail call void @cio_skip(%struct.opj_cio* %4, i32 2) #9
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %9 = load %struct.opj_image*, %struct.opj_image** %8, align 8, !tbaa !174
  %10 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 4
  %11 = load i32, i32* %10, align 8, !tbaa !127
  %12 = icmp slt i32 %11, 257
  %13 = select i1 %12, i32 1, i32 2
  %14 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %7, i32 %13) #9
  %15 = getelementptr %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4, !tbaa !183
  %17 = getelementptr %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %18 = load %struct.opj_cp*, %struct.opj_cp** %17, align 8, !tbaa !25
  %19 = load %struct.opj_cio*, %struct.opj_cio** %3, align 8, !tbaa !173
  %20 = getelementptr %struct.opj_cp, %struct.opj_cp* %18, i64 0, i32 28
  %21 = load %struct.opj_tcp*, %struct.opj_tcp** %20, align 8, !tbaa !139
  %22 = sext i32 %16 to i64
  %23 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 %22, i32 15
  %24 = load %struct.opj_tccp*, %struct.opj_tccp** %23, align 8, !tbaa !162
  %25 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %24, i64 %7, i32 6
  %26 = load i32, i32* %25, align 4, !tbaa !98
  %27 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %24, i64 %7, i32 8
  %28 = load i32, i32* %27, align 4, !tbaa !240
  %29 = shl i32 %28, 5
  %30 = add nsw i32 %29, %26
  %31 = sext i32 %30 to i64
  %32 = tail call i32 @cio_write(%struct.opj_cio* %19, i64 %31, i32 1) #9
  %33 = load i32, i32* %25, align 4, !tbaa !98
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %41, label %35

35:                                               ; preds = %2
  %36 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %24, i64 %7, i32 1
  %37 = load i32, i32* %36, align 4, !tbaa !95
  %38 = mul nsw i32 %37, 3
  %39 = add nsw i32 %38, -2
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %66

41:                                               ; preds = %35, %2
  %42 = phi i32 [ %39, %35 ], [ 1, %2 ]
  %43 = zext i32 %42 to i64
  br label %44

44:                                               ; preds = %64, %41
  %45 = phi i32 [ %33, %41 ], [ %65, %64 ]
  %46 = phi i64 [ 0, %41 ], [ %62, %64 ]
  %47 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %24, i64 %7, i32 7, i64 %46, i32 0
  %48 = load i32, i32* %47, align 4, !tbaa !101
  %49 = icmp eq i32 %45, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %44
  %51 = shl i32 %48, 3
  %52 = sext i32 %51 to i64
  %53 = tail call i32 @cio_write(%struct.opj_cio* %19, i64 %52, i32 1) #9
  br label %61

54:                                               ; preds = %44
  %55 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %24, i64 %7, i32 7, i64 %46, i32 1
  %56 = load i32, i32* %55, align 4, !tbaa !99
  %57 = shl i32 %48, 11
  %58 = add nsw i32 %56, %57
  %59 = sext i32 %58 to i64
  %60 = tail call i32 @cio_write(%struct.opj_cio* %19, i64 %59, i32 2) #9
  br label %61

61:                                               ; preds = %54, %50
  %62 = add nuw nsw i64 %46, 1
  %63 = icmp eq i64 %62, %43
  br i1 %63, label %66, label %64

64:                                               ; preds = %61
  %65 = load i32, i32* %25, align 4, !tbaa !98
  br label %44

66:                                               ; preds = %61, %35
  %67 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  %68 = sub nsw i32 %67, %6
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %6) #9
  %69 = sext i32 %68 to i64
  %70 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %69, i32 2) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %67) #9
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @j2k_write_poc(%struct.opj_j2k* nocapture readonly) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 15
  %3 = load %struct.opj_image*, %struct.opj_image** %2, align 8, !tbaa !174
  %4 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %3, i64 0, i32 4
  %5 = load i32, i32* %4, align 8, !tbaa !127
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %7 = load %struct.opj_cp*, %struct.opj_cp** %6, align 8, !tbaa !25
  %8 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 28
  %9 = load %struct.opj_tcp*, %struct.opj_tcp** %8, align 8, !tbaa !139
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4, !tbaa !183
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %12, i32 15
  %14 = load %struct.opj_tccp*, %struct.opj_tccp** %13, align 8, !tbaa !162
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %16 = load %struct.opj_cio*, %struct.opj_cio** %15, align 8, !tbaa !173
  %17 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %12, i32 6
  %18 = load i32, i32* %17, align 4, !tbaa !140
  %19 = add i32 %18, 1
  %20 = tail call i32 @cio_write(%struct.opj_cio* %16, i64 65375, i32 2) #9
  %21 = icmp slt i32 %5, 257
  %22 = select i1 %21, i32 1, i32 2
  %23 = shl nuw nsw i32 %22, 1
  %24 = add nuw nsw i32 %23, 5
  %25 = mul nsw i32 %19, %24
  %26 = add nsw i32 %25, 2
  %27 = sext i32 %26 to i64
  %28 = tail call i32 @cio_write(%struct.opj_cio* %16, i64 %27, i32 2) #9
  %29 = icmp slt i32 %18, 0
  br i1 %29, label %73, label %30

30:                                               ; preds = %1
  %31 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %12, i32 3
  %32 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %14, i64 0, i32 1
  %33 = zext i32 %19 to i64
  br label %34

34:                                               ; preds = %34, %30
  %35 = phi i64 [ %71, %34 ], [ 0, %30 ]
  %36 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %12, i32 8, i64 %35, i32 0
  %37 = load i32, i32* %36, align 4, !tbaa !226
  %38 = sext i32 %37 to i64
  %39 = tail call i32 @cio_write(%struct.opj_cio* %16, i64 %38, i32 1) #9
  %40 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %12, i32 8, i64 %35, i32 1
  %41 = load i32, i32* %40, align 4, !tbaa !227
  %42 = sext i32 %41 to i64
  %43 = tail call i32 @cio_write(%struct.opj_cio* %16, i64 %42, i32 %22) #9
  %44 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %12, i32 8, i64 %35, i32 2
  %45 = load i32, i32* %44, align 4, !tbaa !228
  %46 = sext i32 %45 to i64
  %47 = tail call i32 @cio_write(%struct.opj_cio* %16, i64 %46, i32 2) #9
  %48 = load i32, i32* %44, align 4, !tbaa !228
  %49 = load i32, i32* %31, align 4, !tbaa !219
  %50 = icmp slt i32 %48, %49
  %51 = select i1 %50, i32 %48, i32 %49
  store i32 %51, i32* %44, align 4, !tbaa !228
  %52 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %12, i32 8, i64 %35, i32 3
  %53 = load i32, i32* %52, align 4, !tbaa !229
  %54 = sext i32 %53 to i64
  %55 = tail call i32 @cio_write(%struct.opj_cio* %16, i64 %54, i32 1) #9
  %56 = load i32, i32* %52, align 4, !tbaa !229
  %57 = load i32, i32* %32, align 4, !tbaa !95
  %58 = icmp slt i32 %56, %57
  %59 = select i1 %58, i32 %56, i32 %57
  store i32 %59, i32* %52, align 4, !tbaa !229
  %60 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %12, i32 8, i64 %35, i32 4
  %61 = load i32, i32* %60, align 4, !tbaa !230
  %62 = sext i32 %61 to i64
  %63 = tail call i32 @cio_write(%struct.opj_cio* %16, i64 %62, i32 %22) #9
  %64 = load i32, i32* %60, align 4, !tbaa !230
  %65 = icmp slt i32 %64, %5
  %66 = select i1 %65, i32 %64, i32 %5
  store i32 %66, i32* %60, align 4, !tbaa !230
  %67 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %12, i32 8, i64 %35, i32 9
  %68 = load i32, i32* %67, align 4, !tbaa !231
  %69 = sext i32 %68 to i64
  %70 = tail call i32 @cio_write(%struct.opj_cio* %16, i64 %69, i32 1) #9
  %71 = add nuw nsw i64 %35, 1
  %72 = icmp eq i64 %71, %33
  br i1 %72, label %73, label %34

73:                                               ; preds = %34, %1
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @j2k_write_sod(%struct.opj_j2k* nocapture, i8*) unnamed_addr #0 {
  %3 = bitcast i8* %1 to %struct.opj_tcd*
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 16
  %5 = load %struct.opj_cp*, %struct.opj_cp** %4, align 8, !tbaa !25
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 18
  %7 = load %struct.opj_cio*, %struct.opj_cio** %6, align 8, !tbaa !173
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 8, !tbaa !348
  %10 = getelementptr inbounds i8, i8* %1, i64 4
  %11 = bitcast i8* %10 to i32*
  store i32 %9, i32* %11, align 4, !tbaa !352
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  %13 = load i32, i32* %12, align 4, !tbaa !184
  %14 = getelementptr inbounds i8, i8* %1, i64 8
  %15 = bitcast i8* %14 to i32*
  store i32 %13, i32* %15, align 8, !tbaa !353
  %16 = tail call i32 @cio_write(%struct.opj_cio* %7, i64 65427, i32 2) #9
  %17 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 17
  %18 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %17, align 8, !tbaa !142
  %19 = icmp eq %struct.opj_codestream_info* %18, null
  br i1 %19, label %65, label %20

20:                                               ; preds = %2
  %21 = load i32, i32* %12, align 4, !tbaa !184
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %65

23:                                               ; preds = %20
  %24 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %25 = load i32, i32* %24, align 4, !tbaa !183
  %26 = tail call i32 @cio_tell(%struct.opj_cio* %7) #9
  %27 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %18, i64 0, i32 21
  %28 = load %struct.opj_tile_info*, %struct.opj_tile_info** %27, align 8, !tbaa !143
  %29 = sext i32 %25 to i64
  %30 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %28, i64 %29, i32 12
  %31 = load i32, i32* %30, align 8, !tbaa !345
  %32 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %28, i64 %29, i32 14
  %33 = load i32, i32* %32, align 8, !tbaa !343
  %34 = icmp slt i32 %31, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %23
  %36 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %28, i64 %29, i32 13
  %37 = load %struct.opj_marker_info_t*, %struct.opj_marker_info_t** %36, align 8, !tbaa !344
  br label %55

38:                                               ; preds = %23
  %39 = sitofp i32 %33 to float
  %40 = fptosi float %39 to i32
  %41 = add nsw i32 %40, 100
  store i32 %41, i32* %32, align 8, !tbaa !343
  %42 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %28, i64 %29, i32 13
  %43 = bitcast %struct.opj_marker_info_t** %42 to i8**
  %44 = load i8*, i8** %43, align 8, !tbaa !344
  %45 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %18, i64 0, i32 17
  %46 = load i32, i32* %45, align 8, !tbaa !331
  %47 = sext i32 %46 to i64
  %48 = tail call i8* @realloc(i8* %44, i64 %47) #9
  %49 = load %struct.opj_tile_info*, %struct.opj_tile_info** %27, align 8, !tbaa !143
  %50 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %49, i64 %29, i32 13
  %51 = bitcast %struct.opj_marker_info_t** %50 to i8**
  store i8* %48, i8** %51, align 8, !tbaa !344
  %52 = bitcast i8* %48 to %struct.opj_marker_info_t*
  %53 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %49, i64 %29, i32 12
  %54 = load i32, i32* %53, align 8, !tbaa !345
  br label %55

55:                                               ; preds = %38, %35
  %56 = phi i32 [ %31, %35 ], [ %54, %38 ]
  %57 = phi %struct.opj_marker_info_t* [ %37, %35 ], [ %52, %38 ]
  %58 = phi %struct.opj_tile_info* [ %28, %35 ], [ %49, %38 ]
  %59 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %58, i64 %29, i32 12
  %60 = sext i32 %56 to i64
  %61 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %57, i64 %60, i32 0
  store i16 -109, i16* %61, align 4, !tbaa !334
  %62 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %57, i64 %60, i32 1
  store i32 %26, i32* %62, align 4, !tbaa !337
  %63 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %57, i64 %60, i32 2
  store i32 0, i32* %63, align 4, !tbaa !338
  %64 = add nsw i32 %56, 1
  store i32 %64, i32* %59, align 8, !tbaa !345
  br label %65

65:                                               ; preds = %55, %20, %2
  %66 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %67 = load i32, i32* %66, align 4, !tbaa !183
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %75

69:                                               ; preds = %65
  %70 = tail call i32 @cio_tell(%struct.opj_cio* %7) #9
  %71 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 11
  %72 = load i32, i32* %71, align 8, !tbaa !195
  %73 = add nsw i32 %72, %70
  %74 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 10
  store i32 %73, i32* %74, align 4, !tbaa !354
  br label %75

75:                                               ; preds = %69, %65
  %76 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %17, align 8, !tbaa !142
  %77 = icmp ne %struct.opj_codestream_info* %76, null
  br i1 %77, label %78, label %121

78:                                               ; preds = %75
  %79 = load i32, i32* %12, align 4, !tbaa !184
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %96

81:                                               ; preds = %78
  %82 = tail call i32 @cio_tell(%struct.opj_cio* %7) #9
  %83 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 11
  %84 = load i32, i32* %83, align 8, !tbaa !195
  %85 = add i32 %82, -1
  %86 = add i32 %85, %84
  %87 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %76, i64 0, i32 21
  %88 = load %struct.opj_tile_info*, %struct.opj_tile_info** %87, align 8, !tbaa !143
  %89 = load i32, i32* %66, align 4, !tbaa !183
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %88, i64 %90, i32 3
  store i32 %86, i32* %91, align 8, !tbaa !197
  %92 = load %struct.opj_codestream_info*, %struct.opj_codestream_info** %17, align 8, !tbaa !142
  %93 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %92, i64 0, i32 21
  %94 = load %struct.opj_tile_info*, %struct.opj_tile_info** %93, align 8, !tbaa !143
  %95 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %94, i64 %90, i32 1
  store i32 %89, i32* %95, align 8, !tbaa !188
  br label %121

96:                                               ; preds = %78
  %97 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %76, i64 0, i32 21
  %98 = load %struct.opj_tile_info*, %struct.opj_tile_info** %97, align 8, !tbaa !143
  %99 = load i32, i32* %66, align 4, !tbaa !183
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %98, i64 %100, i32 9
  %102 = load %struct.opj_packet_info*, %struct.opj_packet_info** %101, align 8, !tbaa !355
  %103 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %76, i64 0, i32 1
  %104 = load i32, i32* %103, align 8, !tbaa !198
  %105 = add nsw i32 %104, -1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %102, i64 %106, i32 2
  %108 = load i32, i32* %107, align 8, !tbaa !356
  %109 = tail call i32 @cio_tell(%struct.opj_cio* %7) #9
  %110 = icmp slt i32 %108, %109
  br i1 %110, label %111, label %121

111:                                              ; preds = %96
  %112 = tail call i32 @cio_tell(%struct.opj_cio* %7) #9
  %113 = load %struct.opj_tile_info*, %struct.opj_tile_info** %97, align 8, !tbaa !143
  %114 = load i32, i32* %66, align 4, !tbaa !183
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %113, i64 %115, i32 9
  %117 = load %struct.opj_packet_info*, %struct.opj_packet_info** %116, align 8, !tbaa !355
  %118 = load i32, i32* %103, align 8, !tbaa !198
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %117, i64 %119, i32 0
  store i32 %112, i32* %120, align 8, !tbaa !358
  br label %121

121:                                              ; preds = %111, %96, %81, %75
  %122 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %5, i64 0, i32 28
  %123 = load %struct.opj_tcp*, %struct.opj_tcp** %122, align 8, !tbaa !139
  %124 = load i32, i32* %66, align 4, !tbaa !183
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %123, i64 %125, i32 3
  %127 = load i32, i32* %126, align 4, !tbaa !219
  %128 = icmp sgt i32 %127, 0
  br i1 %128, label %129, label %174

129:                                              ; preds = %121
  %130 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 10
  %131 = load i32, i32* %130, align 4, !tbaa !354
  %132 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %5, i64 0, i32 19
  %133 = load i32, i32* %132, align 4, !tbaa !137
  %134 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %5, i64 0, i32 18
  %135 = load i32, i32* %134, align 8, !tbaa !136
  %136 = mul nsw i32 %135, %133
  %137 = sdiv i32 %131, %136
  %138 = sitofp i32 %137 to float
  %139 = sext i32 %127 to i64
  %140 = and i64 %139, 1
  %141 = icmp eq i32 %127, 1
  br i1 %141, label %161, label %142

142:                                              ; preds = %129
  %143 = sub nsw i64 %139, %140
  br label %144

144:                                              ; preds = %224, %142
  %145 = phi i64 [ 0, %142 ], [ %225, %224 ]
  %146 = phi i64 [ %143, %142 ], [ %226, %224 ]
  %147 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %123, i64 %125, i32 5, i64 %145
  %148 = load float, float* %147, align 4, !tbaa !112
  %149 = fcmp ogt float %148, %138
  br i1 %149, label %150, label %152

150:                                              ; preds = %144
  %151 = fsub float %148, %138
  br label %154

152:                                              ; preds = %144
  %153 = fcmp une float %148, 0.000000e+00
  br i1 %153, label %154, label %156

154:                                              ; preds = %152, %150
  %155 = phi float [ %151, %150 ], [ 1.000000e+00, %152 ]
  store float %155, float* %147, align 4, !tbaa !112
  br label %156

156:                                              ; preds = %154, %152
  %157 = or i64 %145, 1
  %158 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %123, i64 %125, i32 5, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !112
  %160 = fcmp ogt float %159, %138
  br i1 %160, label %220, label %218

161:                                              ; preds = %224, %129
  %162 = phi i64 [ 0, %129 ], [ %225, %224 ]
  %163 = icmp eq i64 %140, 0
  br i1 %163, label %174, label %164

164:                                              ; preds = %161
  %165 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %123, i64 %125, i32 5, i64 %162
  %166 = load float, float* %165, align 4, !tbaa !112
  %167 = fcmp ogt float %166, %138
  br i1 %167, label %170, label %168

168:                                              ; preds = %164
  %169 = fcmp une float %166, 0.000000e+00
  br i1 %169, label %172, label %174

170:                                              ; preds = %164
  %171 = fsub float %166, %138
  br label %172

172:                                              ; preds = %170, %168
  %173 = phi float [ %171, %170 ], [ 1.000000e+00, %168 ]
  store float %173, float* %165, align 4, !tbaa !112
  br label %174

174:                                              ; preds = %172, %168, %161, %121
  %175 = load i32, i32* %12, align 4, !tbaa !184
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %186

177:                                              ; preds = %174
  %178 = getelementptr inbounds i8, i8* %1, i64 32
  %179 = bitcast i8* %178 to %struct.opj_tcd_image**
  %180 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %179, align 8, !tbaa !359
  %181 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %180, i64 0, i32 2
  %182 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %181, align 8, !tbaa !360
  %183 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %182, i64 0, i32 9
  store i32 0, i32* %183, align 8, !tbaa !362
  br i1 %77, label %184, label %186

184:                                              ; preds = %177
  %185 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %76, i64 0, i32 1
  store i32 0, i32* %185, align 8, !tbaa !198
  br label %186

186:                                              ; preds = %184, %177, %174
  %187 = tail call i8* @cio_getbp(%struct.opj_cio* %7) #9
  %188 = tail call i32 @cio_numbytesleft(%struct.opj_cio* %7) #9
  %189 = add nsw i32 %188, -2
  %190 = tail call i32 @tcd_encode_tile(%struct.opj_tcd* %3, i32 %124, i8* %187, i32 %189, %struct.opj_codestream_info* %76) #9
  %191 = tail call i32 @cio_tell(%struct.opj_cio* %7) #9
  %192 = add nsw i32 %191, %190
  %193 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %194 = load i32, i32* %193, align 8, !tbaa !349
  %195 = sub i32 %192, %194
  %196 = add nsw i32 %194, 6
  tail call void @cio_seek(%struct.opj_cio* %7, i32 %196) #9
  %197 = sext i32 %195 to i64
  %198 = tail call i32 @cio_write(%struct.opj_cio* %7, i64 %197, i32 4) #9
  %199 = load i32, i32* %193, align 8, !tbaa !349
  %200 = add nsw i32 %199, %195
  tail call void @cio_seek(%struct.opj_cio* %7, i32 %200) #9
  %201 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %5, i64 0, i32 0
  %202 = load i32, i32* %201, align 8, !tbaa !250
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %215, label %204

204:                                              ; preds = %186
  %205 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 6
  %206 = load i32, i32* %205, align 8, !tbaa !340
  %207 = add nsw i32 %206, 6
  %208 = load i32, i32* %12, align 4, !tbaa !184
  %209 = mul nsw i32 %208, 5
  %210 = add nsw i32 %207, %209
  tail call void @cio_seek(%struct.opj_cio* %7, i32 %210) #9
  %211 = load i32, i32* %66, align 4, !tbaa !183
  %212 = sext i32 %211 to i64
  %213 = tail call i32 @cio_write(%struct.opj_cio* %7, i64 %212, i32 1) #9
  %214 = tail call i32 @cio_write(%struct.opj_cio* %7, i64 %197, i32 4) #9
  br label %215

215:                                              ; preds = %204, %186
  %216 = load i32, i32* %193, align 8, !tbaa !349
  %217 = add nsw i32 %216, %195
  tail call void @cio_seek(%struct.opj_cio* %7, i32 %217) #9
  ret void

218:                                              ; preds = %156
  %219 = fcmp une float %159, 0.000000e+00
  br i1 %219, label %222, label %224

220:                                              ; preds = %156
  %221 = fsub float %159, %138
  br label %222

222:                                              ; preds = %220, %218
  %223 = phi float [ %221, %220 ], [ 1.000000e+00, %218 ]
  store float %223, float* %158, align 4, !tbaa !112
  br label %224

224:                                              ; preds = %222, %218
  %225 = add nuw nsw i64 %145, 2
  %226 = add i64 %146, -2
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %161, label %144
}

; Function Attrs: nounwind uwtable
define double @opj_clock() #0 {
  %1 = alloca %struct.rusage, align 8
  %2 = bitcast %struct.rusage* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %2) #9
  %3 = call i32 @getrusage(i32 0, %struct.rusage* nonnull %1) #9
  %4 = getelementptr inbounds %struct.rusage, %struct.rusage* %1, i64 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !364
  %6 = getelementptr inbounds %struct.rusage, %struct.rusage* %1, i64 0, i32 1, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !368
  %8 = add nsw i64 %7, %5
  %9 = sitofp i64 %8 to double
  %10 = getelementptr inbounds %struct.rusage, %struct.rusage* %1, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !369
  %12 = getelementptr inbounds %struct.rusage, %struct.rusage* %1, i64 0, i32 1, i32 1
  %13 = load i64, i64* %12, align 8, !tbaa !370
  %14 = add nsw i64 %13, %11
  %15 = sitofp i64 %14 to double
  %16 = fmul double %15, 0x3EB0C6F7A0B5ED8D
  %17 = fadd double %16, %9
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %2) #9
  ret double %17
}

; Function Attrs: nounwind
declare i32 @getrusage(i32, %struct.rusage*) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @jp2_read_jp2h(%struct.opj_jp2*, %struct.opj_cio*, %struct.opj_jp2_color* nocapture) #0 {
  %4 = alloca %struct.opj_jp2_comps, align 4
  %5 = alloca %struct.opj_jp2_comps, align 4
  %6 = alloca %struct.opj_jp2_comps, align 4
  %7 = bitcast %struct.opj_jp2_comps* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7) #9
  %8 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %9 = load %struct.opj_common_struct*, %struct.opj_common_struct** %8, align 8, !tbaa !371
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %9, %struct.opj_cio* %1, %struct.opj_jp2_comps* nonnull %6)
  %10 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %6, i64 0, i32 1
  %11 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %6, i64 0, i32 0
  %12 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %1, i64 0, i32 6
  %13 = getelementptr inbounds %struct.opj_cio, %struct.opj_cio* %1, i64 0, i32 5
  %14 = load i32, i32* %10, align 4, !tbaa !373
  br label %15

15:                                               ; preds = %25, %3
  %16 = phi i32 [ %26, %25 ], [ %14, %3 ]
  switch i32 %16, label %19 [
    i32 1785737832, label %28
    i32 1785737827, label %17
  ]

17:                                               ; preds = %15
  %18 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %9, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0)) #9
  br label %348

19:                                               ; preds = %15
  %20 = load i32, i32* %11, align 4, !tbaa !375
  %21 = add nsw i32 %20, -8
  tail call void @cio_skip(%struct.opj_cio* %1, i32 %21) #9
  %22 = load i8*, i8** %12, align 8, !tbaa !31
  %23 = load i8*, i8** %13, align 8, !tbaa !30
  %24 = icmp ult i8* %22, %23
  br i1 %24, label %25, label %348

25:                                               ; preds = %19
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %9, %struct.opj_cio* nonnull %1, %struct.opj_jp2_comps* nonnull %6)
  %26 = load i32, i32* %10, align 4, !tbaa !373
  %27 = icmp eq i32 %26, 1785737832
  br i1 %27, label %28, label %15

28:                                               ; preds = %25, %15
  %29 = bitcast %struct.opj_jp2_comps* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %29) #9
  %30 = load %struct.opj_common_struct*, %struct.opj_common_struct** %8, align 8, !tbaa !371
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %30, %struct.opj_cio* %1, %struct.opj_jp2_comps* nonnull %5) #9
  %31 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %5, i64 0, i32 1
  %32 = load i32, i32* %31, align 4, !tbaa !373
  %33 = icmp eq i32 %32, 1768449138
  br i1 %33, label %36, label %34

34:                                               ; preds = %28
  %35 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %30, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6.13, i64 0, i64 0)) #9
  br label %65

36:                                               ; preds = %28
  %37 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 4) #9
  %38 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 3
  store i32 %37, i32* %38, align 4, !tbaa !376
  %39 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 4) #9
  %40 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 2
  store i32 %39, i32* %40, align 8, !tbaa !377
  %41 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 2) #9
  %42 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 4
  store i32 %41, i32* %42, align 8, !tbaa !378
  %43 = zext i32 %41 to i64
  %44 = mul nuw nsw i64 %43, 12
  %45 = tail call noalias i8* @malloc(i64 %44) #9
  %46 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 17
  %47 = bitcast %struct.opj_jp2_comps** %46 to i8**
  store i8* %45, i8** %47, align 8, !tbaa !379
  %48 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %49 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 5
  store i32 %48, i32* %49, align 4, !tbaa !380
  %50 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %51 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 6
  store i32 %50, i32* %51, align 8, !tbaa !381
  %52 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %53 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 7
  store i32 %52, i32* %53, align 4, !tbaa !382
  %54 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %55 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 8
  store i32 %54, i32* %55, align 8, !tbaa !383
  %56 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %57 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %5, i64 0, i32 2
  %58 = load i32, i32* %57, align 4, !tbaa !384
  %59 = sub nsw i32 %56, %58
  %60 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %5, i64 0, i32 0
  %61 = load i32, i32* %60, align 4, !tbaa !375
  %62 = icmp eq i32 %59, %61
  br i1 %62, label %66, label %63

63:                                               ; preds = %36
  %64 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %30, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7.14, i64 0, i64 0)) #9
  br label %65

65:                                               ; preds = %63, %34
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %29) #9
  br label %348

66:                                               ; preds = %36
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %29) #9
  %67 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %6, i64 0, i32 2
  %68 = load i32, i32* %67, align 4, !tbaa !384
  %69 = load i32, i32* %11, align 4, !tbaa !375
  %70 = add nsw i32 %69, %68
  %71 = load i32, i32* %49, align 4, !tbaa !380
  %72 = icmp eq i32 %71, 255
  br i1 %72, label %73, label %105

73:                                               ; preds = %66
  %74 = bitcast %struct.opj_jp2_comps* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %74) #9
  %75 = load %struct.opj_common_struct*, %struct.opj_common_struct** %8, align 8, !tbaa !371
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %75, %struct.opj_cio* %1, %struct.opj_jp2_comps* nonnull %4) #9
  %76 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %4, i64 0, i32 1
  %77 = load i32, i32* %76, align 4, !tbaa !373
  %78 = icmp eq i32 %77, 1651532643
  br i1 %78, label %79, label %82

79:                                               ; preds = %73
  %80 = load i32, i32* %42, align 8, !tbaa !378
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %93, label %84

82:                                               ; preds = %73
  %83 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %75, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8.15, i64 0, i64 0)) #9
  br label %103

84:                                               ; preds = %84, %79
  %85 = phi i64 [ %89, %84 ], [ 0, %79 ]
  %86 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %87 = load %struct.opj_jp2_comps*, %struct.opj_jp2_comps** %46, align 8, !tbaa !379
  %88 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %87, i64 %85, i32 2
  store i32 %86, i32* %88, align 4, !tbaa !385
  %89 = add nuw nsw i64 %85, 1
  %90 = load i32, i32* %42, align 8, !tbaa !378
  %91 = zext i32 %90 to i64
  %92 = icmp ult i64 %89, %91
  br i1 %92, label %84, label %93

93:                                               ; preds = %84, %79
  %94 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %95 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %4, i64 0, i32 2
  %96 = load i32, i32* %95, align 4, !tbaa !384
  %97 = sub nsw i32 %94, %96
  %98 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %4, i64 0, i32 0
  %99 = load i32, i32* %98, align 4, !tbaa !375
  %100 = icmp eq i32 %97, %99
  br i1 %100, label %104, label %101

101:                                              ; preds = %93
  %102 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %75, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9.16, i64 0, i64 0)) #9
  br label %103

103:                                              ; preds = %101, %82
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %74) #9
  br label %348

104:                                              ; preds = %93
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %74) #9
  br label %105

105:                                              ; preds = %104, %66
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %9, %struct.opj_cio* %1, %struct.opj_jp2_comps* nonnull %6)
  %106 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %107 = icmp slt i32 %106, %70
  br i1 %107, label %108, label %343

108:                                              ; preds = %105
  %109 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 21
  %110 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %2, i64 0, i32 3
  %111 = bitcast %struct.opj_jp2_pclr** %110 to i8**
  %112 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %2, i64 0, i32 2
  %113 = bitcast %struct.opj_jp2_cdef** %112 to i8**
  %114 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %2, i64 0, i32 4
  %115 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 9
  %116 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 12
  %117 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 10
  %118 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %2, i64 0, i32 0
  %119 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %2, i64 0, i32 1
  %120 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 11
  br label %121

121:                                              ; preds = %170, %108
  %122 = load i32, i32* %10, align 4, !tbaa !373
  switch i32 %122, label %338 [
    i32 1668246642, label %123
    i32 1667523942, label %173
    i32 1885564018, label %214
    i32 1668112752, label %295
  ]

123:                                              ; preds = %121
  %124 = load i8, i8* %114, align 8, !tbaa !387
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %129, label %126

126:                                              ; preds = %123
  %127 = load i32, i32* %67, align 4, !tbaa !384
  %128 = load i32, i32* %11, align 4, !tbaa !375
  br label %164

129:                                              ; preds = %123
  %130 = load %struct.opj_common_struct*, %struct.opj_common_struct** %8, align 8, !tbaa !371
  %131 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  store i32 %131, i32* %115, align 4, !tbaa !389
  %132 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  store i32 %132, i32* %116, align 8, !tbaa !390
  %133 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  store i32 %133, i32* %117, align 8, !tbaa !391
  %134 = load i32, i32* %115, align 4, !tbaa !389
  switch i32 %134, label %155 [
    i32 1, label %135
    i32 2, label %137
  ]

135:                                              ; preds = %129
  %136 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 4) #9
  store i32 %136, i32* %120, align 4, !tbaa !392
  br label %155

137:                                              ; preds = %129
  %138 = load i32, i32* %67, align 4, !tbaa !384
  %139 = load i32, i32* %11, align 4, !tbaa !375
  %140 = add nsw i32 %139, %138
  %141 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %142 = sub i32 %140, %141
  %143 = icmp slt i32 %142, 0
  br i1 %143, label %144, label %146

144:                                              ; preds = %137
  %145 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %130, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10.17, i64 0, i64 0)) #9
  br label %164

146:                                              ; preds = %137
  %147 = icmp eq i32 %142, 0
  br i1 %147, label %155, label %148

148:                                              ; preds = %146
  %149 = tail call i8* @cio_getbp(%struct.opj_cio* %1) #9
  %150 = sext i32 %142 to i64
  %151 = tail call noalias i8* @malloc(i64 %150) #9
  store i8* %151, i8** %118, align 8, !tbaa !393
  store i32 %142, i32* %119, align 8, !tbaa !394
  %152 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %153 = sub i32 %140, %152
  tail call void @cio_skip(%struct.opj_cio* %1, i32 %153) #9
  %154 = load i8*, i8** %118, align 8, !tbaa !393
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %154, i8* align 1 %149, i64 %150, i1 false) #9
  br label %155

155:                                              ; preds = %148, %146, %135, %129
  %156 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %157 = load i32, i32* %67, align 4, !tbaa !384
  %158 = sub nsw i32 %156, %157
  %159 = load i32, i32* %11, align 4, !tbaa !375
  %160 = icmp eq i32 %158, %159
  br i1 %160, label %163, label %161

161:                                              ; preds = %155
  %162 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %130, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11.18, i64 0, i64 0)) #9
  br label %164

163:                                              ; preds = %155
  store i8 1, i8* %114, align 8, !tbaa !387
  br label %169

164:                                              ; preds = %161, %144, %126
  %165 = phi i32 [ %128, %126 ], [ %159, %161 ], [ %139, %144 ]
  %166 = phi i32 [ %127, %126 ], [ %157, %161 ], [ %138, %144 ]
  %167 = add nsw i32 %166, 8
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %167) #9
  %168 = add nsw i32 %165, -8
  tail call void @cio_skip(%struct.opj_cio* %1, i32 %168) #9
  br label %169

169:                                              ; preds = %164, %163
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %9, %struct.opj_cio* %1, %struct.opj_jp2_comps* nonnull %6)
  br label %170

170:                                              ; preds = %338, %337, %294, %213, %169
  %171 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %172 = icmp slt i32 %171, %70
  br i1 %172, label %121, label %343

173:                                              ; preds = %121
  %174 = load i32, i32* %109, align 4, !tbaa !395
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %338

176:                                              ; preds = %173
  %177 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %112, align 8, !tbaa !396
  %178 = icmp eq %struct.opj_jp2_cdef* %177, null
  br i1 %178, label %179, label %208

179:                                              ; preds = %176
  %180 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 2) #9
  %181 = and i32 %180, 65535
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %208, label %183

183:                                              ; preds = %179
  %184 = trunc i32 %180 to i16
  %185 = mul nuw nsw i32 %181, 6
  %186 = zext i32 %185 to i64
  %187 = tail call noalias i8* @malloc(i64 %186) #9
  %188 = bitcast i8* %187 to %struct.opj_jp2_cdef_info*
  %189 = tail call noalias i8* @malloc(i64 16) #9
  store i8* %189, i8** %113, align 8, !tbaa !396
  %190 = bitcast i8* %189 to i8**
  store i8* %187, i8** %190, align 8, !tbaa !397
  %191 = getelementptr inbounds i8, i8* %189, i64 8
  %192 = bitcast i8* %191 to i16*
  store i16 %184, i16* %192, align 8, !tbaa !399
  br label %193

193:                                              ; preds = %193, %183
  %194 = phi i16 [ %205, %193 ], [ 0, %183 ]
  %195 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 2) #9
  %196 = trunc i32 %195 to i16
  %197 = zext i16 %194 to i64
  %198 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %188, i64 %197, i32 0
  store i16 %196, i16* %198, align 2, !tbaa !400
  %199 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 2) #9
  %200 = trunc i32 %199 to i16
  %201 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %188, i64 %197, i32 1
  store i16 %200, i16* %201, align 2, !tbaa !402
  %202 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 2) #9
  %203 = trunc i32 %202 to i16
  %204 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %188, i64 %197, i32 2
  store i16 %203, i16* %204, align 2, !tbaa !403
  %205 = add i16 %194, 1
  %206 = zext i16 %205 to i32
  %207 = icmp ugt i32 %181, %206
  br i1 %207, label %193, label %213

208:                                              ; preds = %179, %176
  %209 = load i32, i32* %67, align 4, !tbaa !384
  %210 = add nsw i32 %209, 8
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %210) #9
  %211 = load i32, i32* %11, align 4, !tbaa !375
  %212 = add nsw i32 %211, -8
  tail call void @cio_skip(%struct.opj_cio* %1, i32 %212) #9
  br label %213

213:                                              ; preds = %208, %193
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %9, %struct.opj_cio* %1, %struct.opj_jp2_comps* nonnull %6)
  br label %170

214:                                              ; preds = %121
  %215 = load i32, i32* %109, align 4, !tbaa !395
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %338

217:                                              ; preds = %214
  %218 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %110, align 8, !tbaa !404
  %219 = icmp eq %struct.opj_jp2_pclr* %218, null
  br i1 %219, label %220, label %289

220:                                              ; preds = %217
  %221 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 2) #9
  %222 = trunc i32 %221 to i16
  %223 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %224 = trunc i32 %223 to i16
  %225 = and i32 %223, 65535
  %226 = and i32 %221, 65535
  %227 = mul nuw nsw i32 %225, %226
  %228 = zext i32 %227 to i64
  %229 = shl nuw nsw i64 %228, 2
  %230 = tail call noalias i8* @malloc(i64 %229) #9
  %231 = bitcast i8* %230 to i32*
  %232 = zext i32 %225 to i64
  %233 = tail call noalias i8* @malloc(i64 %232) #9
  %234 = tail call noalias i8* @malloc(i64 %232) #9
  %235 = tail call noalias i8* @malloc(i64 40) #9
  %236 = getelementptr inbounds i8, i8* %235, i64 8
  %237 = bitcast i8* %236 to i8**
  store i8* %234, i8** %237, align 8, !tbaa !405
  %238 = getelementptr inbounds i8, i8* %235, i64 16
  %239 = bitcast i8* %238 to i8**
  store i8* %233, i8** %239, align 8, !tbaa !407
  %240 = bitcast i8* %235 to i8**
  store i8* %230, i8** %240, align 8, !tbaa !408
  %241 = getelementptr inbounds i8, i8* %235, i64 32
  %242 = bitcast i8* %241 to i16*
  store i16 %222, i16* %242, align 8, !tbaa !409
  %243 = getelementptr inbounds i8, i8* %235, i64 34
  %244 = bitcast i8* %243 to i16*
  store i16 %224, i16* %244, align 2, !tbaa !410
  %245 = getelementptr inbounds i8, i8* %235, i64 24
  %246 = bitcast i8* %245 to %struct.opj_jp2_cmap_comp**
  store %struct.opj_jp2_cmap_comp* null, %struct.opj_jp2_cmap_comp** %246, align 8, !tbaa !411
  store i8* %235, i8** %111, align 8, !tbaa !404
  %247 = icmp eq i32 %225, 0
  br i1 %247, label %248, label %271

248:                                              ; preds = %271, %220
  %249 = icmp eq i32 %226, 0
  br i1 %249, label %294, label %250

250:                                              ; preds = %248
  br i1 %247, label %284, label %251

251:                                              ; preds = %267, %250
  %252 = phi i16 [ %268, %267 ], [ 0, %250 ]
  %253 = phi i32* [ %263, %267 ], [ %231, %250 ]
  br label %254

254:                                              ; preds = %254, %251
  %255 = phi i16 [ 0, %251 ], [ %264, %254 ]
  %256 = phi i32* [ %253, %251 ], [ %263, %254 ]
  %257 = zext i16 %255 to i64
  %258 = getelementptr inbounds i8, i8* %233, i64 %257
  %259 = load i8, i8* %258, align 1, !tbaa !15
  %260 = lshr i8 %259, 3
  %261 = zext i8 %260 to i32
  %262 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 %261) #9
  %263 = getelementptr inbounds i32, i32* %256, i64 1
  store i32 %262, i32* %256, align 4, !tbaa !43
  %264 = add i16 %255, 1
  %265 = zext i16 %264 to i32
  %266 = icmp ugt i32 %225, %265
  br i1 %266, label %254, label %267

267:                                              ; preds = %254
  %268 = add i16 %252, 1
  %269 = zext i16 %268 to i32
  %270 = icmp ugt i32 %226, %269
  br i1 %270, label %251, label %294

271:                                              ; preds = %271, %220
  %272 = phi i16 [ %281, %271 ], [ 0, %220 ]
  %273 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 127
  %276 = add nuw i8 %275, 1
  %277 = zext i16 %272 to i64
  %278 = getelementptr inbounds i8, i8* %233, i64 %277
  store i8 %276, i8* %278, align 1, !tbaa !15
  %279 = lshr i8 %274, 7
  %280 = getelementptr inbounds i8, i8* %234, i64 %277
  store i8 %279, i8* %280, align 1, !tbaa !15
  %281 = add i16 %272, 1
  %282 = zext i16 %281 to i32
  %283 = icmp ugt i32 %225, %282
  br i1 %283, label %271, label %248

284:                                              ; preds = %284, %250
  %285 = phi i16 [ %286, %284 ], [ 0, %250 ]
  %286 = add i16 %285, 1
  %287 = zext i16 %286 to i32
  %288 = icmp ugt i32 %226, %287
  br i1 %288, label %284, label %294

289:                                              ; preds = %217
  %290 = load i32, i32* %67, align 4, !tbaa !384
  %291 = add nsw i32 %290, 8
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %291) #9
  %292 = load i32, i32* %11, align 4, !tbaa !375
  %293 = add nsw i32 %292, -8
  tail call void @cio_skip(%struct.opj_cio* %1, i32 %293) #9
  br label %294

294:                                              ; preds = %289, %284, %267, %248
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %9, %struct.opj_cio* %1, %struct.opj_jp2_comps* nonnull %6)
  br label %170

295:                                              ; preds = %121
  %296 = load i32, i32* %109, align 4, !tbaa !395
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %338

298:                                              ; preds = %295
  %299 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %110, align 8, !tbaa !404
  %300 = icmp eq %struct.opj_jp2_pclr* %299, null
  br i1 %300, label %332, label %301

301:                                              ; preds = %298
  %302 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %299, i64 0, i32 3
  %303 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %302, align 8, !tbaa !411
  %304 = icmp eq %struct.opj_jp2_cmap_comp* %303, null
  br i1 %304, label %305, label %332

305:                                              ; preds = %301
  %306 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %299, i64 0, i32 5
  %307 = load i16, i16* %306, align 2, !tbaa !410
  %308 = zext i16 %307 to i64
  %309 = shl nuw nsw i64 %308, 2
  %310 = tail call noalias i8* @malloc(i64 %309) #9
  %311 = bitcast i8* %310 to %struct.opj_jp2_cmap_comp*
  %312 = icmp eq i16 %307, 0
  br i1 %312, label %328, label %313

313:                                              ; preds = %313, %305
  %314 = phi i64 [ %324, %313 ], [ 0, %305 ]
  %315 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 2) #9
  %316 = trunc i32 %315 to i16
  %317 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %311, i64 %314, i32 0
  store i16 %316, i16* %317, align 2, !tbaa !412
  %318 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %319 = trunc i32 %318 to i8
  %320 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %311, i64 %314, i32 1
  store i8 %319, i8* %320, align 2, !tbaa !414
  %321 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %322 = trunc i32 %321 to i8
  %323 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %311, i64 %314, i32 2
  store i8 %322, i8* %323, align 1, !tbaa !415
  %324 = add nuw nsw i64 %314, 1
  %325 = icmp eq i64 %324, %308
  br i1 %325, label %326, label %313

326:                                              ; preds = %313
  %327 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %110, align 8, !tbaa !404
  br label %328

328:                                              ; preds = %326, %305
  %329 = phi %struct.opj_jp2_pclr* [ %327, %326 ], [ %299, %305 ]
  %330 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %329, i64 0, i32 3
  %331 = bitcast %struct.opj_jp2_cmap_comp** %330 to i8**
  store i8* %310, i8** %331, align 8, !tbaa !411
  br label %337

332:                                              ; preds = %301, %298
  %333 = load i32, i32* %67, align 4, !tbaa !384
  %334 = add nsw i32 %333, 8
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %334) #9
  %335 = load i32, i32* %11, align 4, !tbaa !375
  %336 = add nsw i32 %335, -8
  tail call void @cio_skip(%struct.opj_cio* %1, i32 %336) #9
  br label %337

337:                                              ; preds = %332, %328
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %9, %struct.opj_cio* %1, %struct.opj_jp2_comps* nonnull %6)
  br label %170

338:                                              ; preds = %295, %214, %173, %121
  %339 = load i32, i32* %67, align 4, !tbaa !384
  %340 = add nsw i32 %339, 8
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %340) #9
  %341 = load i32, i32* %11, align 4, !tbaa !375
  %342 = add nsw i32 %341, -8
  tail call void @cio_skip(%struct.opj_cio* %1, i32 %342) #9
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %9, %struct.opj_cio* %1, %struct.opj_jp2_comps* nonnull %6)
  br label %170

343:                                              ; preds = %170, %105
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %70) #9
  %344 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %2, i64 0, i32 4
  %345 = load i8, i8* %344, align 8, !tbaa !387
  %346 = icmp eq i8 %345, 1
  %347 = zext i1 %346 to i32
  br label %348

348:                                              ; preds = %343, %103, %65, %19, %17
  %349 = phi i32 [ 0, %17 ], [ %347, %343 ], [ 0, %65 ], [ 0, %103 ], [ 0, %19 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7) #9
  ret i32 %349
}

; Function Attrs: nounwind uwtable
define internal fastcc void @jp2_read_boxhdr(%struct.opj_common_struct*, %struct.opj_cio*, %struct.opj_jp2_comps* nocapture) unnamed_addr #0 {
  %4 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %5 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %2, i64 0, i32 2
  store i32 %4, i32* %5, align 4, !tbaa !384
  %6 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 4) #9
  %7 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %2, i64 0, i32 0
  store i32 %6, i32* %7, align 4, !tbaa !375
  %8 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 4) #9
  %9 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %2, i64 0, i32 1
  store i32 %8, i32* %9, align 4, !tbaa !373
  %10 = load i32, i32* %7, align 4, !tbaa !375
  switch i32 %10, label %25 [
    i32 1, label %11
    i32 0, label %22
  ]

11:                                               ; preds = %3
  %12 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 4) #9
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %11
  %15 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %0, i32 1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5.19, i64 0, i64 0)) #9
  br label %25

16:                                               ; preds = %11
  %17 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 4) #9
  store i32 %17, i32* %7, align 4, !tbaa !375
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %16
  %20 = tail call i32 @cio_numbytesleft(%struct.opj_cio* %1) #9
  %21 = add nsw i32 %20, 12
  store i32 %21, i32* %7, align 4, !tbaa !375
  br label %25

22:                                               ; preds = %3
  %23 = tail call i32 @cio_numbytesleft(%struct.opj_cio* %1) #9
  %24 = add nsw i32 %23, 8
  store i32 %24, i32* %7, align 4, !tbaa !375
  br label %25

25:                                               ; preds = %22, %19, %16, %14, %3
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.opj_image* @opj_jp2_decode(%struct.opj_jp2*, %struct.opj_cio*, %struct.opj_codestream_info*) #0 {
  %4 = alloca %struct.opj_image_comp, align 8
  %5 = alloca %struct.opj_jp2_comps, align 4
  %6 = alloca %struct.opj_jp2_comps, align 4
  %7 = alloca %struct.opj_jp2_comps, align 4
  %8 = alloca %struct.opj_jp2_color, align 8
  %9 = bitcast %struct.opj_jp2_color* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %9) #9
  %10 = icmp ne %struct.opj_jp2* %0, null
  %11 = icmp ne %struct.opj_cio* %1, null
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %453

13:                                               ; preds = %3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 40, i1 false)
  %14 = getelementptr %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %15 = load %struct.opj_common_struct*, %struct.opj_common_struct** %14, align 8, !tbaa !371
  %16 = bitcast %struct.opj_jp2_comps* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %16) #9
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %15, %struct.opj_cio* nonnull %1, %struct.opj_jp2_comps* nonnull %7) #9
  %17 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %7, i64 0, i32 1
  %18 = load i32, i32* %17, align 4, !tbaa !373
  %19 = icmp eq i32 %18, 1783636000
  br i1 %19, label %22, label %20

20:                                               ; preds = %13
  %21 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %15, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i64 0, i64 0)) #9
  br label %37

22:                                               ; preds = %13
  %23 = tail call i32 @cio_read(%struct.opj_cio* nonnull %1, i32 4) #9
  %24 = icmp eq i32 %23, 218793738
  br i1 %24, label %27, label %25

25:                                               ; preds = %22
  %26 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %15, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0)) #9
  br label %37

27:                                               ; preds = %22
  %28 = tail call i32 @cio_tell(%struct.opj_cio* nonnull %1) #9
  %29 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %7, i64 0, i32 2
  %30 = load i32, i32* %29, align 4, !tbaa !384
  %31 = sub nsw i32 %28, %30
  %32 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %7, i64 0, i32 0
  %33 = load i32, i32* %32, align 4, !tbaa !375
  %34 = icmp eq i32 %31, %33
  br i1 %34, label %38, label %35

35:                                               ; preds = %27
  %36 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %15, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.15, i64 0, i64 0)) #9
  br label %37

37:                                               ; preds = %35, %25, %20
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %16) #9
  br label %118

38:                                               ; preds = %27
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %16) #9
  %39 = bitcast %struct.opj_jp2_comps* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %39) #9
  %40 = load %struct.opj_common_struct*, %struct.opj_common_struct** %14, align 8, !tbaa !371
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %40, %struct.opj_cio* nonnull %1, %struct.opj_jp2_comps* nonnull %6) #9
  %41 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %6, i64 0, i32 1
  %42 = load i32, i32* %41, align 4, !tbaa !373
  %43 = icmp eq i32 %42, 1718909296
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %40, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0)) #9
  br label %79

46:                                               ; preds = %38
  %47 = tail call i32 @cio_read(%struct.opj_cio* nonnull %1, i32 4) #9
  %48 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 13
  store i32 %47, i32* %48, align 4, !tbaa !416
  %49 = tail call i32 @cio_read(%struct.opj_cio* nonnull %1, i32 4) #9
  %50 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 14
  store i32 %49, i32* %50, align 8, !tbaa !417
  %51 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %6, i64 0, i32 0
  %52 = load i32, i32* %51, align 4, !tbaa !375
  %53 = add nsw i32 %52, -16
  %54 = sdiv i32 %53, 4
  %55 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 15
  store i32 %54, i32* %55, align 4, !tbaa !418
  %56 = zext i32 %54 to i64
  %57 = shl nuw nsw i64 %56, 2
  %58 = tail call noalias i8* @malloc(i64 %57) #9
  %59 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 16
  %60 = bitcast i32** %59 to i8**
  store i8* %58, i8** %60, align 8, !tbaa !419
  %61 = icmp sgt i32 %53, 3
  br i1 %61, label %62, label %71

62:                                               ; preds = %62, %46
  %63 = phi i64 [ %67, %62 ], [ 0, %46 ]
  %64 = tail call i32 @cio_read(%struct.opj_cio* nonnull %1, i32 4) #9
  %65 = load i32*, i32** %59, align 8, !tbaa !419
  %66 = getelementptr inbounds i32, i32* %65, i64 %63
  store i32 %64, i32* %66, align 4, !tbaa !43
  %67 = add nuw nsw i64 %63, 1
  %68 = load i32, i32* %55, align 4, !tbaa !418
  %69 = sext i32 %68 to i64
  %70 = icmp slt i64 %67, %69
  br i1 %70, label %62, label %71

71:                                               ; preds = %62, %46
  %72 = tail call i32 @cio_tell(%struct.opj_cio* nonnull %1) #9
  %73 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %6, i64 0, i32 2
  %74 = load i32, i32* %73, align 4, !tbaa !384
  %75 = sub nsw i32 %72, %74
  %76 = icmp eq i32 %75, %52
  br i1 %76, label %80, label %77

77:                                               ; preds = %71
  %78 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %40, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i64 0, i64 0)) #9
  br label %79

79:                                               ; preds = %77, %44
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %39) #9
  br label %118

80:                                               ; preds = %71
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %39) #9
  %81 = call i32 @jp2_read_jp2h(%struct.opj_jp2* nonnull %0, %struct.opj_cio* nonnull %1, %struct.opj_jp2_color* nonnull %8) #9
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %99, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 19
  %85 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 18
  %86 = load %struct.opj_common_struct*, %struct.opj_common_struct** %14, align 8, !tbaa !371
  %87 = bitcast %struct.opj_jp2_comps* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %87) #9
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %86, %struct.opj_cio* nonnull %1, %struct.opj_jp2_comps* nonnull %5) #9
  %88 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %5, i64 0, i32 0
  %89 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %5, i64 0, i32 1
  %90 = load i32, i32* %89, align 4, !tbaa !373
  br label %91

91:                                               ; preds = %94, %83
  %92 = phi i32 [ %97, %94 ], [ %90, %83 ]
  %93 = icmp eq i32 %92, 1785737827
  br i1 %93, label %137, label %94

94:                                               ; preds = %91
  %95 = load i32, i32* %88, align 4, !tbaa !375
  %96 = add nsw i32 %95, -8
  tail call void @cio_skip(%struct.opj_cio* nonnull %1, i32 %96) #9
  call fastcc void @jp2_read_boxhdr(%struct.opj_common_struct* %86, %struct.opj_cio* nonnull %1, %struct.opj_jp2_comps* nonnull %5) #9
  %97 = load i32, i32* %89, align 4, !tbaa !373
  %98 = icmp eq i32 %97, 1785737827
  br i1 %98, label %137, label %91

99:                                               ; preds = %80
  %100 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %8, i64 0, i32 3
  %101 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %100, align 8, !tbaa !404
  %102 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %8, i64 0, i32 3
  %103 = icmp eq %struct.opj_jp2_pclr* %101, null
  br i1 %103, label %118, label %104

104:                                              ; preds = %99
  %105 = bitcast %struct.opj_jp2_pclr* %101 to i8**
  %106 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %101, i64 0, i32 1
  %107 = load i8*, i8** %106, align 8, !tbaa !405
  tail call void @free(i8* %107) #9
  %108 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %101, i64 0, i32 2
  %109 = load i8*, i8** %108, align 8, !tbaa !407
  tail call void @free(i8* %109) #9
  %110 = load i8*, i8** %105, align 8, !tbaa !408
  tail call void @free(i8* %110) #9
  %111 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %101, i64 0, i32 3
  %112 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %111, align 8, !tbaa !411
  %113 = icmp eq %struct.opj_jp2_cmap_comp* %112, null
  br i1 %113, label %116, label %114

114:                                              ; preds = %104
  %115 = bitcast %struct.opj_jp2_cmap_comp* %112 to i8*
  tail call void @free(i8* %115) #9
  br label %116

116:                                              ; preds = %114, %104
  %117 = bitcast %struct.opj_jp2_pclr* %101 to i8*
  tail call void @free(i8* %117) #9
  store %struct.opj_jp2_pclr* null, %struct.opj_jp2_pclr** %102, align 8, !tbaa !404
  br label %118

118:                                              ; preds = %116, %99, %79, %37
  %119 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %8, i64 0, i32 2
  %120 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %119, align 8, !tbaa !396
  %121 = icmp eq %struct.opj_jp2_cdef* %120, null
  %122 = bitcast %struct.opj_jp2_cdef* %120 to i8*
  br i1 %121, label %130, label %123

123:                                              ; preds = %118
  %124 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %120, i64 0, i32 0
  %125 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %124, align 8, !tbaa !397
  %126 = icmp eq %struct.opj_jp2_cdef_info* %125, null
  br i1 %126, label %129, label %127

127:                                              ; preds = %123
  %128 = bitcast %struct.opj_jp2_cdef_info* %125 to i8*
  tail call void @free(i8* %128) #9
  br label %129

129:                                              ; preds = %127, %123
  tail call void @free(i8* nonnull %122) #9
  br label %130

130:                                              ; preds = %129, %118
  %131 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %8, i64 0, i32 0
  %132 = load i8*, i8** %131, align 8, !tbaa !393
  %133 = icmp eq i8* %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  tail call void @free(i8* nonnull %132) #9
  br label %135

135:                                              ; preds = %134, %130
  %136 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %15, i32 1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1.20, i64 0, i64 0)) #9
  br label %453

137:                                              ; preds = %94, %91
  %138 = tail call i32 @cio_tell(%struct.opj_cio* nonnull %1) #9
  store i32 %138, i32* %85, align 4, !tbaa !43
  %139 = load i32, i32* %88, align 4, !tbaa !375
  %140 = add nsw i32 %139, -8
  store i32 %140, i32* %84, align 4, !tbaa !43
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %87) #9
  %141 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 1
  %142 = load %struct.opj_j2k*, %struct.opj_j2k** %141, align 8, !tbaa !420
  %143 = tail call %struct.opj_image* @j2k_decode(%struct.opj_j2k* %142, %struct.opj_cio* nonnull %1, %struct.opj_codestream_info* %2) #9
  %144 = icmp eq %struct.opj_image* %143, null
  br i1 %144, label %145, label %182

145:                                              ; preds = %137
  %146 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %8, i64 0, i32 3
  %147 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %146, align 8, !tbaa !404
  %148 = icmp eq %struct.opj_jp2_pclr* %147, null
  %149 = bitcast %struct.opj_jp2_pclr* %147 to i8*
  br i1 %148, label %163, label %150

150:                                              ; preds = %145
  %151 = bitcast %struct.opj_jp2_pclr* %147 to i8**
  %152 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %147, i64 0, i32 1
  %153 = load i8*, i8** %152, align 8, !tbaa !405
  tail call void @free(i8* %153) #9
  %154 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %147, i64 0, i32 2
  %155 = load i8*, i8** %154, align 8, !tbaa !407
  tail call void @free(i8* %155) #9
  %156 = load i8*, i8** %151, align 8, !tbaa !408
  tail call void @free(i8* %156) #9
  %157 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %147, i64 0, i32 3
  %158 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %157, align 8, !tbaa !411
  %159 = icmp eq %struct.opj_jp2_cmap_comp* %158, null
  br i1 %159, label %162, label %160

160:                                              ; preds = %150
  %161 = bitcast %struct.opj_jp2_cmap_comp* %158 to i8*
  tail call void @free(i8* %161) #9
  br label %162

162:                                              ; preds = %160, %150
  tail call void @free(i8* nonnull %149) #9
  store %struct.opj_jp2_pclr* null, %struct.opj_jp2_pclr** %146, align 8, !tbaa !404
  br label %163

163:                                              ; preds = %162, %145
  %164 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %8, i64 0, i32 2
  %165 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %164, align 8, !tbaa !396
  %166 = icmp eq %struct.opj_jp2_cdef* %165, null
  %167 = bitcast %struct.opj_jp2_cdef* %165 to i8*
  br i1 %166, label %175, label %168

168:                                              ; preds = %163
  %169 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %165, i64 0, i32 0
  %170 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %169, align 8, !tbaa !397
  %171 = icmp eq %struct.opj_jp2_cdef_info* %170, null
  br i1 %171, label %174, label %172

172:                                              ; preds = %168
  %173 = bitcast %struct.opj_jp2_cdef_info* %170 to i8*
  tail call void @free(i8* %173) #9
  br label %174

174:                                              ; preds = %172, %168
  tail call void @free(i8* nonnull %167) #9
  br label %175

175:                                              ; preds = %174, %163
  %176 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %8, i64 0, i32 0
  %177 = load i8*, i8** %176, align 8, !tbaa !393
  %178 = icmp eq i8* %177, null
  br i1 %178, label %180, label %179

179:                                              ; preds = %175
  tail call void @free(i8* nonnull %177) #9
  br label %180

180:                                              ; preds = %179, %175
  %181 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %15, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2.21, i64 0, i64 0)) #9
  br label %453

182:                                              ; preds = %137
  %183 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 21
  %184 = load i32, i32* %183, align 4, !tbaa !395
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %453

186:                                              ; preds = %182
  %187 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 11
  %188 = load i32, i32* %187, align 4, !tbaa !392
  switch i32 %188, label %193 [
    i32 16, label %189
    i32 17, label %191
  ]

189:                                              ; preds = %186
  %190 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %143, i64 0, i32 5
  store i32 1, i32* %190, align 4, !tbaa !125
  br label %198

191:                                              ; preds = %186
  %192 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %143, i64 0, i32 5
  store i32 2, i32* %192, align 4, !tbaa !125
  br label %198

193:                                              ; preds = %186
  %194 = icmp eq i32 %188, 18
  %195 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %143, i64 0, i32 5
  br i1 %194, label %196, label %197

196:                                              ; preds = %193
  store i32 3, i32* %195, align 4, !tbaa !125
  br label %198

197:                                              ; preds = %193
  store i32 -1, i32* %195, align 4, !tbaa !125
  br label %198

198:                                              ; preds = %197, %196, %191, %189
  %199 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %8, i64 0, i32 2
  %200 = load %struct.opj_jp2_cdef*, %struct.opj_jp2_cdef** %199, align 8, !tbaa !396
  %201 = icmp eq %struct.opj_jp2_cdef* %200, null
  %202 = bitcast %struct.opj_jp2_cdef* %200 to i8*
  br i1 %201, label %250, label %203

203:                                              ; preds = %198
  %204 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %200, i64 0, i32 0
  %205 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %204, align 8, !tbaa !397
  %206 = getelementptr inbounds %struct.opj_jp2_cdef, %struct.opj_jp2_cdef* %200, i64 0, i32 1
  %207 = load i16, i16* %206, align 8, !tbaa !399
  %208 = icmp eq i16 %207, 0
  br i1 %208, label %244, label %209

209:                                              ; preds = %203
  %210 = bitcast %struct.opj_image_comp* %4 to i8*
  %211 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %143, i64 0, i32 6
  %212 = zext i16 %207 to i64
  br label %213

213:                                              ; preds = %239, %209
  %214 = phi i64 [ 0, %209 ], [ %240, %239 ]
  %215 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %205, i64 %214, i32 2
  %216 = load i16, i16* %215, align 2, !tbaa !403
  %217 = icmp eq i16 %216, 0
  br i1 %217, label %239, label %218

218:                                              ; preds = %213
  %219 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %205, i64 %214, i32 0
  %220 = load i16, i16* %219, align 2, !tbaa !400
  %221 = add i16 %216, -1
  %222 = icmp eq i16 %220, %221
  br i1 %222, label %239, label %223

223:                                              ; preds = %218
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %210)
  %224 = load %struct.opj_image_comp*, %struct.opj_image_comp** %211, align 8, !tbaa !128
  %225 = zext i16 %220 to i64
  %226 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %224, i64 %225
  %227 = bitcast %struct.opj_image_comp* %226 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %210, i8* align 8 %227, i64 56, i1 false) #9
  %228 = zext i16 %221 to i64
  %229 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %224, i64 %228
  %230 = bitcast %struct.opj_image_comp* %229 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %227, i8* align 8 %230, i64 56, i1 false) #9
  %231 = load %struct.opj_image_comp*, %struct.opj_image_comp** %211, align 8, !tbaa !128
  %232 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %231, i64 %228
  %233 = bitcast %struct.opj_image_comp* %232 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %233, i8* nonnull align 8 %210, i64 56, i1 false) #9
  %234 = add i16 %220, 1
  store i16 %234, i16* %215, align 2, !tbaa !403
  %235 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %205, i64 %228, i32 0
  %236 = load i16, i16* %235, align 2, !tbaa !400
  %237 = add i16 %236, 1
  %238 = getelementptr inbounds %struct.opj_jp2_cdef_info, %struct.opj_jp2_cdef_info* %205, i64 %228, i32 2
  store i16 %237, i16* %238, align 2, !tbaa !403
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %210)
  br label %239

239:                                              ; preds = %223, %218, %213
  %240 = add nuw nsw i64 %214, 1
  %241 = icmp eq i64 %240, %212
  br i1 %241, label %242, label %213

242:                                              ; preds = %239
  %243 = load %struct.opj_jp2_cdef_info*, %struct.opj_jp2_cdef_info** %204, align 8, !tbaa !397
  br label %244

244:                                              ; preds = %242, %203
  %245 = phi %struct.opj_jp2_cdef_info* [ %243, %242 ], [ %205, %203 ]
  %246 = icmp eq %struct.opj_jp2_cdef_info* %245, null
  br i1 %246, label %249, label %247

247:                                              ; preds = %244
  %248 = bitcast %struct.opj_jp2_cdef_info* %245 to i8*
  tail call void @free(i8* %248) #9
  br label %249

249:                                              ; preds = %247, %244
  tail call void @free(i8* nonnull %202) #9
  store %struct.opj_jp2_cdef* null, %struct.opj_jp2_cdef** %199, align 8, !tbaa !396
  br label %250

250:                                              ; preds = %249, %198
  %251 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %8, i64 0, i32 3
  %252 = load %struct.opj_jp2_pclr*, %struct.opj_jp2_pclr** %251, align 8, !tbaa !404
  %253 = icmp eq %struct.opj_jp2_pclr* %252, null
  %254 = bitcast %struct.opj_jp2_pclr* %252 to i8**
  %255 = bitcast %struct.opj_jp2_pclr* %252 to i8*
  br i1 %253, label %444, label %256

256:                                              ; preds = %250
  %257 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %252, i64 0, i32 3
  %258 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %257, align 8, !tbaa !411
  %259 = icmp eq %struct.opj_jp2_cmap_comp* %258, null
  br i1 %259, label %260, label %271

260:                                              ; preds = %256
  %261 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %252, i64 0, i32 1
  %262 = load i8*, i8** %261, align 8, !tbaa !405
  tail call void @free(i8* %262) #9
  %263 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %252, i64 0, i32 2
  %264 = load i8*, i8** %263, align 8, !tbaa !407
  tail call void @free(i8* %264) #9
  %265 = load i8*, i8** %254, align 8, !tbaa !408
  tail call void @free(i8* %265) #9
  %266 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %257, align 8, !tbaa !411
  %267 = icmp eq %struct.opj_jp2_cmap_comp* %266, null
  br i1 %267, label %270, label %268

268:                                              ; preds = %260
  %269 = bitcast %struct.opj_jp2_cmap_comp* %266 to i8*
  tail call void @free(i8* %269) #9
  br label %270

270:                                              ; preds = %268, %260
  tail call void @free(i8* nonnull %255) #9
  br label %443

271:                                              ; preds = %256
  %272 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %252, i64 0, i32 2
  %273 = load i8*, i8** %272, align 8, !tbaa !407
  %274 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %252, i64 0, i32 1
  %275 = load i8*, i8** %274, align 8, !tbaa !405
  %276 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %252, i64 0, i32 0
  %277 = load i32*, i32** %276, align 8, !tbaa !408
  %278 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %252, i64 0, i32 5
  %279 = load i16, i16* %278, align 2, !tbaa !410
  %280 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %143, i64 0, i32 6
  %281 = load %struct.opj_image_comp*, %struct.opj_image_comp** %280, align 8, !tbaa !128
  %282 = zext i16 %279 to i64
  %283 = mul nuw nsw i64 %282, 56
  %284 = tail call noalias i8* @malloc(i64 %283) #9
  %285 = bitcast i8* %284 to %struct.opj_image_comp*
  %286 = zext i16 %279 to i32
  %287 = icmp eq i16 %279, 0
  br i1 %287, label %416, label %288

288:                                              ; preds = %329, %271
  %289 = phi i64 [ %330, %329 ], [ 0, %271 ]
  %290 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %258, i64 %289, i32 2
  %291 = load i8, i8* %290, align 1, !tbaa !415
  %292 = zext i8 %291 to i32
  %293 = icmp ult i32 %292, %286
  br i1 %293, label %294, label %306

294:                                              ; preds = %288
  %295 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %258, i64 %289, i32 0
  %296 = load i16, i16* %295, align 2, !tbaa !412
  %297 = zext i8 %291 to i64
  %298 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %285, i64 %297
  %299 = zext i16 %296 to i64
  %300 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %281, i64 %299
  %301 = bitcast %struct.opj_image_comp* %298 to i8*
  %302 = bitcast %struct.opj_image_comp* %300 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %301, i8* align 8 %302, i64 56, i1 false) #9, !tbaa.struct !421
  %303 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %258, i64 %289, i32 1
  %304 = load i8, i8* %303, align 2, !tbaa !414
  %305 = icmp eq i8 %304, 0
  br i1 %305, label %308, label %310

306:                                              ; preds = %288
  %307 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %15, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12.22, i64 0, i64 0), i32 %292, i32 %286) #9
  br label %329

308:                                              ; preds = %294
  %309 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %281, i64 %299, i32 11
  store i32* null, i32** %309, align 8, !tbaa !133
  br label %329

310:                                              ; preds = %294
  %311 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %281, i64 %299, i32 2
  %312 = load i32, i32* %311, align 8, !tbaa !268
  %313 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %281, i64 %299, i32 3
  %314 = load i32, i32* %313, align 4, !tbaa !269
  %315 = mul nsw i32 %314, %312
  %316 = sext i32 %315 to i64
  %317 = shl nsw i64 %316, 2
  %318 = tail call noalias i8* @malloc(i64 %317) #9
  %319 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %285, i64 %297, i32 11
  %320 = bitcast i32** %319 to i8**
  store i8* %318, i8** %320, align 8, !tbaa !133
  %321 = getelementptr inbounds i8, i8* %273, i64 %289
  %322 = load i8, i8* %321, align 1, !tbaa !15
  %323 = zext i8 %322 to i32
  %324 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %285, i64 %297, i32 6
  store i32 %323, i32* %324, align 8, !tbaa !207
  %325 = getelementptr inbounds i8, i8* %275, i64 %289
  %326 = load i8, i8* %325, align 1, !tbaa !15
  %327 = zext i8 %326 to i32
  %328 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %285, i64 %297, i32 8
  store i32 %327, i32* %328, align 8, !tbaa !131
  br label %329

329:                                              ; preds = %310, %308, %306
  %330 = add nuw nsw i64 %289, 1
  %331 = icmp eq i64 %330, %282
  br i1 %331, label %332, label %288

332:                                              ; preds = %329
  %333 = getelementptr inbounds %struct.opj_jp2_pclr, %struct.opj_jp2_pclr* %252, i64 0, i32 4
  %334 = load i16, i16* %333, align 8, !tbaa !409
  %335 = zext i16 %334 to i32
  %336 = add nsw i32 %335, -1
  br label %337

337:                                              ; preds = %413, %332
  %338 = phi i64 [ %414, %413 ], [ 0, %332 ]
  %339 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %258, i64 %338, i32 1
  %340 = load i8, i8* %339, align 2, !tbaa !414
  %341 = icmp eq i8 %340, 0
  br i1 %341, label %413, label %342

342:                                              ; preds = %337
  %343 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %258, i64 %338, i32 0
  %344 = load i16, i16* %343, align 2, !tbaa !412
  %345 = getelementptr inbounds %struct.opj_jp2_cmap_comp, %struct.opj_jp2_cmap_comp* %258, i64 %338, i32 2
  %346 = load i8, i8* %345, align 1, !tbaa !415
  %347 = zext i16 %344 to i64
  %348 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %281, i64 %347, i32 11
  %349 = load i32*, i32** %348, align 8, !tbaa !133
  %350 = zext i8 %346 to i64
  %351 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %285, i64 %350, i32 11
  %352 = load i32*, i32** %351, align 8, !tbaa !133
  %353 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %285, i64 %350, i32 2
  %354 = load i32, i32* %353, align 8, !tbaa !268
  %355 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %285, i64 %350, i32 3
  %356 = load i32, i32* %355, align 4, !tbaa !269
  %357 = mul i32 %356, %354
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %413, label %359

359:                                              ; preds = %342
  %360 = zext i8 %346 to i32
  %361 = zext i32 %357 to i64
  %362 = and i64 %361, 1
  %363 = icmp eq i32 %357, 1
  br i1 %363, label %397, label %364

364:                                              ; preds = %359
  %365 = sub nsw i64 %361, %362
  br label %366

366:                                              ; preds = %366, %364
  %367 = phi i64 [ 0, %364 ], [ %394, %366 ]
  %368 = phi i64 [ %365, %364 ], [ %395, %366 ]
  %369 = getelementptr inbounds i32, i32* %349, i64 %367
  %370 = load i32, i32* %369, align 4, !tbaa !43
  %371 = icmp slt i32 %370, 0
  %372 = icmp slt i32 %370, %335
  %373 = select i1 %372, i32 %370, i32 %336
  %374 = select i1 %371, i32 0, i32 %373
  %375 = mul nsw i32 %374, %286
  %376 = add nsw i32 %375, %360
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds i32, i32* %277, i64 %377
  %379 = load i32, i32* %378, align 4, !tbaa !43
  %380 = getelementptr inbounds i32, i32* %352, i64 %367
  store i32 %379, i32* %380, align 4, !tbaa !43
  %381 = or i64 %367, 1
  %382 = getelementptr inbounds i32, i32* %349, i64 %381
  %383 = load i32, i32* %382, align 4, !tbaa !43
  %384 = icmp slt i32 %383, 0
  %385 = icmp slt i32 %383, %335
  %386 = select i1 %385, i32 %383, i32 %336
  %387 = select i1 %384, i32 0, i32 %386
  %388 = mul nsw i32 %387, %286
  %389 = add nsw i32 %388, %360
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds i32, i32* %277, i64 %390
  %392 = load i32, i32* %391, align 4, !tbaa !43
  %393 = getelementptr inbounds i32, i32* %352, i64 %381
  store i32 %392, i32* %393, align 4, !tbaa !43
  %394 = add nuw nsw i64 %367, 2
  %395 = add i64 %368, -2
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %397, label %366

397:                                              ; preds = %366, %359
  %398 = phi i64 [ 0, %359 ], [ %394, %366 ]
  %399 = icmp eq i64 %362, 0
  br i1 %399, label %413, label %400

400:                                              ; preds = %397
  %401 = getelementptr inbounds i32, i32* %349, i64 %398
  %402 = load i32, i32* %401, align 4, !tbaa !43
  %403 = icmp slt i32 %402, 0
  %404 = icmp slt i32 %402, %335
  %405 = select i1 %404, i32 %402, i32 %336
  %406 = select i1 %403, i32 0, i32 %405
  %407 = mul nsw i32 %406, %286
  %408 = add nsw i32 %407, %360
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds i32, i32* %277, i64 %409
  %411 = load i32, i32* %410, align 4, !tbaa !43
  %412 = getelementptr inbounds i32, i32* %352, i64 %398
  store i32 %411, i32* %412, align 4, !tbaa !43
  br label %413

413:                                              ; preds = %400, %397, %342, %337
  %414 = add nuw nsw i64 %338, 1
  %415 = icmp eq i64 %414, %282
  br i1 %415, label %416, label %337

416:                                              ; preds = %413, %271
  %417 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %143, i64 0, i32 4
  %418 = load i32, i32* %417, align 8, !tbaa !127
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %432, label %420

420:                                              ; preds = %428, %416
  %421 = phi i16 [ %429, %428 ], [ 0, %416 ]
  %422 = zext i16 %421 to i64
  %423 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %281, i64 %422, i32 11
  %424 = load i32*, i32** %423, align 8, !tbaa !133
  %425 = icmp eq i32* %424, null
  br i1 %425, label %428, label %426

426:                                              ; preds = %420
  %427 = bitcast i32* %424 to i8*
  tail call void @free(i8* %427) #9
  br label %428

428:                                              ; preds = %426, %420
  %429 = add i16 %421, 1
  %430 = zext i16 %429 to i32
  %431 = icmp ugt i32 %418, %430
  br i1 %431, label %420, label %432

432:                                              ; preds = %428, %416
  %433 = bitcast %struct.opj_image_comp* %281 to i8*
  tail call void @free(i8* %433) #9
  %434 = bitcast %struct.opj_image_comp** %280 to i8**
  store i8* %284, i8** %434, align 8, !tbaa !128
  store i32 %286, i32* %417, align 8, !tbaa !127
  %435 = load i8*, i8** %274, align 8, !tbaa !405
  tail call void @free(i8* %435) #9
  %436 = load i8*, i8** %272, align 8, !tbaa !407
  tail call void @free(i8* %436) #9
  %437 = load i8*, i8** %254, align 8, !tbaa !408
  tail call void @free(i8* %437) #9
  %438 = load %struct.opj_jp2_cmap_comp*, %struct.opj_jp2_cmap_comp** %257, align 8, !tbaa !411
  %439 = icmp eq %struct.opj_jp2_cmap_comp* %438, null
  br i1 %439, label %442, label %440

440:                                              ; preds = %432
  %441 = bitcast %struct.opj_jp2_cmap_comp* %438 to i8*
  tail call void @free(i8* %441) #9
  br label %442

442:                                              ; preds = %440, %432
  tail call void @free(i8* nonnull %255) #9
  br label %443

443:                                              ; preds = %442, %270
  store %struct.opj_jp2_pclr* null, %struct.opj_jp2_pclr** %251, align 8, !tbaa !404
  br label %444

444:                                              ; preds = %443, %250
  %445 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %8, i64 0, i32 0
  %446 = load i8*, i8** %445, align 8, !tbaa !393
  %447 = icmp eq i8* %446, null
  br i1 %447, label %453, label %448

448:                                              ; preds = %444
  %449 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %143, i64 0, i32 7
  store i8* %446, i8** %449, align 8, !tbaa !422
  store i8* null, i8** %445, align 8, !tbaa !393
  %450 = getelementptr inbounds %struct.opj_jp2_color, %struct.opj_jp2_color* %8, i64 0, i32 1
  %451 = load i32, i32* %450, align 8, !tbaa !394
  %452 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %143, i64 0, i32 8
  store i32 %451, i32* %452, align 8, !tbaa !423
  br label %453

453:                                              ; preds = %448, %444, %182, %180, %135, %3
  %454 = phi %struct.opj_image* [ null, %180 ], [ null, %135 ], [ null, %3 ], [ %143, %444 ], [ %143, %182 ], [ %143, %448 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #9
  ret %struct.opj_image* %454
}

; Function Attrs: nounwind uwtable
define void @jp2_write_jp2h(%struct.opj_jp2* nocapture, %struct.opj_cio*) #0 {
  %3 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %4 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1785737832, i32 4) #9
  %5 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %6 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1768449138, i32 4) #9
  %7 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4, !tbaa !376
  %9 = zext i32 %8 to i64
  %10 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %9, i32 4) #9
  %11 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 8, !tbaa !377
  %13 = zext i32 %12 to i64
  %14 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %13, i32 4) #9
  %15 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 4
  %16 = load i32, i32* %15, align 8, !tbaa !378
  %17 = zext i32 %16 to i64
  %18 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %17, i32 2) #9
  %19 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 5
  %20 = load i32, i32* %19, align 4, !tbaa !380
  %21 = zext i32 %20 to i64
  %22 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %21, i32 1) #9
  %23 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 6
  %24 = load i32, i32* %23, align 8, !tbaa !381
  %25 = zext i32 %24 to i64
  %26 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %25, i32 1) #9
  %27 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 7
  %28 = load i32, i32* %27, align 4, !tbaa !382
  %29 = zext i32 %28 to i64
  %30 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %29, i32 1) #9
  %31 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 8
  %32 = load i32, i32* %31, align 8, !tbaa !383
  %33 = zext i32 %32 to i64
  %34 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %33, i32 1) #9
  %35 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %36 = sub nsw i32 %35, %5
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %5) #9
  %37 = sext i32 %36 to i64
  %38 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %37, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %35) #9
  %39 = load i32, i32* %19, align 4, !tbaa !380
  %40 = icmp eq i32 %39, 255
  br i1 %40, label %41, label %64

41:                                               ; preds = %2
  %42 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %43 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1651532643, i32 4) #9
  %44 = load i32, i32* %15, align 8, !tbaa !378
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %59, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 17
  br label %48

48:                                               ; preds = %48, %46
  %49 = phi i64 [ 0, %46 ], [ %55, %48 ]
  %50 = load %struct.opj_jp2_comps*, %struct.opj_jp2_comps** %47, align 8, !tbaa !379
  %51 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %50, i64 %49, i32 2
  %52 = load i32, i32* %51, align 4, !tbaa !385
  %53 = sext i32 %52 to i64
  %54 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %53, i32 1) #9
  %55 = add nuw nsw i64 %49, 1
  %56 = load i32, i32* %15, align 8, !tbaa !378
  %57 = zext i32 %56 to i64
  %58 = icmp ult i64 %55, %57
  br i1 %58, label %48, label %59

59:                                               ; preds = %48, %41
  %60 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %61 = sub nsw i32 %60, %42
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %42) #9
  %62 = sext i32 %61 to i64
  %63 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %62, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %60) #9
  br label %64

64:                                               ; preds = %59, %2
  %65 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %66 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1668246642, i32 4) #9
  %67 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 9
  %68 = load i32, i32* %67, align 4, !tbaa !389
  %69 = zext i32 %68 to i64
  %70 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %69, i32 1) #9
  %71 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 12
  %72 = load i32, i32* %71, align 8, !tbaa !390
  %73 = zext i32 %72 to i64
  %74 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %73, i32 1) #9
  %75 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 10
  %76 = load i32, i32* %75, align 8, !tbaa !391
  %77 = zext i32 %76 to i64
  %78 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %77, i32 1) #9
  %79 = load i32, i32* %67, align 4, !tbaa !389
  %80 = icmp eq i32 %79, 2
  %81 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 11
  br i1 %80, label %85, label %82

82:                                               ; preds = %64
  %83 = load i32, i32* %81, align 4, !tbaa !392
  %84 = zext i32 %83 to i64
  br label %86

85:                                               ; preds = %64
  store i32 0, i32* %81, align 4, !tbaa !392
  br label %86

86:                                               ; preds = %85, %82
  %87 = phi i64 [ %84, %82 ], [ 0, %85 ]
  %88 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %87, i32 4) #9
  %89 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %90 = sub nsw i32 %89, %65
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %65) #9
  %91 = sext i32 %90 to i64
  %92 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %91, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %89) #9
  %93 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %94 = sub nsw i32 %93, %3
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %3) #9
  %95 = sext i32 %94 to i64
  %96 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %95, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %93) #9
  ret void
}

; Function Attrs: nounwind uwtable
define noalias %struct.opj_jp2* @jp2_create_decompress(%struct.opj_common_struct*) #0 {
  %2 = tail call noalias i8* @calloc(i64 1, i64 104) #9
  %3 = bitcast i8* %2 to %struct.opj_jp2*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = bitcast i8* %2 to %struct.opj_common_struct**
  store %struct.opj_common_struct* %0, %struct.opj_common_struct** %6, align 8, !tbaa !371
  %7 = tail call %struct.opj_j2k* @j2k_create_decompress(%struct.opj_common_struct* %0) #9
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to %struct.opj_j2k**
  store %struct.opj_j2k* %7, %struct.opj_j2k** %9, align 8, !tbaa !420
  %10 = icmp eq %struct.opj_j2k* %7, null
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  tail call void @j2k_destroy_decompress(%struct.opj_j2k* null) #9
  tail call void @free(i8* nonnull %2) #9
  br label %12

12:                                               ; preds = %11, %5, %1
  %13 = phi %struct.opj_jp2* [ null, %11 ], [ %3, %1 ], [ %3, %5 ]
  ret %struct.opj_jp2* %13
}

; Function Attrs: nounwind uwtable
define void @jp2_destroy_decompress(%struct.opj_jp2*) #0 {
  %2 = icmp eq %struct.opj_jp2* %0, null
  br i1 %2, label %19, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 1
  %5 = load %struct.opj_j2k*, %struct.opj_j2k** %4, align 8, !tbaa !420
  tail call void @j2k_destroy_decompress(%struct.opj_j2k* %5) #9
  %6 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 17
  %7 = load %struct.opj_jp2_comps*, %struct.opj_jp2_comps** %6, align 8, !tbaa !379
  %8 = icmp eq %struct.opj_jp2_comps* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = bitcast %struct.opj_jp2_comps* %7 to i8*
  tail call void @free(i8* %10) #9
  br label %11

11:                                               ; preds = %9, %3
  %12 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 16
  %13 = load i32*, i32** %12, align 8, !tbaa !419
  %14 = icmp eq i32* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = bitcast i32* %13 to i8*
  tail call void @free(i8* %16) #9
  br label %17

17:                                               ; preds = %15, %11
  %18 = bitcast %struct.opj_jp2* %0 to i8*
  tail call void @free(i8* %18) #9
  br label %19

19:                                               ; preds = %17, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @jp2_setup_decoder(%struct.opj_jp2* nocapture, %struct.opj_dparameters*) #0 {
  %3 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 1
  %4 = load %struct.opj_j2k*, %struct.opj_j2k** %3, align 8, !tbaa !420
  tail call void @j2k_setup_decoder(%struct.opj_j2k* %4, %struct.opj_dparameters* %1) #9
  %5 = getelementptr inbounds %struct.opj_dparameters, %struct.opj_dparameters* %1, i64 0, i32 10
  %6 = load i32, i32* %5, align 4, !tbaa !424
  %7 = and i32 %6, 1
  %8 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 21
  store i32 %7, i32* %8, align 4, !tbaa !395
  ret void
}

; Function Attrs: nounwind uwtable
define noalias %struct.opj_jp2* @jp2_create_compress(%struct.opj_common_struct*) #0 {
  %2 = tail call noalias i8* @malloc(i64 104) #9
  %3 = bitcast i8* %2 to %struct.opj_jp2*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = bitcast i8* %2 to %struct.opj_common_struct**
  store %struct.opj_common_struct* %0, %struct.opj_common_struct** %6, align 8, !tbaa !371
  %7 = tail call %struct.opj_j2k* @j2k_create_compress(%struct.opj_common_struct* %0) #9
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to %struct.opj_j2k**
  store %struct.opj_j2k* %7, %struct.opj_j2k** %9, align 8, !tbaa !420
  %10 = icmp eq %struct.opj_j2k* %7, null
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  tail call void @j2k_destroy_compress(%struct.opj_j2k* null) #9
  tail call void @free(i8* nonnull %2) #9
  br label %12

12:                                               ; preds = %11, %5, %1
  %13 = phi %struct.opj_jp2* [ null, %11 ], [ %3, %1 ], [ %3, %5 ]
  ret %struct.opj_jp2* %13
}

; Function Attrs: nounwind uwtable
define void @jp2_destroy_compress(%struct.opj_jp2*) #0 {
  %2 = icmp eq %struct.opj_jp2* %0, null
  br i1 %2, label %19, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 1
  %5 = load %struct.opj_j2k*, %struct.opj_j2k** %4, align 8, !tbaa !420
  tail call void @j2k_destroy_compress(%struct.opj_j2k* %5) #9
  %6 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 17
  %7 = load %struct.opj_jp2_comps*, %struct.opj_jp2_comps** %6, align 8, !tbaa !379
  %8 = icmp eq %struct.opj_jp2_comps* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = bitcast %struct.opj_jp2_comps* %7 to i8*
  tail call void @free(i8* %10) #9
  br label %11

11:                                               ; preds = %9, %3
  %12 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 16
  %13 = load i32*, i32** %12, align 8, !tbaa !419
  %14 = icmp eq i32* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = bitcast i32* %13 to i8*
  tail call void @free(i8* %16) #9
  br label %17

17:                                               ; preds = %15, %11
  %18 = bitcast %struct.opj_jp2* %0 to i8*
  tail call void @free(i8* %18) #9
  br label %19

19:                                               ; preds = %17, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @jp2_setup_encoder(%struct.opj_jp2*, %struct.opj_cparameters*, %struct.opj_image*) #0 {
  %4 = icmp ne %struct.opj_jp2* %0, null
  %5 = icmp ne %struct.opj_cparameters* %1, null
  %6 = and i1 %4, %5
  %7 = icmp ne %struct.opj_image* %2, null
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %153

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %11 = load i32, i32* %10, align 8, !tbaa !127
  %12 = add i32 %11, -1
  %13 = icmp ugt i32 %12, 16383
  br i1 %13, label %14, label %18

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %16 = load %struct.opj_common_struct*, %struct.opj_common_struct** %15, align 8, !tbaa !371
  %17 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %16, i32 1, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.3.23, i64 0, i64 0)) #9
  br label %153

18:                                               ; preds = %9
  %19 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 1
  %20 = load %struct.opj_j2k*, %struct.opj_j2k** %19, align 8, !tbaa !420
  tail call void @j2k_setup_encoder(%struct.opj_j2k* %20, %struct.opj_cparameters* nonnull %1, %struct.opj_image* nonnull %2) #9
  %21 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 13
  store i32 1785737760, i32* %21, align 4, !tbaa !416
  %22 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 14
  store i32 0, i32* %22, align 8, !tbaa !417
  %23 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 15
  store i32 1, i32* %23, align 4, !tbaa !418
  %24 = tail call noalias i8* @malloc(i64 4) #9
  %25 = bitcast i8* %24 to i32*
  %26 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 16
  %27 = bitcast i32** %26 to i8**
  store i8* %24, i8** %27, align 8, !tbaa !419
  store i32 1785737760, i32* %25, align 4, !tbaa !43
  %28 = load i32, i32* %10, align 8, !tbaa !127
  %29 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 4
  store i32 %28, i32* %29, align 8, !tbaa !378
  %30 = zext i32 %28 to i64
  %31 = mul nuw nsw i64 %30, 12
  %32 = tail call noalias i8* @malloc(i64 %31) #9
  %33 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 17
  %34 = bitcast %struct.opj_jp2_comps** %33 to i8**
  store i8* %32, i8** %34, align 8, !tbaa !379
  %35 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 3
  %36 = load i32, i32* %35, align 4, !tbaa !200
  %37 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 1
  %38 = load i32, i32* %37, align 4, !tbaa !202
  %39 = sub nsw i32 %36, %38
  %40 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 3
  store i32 %39, i32* %40, align 4, !tbaa !376
  %41 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 2
  %42 = load i32, i32* %41, align 8, !tbaa !199
  %43 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 0
  %44 = load i32, i32* %43, align 8, !tbaa !201
  %45 = sub nsw i32 %42, %44
  %46 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 2
  store i32 %45, i32* %46, align 8, !tbaa !377
  %47 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %48 = load %struct.opj_image_comp*, %struct.opj_image_comp** %47, align 8, !tbaa !128
  %49 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %48, i64 0, i32 6
  %50 = load i32, i32* %49, align 8, !tbaa !207
  %51 = add nsw i32 %50, -1
  %52 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %48, i64 0, i32 8
  %53 = load i32, i32* %52, align 8, !tbaa !131
  %54 = shl i32 %53, 7
  %55 = add nsw i32 %51, %54
  %56 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 5
  store i32 %55, i32* %56, align 4, !tbaa !380
  %57 = icmp sgt i32 %28, 1
  %58 = bitcast i8* %32 to %struct.opj_jp2_comps*
  br i1 %57, label %59, label %85

59:                                               ; preds = %18
  %60 = add nsw i64 %30, -1
  %61 = and i64 %60, 1
  %62 = icmp eq i32 %28, 2
  br i1 %62, label %77, label %63

63:                                               ; preds = %59
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %155, %63
  %66 = phi i64 [ 1, %63 ], [ %156, %155 ]
  %67 = phi i64 [ %64, %63 ], [ %157, %155 ]
  %68 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %48, i64 %66, i32 6
  %69 = load i32, i32* %68, align 8, !tbaa !207
  %70 = icmp eq i32 %50, %69
  br i1 %70, label %72, label %71

71:                                               ; preds = %65
  store i32 255, i32* %56, align 4, !tbaa !380
  br label %72

72:                                               ; preds = %71, %65
  %73 = add nuw nsw i64 %66, 1
  %74 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %48, i64 %73, i32 6
  %75 = load i32, i32* %74, align 8, !tbaa !207
  %76 = icmp eq i32 %50, %75
  br i1 %76, label %155, label %154

77:                                               ; preds = %155, %59
  %78 = phi i64 [ 1, %59 ], [ %156, %155 ]
  %79 = icmp eq i64 %61, 0
  br i1 %79, label %85, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %48, i64 %78, i32 6
  %82 = load i32, i32* %81, align 8, !tbaa !207
  %83 = icmp eq i32 %50, %82
  br i1 %83, label %85, label %84

84:                                               ; preds = %80
  store i32 255, i32* %56, align 4, !tbaa !380
  br label %85

85:                                               ; preds = %84, %80, %77, %18
  %86 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 6
  store i32 7, i32* %86, align 8, !tbaa !381
  %87 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 7
  store i32 0, i32* %87, align 4, !tbaa !382
  %88 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 8
  store i32 0, i32* %88, align 8, !tbaa !383
  %89 = icmp sgt i32 %28, 0
  br i1 %89, label %90, label %138

90:                                               ; preds = %85
  %91 = add nsw i32 %50, -1
  %92 = shl i32 %53, 7
  %93 = add nsw i32 %91, %92
  %94 = getelementptr inbounds i8, i8* %32, i64 8
  %95 = bitcast i8* %94 to i32*
  store i32 %93, i32* %95, align 4, !tbaa !385
  %96 = icmp eq i32 %28, 1
  br i1 %96, label %138, label %97

97:                                               ; preds = %90
  %98 = add nsw i64 %30, -1
  %99 = and i64 %98, 1
  %100 = icmp eq i32 %28, 2
  br i1 %100, label %126, label %101

101:                                              ; preds = %97
  %102 = sub nsw i64 %98, %99
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi i64 [ 1, %101 ], [ %123, %103 ]
  %105 = phi i64 [ %102, %101 ], [ %124, %103 ]
  %106 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %48, i64 %104, i32 6
  %107 = load i32, i32* %106, align 8, !tbaa !207
  %108 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %48, i64 %104, i32 8
  %109 = load i32, i32* %108, align 8, !tbaa !131
  %110 = add nsw i32 %107, -1
  %111 = shl i32 %109, 7
  %112 = add nsw i32 %110, %111
  %113 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %58, i64 %104, i32 2
  store i32 %112, i32* %113, align 4, !tbaa !385
  %114 = add nuw nsw i64 %104, 1
  %115 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %48, i64 %114, i32 6
  %116 = load i32, i32* %115, align 8, !tbaa !207
  %117 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %48, i64 %114, i32 8
  %118 = load i32, i32* %117, align 8, !tbaa !131
  %119 = add nsw i32 %116, -1
  %120 = shl i32 %118, 7
  %121 = add nsw i32 %119, %120
  %122 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %58, i64 %114, i32 2
  store i32 %121, i32* %122, align 4, !tbaa !385
  %123 = add nuw nsw i64 %104, 2
  %124 = add i64 %105, -2
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %103

126:                                              ; preds = %103, %97
  %127 = phi i64 [ 1, %97 ], [ %123, %103 ]
  %128 = icmp eq i64 %99, 0
  br i1 %128, label %138, label %129

129:                                              ; preds = %126
  %130 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %48, i64 %127, i32 6
  %131 = load i32, i32* %130, align 8, !tbaa !207
  %132 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %48, i64 %127, i32 8
  %133 = load i32, i32* %132, align 8, !tbaa !131
  %134 = add nsw i32 %131, -1
  %135 = shl i32 %133, 7
  %136 = add nsw i32 %134, %135
  %137 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %58, i64 %127, i32 2
  store i32 %136, i32* %137, align 4, !tbaa !385
  br label %138

138:                                              ; preds = %129, %126, %90, %85
  %139 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 9
  store i32 1, i32* %139, align 4, !tbaa !389
  %140 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 5
  %141 = load i32, i32* %140, align 4, !tbaa !125
  %142 = add i32 %141, -1
  %143 = icmp ult i32 %142, 3
  br i1 %143, label %144, label %147

144:                                              ; preds = %138
  %145 = add i32 %141, 15
  %146 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 11
  store i32 %145, i32* %146, align 4, !tbaa !392
  br label %147

147:                                              ; preds = %144, %138
  %148 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 12
  store i32 0, i32* %148, align 8, !tbaa !390
  %149 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 10
  store i32 0, i32* %149, align 8, !tbaa !391
  %150 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 56
  %151 = load i32, i32* %150, align 4, !tbaa !425
  %152 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 20
  store i32 %151, i32* %152, align 8, !tbaa !426
  br label %153

153:                                              ; preds = %147, %14, %3
  ret void

154:                                              ; preds = %72
  store i32 255, i32* %56, align 4, !tbaa !380
  br label %155

155:                                              ; preds = %154, %72
  %156 = add nuw nsw i64 %66, 2
  %157 = add i64 %67, -2
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %77, label %65
}

; Function Attrs: nounwind uwtable
define i32 @opj_jp2_encode(%struct.opj_jp2* nocapture, %struct.opj_cio*, %struct.opj_image*, %struct.opj_codestream_info*) #0 {
  %5 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %6 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1783636000, i32 4) #9
  %7 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 218793738, i32 4) #9
  %8 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %9 = sub nsw i32 %8, %5
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %5) #9
  %10 = sext i32 %9 to i64
  %11 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %10, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %8) #9
  %12 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %13 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1718909296, i32 4) #9
  %14 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 13
  %15 = load i32, i32* %14, align 4, !tbaa !416
  %16 = zext i32 %15 to i64
  %17 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %16, i32 4) #9
  %18 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 14
  %19 = load i32, i32* %18, align 8, !tbaa !417
  %20 = zext i32 %19 to i64
  %21 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %20, i32 4) #9
  %22 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 15
  %23 = load i32, i32* %22, align 4, !tbaa !418
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %38, label %25

25:                                               ; preds = %4
  %26 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 16
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %34, %27 ]
  %29 = load i32*, i32** %26, align 8, !tbaa !419
  %30 = getelementptr inbounds i32, i32* %29, i64 %28
  %31 = load i32, i32* %30, align 4, !tbaa !43
  %32 = zext i32 %31 to i64
  %33 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %32, i32 4) #9
  %34 = add nuw nsw i64 %28, 1
  %35 = load i32, i32* %22, align 4, !tbaa !418
  %36 = zext i32 %35 to i64
  %37 = icmp ult i64 %34, %36
  br i1 %37, label %27, label %38

38:                                               ; preds = %27, %4
  %39 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %40 = sub nsw i32 %39, %12
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %12) #9
  %41 = sext i32 %40 to i64
  %42 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %41, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %39) #9
  tail call void @jp2_write_jp2h(%struct.opj_jp2* nonnull %0, %struct.opj_cio* %1)
  %43 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 20
  %44 = load i32, i32* %43, align 8, !tbaa !426
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %38
  %47 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 24) #9
  %48 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  br label %49

49:                                               ; preds = %46, %38
  %50 = phi i32 [ %48, %46 ], [ -1, %38 ]
  %51 = phi i32 [ %47, %46 ], [ -1, %38 ]
  %52 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 1
  %53 = load %struct.opj_j2k*, %struct.opj_j2k** %52, align 8, !tbaa !420
  %54 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %55 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1785737827, i32 4) #9
  %56 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %57 = tail call i32 @j2k_encode(%struct.opj_j2k* %53, %struct.opj_cio* %1, %struct.opj_image* %2, %struct.opj_codestream_info* %3) #9
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %49
  %60 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %53, i64 0, i32 0
  %61 = load %struct.opj_common_struct*, %struct.opj_common_struct** %60, align 8, !tbaa !158
  %62 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %61, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4.24, i64 0, i64 0)) #9
  br label %73

63:                                               ; preds = %49
  %64 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %65 = sub i32 %64, %56
  %66 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 18
  store i32 %56, i32* %66, align 8, !tbaa !427
  %67 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 19
  store i32 %65, i32* %67, align 4, !tbaa !428
  %68 = add i32 %65, 8
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %54) #9
  %69 = sext i32 %68 to i64
  %70 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %69, i32 4) #9
  %71 = add nsw i32 %68, %54
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %71) #9
  %72 = icmp eq i32 %68, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %63, %59
  %74 = getelementptr inbounds %struct.opj_jp2, %struct.opj_jp2* %0, i64 0, i32 0
  %75 = load %struct.opj_common_struct*, %struct.opj_common_struct** %74, align 8, !tbaa !371
  %76 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %75, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4.24, i64 0, i64 0)) #9
  br label %117

77:                                               ; preds = %63
  %78 = load i32, i32* %43, align 8, !tbaa !426
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %117, label %80

80:                                               ; preds = %77
  %81 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %82 = add nsw i32 %50, 8
  %83 = tail call i32 @write_cidx(i32 %82, %struct.opj_cio* %1, %struct.opj_image* %2, %struct.opj_codestream_info* byval align 8 %3, i32 %65) #9
  %84 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %85 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %86 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1718183032, i32 4) #9
  %87 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %88 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1886550137, i32 4) #9
  %89 = sext i32 %50 to i64
  %90 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %89, i32 8) #9
  %91 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %69, i32 4) #9
  %92 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1785737827, i32 4) #9
  %93 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1, i32 1) #9
  %94 = sext i32 %81 to i64
  %95 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %94, i32 8) #9
  %96 = sext i32 %83 to i64
  %97 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %96, i32 4) #9
  %98 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1667851384, i32 4) #9
  %99 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %100 = sub nsw i32 %99, %87
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %87) #9
  %101 = sext i32 %100 to i64
  %102 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %101, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %99) #9
  %103 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %104 = sub nsw i32 %103, %85
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %85) #9
  %105 = sext i32 %104 to i64
  %106 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %105, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %103) #9
  %107 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %51) #9
  %108 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %109 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1768977522, i32 4) #9
  %110 = sext i32 %84 to i64
  %111 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %110, i32 8) #9
  %112 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %105, i32 8) #9
  %113 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %114 = sub nsw i32 %113, %108
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %108) #9
  %115 = sext i32 %114 to i64
  %116 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %115, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %113) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %107) #9
  br label %117

117:                                              ; preds = %80, %77, %73
  %118 = phi i32 [ 0, %73 ], [ 1, %77 ], [ 1, %80 ]
  ret i32 %118
}

; Function Attrs: nounwind uwtable
define i32 @jpt_read_VBAS_info(%struct.opj_cio*, i32) #0 {
  %3 = tail call i32 @cio_read(%struct.opj_cio* %0, i32 1) #9
  %4 = trunc i32 %3 to i8
  %5 = icmp slt i8 %4, 0
  %6 = shl i32 %1, 7
  %7 = and i32 %3, 127
  %8 = or i32 %7, %6
  br i1 %5, label %9, label %17

9:                                                ; preds = %9, %2
  %10 = phi i32 [ %16, %9 ], [ %8, %2 ]
  %11 = tail call i32 @cio_read(%struct.opj_cio* %0, i32 1) #9
  %12 = trunc i32 %11 to i8
  %13 = icmp slt i8 %12, 0
  %14 = shl i32 %10, 7
  %15 = and i32 %11, 127
  %16 = or i32 %15, %14
  br i1 %13, label %9, label %17

17:                                               ; preds = %9, %2
  %18 = phi i32 [ %8, %2 ], [ %16, %9 ]
  ret i32 %18
}

; Function Attrs: norecurse nounwind uwtable writeonly
define void @jpt_init_msg_header(%struct.opj_jpt_msg_header* nocapture) #3 {
  %2 = bitcast %struct.opj_jpt_msg_header* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 28, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind uwtable writeonly
define void @jpt_reinit_msg_header(%struct.opj_jpt_msg_header* nocapture) #3 {
  %2 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %0, i64 0, i32 0
  store i32 0, i32* %2, align 4, !tbaa !429
  %3 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %0, i64 0, i32 1
  store i32 0, i32* %3, align 4, !tbaa !430
  %4 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %0, i64 0, i32 4
  store i32 0, i32* %4, align 4, !tbaa !431
  %5 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %0, i64 0, i32 5
  store i32 0, i32* %5, align 4, !tbaa !246
  ret void
}

; Function Attrs: nounwind uwtable
define void @jpt_read_msg_header(%struct.opj_common_struct*, %struct.opj_cio*, %struct.opj_jpt_msg_header* nocapture) #0 {
  %4 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %2, i64 0, i32 0
  store i32 0, i32* %4, align 4, !tbaa !429
  %5 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %2, i64 0, i32 1
  store i32 0, i32* %5, align 4, !tbaa !430
  %6 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %2, i64 0, i32 4
  store i32 0, i32* %6, align 4, !tbaa !431
  %7 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %2, i64 0, i32 5
  store i32 0, i32* %7, align 4, !tbaa !246
  %8 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %9 = lshr i32 %8, 5
  %10 = and i32 %9, 3
  switch i32 %10, label %15 [
    i32 0, label %11
    i32 1, label %16
    i32 2, label %13
    i32 3, label %14
  ]

11:                                               ; preds = %3
  %12 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %0, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.29, i64 0, i64 0)) #9
  br label %16

13:                                               ; preds = %3
  br label %16

14:                                               ; preds = %3
  br label %16

15:                                               ; preds = %3
  unreachable

16:                                               ; preds = %14, %13, %11, %3
  %17 = phi i32 [ 1, %14 ], [ 1, %13 ], [ 0, %11 ], [ 0, %3 ]
  %18 = phi i32 [ 1, %14 ], [ 0, %13 ], [ 0, %11 ], [ 0, %3 ]
  %19 = and i32 %8, 16
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %22, label %21

21:                                               ; preds = %16
  store i32 1, i32* %5, align 4, !tbaa !430
  br label %22

22:                                               ; preds = %21, %16
  %23 = and i32 %8, 15
  %24 = load i32, i32* %4, align 4, !tbaa !429
  %25 = or i32 %24, %23
  store i32 %25, i32* %4, align 4, !tbaa !429
  %26 = trunc i32 %8 to i8
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %45

28:                                               ; preds = %22
  %29 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %30 = trunc i32 %29 to i8
  %31 = icmp slt i8 %30, 0
  %32 = shl i32 %25, 7
  %33 = and i32 %29, 127
  %34 = or i32 %33, %32
  br i1 %31, label %35, label %43

35:                                               ; preds = %35, %28
  %36 = phi i32 [ %42, %35 ], [ %34, %28 ]
  %37 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %38 = trunc i32 %37 to i8
  %39 = icmp slt i8 %38, 0
  %40 = shl i32 %36, 7
  %41 = and i32 %37, 127
  %42 = or i32 %41, %40
  br i1 %39, label %35, label %43

43:                                               ; preds = %35, %28
  %44 = phi i32 [ %34, %28 ], [ %42, %35 ]
  store i32 %44, i32* %4, align 4, !tbaa !429
  br label %45

45:                                               ; preds = %43, %22
  %46 = icmp eq i32 %17, 1
  br i1 %46, label %47, label %63

47:                                               ; preds = %45
  %48 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %2, i64 0, i32 2
  store i32 0, i32* %48, align 4, !tbaa !244
  %49 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %50 = trunc i32 %49 to i8
  %51 = icmp slt i8 %50, 0
  %52 = and i32 %49, 127
  br i1 %51, label %53, label %61

53:                                               ; preds = %53, %47
  %54 = phi i32 [ %60, %53 ], [ %52, %47 ]
  %55 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %56 = trunc i32 %55 to i8
  %57 = icmp slt i8 %56, 0
  %58 = shl i32 %54, 7
  %59 = and i32 %55, 127
  %60 = or i32 %59, %58
  br i1 %57, label %53, label %61

61:                                               ; preds = %53, %47
  %62 = phi i32 [ %52, %47 ], [ %60, %53 ]
  store i32 %62, i32* %48, align 4, !tbaa !244
  br label %63

63:                                               ; preds = %61, %45
  %64 = icmp eq i32 %18, 1
  br i1 %64, label %65, label %81

65:                                               ; preds = %63
  %66 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %2, i64 0, i32 3
  store i32 0, i32* %66, align 4, !tbaa !432
  %67 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %68 = trunc i32 %67 to i8
  %69 = icmp slt i8 %68, 0
  %70 = and i32 %67, 127
  br i1 %69, label %71, label %79

71:                                               ; preds = %71, %65
  %72 = phi i32 [ %78, %71 ], [ %70, %65 ]
  %73 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %74 = trunc i32 %73 to i8
  %75 = icmp slt i8 %74, 0
  %76 = shl i32 %72, 7
  %77 = and i32 %73, 127
  %78 = or i32 %77, %76
  br i1 %75, label %71, label %79

79:                                               ; preds = %71, %65
  %80 = phi i32 [ %70, %65 ], [ %78, %71 ]
  store i32 %80, i32* %66, align 4, !tbaa !432
  br label %81

81:                                               ; preds = %79, %63
  %82 = load i32, i32* %6, align 4, !tbaa !431
  %83 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %84 = trunc i32 %83 to i8
  %85 = icmp slt i8 %84, 0
  %86 = shl i32 %82, 7
  %87 = and i32 %83, 127
  %88 = or i32 %87, %86
  br i1 %85, label %89, label %97

89:                                               ; preds = %89, %81
  %90 = phi i32 [ %96, %89 ], [ %88, %81 ]
  %91 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %92 = trunc i32 %91 to i8
  %93 = icmp slt i8 %92, 0
  %94 = shl i32 %90, 7
  %95 = and i32 %91, 127
  %96 = or i32 %95, %94
  br i1 %93, label %89, label %97

97:                                               ; preds = %89, %81
  %98 = phi i32 [ %88, %81 ], [ %96, %89 ]
  store i32 %98, i32* %6, align 4, !tbaa !431
  %99 = load i32, i32* %7, align 4, !tbaa !246
  %100 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %101 = trunc i32 %100 to i8
  %102 = icmp slt i8 %101, 0
  %103 = shl i32 %99, 7
  %104 = and i32 %100, 127
  %105 = or i32 %104, %103
  br i1 %102, label %106, label %114

106:                                              ; preds = %106, %97
  %107 = phi i32 [ %113, %106 ], [ %105, %97 ]
  %108 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %109 = trunc i32 %108 to i8
  %110 = icmp slt i8 %109, 0
  %111 = shl i32 %107, 7
  %112 = and i32 %108, 127
  %113 = or i32 %112, %111
  br i1 %110, label %106, label %114

114:                                              ; preds = %106, %97
  %115 = phi i32 [ %105, %97 ], [ %113, %106 ]
  store i32 %115, i32* %7, align 4, !tbaa !246
  %116 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %2, i64 0, i32 2
  %117 = load i32, i32* %116, align 4, !tbaa !244
  %118 = and i32 %117, 1
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %136, label %120

120:                                              ; preds = %114
  %121 = getelementptr inbounds %struct.opj_jpt_msg_header, %struct.opj_jpt_msg_header* %2, i64 0, i32 6
  store i32 0, i32* %121, align 4, !tbaa !433
  %122 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %123 = trunc i32 %122 to i8
  %124 = icmp slt i8 %123, 0
  %125 = and i32 %122, 127
  br i1 %124, label %126, label %134

126:                                              ; preds = %126, %120
  %127 = phi i32 [ %133, %126 ], [ %125, %120 ]
  %128 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %129 = trunc i32 %128 to i8
  %130 = icmp slt i8 %129, 0
  %131 = shl i32 %127, 7
  %132 = and i32 %128, 127
  %133 = or i32 %132, %131
  br i1 %130, label %126, label %134

134:                                              ; preds = %126, %120
  %135 = phi i32 [ %125, %120 ], [ %133, %126 ]
  store i32 %135, i32* %121, align 4, !tbaa !433
  br label %136

136:                                              ; preds = %134, %114
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @mct_encode(i32* noalias nocapture, i32* noalias nocapture, i32* noalias nocapture, i32) #4 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %103

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = icmp ult i32 %3, 4
  br i1 %8, label %85, label %9

9:                                                ; preds = %6
  %10 = and i64 %7, 4294967292
  %11 = add nsw i64 %10, -4
  %12 = lshr exact i64 %11, 2
  %13 = add nuw nsw i64 %12, 1
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %11, 0
  br i1 %15, label %61, label %16

16:                                               ; preds = %9
  %17 = sub nuw nsw i64 %13, %14
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %58, %18 ]
  %20 = phi i64 [ %17, %16 ], [ %59, %18 ]
  %21 = getelementptr inbounds i32, i32* %0, i64 %19
  %22 = bitcast i32* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 4, !tbaa !43
  %24 = getelementptr inbounds i32, i32* %1, i64 %19
  %25 = bitcast i32* %24 to <4 x i32>*
  %26 = load <4 x i32>, <4 x i32>* %25, align 4, !tbaa !43
  %27 = getelementptr inbounds i32, i32* %2, i64 %19
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 4, !tbaa !43
  %30 = shl <4 x i32> %26, <i32 1, i32 1, i32 1, i32 1>
  %31 = add nsw <4 x i32> %30, %23
  %32 = add nsw <4 x i32> %31, %29
  %33 = ashr <4 x i32> %32, <i32 2, i32 2, i32 2, i32 2>
  %34 = sub nsw <4 x i32> %29, %26
  %35 = sub nsw <4 x i32> %23, %26
  %36 = bitcast i32* %21 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %36, align 4, !tbaa !43
  %37 = bitcast i32* %24 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %37, align 4, !tbaa !43
  %38 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %38, align 4, !tbaa !43
  %39 = or i64 %19, 4
  %40 = getelementptr inbounds i32, i32* %0, i64 %39
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 4, !tbaa !43
  %43 = getelementptr inbounds i32, i32* %1, i64 %39
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !43
  %46 = getelementptr inbounds i32, i32* %2, i64 %39
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4, !tbaa !43
  %49 = shl <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  %50 = add nsw <4 x i32> %49, %42
  %51 = add nsw <4 x i32> %50, %48
  %52 = ashr <4 x i32> %51, <i32 2, i32 2, i32 2, i32 2>
  %53 = sub nsw <4 x i32> %48, %45
  %54 = sub nsw <4 x i32> %42, %45
  %55 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %55, align 4, !tbaa !43
  %56 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %56, align 4, !tbaa !43
  %57 = bitcast i32* %46 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %57, align 4, !tbaa !43
  %58 = add i64 %19, 8
  %59 = add i64 %20, -2
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %18, !llvm.loop !434

61:                                               ; preds = %18, %9
  %62 = phi i64 [ 0, %9 ], [ %58, %18 ]
  %63 = icmp eq i64 %14, 0
  br i1 %63, label %83, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds i32, i32* %0, i64 %62
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !tbaa !43
  %68 = getelementptr inbounds i32, i32* %1, i64 %62
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4, !tbaa !43
  %71 = getelementptr inbounds i32, i32* %2, i64 %62
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4, !tbaa !43
  %74 = shl <4 x i32> %70, <i32 1, i32 1, i32 1, i32 1>
  %75 = add nsw <4 x i32> %74, %67
  %76 = add nsw <4 x i32> %75, %73
  %77 = ashr <4 x i32> %76, <i32 2, i32 2, i32 2, i32 2>
  %78 = sub nsw <4 x i32> %73, %70
  %79 = sub nsw <4 x i32> %67, %70
  %80 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %80, align 4, !tbaa !43
  %81 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %81, align 4, !tbaa !43
  %82 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %82, align 4, !tbaa !43
  br label %83

83:                                               ; preds = %64, %61
  %84 = icmp eq i64 %10, %7
  br i1 %84, label %103, label %85

85:                                               ; preds = %83, %6
  %86 = phi i64 [ 0, %6 ], [ %10, %83 ]
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i64 [ %101, %87 ], [ %86, %85 ]
  %89 = getelementptr inbounds i32, i32* %0, i64 %88
  %90 = load i32, i32* %89, align 4, !tbaa !43
  %91 = getelementptr inbounds i32, i32* %1, i64 %88
  %92 = load i32, i32* %91, align 4, !tbaa !43
  %93 = getelementptr inbounds i32, i32* %2, i64 %88
  %94 = load i32, i32* %93, align 4, !tbaa !43
  %95 = shl i32 %92, 1
  %96 = add nsw i32 %95, %90
  %97 = add nsw i32 %96, %94
  %98 = ashr i32 %97, 2
  %99 = sub nsw i32 %94, %92
  %100 = sub nsw i32 %90, %92
  store i32 %98, i32* %89, align 4, !tbaa !43
  store i32 %99, i32* %91, align 4, !tbaa !43
  store i32 %100, i32* %93, align 4, !tbaa !43
  %101 = add nuw nsw i64 %88, 1
  %102 = icmp eq i64 %101, %7
  br i1 %102, label %103, label %87, !llvm.loop !435

103:                                              ; preds = %87, %83, %4
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @mct_decode(i32* noalias nocapture, i32* noalias nocapture, i32* noalias nocapture, i32) #4 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %99

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = icmp ult i32 %3, 4
  br i1 %8, label %82, label %9

9:                                                ; preds = %6
  %10 = and i64 %7, 4294967292
  %11 = add nsw i64 %10, -4
  %12 = lshr exact i64 %11, 2
  %13 = add nuw nsw i64 %12, 1
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %11, 0
  br i1 %15, label %59, label %16

16:                                               ; preds = %9
  %17 = sub nuw nsw i64 %13, %14
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %56, %18 ]
  %20 = phi i64 [ %17, %16 ], [ %57, %18 ]
  %21 = getelementptr inbounds i32, i32* %0, i64 %19
  %22 = bitcast i32* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 4, !tbaa !43
  %24 = getelementptr inbounds i32, i32* %1, i64 %19
  %25 = bitcast i32* %24 to <4 x i32>*
  %26 = load <4 x i32>, <4 x i32>* %25, align 4, !tbaa !43
  %27 = getelementptr inbounds i32, i32* %2, i64 %19
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 4, !tbaa !43
  %30 = add nsw <4 x i32> %29, %26
  %31 = ashr <4 x i32> %30, <i32 2, i32 2, i32 2, i32 2>
  %32 = sub nsw <4 x i32> %23, %31
  %33 = add nsw <4 x i32> %32, %29
  %34 = add nsw <4 x i32> %32, %26
  %35 = bitcast i32* %21 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %35, align 4, !tbaa !43
  %36 = bitcast i32* %24 to <4 x i32>*
  store <4 x i32> %32, <4 x i32>* %36, align 4, !tbaa !43
  %37 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %37, align 4, !tbaa !43
  %38 = or i64 %19, 4
  %39 = getelementptr inbounds i32, i32* %0, i64 %38
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !43
  %42 = getelementptr inbounds i32, i32* %1, i64 %38
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4, !tbaa !43
  %45 = getelementptr inbounds i32, i32* %2, i64 %38
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4, !tbaa !43
  %48 = add nsw <4 x i32> %47, %44
  %49 = ashr <4 x i32> %48, <i32 2, i32 2, i32 2, i32 2>
  %50 = sub nsw <4 x i32> %41, %49
  %51 = add nsw <4 x i32> %50, %47
  %52 = add nsw <4 x i32> %50, %44
  %53 = bitcast i32* %39 to <4 x i32>*
  store <4 x i32> %51, <4 x i32>* %53, align 4, !tbaa !43
  %54 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %54, align 4, !tbaa !43
  %55 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %55, align 4, !tbaa !43
  %56 = add i64 %19, 8
  %57 = add i64 %20, -2
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %18, !llvm.loop !436

59:                                               ; preds = %18, %9
  %60 = phi i64 [ 0, %9 ], [ %56, %18 ]
  %61 = icmp eq i64 %14, 0
  br i1 %61, label %80, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds i32, i32* %0, i64 %60
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4, !tbaa !43
  %66 = getelementptr inbounds i32, i32* %1, i64 %60
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4, !tbaa !43
  %69 = getelementptr inbounds i32, i32* %2, i64 %60
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4, !tbaa !43
  %72 = add nsw <4 x i32> %71, %68
  %73 = ashr <4 x i32> %72, <i32 2, i32 2, i32 2, i32 2>
  %74 = sub nsw <4 x i32> %65, %73
  %75 = add nsw <4 x i32> %74, %71
  %76 = add nsw <4 x i32> %74, %68
  %77 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %77, align 4, !tbaa !43
  %78 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %78, align 4, !tbaa !43
  %79 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %79, align 4, !tbaa !43
  br label %80

80:                                               ; preds = %62, %59
  %81 = icmp eq i64 %10, %7
  br i1 %81, label %99, label %82

82:                                               ; preds = %80, %6
  %83 = phi i64 [ 0, %6 ], [ %10, %80 ]
  br label %84

84:                                               ; preds = %84, %82
  %85 = phi i64 [ %97, %84 ], [ %83, %82 ]
  %86 = getelementptr inbounds i32, i32* %0, i64 %85
  %87 = load i32, i32* %86, align 4, !tbaa !43
  %88 = getelementptr inbounds i32, i32* %1, i64 %85
  %89 = load i32, i32* %88, align 4, !tbaa !43
  %90 = getelementptr inbounds i32, i32* %2, i64 %85
  %91 = load i32, i32* %90, align 4, !tbaa !43
  %92 = add nsw i32 %91, %89
  %93 = ashr i32 %92, 2
  %94 = sub nsw i32 %87, %93
  %95 = add nsw i32 %94, %91
  %96 = add nsw i32 %94, %89
  store i32 %95, i32* %86, align 4, !tbaa !43
  store i32 %94, i32* %88, align 4, !tbaa !43
  store i32 %96, i32* %90, align 4, !tbaa !43
  %97 = add nuw nsw i64 %85, 1
  %98 = icmp eq i64 %97, %7
  br i1 %98, label %99, label %84, !llvm.loop !437

99:                                               ; preds = %84, %80, %4
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @mct_getnorm(i32) #6 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [3 x double], [3 x double]* @mct_norms, i64 0, i64 %2
  %4 = load double, double* %3, align 8, !tbaa !68
  ret double %4
}

; Function Attrs: norecurse nounwind uwtable
define void @mct_encode_real(i32* noalias nocapture, i32* noalias nocapture, i32* noalias nocapture, i32) #4 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %72

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %6
  %9 = phi i64 [ 0, %6 ], [ %70, %8 ]
  %10 = getelementptr inbounds i32, i32* %0, i64 %9
  %11 = load i32, i32* %10, align 4, !tbaa !43
  %12 = getelementptr inbounds i32, i32* %1, i64 %9
  %13 = load i32, i32* %12, align 4, !tbaa !43
  %14 = getelementptr inbounds i32, i32* %2, i64 %9
  %15 = load i32, i32* %14, align 4, !tbaa !43
  %16 = sext i32 %11 to i64
  %17 = mul nsw i64 %16, 2449
  %18 = and i64 %17, 4096
  %19 = add nsw i64 %18, %17
  %20 = lshr i64 %19, 13
  %21 = trunc i64 %20 to i32
  %22 = sext i32 %13 to i64
  %23 = mul nsw i64 %22, 4809
  %24 = and i64 %23, 4096
  %25 = add nsw i64 %24, %23
  %26 = lshr i64 %25, 13
  %27 = trunc i64 %26 to i32
  %28 = add nsw i32 %27, %21
  %29 = sext i32 %15 to i64
  %30 = mul nsw i64 %29, 934
  %31 = and i64 %30, 4096
  %32 = add nsw i64 %31, %30
  %33 = lshr i64 %32, 13
  %34 = trunc i64 %33 to i32
  %35 = add nsw i32 %28, %34
  %36 = mul nsw i64 %16, 1382
  %37 = and i64 %36, 4096
  %38 = add nsw i64 %37, %36
  %39 = lshr i64 %38, 13
  %40 = trunc i64 %39 to i32
  %41 = mul nsw i64 %22, 2714
  %42 = and i64 %41, 4096
  %43 = add nsw i64 %42, %41
  %44 = lshr i64 %43, 13
  %45 = trunc i64 %44 to i32
  %46 = add i32 %45, %40
  %47 = shl nsw i64 %29, 12
  %48 = and i64 %47, 4096
  %49 = add nsw i64 %48, %47
  %50 = lshr i64 %49, 13
  %51 = trunc i64 %50 to i32
  %52 = sub i32 %51, %46
  %53 = shl nsw i64 %16, 12
  %54 = and i64 %53, 4096
  %55 = add nsw i64 %54, %53
  %56 = lshr i64 %55, 13
  %57 = trunc i64 %56 to i32
  %58 = mul nsw i64 %22, 3430
  %59 = and i64 %58, 4096
  %60 = add nsw i64 %59, %58
  %61 = lshr i64 %60, 13
  %62 = trunc i64 %61 to i32
  %63 = sub i32 %57, %62
  %64 = mul nsw i64 %29, 666
  %65 = and i64 %64, 4096
  %66 = add nsw i64 %65, %64
  %67 = lshr i64 %66, 13
  %68 = trunc i64 %67 to i32
  %69 = sub i32 %63, %68
  store i32 %35, i32* %10, align 4, !tbaa !43
  store i32 %52, i32* %12, align 4, !tbaa !43
  store i32 %69, i32* %14, align 4, !tbaa !43
  %70 = add nuw nsw i64 %9, 1
  %71 = icmp eq i64 %70, %7
  br i1 %71, label %72, label %8

72:                                               ; preds = %8, %4
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @mct_decode_real(float* noalias nocapture, float* noalias nocapture, float* noalias nocapture, i32) #8 {
  %5 = ashr i32 %3, 3
  %6 = icmp sgt i32 %3, 7
  br i1 %6, label %7, label %48

7:                                                ; preds = %7, %4
  %8 = phi float* [ %43, %7 ], [ %0, %4 ]
  %9 = phi float* [ %44, %7 ], [ %1, %4 ]
  %10 = phi float* [ %45, %7 ], [ %2, %4 ]
  %11 = phi i32 [ %46, %7 ], [ 0, %4 ]
  %12 = bitcast float* %8 to <4 x float>*
  %13 = load <4 x float>, <4 x float>* %12, align 16, !tbaa !15
  %14 = bitcast float* %9 to <4 x float>*
  %15 = load <4 x float>, <4 x float>* %14, align 16, !tbaa !15
  %16 = bitcast float* %10 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 16, !tbaa !15
  %18 = fmul <4 x float> %17, <float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000>
  %19 = fadd <4 x float> %13, %18
  %20 = fmul <4 x float> %15, <float 0x3FD60639E0000000, float 0x3FD60639E0000000, float 0x3FD60639E0000000, float 0x3FD60639E0000000>
  %21 = fsub <4 x float> %13, %20
  %22 = fmul <4 x float> %17, <float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000>
  %23 = fsub <4 x float> %21, %22
  %24 = fmul <4 x float> %15, <float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000>
  %25 = fadd <4 x float> %13, %24
  store <4 x float> %19, <4 x float>* %12, align 16, !tbaa !15
  store <4 x float> %23, <4 x float>* %14, align 16, !tbaa !15
  store <4 x float> %25, <4 x float>* %16, align 16, !tbaa !15
  %26 = getelementptr inbounds float, float* %8, i64 4
  %27 = getelementptr inbounds float, float* %9, i64 4
  %28 = getelementptr inbounds float, float* %10, i64 4
  %29 = bitcast float* %26 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 16, !tbaa !15
  %31 = bitcast float* %27 to <4 x float>*
  %32 = load <4 x float>, <4 x float>* %31, align 16, !tbaa !15
  %33 = bitcast float* %28 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 16, !tbaa !15
  %35 = fmul <4 x float> %34, <float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000>
  %36 = fadd <4 x float> %30, %35
  %37 = fmul <4 x float> %32, <float 0x3FD60639E0000000, float 0x3FD60639E0000000, float 0x3FD60639E0000000, float 0x3FD60639E0000000>
  %38 = fsub <4 x float> %30, %37
  %39 = fmul <4 x float> %34, <float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000>
  %40 = fsub <4 x float> %38, %39
  %41 = fmul <4 x float> %32, <float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000>
  %42 = fadd <4 x float> %30, %41
  store <4 x float> %36, <4 x float>* %29, align 16, !tbaa !15
  store <4 x float> %40, <4 x float>* %31, align 16, !tbaa !15
  store <4 x float> %42, <4 x float>* %33, align 16, !tbaa !15
  %43 = getelementptr inbounds float, float* %8, i64 8
  %44 = getelementptr inbounds float, float* %9, i64 8
  %45 = getelementptr inbounds float, float* %10, i64 8
  %46 = add nuw nsw i32 %11, 1
  %47 = icmp slt i32 %46, %5
  br i1 %47, label %7, label %48

48:                                               ; preds = %7, %4
  %49 = phi float* [ %2, %4 ], [ %45, %7 ]
  %50 = phi float* [ %1, %4 ], [ %44, %7 ]
  %51 = phi float* [ %0, %4 ], [ %43, %7 ]
  %52 = and i32 %3, 7
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %67, label %54

54:                                               ; preds = %48
  %55 = load float, float* %51, align 4, !tbaa !112
  %56 = load float, float* %50, align 4, !tbaa !112
  %57 = load float, float* %49, align 4, !tbaa !112
  %58 = fmul float %57, 0x3FF66E9780000000
  %59 = fadd float %55, %58
  %60 = fmul float %56, 0x3FD60639E0000000
  %61 = fsub float %55, %60
  %62 = fmul float %57, 0x3FE6DA3C20000000
  %63 = fsub float %61, %62
  %64 = fmul float %56, 0x3FFC5A1CA0000000
  %65 = fadd float %55, %64
  store float %59, float* %51, align 4, !tbaa !112
  store float %63, float* %50, align 4, !tbaa !112
  store float %65, float* %49, align 4, !tbaa !112
  %66 = icmp eq i32 %52, 1
  br i1 %66, label %67, label %68

67:                                               ; preds = %148, %132, %116, %100, %84, %68, %54, %48
  ret void

68:                                               ; preds = %54
  %69 = getelementptr inbounds float, float* %51, i64 1
  %70 = load float, float* %69, align 4, !tbaa !112
  %71 = getelementptr inbounds float, float* %50, i64 1
  %72 = load float, float* %71, align 4, !tbaa !112
  %73 = getelementptr inbounds float, float* %49, i64 1
  %74 = load float, float* %73, align 4, !tbaa !112
  %75 = fmul float %74, 0x3FF66E9780000000
  %76 = fadd float %70, %75
  %77 = fmul float %72, 0x3FD60639E0000000
  %78 = fsub float %70, %77
  %79 = fmul float %74, 0x3FE6DA3C20000000
  %80 = fsub float %78, %79
  %81 = fmul float %72, 0x3FFC5A1CA0000000
  %82 = fadd float %70, %81
  store float %76, float* %69, align 4, !tbaa !112
  store float %80, float* %71, align 4, !tbaa !112
  store float %82, float* %73, align 4, !tbaa !112
  %83 = icmp eq i32 %52, 2
  br i1 %83, label %67, label %84

84:                                               ; preds = %68
  %85 = getelementptr inbounds float, float* %51, i64 2
  %86 = load float, float* %85, align 4, !tbaa !112
  %87 = getelementptr inbounds float, float* %50, i64 2
  %88 = load float, float* %87, align 4, !tbaa !112
  %89 = getelementptr inbounds float, float* %49, i64 2
  %90 = load float, float* %89, align 4, !tbaa !112
  %91 = fmul float %90, 0x3FF66E9780000000
  %92 = fadd float %86, %91
  %93 = fmul float %88, 0x3FD60639E0000000
  %94 = fsub float %86, %93
  %95 = fmul float %90, 0x3FE6DA3C20000000
  %96 = fsub float %94, %95
  %97 = fmul float %88, 0x3FFC5A1CA0000000
  %98 = fadd float %86, %97
  store float %92, float* %85, align 4, !tbaa !112
  store float %96, float* %87, align 4, !tbaa !112
  store float %98, float* %89, align 4, !tbaa !112
  %99 = icmp eq i32 %52, 3
  br i1 %99, label %67, label %100

100:                                              ; preds = %84
  %101 = getelementptr inbounds float, float* %51, i64 3
  %102 = load float, float* %101, align 4, !tbaa !112
  %103 = getelementptr inbounds float, float* %50, i64 3
  %104 = load float, float* %103, align 4, !tbaa !112
  %105 = getelementptr inbounds float, float* %49, i64 3
  %106 = load float, float* %105, align 4, !tbaa !112
  %107 = fmul float %106, 0x3FF66E9780000000
  %108 = fadd float %102, %107
  %109 = fmul float %104, 0x3FD60639E0000000
  %110 = fsub float %102, %109
  %111 = fmul float %106, 0x3FE6DA3C20000000
  %112 = fsub float %110, %111
  %113 = fmul float %104, 0x3FFC5A1CA0000000
  %114 = fadd float %102, %113
  store float %108, float* %101, align 4, !tbaa !112
  store float %112, float* %103, align 4, !tbaa !112
  store float %114, float* %105, align 4, !tbaa !112
  %115 = icmp eq i32 %52, 4
  br i1 %115, label %67, label %116

116:                                              ; preds = %100
  %117 = getelementptr inbounds float, float* %51, i64 4
  %118 = load float, float* %117, align 4, !tbaa !112
  %119 = getelementptr inbounds float, float* %50, i64 4
  %120 = load float, float* %119, align 4, !tbaa !112
  %121 = getelementptr inbounds float, float* %49, i64 4
  %122 = load float, float* %121, align 4, !tbaa !112
  %123 = fmul float %122, 0x3FF66E9780000000
  %124 = fadd float %118, %123
  %125 = fmul float %120, 0x3FD60639E0000000
  %126 = fsub float %118, %125
  %127 = fmul float %122, 0x3FE6DA3C20000000
  %128 = fsub float %126, %127
  %129 = fmul float %120, 0x3FFC5A1CA0000000
  %130 = fadd float %118, %129
  store float %124, float* %117, align 4, !tbaa !112
  store float %128, float* %119, align 4, !tbaa !112
  store float %130, float* %121, align 4, !tbaa !112
  %131 = icmp eq i32 %52, 5
  br i1 %131, label %67, label %132

132:                                              ; preds = %116
  %133 = getelementptr inbounds float, float* %51, i64 5
  %134 = load float, float* %133, align 4, !tbaa !112
  %135 = getelementptr inbounds float, float* %50, i64 5
  %136 = load float, float* %135, align 4, !tbaa !112
  %137 = getelementptr inbounds float, float* %49, i64 5
  %138 = load float, float* %137, align 4, !tbaa !112
  %139 = fmul float %138, 0x3FF66E9780000000
  %140 = fadd float %134, %139
  %141 = fmul float %136, 0x3FD60639E0000000
  %142 = fsub float %134, %141
  %143 = fmul float %138, 0x3FE6DA3C20000000
  %144 = fsub float %142, %143
  %145 = fmul float %136, 0x3FFC5A1CA0000000
  %146 = fadd float %134, %145
  store float %140, float* %133, align 4, !tbaa !112
  store float %144, float* %135, align 4, !tbaa !112
  store float %146, float* %137, align 4, !tbaa !112
  %147 = icmp eq i32 %52, 6
  br i1 %147, label %67, label %148

148:                                              ; preds = %132
  %149 = getelementptr inbounds float, float* %51, i64 6
  %150 = load float, float* %149, align 4, !tbaa !112
  %151 = getelementptr inbounds float, float* %50, i64 6
  %152 = load float, float* %151, align 4, !tbaa !112
  %153 = getelementptr inbounds float, float* %49, i64 6
  %154 = load float, float* %153, align 4, !tbaa !112
  %155 = fmul float %154, 0x3FF66E9780000000
  %156 = fadd float %150, %155
  %157 = fmul float %152, 0x3FD60639E0000000
  %158 = fsub float %150, %157
  %159 = fmul float %154, 0x3FE6DA3C20000000
  %160 = fsub float %158, %159
  %161 = fmul float %152, 0x3FFC5A1CA0000000
  %162 = fadd float %150, %161
  store float %156, float* %149, align 4, !tbaa !112
  store float %160, float* %151, align 4, !tbaa !112
  store float %162, float* %153, align 4, !tbaa !112
  br label %67
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @mct_getnorm_real(i32) #6 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [3 x double], [3 x double]* @mct_norms_real, i64 0, i64 %2
  %4 = load double, double* %3, align 8, !tbaa !68
  ret double %4
}

; Function Attrs: nounwind uwtable
define noalias %struct.opj_mqc* @mqc_create() #0 {
  %1 = tail call noalias i8* @malloc(i64 200) #9
  %2 = bitcast i8* %1 to %struct.opj_mqc*
  ret %struct.opj_mqc* %2
}

; Function Attrs: nounwind uwtable
define void @mqc_destroy(%struct.opj_mqc*) #0 {
  %2 = icmp eq %struct.opj_mqc* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.opj_mqc* %0 to i8*
  tail call void @free(i8* %4) #9
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @mqc_numbytes(%struct.opj_mqc* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  %3 = bitcast i8** %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !438
  %5 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 4
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !440
  %8 = sub i64 %4, %7
  %9 = trunc i64 %8 to i32
  ret i32 %9
}

; Function Attrs: norecurse nounwind uwtable
define void @mqc_init_enc(%struct.opj_mqc*, i8*) #4 {
  %3 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 0
  %4 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 7
  store %struct.opj_mqc_state** %3, %struct.opj_mqc_state*** %4, align 8, !tbaa !441
  %5 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 1
  store i32 32768, i32* %5, align 4, !tbaa !442
  %6 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  store i32 0, i32* %6, align 8, !tbaa !443
  %7 = getelementptr inbounds i8, i8* %1, i64 -1
  %8 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  store i8* %7, i8** %8, align 8, !tbaa !438
  %9 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  store i32 12, i32* %9, align 8, !tbaa !444
  %10 = load i8, i8* %7, align 1, !tbaa !15
  %11 = icmp eq i8 %10, -1
  %12 = select i1 %11, i32 13, i32 12
  store i32 %12, i32* %9, align 8
  %13 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 4
  store i8* %1, i8** %13, align 8, !tbaa !440
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @mqc_encode(%struct.opj_mqc* nocapture, i32) #4 {
  %3 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 7
  %4 = load %struct.opj_mqc_state**, %struct.opj_mqc_state*** %3, align 8, !tbaa !441
  %5 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4, align 8, !tbaa !24
  %6 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5, i64 0, i32 1
  %7 = load i32, i32* %6, align 4, !tbaa !445
  %8 = icmp eq i32 %7, %1
  %9 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5, i64 0, i32 0
  %10 = load i32, i32* %9, align 8, !tbaa !447
  %11 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4, !tbaa !442
  %13 = sub i32 %12, %10
  store i32 %13, i32* %11, align 4, !tbaa !442
  br i1 %8, label %14, label %98

14:                                               ; preds = %2
  %15 = trunc i32 %13 to i16
  %16 = icmp sgt i16 %15, -1
  br i1 %16, label %17, label %94

17:                                               ; preds = %14
  %18 = icmp ult i32 %13, %10
  br i1 %18, label %19, label %22

19:                                               ; preds = %17
  store i32 %10, i32* %11, align 4, !tbaa !442
  %20 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %21 = load i32, i32* %20, align 8, !tbaa !443
  br label %26

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %24 = load i32, i32* %23, align 8, !tbaa !443
  %25 = add i32 %24, %10
  store i32 %25, i32* %23, align 8, !tbaa !443
  br label %26

26:                                               ; preds = %22, %19
  %27 = phi i32 [ %25, %22 ], [ %21, %19 ]
  %28 = phi i32 [ %13, %22 ], [ %10, %19 ]
  %29 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5, i64 0, i32 2
  %30 = bitcast %struct.opj_mqc_state** %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !448
  %32 = bitcast %struct.opj_mqc_state** %4 to i64*
  store i64 %31, i64* %32, align 8, !tbaa !24
  %33 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %34 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  %35 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  %36 = load i32, i32* %34, align 8, !tbaa !444
  br label %37

37:                                               ; preds = %88, %26
  %38 = phi i32 [ %89, %88 ], [ %36, %26 ]
  %39 = phi i32 [ %90, %88 ], [ %27, %26 ]
  %40 = phi i32 [ %91, %88 ], [ %28, %26 ]
  %41 = shl i32 %40, 1
  store i32 %41, i32* %11, align 4, !tbaa !442
  %42 = shl i32 %39, 1
  store i32 %42, i32* %33, align 8, !tbaa !443
  %43 = add i32 %38, -1
  store i32 %43, i32* %34, align 8, !tbaa !444
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %88

45:                                               ; preds = %37
  %46 = load i8*, i8** %35, align 8, !tbaa !438
  %47 = load i8, i8* %46, align 1, !tbaa !15
  %48 = icmp eq i8 %47, -1
  br i1 %48, label %49, label %55

49:                                               ; preds = %45
  %50 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %50, i8** %35, align 8, !tbaa !438
  %51 = lshr i32 %39, 19
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %50, align 1, !tbaa !15
  %53 = load i32, i32* %33, align 8, !tbaa !443
  %54 = and i32 %53, 1048575
  br label %84

55:                                               ; preds = %45
  %56 = and i32 %39, 67108864
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %64

58:                                               ; preds = %55
  %59 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %59, i8** %35, align 8, !tbaa !438
  %60 = lshr i32 %39, 18
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %59, align 1, !tbaa !15
  %62 = load i32, i32* %33, align 8, !tbaa !443
  %63 = and i32 %62, 524287
  br label %84

64:                                               ; preds = %55
  %65 = add i8 %47, 1
  store i8 %65, i8* %46, align 1, !tbaa !15
  %66 = load i8*, i8** %35, align 8, !tbaa !438
  %67 = load i8, i8* %66, align 1, !tbaa !15
  %68 = icmp eq i8 %67, -1
  br i1 %68, label %69, label %77

69:                                               ; preds = %64
  %70 = load i32, i32* %33, align 8, !tbaa !443
  %71 = and i32 %70, 134217727
  store i32 %71, i32* %33, align 8, !tbaa !443
  %72 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %72, i8** %35, align 8, !tbaa !438
  %73 = lshr i32 %71, 20
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %72, align 1, !tbaa !15
  %75 = load i32, i32* %33, align 8, !tbaa !443
  %76 = and i32 %75, 1048575
  br label %84

77:                                               ; preds = %64
  %78 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %78, i8** %35, align 8, !tbaa !438
  %79 = load i32, i32* %33, align 8, !tbaa !443
  %80 = lshr i32 %79, 19
  %81 = trunc i32 %80 to i8
  store i8 %81, i8* %78, align 1, !tbaa !15
  %82 = load i32, i32* %33, align 8, !tbaa !443
  %83 = and i32 %82, 524287
  br label %84

84:                                               ; preds = %77, %69, %58, %49
  %85 = phi i32 [ %83, %77 ], [ %76, %69 ], [ %63, %58 ], [ %54, %49 ]
  %86 = phi i32 [ 8, %77 ], [ 7, %69 ], [ 8, %58 ], [ 7, %49 ]
  store i32 %85, i32* %33, align 8, !tbaa !443
  store i32 %86, i32* %34, align 8, !tbaa !444
  %87 = load i32, i32* %11, align 4, !tbaa !442
  br label %88

88:                                               ; preds = %84, %37
  %89 = phi i32 [ %43, %37 ], [ %86, %84 ]
  %90 = phi i32 [ %42, %37 ], [ %85, %84 ]
  %91 = phi i32 [ %41, %37 ], [ %87, %84 ]
  %92 = trunc i32 %91 to i16
  %93 = icmp sgt i16 %92, -1
  br i1 %93, label %37, label %175

94:                                               ; preds = %14
  %95 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %96 = load i32, i32* %95, align 8, !tbaa !443
  %97 = add i32 %96, %10
  store i32 %97, i32* %95, align 8, !tbaa !443
  br label %175

98:                                               ; preds = %2
  %99 = icmp ult i32 %13, %10
  br i1 %99, label %100, label %104

100:                                              ; preds = %98
  %101 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %102 = load i32, i32* %101, align 8, !tbaa !443
  %103 = add i32 %102, %10
  store i32 %103, i32* %101, align 8, !tbaa !443
  br label %107

104:                                              ; preds = %98
  store i32 %10, i32* %11, align 4, !tbaa !442
  %105 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %106 = load i32, i32* %105, align 8, !tbaa !443
  br label %107

107:                                              ; preds = %104, %100
  %108 = phi i32 [ %106, %104 ], [ %103, %100 ]
  %109 = phi i32 [ %10, %104 ], [ %13, %100 ]
  %110 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5, i64 0, i32 3
  %111 = bitcast %struct.opj_mqc_state** %110 to i64*
  %112 = load i64, i64* %111, align 8, !tbaa !449
  %113 = bitcast %struct.opj_mqc_state** %4 to i64*
  store i64 %112, i64* %113, align 8, !tbaa !24
  %114 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %115 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  %116 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  %117 = load i32, i32* %115, align 8, !tbaa !444
  br label %118

118:                                              ; preds = %169, %107
  %119 = phi i32 [ %170, %169 ], [ %117, %107 ]
  %120 = phi i32 [ %171, %169 ], [ %108, %107 ]
  %121 = phi i32 [ %172, %169 ], [ %109, %107 ]
  %122 = shl i32 %121, 1
  store i32 %122, i32* %11, align 4, !tbaa !442
  %123 = shl i32 %120, 1
  store i32 %123, i32* %114, align 8, !tbaa !443
  %124 = add i32 %119, -1
  store i32 %124, i32* %115, align 8, !tbaa !444
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %169

126:                                              ; preds = %118
  %127 = load i8*, i8** %116, align 8, !tbaa !438
  %128 = load i8, i8* %127, align 1, !tbaa !15
  %129 = icmp eq i8 %128, -1
  br i1 %129, label %130, label %136

130:                                              ; preds = %126
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  store i8* %131, i8** %116, align 8, !tbaa !438
  %132 = lshr i32 %120, 19
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %131, align 1, !tbaa !15
  %134 = load i32, i32* %114, align 8, !tbaa !443
  %135 = and i32 %134, 1048575
  br label %165

136:                                              ; preds = %126
  %137 = and i32 %120, 67108864
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %145

139:                                              ; preds = %136
  %140 = getelementptr inbounds i8, i8* %127, i64 1
  store i8* %140, i8** %116, align 8, !tbaa !438
  %141 = lshr i32 %120, 18
  %142 = trunc i32 %141 to i8
  store i8 %142, i8* %140, align 1, !tbaa !15
  %143 = load i32, i32* %114, align 8, !tbaa !443
  %144 = and i32 %143, 524287
  br label %165

145:                                              ; preds = %136
  %146 = add i8 %128, 1
  store i8 %146, i8* %127, align 1, !tbaa !15
  %147 = load i8*, i8** %116, align 8, !tbaa !438
  %148 = load i8, i8* %147, align 1, !tbaa !15
  %149 = icmp eq i8 %148, -1
  br i1 %149, label %150, label %158

150:                                              ; preds = %145
  %151 = load i32, i32* %114, align 8, !tbaa !443
  %152 = and i32 %151, 134217727
  store i32 %152, i32* %114, align 8, !tbaa !443
  %153 = getelementptr inbounds i8, i8* %147, i64 1
  store i8* %153, i8** %116, align 8, !tbaa !438
  %154 = lshr i32 %152, 20
  %155 = trunc i32 %154 to i8
  store i8 %155, i8* %153, align 1, !tbaa !15
  %156 = load i32, i32* %114, align 8, !tbaa !443
  %157 = and i32 %156, 1048575
  br label %165

158:                                              ; preds = %145
  %159 = getelementptr inbounds i8, i8* %147, i64 1
  store i8* %159, i8** %116, align 8, !tbaa !438
  %160 = load i32, i32* %114, align 8, !tbaa !443
  %161 = lshr i32 %160, 19
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %159, align 1, !tbaa !15
  %163 = load i32, i32* %114, align 8, !tbaa !443
  %164 = and i32 %163, 524287
  br label %165

165:                                              ; preds = %158, %150, %139, %130
  %166 = phi i32 [ %164, %158 ], [ %157, %150 ], [ %144, %139 ], [ %135, %130 ]
  %167 = phi i32 [ 8, %158 ], [ 7, %150 ], [ 8, %139 ], [ 7, %130 ]
  store i32 %166, i32* %114, align 8, !tbaa !443
  store i32 %167, i32* %115, align 8, !tbaa !444
  %168 = load i32, i32* %11, align 4, !tbaa !442
  br label %169

169:                                              ; preds = %165, %118
  %170 = phi i32 [ %124, %118 ], [ %167, %165 ]
  %171 = phi i32 [ %123, %118 ], [ %166, %165 ]
  %172 = phi i32 [ %122, %118 ], [ %168, %165 ]
  %173 = trunc i32 %172 to i16
  %174 = icmp sgt i16 %173, -1
  br i1 %174, label %118, label %175

175:                                              ; preds = %169, %94, %88
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @mqc_flush(%struct.opj_mqc* nocapture) #4 {
  %2 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8, !tbaa !443
  %4 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4, !tbaa !442
  %6 = add i32 %5, %3
  %7 = or i32 %3, 65535
  %8 = icmp ult i32 %7, %6
  %9 = add nsw i32 %7, -32768
  %10 = select i1 %8, i32 %7, i32 %9
  %11 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 8, !tbaa !444
  %13 = shl i32 %10, %12
  store i32 %13, i32* %2, align 8, !tbaa !443
  %14 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  %15 = load i8*, i8** %14, align 8, !tbaa !438
  %16 = load i8, i8* %15, align 1, !tbaa !15
  %17 = icmp eq i8 %16, -1
  br i1 %17, label %18, label %21

18:                                               ; preds = %1
  %19 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %19, i8** %14, align 8, !tbaa !438
  %20 = lshr i32 %13, 20
  br label %41

21:                                               ; preds = %1
  %22 = and i32 %13, 134217728
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %25, i8** %14, align 8, !tbaa !438
  %26 = lshr i32 %13, 19
  br label %41

27:                                               ; preds = %21
  %28 = add i8 %16, 1
  store i8 %28, i8* %15, align 1, !tbaa !15
  %29 = load i8*, i8** %14, align 8, !tbaa !438
  %30 = load i8, i8* %29, align 1, !tbaa !15
  %31 = icmp eq i8 %30, -1
  br i1 %31, label %32, label %37

32:                                               ; preds = %27
  %33 = load i32, i32* %2, align 8, !tbaa !443
  %34 = and i32 %33, 134217727
  store i32 %34, i32* %2, align 8, !tbaa !443
  %35 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %35, i8** %14, align 8, !tbaa !438
  %36 = lshr i32 %34, 20
  br label %41

37:                                               ; preds = %27
  %38 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %38, i8** %14, align 8, !tbaa !438
  %39 = load i32, i32* %2, align 8, !tbaa !443
  %40 = lshr i32 %39, 19
  br label %41

41:                                               ; preds = %37, %32, %24, %18
  %42 = phi i32 [ %20, %18 ], [ %26, %24 ], [ %36, %32 ], [ %40, %37 ]
  %43 = phi i8* [ %19, %18 ], [ %25, %24 ], [ %35, %32 ], [ %38, %37 ]
  %44 = phi i32 [ 1048575, %18 ], [ 524287, %24 ], [ 1048575, %32 ], [ 524287, %37 ]
  %45 = phi i32 [ 7, %18 ], [ 8, %24 ], [ 7, %32 ], [ 8, %37 ]
  %46 = trunc i32 %42 to i8
  store i8 %46, i8* %43, align 1, !tbaa !15
  %47 = load i32, i32* %2, align 8, !tbaa !443
  %48 = and i32 %47, %44
  store i32 %48, i32* %2, align 8, !tbaa !443
  store i32 %45, i32* %11, align 8, !tbaa !444
  %49 = shl i32 %48, %45
  store i32 %49, i32* %2, align 8, !tbaa !443
  %50 = load i8*, i8** %14, align 8, !tbaa !438
  %51 = load i8, i8* %50, align 1, !tbaa !15
  %52 = icmp eq i8 %51, -1
  br i1 %52, label %53, label %56

53:                                               ; preds = %41
  %54 = getelementptr inbounds i8, i8* %50, i64 1
  store i8* %54, i8** %14, align 8, !tbaa !438
  %55 = lshr i32 %49, 20
  br label %76

56:                                               ; preds = %41
  %57 = and i32 %49, 134217728
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %56
  %60 = getelementptr inbounds i8, i8* %50, i64 1
  store i8* %60, i8** %14, align 8, !tbaa !438
  %61 = lshr i32 %49, 19
  br label %76

62:                                               ; preds = %56
  %63 = add i8 %51, 1
  store i8 %63, i8* %50, align 1, !tbaa !15
  %64 = load i8*, i8** %14, align 8, !tbaa !438
  %65 = load i8, i8* %64, align 1, !tbaa !15
  %66 = icmp eq i8 %65, -1
  br i1 %66, label %67, label %72

67:                                               ; preds = %62
  %68 = load i32, i32* %2, align 8, !tbaa !443
  %69 = and i32 %68, 134217727
  store i32 %69, i32* %2, align 8, !tbaa !443
  %70 = getelementptr inbounds i8, i8* %64, i64 1
  store i8* %70, i8** %14, align 8, !tbaa !438
  %71 = lshr i32 %69, 20
  br label %76

72:                                               ; preds = %62
  %73 = getelementptr inbounds i8, i8* %64, i64 1
  store i8* %73, i8** %14, align 8, !tbaa !438
  %74 = load i32, i32* %2, align 8, !tbaa !443
  %75 = lshr i32 %74, 19
  br label %76

76:                                               ; preds = %72, %67, %59, %53
  %77 = phi i32 [ %55, %53 ], [ %61, %59 ], [ %71, %67 ], [ %75, %72 ]
  %78 = phi i8* [ %54, %53 ], [ %60, %59 ], [ %70, %67 ], [ %73, %72 ]
  %79 = phi i32 [ 1048575, %53 ], [ 524287, %59 ], [ 1048575, %67 ], [ 524287, %72 ]
  %80 = phi i32 [ 7, %53 ], [ 8, %59 ], [ 7, %67 ], [ 8, %72 ]
  %81 = trunc i32 %77 to i8
  store i8 %81, i8* %78, align 1, !tbaa !15
  %82 = load i32, i32* %2, align 8, !tbaa !443
  %83 = and i32 %82, %79
  store i32 %83, i32* %2, align 8, !tbaa !443
  store i32 %80, i32* %11, align 8, !tbaa !444
  %84 = load i8*, i8** %14, align 8, !tbaa !438
  %85 = load i8, i8* %84, align 1, !tbaa !15
  %86 = icmp eq i8 %85, -1
  br i1 %86, label %89, label %87

87:                                               ; preds = %76
  %88 = getelementptr inbounds i8, i8* %84, i64 1
  store i8* %88, i8** %14, align 8, !tbaa !438
  br label %89

89:                                               ; preds = %87, %76
  ret void
}

; Function Attrs: norecurse nounwind uwtable writeonly
define void @mqc_bypass_init_enc(%struct.opj_mqc* nocapture) #3 {
  %2 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8, !tbaa !443
  %3 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  store i32 8, i32* %3, align 8, !tbaa !444
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @mqc_bypass_enc(%struct.opj_mqc* nocapture, i32) #4 {
  %3 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8, !tbaa !444
  %5 = add i32 %4, -1
  store i32 %5, i32* %3, align 8, !tbaa !444
  %6 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8, !tbaa !443
  %8 = shl i32 %1, %5
  %9 = add i32 %7, %8
  store i32 %9, i32* %6, align 8, !tbaa !443
  %10 = icmp eq i32 %5, 0
  br i1 %10, label %11, label %20

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8, !tbaa !438
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %14, i8** %12, align 8, !tbaa !438
  %15 = trunc i32 %9 to i8
  store i8 %15, i8* %14, align 1, !tbaa !15
  store i32 8, i32* %3, align 8, !tbaa !444
  %16 = load i8*, i8** %12, align 8, !tbaa !438
  %17 = load i8, i8* %16, align 1, !tbaa !15
  %18 = icmp eq i8 %17, -1
  %19 = select i1 %18, i32 7, i32 8
  store i32 %19, i32* %3, align 8
  store i32 0, i32* %6, align 8, !tbaa !443
  br label %20

20:                                               ; preds = %11, %2
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define i32 @mqc_bypass_flush_enc(%struct.opj_mqc* nocapture) #4 {
  %2 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8, !tbaa !444
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %48, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8, !tbaa !443
  %8 = add i32 %3, -1
  %9 = and i32 %3, 3
  %10 = icmp ult i32 %8, 3
  br i1 %10, label %25, label %11

11:                                               ; preds = %5
  %12 = sub i32 %3, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i32 [ %7, %11 ], [ %22, %13 ]
  %15 = phi i32 [ %3, %11 ], [ %20, %13 ]
  %16 = phi i32 [ %12, %11 ], [ %23, %13 ]
  %17 = add i32 %15, -2
  %18 = shl i32 1, %17
  %19 = add i32 %14, %18
  %20 = add i32 %15, -4
  %21 = shl i32 1, %20
  %22 = add i32 %19, %21
  %23 = add i32 %16, -4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %13

25:                                               ; preds = %13, %5
  %26 = phi i32 [ undef, %5 ], [ %22, %13 ]
  %27 = phi i32 [ %7, %5 ], [ %22, %13 ]
  %28 = phi i32 [ %3, %5 ], [ %20, %13 ]
  %29 = icmp eq i32 %9, 0
  br i1 %29, label %42, label %30

30:                                               ; preds = %30, %25
  %31 = phi i32 [ %37, %30 ], [ %27, %25 ]
  %32 = phi i32 [ %39, %30 ], [ 0, %25 ]
  %33 = phi i32 [ %35, %30 ], [ %28, %25 ]
  %34 = phi i32 [ %40, %30 ], [ %9, %25 ]
  %35 = add i32 %33, -1
  %36 = shl i32 %32, %35
  %37 = add i32 %31, %36
  %38 = and i32 %32, 1
  %39 = xor i32 %38, 1
  %40 = add i32 %34, -1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %30, !llvm.loop !450

42:                                               ; preds = %30, %25
  %43 = phi i32 [ %26, %25 ], [ %37, %30 ]
  %44 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  %45 = load i8*, i8** %44, align 8, !tbaa !438
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %46, i8** %44, align 8, !tbaa !438
  %47 = trunc i32 %43 to i8
  store i8 %47, i8* %46, align 1, !tbaa !15
  store i32 8, i32* %2, align 8, !tbaa !444
  store i32 0, i32* %6, align 8, !tbaa !443
  br label %48

48:                                               ; preds = %42, %1
  ret i32 1
}

; Function Attrs: norecurse nounwind uwtable writeonly
define void @mqc_reset_enc(%struct.opj_mqc*) #3 {
  %2 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 0
  %3 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 1
  %4 = bitcast %struct.opj_mqc_state** %3 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %4, align 8, !tbaa !24
  %5 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 3
  %6 = bitcast %struct.opj_mqc_state** %5 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %6, align 8, !tbaa !24
  %7 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 5
  %8 = bitcast %struct.opj_mqc_state** %7 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %8, align 8, !tbaa !24
  %9 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 7
  %10 = bitcast %struct.opj_mqc_state** %9 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %10, align 8, !tbaa !24
  %11 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 9
  %12 = bitcast %struct.opj_mqc_state** %11 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %12, align 8, !tbaa !24
  %13 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 11
  %14 = bitcast %struct.opj_mqc_state** %13 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %14, align 8, !tbaa !24
  %15 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 13
  %16 = bitcast %struct.opj_mqc_state** %15 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %16, align 8, !tbaa !24
  %17 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 15
  %18 = bitcast %struct.opj_mqc_state** %17 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %18, align 8, !tbaa !24
  %19 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 17
  %20 = bitcast %struct.opj_mqc_state** %19 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 6), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 92)>, <2 x %struct.opj_mqc_state*>* %20, align 8, !tbaa !24
  store %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 8), %struct.opj_mqc_state** %2, align 8, !tbaa !24
  ret void
}

; Function Attrs: norecurse nounwind uwtable writeonly
define void @mqc_resetstates(%struct.opj_mqc* nocapture) #3 {
  %2 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 0
  %3 = bitcast %struct.opj_mqc_state** %2 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %3, align 8, !tbaa !24
  %4 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 2
  %5 = bitcast %struct.opj_mqc_state** %4 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %5, align 8, !tbaa !24
  %6 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 4
  %7 = bitcast %struct.opj_mqc_state** %6 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %7, align 8, !tbaa !24
  %8 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 6
  %9 = bitcast %struct.opj_mqc_state** %8 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %9, align 8, !tbaa !24
  %10 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 8
  %11 = bitcast %struct.opj_mqc_state** %10 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %11, align 8, !tbaa !24
  %12 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 10
  %13 = bitcast %struct.opj_mqc_state** %12 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %13, align 8, !tbaa !24
  %14 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 12
  %15 = bitcast %struct.opj_mqc_state** %14 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %15, align 8, !tbaa !24
  %16 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 14
  %17 = bitcast %struct.opj_mqc_state** %16 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %17, align 8, !tbaa !24
  %18 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 16
  %19 = bitcast %struct.opj_mqc_state** %18 to <2 x %struct.opj_mqc_state*>*
  store <2 x %struct.opj_mqc_state*> <%struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0)>, <2 x %struct.opj_mqc_state*>* %19, align 8, !tbaa !24
  %20 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 18
  store %struct.opj_mqc_state* getelementptr inbounds ([94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 0), %struct.opj_mqc_state** %20, align 8, !tbaa !24
  ret void
}

; Function Attrs: norecurse nounwind uwtable writeonly
define void @mqc_setstate(%struct.opj_mqc* nocapture, i32, i32, i32) #3 {
  %5 = shl i32 %3, 1
  %6 = add nsw i32 %5, %2
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [94 x %struct.opj_mqc_state], [94 x %struct.opj_mqc_state]* @mqc_states, i64 0, i64 %7
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 %9
  store %struct.opj_mqc_state* %8, %struct.opj_mqc_state** %10, align 8, !tbaa !24
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define i32 @mqc_restart_enc(%struct.opj_mqc* nocapture) #4 {
  %2 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8, !tbaa !444
  %4 = sub i32 12, %3
  %5 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8, !tbaa !443
  %7 = shl i32 %6, %3
  %8 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  br label %9

9:                                                ; preds = %47, %1
  %10 = phi i32 [ %7, %1 ], [ %49, %47 ]
  %11 = phi i32 [ %4, %1 ], [ %48, %47 ]
  store i32 %10, i32* %5, align 8, !tbaa !443
  %12 = icmp sgt i32 %11, 0
  %13 = load i8*, i8** %8, align 8, !tbaa !438
  %14 = load i8, i8* %13, align 1, !tbaa !15
  %15 = icmp eq i8 %14, -1
  br i1 %15, label %16, label %19

16:                                               ; preds = %9
  %17 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %17, i8** %8, align 8, !tbaa !438
  %18 = lshr i32 %10, 20
  br label %39

19:                                               ; preds = %9
  %20 = and i32 %10, 134217728
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %19
  %23 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %23, i8** %8, align 8, !tbaa !438
  %24 = lshr i32 %10, 19
  br label %39

25:                                               ; preds = %19
  %26 = add i8 %14, 1
  store i8 %26, i8* %13, align 1, !tbaa !15
  %27 = load i8*, i8** %8, align 8, !tbaa !438
  %28 = load i8, i8* %27, align 1, !tbaa !15
  %29 = icmp eq i8 %28, -1
  br i1 %29, label %30, label %35

30:                                               ; preds = %25
  %31 = load i32, i32* %5, align 8, !tbaa !443
  %32 = and i32 %31, 134217727
  store i32 %32, i32* %5, align 8, !tbaa !443
  %33 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %33, i8** %8, align 8, !tbaa !438
  %34 = lshr i32 %32, 20
  br label %39

35:                                               ; preds = %25
  %36 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %36, i8** %8, align 8, !tbaa !438
  %37 = load i32, i32* %5, align 8, !tbaa !443
  %38 = lshr i32 %37, 19
  br label %39

39:                                               ; preds = %35, %30, %22, %16
  %40 = phi i32 [ %18, %16 ], [ %24, %22 ], [ %34, %30 ], [ %38, %35 ]
  %41 = phi i8* [ %17, %16 ], [ %23, %22 ], [ %33, %30 ], [ %36, %35 ]
  %42 = phi i32 [ 1048575, %16 ], [ 524287, %22 ], [ 1048575, %30 ], [ 524287, %35 ]
  %43 = phi i32 [ 7, %16 ], [ 8, %22 ], [ 7, %30 ], [ 8, %35 ]
  %44 = trunc i32 %40 to i8
  store i8 %44, i8* %41, align 1, !tbaa !15
  %45 = load i32, i32* %5, align 8, !tbaa !443
  %46 = and i32 %45, %42
  store i32 %46, i32* %5, align 8, !tbaa !443
  store i32 %43, i32* %2, align 8, !tbaa !444
  br i1 %12, label %47, label %50

47:                                               ; preds = %39
  %48 = sub i32 %11, %43
  %49 = shl i32 %46, %43
  br label %9

50:                                               ; preds = %39
  ret i32 1
}

; Function Attrs: norecurse nounwind uwtable
define void @mqc_restart_init_enc(%struct.opj_mqc*) #4 {
  %2 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 0
  %3 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 7
  store %struct.opj_mqc_state** %2, %struct.opj_mqc_state*** %3, align 8, !tbaa !441
  %4 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 1
  store i32 32768, i32* %4, align 4, !tbaa !442
  %5 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  store i32 0, i32* %5, align 8, !tbaa !443
  %6 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  store i32 12, i32* %6, align 8, !tbaa !444
  %7 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8, !tbaa !438
  %9 = getelementptr inbounds i8, i8* %8, i64 -1
  store i8* %9, i8** %7, align 8, !tbaa !438
  %10 = load i8, i8* %9, align 1, !tbaa !15
  %11 = icmp eq i8 %10, -1
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  store i32 13, i32* %6, align 8, !tbaa !444
  br label %13

13:                                               ; preds = %12, %1
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @mqc_erterm_enc(%struct.opj_mqc* nocapture) #4 {
  %2 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8, !tbaa !444
  %4 = sub i32 12, %3
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %51

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %8 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  %9 = load i32, i32* %7, align 8, !tbaa !443
  br label %10

10:                                               ; preds = %41, %6
  %11 = phi i32 [ %9, %6 ], [ %48, %41 ]
  %12 = phi i32 [ %3, %6 ], [ %45, %41 ]
  %13 = phi i32 [ %4, %6 ], [ %49, %41 ]
  %14 = shl i32 %11, %12
  store i32 %14, i32* %7, align 8, !tbaa !443
  store i32 0, i32* %2, align 8, !tbaa !444
  %15 = load i8*, i8** %8, align 8, !tbaa !438
  %16 = load i8, i8* %15, align 1, !tbaa !15
  %17 = icmp eq i8 %16, -1
  br i1 %17, label %18, label %21

18:                                               ; preds = %10
  %19 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %19, i8** %8, align 8, !tbaa !438
  %20 = lshr i32 %14, 20
  br label %41

21:                                               ; preds = %10
  %22 = and i32 %14, 134217728
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %25, i8** %8, align 8, !tbaa !438
  %26 = lshr i32 %14, 19
  br label %41

27:                                               ; preds = %21
  %28 = add i8 %16, 1
  store i8 %28, i8* %15, align 1, !tbaa !15
  %29 = load i8*, i8** %8, align 8, !tbaa !438
  %30 = load i8, i8* %29, align 1, !tbaa !15
  %31 = icmp eq i8 %30, -1
  br i1 %31, label %32, label %37

32:                                               ; preds = %27
  %33 = load i32, i32* %7, align 8, !tbaa !443
  %34 = and i32 %33, 134217727
  store i32 %34, i32* %7, align 8, !tbaa !443
  %35 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %35, i8** %8, align 8, !tbaa !438
  %36 = lshr i32 %34, 20
  br label %41

37:                                               ; preds = %27
  %38 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %38, i8** %8, align 8, !tbaa !438
  %39 = load i32, i32* %7, align 8, !tbaa !443
  %40 = lshr i32 %39, 19
  br label %41

41:                                               ; preds = %37, %32, %24, %18
  %42 = phi i32 [ %20, %18 ], [ %26, %24 ], [ %36, %32 ], [ %40, %37 ]
  %43 = phi i8* [ %19, %18 ], [ %25, %24 ], [ %35, %32 ], [ %38, %37 ]
  %44 = phi i32 [ 1048575, %18 ], [ 524287, %24 ], [ 1048575, %32 ], [ 524287, %37 ]
  %45 = phi i32 [ 7, %18 ], [ 8, %24 ], [ 7, %32 ], [ 8, %37 ]
  %46 = trunc i32 %42 to i8
  store i8 %46, i8* %43, align 1, !tbaa !15
  %47 = load i32, i32* %7, align 8, !tbaa !443
  %48 = and i32 %47, %44
  store i32 %48, i32* %7, align 8, !tbaa !443
  store i32 %45, i32* %2, align 8, !tbaa !444
  %49 = sub i32 %13, %45
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %10, label %51

51:                                               ; preds = %41, %1
  %52 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  %53 = load i8*, i8** %52, align 8, !tbaa !438
  %54 = load i8, i8* %53, align 1, !tbaa !15
  %55 = icmp eq i8 %54, -1
  br i1 %55, label %86, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %58 = load i32, i32* %57, align 8, !tbaa !443
  %59 = and i32 %58, 134217728
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %56
  %62 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %62, i8** %52, align 8, !tbaa !438
  %63 = lshr i32 %58, 19
  br label %78

64:                                               ; preds = %56
  %65 = add i8 %54, 1
  store i8 %65, i8* %53, align 1, !tbaa !15
  %66 = load i8*, i8** %52, align 8, !tbaa !438
  %67 = load i8, i8* %66, align 1, !tbaa !15
  %68 = icmp eq i8 %67, -1
  br i1 %68, label %69, label %74

69:                                               ; preds = %64
  %70 = load i32, i32* %57, align 8, !tbaa !443
  %71 = and i32 %70, 134217727
  store i32 %71, i32* %57, align 8, !tbaa !443
  %72 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %72, i8** %52, align 8, !tbaa !438
  %73 = lshr i32 %71, 20
  br label %78

74:                                               ; preds = %64
  %75 = getelementptr inbounds i8, i8* %66, i64 1
  store i8* %75, i8** %52, align 8, !tbaa !438
  %76 = load i32, i32* %57, align 8, !tbaa !443
  %77 = lshr i32 %76, 19
  br label %78

78:                                               ; preds = %74, %69, %61
  %79 = phi i32 [ %77, %74 ], [ %73, %69 ], [ %63, %61 ]
  %80 = phi i8* [ %75, %74 ], [ %72, %69 ], [ %62, %61 ]
  %81 = phi i32 [ 524287, %74 ], [ 1048575, %69 ], [ 524287, %61 ]
  %82 = phi i32 [ 8, %74 ], [ 7, %69 ], [ 8, %61 ]
  %83 = trunc i32 %79 to i8
  store i8 %83, i8* %80, align 1, !tbaa !15
  %84 = load i32, i32* %57, align 8, !tbaa !443
  %85 = and i32 %84, %81
  store i32 %85, i32* %57, align 8, !tbaa !443
  store i32 %82, i32* %2, align 8, !tbaa !444
  br label %86

86:                                               ; preds = %78, %51
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @mqc_segmark_enc(%struct.opj_mqc*) #4 {
  %2 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 18
  %3 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 7
  store %struct.opj_mqc_state** %2, %struct.opj_mqc_state*** %3, align 8, !tbaa !441
  tail call void @mqc_encode(%struct.opj_mqc* %0, i32 1)
  tail call void @mqc_encode(%struct.opj_mqc* %0, i32 0)
  tail call void @mqc_encode(%struct.opj_mqc* %0, i32 1)
  tail call void @mqc_encode(%struct.opj_mqc* %0, i32 0)
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @mqc_init_dec(%struct.opj_mqc*, i8*, i32) #4 {
  %4 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 6, i64 0
  %5 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 7
  store %struct.opj_mqc_state** %4, %struct.opj_mqc_state*** %5, align 8, !tbaa !441
  %6 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 4
  store i8* %1, i8** %6, align 8, !tbaa !440
  %7 = sext i32 %2 to i64
  %8 = getelementptr inbounds i8, i8* %1, i64 %7
  %9 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 5
  store i8* %8, i8** %9, align 8, !tbaa !451
  %10 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  store i8* %1, i8** %10, align 8, !tbaa !438
  %11 = icmp eq i32 %2, 0
  br i1 %11, label %36, label %12

12:                                               ; preds = %3
  %13 = load i8, i8* %1, align 1, !tbaa !15
  %14 = zext i8 %13 to i32
  %15 = shl nuw nsw i32 %14, 16
  %16 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  store i32 %15, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 1
  %18 = icmp eq i32 %2, 1
  br i1 %18, label %22, label %19

19:                                               ; preds = %12
  %20 = load i8, i8* %17, align 1, !tbaa !15
  %21 = zext i8 %20 to i32
  br label %22

22:                                               ; preds = %19, %12
  %23 = phi i32 [ %21, %19 ], [ 255, %12 ]
  %24 = load i8, i8* %1, align 1, !tbaa !15
  %25 = icmp eq i8 %24, -1
  br i1 %25, label %26, label %33

26:                                               ; preds = %22
  %27 = icmp ugt i32 %23, 143
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = or i32 %15, 65280
  store i32 %29, i32* %16, align 8, !tbaa !443
  br label %38

30:                                               ; preds = %26
  store i8* %17, i8** %10, align 8, !tbaa !438
  %31 = shl nuw nsw i32 %23, 9
  %32 = add nuw nsw i32 %15, %31
  store i32 %32, i32* %16, align 8, !tbaa !443
  br label %38

33:                                               ; preds = %22
  store i8* %17, i8** %10, align 8, !tbaa !438
  %34 = shl nuw nsw i32 %23, 8
  %35 = or i32 %15, %34
  store i32 %35, i32* %16, align 8, !tbaa !443
  br label %38

36:                                               ; preds = %3
  %37 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  store i32 16776960, i32* %37, align 8, !tbaa !443
  br label %38

38:                                               ; preds = %36, %33, %30, %28
  %39 = phi i32 [ 8, %28 ], [ 7, %30 ], [ 8, %33 ], [ 8, %36 ]
  %40 = phi i32* [ %16, %28 ], [ %16, %30 ], [ %16, %33 ], [ %37, %36 ]
  %41 = phi i32 [ 1, %28 ], [ 0, %30 ], [ 1, %33 ], [ 1, %36 ]
  %42 = phi i32 [ %29, %28 ], [ %32, %30 ], [ %35, %33 ], [ 16776960, %36 ]
  %43 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  store i32 %39, i32* %43, align 8, !tbaa !444
  %44 = shl i32 %42, 7
  store i32 %44, i32* %40, align 8, !tbaa !443
  %45 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  store i32 %41, i32* %45, align 8, !tbaa !444
  %46 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 1
  store i32 32768, i32* %46, align 4, !tbaa !442
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define i32 @mqc_decode(%struct.opj_mqc* nocapture) #4 {
  %2 = getelementptr %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 7
  %3 = load %struct.opj_mqc_state**, %struct.opj_mqc_state*** %2, align 8, !tbaa !441
  %4 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3, align 8, !tbaa !24
  %5 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8, !tbaa !447
  %7 = getelementptr %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4, !tbaa !442
  %9 = sub i32 %8, %6
  store i32 %9, i32* %7, align 4, !tbaa !442
  %10 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 0
  %11 = load i32, i32* %10, align 8, !tbaa !443
  %12 = lshr i32 %11, 16
  %13 = icmp ult i32 %12, %6
  br i1 %13, label %14, label %71

14:                                               ; preds = %1
  %15 = icmp ult i32 %9, %6
  store i32 %6, i32* %7, align 4, !tbaa !442
  %16 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4, i64 0, i32 1
  %17 = load i32, i32* %16, align 4, !tbaa !445
  %18 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4, i64 0, i32 2
  %19 = sub nsw i32 1, %17
  %20 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4, i64 0, i32 3
  %21 = select i1 %15, %struct.opj_mqc_state** %18, %struct.opj_mqc_state** %20
  %22 = select i1 %15, i32 %17, i32 %19
  %23 = bitcast %struct.opj_mqc_state** %21 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !24
  %25 = bitcast %struct.opj_mqc_state** %3 to i64*
  store i64 %24, i64* %25, align 8, !tbaa !24
  %26 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  %27 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  %28 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 5
  %29 = load i32, i32* %26, align 8, !tbaa !444
  br label %30

30:                                               ; preds = %64, %14
  %31 = phi i32 [ %67, %64 ], [ %6, %14 ]
  %32 = phi i32 [ %68, %64 ], [ %11, %14 ]
  %33 = phi i32 [ %69, %64 ], [ %29, %14 ]
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %64

35:                                               ; preds = %30
  %36 = load i8*, i8** %27, align 8, !tbaa !438
  %37 = load i8*, i8** %28, align 8, !tbaa !451
  %38 = icmp eq i8* %36, %37
  br i1 %38, label %59, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds i8, i8* %36, i64 1
  %41 = icmp eq i8* %40, %37
  br i1 %41, label %45, label %42

42:                                               ; preds = %39
  %43 = load i8, i8* %40, align 1, !tbaa !15
  %44 = zext i8 %43 to i32
  br label %45

45:                                               ; preds = %42, %39
  %46 = phi i32 [ %44, %42 ], [ 255, %39 ]
  %47 = load i8, i8* %36, align 1, !tbaa !15
  %48 = icmp eq i8 %47, -1
  br i1 %48, label %49, label %56

49:                                               ; preds = %45
  %50 = icmp ugt i32 %46, 143
  br i1 %50, label %51, label %53

51:                                               ; preds = %49
  %52 = add i32 %32, 65280
  br label %61

53:                                               ; preds = %49
  store i8* %40, i8** %27, align 8, !tbaa !438
  %54 = shl nuw nsw i32 %46, 9
  %55 = add i32 %32, %54
  br label %61

56:                                               ; preds = %45
  store i8* %40, i8** %27, align 8, !tbaa !438
  %57 = shl nuw nsw i32 %46, 8
  %58 = add i32 %32, %57
  br label %61

59:                                               ; preds = %35
  %60 = add i32 %32, 65280
  br label %61

61:                                               ; preds = %59, %56, %53, %51
  %62 = phi i32 [ %60, %59 ], [ %58, %56 ], [ %55, %53 ], [ %52, %51 ]
  %63 = phi i32 [ 8, %59 ], [ 8, %56 ], [ 7, %53 ], [ 8, %51 ]
  store i32 %62, i32* %10, align 8, !tbaa !443
  store i32 %63, i32* %26, align 8, !tbaa !444
  br label %64

64:                                               ; preds = %61, %30
  %65 = phi i32 [ %33, %30 ], [ %63, %61 ]
  %66 = phi i32 [ %32, %30 ], [ %62, %61 ]
  %67 = shl i32 %31, 1
  store i32 %67, i32* %7, align 4, !tbaa !442
  %68 = shl i32 %66, 1
  store i32 %68, i32* %10, align 8, !tbaa !443
  %69 = add i32 %65, -1
  store i32 %69, i32* %26, align 8, !tbaa !444
  %70 = icmp ult i32 %67, 32768
  br i1 %70, label %30, label %136

71:                                               ; preds = %1
  %72 = shl i32 %6, 16
  %73 = sub i32 %11, %72
  store i32 %73, i32* %10, align 8, !tbaa !443
  %74 = trunc i32 %9 to i16
  %75 = icmp sgt i16 %74, -1
  br i1 %75, label %76, label %133

76:                                               ; preds = %71
  %77 = icmp ugt i32 %6, %9
  %78 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4, i64 0, i32 1
  %79 = load i32, i32* %78, align 4, !tbaa !445
  %80 = sub nsw i32 1, %79
  %81 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4, i64 0, i32 3
  %82 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4, i64 0, i32 2
  %83 = select i1 %77, %struct.opj_mqc_state** %81, %struct.opj_mqc_state** %82
  %84 = select i1 %77, i32 %80, i32 %79
  %85 = bitcast %struct.opj_mqc_state** %83 to i64*
  %86 = load i64, i64* %85, align 8, !tbaa !24
  %87 = bitcast %struct.opj_mqc_state** %3 to i64*
  store i64 %86, i64* %87, align 8, !tbaa !24
  %88 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 2
  %89 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 3
  %90 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %0, i64 0, i32 5
  %91 = load i32, i32* %88, align 8, !tbaa !444
  br label %92

92:                                               ; preds = %126, %76
  %93 = phi i32 [ %129, %126 ], [ %9, %76 ]
  %94 = phi i32 [ %130, %126 ], [ %73, %76 ]
  %95 = phi i32 [ %131, %126 ], [ %91, %76 ]
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %126

97:                                               ; preds = %92
  %98 = load i8*, i8** %89, align 8, !tbaa !438
  %99 = load i8*, i8** %90, align 8, !tbaa !451
  %100 = icmp eq i8* %98, %99
  br i1 %100, label %121, label %101

101:                                              ; preds = %97
  %102 = getelementptr inbounds i8, i8* %98, i64 1
  %103 = icmp eq i8* %102, %99
  br i1 %103, label %107, label %104

104:                                              ; preds = %101
  %105 = load i8, i8* %102, align 1, !tbaa !15
  %106 = zext i8 %105 to i32
  br label %107

107:                                              ; preds = %104, %101
  %108 = phi i32 [ %106, %104 ], [ 255, %101 ]
  %109 = load i8, i8* %98, align 1, !tbaa !15
  %110 = icmp eq i8 %109, -1
  br i1 %110, label %111, label %118

111:                                              ; preds = %107
  %112 = icmp ugt i32 %108, 143
  br i1 %112, label %113, label %115

113:                                              ; preds = %111
  %114 = add i32 %94, 65280
  br label %123

115:                                              ; preds = %111
  store i8* %102, i8** %89, align 8, !tbaa !438
  %116 = shl nuw nsw i32 %108, 9
  %117 = add i32 %94, %116
  br label %123

118:                                              ; preds = %107
  store i8* %102, i8** %89, align 8, !tbaa !438
  %119 = shl nuw nsw i32 %108, 8
  %120 = add i32 %94, %119
  br label %123

121:                                              ; preds = %97
  %122 = add i32 %94, 65280
  br label %123

123:                                              ; preds = %121, %118, %115, %113
  %124 = phi i32 [ %122, %121 ], [ %120, %118 ], [ %117, %115 ], [ %114, %113 ]
  %125 = phi i32 [ 8, %121 ], [ 8, %118 ], [ 7, %115 ], [ 8, %113 ]
  store i32 %124, i32* %10, align 8, !tbaa !443
  store i32 %125, i32* %88, align 8, !tbaa !444
  br label %126

126:                                              ; preds = %123, %92
  %127 = phi i32 [ %95, %92 ], [ %125, %123 ]
  %128 = phi i32 [ %94, %92 ], [ %124, %123 ]
  %129 = shl i32 %93, 1
  store i32 %129, i32* %7, align 4, !tbaa !442
  %130 = shl i32 %128, 1
  store i32 %130, i32* %10, align 8, !tbaa !443
  %131 = add i32 %127, -1
  store i32 %131, i32* %88, align 8, !tbaa !444
  %132 = icmp ult i32 %129, 32768
  br i1 %132, label %92, label %136

133:                                              ; preds = %71
  %134 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4, i64 0, i32 1
  %135 = load i32, i32* %134, align 4, !tbaa !445
  br label %136

136:                                              ; preds = %133, %126, %64
  %137 = phi i32 [ %135, %133 ], [ %22, %64 ], [ %84, %126 ]
  ret i32 %137
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @opj_version() #6 {
  ret i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i64 0, i64 0)
}

; Function Attrs: nounwind uwtable
define %struct.opj_common_struct* @opj_create_decompress(i32) #0 {
  %2 = tail call noalias i8* @calloc(i64 1, i64 48) #9
  %3 = bitcast i8* %2 to %struct.opj_common_struct*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds i8, i8* %2, i64 16
  %7 = bitcast i8* %6 to i32*
  store i32 1, i32* %7, align 8, !tbaa !452
  switch i32 %0, label %22 [
    i32 0, label %8
    i32 1, label %8
    i32 2, label %15
  ]

8:                                                ; preds = %5, %5
  %9 = bitcast i8* %2 to %struct.opj_common_struct*
  %10 = tail call %struct.opj_j2k* @j2k_create_decompress(%struct.opj_common_struct* nonnull %9) #9
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to %struct.opj_j2k**
  store %struct.opj_j2k* %10, %struct.opj_j2k** %12, align 8, !tbaa !454
  %13 = icmp eq %struct.opj_j2k* %10, null
  br i1 %13, label %14, label %23

14:                                               ; preds = %8
  tail call void @free(i8* nonnull %2) #9
  br label %26

15:                                               ; preds = %5
  %16 = bitcast i8* %2 to %struct.opj_common_struct*
  %17 = tail call %struct.opj_jp2* @jp2_create_decompress(%struct.opj_common_struct* nonnull %16) #9
  %18 = getelementptr inbounds i8, i8* %2, i64 32
  %19 = bitcast i8* %18 to %struct.opj_jp2**
  store %struct.opj_jp2* %17, %struct.opj_jp2** %19, align 8, !tbaa !455
  %20 = icmp eq %struct.opj_jp2* %17, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %15
  tail call void @free(i8* nonnull %2) #9
  br label %26

22:                                               ; preds = %5
  tail call void @free(i8* nonnull %2) #9
  br label %26

23:                                               ; preds = %15, %8
  %24 = getelementptr inbounds i8, i8* %2, i64 20
  %25 = bitcast i8* %24 to i32*
  store i32 %0, i32* %25, align 4, !tbaa !456
  br label %26

26:                                               ; preds = %23, %22, %21, %14, %1
  %27 = phi %struct.opj_common_struct* [ null, %22 ], [ %3, %23 ], [ null, %21 ], [ null, %14 ], [ null, %1 ]
  ret %struct.opj_common_struct* %27
}

; Function Attrs: nounwind uwtable
define void @opj_destroy_decompress(%struct.opj_common_struct*) #0 {
  %2 = icmp eq %struct.opj_common_struct* %0, null
  br i1 %2, label %16, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4, !tbaa !456
  switch i32 %5, label %14 [
    i32 0, label %6
    i32 1, label %6
    i32 2, label %10
  ]

6:                                                ; preds = %3, %3
  %7 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to %struct.opj_j2k**
  %9 = load %struct.opj_j2k*, %struct.opj_j2k** %8, align 8, !tbaa !454
  tail call void @j2k_destroy_decompress(%struct.opj_j2k* %9) #9
  br label %14

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 5
  %12 = bitcast i8** %11 to %struct.opj_jp2**
  %13 = load %struct.opj_jp2*, %struct.opj_jp2** %12, align 8, !tbaa !455
  tail call void @jp2_destroy_decompress(%struct.opj_jp2* %13) #9
  br label %14

14:                                               ; preds = %10, %6, %3
  %15 = bitcast %struct.opj_common_struct* %0 to i8*
  tail call void @free(i8* %15) #9
  br label %16

16:                                               ; preds = %14, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @opj_set_default_decoder_parameters(%struct.opj_dparameters*) #0 {
  %2 = icmp eq %struct.opj_dparameters* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_dparameters, %struct.opj_dparameters* %0, i64 0, i32 4
  %5 = bitcast %struct.opj_dparameters* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %5, i8 0, i64 8224, i1 false)
  store i32 -1, i32* %4, align 4, !tbaa !457
  %6 = getelementptr inbounds %struct.opj_dparameters, %struct.opj_dparameters* %0, i64 0, i32 5
  store i32 -1, i32* %6, align 4, !tbaa !458
  %7 = getelementptr inbounds %struct.opj_dparameters, %struct.opj_dparameters* %0, i64 0, i32 10
  store i32 0, i32* %7, align 4, !tbaa !424
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @opj_setup_decoder(%struct.opj_common_struct* readonly, %struct.opj_dparameters*) #0 {
  %3 = icmp ne %struct.opj_common_struct* %0, null
  %4 = icmp ne %struct.opj_dparameters* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %17

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4, !tbaa !456
  switch i32 %8, label %17 [
    i32 0, label %9
    i32 1, label %9
    i32 2, label %13
  ]

9:                                                ; preds = %6, %6
  %10 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 4
  %11 = bitcast i8** %10 to %struct.opj_j2k**
  %12 = load %struct.opj_j2k*, %struct.opj_j2k** %11, align 8, !tbaa !454
  tail call void @j2k_setup_decoder(%struct.opj_j2k* %12, %struct.opj_dparameters* nonnull %1) #9
  br label %17

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 5
  %15 = bitcast i8** %14 to %struct.opj_jp2**
  %16 = load %struct.opj_jp2*, %struct.opj_jp2** %15, align 8, !tbaa !455
  tail call void @jp2_setup_decoder(%struct.opj_jp2* %16, %struct.opj_dparameters* nonnull %1) #9
  br label %17

17:                                               ; preds = %13, %9, %6, %2
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.opj_image* @opj_decode(%struct.opj_common_struct* readonly, %struct.opj_cio*) #0 {
  %3 = icmp ne %struct.opj_common_struct* %0, null
  %4 = icmp ne %struct.opj_cio* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %24

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4, !tbaa !456
  switch i32 %8, label %24 [
    i32 0, label %9
    i32 1, label %14
    i32 2, label %19
  ]

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 4
  %11 = bitcast i8** %10 to %struct.opj_j2k**
  %12 = load %struct.opj_j2k*, %struct.opj_j2k** %11, align 8, !tbaa !454
  %13 = tail call %struct.opj_image* @j2k_decode(%struct.opj_j2k* %12, %struct.opj_cio* nonnull %1, %struct.opj_codestream_info* null) #9
  br label %24

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 4
  %16 = bitcast i8** %15 to %struct.opj_j2k**
  %17 = load %struct.opj_j2k*, %struct.opj_j2k** %16, align 8, !tbaa !454
  %18 = tail call %struct.opj_image* @j2k_decode_jpt_stream(%struct.opj_j2k* %17, %struct.opj_cio* nonnull %1, %struct.opj_codestream_info* null) #9
  br label %24

19:                                               ; preds = %6
  %20 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 5
  %21 = bitcast i8** %20 to %struct.opj_jp2**
  %22 = load %struct.opj_jp2*, %struct.opj_jp2** %21, align 8, !tbaa !455
  %23 = tail call %struct.opj_image* @opj_jp2_decode(%struct.opj_jp2* %22, %struct.opj_cio* nonnull %1, %struct.opj_codestream_info* null) #9
  br label %24

24:                                               ; preds = %19, %14, %9, %6, %2
  %25 = phi %struct.opj_image* [ %23, %19 ], [ %18, %14 ], [ %13, %9 ], [ null, %6 ], [ null, %2 ]
  ret %struct.opj_image* %25
}

; Function Attrs: nounwind uwtable
define %struct.opj_image* @opj_decode_with_info(%struct.opj_common_struct* readonly, %struct.opj_cio*, %struct.opj_codestream_info*) #0 {
  %4 = icmp ne %struct.opj_common_struct* %0, null
  %5 = icmp ne %struct.opj_cio* %1, null
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %25

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 4, !tbaa !456
  switch i32 %9, label %25 [
    i32 0, label %10
    i32 1, label %15
    i32 2, label %20
  ]

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 4
  %12 = bitcast i8** %11 to %struct.opj_j2k**
  %13 = load %struct.opj_j2k*, %struct.opj_j2k** %12, align 8, !tbaa !454
  %14 = tail call %struct.opj_image* @j2k_decode(%struct.opj_j2k* %13, %struct.opj_cio* nonnull %1, %struct.opj_codestream_info* %2) #9
  br label %25

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 4
  %17 = bitcast i8** %16 to %struct.opj_j2k**
  %18 = load %struct.opj_j2k*, %struct.opj_j2k** %17, align 8, !tbaa !454
  %19 = tail call %struct.opj_image* @j2k_decode_jpt_stream(%struct.opj_j2k* %18, %struct.opj_cio* nonnull %1, %struct.opj_codestream_info* %2) #9
  br label %25

20:                                               ; preds = %7
  %21 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 5
  %22 = bitcast i8** %21 to %struct.opj_jp2**
  %23 = load %struct.opj_jp2*, %struct.opj_jp2** %22, align 8, !tbaa !455
  %24 = tail call %struct.opj_image* @opj_jp2_decode(%struct.opj_jp2* %23, %struct.opj_cio* nonnull %1, %struct.opj_codestream_info* %2) #9
  br label %25

25:                                               ; preds = %20, %15, %10, %7, %3
  %26 = phi %struct.opj_image* [ %24, %20 ], [ %19, %15 ], [ %14, %10 ], [ null, %7 ], [ null, %3 ]
  ret %struct.opj_image* %26
}

; Function Attrs: nounwind uwtable
define %struct.opj_common_struct* @opj_create_compress(i32) #0 {
  %2 = tail call noalias i8* @calloc(i64 1, i64 48) #9
  %3 = bitcast i8* %2 to %struct.opj_common_struct*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %24, label %5

5:                                                ; preds = %1
  switch i32 %0, label %20 [
    i32 0, label %6
    i32 2, label %13
  ]

6:                                                ; preds = %5
  %7 = bitcast i8* %2 to %struct.opj_common_struct*
  %8 = tail call %struct.opj_j2k* @j2k_create_compress(%struct.opj_common_struct* nonnull %7) #9
  %9 = getelementptr inbounds i8, i8* %2, i64 24
  %10 = bitcast i8* %9 to %struct.opj_j2k**
  store %struct.opj_j2k* %8, %struct.opj_j2k** %10, align 8, !tbaa !459
  %11 = icmp eq %struct.opj_j2k* %8, null
  br i1 %11, label %12, label %21

12:                                               ; preds = %6
  tail call void @free(i8* nonnull %2) #9
  br label %24

13:                                               ; preds = %5
  %14 = bitcast i8* %2 to %struct.opj_common_struct*
  %15 = tail call %struct.opj_jp2* @jp2_create_compress(%struct.opj_common_struct* nonnull %14) #9
  %16 = getelementptr inbounds i8, i8* %2, i64 32
  %17 = bitcast i8* %16 to %struct.opj_jp2**
  store %struct.opj_jp2* %15, %struct.opj_jp2** %17, align 8, !tbaa !461
  %18 = icmp eq %struct.opj_jp2* %15, null
  br i1 %18, label %19, label %21

19:                                               ; preds = %13
  tail call void @free(i8* nonnull %2) #9
  br label %24

20:                                               ; preds = %5
  tail call void @free(i8* nonnull %2) #9
  br label %24

21:                                               ; preds = %13, %6
  %22 = getelementptr inbounds i8, i8* %2, i64 20
  %23 = bitcast i8* %22 to i32*
  store i32 %0, i32* %23, align 4, !tbaa !462
  br label %24

24:                                               ; preds = %21, %20, %19, %12, %1
  %25 = phi %struct.opj_common_struct* [ null, %20 ], [ %3, %21 ], [ null, %19 ], [ null, %12 ], [ null, %1 ]
  ret %struct.opj_common_struct* %25
}

; Function Attrs: nounwind uwtable
define void @opj_destroy_compress(%struct.opj_common_struct*) #0 {
  %2 = icmp eq %struct.opj_common_struct* %0, null
  br i1 %2, label %16, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4, !tbaa !462
  switch i32 %5, label %14 [
    i32 0, label %6
    i32 2, label %10
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to %struct.opj_j2k**
  %9 = load %struct.opj_j2k*, %struct.opj_j2k** %8, align 8, !tbaa !459
  tail call void @j2k_destroy_compress(%struct.opj_j2k* %9) #9
  br label %14

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 5
  %12 = bitcast i8** %11 to %struct.opj_jp2**
  %13 = load %struct.opj_jp2*, %struct.opj_jp2** %12, align 8, !tbaa !461
  tail call void @jp2_destroy_compress(%struct.opj_jp2* %13) #9
  br label %14

14:                                               ; preds = %10, %6, %3
  %15 = bitcast %struct.opj_common_struct* %0 to i8*
  tail call void @free(i8* %15) #9
  br label %16

16:                                               ; preds = %14, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @opj_set_default_encoder_parameters(%struct.opj_cparameters*) #0 {
  %2 = icmp eq %struct.opj_cparameters* %0, null
  br i1 %2, label %20, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 17
  %5 = bitcast %struct.opj_cparameters* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 18704, i1 false)
  store i32 6, i32* %4, align 8, !tbaa !263
  %6 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 52
  store i32 0, i32* %6, align 4, !tbaa !253
  %7 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 18
  store i32 64, i32* %7, align 4, !tbaa !310
  %8 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 19
  store i32 64, i32* %8, align 8, !tbaa !311
  %9 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 11
  store i32 0, i32* %9, align 4, !tbaa !305
  %10 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 22
  store i32 -1, i32* %10, align 4, !tbaa !314
  %11 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 33
  %12 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 53
  store i8 0, i8* %12, align 8, !tbaa !266
  %13 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 -1, i32 -1>, <4 x i32>* %13, align 4, !tbaa !43
  %14 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 15, i64 0
  store float 0.000000e+00, float* %14, align 8, !tbaa !112
  %15 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 14
  store i32 0, i32* %15, align 4, !tbaa !262
  %16 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 5
  store i32 0, i32* %16, align 4, !tbaa !255
  %17 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 6
  store i32 0, i32* %17, align 8, !tbaa !257
  %18 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 7
  store i32 0, i32* %18, align 4, !tbaa !259
  %19 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %0, i64 0, i32 56
  store i32 0, i32* %19, align 4, !tbaa !425
  br label %20

20:                                               ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @opj_setup_encoder(%struct.opj_common_struct* readonly, %struct.opj_cparameters*, %struct.opj_image*) #0 {
  %4 = icmp ne %struct.opj_common_struct* %0, null
  %5 = icmp ne %struct.opj_cparameters* %1, null
  %6 = and i1 %4, %5
  %7 = icmp ne %struct.opj_image* %2, null
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %20

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 4, !tbaa !462
  switch i32 %11, label %20 [
    i32 0, label %12
    i32 2, label %16
  ]

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 4
  %14 = bitcast i8** %13 to %struct.opj_j2k**
  %15 = load %struct.opj_j2k*, %struct.opj_j2k** %14, align 8, !tbaa !459
  tail call void @j2k_setup_encoder(%struct.opj_j2k* %15, %struct.opj_cparameters* nonnull %1, %struct.opj_image* nonnull %2) #9
  br label %20

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 5
  %18 = bitcast i8** %17 to %struct.opj_jp2**
  %19 = load %struct.opj_jp2*, %struct.opj_jp2** %18, align 8, !tbaa !461
  tail call void @jp2_setup_encoder(%struct.opj_jp2* %19, %struct.opj_cparameters* nonnull %1, %struct.opj_image* nonnull %2) #9
  br label %20

20:                                               ; preds = %16, %12, %9, %3
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @opj_encode(%struct.opj_common_struct*, %struct.opj_cio*, %struct.opj_image*, i8* readnone) #0 {
  %5 = icmp eq i8* %3, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %4
  %7 = bitcast %struct.opj_common_struct* %0 to %struct.opj_common_struct*
  %8 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %7, i32 2, i8* getelementptr inbounds ([168 x i8], [168 x i8]* @.str.1.31, i64 0, i64 0)) #9
  br label %9

9:                                                ; preds = %6, %4
  %10 = icmp ne %struct.opj_common_struct* %0, null
  %11 = icmp ne %struct.opj_cio* %1, null
  %12 = and i1 %10, %11
  %13 = icmp ne %struct.opj_image* %2, null
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %28

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 3
  %17 = load i32, i32* %16, align 4, !tbaa !462
  switch i32 %17, label %28 [
    i32 0, label %18
    i32 2, label %23
  ]

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 4
  %20 = bitcast i8** %19 to %struct.opj_j2k**
  %21 = load %struct.opj_j2k*, %struct.opj_j2k** %20, align 8, !tbaa !459
  %22 = tail call i32 @j2k_encode(%struct.opj_j2k* %21, %struct.opj_cio* nonnull %1, %struct.opj_image* nonnull %2, %struct.opj_codestream_info* null) #9
  br label %28

23:                                               ; preds = %15
  %24 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 5
  %25 = bitcast i8** %24 to %struct.opj_jp2**
  %26 = load %struct.opj_jp2*, %struct.opj_jp2** %25, align 8, !tbaa !461
  %27 = tail call i32 @opj_jp2_encode(%struct.opj_jp2* %26, %struct.opj_cio* nonnull %1, %struct.opj_image* nonnull %2, %struct.opj_codestream_info* null) #9
  br label %28

28:                                               ; preds = %23, %18, %15, %9
  %29 = phi i32 [ %27, %23 ], [ %22, %18 ], [ 0, %15 ], [ 0, %9 ]
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define i32 @opj_encode_with_info(%struct.opj_common_struct* readonly, %struct.opj_cio*, %struct.opj_image*, %struct.opj_codestream_info*) #0 {
  %5 = icmp ne %struct.opj_common_struct* %0, null
  %6 = icmp ne %struct.opj_cio* %1, null
  %7 = and i1 %5, %6
  %8 = icmp ne %struct.opj_image* %2, null
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %23

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 4, !tbaa !462
  switch i32 %12, label %23 [
    i32 0, label %13
    i32 2, label %18
  ]

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 4
  %15 = bitcast i8** %14 to %struct.opj_j2k**
  %16 = load %struct.opj_j2k*, %struct.opj_j2k** %15, align 8, !tbaa !459
  %17 = tail call i32 @j2k_encode(%struct.opj_j2k* %16, %struct.opj_cio* nonnull %1, %struct.opj_image* nonnull %2, %struct.opj_codestream_info* %3) #9
  br label %23

18:                                               ; preds = %10
  %19 = getelementptr inbounds %struct.opj_common_struct, %struct.opj_common_struct* %0, i64 0, i32 5
  %20 = bitcast i8** %19 to %struct.opj_jp2**
  %21 = load %struct.opj_jp2*, %struct.opj_jp2** %20, align 8, !tbaa !461
  %22 = tail call i32 @opj_jp2_encode(%struct.opj_jp2* %21, %struct.opj_cio* nonnull %1, %struct.opj_image* nonnull %2, %struct.opj_codestream_info* %3) #9
  br label %23

23:                                               ; preds = %18, %13, %10, %4
  %24 = phi i32 [ %22, %18 ], [ %17, %13 ], [ 0, %10 ], [ 0, %4 ]
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define void @opj_destroy_cstr_info(%struct.opj_codestream_info* readonly) #0 {
  %2 = icmp eq %struct.opj_codestream_info* %0, null
  br i1 %2, label %41, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %0, i64 0, i32 10
  %5 = load i32, i32* %4, align 4, !tbaa !216
  %6 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %0, i64 0, i32 11
  %7 = load i32, i32* %6, align 8, !tbaa !217
  %8 = mul nsw i32 %7, %5
  %9 = icmp sgt i32 %8, 0
  %10 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %0, i64 0, i32 21
  br i1 %9, label %11, label %32

11:                                               ; preds = %11, %3
  %12 = phi i64 [ %26, %11 ], [ 0, %3 ]
  %13 = load %struct.opj_tile_info*, %struct.opj_tile_info** %10, align 8, !tbaa !143
  %14 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %13, i64 %12
  %15 = bitcast %struct.opj_tile_info* %14 to i8**
  %16 = load i8*, i8** %15, align 8, !tbaa !463
  tail call void @free(i8* %16) #9
  %17 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %13, i64 %12, i32 9
  %18 = bitcast %struct.opj_packet_info** %17 to i8**
  %19 = load i8*, i8** %18, align 8, !tbaa !355
  tail call void @free(i8* %19) #9
  %20 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %13, i64 %12, i32 16
  %21 = bitcast %struct.opj_tp_info** %20 to i8**
  %22 = load i8*, i8** %21, align 8, !tbaa !147
  tail call void @free(i8* %22) #9
  %23 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %13, i64 %12, i32 13
  %24 = bitcast %struct.opj_marker_info_t** %23 to i8**
  %25 = load i8*, i8** %24, align 8, !tbaa !344
  tail call void @free(i8* %25) #9
  %26 = add nuw nsw i64 %12, 1
  %27 = load i32, i32* %4, align 4, !tbaa !216
  %28 = load i32, i32* %6, align 8, !tbaa !217
  %29 = mul nsw i32 %28, %27
  %30 = sext i32 %29 to i64
  %31 = icmp slt i64 %26, %30
  br i1 %31, label %11, label %32

32:                                               ; preds = %11, %3
  %33 = bitcast %struct.opj_tile_info** %10 to i8**
  %34 = load i8*, i8** %33, align 8, !tbaa !143
  tail call void @free(i8* %34) #9
  %35 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %0, i64 0, i32 16
  %36 = bitcast %struct.opj_marker_info_t** %35 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !332
  tail call void @free(i8* %37) #9
  %38 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %0, i64 0, i32 14
  %39 = bitcast i32** %38 to i8**
  %40 = load i8*, i8** %39, align 8, !tbaa !224
  tail call void @free(i8* %40) #9
  br label %41

41:                                               ; preds = %32, %1
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.opj_pi_iterator* @pi_create_decode(%struct.opj_image* nocapture readonly, %struct.opj_cp* nocapture readonly, i32) #0 {
  %4 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 28
  %5 = load %struct.opj_tcp*, %struct.opj_tcp** %4, align 8, !tbaa !139
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 6
  %8 = load i32, i32* %7, align 4, !tbaa !140
  %9 = add nsw i32 %8, 1
  %10 = sext i32 %9 to i64
  %11 = tail call noalias i8* @calloc(i64 %10, i64 248) #9
  %12 = bitcast i8* %11 to %struct.opj_pi_iterator*
  %13 = icmp eq i8* %11, null
  br i1 %13, label %262, label %14

14:                                               ; preds = %3
  %15 = load i32, i32* %7, align 4, !tbaa !140
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %262, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 18
  %19 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 13
  %20 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 15
  %21 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 0
  %22 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 14
  %23 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 16
  %24 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 1
  %25 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 2
  %26 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 3
  %27 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %28 = getelementptr inbounds i8, i8* %11, i64 200
  %29 = bitcast i8* %28 to i32*
  %30 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 15
  %31 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %32 = getelementptr inbounds i8, i8* %11, i64 216
  %33 = bitcast i8* %32 to i32*
  %34 = getelementptr inbounds i8, i8* %11, i64 220
  %35 = bitcast i8* %34 to i32*
  %36 = getelementptr inbounds i8, i8* %11, i64 224
  %37 = bitcast i8* %36 to i32*
  %38 = getelementptr inbounds i8, i8* %11, i64 228
  %39 = bitcast i8* %38 to i32*
  %40 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 3
  %41 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 7
  %42 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 2
  %43 = load i32, i32* %27, align 8, !tbaa !127
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %11, i64 8
  %46 = bitcast i8* %45 to i8**
  br label %47

47:                                               ; preds = %242, %17
  %48 = phi i64 [ %258, %242 ], [ 0, %17 ]
  %49 = load i32, i32* %18, align 8, !tbaa !136
  %50 = srem i32 %2, %49
  %51 = sdiv i32 %2, %49
  %52 = load i32, i32* %19, align 8, !tbaa !205
  %53 = load i32, i32* %20, align 8, !tbaa !203
  %54 = mul nsw i32 %53, %50
  %55 = add nsw i32 %54, %52
  %56 = load i32, i32* %21, align 8, !tbaa !201
  %57 = icmp sgt i32 %55, %56
  %58 = select i1 %57, i32 %55, i32 %56
  %59 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 14
  store i32 %58, i32* %59, align 8, !tbaa !464
  %60 = load i32, i32* %22, align 4, !tbaa !206
  %61 = load i32, i32* %23, align 4, !tbaa !204
  %62 = mul nsw i32 %61, %51
  %63 = add nsw i32 %62, %60
  %64 = load i32, i32* %24, align 4, !tbaa !202
  %65 = icmp sgt i32 %63, %64
  %66 = select i1 %65, i32 %63, i32 %64
  %67 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 15
  store i32 %66, i32* %67, align 4, !tbaa !466
  %68 = add nsw i32 %50, 1
  %69 = mul nsw i32 %53, %68
  %70 = add nsw i32 %69, %52
  %71 = load i32, i32* %25, align 8, !tbaa !199
  %72 = icmp slt i32 %70, %71
  %73 = select i1 %72, i32 %70, i32 %71
  %74 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 16
  store i32 %73, i32* %74, align 8, !tbaa !467
  %75 = add nsw i32 %51, 1
  %76 = mul nsw i32 %61, %75
  %77 = add nsw i32 %76, %60
  %78 = load i32, i32* %26, align 4, !tbaa !200
  %79 = icmp slt i32 %77, %78
  %80 = select i1 %79, i32 %77, i32 %78
  %81 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 17
  store i32 %80, i32* %81, align 4, !tbaa !468
  %82 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 12
  store i32 %43, i32* %82, align 8, !tbaa !469
  %83 = tail call noalias i8* @calloc(i64 %44, i64 24) #9
  %84 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 13
  %85 = bitcast %struct.opj_pi_comp** %84 to i8**
  store i8* %83, i8** %85, align 8, !tbaa !470
  %86 = icmp eq i8* %83, null
  %87 = bitcast i8* %83 to %struct.opj_pi_comp*
  br i1 %86, label %94, label %88

88:                                               ; preds = %47
  %89 = load i32, i32* %29, align 8, !tbaa !469
  %90 = icmp sgt i32 %89, 0
  br i1 %90, label %91, label %203

91:                                               ; preds = %88
  %92 = load %struct.opj_image_comp*, %struct.opj_image_comp** %31, align 8, !tbaa !128
  %93 = sext i32 %89 to i64
  br label %95

94:                                               ; preds = %47
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %12, %struct.opj_cp* nonnull %1, i32 %2)
  br label %262

95:                                               ; preds = %199, %91
  %96 = phi i64 [ 0, %91 ], [ %201, %199 ]
  %97 = phi i32 [ 0, %91 ], [ %131, %199 ]
  %98 = phi i32 [ 0, %91 ], [ %200, %199 ]
  %99 = load %struct.opj_tccp*, %struct.opj_tccp** %30, align 8, !tbaa !162
  %100 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %92, i64 %96, i32 0
  %101 = load i32, i32* %100, align 8, !tbaa !208
  %102 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %87, i64 %96, i32 0
  store i32 %101, i32* %102, align 8, !tbaa !471
  %103 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %92, i64 %96, i32 1
  %104 = load i32, i32* %103, align 4, !tbaa !209
  %105 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %87, i64 %96, i32 1
  store i32 %104, i32* %105, align 4, !tbaa !473
  %106 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %99, i64 %96, i32 1
  %107 = load i32, i32* %106, align 4, !tbaa !95
  %108 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %87, i64 %96, i32 2
  store i32 %107, i32* %108, align 8, !tbaa !474
  %109 = sext i32 %107 to i64
  %110 = tail call noalias i8* @calloc(i64 %109, i64 16) #9
  %111 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %87, i64 %96, i32 3
  %112 = bitcast %struct.opj_pi_resolution** %111 to i8**
  store i8* %110, i8** %112, align 8, !tbaa !475
  %113 = icmp eq i8* %110, null
  %114 = bitcast i8* %110 to %struct.opj_pi_resolution*
  br i1 %113, label %198, label %115

115:                                              ; preds = %95
  %116 = load i32, i32* %33, align 8, !tbaa !464
  %117 = add i32 %101, -1
  %118 = add i32 %117, %116
  %119 = sdiv i32 %118, %101
  %120 = load i32, i32* %35, align 4, !tbaa !466
  %121 = add i32 %104, -1
  %122 = add i32 %121, %120
  %123 = sdiv i32 %122, %104
  %124 = load i32, i32* %37, align 8, !tbaa !467
  %125 = add i32 %117, %124
  %126 = sdiv i32 %125, %101
  %127 = load i32, i32* %39, align 4, !tbaa !468
  %128 = add i32 %121, %127
  %129 = sdiv i32 %128, %104
  %130 = icmp sgt i32 %107, %97
  %131 = select i1 %130, i32 %107, i32 %97
  %132 = icmp sgt i32 %107, 0
  br i1 %132, label %133, label %199

133:                                              ; preds = %115
  %134 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %99, i64 %96, i32 0
  %135 = zext i32 %107 to i64
  br label %136

136:                                              ; preds = %184, %133
  %137 = phi i64 [ 0, %133 ], [ %195, %184 ]
  %138 = phi i32 [ 0, %133 ], [ %196, %184 ]
  %139 = phi i32 [ %98, %133 ], [ %194, %184 ]
  %140 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %114, i64 %137
  %141 = load i32, i32* %134, align 4, !tbaa !221
  %142 = and i32 %141, 1
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %150, label %144

144:                                              ; preds = %136
  %145 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %99, i64 %96, i32 10, i64 %137
  %146 = load i32, i32* %145, align 4, !tbaa !43
  %147 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %140, i64 0, i32 0
  store i32 %146, i32* %147, align 4, !tbaa !476
  %148 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %99, i64 %96, i32 11, i64 %137
  %149 = load i32, i32* %148, align 4, !tbaa !43
  br label %152

150:                                              ; preds = %136
  %151 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %140, i64 0, i32 0
  store i32 15, i32* %151, align 4, !tbaa !476
  br label %152

152:                                              ; preds = %150, %144
  %153 = phi i32 [ 15, %150 ], [ %146, %144 ]
  %154 = phi i32 [ 15, %150 ], [ %149, %144 ]
  %155 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %114, i64 %137, i32 1
  store i32 %154, i32* %155, align 4
  %156 = xor i32 %138, -1
  %157 = add i32 %107, %156
  %158 = shl nsw i32 -1, %157
  %159 = xor i32 %158, -1
  %160 = add i32 %119, %159
  %161 = ashr i32 %160, %157
  %162 = add i32 %123, %159
  %163 = ashr i32 %162, %157
  %164 = add i32 %126, %159
  %165 = ashr i32 %164, %157
  %166 = add i32 %129, %159
  %167 = ashr i32 %166, %157
  %168 = shl i32 -1, %154
  %169 = and i32 %168, %163
  %170 = shl i32 1, %154
  %171 = add i32 %167, -1
  %172 = add i32 %171, %170
  %173 = and i32 %172, %168
  %174 = icmp eq i32 %161, %165
  br i1 %174, label %184, label %175

175:                                              ; preds = %152
  %176 = add i32 %165, -1
  %177 = shl i32 1, %153
  %178 = add i32 %176, %177
  %179 = shl i32 -1, %153
  %180 = and i32 %178, %179
  %181 = and i32 %179, %161
  %182 = sub nsw i32 %180, %181
  %183 = ashr i32 %182, %153
  br label %184

184:                                              ; preds = %175, %152
  %185 = phi i32 [ %183, %175 ], [ 0, %152 ]
  %186 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %114, i64 %137, i32 2
  store i32 %185, i32* %186, align 4, !tbaa !478
  %187 = icmp eq i32 %163, %167
  %188 = sub nsw i32 %173, %169
  %189 = ashr i32 %188, %154
  %190 = select i1 %187, i32 0, i32 %189
  %191 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %114, i64 %137, i32 3
  store i32 %190, i32* %191, align 4, !tbaa !479
  %192 = mul nsw i32 %185, %190
  %193 = icmp sgt i32 %192, %139
  %194 = select i1 %193, i32 %192, i32 %139
  %195 = add nuw nsw i64 %137, 1
  %196 = add nuw nsw i32 %138, 1
  %197 = icmp eq i64 %195, %135
  br i1 %197, label %199, label %136

198:                                              ; preds = %95
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %12, %struct.opj_cp* %1, i32 %2)
  br label %262

199:                                              ; preds = %184, %115
  %200 = phi i32 [ %98, %115 ], [ %194, %184 ]
  %201 = add nuw nsw i64 %96, 1
  %202 = icmp slt i64 %201, %93
  br i1 %202, label %95, label %203

203:                                              ; preds = %199, %88
  %204 = phi i32 [ 0, %88 ], [ %200, %199 ]
  %205 = phi i32 [ 0, %88 ], [ %131, %199 ]
  %206 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 5
  store i32 1, i32* %206, align 4, !tbaa !480
  %207 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 4
  store i32 %204, i32* %207, align 8, !tbaa !481
  %208 = mul i32 %43, %204
  %209 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 3
  store i32 %208, i32* %209, align 4, !tbaa !482
  %210 = mul i32 %208, %205
  %211 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 2
  store i32 %210, i32* %211, align 8, !tbaa !483
  %212 = icmp eq i64 %48, 0
  br i1 %212, label %213, label %220

213:                                              ; preds = %203
  %214 = load i32, i32* %40, align 4, !tbaa !219
  %215 = mul i32 %210, %214
  %216 = sext i32 %215 to i64
  %217 = tail call noalias i8* @calloc(i64 %216, i64 2) #9
  store i8* %217, i8** %46, align 8, !tbaa !484
  %218 = icmp eq i8* %217, null
  br i1 %218, label %219, label %227

219:                                              ; preds = %213
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %12, %struct.opj_cp* %1, i32 %2)
  br label %262

220:                                              ; preds = %203
  %221 = add nsw i64 %48, -1
  %222 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %221, i32 1
  %223 = bitcast i16** %222 to i64*
  %224 = load i64, i64* %223, align 8, !tbaa !484
  %225 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 1
  %226 = bitcast i16** %225 to i64*
  store i64 %224, i64* %226, align 8, !tbaa !484
  br label %227

227:                                              ; preds = %220, %213
  %228 = load i32, i32* %41, align 8, !tbaa !212
  %229 = icmp eq i32 %228, 0
  %230 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 10
  store i32 1, i32* %230, align 8, !tbaa !485
  br i1 %229, label %242, label %231

231:                                              ; preds = %227
  %232 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 8, i64 %48, i32 0
  %233 = load i32, i32* %232, align 4, !tbaa !226
  %234 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 8, i64 %48, i32 1
  %235 = load i32, i32* %234, align 4, !tbaa !227
  %236 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 8, i64 %48, i32 2
  %237 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 8, i64 %48, i32 3
  %238 = load i32, i32* %237, align 4, !tbaa !229
  %239 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 8, i64 %48, i32 4
  %240 = load i32, i32* %239, align 4, !tbaa !230
  %241 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 8, i64 %48, i32 9
  br label %242

242:                                              ; preds = %231, %227
  %243 = phi i32 [ %233, %231 ], [ 0, %227 ]
  %244 = phi i32 [ %235, %231 ], [ 0, %227 ]
  %245 = phi i32* [ %236, %231 ], [ %40, %227 ]
  %246 = phi i32 [ %238, %231 ], [ %205, %227 ]
  %247 = phi i32 [ %240, %231 ], [ %43, %227 ]
  %248 = phi i32* [ %241, %231 ], [ %42, %227 ]
  %249 = load i32, i32* %248, align 4, !tbaa !15
  %250 = load i32, i32* %245, align 4, !tbaa !43
  %251 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 11, i32 0
  store i32 %243, i32* %251, align 4
  %252 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 11, i32 1
  store i32 %244, i32* %252, align 4
  %253 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 11, i32 2
  store i32 %250, i32* %253, align 4
  %254 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 11, i32 3
  store i32 %246, i32* %254, align 4
  %255 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 11, i32 4
  store i32 %247, i32* %255, align 4
  %256 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 11, i32 9
  store i32 %249, i32* %256, align 4
  %257 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %12, i64 %48, i32 11, i32 7
  store i32 %204, i32* %257, align 4, !tbaa !486
  %258 = add nuw nsw i64 %48, 1
  %259 = load i32, i32* %7, align 4, !tbaa !140
  %260 = sext i32 %259 to i64
  %261 = icmp slt i64 %48, %260
  br i1 %261, label %47, label %262

262:                                              ; preds = %242, %219, %198, %94, %14, %3
  %263 = phi %struct.opj_pi_iterator* [ null, %3 ], [ null, %198 ], [ null, %219 ], [ null, %94 ], [ %12, %14 ], [ %12, %242 ]
  ret %struct.opj_pi_iterator* %263
}

; Function Attrs: nounwind uwtable
define void @pi_destroy(%struct.opj_pi_iterator*, %struct.opj_cp* nocapture readonly, i32) #0 {
  %4 = icmp eq %struct.opj_pi_iterator* %0, null
  br i1 %4, label %60, label %5

5:                                                ; preds = %3
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 28
  %8 = load %struct.opj_tcp*, %struct.opj_tcp** %7, align 8, !tbaa !139
  %9 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %8, i64 %6, i32 6
  %10 = load i32, i32* %9, align 4, !tbaa !140
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %52, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12
  br label %14

14:                                               ; preds = %47, %12
  %15 = phi i32 [ %48, %47 ], [ %10, %12 ]
  %16 = phi i64 [ %49, %47 ], [ 0, %12 ]
  %17 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %16, i32 13
  %18 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %17, align 8, !tbaa !470
  %19 = icmp eq %struct.opj_pi_comp* %18, null
  br i1 %19, label %47, label %20

20:                                               ; preds = %14
  %21 = bitcast %struct.opj_pi_comp* %18 to i8*
  %22 = load i32, i32* %13, align 8, !tbaa !469
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %44

24:                                               ; preds = %39, %20
  %25 = phi i32 [ %35, %39 ], [ %22, %20 ]
  %26 = phi %struct.opj_pi_comp* [ %40, %39 ], [ %18, %20 ]
  %27 = phi i64 [ %36, %39 ], [ 0, %20 ]
  %28 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %26, i64 %27, i32 3
  %29 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %28, align 8, !tbaa !475
  %30 = icmp eq %struct.opj_pi_resolution* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %24
  %32 = bitcast %struct.opj_pi_resolution* %29 to i8*
  tail call void @free(i8* %32) #9
  %33 = load i32, i32* %13, align 8, !tbaa !469
  br label %34

34:                                               ; preds = %31, %24
  %35 = phi i32 [ %25, %24 ], [ %33, %31 ]
  %36 = add nuw nsw i64 %27, 1
  %37 = sext i32 %35 to i64
  %38 = icmp slt i64 %36, %37
  br i1 %38, label %39, label %41

39:                                               ; preds = %34
  %40 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %17, align 8, !tbaa !470
  br label %24

41:                                               ; preds = %34
  %42 = bitcast %struct.opj_pi_comp** %17 to i8**
  %43 = load i8*, i8** %42, align 8, !tbaa !470
  br label %44

44:                                               ; preds = %41, %20
  %45 = phi i8* [ %43, %41 ], [ %21, %20 ]
  tail call void @free(i8* %45) #9
  %46 = load i32, i32* %9, align 4, !tbaa !140
  br label %47

47:                                               ; preds = %44, %14
  %48 = phi i32 [ %15, %14 ], [ %46, %44 ]
  %49 = add nuw nsw i64 %16, 1
  %50 = sext i32 %48 to i64
  %51 = icmp slt i64 %16, %50
  br i1 %51, label %14, label %52

52:                                               ; preds = %47, %5
  %53 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %54 = load i16*, i16** %53, align 8, !tbaa !484
  %55 = icmp eq i16* %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %52
  %57 = bitcast i16* %54 to i8*
  tail call void @free(i8* %57) #9
  br label %58

58:                                               ; preds = %56, %52
  %59 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  tail call void @free(i8* %59) #9
  br label %60

60:                                               ; preds = %58, %3
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.opj_pi_iterator* @pi_initialise_encode(%struct.opj_image* nocapture readonly, %struct.opj_cp* nocapture readonly, i32, i32) #0 {
  %5 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 28
  %6 = load %struct.opj_tcp*, %struct.opj_tcp** %5, align 8, !tbaa !139
  %7 = sext i32 %2 to i64
  %8 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 6
  %9 = load i32, i32* %8, align 4, !tbaa !140
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = tail call noalias i8* @calloc(i64 %11, i64 248) #9
  %13 = bitcast i8* %12 to %struct.opj_pi_iterator*
  %14 = icmp eq i8* %12, null
  br i1 %14, label %342, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 4
  %17 = load i8, i8* %16, align 8, !tbaa !149
  store i8 %17, i8* %12, align 8, !tbaa !487
  %18 = load i32, i32* %8, align 4, !tbaa !140
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %342, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 18
  %22 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 13
  %23 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 15
  %24 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 0
  %25 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 14
  %26 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 16
  %27 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 1
  %28 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 2
  %29 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 3
  %30 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %31 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 15
  %32 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %33 = getelementptr inbounds i8, i8* %12, i64 200
  %34 = bitcast i8* %33 to i32*
  %35 = getelementptr inbounds i8, i8* %12, i64 208
  %36 = bitcast i8* %35 to %struct.opj_pi_comp**
  %37 = getelementptr inbounds i8, i8* %12, i64 240
  %38 = bitcast i8* %37 to i32*
  %39 = getelementptr inbounds i8, i8* %12, i64 244
  %40 = bitcast i8* %39 to i32*
  %41 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 3
  %42 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 7
  %43 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 0
  %44 = icmp eq i32 %3, 1
  %45 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 2
  %46 = load i32, i32* %30, align 8, !tbaa !127
  %47 = sext i32 %46 to i64
  %48 = icmp sgt i32 %46, 0
  %49 = getelementptr inbounds i8, i8* %12, i64 8
  %50 = bitcast i8* %49 to i8**
  br label %51

51:                                               ; preds = %324, %20
  %52 = phi i64 [ %338, %324 ], [ 0, %20 ]
  %53 = phi i32 [ %209, %324 ], [ 0, %20 ]
  %54 = phi i32 [ %208, %324 ], [ 0, %20 ]
  %55 = load i32, i32* %21, align 8, !tbaa !136
  %56 = srem i32 %2, %55
  %57 = sdiv i32 %2, %55
  %58 = load i32, i32* %22, align 8, !tbaa !205
  %59 = load i32, i32* %23, align 8, !tbaa !203
  %60 = mul nsw i32 %59, %56
  %61 = add nsw i32 %60, %58
  %62 = load i32, i32* %24, align 8, !tbaa !201
  %63 = icmp sgt i32 %61, %62
  %64 = select i1 %63, i32 %61, i32 %62
  %65 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 14
  store i32 %64, i32* %65, align 8, !tbaa !464
  %66 = load i32, i32* %25, align 4, !tbaa !206
  %67 = load i32, i32* %26, align 4, !tbaa !204
  %68 = mul nsw i32 %67, %57
  %69 = add nsw i32 %68, %66
  %70 = load i32, i32* %27, align 4, !tbaa !202
  %71 = icmp sgt i32 %69, %70
  %72 = select i1 %71, i32 %69, i32 %70
  %73 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 15
  store i32 %72, i32* %73, align 4, !tbaa !466
  %74 = add nsw i32 %56, 1
  %75 = mul nsw i32 %59, %74
  %76 = add nsw i32 %75, %58
  %77 = load i32, i32* %28, align 8, !tbaa !199
  %78 = icmp slt i32 %76, %77
  %79 = select i1 %78, i32 %76, i32 %77
  %80 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 16
  store i32 %79, i32* %80, align 8, !tbaa !467
  %81 = add nsw i32 %57, 1
  %82 = mul nsw i32 %67, %81
  %83 = add nsw i32 %82, %66
  %84 = load i32, i32* %29, align 4, !tbaa !200
  %85 = icmp slt i32 %83, %84
  %86 = select i1 %85, i32 %83, i32 %84
  %87 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 17
  store i32 %86, i32* %87, align 4, !tbaa !468
  %88 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 12
  store i32 %46, i32* %88, align 8, !tbaa !469
  %89 = tail call noalias i8* @calloc(i64 %47, i64 24) #9
  %90 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 13
  %91 = bitcast %struct.opj_pi_comp** %90 to i8**
  store i8* %89, i8** %91, align 8, !tbaa !470
  %92 = icmp eq i8* %89, null
  %93 = bitcast i8* %89 to %struct.opj_pi_comp*
  br i1 %92, label %97, label %94

94:                                               ; preds = %51
  br i1 %48, label %95, label %207

95:                                               ; preds = %94
  %96 = load %struct.opj_image_comp*, %struct.opj_image_comp** %32, align 8, !tbaa !128
  br label %98

97:                                               ; preds = %51
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %13, %struct.opj_cp* nonnull %1, i32 %2)
  br label %342

98:                                               ; preds = %203, %95
  %99 = phi i64 [ 0, %95 ], [ %205, %203 ]
  %100 = phi i32 [ %53, %95 ], [ %135, %203 ]
  %101 = phi i32 [ %54, %95 ], [ %204, %203 ]
  %102 = load %struct.opj_tccp*, %struct.opj_tccp** %31, align 8, !tbaa !162
  %103 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %96, i64 %99, i32 0
  %104 = load i32, i32* %103, align 8, !tbaa !208
  %105 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %93, i64 %99, i32 0
  store i32 %104, i32* %105, align 8, !tbaa !471
  %106 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %96, i64 %99, i32 1
  %107 = load i32, i32* %106, align 4, !tbaa !209
  %108 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %93, i64 %99, i32 1
  store i32 %107, i32* %108, align 4, !tbaa !473
  %109 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %102, i64 %99, i32 1
  %110 = load i32, i32* %109, align 4, !tbaa !95
  %111 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %93, i64 %99, i32 2
  store i32 %110, i32* %111, align 8, !tbaa !474
  %112 = sext i32 %110 to i64
  %113 = shl nsw i64 %112, 4
  %114 = tail call noalias i8* @malloc(i64 %113) #9
  %115 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %93, i64 %99, i32 3
  %116 = bitcast %struct.opj_pi_resolution** %115 to i8**
  store i8* %114, i8** %116, align 8, !tbaa !475
  %117 = icmp eq i8* %114, null
  %118 = bitcast i8* %114 to %struct.opj_pi_resolution*
  br i1 %117, label %202, label %119

119:                                              ; preds = %98
  %120 = load i32, i32* %65, align 8, !tbaa !464
  %121 = add i32 %104, -1
  %122 = add i32 %121, %120
  %123 = sdiv i32 %122, %104
  %124 = load i32, i32* %73, align 4, !tbaa !466
  %125 = add i32 %107, -1
  %126 = add i32 %125, %124
  %127 = sdiv i32 %126, %107
  %128 = load i32, i32* %80, align 8, !tbaa !467
  %129 = add i32 %121, %128
  %130 = sdiv i32 %129, %104
  %131 = load i32, i32* %87, align 4, !tbaa !468
  %132 = add i32 %125, %131
  %133 = sdiv i32 %132, %107
  %134 = icmp sgt i32 %110, %100
  %135 = select i1 %134, i32 %110, i32 %100
  %136 = icmp sgt i32 %110, 0
  br i1 %136, label %137, label %203

137:                                              ; preds = %119
  %138 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %102, i64 %99, i32 0
  %139 = zext i32 %110 to i64
  br label %140

140:                                              ; preds = %188, %137
  %141 = phi i64 [ 0, %137 ], [ %199, %188 ]
  %142 = phi i32 [ 0, %137 ], [ %200, %188 ]
  %143 = phi i32 [ %101, %137 ], [ %198, %188 ]
  %144 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %118, i64 %141
  %145 = load i32, i32* %138, align 4, !tbaa !221
  %146 = and i32 %145, 1
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %154, label %148

148:                                              ; preds = %140
  %149 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %102, i64 %99, i32 10, i64 %141
  %150 = load i32, i32* %149, align 4, !tbaa !43
  %151 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %144, i64 0, i32 0
  store i32 %150, i32* %151, align 4, !tbaa !476
  %152 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %102, i64 %99, i32 11, i64 %141
  %153 = load i32, i32* %152, align 4, !tbaa !43
  br label %156

154:                                              ; preds = %140
  %155 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %144, i64 0, i32 0
  store i32 15, i32* %155, align 4, !tbaa !476
  br label %156

156:                                              ; preds = %154, %148
  %157 = phi i32 [ 15, %154 ], [ %150, %148 ]
  %158 = phi i32 [ 15, %154 ], [ %153, %148 ]
  %159 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %118, i64 %141, i32 1
  store i32 %158, i32* %159, align 4
  %160 = xor i32 %142, -1
  %161 = add i32 %110, %160
  %162 = shl nsw i32 -1, %161
  %163 = xor i32 %162, -1
  %164 = add i32 %123, %163
  %165 = ashr i32 %164, %161
  %166 = add i32 %127, %163
  %167 = ashr i32 %166, %161
  %168 = add i32 %130, %163
  %169 = ashr i32 %168, %161
  %170 = add i32 %133, %163
  %171 = ashr i32 %170, %161
  %172 = shl i32 -1, %158
  %173 = and i32 %172, %167
  %174 = shl i32 1, %158
  %175 = add i32 %171, -1
  %176 = add i32 %175, %174
  %177 = and i32 %176, %172
  %178 = icmp eq i32 %165, %169
  br i1 %178, label %188, label %179

179:                                              ; preds = %156
  %180 = add i32 %169, -1
  %181 = shl i32 1, %157
  %182 = add i32 %180, %181
  %183 = shl i32 -1, %157
  %184 = and i32 %182, %183
  %185 = and i32 %183, %165
  %186 = sub nsw i32 %184, %185
  %187 = ashr i32 %186, %157
  br label %188

188:                                              ; preds = %179, %156
  %189 = phi i32 [ %187, %179 ], [ 0, %156 ]
  %190 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %118, i64 %141, i32 2
  store i32 %189, i32* %190, align 4, !tbaa !478
  %191 = icmp eq i32 %167, %171
  %192 = sub nsw i32 %177, %173
  %193 = ashr i32 %192, %158
  %194 = select i1 %191, i32 0, i32 %193
  %195 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %118, i64 %141, i32 3
  store i32 %194, i32* %195, align 4, !tbaa !479
  %196 = mul nsw i32 %189, %194
  %197 = icmp sgt i32 %196, %143
  %198 = select i1 %197, i32 %196, i32 %143
  %199 = add nuw nsw i64 %141, 1
  %200 = add nuw nsw i32 %142, 1
  %201 = icmp eq i64 %199, %139
  br i1 %201, label %203, label %140

202:                                              ; preds = %98
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %13, %struct.opj_cp* %1, i32 %2)
  br label %342

203:                                              ; preds = %188, %119
  %204 = phi i32 [ %101, %119 ], [ %198, %188 ]
  %205 = add nuw nsw i64 %99, 1
  %206 = icmp slt i64 %205, %47
  br i1 %206, label %98, label %207

207:                                              ; preds = %203, %94
  %208 = phi i32 [ %54, %94 ], [ %204, %203 ]
  %209 = phi i32 [ %53, %94 ], [ %135, %203 ]
  %210 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 5
  store i32 1, i32* %210, align 4, !tbaa !480
  %211 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 4
  store i32 %208, i32* %211, align 8, !tbaa !481
  %212 = mul nsw i32 %46, %208
  %213 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 3
  store i32 %212, i32* %213, align 4, !tbaa !482
  %214 = mul nsw i32 %212, %209
  %215 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 2
  store i32 %214, i32* %215, align 8, !tbaa !483
  %216 = load i32, i32* %34, align 8, !tbaa !469
  %217 = icmp sgt i32 %216, 0
  br i1 %217, label %218, label %265

218:                                              ; preds = %207
  %219 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %36, align 8, !tbaa !470
  %220 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 20
  %221 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 21
  %222 = sext i32 %216 to i64
  br label %223

223:                                              ; preds = %262, %218
  %224 = phi i64 [ 0, %218 ], [ %263, %262 ]
  %225 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %219, i64 %224, i32 2
  %226 = load i32, i32* %225, align 8, !tbaa !474
  %227 = icmp sgt i32 %226, 0
  br i1 %227, label %228, label %262

228:                                              ; preds = %223
  %229 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %219, i64 %224, i32 3
  %230 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %229, align 8, !tbaa !475
  %231 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %219, i64 %224, i32 0
  %232 = load i32, i32* %231, align 8, !tbaa !471
  %233 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %219, i64 %224, i32 1
  %234 = load i32, i32* %233, align 4, !tbaa !473
  %235 = sext i32 %226 to i64
  br label %236

236:                                              ; preds = %236, %228
  %237 = phi i64 [ 0, %228 ], [ %259, %236 ]
  %238 = phi i32 [ 0, %228 ], [ %260, %236 ]
  %239 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %230, i64 %237, i32 0
  %240 = load i32, i32* %239, align 4, !tbaa !476
  %241 = xor i32 %238, -1
  %242 = add i32 %226, %241
  %243 = add i32 %242, %240
  %244 = shl i32 %232, %243
  %245 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %230, i64 %237, i32 1
  %246 = load i32, i32* %245, align 4, !tbaa !488
  %247 = add i32 %242, %246
  %248 = shl i32 %234, %247
  %249 = load i32, i32* %38, align 8, !tbaa !489
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %249, %244
  %252 = select i1 %251, i32 %249, i32 %244
  %253 = select i1 %250, i32 %244, i32 %252
  store i32 %253, i32* %220, align 8, !tbaa !489
  %254 = load i32, i32* %40, align 4, !tbaa !490
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %254, %248
  %257 = select i1 %256, i32 %254, i32 %248
  %258 = select i1 %255, i32 %248, i32 %257
  store i32 %258, i32* %221, align 4, !tbaa !490
  %259 = add nuw nsw i64 %237, 1
  %260 = add nuw nsw i32 %238, 1
  %261 = icmp slt i64 %259, %235
  br i1 %261, label %236, label %262

262:                                              ; preds = %236, %223
  %263 = add nuw nsw i64 %224, 1
  %264 = icmp slt i64 %263, %222
  br i1 %264, label %223, label %265

265:                                              ; preds = %262, %207
  %266 = icmp eq i64 %52, 0
  br i1 %266, label %267, label %274

267:                                              ; preds = %265
  %268 = load i32, i32* %41, align 4, !tbaa !219
  %269 = mul nsw i32 %268, %214
  %270 = sext i32 %269 to i64
  %271 = tail call noalias i8* @calloc(i64 %270, i64 2) #9
  store i8* %271, i8** %50, align 8, !tbaa !484
  %272 = icmp eq i8* %271, null
  br i1 %272, label %273, label %281

273:                                              ; preds = %267
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %13, %struct.opj_cp* %1, i32 %2)
  br label %342

274:                                              ; preds = %265
  %275 = add nsw i64 %52, -1
  %276 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %275, i32 1
  %277 = bitcast i16** %276 to i64*
  %278 = load i64, i64* %277, align 8, !tbaa !484
  %279 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 1
  %280 = bitcast i16** %279 to i64*
  store i64 %278, i64* %280, align 8, !tbaa !484
  br label %281

281:                                              ; preds = %274, %267
  %282 = load i32, i32* %42, align 8, !tbaa !212
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %314, label %284

284:                                              ; preds = %281
  %285 = load i32, i32* %43, align 8, !tbaa !250
  %286 = icmp ne i32 %285, 0
  %287 = or i1 %44, %286
  br i1 %287, label %288, label %314

288:                                              ; preds = %284
  %289 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 1
  %290 = load i32, i32* %289, align 4, !tbaa !227
  %291 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 18
  store i32 %290, i32* %291, align 4, !tbaa !491
  %292 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 4
  %293 = load i32, i32* %292, align 4, !tbaa !230
  %294 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 22
  store i32 %293, i32* %294, align 4, !tbaa !156
  %295 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 0
  %296 = load i32, i32* %295, align 4, !tbaa !226
  %297 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 17
  store i32 %296, i32* %297, align 4, !tbaa !492
  %298 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 3
  %299 = load i32, i32* %298, align 4, !tbaa !229
  %300 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 21
  store i32 %299, i32* %300, align 4, !tbaa !155
  %301 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 2
  %302 = load i32, i32* %301, align 4, !tbaa !228
  %303 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 20
  store i32 %302, i32* %303, align 4, !tbaa !152
  %304 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 8
  %305 = load i32, i32* %304, align 4, !tbaa !309
  %306 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 9
  store i32 %305, i32* %306, align 4, !tbaa !231
  br i1 %266, label %324, label %307

307:                                              ; preds = %288
  %308 = add nsw i64 %52, -1
  %309 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %308, i32 20
  %310 = load i32, i32* %309, align 4, !tbaa !152
  %311 = icmp sgt i32 %302, %310
  %312 = select i1 %311, i32 %310, i32 0
  %313 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 16
  store i32 %312, i32* %313, align 4, !tbaa !493
  br label %324

314:                                              ; preds = %284, %281
  %315 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 18
  store i32 0, i32* %315, align 4, !tbaa !491
  %316 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 22
  store i32 %46, i32* %316, align 4, !tbaa !156
  %317 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 17
  store i32 0, i32* %317, align 4, !tbaa !492
  %318 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 21
  store i32 %209, i32* %318, align 4, !tbaa !155
  %319 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 16
  store i32 0, i32* %319, align 4, !tbaa !493
  %320 = load i32, i32* %41, align 4, !tbaa !219
  %321 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 20
  store i32 %320, i32* %321, align 4, !tbaa !152
  %322 = load i32, i32* %45, align 8, !tbaa !148
  %323 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 9
  store i32 %322, i32* %323, align 4, !tbaa !231
  br label %324

324:                                              ; preds = %314, %307, %288
  %325 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 19
  store i32 0, i32* %325, align 4, !tbaa !494
  %326 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 23
  store i32 %208, i32* %326, align 4, !tbaa !154
  %327 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 24
  %328 = bitcast i32* %65 to <4 x i32>*
  %329 = load <4 x i32>, <4 x i32>* %328, align 8, !tbaa !43
  %330 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %331 = bitcast i32* %327 to <4 x i32>*
  store <4 x i32> %330, <4 x i32>* %331, align 4, !tbaa !43
  %332 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 20
  %333 = load i32, i32* %332, align 8, !tbaa !489
  %334 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 28
  store i32 %333, i32* %334, align 4, !tbaa !495
  %335 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 %52, i32 21
  %336 = load i32, i32* %335, align 4, !tbaa !490
  %337 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 8, i64 %52, i32 29
  store i32 %336, i32* %337, align 4, !tbaa !496
  %338 = add nuw nsw i64 %52, 1
  %339 = load i32, i32* %8, align 4, !tbaa !140
  %340 = sext i32 %339 to i64
  %341 = icmp slt i64 %52, %340
  br i1 %341, label %51, label %342

342:                                              ; preds = %324, %273, %202, %97, %15, %4
  %343 = phi %struct.opj_pi_iterator* [ null, %202 ], [ null, %273 ], [ null, %97 ], [ null, %4 ], [ %13, %15 ], [ %13, %324 ]
  ret %struct.opj_pi_iterator* %343
}

; Function Attrs: norecurse nounwind uwtable
define i32 @pi_next(%struct.opj_pi_iterator*) #4 {
  %2 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 9
  %3 = load i32, i32* %2, align 4, !tbaa !497
  switch i32 %3, label %1079 [
    i32 0, label %4
    i32 1, label %118
    i32 2, label %232
    i32 3, label %507
    i32 4, label %798
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %6 = load i32, i32* %5, align 8, !tbaa !485
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %10 = load i32, i32* %9, align 8, !tbaa !498
  br label %102

11:                                               ; preds = %4
  store i32 0, i32* %5, align 8, !tbaa !485
  %12 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 5
  %13 = load i32, i32* %12, align 4, !tbaa !499
  %14 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  store i32 %13, i32* %14, align 4, !tbaa !500
  br label %15

15:                                               ; preds = %114, %11
  %16 = phi i32 [ %117, %114 ], [ %13, %11 ]
  %17 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 2
  %18 = load i32, i32* %17, align 4, !tbaa !501
  %19 = icmp slt i32 %16, %18
  br i1 %19, label %20, label %1079

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 0
  %22 = load i32, i32* %21, align 4, !tbaa !502
  %23 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  store i32 %22, i32* %23, align 4, !tbaa !503
  br label %24

24:                                               ; preds = %110, %20
  %25 = phi i32 [ %113, %110 ], [ %22, %20 ]
  %26 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 3
  %27 = load i32, i32* %26, align 4, !tbaa !504
  %28 = icmp slt i32 %25, %27
  br i1 %28, label %29, label %114

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 1
  %31 = load i32, i32* %30, align 4, !tbaa !505
  %32 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  store i32 %31, i32* %32, align 8, !tbaa !506
  br label %33

33:                                               ; preds = %106, %29
  %34 = phi i32 [ %109, %106 ], [ %31, %29 ]
  %35 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 4
  %36 = load i32, i32* %35, align 4, !tbaa !507
  %37 = icmp slt i32 %34, %36
  br i1 %37, label %38, label %110

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %40 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %39, align 8, !tbaa !470
  %41 = sext i32 %34 to i64
  %42 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %43 = load i32, i32* %42, align 4, !tbaa !503
  %44 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %40, i64 %41, i32 2
  %45 = load i32, i32* %44, align 8, !tbaa !474
  %46 = icmp slt i32 %43, %45
  br i1 %46, label %47, label %106

47:                                               ; preds = %38
  %48 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %40, i64 %41, i32 3
  %49 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %48, align 8, !tbaa !475
  %50 = sext i32 %43 to i64
  %51 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  %52 = load i8, i8* %51, align 8, !tbaa !487
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %61

54:                                               ; preds = %47
  %55 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %49, i64 %50, i32 2
  %56 = load i32, i32* %55, align 4, !tbaa !478
  %57 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %49, i64 %50, i32 3
  %58 = load i32, i32* %57, align 4, !tbaa !479
  %59 = mul nsw i32 %58, %56
  %60 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 7
  store i32 %59, i32* %60, align 4, !tbaa !486
  br label %61

61:                                               ; preds = %54, %47
  %62 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 6
  %63 = load i32, i32* %62, align 4, !tbaa !508
  %64 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  store i32 %63, i32* %64, align 8, !tbaa !498
  br label %65

65:                                               ; preds = %102, %61
  %66 = phi i32 [ %105, %102 ], [ %63, %61 ]
  %67 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 7
  %68 = load i32, i32* %67, align 4, !tbaa !486
  %69 = icmp slt i32 %66, %68
  br i1 %69, label %73, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %72 = load i32, i32* %71, align 8, !tbaa !506
  br label %106

73:                                               ; preds = %65
  %74 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %75 = load i32, i32* %74, align 4, !tbaa !500
  %76 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 2
  %77 = load i32, i32* %76, align 8, !tbaa !483
  %78 = mul nsw i32 %77, %75
  %79 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %80 = load i32, i32* %79, align 4, !tbaa !503
  %81 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 3
  %82 = load i32, i32* %81, align 4, !tbaa !482
  %83 = mul nsw i32 %82, %80
  %84 = add nsw i32 %83, %78
  %85 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %86 = load i32, i32* %85, align 8, !tbaa !506
  %87 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 4
  %88 = load i32, i32* %87, align 8, !tbaa !481
  %89 = mul nsw i32 %88, %86
  %90 = add nsw i32 %84, %89
  %91 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 5
  %92 = load i32, i32* %91, align 4, !tbaa !480
  %93 = mul nsw i32 %92, %66
  %94 = add nsw i32 %90, %93
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %97 = load i16*, i16** %96, align 8, !tbaa !484
  %98 = getelementptr inbounds i16, i16* %97, i64 %95
  %99 = load i16, i16* %98, align 2, !tbaa !509
  %100 = icmp eq i16 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %73
  store i16 1, i16* %98, align 2, !tbaa !509
  br label %1079

102:                                              ; preds = %73, %8
  %103 = phi i32 [ %10, %8 ], [ %66, %73 ]
  %104 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %105 = add nsw i32 %103, 1
  store i32 %105, i32* %104, align 8, !tbaa !498
  br label %65

106:                                              ; preds = %70, %38
  %107 = phi i32 [ %72, %70 ], [ %34, %38 ]
  %108 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %109 = add nsw i32 %107, 1
  store i32 %109, i32* %108, align 8, !tbaa !506
  br label %33

110:                                              ; preds = %33
  %111 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %112 = load i32, i32* %111, align 4, !tbaa !503
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %111, align 4, !tbaa !503
  br label %24

114:                                              ; preds = %24
  %115 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %116 = load i32, i32* %115, align 4, !tbaa !500
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %115, align 4, !tbaa !500
  br label %15

118:                                              ; preds = %1
  %119 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %120 = load i32, i32* %119, align 8, !tbaa !485
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %125

122:                                              ; preds = %118
  %123 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %124 = load i32, i32* %123, align 8, !tbaa !498
  br label %216

125:                                              ; preds = %118
  store i32 0, i32* %119, align 8, !tbaa !485
  %126 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 0
  %127 = load i32, i32* %126, align 4, !tbaa !502
  %128 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  store i32 %127, i32* %128, align 4, !tbaa !503
  br label %129

129:                                              ; preds = %228, %125
  %130 = phi i32 [ %231, %228 ], [ %127, %125 ]
  %131 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 3
  %132 = load i32, i32* %131, align 4, !tbaa !504
  %133 = icmp slt i32 %130, %132
  br i1 %133, label %134, label %1079

134:                                              ; preds = %129
  %135 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 5
  %136 = load i32, i32* %135, align 4, !tbaa !499
  %137 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  store i32 %136, i32* %137, align 4, !tbaa !500
  br label %138

138:                                              ; preds = %224, %134
  %139 = phi i32 [ %227, %224 ], [ %136, %134 ]
  %140 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 2
  %141 = load i32, i32* %140, align 4, !tbaa !501
  %142 = icmp slt i32 %139, %141
  br i1 %142, label %143, label %228

143:                                              ; preds = %138
  %144 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 1
  %145 = load i32, i32* %144, align 4, !tbaa !505
  %146 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  store i32 %145, i32* %146, align 8, !tbaa !506
  br label %147

147:                                              ; preds = %220, %143
  %148 = phi i32 [ %223, %220 ], [ %145, %143 ]
  %149 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 4
  %150 = load i32, i32* %149, align 4, !tbaa !507
  %151 = icmp slt i32 %148, %150
  br i1 %151, label %152, label %224

152:                                              ; preds = %147
  %153 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %154 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %153, align 8, !tbaa !470
  %155 = sext i32 %148 to i64
  %156 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %157 = load i32, i32* %156, align 4, !tbaa !503
  %158 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %154, i64 %155, i32 2
  %159 = load i32, i32* %158, align 8, !tbaa !474
  %160 = icmp slt i32 %157, %159
  br i1 %160, label %161, label %220

161:                                              ; preds = %152
  %162 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %154, i64 %155, i32 3
  %163 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %162, align 8, !tbaa !475
  %164 = sext i32 %157 to i64
  %165 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  %166 = load i8, i8* %165, align 8, !tbaa !487
  %167 = icmp eq i8 %166, 0
  br i1 %167, label %168, label %175

168:                                              ; preds = %161
  %169 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %163, i64 %164, i32 2
  %170 = load i32, i32* %169, align 4, !tbaa !478
  %171 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %163, i64 %164, i32 3
  %172 = load i32, i32* %171, align 4, !tbaa !479
  %173 = mul nsw i32 %172, %170
  %174 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 7
  store i32 %173, i32* %174, align 4, !tbaa !486
  br label %175

175:                                              ; preds = %168, %161
  %176 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 6
  %177 = load i32, i32* %176, align 4, !tbaa !508
  %178 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  store i32 %177, i32* %178, align 8, !tbaa !498
  br label %179

179:                                              ; preds = %216, %175
  %180 = phi i32 [ %219, %216 ], [ %177, %175 ]
  %181 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 7
  %182 = load i32, i32* %181, align 4, !tbaa !486
  %183 = icmp slt i32 %180, %182
  br i1 %183, label %187, label %184

184:                                              ; preds = %179
  %185 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %186 = load i32, i32* %185, align 8, !tbaa !506
  br label %220

187:                                              ; preds = %179
  %188 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %189 = load i32, i32* %188, align 4, !tbaa !500
  %190 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 2
  %191 = load i32, i32* %190, align 8, !tbaa !483
  %192 = mul nsw i32 %191, %189
  %193 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %194 = load i32, i32* %193, align 4, !tbaa !503
  %195 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 3
  %196 = load i32, i32* %195, align 4, !tbaa !482
  %197 = mul nsw i32 %196, %194
  %198 = add nsw i32 %197, %192
  %199 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %200 = load i32, i32* %199, align 8, !tbaa !506
  %201 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 4
  %202 = load i32, i32* %201, align 8, !tbaa !481
  %203 = mul nsw i32 %202, %200
  %204 = add nsw i32 %198, %203
  %205 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 5
  %206 = load i32, i32* %205, align 4, !tbaa !480
  %207 = mul nsw i32 %206, %180
  %208 = add nsw i32 %204, %207
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %211 = load i16*, i16** %210, align 8, !tbaa !484
  %212 = getelementptr inbounds i16, i16* %211, i64 %209
  %213 = load i16, i16* %212, align 2, !tbaa !509
  %214 = icmp eq i16 %213, 0
  br i1 %214, label %215, label %216

215:                                              ; preds = %187
  store i16 1, i16* %212, align 2, !tbaa !509
  br label %1079

216:                                              ; preds = %187, %122
  %217 = phi i32 [ %124, %122 ], [ %180, %187 ]
  %218 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %219 = add nsw i32 %217, 1
  store i32 %219, i32* %218, align 8, !tbaa !498
  br label %179

220:                                              ; preds = %184, %152
  %221 = phi i32 [ %186, %184 ], [ %148, %152 ]
  %222 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %223 = add nsw i32 %221, 1
  store i32 %223, i32* %222, align 8, !tbaa !506
  br label %147

224:                                              ; preds = %147
  %225 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %226 = load i32, i32* %225, align 4, !tbaa !500
  %227 = add nsw i32 %226, 1
  store i32 %227, i32* %225, align 4, !tbaa !500
  br label %138

228:                                              ; preds = %138
  %229 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %230 = load i32, i32* %229, align 4, !tbaa !503
  %231 = add nsw i32 %230, 1
  store i32 %231, i32* %229, align 4, !tbaa !503
  br label %129

232:                                              ; preds = %1
  %233 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %234 = load i32, i32* %233, align 8, !tbaa !485
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %236, label %239

236:                                              ; preds = %232
  %237 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %238 = load i32, i32* %237, align 4, !tbaa !500
  br label %479

239:                                              ; preds = %232
  store i32 0, i32* %233, align 8, !tbaa !485
  %240 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  store i32 0, i32* %240, align 8, !tbaa !489
  %241 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  store i32 0, i32* %241, align 4, !tbaa !490
  %242 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12
  %243 = load i32, i32* %242, align 8, !tbaa !469
  %244 = icmp sgt i32 %243, 0
  br i1 %244, label %245, label %296

245:                                              ; preds = %239
  %246 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %247 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %246, align 8, !tbaa !470
  %248 = sext i32 %243 to i64
  br label %249

249:                                              ; preds = %291, %245
  %250 = phi i32 [ 0, %245 ], [ %292, %291 ]
  %251 = phi i32 [ 0, %245 ], [ %293, %291 ]
  %252 = phi i64 [ 0, %245 ], [ %294, %291 ]
  %253 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %247, i64 %252, i32 2
  %254 = load i32, i32* %253, align 8, !tbaa !474
  %255 = icmp sgt i32 %254, 0
  br i1 %255, label %256, label %291

256:                                              ; preds = %249
  %257 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %247, i64 %252, i32 3
  %258 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %257, align 8, !tbaa !475
  %259 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %247, i64 %252, i32 0
  %260 = load i32, i32* %259, align 8, !tbaa !471
  %261 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %247, i64 %252, i32 1
  %262 = load i32, i32* %261, align 4, !tbaa !473
  %263 = sext i32 %254 to i64
  br label %264

264:                                              ; preds = %264, %256
  %265 = phi i64 [ 0, %256 ], [ %287, %264 ]
  %266 = phi i32 [ %250, %256 ], [ %286, %264 ]
  %267 = phi i32 [ %251, %256 ], [ %282, %264 ]
  %268 = phi i32 [ 0, %256 ], [ %288, %264 ]
  %269 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %258, i64 %265, i32 0
  %270 = load i32, i32* %269, align 4, !tbaa !476
  %271 = xor i32 %268, -1
  %272 = add i32 %254, %271
  %273 = add i32 %272, %270
  %274 = shl i32 %260, %273
  %275 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %258, i64 %265, i32 1
  %276 = load i32, i32* %275, align 4, !tbaa !488
  %277 = add i32 %276, %272
  %278 = shl i32 %262, %277
  %279 = icmp eq i32 %267, 0
  %280 = icmp slt i32 %267, %274
  %281 = select i1 %280, i32 %267, i32 %274
  %282 = select i1 %279, i32 %274, i32 %281
  %283 = icmp eq i32 %266, 0
  %284 = icmp slt i32 %266, %278
  %285 = select i1 %284, i32 %266, i32 %278
  %286 = select i1 %283, i32 %278, i32 %285
  %287 = add nuw nsw i64 %265, 1
  %288 = add nuw nsw i32 %268, 1
  %289 = icmp eq i64 %287, %263
  br i1 %289, label %290, label %264

290:                                              ; preds = %264
  store i32 %282, i32* %240, align 8, !tbaa !489
  store i32 %286, i32* %241, align 4, !tbaa !490
  br label %291

291:                                              ; preds = %290, %249
  %292 = phi i32 [ %286, %290 ], [ %250, %249 ]
  %293 = phi i32 [ %282, %290 ], [ %251, %249 ]
  %294 = add nuw nsw i64 %252, 1
  %295 = icmp eq i64 %294, %248
  br i1 %295, label %296, label %249

296:                                              ; preds = %291, %239
  %297 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  %298 = load i8, i8* %297, align 8, !tbaa !487
  %299 = icmp eq i8 %298, 0
  br i1 %299, label %300, label %307

300:                                              ; preds = %296
  %301 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %302 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 12
  %303 = bitcast i32* %301 to <4 x i32>*
  %304 = load <4 x i32>, <4 x i32>* %303, align 8, !tbaa !43
  %305 = shufflevector <4 x i32> %304, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %306 = bitcast i32* %302 to <4 x i32>*
  store <4 x i32> %305, <4 x i32>* %306, align 4, !tbaa !43
  br label %307

307:                                              ; preds = %300, %296
  %308 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 0
  %309 = load i32, i32* %308, align 4, !tbaa !502
  %310 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  store i32 %309, i32* %310, align 4, !tbaa !503
  br label %311

311:                                              ; preds = %503, %307
  %312 = phi i32 [ %506, %503 ], [ %309, %307 ]
  %313 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 3
  %314 = load i32, i32* %313, align 4, !tbaa !504
  %315 = icmp slt i32 %312, %314
  br i1 %315, label %316, label %1079

316:                                              ; preds = %311
  %317 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 14
  %318 = load i32, i32* %317, align 4, !tbaa !510
  %319 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  store i32 %318, i32* %319, align 4, !tbaa !511
  br label %320

320:                                              ; preds = %495, %316
  %321 = phi i32 [ %502, %495 ], [ %318, %316 ]
  %322 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 15
  %323 = load i32, i32* %322, align 4, !tbaa !512
  %324 = icmp slt i32 %321, %323
  br i1 %324, label %325, label %503

325:                                              ; preds = %320
  %326 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 12
  %327 = load i32, i32* %326, align 4, !tbaa !513
  %328 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  store i32 %327, i32* %328, align 8, !tbaa !514
  br label %329

329:                                              ; preds = %487, %325
  %330 = phi i32 [ %494, %487 ], [ %327, %325 ]
  %331 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 13
  %332 = load i32, i32* %331, align 4, !tbaa !515
  %333 = icmp slt i32 %330, %332
  br i1 %333, label %334, label %495

334:                                              ; preds = %329
  %335 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 1
  %336 = load i32, i32* %335, align 4, !tbaa !505
  %337 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  store i32 %336, i32* %337, align 8, !tbaa !506
  br label %338

338:                                              ; preds = %483, %334
  %339 = phi i32 [ %486, %483 ], [ %336, %334 ]
  %340 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 4
  %341 = load i32, i32* %340, align 4, !tbaa !507
  %342 = icmp slt i32 %339, %341
  br i1 %342, label %343, label %487

343:                                              ; preds = %338
  %344 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %345 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %344, align 8, !tbaa !470
  %346 = sext i32 %339 to i64
  %347 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %348 = load i32, i32* %347, align 4, !tbaa !503
  %349 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %345, i64 %346, i32 2
  %350 = load i32, i32* %349, align 8, !tbaa !474
  %351 = icmp slt i32 %348, %350
  br i1 %351, label %352, label %483

352:                                              ; preds = %343
  %353 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %345, i64 %346, i32 3
  %354 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %353, align 8, !tbaa !475
  %355 = sext i32 %348 to i64
  %356 = xor i32 %348, -1
  %357 = add i32 %350, %356
  %358 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %359 = load i32, i32* %358, align 8, !tbaa !464
  %360 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %345, i64 %346, i32 0
  %361 = load i32, i32* %360, align 8, !tbaa !471
  %362 = shl i32 %361, %357
  %363 = add i32 %362, -1
  %364 = add i32 %363, %359
  %365 = sdiv i32 %364, %362
  %366 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 15
  %367 = load i32, i32* %366, align 4, !tbaa !466
  %368 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %345, i64 %346, i32 1
  %369 = load i32, i32* %368, align 4, !tbaa !473
  %370 = shl i32 %369, %357
  %371 = add i32 %370, -1
  %372 = add i32 %371, %367
  %373 = sdiv i32 %372, %370
  %374 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 16
  %375 = load i32, i32* %374, align 8, !tbaa !467
  %376 = add i32 %375, %363
  %377 = sdiv i32 %376, %362
  %378 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 17
  %379 = load i32, i32* %378, align 4, !tbaa !468
  %380 = add i32 %379, %371
  %381 = sdiv i32 %380, %370
  %382 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %354, i64 %355, i32 0
  %383 = load i32, i32* %382, align 4, !tbaa !476
  %384 = add nsw i32 %383, %357
  %385 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %354, i64 %355, i32 1
  %386 = load i32, i32* %385, align 4, !tbaa !488
  %387 = add nsw i32 %386, %357
  %388 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %389 = load i32, i32* %388, align 4, !tbaa !511
  %390 = shl i32 %369, %387
  %391 = srem i32 %389, %390
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %400, label %393

393:                                              ; preds = %352
  %394 = icmp eq i32 %389, %367
  br i1 %394, label %395, label %483

395:                                              ; preds = %393
  %396 = shl i32 %373, %357
  %397 = shl nuw i32 1, %387
  %398 = srem i32 %396, %397
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %483, label %400

400:                                              ; preds = %395, %352
  %401 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  %402 = load i32, i32* %401, align 8, !tbaa !514
  %403 = shl i32 %361, %384
  %404 = srem i32 %402, %403
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %413, label %406

406:                                              ; preds = %400
  %407 = icmp eq i32 %402, %359
  br i1 %407, label %408, label %483

408:                                              ; preds = %406
  %409 = shl i32 %365, %357
  %410 = shl nuw i32 1, %384
  %411 = srem i32 %409, %410
  %412 = icmp eq i32 %411, 0
  br i1 %412, label %483, label %413

413:                                              ; preds = %408, %400
  %414 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %354, i64 %355, i32 2
  %415 = load i32, i32* %414, align 4, !tbaa !478
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %483, label %417

417:                                              ; preds = %413
  %418 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %354, i64 %355, i32 3
  %419 = load i32, i32* %418, align 4, !tbaa !479
  %420 = icmp eq i32 %419, 0
  %421 = icmp eq i32 %365, %377
  %422 = or i1 %421, %420
  %423 = icmp eq i32 %373, %381
  %424 = or i1 %423, %422
  br i1 %424, label %483, label %425

425:                                              ; preds = %417
  %426 = add i32 %402, %363
  %427 = sdiv i32 %426, %362
  %428 = ashr i32 %427, %383
  %429 = ashr i32 %365, %383
  %430 = sub i32 %428, %429
  %431 = add i32 %389, %371
  %432 = sdiv i32 %431, %370
  %433 = ashr i32 %432, %386
  %434 = ashr i32 %373, %386
  %435 = sub nsw i32 %433, %434
  %436 = mul nsw i32 %435, %415
  %437 = add nsw i32 %430, %436
  %438 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  store i32 %437, i32* %438, align 8, !tbaa !498
  %439 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 5
  %440 = load i32, i32* %439, align 4, !tbaa !499
  %441 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  store i32 %440, i32* %441, align 4, !tbaa !500
  br label %442

442:                                              ; preds = %479, %425
  %443 = phi i32 [ %482, %479 ], [ %440, %425 ]
  %444 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 2
  %445 = load i32, i32* %444, align 4, !tbaa !501
  %446 = icmp slt i32 %443, %445
  br i1 %446, label %450, label %447

447:                                              ; preds = %442
  %448 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %449 = load i32, i32* %448, align 8, !tbaa !506
  br label %483

450:                                              ; preds = %442
  %451 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 2
  %452 = load i32, i32* %451, align 8, !tbaa !483
  %453 = mul nsw i32 %452, %443
  %454 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %455 = load i32, i32* %454, align 4, !tbaa !503
  %456 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 3
  %457 = load i32, i32* %456, align 4, !tbaa !482
  %458 = mul nsw i32 %457, %455
  %459 = add nsw i32 %458, %453
  %460 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %461 = load i32, i32* %460, align 8, !tbaa !506
  %462 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 4
  %463 = load i32, i32* %462, align 8, !tbaa !481
  %464 = mul nsw i32 %463, %461
  %465 = add nsw i32 %459, %464
  %466 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %467 = load i32, i32* %466, align 8, !tbaa !498
  %468 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 5
  %469 = load i32, i32* %468, align 4, !tbaa !480
  %470 = mul nsw i32 %469, %467
  %471 = add nsw i32 %465, %470
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %474 = load i16*, i16** %473, align 8, !tbaa !484
  %475 = getelementptr inbounds i16, i16* %474, i64 %472
  %476 = load i16, i16* %475, align 2, !tbaa !509
  %477 = icmp eq i16 %476, 0
  br i1 %477, label %478, label %479

478:                                              ; preds = %450
  store i16 1, i16* %475, align 2, !tbaa !509
  br label %1079

479:                                              ; preds = %450, %236
  %480 = phi i32 [ %238, %236 ], [ %443, %450 ]
  %481 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %482 = add nsw i32 %480, 1
  store i32 %482, i32* %481, align 4, !tbaa !500
  br label %442

483:                                              ; preds = %447, %417, %413, %408, %406, %395, %393, %343
  %484 = phi i32 [ %449, %447 ], [ %339, %408 ], [ %339, %395 ], [ %339, %343 ], [ %339, %413 ], [ %339, %417 ], [ %339, %406 ], [ %339, %393 ]
  %485 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %486 = add nsw i32 %484, 1
  store i32 %486, i32* %485, align 8, !tbaa !506
  br label %338

487:                                              ; preds = %338
  %488 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  %489 = load i32, i32* %488, align 8, !tbaa !489
  %490 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  %491 = load i32, i32* %490, align 8, !tbaa !514
  %492 = srem i32 %491, %489
  %493 = add i32 %491, %489
  %494 = sub i32 %493, %492
  store i32 %494, i32* %490, align 8, !tbaa !514
  br label %329

495:                                              ; preds = %329
  %496 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  %497 = load i32, i32* %496, align 4, !tbaa !490
  %498 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %499 = load i32, i32* %498, align 4, !tbaa !511
  %500 = srem i32 %499, %497
  %501 = add i32 %499, %497
  %502 = sub i32 %501, %500
  store i32 %502, i32* %498, align 4, !tbaa !511
  br label %320

503:                                              ; preds = %320
  %504 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %505 = load i32, i32* %504, align 4, !tbaa !503
  %506 = add nsw i32 %505, 1
  store i32 %506, i32* %504, align 4, !tbaa !503
  br label %311

507:                                              ; preds = %1
  %508 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %509 = load i32, i32* %508, align 8, !tbaa !485
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %511, label %520

511:                                              ; preds = %507
  %512 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %513 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %512, align 8, !tbaa !470
  %514 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %515 = load i32, i32* %514, align 8, !tbaa !506
  %516 = sext i32 %515 to i64
  %517 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %513, i64 %516
  %518 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %519 = load i32, i32* %518, align 4, !tbaa !500
  br label %766

520:                                              ; preds = %507
  store i32 0, i32* %508, align 8, !tbaa !485
  %521 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  store i32 0, i32* %521, align 8, !tbaa !489
  %522 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  store i32 0, i32* %522, align 4, !tbaa !490
  %523 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12
  %524 = load i32, i32* %523, align 8, !tbaa !469
  %525 = icmp sgt i32 %524, 0
  br i1 %525, label %526, label %577

526:                                              ; preds = %520
  %527 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %528 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %527, align 8, !tbaa !470
  %529 = sext i32 %524 to i64
  br label %530

530:                                              ; preds = %572, %526
  %531 = phi i32 [ 0, %526 ], [ %573, %572 ]
  %532 = phi i32 [ 0, %526 ], [ %574, %572 ]
  %533 = phi i64 [ 0, %526 ], [ %575, %572 ]
  %534 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %528, i64 %533, i32 2
  %535 = load i32, i32* %534, align 8, !tbaa !474
  %536 = icmp sgt i32 %535, 0
  br i1 %536, label %537, label %572

537:                                              ; preds = %530
  %538 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %528, i64 %533, i32 3
  %539 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %538, align 8, !tbaa !475
  %540 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %528, i64 %533, i32 0
  %541 = load i32, i32* %540, align 8, !tbaa !471
  %542 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %528, i64 %533, i32 1
  %543 = load i32, i32* %542, align 4, !tbaa !473
  %544 = sext i32 %535 to i64
  br label %545

545:                                              ; preds = %545, %537
  %546 = phi i64 [ 0, %537 ], [ %568, %545 ]
  %547 = phi i32 [ %531, %537 ], [ %567, %545 ]
  %548 = phi i32 [ %532, %537 ], [ %563, %545 ]
  %549 = phi i32 [ 0, %537 ], [ %569, %545 ]
  %550 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %539, i64 %546, i32 0
  %551 = load i32, i32* %550, align 4, !tbaa !476
  %552 = xor i32 %549, -1
  %553 = add i32 %535, %552
  %554 = add i32 %553, %551
  %555 = shl i32 %541, %554
  %556 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %539, i64 %546, i32 1
  %557 = load i32, i32* %556, align 4, !tbaa !488
  %558 = add i32 %557, %553
  %559 = shl i32 %543, %558
  %560 = icmp eq i32 %548, 0
  %561 = icmp slt i32 %548, %555
  %562 = select i1 %561, i32 %548, i32 %555
  %563 = select i1 %560, i32 %555, i32 %562
  %564 = icmp eq i32 %547, 0
  %565 = icmp slt i32 %547, %559
  %566 = select i1 %565, i32 %547, i32 %559
  %567 = select i1 %564, i32 %559, i32 %566
  %568 = add nuw nsw i64 %546, 1
  %569 = add nuw nsw i32 %549, 1
  %570 = icmp eq i64 %568, %544
  br i1 %570, label %571, label %545

571:                                              ; preds = %545
  store i32 %563, i32* %521, align 8, !tbaa !489
  store i32 %567, i32* %522, align 4, !tbaa !490
  br label %572

572:                                              ; preds = %571, %530
  %573 = phi i32 [ %567, %571 ], [ %531, %530 ]
  %574 = phi i32 [ %563, %571 ], [ %532, %530 ]
  %575 = add nuw nsw i64 %533, 1
  %576 = icmp eq i64 %575, %529
  br i1 %576, label %577, label %530

577:                                              ; preds = %572, %520
  %578 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  %579 = load i8, i8* %578, align 8, !tbaa !487
  %580 = icmp eq i8 %579, 0
  br i1 %580, label %584, label %581

581:                                              ; preds = %577
  %582 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 14
  %583 = load i32, i32* %582, align 4, !tbaa !510
  br label %592

584:                                              ; preds = %577
  %585 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %586 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 12
  %587 = bitcast i32* %585 to <4 x i32>*
  %588 = load <4 x i32>, <4 x i32>* %587, align 8, !tbaa !43
  %589 = shufflevector <4 x i32> %588, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %590 = bitcast i32* %586 to <4 x i32>*
  store <4 x i32> %589, <4 x i32>* %590, align 4, !tbaa !43
  %591 = extractelement <4 x i32> %588, i32 1
  br label %592

592:                                              ; preds = %584, %581
  %593 = phi i32 [ %583, %581 ], [ %591, %584 ]
  %594 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  store i32 %593, i32* %594, align 4, !tbaa !511
  br label %595

595:                                              ; preds = %790, %592
  %596 = phi i32 [ %797, %790 ], [ %593, %592 ]
  %597 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 15
  %598 = load i32, i32* %597, align 4, !tbaa !512
  %599 = icmp slt i32 %596, %598
  br i1 %599, label %600, label %1079

600:                                              ; preds = %595
  %601 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 12
  %602 = load i32, i32* %601, align 4, !tbaa !513
  %603 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  store i32 %602, i32* %603, align 8, !tbaa !514
  br label %604

604:                                              ; preds = %782, %600
  %605 = phi i32 [ %789, %782 ], [ %602, %600 ]
  %606 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 13
  %607 = load i32, i32* %606, align 4, !tbaa !515
  %608 = icmp slt i32 %605, %607
  br i1 %608, label %609, label %790

609:                                              ; preds = %604
  %610 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 1
  %611 = load i32, i32* %610, align 4, !tbaa !505
  %612 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  store i32 %611, i32* %612, align 8, !tbaa !506
  br label %613

613:                                              ; preds = %779, %609
  %614 = phi i32 [ %781, %779 ], [ %611, %609 ]
  %615 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 4
  %616 = load i32, i32* %615, align 4, !tbaa !507
  %617 = icmp slt i32 %614, %616
  br i1 %617, label %618, label %782

618:                                              ; preds = %613
  %619 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %620 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %619, align 8, !tbaa !470
  %621 = sext i32 %614 to i64
  %622 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %620, i64 %621
  %623 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 0
  %624 = load i32, i32* %623, align 4, !tbaa !502
  %625 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  store i32 %624, i32* %625, align 4, !tbaa !503
  br label %626

626:                                              ; preds = %772, %618
  %627 = phi i32 [ %614, %618 ], [ %773, %772 ]
  %628 = phi i32 [ %614, %618 ], [ %774, %772 ]
  %629 = phi i32 [ %624, %618 ], [ %778, %772 ]
  %630 = phi %struct.opj_pi_comp* [ %622, %618 ], [ %776, %772 ]
  %631 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 3
  %632 = load i32, i32* %631, align 4, !tbaa !504
  %633 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %630, i64 0, i32 2
  %634 = load i32, i32* %633, align 8, !tbaa !474
  %635 = icmp slt i32 %632, %634
  %636 = select i1 %635, i32 %632, i32 %634
  %637 = icmp slt i32 %629, %636
  br i1 %637, label %638, label %779

638:                                              ; preds = %626
  %639 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %630, i64 0, i32 3
  %640 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %639, align 8, !tbaa !475
  %641 = sext i32 %629 to i64
  %642 = xor i32 %629, -1
  %643 = add i32 %634, %642
  %644 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %645 = load i32, i32* %644, align 8, !tbaa !464
  %646 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %630, i64 0, i32 0
  %647 = load i32, i32* %646, align 8, !tbaa !471
  %648 = shl i32 %647, %643
  %649 = add i32 %648, -1
  %650 = add i32 %649, %645
  %651 = sdiv i32 %650, %648
  %652 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 15
  %653 = load i32, i32* %652, align 4, !tbaa !466
  %654 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %630, i64 0, i32 1
  %655 = load i32, i32* %654, align 4, !tbaa !473
  %656 = shl i32 %655, %643
  %657 = add i32 %656, -1
  %658 = add i32 %657, %653
  %659 = sdiv i32 %658, %656
  %660 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 16
  %661 = load i32, i32* %660, align 8, !tbaa !467
  %662 = add i32 %661, %649
  %663 = sdiv i32 %662, %648
  %664 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 17
  %665 = load i32, i32* %664, align 4, !tbaa !468
  %666 = add i32 %665, %657
  %667 = sdiv i32 %666, %656
  %668 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %640, i64 %641, i32 0
  %669 = load i32, i32* %668, align 4, !tbaa !476
  %670 = add nsw i32 %669, %643
  %671 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %640, i64 %641, i32 1
  %672 = load i32, i32* %671, align 4, !tbaa !488
  %673 = add nsw i32 %672, %643
  %674 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %675 = load i32, i32* %674, align 4, !tbaa !511
  %676 = shl i32 %655, %673
  %677 = srem i32 %675, %676
  %678 = icmp eq i32 %677, 0
  br i1 %678, label %686, label %679

679:                                              ; preds = %638
  %680 = icmp eq i32 %675, %653
  br i1 %680, label %681, label %772

681:                                              ; preds = %679
  %682 = shl i32 %659, %643
  %683 = shl nuw i32 1, %673
  %684 = srem i32 %682, %683
  %685 = icmp eq i32 %684, 0
  br i1 %685, label %772, label %686

686:                                              ; preds = %681, %638
  %687 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  %688 = load i32, i32* %687, align 8, !tbaa !514
  %689 = shl i32 %647, %670
  %690 = srem i32 %688, %689
  %691 = icmp eq i32 %690, 0
  br i1 %691, label %699, label %692

692:                                              ; preds = %686
  %693 = icmp eq i32 %688, %645
  br i1 %693, label %694, label %772

694:                                              ; preds = %692
  %695 = shl i32 %651, %643
  %696 = shl nuw i32 1, %670
  %697 = srem i32 %695, %696
  %698 = icmp eq i32 %697, 0
  br i1 %698, label %772, label %699

699:                                              ; preds = %694, %686
  %700 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %640, i64 %641, i32 2
  %701 = load i32, i32* %700, align 4, !tbaa !478
  %702 = icmp eq i32 %701, 0
  br i1 %702, label %772, label %703

703:                                              ; preds = %699
  %704 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %640, i64 %641, i32 3
  %705 = load i32, i32* %704, align 4, !tbaa !479
  %706 = icmp eq i32 %705, 0
  %707 = icmp eq i32 %651, %663
  %708 = or i1 %707, %706
  %709 = icmp eq i32 %659, %667
  %710 = or i1 %709, %708
  br i1 %710, label %772, label %711

711:                                              ; preds = %703
  %712 = add i32 %688, %649
  %713 = sdiv i32 %712, %648
  %714 = ashr i32 %713, %669
  %715 = ashr i32 %651, %669
  %716 = sub i32 %714, %715
  %717 = add i32 %675, %657
  %718 = sdiv i32 %717, %656
  %719 = ashr i32 %718, %672
  %720 = ashr i32 %659, %672
  %721 = sub nsw i32 %719, %720
  %722 = mul nsw i32 %721, %701
  %723 = add nsw i32 %716, %722
  %724 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  store i32 %723, i32* %724, align 8, !tbaa !498
  %725 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 5
  %726 = load i32, i32* %725, align 4, !tbaa !499
  %727 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  store i32 %726, i32* %727, align 4, !tbaa !500
  br label %728

728:                                              ; preds = %766, %711
  %729 = phi i32 [ %627, %711 ], [ %767, %766 ]
  %730 = phi i32 [ %628, %711 ], [ %767, %766 ]
  %731 = phi i32 [ %726, %711 ], [ %771, %766 ]
  %732 = phi %struct.opj_pi_comp* [ %630, %711 ], [ %769, %766 ]
  %733 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 2
  %734 = load i32, i32* %733, align 4, !tbaa !501
  %735 = icmp slt i32 %731, %734
  br i1 %735, label %739, label %736

736:                                              ; preds = %728
  %737 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %738 = load i32, i32* %737, align 4, !tbaa !503
  br label %772

739:                                              ; preds = %728
  %740 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 2
  %741 = load i32, i32* %740, align 8, !tbaa !483
  %742 = mul nsw i32 %741, %731
  %743 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %744 = load i32, i32* %743, align 4, !tbaa !503
  %745 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 3
  %746 = load i32, i32* %745, align 4, !tbaa !482
  %747 = mul nsw i32 %746, %744
  %748 = add nsw i32 %747, %742
  %749 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 4
  %750 = load i32, i32* %749, align 8, !tbaa !481
  %751 = mul nsw i32 %750, %729
  %752 = add nsw i32 %748, %751
  %753 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %754 = load i32, i32* %753, align 8, !tbaa !498
  %755 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 5
  %756 = load i32, i32* %755, align 4, !tbaa !480
  %757 = mul nsw i32 %756, %754
  %758 = add nsw i32 %752, %757
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %761 = load i16*, i16** %760, align 8, !tbaa !484
  %762 = getelementptr inbounds i16, i16* %761, i64 %759
  %763 = load i16, i16* %762, align 2, !tbaa !509
  %764 = icmp eq i16 %763, 0
  br i1 %764, label %765, label %766

765:                                              ; preds = %739
  store i16 1, i16* %762, align 2, !tbaa !509
  br label %1079

766:                                              ; preds = %739, %511
  %767 = phi i32 [ %729, %739 ], [ %515, %511 ]
  %768 = phi i32 [ %731, %739 ], [ %519, %511 ]
  %769 = phi %struct.opj_pi_comp* [ %732, %739 ], [ %517, %511 ]
  %770 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %771 = add nsw i32 %768, 1
  store i32 %771, i32* %770, align 4, !tbaa !500
  br label %728

772:                                              ; preds = %736, %703, %699, %694, %692, %681, %679
  %773 = phi i32 [ %627, %699 ], [ %627, %703 ], [ %729, %736 ], [ %627, %694 ], [ %627, %692 ], [ %627, %681 ], [ %627, %679 ]
  %774 = phi i32 [ %628, %699 ], [ %628, %703 ], [ %730, %736 ], [ %628, %694 ], [ %628, %692 ], [ %628, %681 ], [ %628, %679 ]
  %775 = phi i32 [ %629, %699 ], [ %629, %703 ], [ %738, %736 ], [ %629, %694 ], [ %629, %692 ], [ %629, %681 ], [ %629, %679 ]
  %776 = phi %struct.opj_pi_comp* [ %630, %699 ], [ %630, %703 ], [ %732, %736 ], [ %630, %694 ], [ %630, %692 ], [ %630, %681 ], [ %630, %679 ]
  %777 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %778 = add nsw i32 %775, 1
  store i32 %778, i32* %777, align 4, !tbaa !503
  br label %626

779:                                              ; preds = %626
  %780 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %781 = add nsw i32 %628, 1
  store i32 %781, i32* %780, align 8, !tbaa !506
  br label %613

782:                                              ; preds = %613
  %783 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  %784 = load i32, i32* %783, align 8, !tbaa !489
  %785 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  %786 = load i32, i32* %785, align 8, !tbaa !514
  %787 = srem i32 %786, %784
  %788 = add i32 %786, %784
  %789 = sub i32 %788, %787
  store i32 %789, i32* %785, align 8, !tbaa !514
  br label %604

790:                                              ; preds = %604
  %791 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  %792 = load i32, i32* %791, align 4, !tbaa !490
  %793 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %794 = load i32, i32* %793, align 4, !tbaa !511
  %795 = srem i32 %794, %792
  %796 = add i32 %794, %792
  %797 = sub i32 %796, %795
  store i32 %797, i32* %793, align 4, !tbaa !511
  br label %595

798:                                              ; preds = %1
  %799 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %800 = load i32, i32* %799, align 8, !tbaa !485
  %801 = icmp eq i32 %800, 0
  br i1 %801, label %802, label %811

802:                                              ; preds = %798
  %803 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %804 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %803, align 8, !tbaa !470
  %805 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %806 = load i32, i32* %805, align 8, !tbaa !506
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %804, i64 %807
  %809 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %810 = load i32, i32* %809, align 4, !tbaa !500
  br label %1047

811:                                              ; preds = %798
  store i32 0, i32* %799, align 8, !tbaa !485
  %812 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 1
  %813 = load i32, i32* %812, align 4, !tbaa !505
  %814 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  store i32 %813, i32* %814, align 8, !tbaa !506
  br label %815

815:                                              ; preds = %1076, %811
  %816 = phi i32 [ %1078, %1076 ], [ %813, %811 ]
  %817 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 4
  %818 = load i32, i32* %817, align 4, !tbaa !507
  %819 = icmp slt i32 %816, %818
  br i1 %819, label %820, label %1079

820:                                              ; preds = %815
  %821 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %822 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %821, align 8, !tbaa !470
  %823 = sext i32 %816 to i64
  %824 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %822, i64 %823
  %825 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  store i32 0, i32* %825, align 8, !tbaa !489
  %826 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  store i32 0, i32* %826, align 4, !tbaa !490
  %827 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %822, i64 %823, i32 2
  %828 = load i32, i32* %827, align 8, !tbaa !474
  %829 = icmp sgt i32 %828, 0
  br i1 %829, label %830, label %865

830:                                              ; preds = %820
  %831 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %822, i64 %823, i32 3
  %832 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %831, align 8, !tbaa !475
  %833 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %824, i64 0, i32 0
  %834 = load i32, i32* %833, align 8, !tbaa !471
  %835 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %822, i64 %823, i32 1
  %836 = load i32, i32* %835, align 4, !tbaa !473
  %837 = sext i32 %828 to i64
  br label %838

838:                                              ; preds = %838, %830
  %839 = phi i64 [ 0, %830 ], [ %861, %838 ]
  %840 = phi i32 [ 0, %830 ], [ %860, %838 ]
  %841 = phi i32 [ 0, %830 ], [ %856, %838 ]
  %842 = phi i32 [ 0, %830 ], [ %862, %838 ]
  %843 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %832, i64 %839, i32 0
  %844 = load i32, i32* %843, align 4, !tbaa !476
  %845 = xor i32 %842, -1
  %846 = add i32 %828, %845
  %847 = add i32 %846, %844
  %848 = shl i32 %834, %847
  %849 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %832, i64 %839, i32 1
  %850 = load i32, i32* %849, align 4, !tbaa !488
  %851 = add i32 %850, %846
  %852 = shl i32 %836, %851
  %853 = icmp eq i32 %841, 0
  %854 = icmp slt i32 %841, %848
  %855 = select i1 %854, i32 %841, i32 %848
  %856 = select i1 %853, i32 %848, i32 %855
  %857 = icmp eq i32 %840, 0
  %858 = icmp slt i32 %840, %852
  %859 = select i1 %858, i32 %840, i32 %852
  %860 = select i1 %857, i32 %852, i32 %859
  %861 = add nuw nsw i64 %839, 1
  %862 = add nuw nsw i32 %842, 1
  %863 = icmp eq i64 %861, %837
  br i1 %863, label %864, label %838

864:                                              ; preds = %838
  store i32 %856, i32* %825, align 8, !tbaa !489
  store i32 %860, i32* %826, align 4, !tbaa !490
  br label %865

865:                                              ; preds = %864, %820
  %866 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  %867 = load i8, i8* %866, align 8, !tbaa !487
  %868 = icmp eq i8 %867, 0
  br i1 %868, label %872, label %869

869:                                              ; preds = %865
  %870 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 14
  %871 = load i32, i32* %870, align 4, !tbaa !510
  br label %880

872:                                              ; preds = %865
  %873 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %874 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 12
  %875 = bitcast i32* %873 to <4 x i32>*
  %876 = load <4 x i32>, <4 x i32>* %875, align 8, !tbaa !43
  %877 = shufflevector <4 x i32> %876, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %878 = bitcast i32* %874 to <4 x i32>*
  store <4 x i32> %877, <4 x i32>* %878, align 4, !tbaa !43
  %879 = extractelement <4 x i32> %876, i32 1
  br label %880

880:                                              ; preds = %872, %869
  %881 = phi i32 [ %871, %869 ], [ %879, %872 ]
  %882 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  store i32 %881, i32* %882, align 4, !tbaa !511
  br label %883

883:                                              ; preds = %1068, %880
  %884 = phi i32 [ %816, %880 ], [ %896, %1068 ]
  %885 = phi i32 [ %816, %880 ], [ %897, %1068 ]
  %886 = phi i32 [ %881, %880 ], [ %1075, %1068 ]
  %887 = phi %struct.opj_pi_comp* [ %824, %880 ], [ %899, %1068 ]
  %888 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 15
  %889 = load i32, i32* %888, align 4, !tbaa !512
  %890 = icmp slt i32 %886, %889
  br i1 %890, label %891, label %1076

891:                                              ; preds = %883
  %892 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 12
  %893 = load i32, i32* %892, align 4, !tbaa !513
  %894 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  store i32 %893, i32* %894, align 8, !tbaa !514
  br label %895

895:                                              ; preds = %1060, %891
  %896 = phi i32 [ %884, %891 ], [ %908, %1060 ]
  %897 = phi i32 [ %885, %891 ], [ %909, %1060 ]
  %898 = phi i32 [ %893, %891 ], [ %1067, %1060 ]
  %899 = phi %struct.opj_pi_comp* [ %887, %891 ], [ %911, %1060 ]
  %900 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 13
  %901 = load i32, i32* %900, align 4, !tbaa !515
  %902 = icmp slt i32 %898, %901
  br i1 %902, label %903, label %1068

903:                                              ; preds = %895
  %904 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 0
  %905 = load i32, i32* %904, align 4, !tbaa !502
  %906 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  store i32 %905, i32* %906, align 4, !tbaa !503
  br label %907

907:                                              ; preds = %1053, %903
  %908 = phi i32 [ %896, %903 ], [ %1054, %1053 ]
  %909 = phi i32 [ %897, %903 ], [ %1055, %1053 ]
  %910 = phi i32 [ %905, %903 ], [ %1059, %1053 ]
  %911 = phi %struct.opj_pi_comp* [ %899, %903 ], [ %1057, %1053 ]
  %912 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 3
  %913 = load i32, i32* %912, align 4, !tbaa !504
  %914 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %911, i64 0, i32 2
  %915 = load i32, i32* %914, align 8, !tbaa !474
  %916 = icmp slt i32 %913, %915
  %917 = select i1 %916, i32 %913, i32 %915
  %918 = icmp slt i32 %910, %917
  br i1 %918, label %919, label %1060

919:                                              ; preds = %907
  %920 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %911, i64 0, i32 3
  %921 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %920, align 8, !tbaa !475
  %922 = sext i32 %910 to i64
  %923 = xor i32 %910, -1
  %924 = add i32 %915, %923
  %925 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %926 = load i32, i32* %925, align 8, !tbaa !464
  %927 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %911, i64 0, i32 0
  %928 = load i32, i32* %927, align 8, !tbaa !471
  %929 = shl i32 %928, %924
  %930 = add i32 %929, -1
  %931 = add i32 %930, %926
  %932 = sdiv i32 %931, %929
  %933 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 15
  %934 = load i32, i32* %933, align 4, !tbaa !466
  %935 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %911, i64 0, i32 1
  %936 = load i32, i32* %935, align 4, !tbaa !473
  %937 = shl i32 %936, %924
  %938 = add i32 %937, -1
  %939 = add i32 %938, %934
  %940 = sdiv i32 %939, %937
  %941 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 16
  %942 = load i32, i32* %941, align 8, !tbaa !467
  %943 = add i32 %942, %930
  %944 = sdiv i32 %943, %929
  %945 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 17
  %946 = load i32, i32* %945, align 4, !tbaa !468
  %947 = add i32 %946, %938
  %948 = sdiv i32 %947, %937
  %949 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %921, i64 %922, i32 0
  %950 = load i32, i32* %949, align 4, !tbaa !476
  %951 = add nsw i32 %950, %924
  %952 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %921, i64 %922, i32 1
  %953 = load i32, i32* %952, align 4, !tbaa !488
  %954 = add nsw i32 %953, %924
  %955 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %956 = load i32, i32* %955, align 4, !tbaa !511
  %957 = shl i32 %936, %954
  %958 = srem i32 %956, %957
  %959 = icmp eq i32 %958, 0
  br i1 %959, label %967, label %960

960:                                              ; preds = %919
  %961 = icmp eq i32 %956, %934
  br i1 %961, label %962, label %1053

962:                                              ; preds = %960
  %963 = shl i32 %940, %924
  %964 = shl nuw i32 1, %954
  %965 = srem i32 %963, %964
  %966 = icmp eq i32 %965, 0
  br i1 %966, label %1053, label %967

967:                                              ; preds = %962, %919
  %968 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  %969 = load i32, i32* %968, align 8, !tbaa !514
  %970 = shl i32 %928, %951
  %971 = srem i32 %969, %970
  %972 = icmp eq i32 %971, 0
  br i1 %972, label %980, label %973

973:                                              ; preds = %967
  %974 = icmp eq i32 %969, %926
  br i1 %974, label %975, label %1053

975:                                              ; preds = %973
  %976 = shl i32 %932, %924
  %977 = shl nuw i32 1, %951
  %978 = srem i32 %976, %977
  %979 = icmp eq i32 %978, 0
  br i1 %979, label %1053, label %980

980:                                              ; preds = %975, %967
  %981 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %921, i64 %922, i32 2
  %982 = load i32, i32* %981, align 4, !tbaa !478
  %983 = icmp eq i32 %982, 0
  br i1 %983, label %1053, label %984

984:                                              ; preds = %980
  %985 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %921, i64 %922, i32 3
  %986 = load i32, i32* %985, align 4, !tbaa !479
  %987 = icmp eq i32 %986, 0
  %988 = icmp eq i32 %932, %944
  %989 = or i1 %988, %987
  %990 = icmp eq i32 %940, %948
  %991 = or i1 %990, %989
  br i1 %991, label %1053, label %992

992:                                              ; preds = %984
  %993 = add i32 %969, %930
  %994 = sdiv i32 %993, %929
  %995 = ashr i32 %994, %950
  %996 = ashr i32 %932, %950
  %997 = sub i32 %995, %996
  %998 = add i32 %956, %938
  %999 = sdiv i32 %998, %937
  %1000 = ashr i32 %999, %953
  %1001 = ashr i32 %940, %953
  %1002 = sub nsw i32 %1000, %1001
  %1003 = mul nsw i32 %1002, %982
  %1004 = add nsw i32 %997, %1003
  %1005 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  store i32 %1004, i32* %1005, align 8, !tbaa !498
  %1006 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 5
  %1007 = load i32, i32* %1006, align 4, !tbaa !499
  %1008 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  store i32 %1007, i32* %1008, align 4, !tbaa !500
  br label %1009

1009:                                             ; preds = %1047, %992
  %1010 = phi i32 [ %908, %992 ], [ %1048, %1047 ]
  %1011 = phi i32 [ %909, %992 ], [ %1048, %1047 ]
  %1012 = phi i32 [ %1007, %992 ], [ %1052, %1047 ]
  %1013 = phi %struct.opj_pi_comp* [ %911, %992 ], [ %1050, %1047 ]
  %1014 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11, i32 2
  %1015 = load i32, i32* %1014, align 4, !tbaa !501
  %1016 = icmp slt i32 %1012, %1015
  br i1 %1016, label %1020, label %1017

1017:                                             ; preds = %1009
  %1018 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %1019 = load i32, i32* %1018, align 4, !tbaa !503
  br label %1053

1020:                                             ; preds = %1009
  %1021 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 2
  %1022 = load i32, i32* %1021, align 8, !tbaa !483
  %1023 = mul nsw i32 %1022, %1012
  %1024 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %1025 = load i32, i32* %1024, align 4, !tbaa !503
  %1026 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 3
  %1027 = load i32, i32* %1026, align 4, !tbaa !482
  %1028 = mul nsw i32 %1027, %1025
  %1029 = add nsw i32 %1028, %1023
  %1030 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 4
  %1031 = load i32, i32* %1030, align 8, !tbaa !481
  %1032 = mul nsw i32 %1031, %1010
  %1033 = add nsw i32 %1029, %1032
  %1034 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %1035 = load i32, i32* %1034, align 8, !tbaa !498
  %1036 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 5
  %1037 = load i32, i32* %1036, align 4, !tbaa !480
  %1038 = mul nsw i32 %1037, %1035
  %1039 = add nsw i32 %1033, %1038
  %1040 = sext i32 %1039 to i64
  %1041 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %1042 = load i16*, i16** %1041, align 8, !tbaa !484
  %1043 = getelementptr inbounds i16, i16* %1042, i64 %1040
  %1044 = load i16, i16* %1043, align 2, !tbaa !509
  %1045 = icmp eq i16 %1044, 0
  br i1 %1045, label %1046, label %1047

1046:                                             ; preds = %1020
  store i16 1, i16* %1043, align 2, !tbaa !509
  br label %1079

1047:                                             ; preds = %1020, %802
  %1048 = phi i32 [ %1010, %1020 ], [ %806, %802 ]
  %1049 = phi i32 [ %1012, %1020 ], [ %810, %802 ]
  %1050 = phi %struct.opj_pi_comp* [ %1013, %1020 ], [ %808, %802 ]
  %1051 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %1052 = add nsw i32 %1049, 1
  store i32 %1052, i32* %1051, align 4, !tbaa !500
  br label %1009

1053:                                             ; preds = %1017, %984, %980, %975, %973, %962, %960
  %1054 = phi i32 [ %908, %980 ], [ %908, %984 ], [ %1010, %1017 ], [ %908, %975 ], [ %908, %973 ], [ %908, %962 ], [ %908, %960 ]
  %1055 = phi i32 [ %909, %980 ], [ %909, %984 ], [ %1011, %1017 ], [ %909, %975 ], [ %909, %973 ], [ %909, %962 ], [ %909, %960 ]
  %1056 = phi i32 [ %910, %980 ], [ %910, %984 ], [ %1019, %1017 ], [ %910, %975 ], [ %910, %973 ], [ %910, %962 ], [ %910, %960 ]
  %1057 = phi %struct.opj_pi_comp* [ %911, %980 ], [ %911, %984 ], [ %1013, %1017 ], [ %911, %975 ], [ %911, %973 ], [ %911, %962 ], [ %911, %960 ]
  %1058 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %1059 = add nsw i32 %1056, 1
  store i32 %1059, i32* %1058, align 4, !tbaa !503
  br label %907

1060:                                             ; preds = %907
  %1061 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  %1062 = load i32, i32* %1061, align 8, !tbaa !489
  %1063 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  %1064 = load i32, i32* %1063, align 8, !tbaa !514
  %1065 = srem i32 %1064, %1062
  %1066 = add i32 %1064, %1062
  %1067 = sub i32 %1066, %1065
  store i32 %1067, i32* %1063, align 8, !tbaa !514
  br label %895

1068:                                             ; preds = %895
  %1069 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  %1070 = load i32, i32* %1069, align 4, !tbaa !490
  %1071 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %1072 = load i32, i32* %1071, align 4, !tbaa !511
  %1073 = srem i32 %1072, %1070
  %1074 = add i32 %1072, %1070
  %1075 = sub i32 %1074, %1073
  store i32 %1075, i32* %1071, align 4, !tbaa !511
  br label %883

1076:                                             ; preds = %883
  %1077 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %1078 = add nsw i32 %885, 1
  store i32 %1078, i32* %1077, align 8, !tbaa !506
  br label %815

1079:                                             ; preds = %1046, %815, %765, %595, %478, %311, %215, %129, %101, %15, %1
  %1080 = phi i32 [ 0, %1 ], [ 1, %101 ], [ 0, %15 ], [ 1, %215 ], [ 0, %129 ], [ 1, %478 ], [ 0, %311 ], [ 1, %765 ], [ 0, %595 ], [ 1, %1046 ], [ 0, %815 ]
  ret i32 %1080
}

; Function Attrs: nounwind uwtable
define i32 @pi_create_encode(%struct.opj_pi_iterator*, %struct.opj_cp* nocapture readonly, i32, i32, i32, i32, i32, i32) #0 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to [4 x i8]*
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #9
  %12 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 28
  %13 = load %struct.opj_tcp*, %struct.opj_tcp** %12, align 8, !tbaa !139
  %14 = sext i32 %2 to i64
  %15 = sext i32 %3 to i64
  %16 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 10
  store i32 1, i32* %16, align 8, !tbaa !485
  %17 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 9
  %18 = load i32, i32* %17, align 4, !tbaa !231
  %19 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11
  %20 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 9
  store i32 %18, i32* %20, align 4, !tbaa !497
  %21 = load i32, i32* %17, align 4, !tbaa !231
  switch i32 %21, label %27 [
    i32 4, label %22
    i32 0, label %23
    i32 3, label %24
    i32 1, label %25
    i32 2, label %26
    i32 -1, label %270
  ]

22:                                               ; preds = %8
  store i32 1280462915, i32* %9, align 4
  br label %27

23:                                               ; preds = %8
  store i32 1346589260, i32* %9, align 4
  br label %27

24:                                               ; preds = %8
  store i32 1280459600, i32* %9, align 4
  br label %27

25:                                               ; preds = %8
  store i32 1346587730, i32* %9, align 4
  br label %27

26:                                               ; preds = %8
  store i32 1279479890, i32* %9, align 4
  br label %27

27:                                               ; preds = %26, %25, %24, %23, %22, %8
  %28 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 4
  %29 = load i8, i8* %28, align 8, !tbaa !149
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %37, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 0
  %33 = load i32, i32* %32, align 8, !tbaa !250
  %34 = icmp eq i32 %33, 0
  %35 = icmp ne i32 %6, 1
  %36 = and i1 %35, %34
  br i1 %36, label %37, label %67

37:                                               ; preds = %31, %27
  %38 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 17
  %39 = load i32, i32* %38, align 4, !tbaa !492
  %40 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %19, i64 0, i32 0
  store i32 %39, i32* %40, align 4, !tbaa !502
  %41 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 21
  %42 = load i32, i32* %41, align 4, !tbaa !155
  %43 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 3
  store i32 %42, i32* %43, align 4, !tbaa !504
  %44 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 18
  %45 = load i32, i32* %44, align 4, !tbaa !491
  %46 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 1
  store i32 %45, i32* %46, align 4, !tbaa !505
  %47 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 22
  %48 = load i32, i32* %47, align 4, !tbaa !156
  %49 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 4
  store i32 %48, i32* %49, align 4, !tbaa !507
  %50 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 16
  %51 = load i32, i32* %50, align 4, !tbaa !493
  %52 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 5
  store i32 %51, i32* %52, align 4, !tbaa !499
  %53 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 20
  %54 = load i32, i32* %53, align 4, !tbaa !152
  %55 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 2
  store i32 %54, i32* %55, align 4, !tbaa !501
  %56 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 19
  %57 = load i32, i32* %56, align 4, !tbaa !494
  %58 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 6
  store i32 %57, i32* %58, align 4, !tbaa !508
  %59 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 23
  %60 = load i32, i32* %59, align 4, !tbaa !154
  %61 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 7
  store i32 %60, i32* %61, align 4, !tbaa !486
  %62 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 24
  %63 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 12
  %64 = bitcast i32* %62 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4, !tbaa !43
  %66 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 4, !tbaa !43
  br label %270

67:                                               ; preds = %31
  %68 = icmp slt i32 %4, %7
  br i1 %68, label %69, label %270

69:                                               ; preds = %67
  %70 = icmp ult i32 %21, 2
  %71 = icmp eq i32 %4, 0
  %72 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 34
  %73 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 28
  %74 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 12
  %75 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 13
  %76 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 35
  %77 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 29
  %78 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 14
  %79 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 15
  %80 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 25
  %81 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 27
  %82 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 26
  %83 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 24
  %84 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 33
  %85 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 6
  %86 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 7
  %87 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 23
  %88 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 19
  %89 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 30
  %90 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 5
  %91 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 2
  %92 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 20
  %93 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 16
  %94 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 31
  %95 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %19, i64 0, i32 0
  %96 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 3
  %97 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 21
  %98 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 17
  %99 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 32
  %100 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 1
  %101 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %15, i32 11, i32 4
  %102 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 22
  %103 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %14, i32 8, i64 %15, i32 18
  %104 = sext i32 %5 to i64
  %105 = bitcast i32* %83 to <4 x i32>*
  %106 = bitcast i32* %74 to <4 x i32>*
  br label %107

107:                                              ; preds = %266, %69
  %108 = phi i64 [ 3, %69 ], [ %268, %266 ]
  %109 = phi i32 [ 1, %69 ], [ %267, %266 ]
  %110 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 %108
  %111 = load i8, i8* %110, align 1, !tbaa !15
  %112 = sext i8 %111 to i32
  switch i32 %112, label %266 [
    i32 67, label %113
    i32 82, label %135
    i32 76, label %157
    i32 80, label %179
  ]

113:                                              ; preds = %107
  %114 = icmp sgt i64 %108, %104
  br i1 %114, label %115, label %118

115:                                              ; preds = %113
  %116 = load i32, i32* %103, align 4, !tbaa !491
  store i32 %116, i32* %100, align 4, !tbaa !505
  %117 = load i32, i32* %102, align 4, !tbaa !156
  store i32 %117, i32* %101, align 4, !tbaa !507
  br label %266

118:                                              ; preds = %113
  br i1 %71, label %119, label %122

119:                                              ; preds = %118
  %120 = load i32, i32* %103, align 4, !tbaa !491
  store i32 %120, i32* %100, align 4, !tbaa !505
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %101, align 4, !tbaa !507
  store i32 %121, i32* %99, align 4, !tbaa !516
  br label %266

122:                                              ; preds = %118
  %123 = icmp eq i32 %109, 1
  %124 = load i32, i32* %99, align 4, !tbaa !516
  br i1 %123, label %125, label %133

125:                                              ; preds = %122
  %126 = load i32, i32* %102, align 4, !tbaa !156
  %127 = icmp eq i32 %124, %126
  br i1 %127, label %128, label %131

128:                                              ; preds = %125
  %129 = load i32, i32* %103, align 4, !tbaa !491
  store i32 %129, i32* %100, align 4, !tbaa !505
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %101, align 4, !tbaa !507
  store i32 %130, i32* %99, align 4, !tbaa !516
  br label %266

131:                                              ; preds = %125
  store i32 %124, i32* %100, align 4, !tbaa !505
  %132 = add nsw i32 %124, 1
  store i32 %132, i32* %101, align 4, !tbaa !507
  store i32 %132, i32* %99, align 4, !tbaa !516
  br label %266

133:                                              ; preds = %122
  %134 = add nsw i32 %124, -1
  store i32 %134, i32* %100, align 4, !tbaa !505
  store i32 %124, i32* %101, align 4, !tbaa !507
  br label %266

135:                                              ; preds = %107
  %136 = icmp sgt i64 %108, %104
  br i1 %136, label %137, label %140

137:                                              ; preds = %135
  %138 = load i32, i32* %98, align 4, !tbaa !492
  store i32 %138, i32* %95, align 4, !tbaa !502
  %139 = load i32, i32* %97, align 4, !tbaa !155
  store i32 %139, i32* %96, align 4, !tbaa !504
  br label %266

140:                                              ; preds = %135
  br i1 %71, label %141, label %144

141:                                              ; preds = %140
  %142 = load i32, i32* %98, align 4, !tbaa !492
  store i32 %142, i32* %95, align 4, !tbaa !502
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %96, align 4, !tbaa !504
  store i32 %143, i32* %94, align 4, !tbaa !517
  br label %266

144:                                              ; preds = %140
  %145 = icmp eq i32 %109, 1
  %146 = load i32, i32* %94, align 4, !tbaa !517
  br i1 %145, label %147, label %155

147:                                              ; preds = %144
  %148 = load i32, i32* %97, align 4, !tbaa !155
  %149 = icmp eq i32 %146, %148
  br i1 %149, label %150, label %153

150:                                              ; preds = %147
  %151 = load i32, i32* %98, align 4, !tbaa !492
  store i32 %151, i32* %95, align 4, !tbaa !502
  %152 = add nsw i32 %151, 1
  store i32 %152, i32* %96, align 4, !tbaa !504
  store i32 %152, i32* %94, align 4, !tbaa !517
  br label %266

153:                                              ; preds = %147
  store i32 %146, i32* %95, align 4, !tbaa !502
  %154 = add nsw i32 %146, 1
  store i32 %154, i32* %96, align 4, !tbaa !504
  store i32 %154, i32* %94, align 4, !tbaa !517
  br label %266

155:                                              ; preds = %144
  %156 = add nsw i32 %146, -1
  store i32 %156, i32* %95, align 4, !tbaa !502
  store i32 %146, i32* %96, align 4, !tbaa !504
  br label %266

157:                                              ; preds = %107
  %158 = icmp sgt i64 %108, %104
  br i1 %158, label %159, label %162

159:                                              ; preds = %157
  %160 = load i32, i32* %93, align 4, !tbaa !493
  store i32 %160, i32* %90, align 4, !tbaa !499
  %161 = load i32, i32* %92, align 4, !tbaa !152
  store i32 %161, i32* %91, align 4, !tbaa !501
  br label %266

162:                                              ; preds = %157
  br i1 %71, label %163, label %166

163:                                              ; preds = %162
  %164 = load i32, i32* %93, align 4, !tbaa !493
  store i32 %164, i32* %90, align 4, !tbaa !499
  %165 = add nsw i32 %164, 1
  store i32 %165, i32* %91, align 4, !tbaa !501
  store i32 %165, i32* %89, align 4, !tbaa !518
  br label %266

166:                                              ; preds = %162
  %167 = icmp eq i32 %109, 1
  %168 = load i32, i32* %89, align 4, !tbaa !518
  br i1 %167, label %169, label %177

169:                                              ; preds = %166
  %170 = load i32, i32* %92, align 4, !tbaa !152
  %171 = icmp eq i32 %168, %170
  br i1 %171, label %172, label %175

172:                                              ; preds = %169
  %173 = load i32, i32* %93, align 4, !tbaa !493
  store i32 %173, i32* %90, align 4, !tbaa !499
  %174 = add nsw i32 %173, 1
  store i32 %174, i32* %91, align 4, !tbaa !501
  store i32 %174, i32* %89, align 4, !tbaa !518
  br label %266

175:                                              ; preds = %169
  store i32 %168, i32* %90, align 4, !tbaa !499
  %176 = add nsw i32 %168, 1
  store i32 %176, i32* %91, align 4, !tbaa !501
  store i32 %176, i32* %89, align 4, !tbaa !518
  br label %266

177:                                              ; preds = %166
  %178 = add nsw i32 %168, -1
  store i32 %178, i32* %90, align 4, !tbaa !499
  store i32 %168, i32* %91, align 4, !tbaa !501
  br label %266

179:                                              ; preds = %107
  %180 = icmp sgt i64 %108, %104
  br i1 %70, label %181, label %202

181:                                              ; preds = %179
  br i1 %180, label %182, label %185

182:                                              ; preds = %181
  %183 = load i32, i32* %88, align 4, !tbaa !494
  store i32 %183, i32* %85, align 4, !tbaa !508
  %184 = load i32, i32* %87, align 4, !tbaa !154
  store i32 %184, i32* %86, align 4, !tbaa !486
  br label %266

185:                                              ; preds = %181
  br i1 %71, label %186, label %189

186:                                              ; preds = %185
  %187 = load i32, i32* %88, align 4, !tbaa !494
  store i32 %187, i32* %85, align 4, !tbaa !508
  %188 = add nsw i32 %187, 1
  store i32 %188, i32* %86, align 4, !tbaa !486
  store i32 %188, i32* %84, align 4, !tbaa !519
  br label %266

189:                                              ; preds = %185
  %190 = icmp eq i32 %109, 1
  %191 = load i32, i32* %84, align 4, !tbaa !519
  br i1 %190, label %192, label %200

192:                                              ; preds = %189
  %193 = load i32, i32* %87, align 4, !tbaa !154
  %194 = icmp eq i32 %191, %193
  br i1 %194, label %195, label %198

195:                                              ; preds = %192
  %196 = load i32, i32* %88, align 4, !tbaa !494
  store i32 %196, i32* %85, align 4, !tbaa !508
  %197 = add nsw i32 %196, 1
  store i32 %197, i32* %86, align 4, !tbaa !486
  store i32 %197, i32* %84, align 4, !tbaa !519
  br label %266

198:                                              ; preds = %192
  store i32 %191, i32* %85, align 4, !tbaa !508
  %199 = add nsw i32 %191, 1
  store i32 %199, i32* %86, align 4, !tbaa !486
  store i32 %199, i32* %84, align 4, !tbaa !519
  br label %266

200:                                              ; preds = %189
  %201 = add nsw i32 %191, -1
  store i32 %201, i32* %85, align 4, !tbaa !508
  store i32 %191, i32* %86, align 4, !tbaa !486
  br label %266

202:                                              ; preds = %179
  br i1 %180, label %203, label %205

203:                                              ; preds = %202
  %204 = load <4 x i32>, <4 x i32>* %105, align 4, !tbaa !43
  store <4 x i32> %204, <4 x i32>* %106, align 4, !tbaa !43
  br label %266

205:                                              ; preds = %202
  br i1 %71, label %206, label %217

206:                                              ; preds = %205
  %207 = load i32, i32* %83, align 4, !tbaa !520
  %208 = load i32, i32* %82, align 4, !tbaa !521
  store i32 %207, i32* %74, align 4, !tbaa !513
  %209 = load i32, i32* %73, align 4, !tbaa !495
  %210 = add nsw i32 %209, %207
  %211 = srem i32 %207, %209
  %212 = sub i32 %210, %211
  store i32 %212, i32* %75, align 4, !tbaa !515
  store i32 %208, i32* %78, align 4, !tbaa !510
  %213 = load i32, i32* %77, align 4, !tbaa !496
  %214 = add nsw i32 %213, %208
  %215 = srem i32 %208, %213
  %216 = sub i32 %214, %215
  store i32 %216, i32* %79, align 4, !tbaa !512
  store i32 %212, i32* %72, align 4, !tbaa !522
  store i32 %216, i32* %76, align 4, !tbaa !523
  br label %266

217:                                              ; preds = %205
  %218 = icmp eq i32 %109, 1
  %219 = load i32, i32* %72, align 4, !tbaa !522
  br i1 %218, label %220, label %256

220:                                              ; preds = %217
  %221 = load i32, i32* %80, align 4, !tbaa !524
  %222 = icmp slt i32 %219, %221
  br i1 %222, label %246, label %223

223:                                              ; preds = %220
  %224 = load i32, i32* %76, align 4, !tbaa !523
  %225 = load i32, i32* %81, align 4, !tbaa !525
  %226 = icmp slt i32 %224, %225
  br i1 %226, label %232, label %227

227:                                              ; preds = %223
  %228 = load i32, i32* %82, align 4, !tbaa !521
  store i32 %228, i32* %76, align 4, !tbaa !523
  store i32 %228, i32* %78, align 4, !tbaa !510
  %229 = load i32, i32* %77, align 4, !tbaa !496
  %230 = add nsw i32 %229, %228
  %231 = srem i32 %228, %229
  br label %236

232:                                              ; preds = %223
  store i32 %224, i32* %78, align 4, !tbaa !510
  %233 = load i32, i32* %77, align 4, !tbaa !496
  %234 = add nsw i32 %233, %224
  %235 = srem i32 %224, %233
  br label %236

236:                                              ; preds = %232, %227
  %237 = phi i32 [ %235, %232 ], [ %231, %227 ]
  %238 = phi i32 [ %234, %232 ], [ %230, %227 ]
  %239 = phi i32 [ 0, %232 ], [ 1, %227 ]
  %240 = sub i32 %238, %237
  store i32 %240, i32* %79, align 4, !tbaa !512
  store i32 %240, i32* %76, align 4, !tbaa !523
  %241 = load i32, i32* %83, align 4, !tbaa !520
  store i32 %241, i32* %74, align 4, !tbaa !513
  %242 = load i32, i32* %73, align 4, !tbaa !495
  %243 = add nsw i32 %242, %241
  %244 = srem i32 %241, %242
  %245 = sub i32 %243, %244
  store i32 %245, i32* %75, align 4, !tbaa !515
  store i32 %245, i32* %72, align 4, !tbaa !522
  br label %266

246:                                              ; preds = %220
  store i32 %219, i32* %74, align 4, !tbaa !513
  %247 = load i32, i32* %73, align 4, !tbaa !495
  %248 = add nsw i32 %247, %219
  %249 = srem i32 %219, %247
  %250 = sub i32 %248, %249
  store i32 %250, i32* %75, align 4, !tbaa !515
  store i32 %250, i32* %72, align 4, !tbaa !522
  %251 = load i32, i32* %76, align 4, !tbaa !523
  %252 = load i32, i32* %77, align 4, !tbaa !496
  %253 = sub i32 %251, %252
  %254 = srem i32 %251, %252
  %255 = sub i32 %253, %254
  store i32 %255, i32* %78, align 4, !tbaa !510
  store i32 %251, i32* %79, align 4, !tbaa !512
  br label %266

256:                                              ; preds = %217
  %257 = load i32, i32* %73, align 4, !tbaa !495
  %258 = sub i32 %219, %257
  %259 = srem i32 %219, %257
  %260 = sub i32 %258, %259
  store i32 %260, i32* %74, align 4, !tbaa !513
  store i32 %219, i32* %75, align 4, !tbaa !515
  %261 = load i32, i32* %76, align 4, !tbaa !523
  %262 = load i32, i32* %77, align 4, !tbaa !496
  %263 = sub i32 %261, %262
  %264 = srem i32 %261, %262
  %265 = sub i32 %263, %264
  store i32 %265, i32* %78, align 4, !tbaa !510
  store i32 %261, i32* %79, align 4, !tbaa !512
  br label %266

266:                                              ; preds = %256, %246, %236, %206, %203, %200, %198, %195, %186, %182, %177, %175, %172, %163, %159, %155, %153, %150, %141, %137, %133, %131, %128, %119, %115, %107
  %267 = phi i32 [ %109, %107 ], [ %109, %182 ], [ %109, %186 ], [ 1, %195 ], [ 0, %198 ], [ %109, %200 ], [ %109, %203 ], [ %109, %206 ], [ %239, %236 ], [ 0, %246 ], [ %109, %256 ], [ %109, %159 ], [ %109, %163 ], [ 1, %172 ], [ 0, %175 ], [ %109, %177 ], [ %109, %137 ], [ %109, %141 ], [ 1, %150 ], [ 0, %153 ], [ %109, %155 ], [ %109, %115 ], [ %109, %119 ], [ 1, %128 ], [ 0, %131 ], [ %109, %133 ]
  %268 = add nsw i64 %108, -1
  %269 = icmp eq i64 %108, 0
  br i1 %269, label %270, label %107

270:                                              ; preds = %266, %67, %37, %8
  %271 = phi i32 [ 1, %8 ], [ 0, %67 ], [ 0, %37 ], [ 0, %266 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #9
  ret i32 %271
}

; Function Attrs: nounwind uwtable
define noalias %struct.opj_raw* @raw_create() #0 {
  %1 = tail call noalias i8* @malloc(i64 40) #9
  %2 = bitcast i8* %1 to %struct.opj_raw*
  ret %struct.opj_raw* %2
}

; Function Attrs: nounwind uwtable
define void @raw_destroy(%struct.opj_raw*) #0 {
  %2 = icmp eq %struct.opj_raw* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 0
  tail call void @free(i8* %4) #9
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @raw_numbytes(%struct.opj_raw* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 4
  %3 = bitcast i8** %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !526
  %5 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 5
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !528
  %8 = sub i64 %4, %7
  %9 = trunc i64 %8 to i32
  ret i32 %9
}

; Function Attrs: norecurse nounwind uwtable writeonly
define void @raw_init_dec(%struct.opj_raw* nocapture, i8*, i32) #3 {
  %4 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 5
  store i8* %1, i8** %4, align 8, !tbaa !528
  %5 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 2
  store i32 %2, i32* %5, align 8, !tbaa !529
  %6 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 3
  store i32 0, i32* %6, align 4, !tbaa !530
  %7 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 0
  store i8 0, i8* %7, align 8, !tbaa !531
  %8 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 1
  store i32 0, i32* %8, align 4, !tbaa !532
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define i32 @raw_decode(%struct.opj_raw* nocapture) #4 {
  %2 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4, !tbaa !532
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 0
  %7 = load i8, i8* %6, align 8, !tbaa !531
  br label %28

8:                                                ; preds = %1
  store i32 8, i32* %2, align 4, !tbaa !532
  %9 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 4, !tbaa !530
  %11 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 8, !tbaa !529
  %13 = icmp eq i32 %10, %12
  %14 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 0
  br i1 %13, label %15, label %16

15:                                               ; preds = %8
  store i8 -1, i8* %14, align 8, !tbaa !531
  br label %28

16:                                               ; preds = %8
  %17 = load i8, i8* %14, align 8, !tbaa !531
  %18 = icmp eq i8 %17, -1
  br i1 %18, label %19, label %20

19:                                               ; preds = %16
  store i32 7, i32* %2, align 4, !tbaa !532
  br label %20

20:                                               ; preds = %19, %16
  %21 = phi i32 [ 7, %19 ], [ 8, %16 ]
  %22 = getelementptr inbounds %struct.opj_raw, %struct.opj_raw* %0, i64 0, i32 5
  %23 = load i8*, i8** %22, align 8, !tbaa !528
  %24 = zext i32 %10 to i64
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  %26 = load i8, i8* %25, align 1, !tbaa !15
  store i8 %26, i8* %14, align 8, !tbaa !531
  %27 = add i32 %10, 1
  store i32 %27, i32* %9, align 4, !tbaa !530
  br label %28

28:                                               ; preds = %20, %15, %5
  %29 = phi i8 [ -1, %15 ], [ %26, %20 ], [ %7, %5 ]
  %30 = phi i32 [ 8, %15 ], [ %21, %20 ], [ %3, %5 ]
  %31 = add i32 %30, -1
  store i32 %31, i32* %2, align 4, !tbaa !532
  %32 = zext i8 %29 to i32
  %33 = lshr i32 %32, %31
  %34 = and i32 %33, 1
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define noalias %struct.opj_t1* @t1_create(%struct.opj_common_struct*) #0 {
  %2 = tail call noalias i8* @malloc(i64 64) #9
  %3 = icmp eq i8* %2, null
  br i1 %3, label %18, label %4

4:                                                ; preds = %1
  %5 = bitcast i8* %2 to %struct.opj_t1*
  %6 = bitcast i8* %2 to %struct.opj_common_struct**
  store %struct.opj_common_struct* %0, %struct.opj_common_struct** %6, align 8, !tbaa !533
  %7 = tail call %struct.opj_mqc* @mqc_create() #9
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to %struct.opj_mqc**
  store %struct.opj_mqc* %7, %struct.opj_mqc** %9, align 8, !tbaa !535
  %10 = tail call %struct.opj_raw* @raw_create() #9
  %11 = getelementptr inbounds i8, i8* %2, i64 16
  %12 = bitcast i8* %11 to %struct.opj_raw**
  store %struct.opj_raw* %10, %struct.opj_raw** %12, align 8, !tbaa !536
  %13 = getelementptr inbounds i8, i8* %2, i64 24
  %14 = getelementptr inbounds i8, i8* %2, i64 48
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 8, !tbaa !537
  %16 = getelementptr inbounds i8, i8* %2, i64 52
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 4, !tbaa !538
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 16, i1 false)
  br label %18

18:                                               ; preds = %4, %1
  %19 = phi %struct.opj_t1* [ %5, %4 ], [ null, %1 ]
  ret %struct.opj_t1* %19
}

; Function Attrs: nounwind uwtable
define void @t1_destroy(%struct.opj_t1*) #0 {
  %2 = icmp eq %struct.opj_t1* %0, null
  br i1 %2, label %15, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 1
  %5 = load %struct.opj_mqc*, %struct.opj_mqc** %4, align 8, !tbaa !535
  tail call void @mqc_destroy(%struct.opj_mqc* %5) #9
  %6 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 2
  %7 = load %struct.opj_raw*, %struct.opj_raw** %6, align 8, !tbaa !536
  tail call void @raw_destroy(%struct.opj_raw* %7) #9
  %8 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 3
  %9 = bitcast i32** %8 to i8**
  %10 = load i8*, i8** %9, align 8, !tbaa !539
  tail call void @free(i8* %10) #9
  %11 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 4
  %12 = bitcast i16** %11 to i8**
  %13 = load i8*, i8** %12, align 8, !tbaa !540
  tail call void @free(i8* %13) #9
  %14 = bitcast %struct.opj_t1* %0 to i8*
  tail call void @free(i8* %14) #9
  br label %15

15:                                               ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @t1_encode_cblks(%struct.opj_t1* nocapture, %struct.opj_tcd_tile* nocapture, %struct.opj_tcp* nocapture readonly) #0 {
  %4 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %1, i64 0, i32 7
  store double 0.000000e+00, double* %4, align 8, !tbaa !541
  %5 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %1, i64 0, i32 4
  %6 = load i32, i32* %5, align 8, !tbaa !542
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %1712

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %1, i64 0, i32 5
  %10 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %2, i64 0, i32 15
  %11 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 3
  %12 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 5
  %13 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 6
  %14 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %2, i64 0, i32 4
  %15 = getelementptr %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 1
  %16 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 4
  %17 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 9
  br label %18

18:                                               ; preds = %1707, %8
  %19 = phi i32 [ %6, %8 ], [ %1708, %1707 ]
  %20 = phi i64 [ 0, %8 ], [ %1709, %1707 ]
  %21 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %9, align 8, !tbaa !543
  %22 = load %struct.opj_tccp*, %struct.opj_tccp** %10, align 8, !tbaa !162
  %23 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %21, i64 %20, i32 2
  %24 = load i32, i32* %23, align 8, !tbaa !32
  %25 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %21, i64 %20, i32 0
  %26 = load i32, i32* %25, align 8, !tbaa !34
  %27 = sub nsw i32 %24, %26
  %28 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %21, i64 %20, i32 4
  %29 = load i32, i32* %28, align 8, !tbaa !35
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %1707

31:                                               ; preds = %18
  %32 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %21, i64 %20, i32 5
  %33 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %21, i64 %20, i32 6
  %34 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %22, i64 %20, i32 5
  %35 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %22, i64 %20, i32 4
  %36 = trunc i64 %20 to i32
  %37 = trunc i64 %20 to i32
  %38 = sub i32 %24, %26
  %39 = sext i32 %38 to i64
  %40 = sext i32 %38 to i64
  br label %41

41:                                               ; preds = %1700, %31
  %42 = phi i32 [ %29, %31 ], [ %1701, %1700 ]
  %43 = phi i64 [ 0, %31 ], [ %1702, %1700 ]
  %44 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %32, align 8, !tbaa !37
  %45 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %44, i64 %43, i32 6
  %46 = load i32, i32* %45, align 8, !tbaa !544
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %1700

48:                                               ; preds = %41
  %49 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %44, i64 %43, i32 4
  %50 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %44, i64 %43, i32 5
  %51 = add nsw i64 %43, -1
  %52 = load i32, i32* %49, align 8, !tbaa !545
  %53 = load i32, i32* %50, align 4, !tbaa !546
  %54 = trunc i64 %43 to i32
  %55 = xor i32 %54, -1
  br label %56

56:                                               ; preds = %1689, %48
  %57 = phi i32 [ %46, %48 ], [ %1690, %1689 ]
  %58 = phi i32 [ %53, %48 ], [ %1691, %1689 ]
  %59 = phi i32 [ %52, %48 ], [ %1692, %1689 ]
  %60 = phi i32 [ %53, %48 ], [ %1693, %1689 ]
  %61 = phi i32 [ %52, %48 ], [ %1694, %1689 ]
  %62 = phi i64 [ 0, %48 ], [ %1695, %1689 ]
  %63 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %44, i64 %43, i32 7, i64 %62, i32 7
  %64 = mul nsw i32 %60, %61
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %66, label %1689

66:                                               ; preds = %56
  %67 = load float, float* %63, align 4, !tbaa !547
  %68 = fmul float %67, 8.192000e+03
  %69 = tail call float @llvm.floor.f32(float %68)
  %70 = fptosi float %69 to i32
  %71 = sdiv i32 67108864, %70
  %72 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %44, i64 %43, i32 7, i64 %62, i32 5
  %73 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %44, i64 %43, i32 7, i64 %62, i32 0
  %74 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %44, i64 %43, i32 7, i64 %62, i32 1
  %75 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %44, i64 %43, i32 7, i64 %62, i32 4
  %76 = sext i32 %71 to i64
  %77 = insertelement <4 x i64> undef, i64 %76, i32 0
  %78 = shufflevector <4 x i64> %77, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %79

79:                                               ; preds = %1680, %66
  %80 = phi i32 [ %58, %66 ], [ %1681, %1680 ]
  %81 = phi i32 [ %59, %66 ], [ %1682, %1680 ]
  %82 = phi i64 [ 0, %66 ], [ %1683, %1680 ]
  %83 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %72, align 8, !tbaa !549
  %84 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %83, i64 %82, i32 4
  %85 = load i32, i32* %84, align 8, !tbaa !550
  %86 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %83, i64 %82, i32 5
  %87 = load i32, i32* %86, align 4, !tbaa !552
  %88 = mul nsw i32 %87, %85
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %90, label %1680

90:                                               ; preds = %79
  %91 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %83, i64 %82, i32 6, i32 0
  br label %92

92:                                               ; preds = %1670, %90
  %93 = phi i64 [ 0, %90 ], [ %1671, %1670 ]
  %94 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %91, align 8, !tbaa !15
  %95 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %94, i64 %93, i32 3
  %96 = load i32, i32* %95, align 8, !tbaa !553
  %97 = load i32, i32* %73, align 8, !tbaa !555
  %98 = sub nsw i32 %96, %97
  %99 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %94, i64 %93, i32 4
  %100 = load i32, i32* %99, align 4, !tbaa !556
  %101 = load i32, i32* %74, align 4, !tbaa !557
  %102 = sub nsw i32 %100, %101
  %103 = load i32, i32* %75, align 8, !tbaa !558
  %104 = and i32 %103, 1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %114, label %106

106:                                              ; preds = %92
  %107 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %32, align 8, !tbaa !37
  %108 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %107, i64 %51, i32 2
  %109 = load i32, i32* %108, align 8, !tbaa !38
  %110 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %107, i64 %51, i32 0
  %111 = load i32, i32* %110, align 8, !tbaa !40
  %112 = add i32 %109, %98
  %113 = sub i32 %112, %111
  br label %114

114:                                              ; preds = %106, %92
  %115 = phi i32 [ %113, %106 ], [ %98, %92 ]
  %116 = and i32 %103, 2
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %126, label %118

118:                                              ; preds = %114
  %119 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %32, align 8, !tbaa !37
  %120 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %119, i64 %51, i32 3
  %121 = load i32, i32* %120, align 4, !tbaa !41
  %122 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %119, i64 %51, i32 1
  %123 = load i32, i32* %122, align 4, !tbaa !42
  %124 = add i32 %121, %102
  %125 = sub i32 %124, %123
  br label %126

126:                                              ; preds = %118, %114
  %127 = phi i32 [ %125, %118 ], [ %102, %114 ]
  %128 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %94, i64 %93, i32 5
  %129 = load i32, i32* %128, align 8, !tbaa !559
  %130 = sub nsw i32 %129, %96
  %131 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %94, i64 %93, i32 6
  %132 = load i32, i32* %131, align 4, !tbaa !560
  %133 = sub nsw i32 %132, %100
  %134 = tail call fastcc i32 @allocate_buffers(%struct.opj_t1* %0, i32 %130, i32 %133)
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %1712, label %136

136:                                              ; preds = %126
  %137 = load i32*, i32** %11, align 8, !tbaa !539
  %138 = load i32, i32* %12, align 8, !tbaa !561
  %139 = load i32, i32* %13, align 4, !tbaa !562
  %140 = load i32*, i32** %33, align 8, !tbaa !36
  %141 = mul nsw i32 %127, %27
  %142 = add nsw i32 %141, %115
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i32, i32* %140, i64 %143
  %145 = load i32, i32* %34, align 4, !tbaa !97
  %146 = icmp eq i32 %145, 1
  %147 = icmp sgt i32 %139, 0
  br i1 %146, label %296, label %148

148:                                              ; preds = %136
  br i1 %147, label %149, label %428

149:                                              ; preds = %148
  %150 = icmp sgt i32 %138, 0
  br i1 %150, label %151, label %426

151:                                              ; preds = %149
  %152 = sext i32 %138 to i64
  %153 = zext i32 %138 to i64
  %154 = zext i32 %139 to i64
  %155 = add nsw i64 %143, %153
  %156 = and i64 %153, 4294967292
  %157 = add nsw i64 %156, -4
  %158 = lshr exact i64 %157, 2
  %159 = add nuw nsw i64 %158, 1
  %160 = icmp ult i32 %138, 4
  %161 = and i64 %153, 4294967292
  %162 = and i64 %159, 1
  %163 = icmp eq i64 %157, 0
  %164 = sub nuw nsw i64 %159, %162
  %165 = icmp eq i64 %162, 0
  %166 = icmp eq i64 %161, %153
  %167 = and i64 %153, 1
  %168 = icmp eq i64 %167, 0
  %169 = sub nsw i64 0, %153
  br label %170

170:                                              ; preds = %292, %151
  %171 = phi i64 [ 0, %151 ], [ %293, %292 ]
  %172 = phi i32 [ 0, %151 ], [ %294, %292 ]
  %173 = mul i64 %171, %152
  %174 = mul i64 %171, %40
  %175 = mul nsw i32 %172, %27
  %176 = mul nsw i64 %171, %152
  %177 = sext i32 %175 to i64
  br i1 %160, label %243, label %178

178:                                              ; preds = %170
  %179 = add i64 %155, %174
  %180 = getelementptr i32, i32* %140, i64 %179
  %181 = add i64 %174, %143
  %182 = getelementptr i32, i32* %140, i64 %181
  %183 = add i64 %173, %153
  %184 = getelementptr i32, i32* %137, i64 %183
  %185 = getelementptr i32, i32* %137, i64 %173
  %186 = icmp ult i32* %185, %180
  %187 = icmp ult i32* %182, %184
  %188 = and i1 %186, %187
  br i1 %188, label %243, label %189

189:                                              ; preds = %178
  br i1 %163, label %225, label %190

190:                                              ; preds = %190, %189
  %191 = phi i64 [ %222, %190 ], [ 0, %189 ]
  %192 = phi i64 [ %223, %190 ], [ %164, %189 ]
  %193 = add nsw i64 %191, %177
  %194 = getelementptr inbounds i32, i32* %144, i64 %193
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4, !tbaa !43, !alias.scope !563
  %197 = sext <4 x i32> %196 to <4 x i64>
  %198 = mul nsw <4 x i64> %78, %197
  %199 = and <4 x i64> %198, <i64 4096, i64 4096, i64 4096, i64 4096>
  %200 = add nsw <4 x i64> %199, %198
  %201 = lshr <4 x i64> %200, <i64 13, i64 13, i64 13, i64 13>
  %202 = trunc <4 x i64> %201 to <4 x i32>
  %203 = ashr <4 x i32> %202, <i32 5, i32 5, i32 5, i32 5>
  %204 = add nsw i64 %191, %176
  %205 = getelementptr inbounds i32, i32* %137, i64 %204
  %206 = bitcast i32* %205 to <4 x i32>*
  store <4 x i32> %203, <4 x i32>* %206, align 4, !tbaa !43, !alias.scope !566, !noalias !563
  %207 = or i64 %191, 4
  %208 = add nsw i64 %207, %177
  %209 = getelementptr inbounds i32, i32* %144, i64 %208
  %210 = bitcast i32* %209 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 4, !tbaa !43, !alias.scope !563
  %212 = sext <4 x i32> %211 to <4 x i64>
  %213 = mul nsw <4 x i64> %78, %212
  %214 = and <4 x i64> %213, <i64 4096, i64 4096, i64 4096, i64 4096>
  %215 = add nsw <4 x i64> %214, %213
  %216 = lshr <4 x i64> %215, <i64 13, i64 13, i64 13, i64 13>
  %217 = trunc <4 x i64> %216 to <4 x i32>
  %218 = ashr <4 x i32> %217, <i32 5, i32 5, i32 5, i32 5>
  %219 = add nsw i64 %207, %176
  %220 = getelementptr inbounds i32, i32* %137, i64 %219
  %221 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> %218, <4 x i32>* %221, align 4, !tbaa !43, !alias.scope !566, !noalias !563
  %222 = add i64 %191, 8
  %223 = add i64 %192, -2
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %190, !llvm.loop !568

225:                                              ; preds = %190, %189
  %226 = phi i64 [ 0, %189 ], [ %222, %190 ]
  br i1 %165, label %242, label %227

227:                                              ; preds = %225
  %228 = add nsw i64 %226, %177
  %229 = getelementptr inbounds i32, i32* %144, i64 %228
  %230 = bitcast i32* %229 to <4 x i32>*
  %231 = load <4 x i32>, <4 x i32>* %230, align 4, !tbaa !43, !alias.scope !563
  %232 = sext <4 x i32> %231 to <4 x i64>
  %233 = mul nsw <4 x i64> %78, %232
  %234 = and <4 x i64> %233, <i64 4096, i64 4096, i64 4096, i64 4096>
  %235 = add nsw <4 x i64> %234, %233
  %236 = lshr <4 x i64> %235, <i64 13, i64 13, i64 13, i64 13>
  %237 = trunc <4 x i64> %236 to <4 x i32>
  %238 = ashr <4 x i32> %237, <i32 5, i32 5, i32 5, i32 5>
  %239 = add nsw i64 %226, %176
  %240 = getelementptr inbounds i32, i32* %137, i64 %239
  %241 = bitcast i32* %240 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %241, align 4, !tbaa !43, !alias.scope !566, !noalias !563
  br label %242

242:                                              ; preds = %227, %225
  br i1 %166, label %292, label %243

243:                                              ; preds = %242, %178, %170
  %244 = phi i64 [ 0, %178 ], [ 0, %170 ], [ %161, %242 ]
  %245 = xor i64 %244, -1
  br i1 %168, label %260, label %246

246:                                              ; preds = %243
  %247 = add nsw i64 %244, %177
  %248 = getelementptr inbounds i32, i32* %144, i64 %247
  %249 = load i32, i32* %248, align 4, !tbaa !43
  %250 = sext i32 %249 to i64
  %251 = mul nsw i64 %250, %76
  %252 = and i64 %251, 4096
  %253 = add nsw i64 %252, %251
  %254 = lshr i64 %253, 13
  %255 = trunc i64 %254 to i32
  %256 = ashr i32 %255, 5
  %257 = add nsw i64 %244, %176
  %258 = getelementptr inbounds i32, i32* %137, i64 %257
  store i32 %256, i32* %258, align 4, !tbaa !43
  %259 = or i64 %244, 1
  br label %260

260:                                              ; preds = %246, %243
  %261 = phi i64 [ %259, %246 ], [ %244, %243 ]
  %262 = icmp eq i64 %245, %169
  br i1 %262, label %292, label %263

263:                                              ; preds = %263, %260
  %264 = phi i64 [ %290, %263 ], [ %261, %260 ]
  %265 = add nsw i64 %264, %177
  %266 = getelementptr inbounds i32, i32* %144, i64 %265
  %267 = load i32, i32* %266, align 4, !tbaa !43
  %268 = sext i32 %267 to i64
  %269 = mul nsw i64 %268, %76
  %270 = and i64 %269, 4096
  %271 = add nsw i64 %270, %269
  %272 = lshr i64 %271, 13
  %273 = trunc i64 %272 to i32
  %274 = ashr i32 %273, 5
  %275 = add nsw i64 %264, %176
  %276 = getelementptr inbounds i32, i32* %137, i64 %275
  store i32 %274, i32* %276, align 4, !tbaa !43
  %277 = add nuw nsw i64 %264, 1
  %278 = add nsw i64 %277, %177
  %279 = getelementptr inbounds i32, i32* %144, i64 %278
  %280 = load i32, i32* %279, align 4, !tbaa !43
  %281 = sext i32 %280 to i64
  %282 = mul nsw i64 %281, %76
  %283 = and i64 %282, 4096
  %284 = add nsw i64 %283, %282
  %285 = lshr i64 %284, 13
  %286 = trunc i64 %285 to i32
  %287 = ashr i32 %286, 5
  %288 = add nsw i64 %277, %176
  %289 = getelementptr inbounds i32, i32* %137, i64 %288
  store i32 %287, i32* %289, align 4, !tbaa !43
  %290 = add nsw i64 %264, 2
  %291 = icmp eq i64 %290, %153
  br i1 %291, label %292, label %263, !llvm.loop !569

292:                                              ; preds = %263, %260, %242
  %293 = add nuw nsw i64 %171, 1
  %294 = add nuw nsw i32 %172, 1
  %295 = icmp eq i64 %293, %154
  br i1 %295, label %426, label %170

296:                                              ; preds = %136
  br i1 %147, label %297, label %428

297:                                              ; preds = %296
  %298 = icmp sgt i32 %138, 0
  br i1 %298, label %299, label %426

299:                                              ; preds = %297
  %300 = sext i32 %138 to i64
  %301 = zext i32 %138 to i64
  %302 = zext i32 %139 to i64
  %303 = add nsw i64 %143, %301
  %304 = and i64 %301, 4294967288
  %305 = add nsw i64 %304, -8
  %306 = lshr exact i64 %305, 3
  %307 = add nuw nsw i64 %306, 1
  %308 = icmp ult i32 %138, 8
  %309 = and i64 %301, 4294967288
  %310 = and i64 %307, 1
  %311 = icmp eq i64 %305, 0
  %312 = sub nuw nsw i64 %307, %310
  %313 = icmp eq i64 %310, 0
  %314 = icmp eq i64 %309, %301
  %315 = and i64 %301, 1
  %316 = icmp eq i64 %315, 0
  %317 = sub nsw i64 0, %301
  br label %318

318:                                              ; preds = %422, %299
  %319 = phi i64 [ 0, %299 ], [ %423, %422 ]
  %320 = phi i32 [ 0, %299 ], [ %424, %422 ]
  %321 = mul i64 %319, %300
  %322 = mul i64 %319, %39
  %323 = mul nsw i32 %320, %27
  %324 = mul nsw i64 %319, %300
  %325 = sext i32 %323 to i64
  br i1 %308, label %391, label %326

326:                                              ; preds = %318
  %327 = add i64 %303, %322
  %328 = getelementptr i32, i32* %140, i64 %327
  %329 = add i64 %322, %143
  %330 = getelementptr i32, i32* %140, i64 %329
  %331 = add i64 %321, %301
  %332 = getelementptr i32, i32* %137, i64 %331
  %333 = getelementptr i32, i32* %137, i64 %321
  %334 = icmp ult i32* %333, %328
  %335 = icmp ult i32* %330, %332
  %336 = and i1 %334, %335
  br i1 %336, label %391, label %337

337:                                              ; preds = %326
  br i1 %311, label %373, label %338

338:                                              ; preds = %338, %337
  %339 = phi i64 [ %370, %338 ], [ 0, %337 ]
  %340 = phi i64 [ %371, %338 ], [ %312, %337 ]
  %341 = add nsw i64 %339, %325
  %342 = getelementptr inbounds i32, i32* %144, i64 %341
  %343 = bitcast i32* %342 to <4 x i32>*
  %344 = load <4 x i32>, <4 x i32>* %343, align 4, !tbaa !43, !alias.scope !570
  %345 = getelementptr inbounds i32, i32* %342, i64 4
  %346 = bitcast i32* %345 to <4 x i32>*
  %347 = load <4 x i32>, <4 x i32>* %346, align 4, !tbaa !43, !alias.scope !570
  %348 = shl <4 x i32> %344, <i32 6, i32 6, i32 6, i32 6>
  %349 = shl <4 x i32> %347, <i32 6, i32 6, i32 6, i32 6>
  %350 = add nsw i64 %339, %324
  %351 = getelementptr inbounds i32, i32* %137, i64 %350
  %352 = bitcast i32* %351 to <4 x i32>*
  store <4 x i32> %348, <4 x i32>* %352, align 4, !tbaa !43, !alias.scope !573, !noalias !570
  %353 = getelementptr inbounds i32, i32* %351, i64 4
  %354 = bitcast i32* %353 to <4 x i32>*
  store <4 x i32> %349, <4 x i32>* %354, align 4, !tbaa !43, !alias.scope !573, !noalias !570
  %355 = or i64 %339, 8
  %356 = add nsw i64 %355, %325
  %357 = getelementptr inbounds i32, i32* %144, i64 %356
  %358 = bitcast i32* %357 to <4 x i32>*
  %359 = load <4 x i32>, <4 x i32>* %358, align 4, !tbaa !43, !alias.scope !570
  %360 = getelementptr inbounds i32, i32* %357, i64 4
  %361 = bitcast i32* %360 to <4 x i32>*
  %362 = load <4 x i32>, <4 x i32>* %361, align 4, !tbaa !43, !alias.scope !570
  %363 = shl <4 x i32> %359, <i32 6, i32 6, i32 6, i32 6>
  %364 = shl <4 x i32> %362, <i32 6, i32 6, i32 6, i32 6>
  %365 = add nsw i64 %355, %324
  %366 = getelementptr inbounds i32, i32* %137, i64 %365
  %367 = bitcast i32* %366 to <4 x i32>*
  store <4 x i32> %363, <4 x i32>* %367, align 4, !tbaa !43, !alias.scope !573, !noalias !570
  %368 = getelementptr inbounds i32, i32* %366, i64 4
  %369 = bitcast i32* %368 to <4 x i32>*
  store <4 x i32> %364, <4 x i32>* %369, align 4, !tbaa !43, !alias.scope !573, !noalias !570
  %370 = add i64 %339, 16
  %371 = add i64 %340, -2
  %372 = icmp eq i64 %371, 0
  br i1 %372, label %373, label %338, !llvm.loop !575

373:                                              ; preds = %338, %337
  %374 = phi i64 [ 0, %337 ], [ %370, %338 ]
  br i1 %313, label %390, label %375

375:                                              ; preds = %373
  %376 = add nsw i64 %374, %325
  %377 = getelementptr inbounds i32, i32* %144, i64 %376
  %378 = bitcast i32* %377 to <4 x i32>*
  %379 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !43, !alias.scope !570
  %380 = getelementptr inbounds i32, i32* %377, i64 4
  %381 = bitcast i32* %380 to <4 x i32>*
  %382 = load <4 x i32>, <4 x i32>* %381, align 4, !tbaa !43, !alias.scope !570
  %383 = shl <4 x i32> %379, <i32 6, i32 6, i32 6, i32 6>
  %384 = shl <4 x i32> %382, <i32 6, i32 6, i32 6, i32 6>
  %385 = add nsw i64 %374, %324
  %386 = getelementptr inbounds i32, i32* %137, i64 %385
  %387 = bitcast i32* %386 to <4 x i32>*
  store <4 x i32> %383, <4 x i32>* %387, align 4, !tbaa !43, !alias.scope !573, !noalias !570
  %388 = getelementptr inbounds i32, i32* %386, i64 4
  %389 = bitcast i32* %388 to <4 x i32>*
  store <4 x i32> %384, <4 x i32>* %389, align 4, !tbaa !43, !alias.scope !573, !noalias !570
  br label %390

390:                                              ; preds = %375, %373
  br i1 %314, label %422, label %391

391:                                              ; preds = %390, %326, %318
  %392 = phi i64 [ 0, %326 ], [ 0, %318 ], [ %309, %390 ]
  %393 = xor i64 %392, -1
  br i1 %316, label %402, label %394

394:                                              ; preds = %391
  %395 = add nsw i64 %392, %325
  %396 = getelementptr inbounds i32, i32* %144, i64 %395
  %397 = load i32, i32* %396, align 4, !tbaa !43
  %398 = shl i32 %397, 6
  %399 = add nsw i64 %392, %324
  %400 = getelementptr inbounds i32, i32* %137, i64 %399
  store i32 %398, i32* %400, align 4, !tbaa !43
  %401 = or i64 %392, 1
  br label %402

402:                                              ; preds = %394, %391
  %403 = phi i64 [ %401, %394 ], [ %392, %391 ]
  %404 = icmp eq i64 %393, %317
  br i1 %404, label %422, label %405

405:                                              ; preds = %405, %402
  %406 = phi i64 [ %420, %405 ], [ %403, %402 ]
  %407 = add nsw i64 %406, %325
  %408 = getelementptr inbounds i32, i32* %144, i64 %407
  %409 = load i32, i32* %408, align 4, !tbaa !43
  %410 = shl i32 %409, 6
  %411 = add nsw i64 %406, %324
  %412 = getelementptr inbounds i32, i32* %137, i64 %411
  store i32 %410, i32* %412, align 4, !tbaa !43
  %413 = add nuw nsw i64 %406, 1
  %414 = add nsw i64 %413, %325
  %415 = getelementptr inbounds i32, i32* %144, i64 %414
  %416 = load i32, i32* %415, align 4, !tbaa !43
  %417 = shl i32 %416, 6
  %418 = add nsw i64 %413, %324
  %419 = getelementptr inbounds i32, i32* %137, i64 %418
  store i32 %417, i32* %419, align 4, !tbaa !43
  %420 = add nsw i64 %406, 2
  %421 = icmp eq i64 %420, %301
  br i1 %421, label %422, label %405, !llvm.loop !576

422:                                              ; preds = %405, %402, %390
  %423 = add nuw nsw i64 %319, 1
  %424 = add nuw nsw i32 %320, 1
  %425 = icmp eq i64 %423, %302
  br i1 %425, label %426, label %318

426:                                              ; preds = %422, %297, %292, %149
  %427 = load i32, i32* %34, align 4, !tbaa !97
  br label %428

428:                                              ; preds = %426, %296, %148
  %429 = phi i32 [ %427, %426 ], [ %145, %148 ], [ 1, %296 ]
  %430 = load i32, i32* %75, align 8, !tbaa !558
  %431 = load i32, i32* %28, align 8, !tbaa !35
  %432 = add i32 %431, %55
  %433 = load float, float* %63, align 4, !tbaa !547
  %434 = fpext float %433 to double
  %435 = load i32, i32* %35, align 4, !tbaa !243
  %436 = load i32, i32* %5, align 8, !tbaa !542
  %437 = load i32, i32* %14, align 8, !tbaa !220
  %438 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %439 = load i32, i32* %12, align 8, !tbaa !561
  %440 = load i32, i32* %13, align 4, !tbaa !562
  %441 = mul nsw i32 %440, %439
  %442 = icmp sgt i32 %441, 0
  br i1 %442, label %443, label %561

443:                                              ; preds = %428
  %444 = sext i32 %441 to i64
  %445 = icmp ult i32 %441, 8
  br i1 %445, label %533, label %446

446:                                              ; preds = %443
  %447 = and i64 %444, -8
  %448 = add nsw i64 %447, -8
  %449 = lshr exact i64 %448, 3
  %450 = add nuw nsw i64 %449, 1
  %451 = and i64 %450, 1
  %452 = icmp eq i64 %448, 0
  br i1 %452, label %496, label %453

453:                                              ; preds = %446
  %454 = sub nuw nsw i64 %450, %451
  br label %455

455:                                              ; preds = %455, %453
  %456 = phi i64 [ 0, %453 ], [ %493, %455 ]
  %457 = phi <4 x i32> [ zeroinitializer, %453 ], [ %491, %455 ]
  %458 = phi <4 x i32> [ zeroinitializer, %453 ], [ %492, %455 ]
  %459 = phi i64 [ %454, %453 ], [ %494, %455 ]
  %460 = getelementptr inbounds i32, i32* %137, i64 %456
  %461 = bitcast i32* %460 to <4 x i32>*
  %462 = load <4 x i32>, <4 x i32>* %461, align 4, !tbaa !43
  %463 = getelementptr inbounds i32, i32* %460, i64 4
  %464 = bitcast i32* %463 to <4 x i32>*
  %465 = load <4 x i32>, <4 x i32>* %464, align 4, !tbaa !43
  %466 = icmp slt <4 x i32> %462, zeroinitializer
  %467 = icmp slt <4 x i32> %465, zeroinitializer
  %468 = sub nsw <4 x i32> zeroinitializer, %462
  %469 = sub nsw <4 x i32> zeroinitializer, %465
  %470 = select <4 x i1> %466, <4 x i32> %468, <4 x i32> %462
  %471 = select <4 x i1> %467, <4 x i32> %469, <4 x i32> %465
  %472 = icmp sgt <4 x i32> %457, %470
  %473 = icmp sgt <4 x i32> %458, %471
  %474 = select <4 x i1> %472, <4 x i32> %457, <4 x i32> %470
  %475 = select <4 x i1> %473, <4 x i32> %458, <4 x i32> %471
  %476 = or i64 %456, 8
  %477 = getelementptr inbounds i32, i32* %137, i64 %476
  %478 = bitcast i32* %477 to <4 x i32>*
  %479 = load <4 x i32>, <4 x i32>* %478, align 4, !tbaa !43
  %480 = getelementptr inbounds i32, i32* %477, i64 4
  %481 = bitcast i32* %480 to <4 x i32>*
  %482 = load <4 x i32>, <4 x i32>* %481, align 4, !tbaa !43
  %483 = icmp slt <4 x i32> %479, zeroinitializer
  %484 = icmp slt <4 x i32> %482, zeroinitializer
  %485 = sub nsw <4 x i32> zeroinitializer, %479
  %486 = sub nsw <4 x i32> zeroinitializer, %482
  %487 = select <4 x i1> %483, <4 x i32> %485, <4 x i32> %479
  %488 = select <4 x i1> %484, <4 x i32> %486, <4 x i32> %482
  %489 = icmp sgt <4 x i32> %474, %487
  %490 = icmp sgt <4 x i32> %475, %488
  %491 = select <4 x i1> %489, <4 x i32> %474, <4 x i32> %487
  %492 = select <4 x i1> %490, <4 x i32> %475, <4 x i32> %488
  %493 = add i64 %456, 16
  %494 = add i64 %459, -2
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %496, label %455, !llvm.loop !577

496:                                              ; preds = %455, %446
  %497 = phi <4 x i32> [ undef, %446 ], [ %491, %455 ]
  %498 = phi <4 x i32> [ undef, %446 ], [ %492, %455 ]
  %499 = phi i64 [ 0, %446 ], [ %493, %455 ]
  %500 = phi <4 x i32> [ zeroinitializer, %446 ], [ %491, %455 ]
  %501 = phi <4 x i32> [ zeroinitializer, %446 ], [ %492, %455 ]
  %502 = icmp eq i64 %451, 0
  br i1 %502, label %520, label %503

503:                                              ; preds = %496
  %504 = getelementptr inbounds i32, i32* %137, i64 %499
  %505 = bitcast i32* %504 to <4 x i32>*
  %506 = load <4 x i32>, <4 x i32>* %505, align 4, !tbaa !43
  %507 = getelementptr inbounds i32, i32* %504, i64 4
  %508 = bitcast i32* %507 to <4 x i32>*
  %509 = load <4 x i32>, <4 x i32>* %508, align 4, !tbaa !43
  %510 = icmp slt <4 x i32> %506, zeroinitializer
  %511 = icmp slt <4 x i32> %509, zeroinitializer
  %512 = sub nsw <4 x i32> zeroinitializer, %506
  %513 = sub nsw <4 x i32> zeroinitializer, %509
  %514 = select <4 x i1> %510, <4 x i32> %512, <4 x i32> %506
  %515 = select <4 x i1> %511, <4 x i32> %513, <4 x i32> %509
  %516 = icmp sgt <4 x i32> %501, %515
  %517 = select <4 x i1> %516, <4 x i32> %501, <4 x i32> %515
  %518 = icmp sgt <4 x i32> %500, %514
  %519 = select <4 x i1> %518, <4 x i32> %500, <4 x i32> %514
  br label %520

520:                                              ; preds = %503, %496
  %521 = phi <4 x i32> [ %497, %496 ], [ %519, %503 ]
  %522 = phi <4 x i32> [ %498, %496 ], [ %517, %503 ]
  %523 = icmp sgt <4 x i32> %521, %522
  %524 = select <4 x i1> %523, <4 x i32> %521, <4 x i32> %522
  %525 = shufflevector <4 x i32> %524, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %526 = icmp sgt <4 x i32> %524, %525
  %527 = select <4 x i1> %526, <4 x i32> %524, <4 x i32> %525
  %528 = shufflevector <4 x i32> %527, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %529 = icmp sgt <4 x i32> %527, %528
  %530 = select <4 x i1> %529, <4 x i32> %527, <4 x i32> %528
  %531 = extractelement <4 x i32> %530, i32 0
  %532 = icmp eq i64 %447, %444
  br i1 %532, label %548, label %533

533:                                              ; preds = %520, %443
  %534 = phi i64 [ 0, %443 ], [ %447, %520 ]
  %535 = phi i32 [ 0, %443 ], [ %531, %520 ]
  br label %536

536:                                              ; preds = %536, %533
  %537 = phi i64 [ %546, %536 ], [ %534, %533 ]
  %538 = phi i32 [ %545, %536 ], [ %535, %533 ]
  %539 = getelementptr inbounds i32, i32* %137, i64 %537
  %540 = load i32, i32* %539, align 4, !tbaa !43
  %541 = icmp slt i32 %540, 0
  %542 = sub nsw i32 0, %540
  %543 = select i1 %541, i32 %542, i32 %540
  %544 = icmp sgt i32 %538, %543
  %545 = select i1 %544, i32 %538, i32 %543
  %546 = add nuw nsw i64 %537, 1
  %547 = icmp eq i64 %546, %444
  br i1 %547, label %548, label %536, !llvm.loop !578

548:                                              ; preds = %536, %520
  %549 = phi i32 [ %531, %520 ], [ %545, %536 ]
  %550 = icmp eq i32 %549, 0
  br i1 %550, label %561, label %551

551:                                              ; preds = %548
  %552 = icmp sgt i32 %549, 1
  br i1 %552, label %553, label %561

553:                                              ; preds = %553, %551
  %554 = phi i32 [ %557, %553 ], [ 0, %551 ]
  %555 = phi i32 [ %556, %553 ], [ %549, %551 ]
  %556 = lshr i32 %555, 1
  %557 = add nuw nsw i32 %554, 1
  %558 = icmp ugt i32 %555, 3
  br i1 %558, label %553, label %559

559:                                              ; preds = %553
  %560 = add nsw i32 %554, -4
  br label %561

561:                                              ; preds = %559, %551, %548, %428
  %562 = phi i32 [ 0, %548 ], [ -5, %551 ], [ %560, %559 ], [ 0, %428 ]
  %563 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %94, i64 %93, i32 7
  store i32 %562, i32* %563, align 8, !tbaa !579
  tail call void @mqc_resetstates(%struct.opj_mqc* %438) #9
  tail call void @mqc_setstate(%struct.opj_mqc* %438, i32 18, i32 0, i32 46) #9
  tail call void @mqc_setstate(%struct.opj_mqc* %438, i32 17, i32 0, i32 3) #9
  tail call void @mqc_setstate(%struct.opj_mqc* %438, i32 0, i32 0, i32 4) #9
  %564 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %94, i64 %93, i32 0
  %565 = load i8*, i8** %564, align 8, !tbaa !580
  tail call void @mqc_init_enc(%struct.opj_mqc* %438, i8* %565) #9
  %566 = icmp sgt i32 %562, 0
  br i1 %566, label %567, label %1618

567:                                              ; preds = %561
  %568 = add nsw i32 %562, -1
  %569 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %94, i64 %93, i32 2
  %570 = and i32 %435, 1
  %571 = icmp ne i32 %570, 0
  %572 = and i32 %435, 8
  %573 = icmp eq i32 %572, 0
  %574 = shl i32 %430, 8
  %575 = and i32 %435, 32
  %576 = icmp eq i32 %575, 0
  %577 = icmp eq i32 %429, 1
  %578 = icmp ne i32 %437, 0
  %579 = icmp eq i32 %436, 3
  %580 = and i1 %579, %578
  %581 = and i32 %435, 4
  %582 = icmp eq i32 %581, 0
  %583 = icmp eq i32 %570, 0
  %584 = and i32 %435, 2
  %585 = icmp eq i32 %584, 0
  br label %586

586:                                              ; preds = %1613, %567
  %587 = phi i64 [ 0, %567 ], [ %1614, %1613 ]
  %588 = phi double [ 0.000000e+00, %567 ], [ %1565, %1613 ]
  %589 = phi i32 [ %568, %567 ], [ %1595, %1613 ]
  %590 = phi i32 [ 2, %567 ], [ %1593, %1613 ]
  %591 = phi i32 [ 0, %567 ], [ %1540, %1613 ]
  %592 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %569, align 8, !tbaa !581
  %593 = load i32, i32* %563, align 8, !tbaa !579
  %594 = add nsw i32 %593, -4
  %595 = icmp slt i32 %589, %594
  %596 = icmp slt i32 %590, 2
  %597 = and i1 %596, %595
  %598 = and i1 %571, %597
  switch i32 %590, label %1539 [
    i32 0, label %599
    i32 1, label %765
    i32 2, label %1229
  ]

599:                                              ; preds = %586
  %600 = add nsw i32 %589, 6
  %601 = shl i32 1, %600
  %602 = load i32, i32* %13, align 4, !tbaa !562
  %603 = icmp sgt i32 %602, 0
  br i1 %603, label %604, label %1539

604:                                              ; preds = %599
  %605 = icmp sgt i32 %589, 0
  %606 = load i32, i32* %12, align 8, !tbaa !561
  %607 = select i1 %605, i32 %589, i32 0
  %608 = select i1 %605, [128 x i16]* @lut_nmsedec_sig, [128 x i16]* @lut_nmsedec_sig0
  br label %609

609:                                              ; preds = %760, %604
  %610 = phi i32 [ 0, %604 ], [ %761, %760 ]
  %611 = phi i32 [ %602, %604 ], [ %762, %760 ]
  %612 = phi i32 [ %606, %604 ], [ %763, %760 ]
  %613 = phi i32 [ 0, %604 ], [ %615, %760 ]
  %614 = icmp sgt i32 %612, 0
  %615 = add nuw nsw i32 %613, 4
  br i1 %614, label %616, label %760

616:                                              ; preds = %609
  %617 = or i32 %613, 3
  br label %618

618:                                              ; preds = %754, %616
  %619 = phi i32 [ %610, %616 ], [ %755, %754 ]
  %620 = phi i32 [ 0, %616 ], [ %621, %754 ]
  %621 = add nuw nsw i32 %620, 1
  br label %622

622:                                              ; preds = %751, %618
  %623 = phi i32 [ %619, %618 ], [ %752, %751 ]
  %624 = phi i32 [ %613, %618 ], [ %636, %751 ]
  %625 = load i32, i32* %13, align 4, !tbaa !562
  %626 = icmp slt i32 %624, %625
  br i1 %626, label %627, label %754

627:                                              ; preds = %622
  br i1 %573, label %633, label %628

628:                                              ; preds = %627
  %629 = icmp eq i32 %624, %617
  br i1 %629, label %633, label %630

630:                                              ; preds = %628
  %631 = add nsw i32 %625, -1
  %632 = icmp eq i32 %624, %631
  br label %633

633:                                              ; preds = %630, %628, %627
  %634 = phi i1 [ false, %627 ], [ true, %628 ], [ %632, %630 ]
  %635 = load i16*, i16** %16, align 8, !tbaa !540
  %636 = add nuw nsw i32 %624, 1
  %637 = load i32, i32* %17, align 8, !tbaa !582
  %638 = mul nsw i32 %637, %636
  %639 = add i32 %638, %621
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds i16, i16* %635, i64 %640
  %642 = load i32*, i32** %11, align 8, !tbaa !539
  %643 = load i32, i32* %12, align 8, !tbaa !561
  %644 = mul nsw i32 %643, %624
  %645 = add nsw i32 %644, %620
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds i32, i32* %642, i64 %646
  %648 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %649 = load i16, i16* %641, align 2, !tbaa !509
  %650 = sext i16 %649 to i32
  %651 = and i32 %650, -1095
  %652 = select i1 %634, i32 %651, i32 %650
  %653 = and i32 %652, 255
  %654 = icmp ne i32 %653, 0
  %655 = and i32 %652, 20480
  %656 = icmp eq i32 %655, 0
  %657 = and i1 %654, %656
  br i1 %657, label %658, label %751

658:                                              ; preds = %633
  %659 = load i32, i32* %647, align 4, !tbaa !43
  %660 = icmp slt i32 %659, 0
  %661 = sub nsw i32 0, %659
  %662 = select i1 %660, i32 %661, i32 %659
  %663 = and i32 %662, %601
  %664 = icmp ne i32 %663, 0
  %665 = zext i1 %664 to i32
  %666 = or i32 %653, %574
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds [1024 x i8], [1024 x i8]* @lut_ctxno_zc, i64 0, i64 %667
  %669 = load i8, i8* %668, align 1, !tbaa !15
  %670 = sext i8 %669 to i64
  %671 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %648, i64 0, i32 6, i64 %670
  %672 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %648, i64 0, i32 7
  store %struct.opj_mqc_state** %671, %struct.opj_mqc_state*** %672, align 8, !tbaa !441
  br i1 %598, label %673, label %674

673:                                              ; preds = %658
  tail call void @mqc_bypass_enc(%struct.opj_mqc* nonnull %648, i32 %665) #9
  br label %675

674:                                              ; preds = %658
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %648, i32 %665) #9
  br label %675

675:                                              ; preds = %674, %673
  br i1 %664, label %676, label %747

676:                                              ; preds = %675
  %677 = load i32, i32* %647, align 4, !tbaa !43
  %678 = lshr i32 %677, 31
  %679 = icmp slt i32 %677, 0
  %680 = sub nsw i32 0, %677
  %681 = select i1 %679, i32 %680, i32 %677
  %682 = lshr i32 %681, %607
  %683 = and i32 %682, 127
  %684 = zext i32 %683 to i64
  %685 = getelementptr inbounds [128 x i16], [128 x i16]* %608, i64 0, i64 %684
  %686 = load i16, i16* %685, align 2, !tbaa !509
  %687 = sext i16 %686 to i32
  %688 = add nsw i32 %623, %687
  %689 = lshr i32 %652, 4
  %690 = and i32 %689, 255
  %691 = zext i32 %690 to i64
  %692 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %691
  %693 = load i8, i8* %692, align 1, !tbaa !15
  %694 = sext i8 %693 to i64
  %695 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %648, i64 0, i32 6, i64 %694
  store %struct.opj_mqc_state** %695, %struct.opj_mqc_state*** %672, align 8, !tbaa !441
  br i1 %598, label %696, label %697

696:                                              ; preds = %676
  tail call void @mqc_bypass_enc(%struct.opj_mqc* nonnull %648, i32 %678) #9
  br label %702

697:                                              ; preds = %676
  %698 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %691
  %699 = load i8, i8* %698, align 1, !tbaa !15
  %700 = sext i8 %699 to i32
  %701 = xor i32 %678, %700
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %648, i32 %701) #9
  br label %702

702:                                              ; preds = %697, %696
  %703 = load i32, i32* %17, align 8, !tbaa !582
  %704 = sext i32 %703 to i64
  %705 = sub nsw i64 0, %704
  %706 = getelementptr inbounds i16, i16* %641, i64 %705
  %707 = getelementptr inbounds i16, i16* %641, i64 %704
  %708 = getelementptr inbounds i16, i16* %706, i64 -1
  %709 = load i16, i16* %708, align 2, !tbaa !509
  %710 = or i16 %709, 2
  store i16 %710, i16* %708, align 2, !tbaa !509
  %711 = zext i32 %678 to i64
  %712 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %711
  %713 = load i16, i16* %712, align 2, !tbaa !509
  %714 = load i16, i16* %706, align 2, !tbaa !509
  %715 = or i16 %714, %713
  store i16 %715, i16* %706, align 2, !tbaa !509
  %716 = getelementptr inbounds i16, i16* %706, i64 1
  %717 = load i16, i16* %716, align 2, !tbaa !509
  %718 = or i16 %717, 4
  store i16 %718, i16* %716, align 2, !tbaa !509
  %719 = or i32 %678, 2
  %720 = zext i32 %719 to i64
  %721 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %720
  %722 = load i16, i16* %721, align 2, !tbaa !509
  %723 = getelementptr inbounds i16, i16* %641, i64 -1
  %724 = load i16, i16* %723, align 2, !tbaa !509
  %725 = or i16 %724, %722
  store i16 %725, i16* %723, align 2, !tbaa !509
  %726 = load i16, i16* %641, align 2, !tbaa !509
  %727 = or i16 %726, 4096
  store i16 %727, i16* %641, align 2, !tbaa !509
  %728 = or i32 %678, 4
  %729 = zext i32 %728 to i64
  %730 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %729
  %731 = load i16, i16* %730, align 2, !tbaa !509
  %732 = getelementptr inbounds i16, i16* %641, i64 1
  %733 = load i16, i16* %732, align 2, !tbaa !509
  %734 = or i16 %733, %731
  store i16 %734, i16* %732, align 2, !tbaa !509
  %735 = getelementptr inbounds i16, i16* %707, i64 -1
  %736 = load i16, i16* %735, align 2, !tbaa !509
  %737 = or i16 %736, 1
  store i16 %737, i16* %735, align 2, !tbaa !509
  %738 = or i32 %678, 6
  %739 = zext i32 %738 to i64
  %740 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %739
  %741 = load i16, i16* %740, align 2, !tbaa !509
  %742 = load i16, i16* %707, align 2, !tbaa !509
  %743 = or i16 %742, %741
  store i16 %743, i16* %707, align 2, !tbaa !509
  %744 = getelementptr inbounds i16, i16* %707, i64 1
  %745 = load i16, i16* %744, align 2, !tbaa !509
  %746 = or i16 %745, 8
  store i16 %746, i16* %744, align 2, !tbaa !509
  br label %747

747:                                              ; preds = %702, %675
  %748 = phi i32 [ %688, %702 ], [ %623, %675 ]
  %749 = load i16, i16* %641, align 2, !tbaa !509
  %750 = or i16 %749, 16384
  store i16 %750, i16* %641, align 2, !tbaa !509
  br label %751

751:                                              ; preds = %747, %633
  %752 = phi i32 [ %748, %747 ], [ %623, %633 ]
  %753 = icmp ult i32 %636, %615
  br i1 %753, label %622, label %754

754:                                              ; preds = %751, %622
  %755 = phi i32 [ %752, %751 ], [ %623, %622 ]
  %756 = load i32, i32* %12, align 8, !tbaa !561
  %757 = icmp slt i32 %621, %756
  br i1 %757, label %618, label %758

758:                                              ; preds = %754
  %759 = load i32, i32* %13, align 4, !tbaa !562
  br label %760

760:                                              ; preds = %758, %609
  %761 = phi i32 [ %755, %758 ], [ %610, %609 ]
  %762 = phi i32 [ %759, %758 ], [ %611, %609 ]
  %763 = phi i32 [ %756, %758 ], [ %612, %609 ]
  %764 = icmp slt i32 %615, %762
  br i1 %764, label %609, label %1539

765:                                              ; preds = %586
  %766 = add nsw i32 %589, 6
  %767 = shl i32 1, %766
  %768 = load i32, i32* %13, align 4, !tbaa !562
  %769 = icmp sgt i32 %768, 0
  br i1 %769, label %770, label %1539

770:                                              ; preds = %765
  %771 = icmp sgt i32 %589, 0
  %772 = load i32, i32* %12, align 8, !tbaa !561
  %773 = select i1 %771, i32 %589, i32 0
  %774 = select i1 %771, [128 x i16]* @lut_nmsedec_ref, [128 x i16]* @lut_nmsedec_ref0
  %775 = select i1 %771, i32 %589, i32 0
  %776 = select i1 %771, [128 x i16]* @lut_nmsedec_ref, [128 x i16]* @lut_nmsedec_ref0
  %777 = select i1 %771, i32 %589, i32 0
  %778 = select i1 %771, [128 x i16]* @lut_nmsedec_ref, [128 x i16]* @lut_nmsedec_ref0
  %779 = select i1 %771, i32 %589, i32 0
  %780 = select i1 %771, [128 x i16]* @lut_nmsedec_ref, [128 x i16]* @lut_nmsedec_ref0
  %781 = select i1 %771, i32 %589, i32 0
  %782 = select i1 %771, [128 x i16]* @lut_nmsedec_ref, [128 x i16]* @lut_nmsedec_ref0
  %783 = select i1 %771, i32 %589, i32 0
  %784 = select i1 %771, [128 x i16]* @lut_nmsedec_ref, [128 x i16]* @lut_nmsedec_ref0
  %785 = select i1 %771, i32 %589, i32 0
  %786 = select i1 %771, [128 x i16]* @lut_nmsedec_ref, [128 x i16]* @lut_nmsedec_ref0
  %787 = select i1 %771, i32 %589, i32 0
  %788 = select i1 %771, [128 x i16]* @lut_nmsedec_ref, [128 x i16]* @lut_nmsedec_ref0
  br label %789

789:                                              ; preds = %918, %770
  %790 = phi i32 [ 0, %770 ], [ %919, %918 ]
  %791 = phi i32 [ %768, %770 ], [ %920, %918 ]
  %792 = phi i32 [ %772, %770 ], [ %921, %918 ]
  %793 = phi i32 [ 0, %770 ], [ %922, %918 ]
  %794 = icmp sgt i32 %792, 0
  br i1 %794, label %795, label %918

795:                                              ; preds = %789
  %796 = or i32 %793, 1
  %797 = add nuw nsw i32 %796, 1
  %798 = or i32 %793, 3
  %799 = add nuw nsw i32 %798, 1
  br label %800

800:                                              ; preds = %913, %795
  %801 = phi i32 [ %791, %795 ], [ %917, %913 ]
  %802 = phi i32 [ %790, %795 ], [ %914, %913 ]
  %803 = phi i32 [ %792, %795 ], [ %915, %913 ]
  %804 = phi i32 [ 0, %795 ], [ %805, %913 ]
  %805 = add nuw nsw i32 %804, 1
  %806 = icmp slt i32 %793, %801
  br i1 %573, label %808, label %807

807:                                              ; preds = %800
  br i1 %806, label %859, label %913

808:                                              ; preds = %800
  br i1 %806, label %809, label %913

809:                                              ; preds = %808
  %810 = load i16*, i16** %16, align 8, !tbaa !540
  %811 = load i32, i32* %17, align 8, !tbaa !582
  %812 = mul nsw i32 %811, %796
  %813 = add i32 %812, %805
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds i16, i16* %810, i64 %814
  %816 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %817 = load i16, i16* %815, align 2, !tbaa !509
  %818 = sext i16 %817 to i32
  %819 = and i32 %818, 20480
  %820 = icmp eq i32 %819, 4096
  br i1 %820, label %821, label %855

821:                                              ; preds = %809
  %822 = load i32*, i32** %11, align 8, !tbaa !539
  %823 = mul nsw i32 %803, %793
  %824 = add nsw i32 %823, %804
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds i32, i32* %822, i64 %825
  %827 = load i32, i32* %826, align 4, !tbaa !43
  %828 = icmp slt i32 %827, 0
  %829 = sub nsw i32 0, %827
  %830 = select i1 %828, i32 %829, i32 %827
  %831 = lshr i32 %830, %781
  %832 = and i32 %831, 127
  %833 = zext i32 %832 to i64
  %834 = getelementptr inbounds [128 x i16], [128 x i16]* %782, i64 0, i64 %833
  %835 = load i16, i16* %834, align 2, !tbaa !509
  %836 = sext i16 %835 to i32
  %837 = add nsw i32 %802, %836
  %838 = and i32 %830, %767
  %839 = icmp ne i32 %838, 0
  %840 = zext i1 %839 to i32
  %841 = and i32 %818, 255
  %842 = icmp eq i32 %841, 0
  %843 = select i1 %842, i64 14, i64 15
  %844 = and i32 %818, 8192
  %845 = icmp eq i32 %844, 0
  %846 = select i1 %845, i64 %843, i64 16
  %847 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %816, i64 0, i32 6, i64 %846
  %848 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %816, i64 0, i32 7
  store %struct.opj_mqc_state** %847, %struct.opj_mqc_state*** %848, align 8, !tbaa !441
  br i1 %598, label %850, label %849

849:                                              ; preds = %821
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %816, i32 %840) #9
  br label %851

850:                                              ; preds = %821
  tail call void @mqc_bypass_enc(%struct.opj_mqc* nonnull %816, i32 %840) #9
  br label %851

851:                                              ; preds = %850, %849
  %852 = load i16, i16* %815, align 2, !tbaa !509
  %853 = or i16 %852, 8192
  store i16 %853, i16* %815, align 2, !tbaa !509
  %854 = load i32, i32* %13, align 4, !tbaa !562
  br label %855

855:                                              ; preds = %851, %809
  %856 = phi i32 [ %837, %851 ], [ %802, %809 ]
  %857 = phi i32 [ %854, %851 ], [ %801, %809 ]
  %858 = icmp slt i32 %796, %857
  br i1 %858, label %1081, label %913

859:                                              ; preds = %807
  %860 = add nsw i32 %801, -1
  %861 = icmp eq i32 %793, %860
  %862 = load i16*, i16** %16, align 8, !tbaa !540
  %863 = load i32, i32* %17, align 8, !tbaa !582
  %864 = mul nsw i32 %863, %796
  %865 = add i32 %864, %805
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i16, i16* %862, i64 %866
  %868 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %869 = load i16, i16* %867, align 2, !tbaa !509
  %870 = sext i16 %869 to i32
  %871 = and i32 %870, -1095
  %872 = select i1 %861, i32 %871, i32 %870
  %873 = and i32 %872, 20480
  %874 = icmp eq i32 %873, 4096
  br i1 %874, label %875, label %909

875:                                              ; preds = %859
  %876 = load i32*, i32** %11, align 8, !tbaa !539
  %877 = mul nsw i32 %803, %793
  %878 = add nsw i32 %877, %804
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds i32, i32* %876, i64 %879
  %881 = load i32, i32* %880, align 4, !tbaa !43
  %882 = icmp slt i32 %881, 0
  %883 = sub nsw i32 0, %881
  %884 = select i1 %882, i32 %883, i32 %881
  %885 = lshr i32 %884, %773
  %886 = and i32 %885, 127
  %887 = zext i32 %886 to i64
  %888 = getelementptr inbounds [128 x i16], [128 x i16]* %774, i64 0, i64 %887
  %889 = load i16, i16* %888, align 2, !tbaa !509
  %890 = sext i16 %889 to i32
  %891 = add nsw i32 %802, %890
  %892 = and i32 %884, %767
  %893 = icmp ne i32 %892, 0
  %894 = zext i1 %893 to i32
  %895 = and i32 %872, 255
  %896 = icmp eq i32 %895, 0
  %897 = select i1 %896, i64 14, i64 15
  %898 = and i32 %872, 8192
  %899 = icmp eq i32 %898, 0
  %900 = select i1 %899, i64 %897, i64 16
  %901 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %868, i64 0, i32 6, i64 %900
  %902 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %868, i64 0, i32 7
  store %struct.opj_mqc_state** %901, %struct.opj_mqc_state*** %902, align 8, !tbaa !441
  br i1 %598, label %903, label %904

903:                                              ; preds = %875
  tail call void @mqc_bypass_enc(%struct.opj_mqc* nonnull %868, i32 %894) #9
  br label %905

904:                                              ; preds = %875
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %868, i32 %894) #9
  br label %905

905:                                              ; preds = %904, %903
  %906 = load i16, i16* %867, align 2, !tbaa !509
  %907 = or i16 %906, 8192
  store i16 %907, i16* %867, align 2, !tbaa !509
  %908 = load i32, i32* %13, align 4, !tbaa !562
  br label %909

909:                                              ; preds = %905, %859
  %910 = phi i32 [ %891, %905 ], [ %802, %859 ]
  %911 = phi i32 [ %908, %905 ], [ %801, %859 ]
  %912 = icmp slt i32 %796, %911
  br i1 %912, label %924, label %913

913:                                              ; preds = %1226, %1183, %1179, %1128, %1078, %1034, %1030, %975, %909, %855, %808, %807
  %914 = phi i32 [ %1212, %1226 ], [ %1180, %1183 ], [ %1180, %1179 ], [ %1129, %1128 ], [ %856, %855 ], [ %802, %808 ], [ %1064, %1078 ], [ %1031, %1034 ], [ %1031, %1030 ], [ %976, %975 ], [ %910, %909 ], [ %802, %807 ]
  %915 = load i32, i32* %12, align 8, !tbaa !561
  %916 = icmp slt i32 %805, %915
  %917 = load i32, i32* %13, align 4, !tbaa !562
  br i1 %916, label %800, label %918

918:                                              ; preds = %913, %789
  %919 = phi i32 [ %790, %789 ], [ %914, %913 ]
  %920 = phi i32 [ %791, %789 ], [ %917, %913 ]
  %921 = phi i32 [ %792, %789 ], [ %915, %913 ]
  %922 = add nuw nsw i32 %793, 4
  %923 = icmp slt i32 %922, %920
  br i1 %923, label %789, label %1539

924:                                              ; preds = %909
  %925 = add nsw i32 %911, -1
  %926 = icmp eq i32 %796, %925
  %927 = load i16*, i16** %16, align 8, !tbaa !540
  %928 = load i32, i32* %17, align 8, !tbaa !582
  %929 = mul nsw i32 %928, %797
  %930 = add i32 %929, %805
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds i16, i16* %927, i64 %931
  %933 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %934 = load i16, i16* %932, align 2, !tbaa !509
  %935 = sext i16 %934 to i32
  %936 = and i32 %935, -1095
  %937 = select i1 %926, i32 %936, i32 %935
  %938 = and i32 %937, 20480
  %939 = icmp eq i32 %938, 4096
  br i1 %939, label %940, label %975

940:                                              ; preds = %924
  %941 = load i32*, i32** %11, align 8, !tbaa !539
  %942 = load i32, i32* %12, align 8, !tbaa !561
  %943 = mul nsw i32 %942, %796
  %944 = add nsw i32 %943, %804
  %945 = sext i32 %944 to i64
  %946 = getelementptr inbounds i32, i32* %941, i64 %945
  %947 = load i32, i32* %946, align 4, !tbaa !43
  %948 = icmp slt i32 %947, 0
  %949 = sub nsw i32 0, %947
  %950 = select i1 %948, i32 %949, i32 %947
  %951 = lshr i32 %950, %775
  %952 = and i32 %951, 127
  %953 = zext i32 %952 to i64
  %954 = getelementptr inbounds [128 x i16], [128 x i16]* %776, i64 0, i64 %953
  %955 = load i16, i16* %954, align 2, !tbaa !509
  %956 = sext i16 %955 to i32
  %957 = add nsw i32 %910, %956
  %958 = and i32 %950, %767
  %959 = icmp ne i32 %958, 0
  %960 = zext i1 %959 to i32
  %961 = and i32 %937, 255
  %962 = icmp eq i32 %961, 0
  %963 = select i1 %962, i64 14, i64 15
  %964 = and i32 %937, 8192
  %965 = icmp eq i32 %964, 0
  %966 = select i1 %965, i64 %963, i64 16
  %967 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %933, i64 0, i32 6, i64 %966
  %968 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %933, i64 0, i32 7
  store %struct.opj_mqc_state** %967, %struct.opj_mqc_state*** %968, align 8, !tbaa !441
  br i1 %598, label %970, label %969

969:                                              ; preds = %940
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %933, i32 %960) #9
  br label %971

970:                                              ; preds = %940
  tail call void @mqc_bypass_enc(%struct.opj_mqc* nonnull %933, i32 %960) #9
  br label %971

971:                                              ; preds = %970, %969
  %972 = load i16, i16* %932, align 2, !tbaa !509
  %973 = or i16 %972, 8192
  store i16 %973, i16* %932, align 2, !tbaa !509
  %974 = load i32, i32* %13, align 4, !tbaa !562
  br label %975

975:                                              ; preds = %971, %924
  %976 = phi i32 [ %957, %971 ], [ %910, %924 ]
  %977 = phi i32 [ %974, %971 ], [ %911, %924 ]
  %978 = icmp slt i32 %797, %977
  br i1 %978, label %979, label %913

979:                                              ; preds = %975
  %980 = add nsw i32 %977, -1
  %981 = icmp eq i32 %797, %980
  %982 = load i16*, i16** %16, align 8, !tbaa !540
  %983 = load i32, i32* %17, align 8, !tbaa !582
  %984 = mul nsw i32 %983, %798
  %985 = add i32 %984, %805
  %986 = sext i32 %985 to i64
  %987 = getelementptr inbounds i16, i16* %982, i64 %986
  %988 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %989 = load i16, i16* %987, align 2, !tbaa !509
  %990 = sext i16 %989 to i32
  %991 = and i32 %990, -1095
  %992 = select i1 %981, i32 %991, i32 %990
  %993 = and i32 %992, 20480
  %994 = icmp eq i32 %993, 4096
  br i1 %994, label %995, label %1030

995:                                              ; preds = %979
  %996 = load i32*, i32** %11, align 8, !tbaa !539
  %997 = load i32, i32* %12, align 8, !tbaa !561
  %998 = mul nsw i32 %997, %797
  %999 = add nsw i32 %998, %804
  %1000 = sext i32 %999 to i64
  %1001 = getelementptr inbounds i32, i32* %996, i64 %1000
  %1002 = load i32, i32* %1001, align 4, !tbaa !43
  %1003 = icmp slt i32 %1002, 0
  %1004 = sub nsw i32 0, %1002
  %1005 = select i1 %1003, i32 %1004, i32 %1002
  %1006 = lshr i32 %1005, %777
  %1007 = and i32 %1006, 127
  %1008 = zext i32 %1007 to i64
  %1009 = getelementptr inbounds [128 x i16], [128 x i16]* %778, i64 0, i64 %1008
  %1010 = load i16, i16* %1009, align 2, !tbaa !509
  %1011 = sext i16 %1010 to i32
  %1012 = add nsw i32 %976, %1011
  %1013 = and i32 %1005, %767
  %1014 = icmp ne i32 %1013, 0
  %1015 = zext i1 %1014 to i32
  %1016 = and i32 %992, 255
  %1017 = icmp eq i32 %1016, 0
  %1018 = select i1 %1017, i64 14, i64 15
  %1019 = and i32 %992, 8192
  %1020 = icmp eq i32 %1019, 0
  %1021 = select i1 %1020, i64 %1018, i64 16
  %1022 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %988, i64 0, i32 6, i64 %1021
  %1023 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %988, i64 0, i32 7
  store %struct.opj_mqc_state** %1022, %struct.opj_mqc_state*** %1023, align 8, !tbaa !441
  br i1 %598, label %1025, label %1024

1024:                                             ; preds = %995
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %988, i32 %1015) #9
  br label %1026

1025:                                             ; preds = %995
  tail call void @mqc_bypass_enc(%struct.opj_mqc* nonnull %988, i32 %1015) #9
  br label %1026

1026:                                             ; preds = %1025, %1024
  %1027 = load i16, i16* %987, align 2, !tbaa !509
  %1028 = or i16 %1027, 8192
  store i16 %1028, i16* %987, align 2, !tbaa !509
  %1029 = load i32, i32* %13, align 4, !tbaa !562
  br label %1030

1030:                                             ; preds = %1026, %979
  %1031 = phi i32 [ %1012, %1026 ], [ %976, %979 ]
  %1032 = phi i32 [ %1029, %1026 ], [ %977, %979 ]
  %1033 = icmp slt i32 %798, %1032
  br i1 %1033, label %1034, label %913

1034:                                             ; preds = %1030
  %1035 = load i16*, i16** %16, align 8, !tbaa !540
  %1036 = load i32, i32* %17, align 8, !tbaa !582
  %1037 = mul nsw i32 %1036, %799
  %1038 = add i32 %1037, %805
  %1039 = sext i32 %1038 to i64
  %1040 = getelementptr inbounds i16, i16* %1035, i64 %1039
  %1041 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %1042 = load i16, i16* %1040, align 2, !tbaa !509
  %1043 = and i16 %1042, -1095
  %1044 = sext i16 %1043 to i32
  %1045 = and i32 %1044, 20480
  %1046 = icmp eq i32 %1045, 4096
  br i1 %1046, label %1047, label %913

1047:                                             ; preds = %1034
  %1048 = load i32*, i32** %11, align 8, !tbaa !539
  %1049 = load i32, i32* %12, align 8, !tbaa !561
  %1050 = mul nsw i32 %1049, %798
  %1051 = add nsw i32 %1050, %804
  %1052 = sext i32 %1051 to i64
  %1053 = getelementptr inbounds i32, i32* %1048, i64 %1052
  %1054 = load i32, i32* %1053, align 4, !tbaa !43
  %1055 = icmp slt i32 %1054, 0
  %1056 = sub nsw i32 0, %1054
  %1057 = select i1 %1055, i32 %1056, i32 %1054
  %1058 = lshr i32 %1057, %779
  %1059 = and i32 %1058, 127
  %1060 = zext i32 %1059 to i64
  %1061 = getelementptr inbounds [128 x i16], [128 x i16]* %780, i64 0, i64 %1060
  %1062 = load i16, i16* %1061, align 2, !tbaa !509
  %1063 = sext i16 %1062 to i32
  %1064 = add nsw i32 %1031, %1063
  %1065 = and i32 %1057, %767
  %1066 = icmp ne i32 %1065, 0
  %1067 = zext i1 %1066 to i32
  %1068 = and i32 %1044, 185
  %1069 = icmp eq i32 %1068, 0
  %1070 = select i1 %1069, i64 14, i64 15
  %1071 = and i32 %1044, 8192
  %1072 = icmp eq i32 %1071, 0
  %1073 = select i1 %1072, i64 %1070, i64 16
  %1074 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1041, i64 0, i32 6, i64 %1073
  %1075 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1041, i64 0, i32 7
  store %struct.opj_mqc_state** %1074, %struct.opj_mqc_state*** %1075, align 8, !tbaa !441
  br i1 %598, label %1077, label %1076

1076:                                             ; preds = %1047
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %1041, i32 %1067) #9
  br label %1078

1077:                                             ; preds = %1047
  tail call void @mqc_bypass_enc(%struct.opj_mqc* nonnull %1041, i32 %1067) #9
  br label %1078

1078:                                             ; preds = %1077, %1076
  %1079 = load i16, i16* %1040, align 2, !tbaa !509
  %1080 = or i16 %1079, 8192
  store i16 %1080, i16* %1040, align 2, !tbaa !509
  br label %913

1081:                                             ; preds = %855
  %1082 = load i16*, i16** %16, align 8, !tbaa !540
  %1083 = load i32, i32* %17, align 8, !tbaa !582
  %1084 = mul nsw i32 %1083, %797
  %1085 = add i32 %1084, %805
  %1086 = sext i32 %1085 to i64
  %1087 = getelementptr inbounds i16, i16* %1082, i64 %1086
  %1088 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %1089 = load i16, i16* %1087, align 2, !tbaa !509
  %1090 = sext i16 %1089 to i32
  %1091 = and i32 %1090, 20480
  %1092 = icmp eq i32 %1091, 4096
  br i1 %1092, label %1093, label %1128

1093:                                             ; preds = %1081
  %1094 = load i32*, i32** %11, align 8, !tbaa !539
  %1095 = load i32, i32* %12, align 8, !tbaa !561
  %1096 = mul nsw i32 %1095, %796
  %1097 = add nsw i32 %1096, %804
  %1098 = sext i32 %1097 to i64
  %1099 = getelementptr inbounds i32, i32* %1094, i64 %1098
  %1100 = load i32, i32* %1099, align 4, !tbaa !43
  %1101 = icmp slt i32 %1100, 0
  %1102 = sub nsw i32 0, %1100
  %1103 = select i1 %1101, i32 %1102, i32 %1100
  %1104 = lshr i32 %1103, %783
  %1105 = and i32 %1104, 127
  %1106 = zext i32 %1105 to i64
  %1107 = getelementptr inbounds [128 x i16], [128 x i16]* %784, i64 0, i64 %1106
  %1108 = load i16, i16* %1107, align 2, !tbaa !509
  %1109 = sext i16 %1108 to i32
  %1110 = add nsw i32 %856, %1109
  %1111 = and i32 %1103, %767
  %1112 = icmp ne i32 %1111, 0
  %1113 = zext i1 %1112 to i32
  %1114 = and i32 %1090, 255
  %1115 = icmp eq i32 %1114, 0
  %1116 = select i1 %1115, i64 14, i64 15
  %1117 = and i32 %1090, 8192
  %1118 = icmp eq i32 %1117, 0
  %1119 = select i1 %1118, i64 %1116, i64 16
  %1120 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1088, i64 0, i32 6, i64 %1119
  %1121 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1088, i64 0, i32 7
  store %struct.opj_mqc_state** %1120, %struct.opj_mqc_state*** %1121, align 8, !tbaa !441
  br i1 %598, label %1123, label %1122

1122:                                             ; preds = %1093
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %1088, i32 %1113) #9
  br label %1124

1123:                                             ; preds = %1093
  tail call void @mqc_bypass_enc(%struct.opj_mqc* nonnull %1088, i32 %1113) #9
  br label %1124

1124:                                             ; preds = %1123, %1122
  %1125 = load i16, i16* %1087, align 2, !tbaa !509
  %1126 = or i16 %1125, 8192
  store i16 %1126, i16* %1087, align 2, !tbaa !509
  %1127 = load i32, i32* %13, align 4, !tbaa !562
  br label %1128

1128:                                             ; preds = %1124, %1081
  %1129 = phi i32 [ %1110, %1124 ], [ %856, %1081 ]
  %1130 = phi i32 [ %1127, %1124 ], [ %857, %1081 ]
  %1131 = icmp slt i32 %797, %1130
  br i1 %1131, label %1132, label %913

1132:                                             ; preds = %1128
  %1133 = load i16*, i16** %16, align 8, !tbaa !540
  %1134 = load i32, i32* %17, align 8, !tbaa !582
  %1135 = mul nsw i32 %1134, %798
  %1136 = add i32 %1135, %805
  %1137 = sext i32 %1136 to i64
  %1138 = getelementptr inbounds i16, i16* %1133, i64 %1137
  %1139 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %1140 = load i16, i16* %1138, align 2, !tbaa !509
  %1141 = sext i16 %1140 to i32
  %1142 = and i32 %1141, 20480
  %1143 = icmp eq i32 %1142, 4096
  br i1 %1143, label %1144, label %1179

1144:                                             ; preds = %1132
  %1145 = load i32*, i32** %11, align 8, !tbaa !539
  %1146 = load i32, i32* %12, align 8, !tbaa !561
  %1147 = mul nsw i32 %1146, %797
  %1148 = add nsw i32 %1147, %804
  %1149 = sext i32 %1148 to i64
  %1150 = getelementptr inbounds i32, i32* %1145, i64 %1149
  %1151 = load i32, i32* %1150, align 4, !tbaa !43
  %1152 = icmp slt i32 %1151, 0
  %1153 = sub nsw i32 0, %1151
  %1154 = select i1 %1152, i32 %1153, i32 %1151
  %1155 = lshr i32 %1154, %785
  %1156 = and i32 %1155, 127
  %1157 = zext i32 %1156 to i64
  %1158 = getelementptr inbounds [128 x i16], [128 x i16]* %786, i64 0, i64 %1157
  %1159 = load i16, i16* %1158, align 2, !tbaa !509
  %1160 = sext i16 %1159 to i32
  %1161 = add nsw i32 %1129, %1160
  %1162 = and i32 %1154, %767
  %1163 = icmp ne i32 %1162, 0
  %1164 = zext i1 %1163 to i32
  %1165 = and i32 %1141, 255
  %1166 = icmp eq i32 %1165, 0
  %1167 = select i1 %1166, i64 14, i64 15
  %1168 = and i32 %1141, 8192
  %1169 = icmp eq i32 %1168, 0
  %1170 = select i1 %1169, i64 %1167, i64 16
  %1171 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1139, i64 0, i32 6, i64 %1170
  %1172 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1139, i64 0, i32 7
  store %struct.opj_mqc_state** %1171, %struct.opj_mqc_state*** %1172, align 8, !tbaa !441
  br i1 %598, label %1174, label %1173

1173:                                             ; preds = %1144
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %1139, i32 %1164) #9
  br label %1175

1174:                                             ; preds = %1144
  tail call void @mqc_bypass_enc(%struct.opj_mqc* nonnull %1139, i32 %1164) #9
  br label %1175

1175:                                             ; preds = %1174, %1173
  %1176 = load i16, i16* %1138, align 2, !tbaa !509
  %1177 = or i16 %1176, 8192
  store i16 %1177, i16* %1138, align 2, !tbaa !509
  %1178 = load i32, i32* %13, align 4, !tbaa !562
  br label %1179

1179:                                             ; preds = %1175, %1132
  %1180 = phi i32 [ %1161, %1175 ], [ %1129, %1132 ]
  %1181 = phi i32 [ %1178, %1175 ], [ %1130, %1132 ]
  %1182 = icmp slt i32 %798, %1181
  br i1 %1182, label %1183, label %913

1183:                                             ; preds = %1179
  %1184 = load i16*, i16** %16, align 8, !tbaa !540
  %1185 = load i32, i32* %17, align 8, !tbaa !582
  %1186 = mul nsw i32 %1185, %799
  %1187 = add i32 %1186, %805
  %1188 = sext i32 %1187 to i64
  %1189 = getelementptr inbounds i16, i16* %1184, i64 %1188
  %1190 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %1191 = load i16, i16* %1189, align 2, !tbaa !509
  %1192 = sext i16 %1191 to i32
  %1193 = and i32 %1192, 20480
  %1194 = icmp eq i32 %1193, 4096
  br i1 %1194, label %1195, label %913

1195:                                             ; preds = %1183
  %1196 = load i32*, i32** %11, align 8, !tbaa !539
  %1197 = load i32, i32* %12, align 8, !tbaa !561
  %1198 = mul nsw i32 %1197, %798
  %1199 = add nsw i32 %1198, %804
  %1200 = sext i32 %1199 to i64
  %1201 = getelementptr inbounds i32, i32* %1196, i64 %1200
  %1202 = load i32, i32* %1201, align 4, !tbaa !43
  %1203 = icmp slt i32 %1202, 0
  %1204 = sub nsw i32 0, %1202
  %1205 = select i1 %1203, i32 %1204, i32 %1202
  %1206 = lshr i32 %1205, %787
  %1207 = and i32 %1206, 127
  %1208 = zext i32 %1207 to i64
  %1209 = getelementptr inbounds [128 x i16], [128 x i16]* %788, i64 0, i64 %1208
  %1210 = load i16, i16* %1209, align 2, !tbaa !509
  %1211 = sext i16 %1210 to i32
  %1212 = add nsw i32 %1180, %1211
  %1213 = and i32 %1205, %767
  %1214 = icmp ne i32 %1213, 0
  %1215 = zext i1 %1214 to i32
  %1216 = and i32 %1192, 255
  %1217 = icmp eq i32 %1216, 0
  %1218 = select i1 %1217, i64 14, i64 15
  %1219 = and i32 %1192, 8192
  %1220 = icmp eq i32 %1219, 0
  %1221 = select i1 %1220, i64 %1218, i64 16
  %1222 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1190, i64 0, i32 6, i64 %1221
  %1223 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1190, i64 0, i32 7
  store %struct.opj_mqc_state** %1222, %struct.opj_mqc_state*** %1223, align 8, !tbaa !441
  br i1 %598, label %1225, label %1224

1224:                                             ; preds = %1195
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %1190, i32 %1215) #9
  br label %1226

1225:                                             ; preds = %1195
  tail call void @mqc_bypass_enc(%struct.opj_mqc* nonnull %1190, i32 %1215) #9
  br label %1226

1226:                                             ; preds = %1225, %1224
  %1227 = load i16, i16* %1189, align 2, !tbaa !509
  %1228 = or i16 %1227, 8192
  store i16 %1228, i16* %1189, align 2, !tbaa !509
  br label %913

1229:                                             ; preds = %586
  %1230 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %1231 = add nsw i32 %589, 6
  %1232 = shl i32 1, %1231
  %1233 = load i32, i32* %13, align 4, !tbaa !562
  %1234 = icmp sgt i32 %1233, 0
  br i1 %1234, label %1235, label %1536

1235:                                             ; preds = %1229
  %1236 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1230, i64 0, i32 6, i64 17
  %1237 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1230, i64 0, i32 7
  %1238 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1230, i64 0, i32 6, i64 18
  %1239 = icmp sgt i32 %589, 0
  %1240 = load i32, i32* %12, align 8, !tbaa !561
  %1241 = select i1 %1239, i32 %589, i32 0
  %1242 = select i1 %1239, [128 x i16]* @lut_nmsedec_sig, [128 x i16]* @lut_nmsedec_sig0
  br label %1243

1243:                                             ; preds = %1508, %1235
  %1244 = phi i32 [ 0, %1235 ], [ %1509, %1508 ]
  %1245 = phi i32 [ %1233, %1235 ], [ %1511, %1508 ]
  %1246 = phi i32 [ %1240, %1235 ], [ %1512, %1508 ]
  %1247 = phi i64 [ 0, %1235 ], [ %1510, %1508 ]
  %1248 = icmp sgt i32 %1246, 0
  br i1 %1248, label %1251, label %1249

1249:                                             ; preds = %1243
  %1250 = add nuw i64 %1247, 4
  br label %1508

1251:                                             ; preds = %1243
  %1252 = or i64 %1247, 3
  %1253 = add nuw i64 %1247, 4
  %1254 = trunc i64 %1247 to i32
  %1255 = or i32 %1254, 1
  %1256 = add i32 %1255, 1
  %1257 = trunc i64 %1252 to i32
  %1258 = add i32 %1255, 3
  %1259 = add nuw nsw i64 %1247, 1
  %1260 = add nuw nsw i64 %1247, 2
  %1261 = add nuw nsw i64 %1247, 3
  br label %1262

1262:                                             ; preds = %1501, %1251
  %1263 = phi i32 [ %1244, %1251 ], [ %1502, %1501 ]
  %1264 = phi i32 [ %1245, %1251 ], [ %1507, %1501 ]
  %1265 = phi i64 [ 0, %1251 ], [ %1503, %1501 ]
  %1266 = phi i32 [ %1246, %1251 ], [ %1504, %1501 ]
  %1267 = sext i32 %1264 to i64
  %1268 = icmp slt i64 %1252, %1267
  br i1 %1268, label %1271, label %1269

1269:                                             ; preds = %1262
  %1270 = add nuw nsw i64 %1265, 1
  br label %1363

1271:                                             ; preds = %1262
  %1272 = load i16*, i16** %16, align 8, !tbaa !540
  %1273 = load i32, i32* %17, align 8, !tbaa !582
  %1274 = mul nsw i32 %1273, %1255
  %1275 = add nuw nsw i64 %1265, 1
  %1276 = trunc i64 %1275 to i32
  %1277 = add nsw i32 %1274, %1276
  %1278 = sext i32 %1277 to i64
  %1279 = getelementptr inbounds i16, i16* %1272, i64 %1278
  %1280 = load i16, i16* %1279, align 2, !tbaa !509
  %1281 = and i16 %1280, 20735
  %1282 = icmp ne i16 %1281, 0
  br i1 %573, label %1308, label %1283

1283:                                             ; preds = %1271
  br i1 %1282, label %1363, label %1284

1284:                                             ; preds = %1283
  %1285 = mul nsw i32 %1273, %1256
  %1286 = add nsw i32 %1285, %1276
  %1287 = sext i32 %1286 to i64
  %1288 = getelementptr inbounds i16, i16* %1272, i64 %1287
  %1289 = load i16, i16* %1288, align 2, !tbaa !509
  %1290 = and i16 %1289, 20735
  %1291 = icmp eq i16 %1290, 0
  br i1 %1291, label %1292, label %1363

1292:                                             ; preds = %1284
  %1293 = mul nsw i32 %1273, %1257
  %1294 = add nsw i32 %1293, %1276
  %1295 = sext i32 %1294 to i64
  %1296 = getelementptr inbounds i16, i16* %1272, i64 %1295
  %1297 = load i16, i16* %1296, align 2, !tbaa !509
  %1298 = and i16 %1297, 20735
  %1299 = icmp eq i16 %1298, 0
  br i1 %1299, label %1300, label %1363

1300:                                             ; preds = %1292
  %1301 = mul nsw i32 %1273, %1258
  %1302 = add nsw i32 %1301, %1276
  %1303 = sext i32 %1302 to i64
  %1304 = getelementptr inbounds i16, i16* %1272, i64 %1303
  %1305 = load i16, i16* %1304, align 2, !tbaa !509
  %1306 = and i16 %1305, 20665
  %1307 = icmp eq i16 %1306, 0
  br i1 %1307, label %1333, label %1363

1308:                                             ; preds = %1271
  br i1 %1282, label %1363, label %1309

1309:                                             ; preds = %1308
  %1310 = mul nsw i32 %1273, %1256
  %1311 = add nsw i32 %1310, %1276
  %1312 = sext i32 %1311 to i64
  %1313 = getelementptr inbounds i16, i16* %1272, i64 %1312
  %1314 = load i16, i16* %1313, align 2, !tbaa !509
  %1315 = and i16 %1314, 20735
  %1316 = icmp eq i16 %1315, 0
  br i1 %1316, label %1317, label %1363

1317:                                             ; preds = %1309
  %1318 = mul nsw i32 %1273, %1257
  %1319 = add nsw i32 %1318, %1276
  %1320 = sext i32 %1319 to i64
  %1321 = getelementptr inbounds i16, i16* %1272, i64 %1320
  %1322 = load i16, i16* %1321, align 2, !tbaa !509
  %1323 = and i16 %1322, 20735
  %1324 = icmp eq i16 %1323, 0
  br i1 %1324, label %1325, label %1363

1325:                                             ; preds = %1317
  %1326 = mul nsw i32 %1273, %1258
  %1327 = add nsw i32 %1326, %1276
  %1328 = sext i32 %1327 to i64
  %1329 = getelementptr inbounds i16, i16* %1272, i64 %1328
  %1330 = load i16, i16* %1329, align 2, !tbaa !509
  %1331 = and i16 %1330, 20735
  %1332 = icmp eq i16 %1331, 0
  br i1 %1332, label %1333, label %1363

1333:                                             ; preds = %1325, %1300
  %1334 = load i32*, i32** %11, align 8, !tbaa !539
  %1335 = sext i32 %1266 to i64
  %1336 = mul nsw i64 %1247, %1335
  %1337 = add nsw i64 %1336, %1265
  %1338 = getelementptr inbounds i32, i32* %1334, i64 %1337
  %1339 = load i32, i32* %1338, align 4, !tbaa !43
  %1340 = icmp slt i32 %1339, 0
  %1341 = sub nsw i32 0, %1339
  %1342 = select i1 %1340, i32 %1341, i32 %1339
  %1343 = and i32 %1342, %1232
  %1344 = icmp eq i32 %1343, 0
  br i1 %1344, label %1345, label %1355

1345:                                             ; preds = %1333
  %1346 = mul nsw i64 %1259, %1335
  %1347 = add nsw i64 %1346, %1265
  %1348 = getelementptr inbounds i32, i32* %1334, i64 %1347
  %1349 = load i32, i32* %1348, align 4, !tbaa !43
  %1350 = icmp slt i32 %1349, 0
  %1351 = sub nsw i32 0, %1349
  %1352 = select i1 %1350, i32 %1351, i32 %1349
  %1353 = and i32 %1352, %1232
  %1354 = icmp eq i32 %1353, 0
  br i1 %1354, label %1515, label %1355

1355:                                             ; preds = %1525, %1515, %1345, %1333
  %1356 = phi i32 [ 0, %1333 ], [ 1, %1345 ], [ 2, %1515 ], [ %1535, %1525 ]
  store %struct.opj_mqc_state** %1236, %struct.opj_mqc_state*** %1237, align 8, !tbaa !441
  %1357 = icmp ne i32 %1356, 4
  %1358 = zext i1 %1357 to i32
  tail call void @mqc_encode(%struct.opj_mqc* %1230, i32 %1358) #9
  %1359 = icmp eq i32 %1356, 4
  br i1 %1359, label %1501, label %1360

1360:                                             ; preds = %1355
  store %struct.opj_mqc_state** %1238, %struct.opj_mqc_state*** %1237, align 8, !tbaa !441
  %1361 = lshr i32 %1356, 1
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %1230, i32 %1361) #9
  %1362 = and i32 %1356, 1
  tail call void @mqc_encode(%struct.opj_mqc* nonnull %1230, i32 %1362) #9
  br label %1363

1363:                                             ; preds = %1360, %1325, %1317, %1309, %1308, %1300, %1292, %1284, %1283, %1269
  %1364 = phi i64 [ %1270, %1269 ], [ %1275, %1360 ], [ %1275, %1325 ], [ %1275, %1317 ], [ %1275, %1309 ], [ %1275, %1308 ], [ %1275, %1300 ], [ %1275, %1292 ], [ %1275, %1284 ], [ %1275, %1283 ]
  %1365 = phi i1 [ false, %1269 ], [ true, %1360 ], [ false, %1325 ], [ false, %1317 ], [ false, %1309 ], [ false, %1308 ], [ false, %1300 ], [ false, %1292 ], [ false, %1284 ], [ false, %1283 ]
  %1366 = phi i32 [ 0, %1269 ], [ %1356, %1360 ], [ 0, %1325 ], [ 0, %1317 ], [ 0, %1309 ], [ 0, %1308 ], [ 0, %1300 ], [ 0, %1292 ], [ 0, %1284 ], [ 0, %1283 ]
  %1367 = add nuw nsw i32 %1366, %1254
  %1368 = sext i32 %1367 to i64
  %1369 = icmp sgt i64 %1253, %1368
  br i1 %1369, label %1370, label %1501

1370:                                             ; preds = %1363
  %1371 = trunc i64 %1364 to i32
  %1372 = trunc i64 %1265 to i32
  br label %1373

1373:                                             ; preds = %1495, %1370
  %1374 = phi i32 [ %1263, %1370 ], [ %1496, %1495 ]
  %1375 = phi i32 [ %1367, %1370 ], [ %1388, %1495 ]
  %1376 = load i32, i32* %13, align 4, !tbaa !562
  %1377 = icmp slt i32 %1375, %1376
  br i1 %1377, label %1378, label %1501

1378:                                             ; preds = %1373
  br i1 %573, label %1385, label %1379

1379:                                             ; preds = %1378
  %1380 = zext i32 %1375 to i64
  %1381 = icmp eq i64 %1252, %1380
  br i1 %1381, label %1385, label %1382

1382:                                             ; preds = %1379
  %1383 = add nsw i32 %1376, -1
  %1384 = icmp eq i32 %1375, %1383
  br label %1385

1385:                                             ; preds = %1382, %1379, %1378
  %1386 = phi i1 [ false, %1378 ], [ true, %1379 ], [ %1384, %1382 ]
  %1387 = load i16*, i16** %16, align 8, !tbaa !540
  %1388 = add nsw i32 %1375, 1
  %1389 = load i32, i32* %17, align 8, !tbaa !582
  %1390 = mul nsw i32 %1389, %1388
  %1391 = add i32 %1390, %1371
  %1392 = sext i32 %1391 to i64
  %1393 = getelementptr inbounds i16, i16* %1387, i64 %1392
  %1394 = load i32*, i32** %11, align 8, !tbaa !539
  %1395 = load i32, i32* %12, align 8, !tbaa !561
  %1396 = mul nsw i32 %1395, %1375
  %1397 = add nsw i32 %1396, %1372
  %1398 = sext i32 %1397 to i64
  %1399 = getelementptr inbounds i32, i32* %1394, i64 %1398
  %1400 = icmp eq i32 %1375, %1367
  %1401 = and i1 %1365, %1400
  %1402 = load %struct.opj_mqc*, %struct.opj_mqc** %15, align 8, !tbaa !535
  %1403 = load i16, i16* %1393, align 2, !tbaa !509
  %1404 = sext i16 %1403 to i32
  %1405 = and i32 %1404, -1095
  %1406 = select i1 %1386, i32 %1405, i32 %1404
  br i1 %1401, label %1426, label %1407

1407:                                             ; preds = %1385
  %1408 = and i32 %1404, 20480
  %1409 = icmp eq i32 %1408, 0
  br i1 %1409, label %1410, label %1495

1410:                                             ; preds = %1407
  %1411 = and i32 %1406, 255
  %1412 = or i32 %1411, %574
  %1413 = sext i32 %1412 to i64
  %1414 = getelementptr inbounds [1024 x i8], [1024 x i8]* @lut_ctxno_zc, i64 0, i64 %1413
  %1415 = load i8, i8* %1414, align 1, !tbaa !15
  %1416 = sext i8 %1415 to i64
  %1417 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1402, i64 0, i32 6, i64 %1416
  %1418 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1402, i64 0, i32 7
  store %struct.opj_mqc_state** %1417, %struct.opj_mqc_state*** %1418, align 8, !tbaa !441
  %1419 = load i32, i32* %1399, align 4, !tbaa !43
  %1420 = icmp slt i32 %1419, 0
  %1421 = sub nsw i32 0, %1419
  %1422 = select i1 %1420, i32 %1421, i32 %1419
  %1423 = and i32 %1422, %1232
  %1424 = icmp ne i32 %1423, 0
  %1425 = zext i1 %1424 to i32
  tail call void @mqc_encode(%struct.opj_mqc* %1402, i32 %1425) #9
  br i1 %1424, label %1426, label %1495

1426:                                             ; preds = %1410, %1385
  %1427 = load i32, i32* %1399, align 4, !tbaa !43
  %1428 = icmp slt i32 %1427, 0
  %1429 = sub nsw i32 0, %1427
  %1430 = select i1 %1428, i32 %1429, i32 %1427
  %1431 = lshr i32 %1430, %1241
  %1432 = and i32 %1431, 127
  %1433 = zext i32 %1432 to i64
  %1434 = getelementptr inbounds [128 x i16], [128 x i16]* %1242, i64 0, i64 %1433
  %1435 = load i16, i16* %1434, align 2, !tbaa !509
  %1436 = sext i16 %1435 to i32
  %1437 = add nsw i32 %1374, %1436
  %1438 = lshr i32 %1406, 4
  %1439 = and i32 %1438, 255
  %1440 = zext i32 %1439 to i64
  %1441 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1440
  %1442 = load i8, i8* %1441, align 1, !tbaa !15
  %1443 = sext i8 %1442 to i64
  %1444 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1402, i64 0, i32 6, i64 %1443
  %1445 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1402, i64 0, i32 7
  store %struct.opj_mqc_state** %1444, %struct.opj_mqc_state*** %1445, align 8, !tbaa !441
  %1446 = lshr i32 %1427, 31
  %1447 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1440
  %1448 = load i8, i8* %1447, align 1, !tbaa !15
  %1449 = sext i8 %1448 to i32
  %1450 = xor i32 %1446, %1449
  tail call void @mqc_encode(%struct.opj_mqc* %1402, i32 %1450) #9
  %1451 = load i32, i32* %17, align 8, !tbaa !582
  %1452 = sext i32 %1451 to i64
  %1453 = sub nsw i64 0, %1452
  %1454 = getelementptr inbounds i16, i16* %1393, i64 %1453
  %1455 = getelementptr inbounds i16, i16* %1393, i64 %1452
  %1456 = getelementptr inbounds i16, i16* %1454, i64 -1
  %1457 = load i16, i16* %1456, align 2, !tbaa !509
  %1458 = or i16 %1457, 2
  store i16 %1458, i16* %1456, align 2, !tbaa !509
  %1459 = zext i32 %1446 to i64
  %1460 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %1459
  %1461 = load i16, i16* %1460, align 2, !tbaa !509
  %1462 = load i16, i16* %1454, align 2, !tbaa !509
  %1463 = or i16 %1462, %1461
  store i16 %1463, i16* %1454, align 2, !tbaa !509
  %1464 = getelementptr inbounds i16, i16* %1454, i64 1
  %1465 = load i16, i16* %1464, align 2, !tbaa !509
  %1466 = or i16 %1465, 4
  store i16 %1466, i16* %1464, align 2, !tbaa !509
  %1467 = or i32 %1446, 2
  %1468 = zext i32 %1467 to i64
  %1469 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %1468
  %1470 = load i16, i16* %1469, align 2, !tbaa !509
  %1471 = getelementptr inbounds i16, i16* %1393, i64 -1
  %1472 = load i16, i16* %1471, align 2, !tbaa !509
  %1473 = or i16 %1472, %1470
  store i16 %1473, i16* %1471, align 2, !tbaa !509
  %1474 = load i16, i16* %1393, align 2, !tbaa !509
  %1475 = or i16 %1474, 4096
  store i16 %1475, i16* %1393, align 2, !tbaa !509
  %1476 = or i32 %1446, 4
  %1477 = zext i32 %1476 to i64
  %1478 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %1477
  %1479 = load i16, i16* %1478, align 2, !tbaa !509
  %1480 = getelementptr inbounds i16, i16* %1393, i64 1
  %1481 = load i16, i16* %1480, align 2, !tbaa !509
  %1482 = or i16 %1481, %1479
  store i16 %1482, i16* %1480, align 2, !tbaa !509
  %1483 = getelementptr inbounds i16, i16* %1455, i64 -1
  %1484 = load i16, i16* %1483, align 2, !tbaa !509
  %1485 = or i16 %1484, 1
  store i16 %1485, i16* %1483, align 2, !tbaa !509
  %1486 = or i32 %1446, 6
  %1487 = zext i32 %1486 to i64
  %1488 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %1487
  %1489 = load i16, i16* %1488, align 2, !tbaa !509
  %1490 = load i16, i16* %1455, align 2, !tbaa !509
  %1491 = or i16 %1490, %1489
  store i16 %1491, i16* %1455, align 2, !tbaa !509
  %1492 = getelementptr inbounds i16, i16* %1455, i64 1
  %1493 = load i16, i16* %1492, align 2, !tbaa !509
  %1494 = or i16 %1493, 8
  store i16 %1494, i16* %1492, align 2, !tbaa !509
  br label %1495

1495:                                             ; preds = %1426, %1410, %1407
  %1496 = phi i32 [ %1437, %1426 ], [ %1374, %1410 ], [ %1374, %1407 ]
  %1497 = load i16, i16* %1393, align 2, !tbaa !509
  %1498 = and i16 %1497, -16385
  store i16 %1498, i16* %1393, align 2, !tbaa !509
  %1499 = sext i32 %1388 to i64
  %1500 = icmp sgt i64 %1253, %1499
  br i1 %1500, label %1373, label %1501

1501:                                             ; preds = %1495, %1373, %1363, %1355
  %1502 = phi i32 [ %1263, %1363 ], [ %1263, %1355 ], [ %1496, %1495 ], [ %1374, %1373 ]
  %1503 = phi i64 [ %1364, %1363 ], [ %1275, %1355 ], [ %1364, %1373 ], [ %1364, %1495 ]
  %1504 = load i32, i32* %12, align 8, !tbaa !561
  %1505 = sext i32 %1504 to i64
  %1506 = icmp slt i64 %1503, %1505
  %1507 = load i32, i32* %13, align 4, !tbaa !562
  br i1 %1506, label %1262, label %1508

1508:                                             ; preds = %1501, %1249
  %1509 = phi i32 [ %1244, %1249 ], [ %1502, %1501 ]
  %1510 = phi i64 [ %1250, %1249 ], [ %1253, %1501 ]
  %1511 = phi i32 [ %1245, %1249 ], [ %1507, %1501 ]
  %1512 = phi i32 [ %1246, %1249 ], [ %1504, %1501 ]
  %1513 = sext i32 %1511 to i64
  %1514 = icmp slt i64 %1510, %1513
  br i1 %1514, label %1243, label %1536

1515:                                             ; preds = %1345
  %1516 = mul nsw i64 %1260, %1335
  %1517 = add nsw i64 %1516, %1265
  %1518 = getelementptr inbounds i32, i32* %1334, i64 %1517
  %1519 = load i32, i32* %1518, align 4, !tbaa !43
  %1520 = icmp slt i32 %1519, 0
  %1521 = sub nsw i32 0, %1519
  %1522 = select i1 %1520, i32 %1521, i32 %1519
  %1523 = and i32 %1522, %1232
  %1524 = icmp eq i32 %1523, 0
  br i1 %1524, label %1525, label %1355

1525:                                             ; preds = %1515
  %1526 = mul nsw i64 %1261, %1335
  %1527 = add nsw i64 %1526, %1265
  %1528 = getelementptr inbounds i32, i32* %1334, i64 %1527
  %1529 = load i32, i32* %1528, align 4, !tbaa !43
  %1530 = icmp slt i32 %1529, 0
  %1531 = sub nsw i32 0, %1529
  %1532 = select i1 %1530, i32 %1531, i32 %1529
  %1533 = and i32 %1532, %1232
  %1534 = icmp eq i32 %1533, 0
  %1535 = select i1 %1534, i32 4, i32 3
  br label %1355

1536:                                             ; preds = %1508, %1229
  %1537 = phi i32 [ 0, %1229 ], [ %1509, %1508 ]
  br i1 %576, label %1539, label %1538

1538:                                             ; preds = %1536
  tail call void @mqc_segmark_enc(%struct.opj_mqc* %438) #9
  br label %1539

1539:                                             ; preds = %1538, %1536, %918, %765, %760, %599, %586
  %1540 = phi i32 [ %591, %586 ], [ %1537, %1536 ], [ %1537, %1538 ], [ 0, %599 ], [ 0, %765 ], [ %761, %760 ], [ %919, %918 ]
  br i1 %577, label %1541, label %1547

1541:                                             ; preds = %1539
  br i1 %580, label %1542, label %1544

1542:                                             ; preds = %1541
  %1543 = tail call double @mct_getnorm(i32 %37) #9
  br label %1544

1544:                                             ; preds = %1542, %1541
  %1545 = phi double [ %1543, %1542 ], [ 1.000000e+00, %1541 ]
  %1546 = tail call double @dwt_getnorm(i32 %432, i32 %430) #9
  br label %1553

1547:                                             ; preds = %1539
  br i1 %580, label %1548, label %1550

1548:                                             ; preds = %1547
  %1549 = tail call double @mct_getnorm_real(i32 %36) #9
  br label %1550

1550:                                             ; preds = %1548, %1547
  %1551 = phi double [ %1549, %1548 ], [ 1.000000e+00, %1547 ]
  %1552 = tail call double @dwt_getnorm_real(i32 %432, i32 %430) #9
  br label %1553

1553:                                             ; preds = %1550, %1544
  %1554 = phi double [ %1546, %1544 ], [ %1552, %1550 ]
  %1555 = phi double [ %1545, %1544 ], [ %1551, %1550 ]
  %1556 = fmul double %1554, %1555
  %1557 = fmul double %1556, %434
  %1558 = shl i32 1, %589
  %1559 = sitofp i32 %1558 to double
  %1560 = fmul double %1557, %1559
  %1561 = sitofp i32 %1540 to double
  %1562 = fmul double %1560, %1561
  %1563 = fmul double %1562, 0x3F20000000000000
  %1564 = fmul double %1560, %1563
  %1565 = fadd double %588, %1564
  %1566 = load double, double* %4, align 8, !tbaa !541
  %1567 = fadd double %1566, %1564
  store double %1567, double* %4, align 8, !tbaa !541
  br i1 %582, label %1573, label %1568

1568:                                             ; preds = %1553
  %1569 = icmp eq i32 %590, 2
  %1570 = icmp slt i32 %589, 1
  %1571 = and i1 %1570, %1569
  br i1 %1571, label %1573, label %1572

1572:                                             ; preds = %1568
  tail call void @mqc_flush(%struct.opj_mqc* %438) #9
  br label %1586

1573:                                             ; preds = %1568, %1553
  %1574 = load i32, i32* %563, align 8, !tbaa !579
  %1575 = add nsw i32 %1574, -4
  %1576 = icmp slt i32 %589, %1575
  %1577 = icmp sgt i32 %590, 0
  %1578 = and i1 %1577, %1576
  br i1 %1578, label %1584, label %1579

1579:                                             ; preds = %1573
  %1580 = icmp ne i32 %589, %1575
  %1581 = icmp ne i32 %590, 2
  %1582 = or i1 %1581, %1580
  %1583 = or i1 %583, %1582
  br i1 %1583, label %1586, label %1585

1584:                                             ; preds = %1573
  br i1 %583, label %1586, label %1585

1585:                                             ; preds = %1584, %1579
  tail call void @mqc_flush(%struct.opj_mqc* %438) #9
  br label %1586

1586:                                             ; preds = %1585, %1584, %1579, %1572
  %1587 = phi i32 [ 1, %1585 ], [ 1, %1572 ], [ 0, %1584 ], [ 0, %1579 ]
  %1588 = phi i1 [ true, %1585 ], [ true, %1572 ], [ false, %1584 ], [ false, %1579 ]
  %1589 = phi i32 [ 1, %1585 ], [ 1, %1572 ], [ 3, %1584 ], [ 3, %1579 ]
  %1590 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %592, i64 %587, i32 2
  store i32 %1587, i32* %1590, align 8, !tbaa !583
  %1591 = add nsw i32 %590, 1
  %1592 = icmp eq i32 %1591, 3
  %1593 = select i1 %1592, i32 0, i32 %1591
  %1594 = zext i1 %1592 to i32
  %1595 = sub i32 %589, %1594
  %1596 = icmp sgt i32 %1595, 0
  %1597 = and i1 %1596, %1588
  br i1 %1597, label %1598, label %1607

1598:                                             ; preds = %1586
  %1599 = load i32, i32* %563, align 8, !tbaa !579
  %1600 = add nsw i32 %1599, -4
  %1601 = icmp slt i32 %1595, %1600
  %1602 = icmp slt i32 %1593, 2
  %1603 = and i1 %1602, %1601
  %1604 = and i1 %571, %1603
  br i1 %1604, label %1605, label %1606

1605:                                             ; preds = %1598
  tail call void @mqc_bypass_init_enc(%struct.opj_mqc* %438) #9
  br label %1607

1606:                                             ; preds = %1598
  tail call void @mqc_restart_init_enc(%struct.opj_mqc* %438) #9
  br label %1607

1607:                                             ; preds = %1606, %1605, %1586
  %1608 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %592, i64 %587, i32 1
  store double %1565, double* %1608, align 8, !tbaa !585
  %1609 = tail call i32 @mqc_numbytes(%struct.opj_mqc* %438) #9
  %1610 = add nsw i32 %1609, %1589
  %1611 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %592, i64 %587, i32 0
  store i32 %1610, i32* %1611, align 8, !tbaa !586
  br i1 %585, label %1613, label %1612

1612:                                             ; preds = %1607
  tail call void @mqc_reset_enc(%struct.opj_mqc* %438) #9
  br label %1613

1613:                                             ; preds = %1612, %1607
  %1614 = add nuw i64 %587, 1
  %1615 = icmp sgt i32 %1595, -1
  br i1 %1615, label %586, label %1616

1616:                                             ; preds = %1613
  %1617 = trunc i64 %1614 to i32
  br label %1618

1618:                                             ; preds = %1616, %561
  %1619 = phi i32 [ 0, %561 ], [ %1617, %1616 ]
  %1620 = and i32 %435, 16
  %1621 = icmp eq i32 %1620, 0
  br i1 %1621, label %1623, label %1622

1622:                                             ; preds = %1618
  tail call void @mqc_erterm_enc(%struct.opj_mqc* %438) #9
  br label %1627

1623:                                             ; preds = %1618
  %1624 = and i32 %435, 1
  %1625 = icmp eq i32 %1624, 0
  br i1 %1625, label %1626, label %1627

1626:                                             ; preds = %1623
  tail call void @mqc_flush(%struct.opj_mqc* %438) #9
  br label %1627

1627:                                             ; preds = %1626, %1623, %1622
  %1628 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %94, i64 %93, i32 11
  store i32 %1619, i32* %1628, align 8, !tbaa !587
  %1629 = icmp sgt i32 %1619, 0
  br i1 %1629, label %1630, label %1670

1630:                                             ; preds = %1627
  %1631 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %94, i64 %93, i32 2
  br label %1632

1632:                                             ; preds = %1662, %1630
  %1633 = phi i64 [ 0, %1630 ], [ %1666, %1662 ]
  %1634 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %1631, align 8, !tbaa !581
  %1635 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %1634, i64 %1633, i32 0
  %1636 = load i32, i32* %1635, align 8, !tbaa !586
  %1637 = tail call i32 @mqc_numbytes(%struct.opj_mqc* %438) #9
  %1638 = icmp sgt i32 %1636, %1637
  br i1 %1638, label %1639, label %1641

1639:                                             ; preds = %1632
  %1640 = tail call i32 @mqc_numbytes(%struct.opj_mqc* %438) #9
  store i32 %1640, i32* %1635, align 8, !tbaa !586
  br label %1643

1641:                                             ; preds = %1632
  %1642 = load i32, i32* %1635, align 8, !tbaa !586
  br label %1643

1643:                                             ; preds = %1641, %1639
  %1644 = phi i32 [ %1642, %1641 ], [ %1640, %1639 ]
  %1645 = icmp sgt i32 %1644, 1
  br i1 %1645, label %1646, label %1654

1646:                                             ; preds = %1643
  %1647 = load i8*, i8** %564, align 8, !tbaa !580
  %1648 = add nsw i32 %1644, -1
  %1649 = sext i32 %1648 to i64
  %1650 = getelementptr inbounds i8, i8* %1647, i64 %1649
  %1651 = load i8, i8* %1650, align 1, !tbaa !15
  %1652 = icmp eq i8 %1651, -1
  br i1 %1652, label %1653, label %1654

1653:                                             ; preds = %1646
  store i32 %1648, i32* %1635, align 8, !tbaa !586
  br label %1654

1654:                                             ; preds = %1653, %1646, %1643
  %1655 = phi i32 [ %1648, %1653 ], [ %1644, %1646 ], [ %1644, %1643 ]
  %1656 = icmp eq i64 %1633, 0
  br i1 %1656, label %1662, label %1657

1657:                                             ; preds = %1654
  %1658 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %1631, align 8, !tbaa !581
  %1659 = add nsw i64 %1633, -1
  %1660 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %1658, i64 %1659, i32 0
  %1661 = load i32, i32* %1660, align 8, !tbaa !586
  br label %1662

1662:                                             ; preds = %1657, %1654
  %1663 = phi i32 [ %1661, %1657 ], [ 0, %1654 ]
  %1664 = sub nsw i32 %1655, %1663
  %1665 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %1634, i64 %1633, i32 3
  store i32 %1664, i32* %1665, align 4, !tbaa !588
  %1666 = add nuw nsw i64 %1633, 1
  %1667 = load i32, i32* %1628, align 8, !tbaa !587
  %1668 = sext i32 %1667 to i64
  %1669 = icmp slt i64 %1666, %1668
  br i1 %1669, label %1632, label %1670

1670:                                             ; preds = %1662, %1627
  %1671 = add nuw nsw i64 %93, 1
  %1672 = load i32, i32* %84, align 8, !tbaa !550
  %1673 = load i32, i32* %86, align 4, !tbaa !552
  %1674 = mul nsw i32 %1673, %1672
  %1675 = sext i32 %1674 to i64
  %1676 = icmp slt i64 %1671, %1675
  br i1 %1676, label %92, label %1677

1677:                                             ; preds = %1670
  %1678 = load i32, i32* %49, align 8, !tbaa !545
  %1679 = load i32, i32* %50, align 4, !tbaa !546
  br label %1680

1680:                                             ; preds = %1677, %79
  %1681 = phi i32 [ %1679, %1677 ], [ %80, %79 ]
  %1682 = phi i32 [ %1678, %1677 ], [ %81, %79 ]
  %1683 = add nuw nsw i64 %82, 1
  %1684 = mul nsw i32 %1681, %1682
  %1685 = sext i32 %1684 to i64
  %1686 = icmp slt i64 %1683, %1685
  br i1 %1686, label %79, label %1687

1687:                                             ; preds = %1680
  %1688 = load i32, i32* %45, align 8, !tbaa !544
  br label %1689

1689:                                             ; preds = %1687, %56
  %1690 = phi i32 [ %1688, %1687 ], [ %57, %56 ]
  %1691 = phi i32 [ %1681, %1687 ], [ %58, %56 ]
  %1692 = phi i32 [ %1682, %1687 ], [ %59, %56 ]
  %1693 = phi i32 [ %1681, %1687 ], [ %60, %56 ]
  %1694 = phi i32 [ %1682, %1687 ], [ %61, %56 ]
  %1695 = add nuw nsw i64 %62, 1
  %1696 = sext i32 %1690 to i64
  %1697 = icmp slt i64 %1695, %1696
  br i1 %1697, label %56, label %1698

1698:                                             ; preds = %1689
  %1699 = load i32, i32* %28, align 8, !tbaa !35
  br label %1700

1700:                                             ; preds = %1698, %41
  %1701 = phi i32 [ %1699, %1698 ], [ %42, %41 ]
  %1702 = add nuw nsw i64 %43, 1
  %1703 = sext i32 %1701 to i64
  %1704 = icmp slt i64 %1702, %1703
  br i1 %1704, label %41, label %1705

1705:                                             ; preds = %1700
  %1706 = load i32, i32* %5, align 8, !tbaa !542
  br label %1707

1707:                                             ; preds = %1705, %18
  %1708 = phi i32 [ %1706, %1705 ], [ %19, %18 ]
  %1709 = add nuw nsw i64 %20, 1
  %1710 = sext i32 %1708 to i64
  %1711 = icmp slt i64 %1709, %1710
  br i1 %1711, label %18, label %1712

1712:                                             ; preds = %1707, %126, %3
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #7

; Function Attrs: nounwind uwtable
define internal fastcc i32 @allocate_buffers(%struct.opj_t1* nocapture, i32, i32) unnamed_addr #0 {
  %4 = mul nsw i32 %2, %1
  %5 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 7
  %6 = load i32, i32* %5, align 8, !tbaa !537
  %7 = icmp sgt i32 %4, %6
  %8 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 3
  %9 = bitcast i32** %8 to i8**
  %10 = load i8*, i8** %9, align 8, !tbaa !539
  br i1 %7, label %14, label %11

11:                                               ; preds = %3
  %12 = sext i32 %4 to i64
  %13 = shl nsw i64 %12, 2
  br label %20

14:                                               ; preds = %3
  tail call void @free(i8* %10) #9
  %15 = sext i32 %4 to i64
  %16 = shl nsw i64 %15, 2
  %17 = tail call noalias i8* @malloc(i64 %16) #9
  store i8* %17, i8** %9, align 8, !tbaa !539
  %18 = icmp eq i8* %17, null
  br i1 %18, label %47, label %19

19:                                               ; preds = %14
  store i32 %4, i32* %5, align 8, !tbaa !537
  br label %20

20:                                               ; preds = %19, %11
  %21 = phi i64 [ %13, %11 ], [ %16, %19 ]
  %22 = phi i8* [ %10, %11 ], [ %17, %19 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %22, i8 0, i64 %21, i1 false)
  %23 = add nsw i32 %1, 2
  %24 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 9
  store i32 %23, i32* %24, align 8, !tbaa !582
  %25 = add nsw i32 %2, 2
  %26 = mul nsw i32 %25, %23
  %27 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 8
  %28 = load i32, i32* %27, align 4, !tbaa !538
  %29 = icmp sgt i32 %26, %28
  %30 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 4
  %31 = bitcast i16** %30 to i8**
  %32 = load i8*, i8** %31, align 8, !tbaa !540
  br i1 %29, label %36, label %33

33:                                               ; preds = %20
  %34 = sext i32 %26 to i64
  %35 = shl nsw i64 %34, 1
  br label %42

36:                                               ; preds = %20
  tail call void @free(i8* %32) #9
  %37 = sext i32 %26 to i64
  %38 = shl nsw i64 %37, 1
  %39 = tail call noalias i8* @malloc(i64 %38) #9
  store i8* %39, i8** %31, align 8, !tbaa !540
  %40 = icmp eq i8* %39, null
  br i1 %40, label %47, label %41

41:                                               ; preds = %36
  store i32 %26, i32* %27, align 4, !tbaa !538
  br label %42

42:                                               ; preds = %41, %33
  %43 = phi i64 [ %35, %33 ], [ %38, %41 ]
  %44 = phi i8* [ %32, %33 ], [ %39, %41 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %44, i8 0, i64 %43, i1 false)
  %45 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 5
  store i32 %1, i32* %45, align 8, !tbaa !561
  %46 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 6
  store i32 %2, i32* %46, align 4, !tbaa !562
  br label %47

47:                                               ; preds = %42, %36, %14
  %48 = phi i32 [ 1, %42 ], [ 0, %14 ], [ 0, %36 ]
  ret i32 %48
}

; Function Attrs: nounwind uwtable
define void @t1_decode_cblks(%struct.opj_t1*, %struct.opj_tcd_tilecomp* nocapture readonly, %struct.opj_tccp* nocapture readonly) #0 {
  %4 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 2
  %5 = load i32, i32* %4, align 8, !tbaa !32
  %6 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8, !tbaa !34
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 4
  %10 = load i32, i32* %9, align 8, !tbaa !35
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %2445

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 5
  %14 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %2, i64 0, i32 9
  %15 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %2, i64 0, i32 4
  %16 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 2
  %17 = getelementptr %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 1
  %18 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 6
  %19 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 5
  %20 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 4
  %21 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 9
  %22 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 3
  %23 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %2, i64 0, i32 5
  %24 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 6
  %25 = sext i32 %8 to i64
  %26 = sub i32 %5, %7
  %27 = sext i32 %26 to i64
  %28 = sext i32 %5 to i64
  %29 = sext i32 %7 to i64
  %30 = sub nsw i64 %28, %29
  %31 = shl nsw i64 %30, 2
  br label %32

32:                                               ; preds = %2440, %12
  %33 = phi i32 [ %10, %12 ], [ %2441, %2440 ]
  %34 = phi i64 [ 0, %12 ], [ %2442, %2440 ]
  %35 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %13, align 8, !tbaa !37
  %36 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %35, i64 %34, i32 6
  %37 = load i32, i32* %36, align 8, !tbaa !544
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %2440

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %35, i64 %34, i32 4
  %41 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %35, i64 %34, i32 5
  %42 = add nsw i64 %34, -1
  %43 = load i32, i32* %40, align 8, !tbaa !545
  %44 = load i32, i32* %41, align 4, !tbaa !546
  br label %45

45:                                               ; preds = %2431, %39
  %46 = phi i32 [ %37, %39 ], [ %2432, %2431 ]
  %47 = phi i32 [ %44, %39 ], [ %2433, %2431 ]
  %48 = phi i32 [ %43, %39 ], [ %2434, %2431 ]
  %49 = phi i64 [ 0, %39 ], [ %2435, %2431 ]
  %50 = getelementptr %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %35, i64 %34, i32 7, i64 %49, i32 7
  %51 = bitcast float* %50 to i8*
  %52 = getelementptr i8, i8* %51, i64 1
  %53 = mul nsw i32 %47, %48
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %55, label %2431

55:                                               ; preds = %45
  %56 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %35, i64 %34, i32 7, i64 %49, i32 5
  %57 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %35, i64 %34, i32 7, i64 %49, i32 4
  %58 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %35, i64 %34, i32 7, i64 %49, i32 0
  %59 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %35, i64 %34, i32 7, i64 %49, i32 1
  %60 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %35, i64 %34, i32 7, i64 %49, i32 7
  %61 = bitcast float* %60 to i8*
  br label %62

62:                                               ; preds = %2420, %55
  %63 = phi i64 [ 0, %55 ], [ %2423, %2420 ]
  %64 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %56, align 8, !tbaa !549
  %65 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %64, i64 %63, i32 4
  %66 = load i32, i32* %65, align 8, !tbaa !550
  %67 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %64, i64 %63, i32 5
  %68 = load i32, i32* %67, align 4, !tbaa !552
  %69 = mul nsw i32 %68, %66
  %70 = icmp sgt i32 %69, 0
  %71 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %64, i64 %63, i32 6
  br i1 %70, label %72, label %2420

72:                                               ; preds = %62
  %73 = bitcast %union.anon* %71 to %struct.opj_tcd_cblk_dec**
  br label %74

74:                                               ; preds = %2408, %72
  %75 = phi i64 [ 0, %72 ], [ %2414, %2408 ]
  %76 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %73, align 8, !tbaa !15
  %77 = load i32, i32* %57, align 8, !tbaa !558
  %78 = load i32, i32* %14, align 4, !tbaa !225
  %79 = load i32, i32* %15, align 4, !tbaa !243
  %80 = load %struct.opj_raw*, %struct.opj_raw** %16, align 8, !tbaa !536
  %81 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %82 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %76, i64 %75, i32 4
  %83 = load i32, i32* %82, align 8, !tbaa !589
  %84 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %76, i64 %75, i32 2
  %85 = load i32, i32* %84, align 8, !tbaa !591
  %86 = sub nsw i32 %83, %85
  %87 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %76, i64 %75, i32 5
  %88 = load i32, i32* %87, align 4, !tbaa !592
  %89 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %76, i64 %75, i32 3
  %90 = load i32, i32* %89, align 4, !tbaa !593
  %91 = sub nsw i32 %88, %90
  %92 = tail call fastcc i32 @allocate_buffers(%struct.opj_t1* %0, i32 %86, i32 %91) #9
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %2122, label %94

94:                                               ; preds = %74
  %95 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %76, i64 %75, i32 6
  %96 = load i32, i32* %95, align 8, !tbaa !594
  tail call void @mqc_resetstates(%struct.opj_mqc* %81) #9
  tail call void @mqc_setstate(%struct.opj_mqc* %81, i32 18, i32 0, i32 46) #9
  tail call void @mqc_setstate(%struct.opj_mqc* %81, i32 17, i32 0, i32 3) #9
  tail call void @mqc_setstate(%struct.opj_mqc* %81, i32 0, i32 0, i32 4) #9
  %97 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %76, i64 %75, i32 10
  %98 = load i32, i32* %97, align 8, !tbaa !595
  %99 = icmp sgt i32 %98, 0
  br i1 %99, label %100, label %2122

100:                                              ; preds = %94
  %101 = add i32 %78, -1
  %102 = add i32 %101, %96
  %103 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %76, i64 %75, i32 1
  %104 = and i32 %79, 1
  %105 = icmp ne i32 %104, 0
  %106 = and i32 %79, 32
  %107 = and i32 %79, 8
  %108 = icmp eq i32 %107, 0
  %109 = shl i32 %77, 8
  %110 = icmp eq i32 %106, 0
  %111 = and i32 %79, 2
  %112 = icmp eq i32 %111, 0
  br label %113

113:                                              ; preds = %2115, %100
  %114 = phi i64 [ 0, %100 ], [ %2118, %2115 ]
  %115 = phi i32 [ %102, %100 ], [ %2117, %2115 ]
  %116 = phi i32 [ 2, %100 ], [ %2116, %2115 ]
  %117 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %103, align 8, !tbaa !596
  %118 = load i32, i32* %95, align 8, !tbaa !594
  %119 = add nsw i32 %118, -5
  %120 = icmp sle i32 %115, %119
  %121 = icmp slt i32 %116, 2
  %122 = and i1 %121, %120
  %123 = and i1 %105, %122
  %124 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %117, i64 %114, i32 0
  %125 = load i8**, i8*** %124, align 8, !tbaa !597
  %126 = icmp eq i8** %125, null
  br i1 %126, label %2115, label %127

127:                                              ; preds = %113
  %128 = load i8*, i8** %125, align 8, !tbaa !24
  %129 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %117, i64 %114, i32 1
  %130 = load i32, i32* %129, align 8, !tbaa !599
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %128, i64 %131
  %133 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %117, i64 %114, i32 3
  %134 = load i32, i32* %133, align 8, !tbaa !600
  br i1 %123, label %135, label %136

135:                                              ; preds = %127
  tail call void @raw_init_dec(%struct.opj_raw* %80, i8* %132, i32 %134) #9
  br label %137

136:                                              ; preds = %127
  tail call void @mqc_init_dec(%struct.opj_mqc* %81, i8* %132, i32 %134) #9
  br label %137

137:                                              ; preds = %136, %135
  %138 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %117, i64 %114, i32 2
  %139 = load i32, i32* %138, align 4, !tbaa !601
  %140 = icmp sgt i32 %139, 0
  br i1 %140, label %141, label %2115

141:                                              ; preds = %137
  %142 = or i1 %112, %123
  br label %143

143:                                              ; preds = %2106, %141
  %144 = phi i32 [ %115, %141 ], [ %2111, %2106 ]
  %145 = phi i32 [ 0, %141 ], [ %2112, %2106 ]
  %146 = phi i32 [ %116, %141 ], [ %2109, %2106 ]
  switch i32 %146, label %2104 [
    i32 0, label %147
    i32 1, label %1022
    i32 2, label %1652
  ]

147:                                              ; preds = %143
  %148 = add nsw i32 %144, 1
  br i1 %123, label %149, label %348

149:                                              ; preds = %147
  %150 = shl i32 1, %148
  %151 = ashr i32 %150, 1
  %152 = or i32 %151, %150
  %153 = load i32, i32* %18, align 4, !tbaa !562
  %154 = icmp sgt i32 %153, 0
  br i1 %154, label %155, label %2106

155:                                              ; preds = %149
  %156 = sub nsw i32 0, %152
  %157 = load i32, i32* %19, align 8, !tbaa !561
  br label %158

158:                                              ; preds = %344, %155
  %159 = phi i32 [ %153, %155 ], [ %345, %344 ]
  %160 = phi i32 [ %157, %155 ], [ %346, %344 ]
  %161 = phi i32 [ 0, %155 ], [ %163, %344 ]
  %162 = icmp sgt i32 %160, 0
  %163 = add nuw nsw i32 %161, 4
  br i1 %162, label %164, label %344

164:                                              ; preds = %158
  %165 = or i32 %161, 3
  br label %166

166:                                              ; preds = %339, %164
  %167 = phi i32 [ 0, %164 ], [ %168, %339 ]
  %168 = add nuw nsw i32 %167, 1
  br i1 %108, label %169, label %251

169:                                              ; preds = %249, %166
  %170 = phi i32 [ %175, %249 ], [ %161, %166 ]
  %171 = load i32, i32* %18, align 4, !tbaa !562
  %172 = icmp slt i32 %170, %171
  br i1 %172, label %173, label %339

173:                                              ; preds = %169
  %174 = load i16*, i16** %20, align 8, !tbaa !540
  %175 = add nuw nsw i32 %170, 1
  %176 = load i32, i32* %21, align 8, !tbaa !582
  %177 = mul nsw i32 %176, %175
  %178 = add i32 %177, %168
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds i16, i16* %174, i64 %179
  %181 = load i32*, i32** %22, align 8, !tbaa !539
  %182 = load i32, i32* %19, align 8, !tbaa !561
  %183 = mul nsw i32 %182, %170
  %184 = add nsw i32 %183, %167
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i32, i32* %181, i64 %185
  %187 = load %struct.opj_raw*, %struct.opj_raw** %16, align 8, !tbaa !536
  %188 = load i16, i16* %180, align 2, !tbaa !509
  %189 = sext i16 %188 to i32
  %190 = and i32 %189, 255
  %191 = icmp ne i32 %190, 0
  %192 = and i32 %189, 20480
  %193 = icmp eq i32 %192, 0
  %194 = and i1 %191, %193
  br i1 %194, label %195, label %249

195:                                              ; preds = %173
  %196 = tail call i32 @raw_decode(%struct.opj_raw* %187) #9
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %246, label %198

198:                                              ; preds = %195
  %199 = tail call i32 @raw_decode(%struct.opj_raw* %187) #9
  %200 = icmp eq i32 %199, 0
  %201 = select i1 %200, i32 %152, i32 %156
  store i32 %201, i32* %186, align 4, !tbaa !43
  %202 = load i32, i32* %21, align 8, !tbaa !582
  %203 = sext i32 %202 to i64
  %204 = sub nsw i64 0, %203
  %205 = getelementptr inbounds i16, i16* %180, i64 %204
  %206 = getelementptr inbounds i16, i16* %180, i64 %203
  %207 = getelementptr inbounds i16, i16* %205, i64 -1
  %208 = load i16, i16* %207, align 2, !tbaa !509
  %209 = or i16 %208, 2
  store i16 %209, i16* %207, align 2, !tbaa !509
  %210 = sext i32 %199 to i64
  %211 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %210
  %212 = load i16, i16* %211, align 2, !tbaa !509
  %213 = load i16, i16* %205, align 2, !tbaa !509
  %214 = or i16 %213, %212
  store i16 %214, i16* %205, align 2, !tbaa !509
  %215 = getelementptr inbounds i16, i16* %205, i64 1
  %216 = load i16, i16* %215, align 2, !tbaa !509
  %217 = or i16 %216, 4
  store i16 %217, i16* %215, align 2, !tbaa !509
  %218 = add nsw i32 %199, 2
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %219
  %221 = load i16, i16* %220, align 2, !tbaa !509
  %222 = getelementptr inbounds i16, i16* %180, i64 -1
  %223 = load i16, i16* %222, align 2, !tbaa !509
  %224 = or i16 %223, %221
  store i16 %224, i16* %222, align 2, !tbaa !509
  %225 = load i16, i16* %180, align 2, !tbaa !509
  %226 = or i16 %225, 4096
  store i16 %226, i16* %180, align 2, !tbaa !509
  %227 = add nsw i32 %199, 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %228
  %230 = load i16, i16* %229, align 2, !tbaa !509
  %231 = getelementptr inbounds i16, i16* %180, i64 1
  %232 = load i16, i16* %231, align 2, !tbaa !509
  %233 = or i16 %232, %230
  store i16 %233, i16* %231, align 2, !tbaa !509
  %234 = getelementptr inbounds i16, i16* %206, i64 -1
  %235 = load i16, i16* %234, align 2, !tbaa !509
  %236 = or i16 %235, 1
  store i16 %236, i16* %234, align 2, !tbaa !509
  %237 = add nsw i32 %199, 6
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %238
  %240 = load i16, i16* %239, align 2, !tbaa !509
  %241 = load i16, i16* %206, align 2, !tbaa !509
  %242 = or i16 %241, %240
  store i16 %242, i16* %206, align 2, !tbaa !509
  %243 = getelementptr inbounds i16, i16* %206, i64 1
  %244 = load i16, i16* %243, align 2, !tbaa !509
  %245 = or i16 %244, 8
  store i16 %245, i16* %243, align 2, !tbaa !509
  br label %246

246:                                              ; preds = %198, %195
  %247 = load i16, i16* %180, align 2, !tbaa !509
  %248 = or i16 %247, 16384
  store i16 %248, i16* %180, align 2, !tbaa !509
  br label %249

249:                                              ; preds = %246, %173
  %250 = icmp ult i32 %175, %163
  br i1 %250, label %169, label %339

251:                                              ; preds = %337, %166
  %252 = phi i32 [ %261, %337 ], [ %161, %166 ]
  %253 = load i32, i32* %18, align 4, !tbaa !562
  %254 = icmp slt i32 %252, %253
  br i1 %254, label %255, label %339

255:                                              ; preds = %251
  %256 = icmp eq i32 %252, %165
  %257 = add nsw i32 %253, -1
  %258 = icmp eq i32 %252, %257
  %259 = or i1 %256, %258
  %260 = load i16*, i16** %20, align 8, !tbaa !540
  %261 = add nuw nsw i32 %252, 1
  %262 = load i32, i32* %21, align 8, !tbaa !582
  %263 = mul nsw i32 %262, %261
  %264 = add i32 %263, %168
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds i16, i16* %260, i64 %265
  %267 = load i32*, i32** %22, align 8, !tbaa !539
  %268 = load i32, i32* %19, align 8, !tbaa !561
  %269 = mul nsw i32 %268, %252
  %270 = add nsw i32 %269, %167
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds i32, i32* %267, i64 %271
  %273 = load %struct.opj_raw*, %struct.opj_raw** %16, align 8, !tbaa !536
  %274 = load i16, i16* %266, align 2, !tbaa !509
  %275 = sext i16 %274 to i32
  %276 = and i32 %275, -1095
  %277 = select i1 %259, i32 %276, i32 %275
  %278 = and i32 %277, 255
  %279 = icmp ne i32 %278, 0
  %280 = and i32 %277, 20480
  %281 = icmp eq i32 %280, 0
  %282 = and i1 %279, %281
  br i1 %282, label %283, label %337

283:                                              ; preds = %255
  %284 = tail call i32 @raw_decode(%struct.opj_raw* %273) #9
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %334, label %286

286:                                              ; preds = %283
  %287 = tail call i32 @raw_decode(%struct.opj_raw* %273) #9
  %288 = icmp eq i32 %287, 0
  %289 = select i1 %288, i32 %152, i32 %156
  store i32 %289, i32* %272, align 4, !tbaa !43
  %290 = load i32, i32* %21, align 8, !tbaa !582
  %291 = sext i32 %290 to i64
  %292 = sub nsw i64 0, %291
  %293 = getelementptr inbounds i16, i16* %266, i64 %292
  %294 = getelementptr inbounds i16, i16* %266, i64 %291
  %295 = getelementptr inbounds i16, i16* %293, i64 -1
  %296 = load i16, i16* %295, align 2, !tbaa !509
  %297 = or i16 %296, 2
  store i16 %297, i16* %295, align 2, !tbaa !509
  %298 = sext i32 %287 to i64
  %299 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %298
  %300 = load i16, i16* %299, align 2, !tbaa !509
  %301 = load i16, i16* %293, align 2, !tbaa !509
  %302 = or i16 %301, %300
  store i16 %302, i16* %293, align 2, !tbaa !509
  %303 = getelementptr inbounds i16, i16* %293, i64 1
  %304 = load i16, i16* %303, align 2, !tbaa !509
  %305 = or i16 %304, 4
  store i16 %305, i16* %303, align 2, !tbaa !509
  %306 = add nsw i32 %287, 2
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %307
  %309 = load i16, i16* %308, align 2, !tbaa !509
  %310 = getelementptr inbounds i16, i16* %266, i64 -1
  %311 = load i16, i16* %310, align 2, !tbaa !509
  %312 = or i16 %311, %309
  store i16 %312, i16* %310, align 2, !tbaa !509
  %313 = load i16, i16* %266, align 2, !tbaa !509
  %314 = or i16 %313, 4096
  store i16 %314, i16* %266, align 2, !tbaa !509
  %315 = add nsw i32 %287, 4
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %316
  %318 = load i16, i16* %317, align 2, !tbaa !509
  %319 = getelementptr inbounds i16, i16* %266, i64 1
  %320 = load i16, i16* %319, align 2, !tbaa !509
  %321 = or i16 %320, %318
  store i16 %321, i16* %319, align 2, !tbaa !509
  %322 = getelementptr inbounds i16, i16* %294, i64 -1
  %323 = load i16, i16* %322, align 2, !tbaa !509
  %324 = or i16 %323, 1
  store i16 %324, i16* %322, align 2, !tbaa !509
  %325 = add nsw i32 %287, 6
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %326
  %328 = load i16, i16* %327, align 2, !tbaa !509
  %329 = load i16, i16* %294, align 2, !tbaa !509
  %330 = or i16 %329, %328
  store i16 %330, i16* %294, align 2, !tbaa !509
  %331 = getelementptr inbounds i16, i16* %294, i64 1
  %332 = load i16, i16* %331, align 2, !tbaa !509
  %333 = or i16 %332, 8
  store i16 %333, i16* %331, align 2, !tbaa !509
  br label %334

334:                                              ; preds = %286, %283
  %335 = load i16, i16* %266, align 2, !tbaa !509
  %336 = or i16 %335, 16384
  store i16 %336, i16* %266, align 2, !tbaa !509
  br label %337

337:                                              ; preds = %334, %255
  %338 = icmp ult i32 %261, %163
  br i1 %338, label %251, label %339

339:                                              ; preds = %337, %251, %249, %169
  %340 = load i32, i32* %19, align 8, !tbaa !561
  %341 = icmp slt i32 %168, %340
  br i1 %341, label %166, label %342

342:                                              ; preds = %339
  %343 = load i32, i32* %18, align 4, !tbaa !562
  br label %344

344:                                              ; preds = %342, %158
  %345 = phi i32 [ %343, %342 ], [ %159, %158 ]
  %346 = phi i32 [ %340, %342 ], [ %160, %158 ]
  %347 = icmp slt i32 %163, %345
  br i1 %347, label %158, label %2104

348:                                              ; preds = %147
  br i1 %108, label %484, label %349

349:                                              ; preds = %348
  %350 = shl i32 1, %148
  %351 = ashr i32 %350, 1
  %352 = or i32 %351, %350
  %353 = load i32, i32* %18, align 4, !tbaa !562
  %354 = icmp sgt i32 %353, 0
  br i1 %354, label %355, label %2104

355:                                              ; preds = %349
  %356 = sub nsw i32 0, %352
  %357 = load i32, i32* %19, align 8, !tbaa !561
  br label %358

358:                                              ; preds = %480, %355
  %359 = phi i32 [ %353, %355 ], [ %481, %480 ]
  %360 = phi i32 [ %357, %355 ], [ %482, %480 ]
  %361 = phi i32 [ 0, %355 ], [ %363, %480 ]
  %362 = icmp sgt i32 %360, 0
  %363 = add nuw nsw i32 %361, 4
  br i1 %362, label %364, label %480

364:                                              ; preds = %358
  %365 = or i32 %361, 3
  br label %366

366:                                              ; preds = %475, %364
  %367 = phi i32 [ 0, %364 ], [ %368, %475 ]
  %368 = add nuw nsw i32 %367, 1
  br label %369

369:                                              ; preds = %473, %366
  %370 = phi i32 [ %361, %366 ], [ %378, %473 ]
  %371 = load i32, i32* %18, align 4, !tbaa !562
  %372 = icmp slt i32 %370, %371
  br i1 %372, label %373, label %475

373:                                              ; preds = %369
  %374 = icmp ne i32 %370, %365
  %375 = add nsw i32 %371, -1
  %376 = icmp ne i32 %370, %375
  %377 = load i16*, i16** %20, align 8, !tbaa !540
  %378 = add nuw nsw i32 %370, 1
  %379 = load i32, i32* %21, align 8, !tbaa !582
  %380 = mul nsw i32 %379, %378
  %381 = add i32 %380, %368
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds i16, i16* %377, i64 %382
  %384 = load i32*, i32** %22, align 8, !tbaa !539
  %385 = load i32, i32* %19, align 8, !tbaa !561
  %386 = mul nsw i32 %385, %370
  %387 = add nsw i32 %386, %367
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds i32, i32* %384, i64 %388
  %390 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %391 = and i1 %374, %376
  %392 = load i16, i16* %383, align 2, !tbaa !509
  %393 = sext i16 %392 to i32
  %394 = and i32 %393, -1095
  %395 = select i1 %391, i32 %393, i32 %394
  %396 = and i32 %395, 255
  %397 = icmp ne i32 %396, 0
  %398 = and i32 %395, 20480
  %399 = icmp eq i32 %398, 0
  %400 = and i1 %397, %399
  br i1 %400, label %401, label %473

401:                                              ; preds = %373
  %402 = or i32 %396, %109
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds [1024 x i8], [1024 x i8]* @lut_ctxno_zc, i64 0, i64 %403
  %405 = load i8, i8* %404, align 1, !tbaa !15
  %406 = sext i8 %405 to i64
  %407 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %390, i64 0, i32 6, i64 %406
  %408 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %390, i64 0, i32 7
  store %struct.opj_mqc_state** %407, %struct.opj_mqc_state*** %408, align 8, !tbaa !441
  %409 = tail call i32 @mqc_decode(%struct.opj_mqc* %390) #9
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %470, label %411

411:                                              ; preds = %401
  %412 = lshr i32 %395, 4
  %413 = and i32 %412, 255
  %414 = zext i32 %413 to i64
  %415 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %414
  %416 = load i8, i8* %415, align 1, !tbaa !15
  %417 = sext i8 %416 to i64
  %418 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %390, i64 0, i32 6, i64 %417
  store %struct.opj_mqc_state** %418, %struct.opj_mqc_state*** %408, align 8, !tbaa !441
  %419 = tail call i32 @mqc_decode(%struct.opj_mqc* nonnull %390) #9
  %420 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %414
  %421 = load i8, i8* %420, align 1, !tbaa !15
  %422 = sext i8 %421 to i32
  %423 = xor i32 %419, %422
  %424 = icmp eq i32 %423, 0
  %425 = select i1 %424, i32 %352, i32 %356
  store i32 %425, i32* %389, align 4, !tbaa !43
  %426 = load i32, i32* %21, align 8, !tbaa !582
  %427 = sext i32 %426 to i64
  %428 = sub nsw i64 0, %427
  %429 = getelementptr inbounds i16, i16* %383, i64 %428
  %430 = getelementptr inbounds i16, i16* %383, i64 %427
  %431 = getelementptr inbounds i16, i16* %429, i64 -1
  %432 = load i16, i16* %431, align 2, !tbaa !509
  %433 = or i16 %432, 2
  store i16 %433, i16* %431, align 2, !tbaa !509
  %434 = sext i32 %423 to i64
  %435 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %434
  %436 = load i16, i16* %435, align 2, !tbaa !509
  %437 = load i16, i16* %429, align 2, !tbaa !509
  %438 = or i16 %437, %436
  store i16 %438, i16* %429, align 2, !tbaa !509
  %439 = getelementptr inbounds i16, i16* %429, i64 1
  %440 = load i16, i16* %439, align 2, !tbaa !509
  %441 = or i16 %440, 4
  store i16 %441, i16* %439, align 2, !tbaa !509
  %442 = add nsw i32 %423, 2
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %443
  %445 = load i16, i16* %444, align 2, !tbaa !509
  %446 = getelementptr inbounds i16, i16* %383, i64 -1
  %447 = load i16, i16* %446, align 2, !tbaa !509
  %448 = or i16 %447, %445
  store i16 %448, i16* %446, align 2, !tbaa !509
  %449 = load i16, i16* %383, align 2, !tbaa !509
  %450 = or i16 %449, 4096
  store i16 %450, i16* %383, align 2, !tbaa !509
  %451 = add nsw i32 %423, 4
  %452 = sext i32 %451 to i64
  %453 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %452
  %454 = load i16, i16* %453, align 2, !tbaa !509
  %455 = getelementptr inbounds i16, i16* %383, i64 1
  %456 = load i16, i16* %455, align 2, !tbaa !509
  %457 = or i16 %456, %454
  store i16 %457, i16* %455, align 2, !tbaa !509
  %458 = getelementptr inbounds i16, i16* %430, i64 -1
  %459 = load i16, i16* %458, align 2, !tbaa !509
  %460 = or i16 %459, 1
  store i16 %460, i16* %458, align 2, !tbaa !509
  %461 = add nsw i32 %423, 6
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %462
  %464 = load i16, i16* %463, align 2, !tbaa !509
  %465 = load i16, i16* %430, align 2, !tbaa !509
  %466 = or i16 %465, %464
  store i16 %466, i16* %430, align 2, !tbaa !509
  %467 = getelementptr inbounds i16, i16* %430, i64 1
  %468 = load i16, i16* %467, align 2, !tbaa !509
  %469 = or i16 %468, 8
  store i16 %469, i16* %467, align 2, !tbaa !509
  br label %470

470:                                              ; preds = %411, %401
  %471 = load i16, i16* %383, align 2, !tbaa !509
  %472 = or i16 %471, 16384
  store i16 %472, i16* %383, align 2, !tbaa !509
  br label %473

473:                                              ; preds = %470, %373
  %474 = icmp ult i32 %378, %363
  br i1 %474, label %369, label %475

475:                                              ; preds = %473, %369
  %476 = load i32, i32* %19, align 8, !tbaa !561
  %477 = icmp slt i32 %368, %476
  br i1 %477, label %366, label %478

478:                                              ; preds = %475
  %479 = load i32, i32* %18, align 4, !tbaa !562
  br label %480

480:                                              ; preds = %478, %358
  %481 = phi i32 [ %479, %478 ], [ %359, %358 ]
  %482 = phi i32 [ %476, %478 ], [ %360, %358 ]
  %483 = icmp slt i32 %363, %481
  br i1 %483, label %358, label %2104

484:                                              ; preds = %348
  %485 = load i32*, i32** %22, align 8, !tbaa !539
  %486 = load i16*, i16** %20, align 8, !tbaa !540
  %487 = getelementptr inbounds i16, i16* %486, i64 1
  %488 = shl i32 1, %148
  %489 = ashr i32 %488, 1
  %490 = or i32 %489, %488
  %491 = load i32, i32* %18, align 4, !tbaa !562
  %492 = and i32 %491, -4
  %493 = icmp sgt i32 %492, 0
  br i1 %493, label %496, label %494

494:                                              ; preds = %484
  %495 = load i32, i32* %19, align 8, !tbaa !561
  br label %507

496:                                              ; preds = %484
  %497 = sub nsw i32 0, %490
  %498 = load i32, i32* %19, align 8, !tbaa !561
  br label %499

499:                                              ; preds = %892, %496
  %500 = phi i32 [ %491, %496 ], [ %893, %892 ]
  %501 = phi i32 [ %498, %496 ], [ %894, %892 ]
  %502 = phi i32 [ %498, %496 ], [ %895, %892 ]
  %503 = phi i16* [ %487, %496 ], [ %902, %892 ]
  %504 = phi i32* [ %485, %496 ], [ %898, %892 ]
  %505 = phi i32 [ 0, %496 ], [ %903, %892 ]
  %506 = icmp sgt i32 %502, 0
  br i1 %506, label %516, label %892

507:                                              ; preds = %892, %494
  %508 = phi i32 [ %491, %494 ], [ %893, %892 ]
  %509 = phi i32 [ %495, %494 ], [ %894, %892 ]
  %510 = phi i32 [ 0, %494 ], [ %903, %892 ]
  %511 = phi i32* [ %485, %494 ], [ %898, %892 ]
  %512 = phi i16* [ %487, %494 ], [ %902, %892 ]
  %513 = icmp sgt i32 %509, 0
  br i1 %513, label %514, label %2104

514:                                              ; preds = %507
  %515 = sub nsw i32 0, %490
  br label %906

516:                                              ; preds = %885, %499
  %517 = phi i32 [ %886, %885 ], [ %501, %499 ]
  %518 = phi i32 [ %886, %885 ], [ %502, %499 ]
  %519 = phi i64 [ %887, %885 ], [ 0, %499 ]
  %520 = getelementptr inbounds i32, i32* %504, i64 %519
  %521 = getelementptr inbounds i16, i16* %503, i64 %519
  %522 = load i32, i32* %21, align 8, !tbaa !582
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds i16, i16* %521, i64 %523
  %525 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %526 = load i16, i16* %524, align 2, !tbaa !509
  %527 = sext i16 %526 to i32
  %528 = and i32 %527, 255
  %529 = icmp ne i32 %528, 0
  %530 = and i32 %527, 20480
  %531 = icmp eq i32 %530, 0
  %532 = and i1 %529, %531
  br i1 %532, label %533, label %611

533:                                              ; preds = %516
  %534 = or i32 %528, %109
  %535 = sext i32 %534 to i64
  %536 = getelementptr inbounds [1024 x i8], [1024 x i8]* @lut_ctxno_zc, i64 0, i64 %535
  %537 = load i8, i8* %536, align 1, !tbaa !15
  %538 = sext i8 %537 to i64
  %539 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %525, i64 0, i32 6, i64 %538
  %540 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %525, i64 0, i32 7
  store %struct.opj_mqc_state** %539, %struct.opj_mqc_state*** %540, align 8, !tbaa !441
  %541 = tail call i32 @mqc_decode(%struct.opj_mqc* %525) #9
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %543, label %546

543:                                              ; preds = %533
  %544 = load i32, i32* %21, align 8, !tbaa !582
  %545 = sext i32 %544 to i64
  br label %605

546:                                              ; preds = %533
  %547 = lshr i32 %527, 4
  %548 = and i32 %547, 255
  %549 = zext i32 %548 to i64
  %550 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %549
  %551 = load i8, i8* %550, align 1, !tbaa !15
  %552 = sext i8 %551 to i64
  %553 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %525, i64 0, i32 6, i64 %552
  store %struct.opj_mqc_state** %553, %struct.opj_mqc_state*** %540, align 8, !tbaa !441
  %554 = tail call i32 @mqc_decode(%struct.opj_mqc* nonnull %525) #9
  %555 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %549
  %556 = load i8, i8* %555, align 1, !tbaa !15
  %557 = sext i8 %556 to i32
  %558 = xor i32 %554, %557
  %559 = icmp eq i32 %558, 0
  %560 = select i1 %559, i32 %490, i32 %497
  store i32 %560, i32* %520, align 4, !tbaa !43
  %561 = load i32, i32* %21, align 8, !tbaa !582
  %562 = sext i32 %561 to i64
  %563 = sub nsw i64 0, %562
  %564 = getelementptr inbounds i16, i16* %524, i64 %563
  %565 = getelementptr inbounds i16, i16* %524, i64 %562
  %566 = getelementptr inbounds i16, i16* %564, i64 -1
  %567 = load i16, i16* %566, align 2, !tbaa !509
  %568 = or i16 %567, 2
  store i16 %568, i16* %566, align 2, !tbaa !509
  %569 = sext i32 %558 to i64
  %570 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %569
  %571 = load i16, i16* %570, align 2, !tbaa !509
  %572 = load i16, i16* %564, align 2, !tbaa !509
  %573 = or i16 %572, %571
  store i16 %573, i16* %564, align 2, !tbaa !509
  %574 = getelementptr inbounds i16, i16* %564, i64 1
  %575 = load i16, i16* %574, align 2, !tbaa !509
  %576 = or i16 %575, 4
  store i16 %576, i16* %574, align 2, !tbaa !509
  %577 = add nsw i32 %558, 2
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %578
  %580 = load i16, i16* %579, align 2, !tbaa !509
  %581 = getelementptr inbounds i16, i16* %524, i64 -1
  %582 = load i16, i16* %581, align 2, !tbaa !509
  %583 = or i16 %582, %580
  store i16 %583, i16* %581, align 2, !tbaa !509
  %584 = load i16, i16* %524, align 2, !tbaa !509
  %585 = or i16 %584, 4096
  store i16 %585, i16* %524, align 2, !tbaa !509
  %586 = add nsw i32 %558, 4
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %587
  %589 = load i16, i16* %588, align 2, !tbaa !509
  %590 = getelementptr inbounds i16, i16* %524, i64 1
  %591 = load i16, i16* %590, align 2, !tbaa !509
  %592 = or i16 %591, %589
  store i16 %592, i16* %590, align 2, !tbaa !509
  %593 = getelementptr inbounds i16, i16* %565, i64 -1
  %594 = load i16, i16* %593, align 2, !tbaa !509
  %595 = or i16 %594, 1
  store i16 %595, i16* %593, align 2, !tbaa !509
  %596 = add nsw i32 %558, 6
  %597 = sext i32 %596 to i64
  %598 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %597
  %599 = load i16, i16* %598, align 2, !tbaa !509
  %600 = load i16, i16* %565, align 2, !tbaa !509
  %601 = or i16 %600, %599
  store i16 %601, i16* %565, align 2, !tbaa !509
  %602 = getelementptr inbounds i16, i16* %565, i64 1
  %603 = load i16, i16* %602, align 2, !tbaa !509
  %604 = or i16 %603, 8
  store i16 %604, i16* %602, align 2, !tbaa !509
  br label %605

605:                                              ; preds = %546, %543
  %606 = phi i64 [ %545, %543 ], [ %562, %546 ]
  %607 = load i16, i16* %524, align 2, !tbaa !509
  %608 = or i16 %607, 16384
  store i16 %608, i16* %524, align 2, !tbaa !509
  %609 = load i32, i32* %19, align 8, !tbaa !561
  %610 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  br label %611

611:                                              ; preds = %605, %516
  %612 = phi i64 [ %523, %516 ], [ %606, %605 ]
  %613 = phi i32 [ %517, %516 ], [ %609, %605 ]
  %614 = phi %struct.opj_mqc* [ %525, %516 ], [ %610, %605 ]
  %615 = phi i32 [ %518, %516 ], [ %609, %605 ]
  %616 = sext i32 %615 to i64
  %617 = getelementptr inbounds i32, i32* %520, i64 %616
  %618 = getelementptr inbounds i16, i16* %524, i64 %612
  %619 = load i16, i16* %618, align 2, !tbaa !509
  %620 = sext i16 %619 to i32
  %621 = and i32 %620, 255
  %622 = icmp ne i32 %621, 0
  %623 = and i32 %620, 20480
  %624 = icmp eq i32 %623, 0
  %625 = and i1 %622, %624
  br i1 %625, label %626, label %705

626:                                              ; preds = %611
  %627 = or i32 %621, %109
  %628 = sext i32 %627 to i64
  %629 = getelementptr inbounds [1024 x i8], [1024 x i8]* @lut_ctxno_zc, i64 0, i64 %628
  %630 = load i8, i8* %629, align 1, !tbaa !15
  %631 = sext i8 %630 to i64
  %632 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %614, i64 0, i32 6, i64 %631
  %633 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %614, i64 0, i32 7
  store %struct.opj_mqc_state** %632, %struct.opj_mqc_state*** %633, align 8, !tbaa !441
  %634 = tail call i32 @mqc_decode(%struct.opj_mqc* %614) #9
  %635 = icmp eq i32 %634, 0
  br i1 %635, label %636, label %639

636:                                              ; preds = %626
  %637 = load i32, i32* %21, align 8, !tbaa !582
  %638 = sext i32 %637 to i64
  br label %698

639:                                              ; preds = %626
  %640 = lshr i32 %620, 4
  %641 = and i32 %640, 255
  %642 = zext i32 %641 to i64
  %643 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %642
  %644 = load i8, i8* %643, align 1, !tbaa !15
  %645 = sext i8 %644 to i64
  %646 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %614, i64 0, i32 6, i64 %645
  store %struct.opj_mqc_state** %646, %struct.opj_mqc_state*** %633, align 8, !tbaa !441
  %647 = tail call i32 @mqc_decode(%struct.opj_mqc* nonnull %614) #9
  %648 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %642
  %649 = load i8, i8* %648, align 1, !tbaa !15
  %650 = sext i8 %649 to i32
  %651 = xor i32 %647, %650
  %652 = icmp eq i32 %651, 0
  %653 = select i1 %652, i32 %490, i32 %497
  store i32 %653, i32* %617, align 4, !tbaa !43
  %654 = load i32, i32* %21, align 8, !tbaa !582
  %655 = sext i32 %654 to i64
  %656 = sub nsw i64 0, %655
  %657 = getelementptr inbounds i16, i16* %618, i64 %656
  %658 = getelementptr inbounds i16, i16* %618, i64 %655
  %659 = getelementptr inbounds i16, i16* %657, i64 -1
  %660 = load i16, i16* %659, align 2, !tbaa !509
  %661 = or i16 %660, 2
  store i16 %661, i16* %659, align 2, !tbaa !509
  %662 = sext i32 %651 to i64
  %663 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %662
  %664 = load i16, i16* %663, align 2, !tbaa !509
  %665 = load i16, i16* %657, align 2, !tbaa !509
  %666 = or i16 %665, %664
  store i16 %666, i16* %657, align 2, !tbaa !509
  %667 = getelementptr inbounds i16, i16* %657, i64 1
  %668 = load i16, i16* %667, align 2, !tbaa !509
  %669 = or i16 %668, 4
  store i16 %669, i16* %667, align 2, !tbaa !509
  %670 = add nsw i32 %651, 2
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %671
  %673 = load i16, i16* %672, align 2, !tbaa !509
  %674 = getelementptr inbounds i16, i16* %618, i64 -1
  %675 = load i16, i16* %674, align 2, !tbaa !509
  %676 = or i16 %675, %673
  store i16 %676, i16* %674, align 2, !tbaa !509
  %677 = load i16, i16* %618, align 2, !tbaa !509
  %678 = or i16 %677, 4096
  store i16 %678, i16* %618, align 2, !tbaa !509
  %679 = add nsw i32 %651, 4
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %680
  %682 = load i16, i16* %681, align 2, !tbaa !509
  %683 = getelementptr inbounds i16, i16* %618, i64 1
  %684 = load i16, i16* %683, align 2, !tbaa !509
  %685 = or i16 %684, %682
  store i16 %685, i16* %683, align 2, !tbaa !509
  %686 = getelementptr inbounds i16, i16* %658, i64 -1
  %687 = load i16, i16* %686, align 2, !tbaa !509
  %688 = or i16 %687, 1
  store i16 %688, i16* %686, align 2, !tbaa !509
  %689 = add nsw i32 %651, 6
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %690
  %692 = load i16, i16* %691, align 2, !tbaa !509
  %693 = load i16, i16* %658, align 2, !tbaa !509
  %694 = or i16 %693, %692
  store i16 %694, i16* %658, align 2, !tbaa !509
  %695 = getelementptr inbounds i16, i16* %658, i64 1
  %696 = load i16, i16* %695, align 2, !tbaa !509
  %697 = or i16 %696, 8
  store i16 %697, i16* %695, align 2, !tbaa !509
  br label %698

698:                                              ; preds = %639, %636
  %699 = phi i64 [ %638, %636 ], [ %655, %639 ]
  %700 = load i16, i16* %618, align 2, !tbaa !509
  %701 = or i16 %700, 16384
  store i16 %701, i16* %618, align 2, !tbaa !509
  %702 = load i32, i32* %19, align 8, !tbaa !561
  %703 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %704 = sext i32 %702 to i64
  br label %705

705:                                              ; preds = %698, %611
  %706 = phi i64 [ %616, %611 ], [ %704, %698 ]
  %707 = phi i64 [ %612, %611 ], [ %699, %698 ]
  %708 = phi i32 [ %613, %611 ], [ %702, %698 ]
  %709 = phi %struct.opj_mqc* [ %614, %611 ], [ %703, %698 ]
  %710 = getelementptr inbounds i32, i32* %617, i64 %706
  %711 = getelementptr inbounds i16, i16* %618, i64 %707
  %712 = load i16, i16* %711, align 2, !tbaa !509
  %713 = sext i16 %712 to i32
  %714 = and i32 %713, 255
  %715 = icmp ne i32 %714, 0
  %716 = and i32 %713, 20480
  %717 = icmp eq i32 %716, 0
  %718 = and i1 %715, %717
  br i1 %718, label %719, label %798

719:                                              ; preds = %705
  %720 = or i32 %714, %109
  %721 = sext i32 %720 to i64
  %722 = getelementptr inbounds [1024 x i8], [1024 x i8]* @lut_ctxno_zc, i64 0, i64 %721
  %723 = load i8, i8* %722, align 1, !tbaa !15
  %724 = sext i8 %723 to i64
  %725 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %709, i64 0, i32 6, i64 %724
  %726 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %709, i64 0, i32 7
  store %struct.opj_mqc_state** %725, %struct.opj_mqc_state*** %726, align 8, !tbaa !441
  %727 = tail call i32 @mqc_decode(%struct.opj_mqc* %709) #9
  %728 = icmp eq i32 %727, 0
  br i1 %728, label %729, label %732

729:                                              ; preds = %719
  %730 = load i32, i32* %21, align 8, !tbaa !582
  %731 = sext i32 %730 to i64
  br label %791

732:                                              ; preds = %719
  %733 = lshr i32 %713, 4
  %734 = and i32 %733, 255
  %735 = zext i32 %734 to i64
  %736 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %735
  %737 = load i8, i8* %736, align 1, !tbaa !15
  %738 = sext i8 %737 to i64
  %739 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %709, i64 0, i32 6, i64 %738
  store %struct.opj_mqc_state** %739, %struct.opj_mqc_state*** %726, align 8, !tbaa !441
  %740 = tail call i32 @mqc_decode(%struct.opj_mqc* nonnull %709) #9
  %741 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %735
  %742 = load i8, i8* %741, align 1, !tbaa !15
  %743 = sext i8 %742 to i32
  %744 = xor i32 %740, %743
  %745 = icmp eq i32 %744, 0
  %746 = select i1 %745, i32 %490, i32 %497
  store i32 %746, i32* %710, align 4, !tbaa !43
  %747 = load i32, i32* %21, align 8, !tbaa !582
  %748 = sext i32 %747 to i64
  %749 = sub nsw i64 0, %748
  %750 = getelementptr inbounds i16, i16* %711, i64 %749
  %751 = getelementptr inbounds i16, i16* %711, i64 %748
  %752 = getelementptr inbounds i16, i16* %750, i64 -1
  %753 = load i16, i16* %752, align 2, !tbaa !509
  %754 = or i16 %753, 2
  store i16 %754, i16* %752, align 2, !tbaa !509
  %755 = sext i32 %744 to i64
  %756 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %755
  %757 = load i16, i16* %756, align 2, !tbaa !509
  %758 = load i16, i16* %750, align 2, !tbaa !509
  %759 = or i16 %758, %757
  store i16 %759, i16* %750, align 2, !tbaa !509
  %760 = getelementptr inbounds i16, i16* %750, i64 1
  %761 = load i16, i16* %760, align 2, !tbaa !509
  %762 = or i16 %761, 4
  store i16 %762, i16* %760, align 2, !tbaa !509
  %763 = add nsw i32 %744, 2
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %764
  %766 = load i16, i16* %765, align 2, !tbaa !509
  %767 = getelementptr inbounds i16, i16* %711, i64 -1
  %768 = load i16, i16* %767, align 2, !tbaa !509
  %769 = or i16 %768, %766
  store i16 %769, i16* %767, align 2, !tbaa !509
  %770 = load i16, i16* %711, align 2, !tbaa !509
  %771 = or i16 %770, 4096
  store i16 %771, i16* %711, align 2, !tbaa !509
  %772 = add nsw i32 %744, 4
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %773
  %775 = load i16, i16* %774, align 2, !tbaa !509
  %776 = getelementptr inbounds i16, i16* %711, i64 1
  %777 = load i16, i16* %776, align 2, !tbaa !509
  %778 = or i16 %777, %775
  store i16 %778, i16* %776, align 2, !tbaa !509
  %779 = getelementptr inbounds i16, i16* %751, i64 -1
  %780 = load i16, i16* %779, align 2, !tbaa !509
  %781 = or i16 %780, 1
  store i16 %781, i16* %779, align 2, !tbaa !509
  %782 = add nsw i32 %744, 6
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %783
  %785 = load i16, i16* %784, align 2, !tbaa !509
  %786 = load i16, i16* %751, align 2, !tbaa !509
  %787 = or i16 %786, %785
  store i16 %787, i16* %751, align 2, !tbaa !509
  %788 = getelementptr inbounds i16, i16* %751, i64 1
  %789 = load i16, i16* %788, align 2, !tbaa !509
  %790 = or i16 %789, 8
  store i16 %790, i16* %788, align 2, !tbaa !509
  br label %791

791:                                              ; preds = %732, %729
  %792 = phi i64 [ %731, %729 ], [ %748, %732 ]
  %793 = load i16, i16* %711, align 2, !tbaa !509
  %794 = or i16 %793, 16384
  store i16 %794, i16* %711, align 2, !tbaa !509
  %795 = load i32, i32* %19, align 8, !tbaa !561
  %796 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %797 = sext i32 %795 to i64
  br label %798

798:                                              ; preds = %791, %705
  %799 = phi i64 [ %706, %705 ], [ %797, %791 ]
  %800 = phi i64 [ %707, %705 ], [ %792, %791 ]
  %801 = phi i32 [ %708, %705 ], [ %795, %791 ]
  %802 = phi %struct.opj_mqc* [ %709, %705 ], [ %796, %791 ]
  %803 = getelementptr inbounds i32, i32* %710, i64 %799
  %804 = getelementptr inbounds i16, i16* %711, i64 %800
  %805 = load i16, i16* %804, align 2, !tbaa !509
  %806 = sext i16 %805 to i32
  %807 = and i32 %806, 255
  %808 = icmp ne i32 %807, 0
  %809 = and i32 %806, 20480
  %810 = icmp eq i32 %809, 0
  %811 = and i1 %808, %810
  br i1 %811, label %812, label %885

812:                                              ; preds = %798
  %813 = or i32 %807, %109
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds [1024 x i8], [1024 x i8]* @lut_ctxno_zc, i64 0, i64 %814
  %816 = load i8, i8* %815, align 1, !tbaa !15
  %817 = sext i8 %816 to i64
  %818 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %802, i64 0, i32 6, i64 %817
  %819 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %802, i64 0, i32 7
  store %struct.opj_mqc_state** %818, %struct.opj_mqc_state*** %819, align 8, !tbaa !441
  %820 = tail call i32 @mqc_decode(%struct.opj_mqc* %802) #9
  %821 = icmp eq i32 %820, 0
  br i1 %821, label %881, label %822

822:                                              ; preds = %812
  %823 = lshr i32 %806, 4
  %824 = and i32 %823, 255
  %825 = zext i32 %824 to i64
  %826 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %825
  %827 = load i8, i8* %826, align 1, !tbaa !15
  %828 = sext i8 %827 to i64
  %829 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %802, i64 0, i32 6, i64 %828
  store %struct.opj_mqc_state** %829, %struct.opj_mqc_state*** %819, align 8, !tbaa !441
  %830 = tail call i32 @mqc_decode(%struct.opj_mqc* nonnull %802) #9
  %831 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %825
  %832 = load i8, i8* %831, align 1, !tbaa !15
  %833 = sext i8 %832 to i32
  %834 = xor i32 %830, %833
  %835 = icmp eq i32 %834, 0
  %836 = select i1 %835, i32 %490, i32 %497
  store i32 %836, i32* %803, align 4, !tbaa !43
  %837 = load i32, i32* %21, align 8, !tbaa !582
  %838 = sext i32 %837 to i64
  %839 = sub nsw i64 0, %838
  %840 = getelementptr inbounds i16, i16* %804, i64 %839
  %841 = getelementptr inbounds i16, i16* %804, i64 %838
  %842 = getelementptr inbounds i16, i16* %840, i64 -1
  %843 = load i16, i16* %842, align 2, !tbaa !509
  %844 = or i16 %843, 2
  store i16 %844, i16* %842, align 2, !tbaa !509
  %845 = sext i32 %834 to i64
  %846 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %845
  %847 = load i16, i16* %846, align 2, !tbaa !509
  %848 = load i16, i16* %840, align 2, !tbaa !509
  %849 = or i16 %848, %847
  store i16 %849, i16* %840, align 2, !tbaa !509
  %850 = getelementptr inbounds i16, i16* %840, i64 1
  %851 = load i16, i16* %850, align 2, !tbaa !509
  %852 = or i16 %851, 4
  store i16 %852, i16* %850, align 2, !tbaa !509
  %853 = add nsw i32 %834, 2
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %854
  %856 = load i16, i16* %855, align 2, !tbaa !509
  %857 = getelementptr inbounds i16, i16* %804, i64 -1
  %858 = load i16, i16* %857, align 2, !tbaa !509
  %859 = or i16 %858, %856
  store i16 %859, i16* %857, align 2, !tbaa !509
  %860 = load i16, i16* %804, align 2, !tbaa !509
  %861 = or i16 %860, 4096
  store i16 %861, i16* %804, align 2, !tbaa !509
  %862 = add nsw i32 %834, 4
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %863
  %865 = load i16, i16* %864, align 2, !tbaa !509
  %866 = getelementptr inbounds i16, i16* %804, i64 1
  %867 = load i16, i16* %866, align 2, !tbaa !509
  %868 = or i16 %867, %865
  store i16 %868, i16* %866, align 2, !tbaa !509
  %869 = getelementptr inbounds i16, i16* %841, i64 -1
  %870 = load i16, i16* %869, align 2, !tbaa !509
  %871 = or i16 %870, 1
  store i16 %871, i16* %869, align 2, !tbaa !509
  %872 = add nsw i32 %834, 6
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %873
  %875 = load i16, i16* %874, align 2, !tbaa !509
  %876 = load i16, i16* %841, align 2, !tbaa !509
  %877 = or i16 %876, %875
  store i16 %877, i16* %841, align 2, !tbaa !509
  %878 = getelementptr inbounds i16, i16* %841, i64 1
  %879 = load i16, i16* %878, align 2, !tbaa !509
  %880 = or i16 %879, 8
  store i16 %880, i16* %878, align 2, !tbaa !509
  br label %881

881:                                              ; preds = %822, %812
  %882 = load i16, i16* %804, align 2, !tbaa !509
  %883 = or i16 %882, 16384
  store i16 %883, i16* %804, align 2, !tbaa !509
  %884 = load i32, i32* %19, align 8, !tbaa !561
  br label %885

885:                                              ; preds = %881, %798
  %886 = phi i32 [ %801, %798 ], [ %884, %881 ]
  %887 = add nuw nsw i64 %519, 1
  %888 = sext i32 %886 to i64
  %889 = icmp slt i64 %887, %888
  br i1 %889, label %516, label %890

890:                                              ; preds = %885
  %891 = load i32, i32* %18, align 4, !tbaa !562
  br label %892

892:                                              ; preds = %890, %499
  %893 = phi i32 [ %500, %499 ], [ %891, %890 ]
  %894 = phi i32 [ %501, %499 ], [ %886, %890 ]
  %895 = phi i32 [ %502, %499 ], [ %886, %890 ]
  %896 = shl i32 %895, 2
  %897 = sext i32 %896 to i64
  %898 = getelementptr inbounds i32, i32* %504, i64 %897
  %899 = load i32, i32* %21, align 8, !tbaa !582
  %900 = shl i32 %899, 2
  %901 = sext i32 %900 to i64
  %902 = getelementptr inbounds i16, i16* %503, i64 %901
  %903 = add nuw nsw i32 %505, 4
  %904 = and i32 %893, -4
  %905 = icmp slt i32 %903, %904
  br i1 %905, label %499, label %507

906:                                              ; preds = %1015, %514
  %907 = phi i32 [ %509, %514 ], [ %1016, %1015 ]
  %908 = phi i32 [ %508, %514 ], [ %1017, %1015 ]
  %909 = phi i32 [ %508, %514 ], [ %1018, %1015 ]
  %910 = phi i64 [ 0, %514 ], [ %1019, %1015 ]
  %911 = icmp slt i32 %510, %909
  br i1 %911, label %912, label %1015

912:                                              ; preds = %906
  %913 = getelementptr inbounds i16, i16* %512, i64 %910
  %914 = getelementptr inbounds i32, i32* %511, i64 %910
  br label %915

915:                                              ; preds = %1007, %912
  %916 = phi i32 [ %1008, %1007 ], [ %907, %912 ]
  %917 = phi i32 [ %1009, %1007 ], [ %908, %912 ]
  %918 = phi i32 [ %1010, %1007 ], [ %907, %912 ]
  %919 = phi i16* [ %924, %1007 ], [ %913, %912 ]
  %920 = phi i32* [ %1012, %1007 ], [ %914, %912 ]
  %921 = phi i32 [ %1013, %1007 ], [ %510, %912 ]
  %922 = load i32, i32* %21, align 8, !tbaa !582
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds i16, i16* %919, i64 %923
  %925 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %926 = load i16, i16* %924, align 2, !tbaa !509
  %927 = sext i16 %926 to i32
  %928 = and i32 %927, 255
  %929 = icmp ne i32 %928, 0
  %930 = and i32 %927, 20480
  %931 = icmp eq i32 %930, 0
  %932 = and i1 %929, %931
  br i1 %932, label %933, label %1007

933:                                              ; preds = %915
  %934 = or i32 %928, %109
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds [1024 x i8], [1024 x i8]* @lut_ctxno_zc, i64 0, i64 %935
  %937 = load i8, i8* %936, align 1, !tbaa !15
  %938 = sext i8 %937 to i64
  %939 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %925, i64 0, i32 6, i64 %938
  %940 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %925, i64 0, i32 7
  store %struct.opj_mqc_state** %939, %struct.opj_mqc_state*** %940, align 8, !tbaa !441
  %941 = tail call i32 @mqc_decode(%struct.opj_mqc* %925) #9
  %942 = icmp eq i32 %941, 0
  br i1 %942, label %1002, label %943

943:                                              ; preds = %933
  %944 = lshr i32 %927, 4
  %945 = and i32 %944, 255
  %946 = zext i32 %945 to i64
  %947 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %946
  %948 = load i8, i8* %947, align 1, !tbaa !15
  %949 = sext i8 %948 to i64
  %950 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %925, i64 0, i32 6, i64 %949
  store %struct.opj_mqc_state** %950, %struct.opj_mqc_state*** %940, align 8, !tbaa !441
  %951 = tail call i32 @mqc_decode(%struct.opj_mqc* nonnull %925) #9
  %952 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %946
  %953 = load i8, i8* %952, align 1, !tbaa !15
  %954 = sext i8 %953 to i32
  %955 = xor i32 %951, %954
  %956 = icmp eq i32 %955, 0
  %957 = select i1 %956, i32 %490, i32 %515
  store i32 %957, i32* %920, align 4, !tbaa !43
  %958 = load i32, i32* %21, align 8, !tbaa !582
  %959 = sext i32 %958 to i64
  %960 = sub nsw i64 0, %959
  %961 = getelementptr inbounds i16, i16* %924, i64 %960
  %962 = getelementptr inbounds i16, i16* %924, i64 %959
  %963 = getelementptr inbounds i16, i16* %961, i64 -1
  %964 = load i16, i16* %963, align 2, !tbaa !509
  %965 = or i16 %964, 2
  store i16 %965, i16* %963, align 2, !tbaa !509
  %966 = sext i32 %955 to i64
  %967 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %966
  %968 = load i16, i16* %967, align 2, !tbaa !509
  %969 = load i16, i16* %961, align 2, !tbaa !509
  %970 = or i16 %969, %968
  store i16 %970, i16* %961, align 2, !tbaa !509
  %971 = getelementptr inbounds i16, i16* %961, i64 1
  %972 = load i16, i16* %971, align 2, !tbaa !509
  %973 = or i16 %972, 4
  store i16 %973, i16* %971, align 2, !tbaa !509
  %974 = add nsw i32 %955, 2
  %975 = sext i32 %974 to i64
  %976 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %975
  %977 = load i16, i16* %976, align 2, !tbaa !509
  %978 = getelementptr inbounds i16, i16* %924, i64 -1
  %979 = load i16, i16* %978, align 2, !tbaa !509
  %980 = or i16 %979, %977
  store i16 %980, i16* %978, align 2, !tbaa !509
  %981 = load i16, i16* %924, align 2, !tbaa !509
  %982 = or i16 %981, 4096
  store i16 %982, i16* %924, align 2, !tbaa !509
  %983 = add nsw i32 %955, 4
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %984
  %986 = load i16, i16* %985, align 2, !tbaa !509
  %987 = getelementptr inbounds i16, i16* %924, i64 1
  %988 = load i16, i16* %987, align 2, !tbaa !509
  %989 = or i16 %988, %986
  store i16 %989, i16* %987, align 2, !tbaa !509
  %990 = getelementptr inbounds i16, i16* %962, i64 -1
  %991 = load i16, i16* %990, align 2, !tbaa !509
  %992 = or i16 %991, 1
  store i16 %992, i16* %990, align 2, !tbaa !509
  %993 = add nsw i32 %955, 6
  %994 = sext i32 %993 to i64
  %995 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %994
  %996 = load i16, i16* %995, align 2, !tbaa !509
  %997 = load i16, i16* %962, align 2, !tbaa !509
  %998 = or i16 %997, %996
  store i16 %998, i16* %962, align 2, !tbaa !509
  %999 = getelementptr inbounds i16, i16* %962, i64 1
  %1000 = load i16, i16* %999, align 2, !tbaa !509
  %1001 = or i16 %1000, 8
  store i16 %1001, i16* %999, align 2, !tbaa !509
  br label %1002

1002:                                             ; preds = %943, %933
  %1003 = load i16, i16* %924, align 2, !tbaa !509
  %1004 = or i16 %1003, 16384
  store i16 %1004, i16* %924, align 2, !tbaa !509
  %1005 = load i32, i32* %19, align 8, !tbaa !561
  %1006 = load i32, i32* %18, align 4, !tbaa !562
  br label %1007

1007:                                             ; preds = %1002, %915
  %1008 = phi i32 [ %916, %915 ], [ %1005, %1002 ]
  %1009 = phi i32 [ %917, %915 ], [ %1006, %1002 ]
  %1010 = phi i32 [ %918, %915 ], [ %1005, %1002 ]
  %1011 = sext i32 %1010 to i64
  %1012 = getelementptr inbounds i32, i32* %920, i64 %1011
  %1013 = add nuw nsw i32 %921, 1
  %1014 = icmp slt i32 %1013, %1009
  br i1 %1014, label %915, label %1015

1015:                                             ; preds = %1007, %906
  %1016 = phi i32 [ %907, %906 ], [ %1008, %1007 ]
  %1017 = phi i32 [ %908, %906 ], [ %1009, %1007 ]
  %1018 = phi i32 [ %909, %906 ], [ %1009, %1007 ]
  %1019 = add nuw nsw i64 %910, 1
  %1020 = sext i32 %1016 to i64
  %1021 = icmp slt i64 %1019, %1020
  br i1 %1021, label %906, label %2104

1022:                                             ; preds = %143
  %1023 = add nsw i32 %144, 1
  br i1 %123, label %1024, label %1189

1024:                                             ; preds = %1022
  %1025 = shl i32 1, %1023
  %1026 = ashr i32 %1025, 1
  %1027 = icmp sgt i32 %144, -1
  %1028 = sub nsw i32 0, %1026
  %1029 = select i1 %1027, i32 %1028, i32 -1
  %1030 = load i32, i32* %18, align 4, !tbaa !562
  %1031 = icmp sgt i32 %1030, 0
  br i1 %1031, label %1032, label %2106

1032:                                             ; preds = %1024
  %1033 = load i32, i32* %19, align 8, !tbaa !561
  br label %1034

1034:                                             ; preds = %1088, %1032
  %1035 = phi i32 [ %1030, %1032 ], [ %1089, %1088 ]
  %1036 = phi i32 [ %1030, %1032 ], [ %1090, %1088 ]
  %1037 = phi i32 [ %1033, %1032 ], [ %1091, %1088 ]
  %1038 = phi i32 [ 0, %1032 ], [ %1092, %1088 ]
  %1039 = icmp sgt i32 %1037, 0
  br i1 %1039, label %1040, label %1088

1040:                                             ; preds = %1034
  %1041 = or i32 %1038, 1
  %1042 = add nuw nsw i32 %1041, 1
  %1043 = or i32 %1038, 3
  %1044 = add nuw nsw i32 %1043, 1
  br label %1045

1045:                                             ; preds = %1084, %1040
  %1046 = phi i32 [ %1035, %1040 ], [ %1085, %1084 ]
  %1047 = phi i32 [ %1037, %1040 ], [ %1086, %1084 ]
  %1048 = phi i32 [ %1036, %1040 ], [ %1085, %1084 ]
  %1049 = phi i32 [ 0, %1040 ], [ %1050, %1084 ]
  %1050 = add nuw nsw i32 %1049, 1
  %1051 = icmp slt i32 %1038, %1048
  br i1 %1051, label %1052, label %1084

1052:                                             ; preds = %1045
  %1053 = load i16*, i16** %20, align 8, !tbaa !540
  %1054 = load i32, i32* %21, align 8, !tbaa !582
  %1055 = mul nsw i32 %1054, %1041
  %1056 = add i32 %1055, %1050
  %1057 = sext i32 %1056 to i64
  %1058 = getelementptr inbounds i16, i16* %1053, i64 %1057
  %1059 = load i32*, i32** %22, align 8, !tbaa !539
  %1060 = mul nsw i32 %1047, %1038
  %1061 = add nsw i32 %1049, %1060
  %1062 = sext i32 %1061 to i64
  %1063 = getelementptr inbounds i32, i32* %1059, i64 %1062
  %1064 = load i16, i16* %1058, align 2, !tbaa !509
  %1065 = and i16 %1064, 20480
  %1066 = icmp eq i16 %1065, 4096
  br i1 %1066, label %1067, label %1080

1067:                                             ; preds = %1052
  %1068 = load %struct.opj_raw*, %struct.opj_raw** %16, align 8, !tbaa !536
  %1069 = tail call i32 @raw_decode(%struct.opj_raw* %1068) #9
  %1070 = icmp eq i32 %1069, 0
  %1071 = select i1 %1070, i32 %1029, i32 %1026
  %1072 = load i32, i32* %1063, align 4, !tbaa !43
  %1073 = icmp slt i32 %1072, 0
  %1074 = sub nsw i32 0, %1071
  %1075 = select i1 %1073, i32 %1074, i32 %1071
  %1076 = add nsw i32 %1075, %1072
  store i32 %1076, i32* %1063, align 4, !tbaa !43
  %1077 = load i16, i16* %1058, align 2, !tbaa !509
  %1078 = or i16 %1077, 8192
  store i16 %1078, i16* %1058, align 2, !tbaa !509
  %1079 = load i32, i32* %18, align 4, !tbaa !562
  br label %1080

1080:                                             ; preds = %1067, %1052
  %1081 = phi i32 [ %1046, %1052 ], [ %1079, %1067 ]
  %1082 = phi i32 [ %1048, %1052 ], [ %1079, %1067 ]
  %1083 = icmp slt i32 %1041, %1082
  br i1 %1083, label %1094, label %1084

1084:                                             ; preds = %1176, %1160, %1156, %1123, %1080, %1045
  %1085 = phi i32 [ %1188, %1176 ], [ %1157, %1160 ], [ %1157, %1156 ], [ %1124, %1123 ], [ %1081, %1080 ], [ %1046, %1045 ]
  %1086 = load i32, i32* %19, align 8, !tbaa !561
  %1087 = icmp slt i32 %1050, %1086
  br i1 %1087, label %1045, label %1088

1088:                                             ; preds = %1084, %1034
  %1089 = phi i32 [ %1035, %1034 ], [ %1085, %1084 ]
  %1090 = phi i32 [ %1036, %1034 ], [ %1085, %1084 ]
  %1091 = phi i32 [ %1037, %1034 ], [ %1086, %1084 ]
  %1092 = add nuw nsw i32 %1038, 4
  %1093 = icmp slt i32 %1092, %1090
  br i1 %1093, label %1034, label %2104

1094:                                             ; preds = %1080
  %1095 = load i16*, i16** %20, align 8, !tbaa !540
  %1096 = load i32, i32* %21, align 8, !tbaa !582
  %1097 = mul nsw i32 %1096, %1042
  %1098 = add i32 %1097, %1050
  %1099 = sext i32 %1098 to i64
  %1100 = getelementptr inbounds i16, i16* %1095, i64 %1099
  %1101 = load i32*, i32** %22, align 8, !tbaa !539
  %1102 = load i32, i32* %19, align 8, !tbaa !561
  %1103 = mul nsw i32 %1102, %1041
  %1104 = add nsw i32 %1103, %1049
  %1105 = sext i32 %1104 to i64
  %1106 = getelementptr inbounds i32, i32* %1101, i64 %1105
  %1107 = load i16, i16* %1100, align 2, !tbaa !509
  %1108 = and i16 %1107, 20480
  %1109 = icmp eq i16 %1108, 4096
  br i1 %1109, label %1110, label %1123

1110:                                             ; preds = %1094
  %1111 = load %struct.opj_raw*, %struct.opj_raw** %16, align 8, !tbaa !536
  %1112 = tail call i32 @raw_decode(%struct.opj_raw* %1111) #9
  %1113 = icmp eq i32 %1112, 0
  %1114 = select i1 %1113, i32 %1029, i32 %1026
  %1115 = load i32, i32* %1106, align 4, !tbaa !43
  %1116 = icmp slt i32 %1115, 0
  %1117 = sub nsw i32 0, %1114
  %1118 = select i1 %1116, i32 %1117, i32 %1114
  %1119 = add nsw i32 %1118, %1115
  store i32 %1119, i32* %1106, align 4, !tbaa !43
  %1120 = load i16, i16* %1100, align 2, !tbaa !509
  %1121 = or i16 %1120, 8192
  store i16 %1121, i16* %1100, align 2, !tbaa !509
  %1122 = load i32, i32* %18, align 4, !tbaa !562
  br label %1123

1123:                                             ; preds = %1110, %1094
  %1124 = phi i32 [ %1122, %1110 ], [ %1081, %1094 ]
  %1125 = phi i32 [ %1122, %1110 ], [ %1082, %1094 ]
  %1126 = icmp slt i32 %1042, %1125
  br i1 %1126, label %1127, label %1084

1127:                                             ; preds = %1123
  %1128 = load i16*, i16** %20, align 8, !tbaa !540
  %1129 = load i32, i32* %21, align 8, !tbaa !582
  %1130 = mul nsw i32 %1129, %1043
  %1131 = add i32 %1130, %1050
  %1132 = sext i32 %1131 to i64
  %1133 = getelementptr inbounds i16, i16* %1128, i64 %1132
  %1134 = load i32*, i32** %22, align 8, !tbaa !539
  %1135 = load i32, i32* %19, align 8, !tbaa !561
  %1136 = mul nsw i32 %1135, %1042
  %1137 = add nsw i32 %1136, %1049
  %1138 = sext i32 %1137 to i64
  %1139 = getelementptr inbounds i32, i32* %1134, i64 %1138
  %1140 = load i16, i16* %1133, align 2, !tbaa !509
  %1141 = and i16 %1140, 20480
  %1142 = icmp eq i16 %1141, 4096
  br i1 %1142, label %1143, label %1156

1143:                                             ; preds = %1127
  %1144 = load %struct.opj_raw*, %struct.opj_raw** %16, align 8, !tbaa !536
  %1145 = tail call i32 @raw_decode(%struct.opj_raw* %1144) #9
  %1146 = icmp eq i32 %1145, 0
  %1147 = select i1 %1146, i32 %1029, i32 %1026
  %1148 = load i32, i32* %1139, align 4, !tbaa !43
  %1149 = icmp slt i32 %1148, 0
  %1150 = sub nsw i32 0, %1147
  %1151 = select i1 %1149, i32 %1150, i32 %1147
  %1152 = add nsw i32 %1151, %1148
  store i32 %1152, i32* %1139, align 4, !tbaa !43
  %1153 = load i16, i16* %1133, align 2, !tbaa !509
  %1154 = or i16 %1153, 8192
  store i16 %1154, i16* %1133, align 2, !tbaa !509
  %1155 = load i32, i32* %18, align 4, !tbaa !562
  br label %1156

1156:                                             ; preds = %1143, %1127
  %1157 = phi i32 [ %1155, %1143 ], [ %1124, %1127 ]
  %1158 = phi i32 [ %1155, %1143 ], [ %1125, %1127 ]
  %1159 = icmp slt i32 %1043, %1158
  br i1 %1159, label %1160, label %1084

1160:                                             ; preds = %1156
  %1161 = load i16*, i16** %20, align 8, !tbaa !540
  %1162 = load i32, i32* %21, align 8, !tbaa !582
  %1163 = mul nsw i32 %1162, %1044
  %1164 = add i32 %1163, %1050
  %1165 = sext i32 %1164 to i64
  %1166 = getelementptr inbounds i16, i16* %1161, i64 %1165
  %1167 = load i32*, i32** %22, align 8, !tbaa !539
  %1168 = load i32, i32* %19, align 8, !tbaa !561
  %1169 = mul nsw i32 %1168, %1043
  %1170 = add nsw i32 %1169, %1049
  %1171 = sext i32 %1170 to i64
  %1172 = getelementptr inbounds i32, i32* %1167, i64 %1171
  %1173 = load i16, i16* %1166, align 2, !tbaa !509
  %1174 = and i16 %1173, 20480
  %1175 = icmp eq i16 %1174, 4096
  br i1 %1175, label %1176, label %1084

1176:                                             ; preds = %1160
  %1177 = load %struct.opj_raw*, %struct.opj_raw** %16, align 8, !tbaa !536
  %1178 = tail call i32 @raw_decode(%struct.opj_raw* %1177) #9
  %1179 = icmp eq i32 %1178, 0
  %1180 = select i1 %1179, i32 %1029, i32 %1026
  %1181 = load i32, i32* %1172, align 4, !tbaa !43
  %1182 = icmp slt i32 %1181, 0
  %1183 = sub nsw i32 0, %1180
  %1184 = select i1 %1182, i32 %1183, i32 %1180
  %1185 = add nsw i32 %1184, %1181
  store i32 %1185, i32* %1172, align 4, !tbaa !43
  %1186 = load i16, i16* %1166, align 2, !tbaa !509
  %1187 = or i16 %1186, 8192
  store i16 %1187, i16* %1166, align 2, !tbaa !509
  %1188 = load i32, i32* %18, align 4, !tbaa !562
  br label %1084

1189:                                             ; preds = %1022
  br i1 %108, label %1404, label %1190

1190:                                             ; preds = %1189
  %1191 = shl i32 1, %1023
  %1192 = ashr i32 %1191, 1
  %1193 = icmp sgt i32 %144, -1
  %1194 = sub nsw i32 0, %1192
  %1195 = select i1 %1193, i32 %1194, i32 -1
  %1196 = load i32, i32* %18, align 4, !tbaa !562
  %1197 = icmp sgt i32 %1196, 0
  br i1 %1197, label %1198, label %2104

1198:                                             ; preds = %1190
  %1199 = load i32, i32* %19, align 8, !tbaa !561
  br label %1200

1200:                                             ; preds = %1267, %1198
  %1201 = phi i32 [ %1196, %1198 ], [ %1268, %1267 ]
  %1202 = phi i32 [ %1196, %1198 ], [ %1269, %1267 ]
  %1203 = phi i32 [ %1199, %1198 ], [ %1270, %1267 ]
  %1204 = phi i32 [ 0, %1198 ], [ %1271, %1267 ]
  %1205 = icmp sgt i32 %1203, 0
  br i1 %1205, label %1206, label %1267

1206:                                             ; preds = %1200
  %1207 = or i32 %1204, 1
  %1208 = add nuw nsw i32 %1207, 1
  %1209 = or i32 %1204, 3
  %1210 = add nuw nsw i32 %1209, 1
  br label %1211

1211:                                             ; preds = %1263, %1206
  %1212 = phi i32 [ %1201, %1206 ], [ %1264, %1263 ]
  %1213 = phi i32 [ %1203, %1206 ], [ %1265, %1263 ]
  %1214 = phi i32 [ %1202, %1206 ], [ %1264, %1263 ]
  %1215 = phi i32 [ 0, %1206 ], [ %1216, %1263 ]
  %1216 = add nuw nsw i32 %1215, 1
  %1217 = icmp slt i32 %1204, %1214
  br i1 %1217, label %1218, label %1263

1218:                                             ; preds = %1211
  %1219 = add nsw i32 %1214, -1
  %1220 = icmp eq i32 %1204, %1219
  %1221 = load i16*, i16** %20, align 8, !tbaa !540
  %1222 = load i32, i32* %21, align 8, !tbaa !582
  %1223 = mul nsw i32 %1222, %1207
  %1224 = add i32 %1223, %1216
  %1225 = sext i32 %1224 to i64
  %1226 = getelementptr inbounds i16, i16* %1221, i64 %1225
  %1227 = load i32*, i32** %22, align 8, !tbaa !539
  %1228 = mul nsw i32 %1213, %1204
  %1229 = add nsw i32 %1215, %1228
  %1230 = sext i32 %1229 to i64
  %1231 = getelementptr inbounds i32, i32* %1227, i64 %1230
  %1232 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1233 = load i16, i16* %1226, align 2, !tbaa !509
  %1234 = sext i16 %1233 to i32
  %1235 = and i32 %1234, -1095
  %1236 = select i1 %1220, i32 %1235, i32 %1234
  %1237 = and i32 %1236, 20480
  %1238 = icmp eq i32 %1237, 4096
  br i1 %1238, label %1239, label %1259

1239:                                             ; preds = %1218
  %1240 = and i32 %1236, 255
  %1241 = icmp eq i32 %1240, 0
  %1242 = select i1 %1241, i64 14, i64 15
  %1243 = and i32 %1236, 8192
  %1244 = icmp eq i32 %1243, 0
  %1245 = select i1 %1244, i64 %1242, i64 16
  %1246 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1232, i64 0, i32 6, i64 %1245
  %1247 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1232, i64 0, i32 7
  store %struct.opj_mqc_state** %1246, %struct.opj_mqc_state*** %1247, align 8, !tbaa !441
  %1248 = tail call i32 @mqc_decode(%struct.opj_mqc* %1232) #9
  %1249 = icmp eq i32 %1248, 0
  %1250 = select i1 %1249, i32 %1195, i32 %1192
  %1251 = load i32, i32* %1231, align 4, !tbaa !43
  %1252 = icmp slt i32 %1251, 0
  %1253 = sub nsw i32 0, %1250
  %1254 = select i1 %1252, i32 %1253, i32 %1250
  %1255 = add nsw i32 %1254, %1251
  store i32 %1255, i32* %1231, align 4, !tbaa !43
  %1256 = load i16, i16* %1226, align 2, !tbaa !509
  %1257 = or i16 %1256, 8192
  store i16 %1257, i16* %1226, align 2, !tbaa !509
  %1258 = load i32, i32* %18, align 4, !tbaa !562
  br label %1259

1259:                                             ; preds = %1239, %1218
  %1260 = phi i32 [ %1212, %1218 ], [ %1258, %1239 ]
  %1261 = phi i32 [ %1214, %1218 ], [ %1258, %1239 ]
  %1262 = icmp slt i32 %1207, %1261
  br i1 %1262, label %1273, label %1263

1263:                                             ; preds = %1384, %1365, %1361, %1315, %1259, %1211
  %1264 = phi i32 [ %1403, %1384 ], [ %1362, %1365 ], [ %1362, %1361 ], [ %1316, %1315 ], [ %1260, %1259 ], [ %1212, %1211 ]
  %1265 = load i32, i32* %19, align 8, !tbaa !561
  %1266 = icmp slt i32 %1216, %1265
  br i1 %1266, label %1211, label %1267

1267:                                             ; preds = %1263, %1200
  %1268 = phi i32 [ %1201, %1200 ], [ %1264, %1263 ]
  %1269 = phi i32 [ %1202, %1200 ], [ %1264, %1263 ]
  %1270 = phi i32 [ %1203, %1200 ], [ %1265, %1263 ]
  %1271 = add nuw nsw i32 %1204, 4
  %1272 = icmp slt i32 %1271, %1269
  br i1 %1272, label %1200, label %2104

1273:                                             ; preds = %1259
  %1274 = add nsw i32 %1261, -1
  %1275 = icmp eq i32 %1207, %1274
  %1276 = load i16*, i16** %20, align 8, !tbaa !540
  %1277 = load i32, i32* %21, align 8, !tbaa !582
  %1278 = mul nsw i32 %1277, %1208
  %1279 = add i32 %1278, %1216
  %1280 = sext i32 %1279 to i64
  %1281 = getelementptr inbounds i16, i16* %1276, i64 %1280
  %1282 = load i32*, i32** %22, align 8, !tbaa !539
  %1283 = load i32, i32* %19, align 8, !tbaa !561
  %1284 = mul nsw i32 %1283, %1207
  %1285 = add nsw i32 %1284, %1215
  %1286 = sext i32 %1285 to i64
  %1287 = getelementptr inbounds i32, i32* %1282, i64 %1286
  %1288 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1289 = load i16, i16* %1281, align 2, !tbaa !509
  %1290 = sext i16 %1289 to i32
  %1291 = and i32 %1290, -1095
  %1292 = select i1 %1275, i32 %1291, i32 %1290
  %1293 = and i32 %1292, 20480
  %1294 = icmp eq i32 %1293, 4096
  br i1 %1294, label %1295, label %1315

1295:                                             ; preds = %1273
  %1296 = and i32 %1292, 255
  %1297 = icmp eq i32 %1296, 0
  %1298 = select i1 %1297, i64 14, i64 15
  %1299 = and i32 %1292, 8192
  %1300 = icmp eq i32 %1299, 0
  %1301 = select i1 %1300, i64 %1298, i64 16
  %1302 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1288, i64 0, i32 6, i64 %1301
  %1303 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1288, i64 0, i32 7
  store %struct.opj_mqc_state** %1302, %struct.opj_mqc_state*** %1303, align 8, !tbaa !441
  %1304 = tail call i32 @mqc_decode(%struct.opj_mqc* %1288) #9
  %1305 = icmp eq i32 %1304, 0
  %1306 = select i1 %1305, i32 %1195, i32 %1192
  %1307 = load i32, i32* %1287, align 4, !tbaa !43
  %1308 = icmp slt i32 %1307, 0
  %1309 = sub nsw i32 0, %1306
  %1310 = select i1 %1308, i32 %1309, i32 %1306
  %1311 = add nsw i32 %1310, %1307
  store i32 %1311, i32* %1287, align 4, !tbaa !43
  %1312 = load i16, i16* %1281, align 2, !tbaa !509
  %1313 = or i16 %1312, 8192
  store i16 %1313, i16* %1281, align 2, !tbaa !509
  %1314 = load i32, i32* %18, align 4, !tbaa !562
  br label %1315

1315:                                             ; preds = %1295, %1273
  %1316 = phi i32 [ %1314, %1295 ], [ %1260, %1273 ]
  %1317 = phi i32 [ %1314, %1295 ], [ %1261, %1273 ]
  %1318 = icmp slt i32 %1208, %1317
  br i1 %1318, label %1319, label %1263

1319:                                             ; preds = %1315
  %1320 = add nsw i32 %1317, -1
  %1321 = icmp eq i32 %1208, %1320
  %1322 = load i16*, i16** %20, align 8, !tbaa !540
  %1323 = load i32, i32* %21, align 8, !tbaa !582
  %1324 = mul nsw i32 %1323, %1209
  %1325 = add i32 %1324, %1216
  %1326 = sext i32 %1325 to i64
  %1327 = getelementptr inbounds i16, i16* %1322, i64 %1326
  %1328 = load i32*, i32** %22, align 8, !tbaa !539
  %1329 = load i32, i32* %19, align 8, !tbaa !561
  %1330 = mul nsw i32 %1329, %1208
  %1331 = add nsw i32 %1330, %1215
  %1332 = sext i32 %1331 to i64
  %1333 = getelementptr inbounds i32, i32* %1328, i64 %1332
  %1334 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1335 = load i16, i16* %1327, align 2, !tbaa !509
  %1336 = sext i16 %1335 to i32
  %1337 = and i32 %1336, -1095
  %1338 = select i1 %1321, i32 %1337, i32 %1336
  %1339 = and i32 %1338, 20480
  %1340 = icmp eq i32 %1339, 4096
  br i1 %1340, label %1341, label %1361

1341:                                             ; preds = %1319
  %1342 = and i32 %1338, 255
  %1343 = icmp eq i32 %1342, 0
  %1344 = select i1 %1343, i64 14, i64 15
  %1345 = and i32 %1338, 8192
  %1346 = icmp eq i32 %1345, 0
  %1347 = select i1 %1346, i64 %1344, i64 16
  %1348 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1334, i64 0, i32 6, i64 %1347
  %1349 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1334, i64 0, i32 7
  store %struct.opj_mqc_state** %1348, %struct.opj_mqc_state*** %1349, align 8, !tbaa !441
  %1350 = tail call i32 @mqc_decode(%struct.opj_mqc* %1334) #9
  %1351 = icmp eq i32 %1350, 0
  %1352 = select i1 %1351, i32 %1195, i32 %1192
  %1353 = load i32, i32* %1333, align 4, !tbaa !43
  %1354 = icmp slt i32 %1353, 0
  %1355 = sub nsw i32 0, %1352
  %1356 = select i1 %1354, i32 %1355, i32 %1352
  %1357 = add nsw i32 %1356, %1353
  store i32 %1357, i32* %1333, align 4, !tbaa !43
  %1358 = load i16, i16* %1327, align 2, !tbaa !509
  %1359 = or i16 %1358, 8192
  store i16 %1359, i16* %1327, align 2, !tbaa !509
  %1360 = load i32, i32* %18, align 4, !tbaa !562
  br label %1361

1361:                                             ; preds = %1341, %1319
  %1362 = phi i32 [ %1360, %1341 ], [ %1316, %1319 ]
  %1363 = phi i32 [ %1360, %1341 ], [ %1317, %1319 ]
  %1364 = icmp slt i32 %1209, %1363
  br i1 %1364, label %1365, label %1263

1365:                                             ; preds = %1361
  %1366 = load i16*, i16** %20, align 8, !tbaa !540
  %1367 = load i32, i32* %21, align 8, !tbaa !582
  %1368 = mul nsw i32 %1367, %1210
  %1369 = add i32 %1368, %1216
  %1370 = sext i32 %1369 to i64
  %1371 = getelementptr inbounds i16, i16* %1366, i64 %1370
  %1372 = load i32*, i32** %22, align 8, !tbaa !539
  %1373 = load i32, i32* %19, align 8, !tbaa !561
  %1374 = mul nsw i32 %1373, %1209
  %1375 = add nsw i32 %1374, %1215
  %1376 = sext i32 %1375 to i64
  %1377 = getelementptr inbounds i32, i32* %1372, i64 %1376
  %1378 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1379 = load i16, i16* %1371, align 2, !tbaa !509
  %1380 = and i16 %1379, -1095
  %1381 = sext i16 %1380 to i32
  %1382 = and i32 %1381, 20480
  %1383 = icmp eq i32 %1382, 4096
  br i1 %1383, label %1384, label %1263

1384:                                             ; preds = %1365
  %1385 = and i32 %1381, 185
  %1386 = icmp eq i32 %1385, 0
  %1387 = select i1 %1386, i64 14, i64 15
  %1388 = and i32 %1381, 8192
  %1389 = icmp eq i32 %1388, 0
  %1390 = select i1 %1389, i64 %1387, i64 16
  %1391 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1378, i64 0, i32 6, i64 %1390
  %1392 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1378, i64 0, i32 7
  store %struct.opj_mqc_state** %1391, %struct.opj_mqc_state*** %1392, align 8, !tbaa !441
  %1393 = tail call i32 @mqc_decode(%struct.opj_mqc* %1378) #9
  %1394 = icmp eq i32 %1393, 0
  %1395 = select i1 %1394, i32 %1195, i32 %1192
  %1396 = load i32, i32* %1377, align 4, !tbaa !43
  %1397 = icmp slt i32 %1396, 0
  %1398 = sub nsw i32 0, %1395
  %1399 = select i1 %1397, i32 %1398, i32 %1395
  %1400 = add nsw i32 %1399, %1396
  store i32 %1400, i32* %1377, align 4, !tbaa !43
  %1401 = load i16, i16* %1371, align 2, !tbaa !509
  %1402 = or i16 %1401, 8192
  store i16 %1402, i16* %1371, align 2, !tbaa !509
  %1403 = load i32, i32* %18, align 4, !tbaa !562
  br label %1263

1404:                                             ; preds = %1189
  %1405 = load i32*, i32** %22, align 8, !tbaa !539
  %1406 = load i16*, i16** %20, align 8, !tbaa !540
  %1407 = getelementptr inbounds i16, i16* %1406, i64 1
  %1408 = shl i32 1, %1023
  %1409 = ashr i32 %1408, 1
  %1410 = icmp sgt i32 %144, -1
  %1411 = sub nsw i32 0, %1409
  %1412 = select i1 %1410, i32 %1411, i32 -1
  %1413 = load i32, i32* %18, align 4, !tbaa !562
  %1414 = and i32 %1413, -4
  %1415 = icmp sgt i32 %1414, 0
  %1416 = load i32, i32* %19, align 8, !tbaa !561
  br i1 %1415, label %1417, label %1425

1417:                                             ; preds = %1578, %1404
  %1418 = phi i32 [ %1579, %1578 ], [ %1413, %1404 ]
  %1419 = phi i32 [ %1580, %1578 ], [ %1416, %1404 ]
  %1420 = phi i32 [ %1581, %1578 ], [ %1416, %1404 ]
  %1421 = phi i16* [ %1588, %1578 ], [ %1407, %1404 ]
  %1422 = phi i32* [ %1584, %1578 ], [ %1405, %1404 ]
  %1423 = phi i32 [ %1589, %1578 ], [ 0, %1404 ]
  %1424 = icmp sgt i32 %1420, 0
  br i1 %1424, label %1432, label %1578

1425:                                             ; preds = %1578, %1404
  %1426 = phi i32 [ %1413, %1404 ], [ %1579, %1578 ]
  %1427 = phi i32 [ %1416, %1404 ], [ %1580, %1578 ]
  %1428 = phi i32 [ 0, %1404 ], [ %1589, %1578 ]
  %1429 = phi i32* [ %1405, %1404 ], [ %1584, %1578 ]
  %1430 = phi i16* [ %1407, %1404 ], [ %1588, %1578 ]
  %1431 = icmp sgt i32 %1427, 0
  br i1 %1431, label %1592, label %2104

1432:                                             ; preds = %1571, %1417
  %1433 = phi i32 [ %1572, %1571 ], [ %1419, %1417 ]
  %1434 = phi i32 [ %1572, %1571 ], [ %1420, %1417 ]
  %1435 = phi i64 [ %1573, %1571 ], [ 0, %1417 ]
  %1436 = getelementptr inbounds i32, i32* %1422, i64 %1435
  %1437 = getelementptr inbounds i16, i16* %1421, i64 %1435
  %1438 = load i32, i32* %21, align 8, !tbaa !582
  %1439 = sext i32 %1438 to i64
  %1440 = getelementptr inbounds i16, i16* %1437, i64 %1439
  %1441 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1442 = load i16, i16* %1440, align 2, !tbaa !509
  %1443 = sext i16 %1442 to i32
  %1444 = and i32 %1443, 20480
  %1445 = icmp eq i32 %1444, 4096
  br i1 %1445, label %1446, label %1469

1446:                                             ; preds = %1432
  %1447 = and i32 %1443, 255
  %1448 = icmp eq i32 %1447, 0
  %1449 = select i1 %1448, i64 14, i64 15
  %1450 = and i32 %1443, 8192
  %1451 = icmp eq i32 %1450, 0
  %1452 = select i1 %1451, i64 %1449, i64 16
  %1453 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1441, i64 0, i32 6, i64 %1452
  %1454 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1441, i64 0, i32 7
  store %struct.opj_mqc_state** %1453, %struct.opj_mqc_state*** %1454, align 8, !tbaa !441
  %1455 = tail call i32 @mqc_decode(%struct.opj_mqc* %1441) #9
  %1456 = icmp eq i32 %1455, 0
  %1457 = select i1 %1456, i32 %1412, i32 %1409
  %1458 = load i32, i32* %1436, align 4, !tbaa !43
  %1459 = icmp slt i32 %1458, 0
  %1460 = sub nsw i32 0, %1457
  %1461 = select i1 %1459, i32 %1460, i32 %1457
  %1462 = add nsw i32 %1461, %1458
  store i32 %1462, i32* %1436, align 4, !tbaa !43
  %1463 = load i16, i16* %1440, align 2, !tbaa !509
  %1464 = or i16 %1463, 8192
  store i16 %1464, i16* %1440, align 2, !tbaa !509
  %1465 = load i32, i32* %19, align 8, !tbaa !561
  %1466 = load i32, i32* %21, align 8, !tbaa !582
  %1467 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1468 = sext i32 %1466 to i64
  br label %1469

1469:                                             ; preds = %1446, %1432
  %1470 = phi i64 [ %1439, %1432 ], [ %1468, %1446 ]
  %1471 = phi i32 [ %1433, %1432 ], [ %1465, %1446 ]
  %1472 = phi %struct.opj_mqc* [ %1441, %1432 ], [ %1467, %1446 ]
  %1473 = phi i32 [ %1434, %1432 ], [ %1465, %1446 ]
  %1474 = sext i32 %1473 to i64
  %1475 = getelementptr inbounds i32, i32* %1436, i64 %1474
  %1476 = getelementptr inbounds i16, i16* %1440, i64 %1470
  %1477 = load i16, i16* %1476, align 2, !tbaa !509
  %1478 = sext i16 %1477 to i32
  %1479 = and i32 %1478, 20480
  %1480 = icmp eq i32 %1479, 4096
  br i1 %1480, label %1481, label %1505

1481:                                             ; preds = %1469
  %1482 = and i32 %1478, 255
  %1483 = icmp eq i32 %1482, 0
  %1484 = select i1 %1483, i64 14, i64 15
  %1485 = and i32 %1478, 8192
  %1486 = icmp eq i32 %1485, 0
  %1487 = select i1 %1486, i64 %1484, i64 16
  %1488 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1472, i64 0, i32 6, i64 %1487
  %1489 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1472, i64 0, i32 7
  store %struct.opj_mqc_state** %1488, %struct.opj_mqc_state*** %1489, align 8, !tbaa !441
  %1490 = tail call i32 @mqc_decode(%struct.opj_mqc* %1472) #9
  %1491 = icmp eq i32 %1490, 0
  %1492 = select i1 %1491, i32 %1412, i32 %1409
  %1493 = load i32, i32* %1475, align 4, !tbaa !43
  %1494 = icmp slt i32 %1493, 0
  %1495 = sub nsw i32 0, %1492
  %1496 = select i1 %1494, i32 %1495, i32 %1492
  %1497 = add nsw i32 %1496, %1493
  store i32 %1497, i32* %1475, align 4, !tbaa !43
  %1498 = load i16, i16* %1476, align 2, !tbaa !509
  %1499 = or i16 %1498, 8192
  store i16 %1499, i16* %1476, align 2, !tbaa !509
  %1500 = load i32, i32* %19, align 8, !tbaa !561
  %1501 = load i32, i32* %21, align 8, !tbaa !582
  %1502 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1503 = sext i32 %1501 to i64
  %1504 = sext i32 %1500 to i64
  br label %1505

1505:                                             ; preds = %1481, %1469
  %1506 = phi i64 [ %1474, %1469 ], [ %1504, %1481 ]
  %1507 = phi i64 [ %1470, %1469 ], [ %1503, %1481 ]
  %1508 = phi i32 [ %1471, %1469 ], [ %1500, %1481 ]
  %1509 = phi %struct.opj_mqc* [ %1472, %1469 ], [ %1502, %1481 ]
  %1510 = getelementptr inbounds i32, i32* %1475, i64 %1506
  %1511 = getelementptr inbounds i16, i16* %1476, i64 %1507
  %1512 = load i16, i16* %1511, align 2, !tbaa !509
  %1513 = sext i16 %1512 to i32
  %1514 = and i32 %1513, 20480
  %1515 = icmp eq i32 %1514, 4096
  br i1 %1515, label %1516, label %1540

1516:                                             ; preds = %1505
  %1517 = and i32 %1513, 255
  %1518 = icmp eq i32 %1517, 0
  %1519 = select i1 %1518, i64 14, i64 15
  %1520 = and i32 %1513, 8192
  %1521 = icmp eq i32 %1520, 0
  %1522 = select i1 %1521, i64 %1519, i64 16
  %1523 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1509, i64 0, i32 6, i64 %1522
  %1524 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1509, i64 0, i32 7
  store %struct.opj_mqc_state** %1523, %struct.opj_mqc_state*** %1524, align 8, !tbaa !441
  %1525 = tail call i32 @mqc_decode(%struct.opj_mqc* %1509) #9
  %1526 = icmp eq i32 %1525, 0
  %1527 = select i1 %1526, i32 %1412, i32 %1409
  %1528 = load i32, i32* %1510, align 4, !tbaa !43
  %1529 = icmp slt i32 %1528, 0
  %1530 = sub nsw i32 0, %1527
  %1531 = select i1 %1529, i32 %1530, i32 %1527
  %1532 = add nsw i32 %1531, %1528
  store i32 %1532, i32* %1510, align 4, !tbaa !43
  %1533 = load i16, i16* %1511, align 2, !tbaa !509
  %1534 = or i16 %1533, 8192
  store i16 %1534, i16* %1511, align 2, !tbaa !509
  %1535 = load i32, i32* %19, align 8, !tbaa !561
  %1536 = load i32, i32* %21, align 8, !tbaa !582
  %1537 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1538 = sext i32 %1536 to i64
  %1539 = sext i32 %1535 to i64
  br label %1540

1540:                                             ; preds = %1516, %1505
  %1541 = phi i64 [ %1506, %1505 ], [ %1539, %1516 ]
  %1542 = phi i64 [ %1507, %1505 ], [ %1538, %1516 ]
  %1543 = phi i32 [ %1508, %1505 ], [ %1535, %1516 ]
  %1544 = phi %struct.opj_mqc* [ %1509, %1505 ], [ %1537, %1516 ]
  %1545 = getelementptr inbounds i32, i32* %1510, i64 %1541
  %1546 = getelementptr inbounds i16, i16* %1511, i64 %1542
  %1547 = load i16, i16* %1546, align 2, !tbaa !509
  %1548 = sext i16 %1547 to i32
  %1549 = and i32 %1548, 20480
  %1550 = icmp eq i32 %1549, 4096
  br i1 %1550, label %1551, label %1571

1551:                                             ; preds = %1540
  %1552 = and i32 %1548, 255
  %1553 = icmp eq i32 %1552, 0
  %1554 = select i1 %1553, i64 14, i64 15
  %1555 = and i32 %1548, 8192
  %1556 = icmp eq i32 %1555, 0
  %1557 = select i1 %1556, i64 %1554, i64 16
  %1558 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1544, i64 0, i32 6, i64 %1557
  %1559 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1544, i64 0, i32 7
  store %struct.opj_mqc_state** %1558, %struct.opj_mqc_state*** %1559, align 8, !tbaa !441
  %1560 = tail call i32 @mqc_decode(%struct.opj_mqc* %1544) #9
  %1561 = icmp eq i32 %1560, 0
  %1562 = select i1 %1561, i32 %1412, i32 %1409
  %1563 = load i32, i32* %1545, align 4, !tbaa !43
  %1564 = icmp slt i32 %1563, 0
  %1565 = sub nsw i32 0, %1562
  %1566 = select i1 %1564, i32 %1565, i32 %1562
  %1567 = add nsw i32 %1566, %1563
  store i32 %1567, i32* %1545, align 4, !tbaa !43
  %1568 = load i16, i16* %1546, align 2, !tbaa !509
  %1569 = or i16 %1568, 8192
  store i16 %1569, i16* %1546, align 2, !tbaa !509
  %1570 = load i32, i32* %19, align 8, !tbaa !561
  br label %1571

1571:                                             ; preds = %1551, %1540
  %1572 = phi i32 [ %1543, %1540 ], [ %1570, %1551 ]
  %1573 = add nuw nsw i64 %1435, 1
  %1574 = sext i32 %1572 to i64
  %1575 = icmp slt i64 %1573, %1574
  br i1 %1575, label %1432, label %1576

1576:                                             ; preds = %1571
  %1577 = load i32, i32* %18, align 4, !tbaa !562
  br label %1578

1578:                                             ; preds = %1576, %1417
  %1579 = phi i32 [ %1418, %1417 ], [ %1577, %1576 ]
  %1580 = phi i32 [ %1419, %1417 ], [ %1572, %1576 ]
  %1581 = phi i32 [ %1420, %1417 ], [ %1572, %1576 ]
  %1582 = shl i32 %1581, 2
  %1583 = sext i32 %1582 to i64
  %1584 = getelementptr inbounds i32, i32* %1422, i64 %1583
  %1585 = load i32, i32* %21, align 8, !tbaa !582
  %1586 = shl i32 %1585, 2
  %1587 = sext i32 %1586 to i64
  %1588 = getelementptr inbounds i16, i16* %1421, i64 %1587
  %1589 = add nuw nsw i32 %1423, 4
  %1590 = and i32 %1579, -4
  %1591 = icmp slt i32 %1589, %1590
  br i1 %1591, label %1417, label %1425

1592:                                             ; preds = %1645, %1425
  %1593 = phi i32 [ %1646, %1645 ], [ %1427, %1425 ]
  %1594 = phi i32 [ %1647, %1645 ], [ %1426, %1425 ]
  %1595 = phi i32 [ %1648, %1645 ], [ %1426, %1425 ]
  %1596 = phi i64 [ %1649, %1645 ], [ 0, %1425 ]
  %1597 = icmp slt i32 %1428, %1595
  br i1 %1597, label %1598, label %1645

1598:                                             ; preds = %1592
  %1599 = getelementptr inbounds i16, i16* %1430, i64 %1596
  %1600 = getelementptr inbounds i32, i32* %1429, i64 %1596
  br label %1601

1601:                                             ; preds = %1637, %1598
  %1602 = phi i32 [ %1638, %1637 ], [ %1593, %1598 ]
  %1603 = phi i32 [ %1639, %1637 ], [ %1594, %1598 ]
  %1604 = phi i32 [ %1640, %1637 ], [ %1593, %1598 ]
  %1605 = phi i16* [ %1610, %1637 ], [ %1599, %1598 ]
  %1606 = phi i32* [ %1642, %1637 ], [ %1600, %1598 ]
  %1607 = phi i32 [ %1643, %1637 ], [ %1428, %1598 ]
  %1608 = load i32, i32* %21, align 8, !tbaa !582
  %1609 = sext i32 %1608 to i64
  %1610 = getelementptr inbounds i16, i16* %1605, i64 %1609
  %1611 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1612 = load i16, i16* %1610, align 2, !tbaa !509
  %1613 = sext i16 %1612 to i32
  %1614 = and i32 %1613, 20480
  %1615 = icmp eq i32 %1614, 4096
  br i1 %1615, label %1616, label %1637

1616:                                             ; preds = %1601
  %1617 = and i32 %1613, 255
  %1618 = icmp eq i32 %1617, 0
  %1619 = select i1 %1618, i64 14, i64 15
  %1620 = and i32 %1613, 8192
  %1621 = icmp eq i32 %1620, 0
  %1622 = select i1 %1621, i64 %1619, i64 16
  %1623 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1611, i64 0, i32 6, i64 %1622
  %1624 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1611, i64 0, i32 7
  store %struct.opj_mqc_state** %1623, %struct.opj_mqc_state*** %1624, align 8, !tbaa !441
  %1625 = tail call i32 @mqc_decode(%struct.opj_mqc* %1611) #9
  %1626 = icmp eq i32 %1625, 0
  %1627 = select i1 %1626, i32 %1412, i32 %1409
  %1628 = load i32, i32* %1606, align 4, !tbaa !43
  %1629 = icmp slt i32 %1628, 0
  %1630 = sub nsw i32 0, %1627
  %1631 = select i1 %1629, i32 %1630, i32 %1627
  %1632 = add nsw i32 %1631, %1628
  store i32 %1632, i32* %1606, align 4, !tbaa !43
  %1633 = load i16, i16* %1610, align 2, !tbaa !509
  %1634 = or i16 %1633, 8192
  store i16 %1634, i16* %1610, align 2, !tbaa !509
  %1635 = load i32, i32* %19, align 8, !tbaa !561
  %1636 = load i32, i32* %18, align 4, !tbaa !562
  br label %1637

1637:                                             ; preds = %1616, %1601
  %1638 = phi i32 [ %1602, %1601 ], [ %1635, %1616 ]
  %1639 = phi i32 [ %1603, %1601 ], [ %1636, %1616 ]
  %1640 = phi i32 [ %1604, %1601 ], [ %1635, %1616 ]
  %1641 = sext i32 %1640 to i64
  %1642 = getelementptr inbounds i32, i32* %1606, i64 %1641
  %1643 = add nuw nsw i32 %1607, 1
  %1644 = icmp slt i32 %1643, %1639
  br i1 %1644, label %1601, label %1645

1645:                                             ; preds = %1637, %1592
  %1646 = phi i32 [ %1593, %1592 ], [ %1638, %1637 ]
  %1647 = phi i32 [ %1594, %1592 ], [ %1639, %1637 ]
  %1648 = phi i32 [ %1595, %1592 ], [ %1639, %1637 ]
  %1649 = add nuw nsw i64 %1596, 1
  %1650 = sext i32 %1646 to i64
  %1651 = icmp slt i64 %1649, %1650
  br i1 %1651, label %1592, label %2104

1652:                                             ; preds = %143
  %1653 = add nsw i32 %144, 1
  %1654 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1655 = shl i32 1, %1653
  %1656 = ashr i32 %1655, 1
  %1657 = or i32 %1656, %1655
  br i1 %108, label %1852, label %1658

1658:                                             ; preds = %1652
  %1659 = load i32, i32* %18, align 4, !tbaa !562
  %1660 = icmp sgt i32 %1659, 0
  br i1 %1660, label %1661, label %2096

1661:                                             ; preds = %1658
  %1662 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1654, i64 0, i32 6, i64 17
  %1663 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1654, i64 0, i32 7
  %1664 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1654, i64 0, i32 6, i64 18
  %1665 = sub nsw i32 0, %1657
  %1666 = load i32, i32* %19, align 8, !tbaa !561
  br label %1667

1667:                                             ; preds = %1847, %1661
  %1668 = phi i32 [ %1659, %1661 ], [ %1849, %1847 ]
  %1669 = phi i32 [ %1666, %1661 ], [ %1850, %1847 ]
  %1670 = phi i32 [ 0, %1661 ], [ %1848, %1847 ]
  %1671 = icmp sgt i32 %1669, 0
  br i1 %1671, label %1674, label %1672

1672:                                             ; preds = %1667
  %1673 = add nuw nsw i32 %1670, 4
  br label %1847

1674:                                             ; preds = %1667
  %1675 = or i32 %1670, 3
  %1676 = or i32 %1670, 1
  %1677 = add nuw nsw i32 %1676, 1
  %1678 = add nuw nsw i32 %1676, 3
  %1679 = add nuw nsw i32 %1670, 4
  br label %1680

1680:                                             ; preds = %1842, %1674
  %1681 = phi i32 [ %1668, %1674 ], [ %1846, %1842 ]
  %1682 = phi i32 [ 0, %1674 ], [ %1843, %1842 ]
  %1683 = icmp slt i32 %1675, %1681
  br i1 %1683, label %1686, label %1684

1684:                                             ; preds = %1680
  %1685 = add nuw nsw i32 %1682, 1
  br label %1729

1686:                                             ; preds = %1680
  %1687 = load i16*, i16** %20, align 8, !tbaa !540
  %1688 = load i32, i32* %21, align 8, !tbaa !582
  %1689 = mul nsw i32 %1688, %1676
  %1690 = add nuw nsw i32 %1682, 1
  %1691 = add nsw i32 %1689, %1690
  %1692 = sext i32 %1691 to i64
  %1693 = getelementptr inbounds i16, i16* %1687, i64 %1692
  %1694 = load i16, i16* %1693, align 2, !tbaa !509
  %1695 = and i16 %1694, 20735
  %1696 = icmp eq i16 %1695, 0
  br i1 %1696, label %1697, label %1729

1697:                                             ; preds = %1686
  %1698 = mul nsw i32 %1688, %1677
  %1699 = add nsw i32 %1698, %1690
  %1700 = sext i32 %1699 to i64
  %1701 = getelementptr inbounds i16, i16* %1687, i64 %1700
  %1702 = load i16, i16* %1701, align 2, !tbaa !509
  %1703 = and i16 %1702, 20735
  %1704 = icmp eq i16 %1703, 0
  br i1 %1704, label %1705, label %1729

1705:                                             ; preds = %1697
  %1706 = mul nsw i32 %1688, %1675
  %1707 = add nsw i32 %1706, %1690
  %1708 = sext i32 %1707 to i64
  %1709 = getelementptr inbounds i16, i16* %1687, i64 %1708
  %1710 = load i16, i16* %1709, align 2, !tbaa !509
  %1711 = and i16 %1710, 20735
  %1712 = icmp eq i16 %1711, 0
  br i1 %1712, label %1713, label %1729

1713:                                             ; preds = %1705
  %1714 = mul nsw i32 %1688, %1678
  %1715 = add nsw i32 %1714, %1690
  %1716 = sext i32 %1715 to i64
  %1717 = getelementptr inbounds i16, i16* %1687, i64 %1716
  %1718 = load i16, i16* %1717, align 2, !tbaa !509
  %1719 = and i16 %1718, 20665
  %1720 = icmp eq i16 %1719, 0
  br i1 %1720, label %1721, label %1729

1721:                                             ; preds = %1713
  store %struct.opj_mqc_state** %1662, %struct.opj_mqc_state*** %1663, align 8, !tbaa !441
  %1722 = tail call i32 @mqc_decode(%struct.opj_mqc* %1654) #9
  %1723 = icmp eq i32 %1722, 0
  br i1 %1723, label %1842, label %1724

1724:                                             ; preds = %1721
  store %struct.opj_mqc_state** %1664, %struct.opj_mqc_state*** %1663, align 8, !tbaa !441
  %1725 = tail call i32 @mqc_decode(%struct.opj_mqc* nonnull %1654) #9
  %1726 = shl i32 %1725, 1
  %1727 = tail call i32 @mqc_decode(%struct.opj_mqc* nonnull %1654) #9
  %1728 = or i32 %1726, %1727
  br label %1729

1729:                                             ; preds = %1724, %1713, %1705, %1697, %1686, %1684
  %1730 = phi i32 [ %1685, %1684 ], [ %1690, %1724 ], [ %1690, %1713 ], [ %1690, %1705 ], [ %1690, %1697 ], [ %1690, %1686 ]
  %1731 = phi i1 [ false, %1684 ], [ true, %1724 ], [ false, %1713 ], [ false, %1705 ], [ false, %1697 ], [ false, %1686 ]
  %1732 = phi i32 [ 0, %1684 ], [ %1728, %1724 ], [ 0, %1713 ], [ 0, %1705 ], [ 0, %1697 ], [ 0, %1686 ]
  %1733 = add nsw i32 %1732, %1670
  %1734 = icmp slt i32 %1733, %1679
  br i1 %1734, label %1735, label %1842

1735:                                             ; preds = %1838, %1729
  %1736 = phi i32 [ %1744, %1838 ], [ %1733, %1729 ]
  %1737 = load i32, i32* %18, align 4, !tbaa !562
  %1738 = icmp slt i32 %1736, %1737
  br i1 %1738, label %1739, label %1842

1739:                                             ; preds = %1735
  %1740 = icmp ne i32 %1736, %1675
  %1741 = add nsw i32 %1737, -1
  %1742 = icmp ne i32 %1736, %1741
  %1743 = load i16*, i16** %20, align 8, !tbaa !540
  %1744 = add nsw i32 %1736, 1
  %1745 = load i32, i32* %21, align 8, !tbaa !582
  %1746 = mul nsw i32 %1745, %1744
  %1747 = add i32 %1746, %1730
  %1748 = sext i32 %1747 to i64
  %1749 = getelementptr inbounds i16, i16* %1743, i64 %1748
  %1750 = load i32*, i32** %22, align 8, !tbaa !539
  %1751 = load i32, i32* %19, align 8, !tbaa !561
  %1752 = mul nsw i32 %1751, %1736
  %1753 = add nsw i32 %1752, %1682
  %1754 = sext i32 %1753 to i64
  %1755 = getelementptr inbounds i32, i32* %1750, i64 %1754
  %1756 = icmp eq i32 %1736, %1733
  %1757 = and i1 %1731, %1756
  %1758 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1759 = and i1 %1740, %1742
  %1760 = load i16, i16* %1749, align 2, !tbaa !509
  %1761 = sext i16 %1760 to i32
  %1762 = and i32 %1761, -1095
  %1763 = select i1 %1759, i32 %1761, i32 %1762
  br i1 %1757, label %1778, label %1764

1764:                                             ; preds = %1739
  %1765 = and i32 %1763, 20480
  %1766 = icmp eq i32 %1765, 0
  br i1 %1766, label %1767, label %1838

1767:                                             ; preds = %1764
  %1768 = and i32 %1763, 255
  %1769 = or i32 %1768, %109
  %1770 = sext i32 %1769 to i64
  %1771 = getelementptr inbounds [1024 x i8], [1024 x i8]* @lut_ctxno_zc, i64 0, i64 %1770
  %1772 = load i8, i8* %1771, align 1, !tbaa !15
  %1773 = sext i8 %1772 to i64
  %1774 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1758, i64 0, i32 6, i64 %1773
  %1775 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1758, i64 0, i32 7
  store %struct.opj_mqc_state** %1774, %struct.opj_mqc_state*** %1775, align 8, !tbaa !441
  %1776 = tail call i32 @mqc_decode(%struct.opj_mqc* %1758) #9
  %1777 = icmp eq i32 %1776, 0
  br i1 %1777, label %1838, label %1778

1778:                                             ; preds = %1767, %1739
  %1779 = lshr i32 %1763, 4
  %1780 = and i32 %1779, 255
  %1781 = zext i32 %1780 to i64
  %1782 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1781
  %1783 = load i8, i8* %1782, align 1, !tbaa !15
  %1784 = sext i8 %1783 to i64
  %1785 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1758, i64 0, i32 6, i64 %1784
  %1786 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1758, i64 0, i32 7
  store %struct.opj_mqc_state** %1785, %struct.opj_mqc_state*** %1786, align 8, !tbaa !441
  %1787 = tail call i32 @mqc_decode(%struct.opj_mqc* %1758) #9
  %1788 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1781
  %1789 = load i8, i8* %1788, align 1, !tbaa !15
  %1790 = sext i8 %1789 to i32
  %1791 = xor i32 %1787, %1790
  %1792 = icmp eq i32 %1791, 0
  %1793 = select i1 %1792, i32 %1657, i32 %1665
  store i32 %1793, i32* %1755, align 4, !tbaa !43
  %1794 = load i32, i32* %21, align 8, !tbaa !582
  %1795 = sext i32 %1794 to i64
  %1796 = sub nsw i64 0, %1795
  %1797 = getelementptr inbounds i16, i16* %1749, i64 %1796
  %1798 = getelementptr inbounds i16, i16* %1749, i64 %1795
  %1799 = getelementptr inbounds i16, i16* %1797, i64 -1
  %1800 = load i16, i16* %1799, align 2, !tbaa !509
  %1801 = or i16 %1800, 2
  store i16 %1801, i16* %1799, align 2, !tbaa !509
  %1802 = sext i32 %1791 to i64
  %1803 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %1802
  %1804 = load i16, i16* %1803, align 2, !tbaa !509
  %1805 = load i16, i16* %1797, align 2, !tbaa !509
  %1806 = or i16 %1805, %1804
  store i16 %1806, i16* %1797, align 2, !tbaa !509
  %1807 = getelementptr inbounds i16, i16* %1797, i64 1
  %1808 = load i16, i16* %1807, align 2, !tbaa !509
  %1809 = or i16 %1808, 4
  store i16 %1809, i16* %1807, align 2, !tbaa !509
  %1810 = add nsw i32 %1791, 2
  %1811 = sext i32 %1810 to i64
  %1812 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %1811
  %1813 = load i16, i16* %1812, align 2, !tbaa !509
  %1814 = getelementptr inbounds i16, i16* %1749, i64 -1
  %1815 = load i16, i16* %1814, align 2, !tbaa !509
  %1816 = or i16 %1815, %1813
  store i16 %1816, i16* %1814, align 2, !tbaa !509
  %1817 = load i16, i16* %1749, align 2, !tbaa !509
  %1818 = or i16 %1817, 4096
  store i16 %1818, i16* %1749, align 2, !tbaa !509
  %1819 = add nsw i32 %1791, 4
  %1820 = sext i32 %1819 to i64
  %1821 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %1820
  %1822 = load i16, i16* %1821, align 2, !tbaa !509
  %1823 = getelementptr inbounds i16, i16* %1749, i64 1
  %1824 = load i16, i16* %1823, align 2, !tbaa !509
  %1825 = or i16 %1824, %1822
  store i16 %1825, i16* %1823, align 2, !tbaa !509
  %1826 = getelementptr inbounds i16, i16* %1798, i64 -1
  %1827 = load i16, i16* %1826, align 2, !tbaa !509
  %1828 = or i16 %1827, 1
  store i16 %1828, i16* %1826, align 2, !tbaa !509
  %1829 = add nsw i32 %1791, 6
  %1830 = sext i32 %1829 to i64
  %1831 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %1830
  %1832 = load i16, i16* %1831, align 2, !tbaa !509
  %1833 = load i16, i16* %1798, align 2, !tbaa !509
  %1834 = or i16 %1833, %1832
  store i16 %1834, i16* %1798, align 2, !tbaa !509
  %1835 = getelementptr inbounds i16, i16* %1798, i64 1
  %1836 = load i16, i16* %1835, align 2, !tbaa !509
  %1837 = or i16 %1836, 8
  store i16 %1837, i16* %1835, align 2, !tbaa !509
  br label %1838

1838:                                             ; preds = %1778, %1767, %1764
  %1839 = load i16, i16* %1749, align 2, !tbaa !509
  %1840 = and i16 %1839, -16385
  store i16 %1840, i16* %1749, align 2, !tbaa !509
  %1841 = icmp slt i32 %1744, %1679
  br i1 %1841, label %1735, label %1842

1842:                                             ; preds = %1838, %1735, %1729, %1721
  %1843 = phi i32 [ %1690, %1721 ], [ %1730, %1729 ], [ %1730, %1735 ], [ %1730, %1838 ]
  %1844 = load i32, i32* %19, align 8, !tbaa !561
  %1845 = icmp slt i32 %1843, %1844
  %1846 = load i32, i32* %18, align 4, !tbaa !562
  br i1 %1845, label %1680, label %1847

1847:                                             ; preds = %1842, %1672
  %1848 = phi i32 [ %1673, %1672 ], [ %1679, %1842 ]
  %1849 = phi i32 [ %1668, %1672 ], [ %1846, %1842 ]
  %1850 = phi i32 [ %1669, %1672 ], [ %1844, %1842 ]
  %1851 = icmp slt i32 %1848, %1849
  br i1 %1851, label %1667, label %2096

1852:                                             ; preds = %1652
  %1853 = load i32*, i32** %22, align 8, !tbaa !539
  %1854 = load i16*, i16** %20, align 8, !tbaa !540
  %1855 = getelementptr inbounds i16, i16* %1854, i64 1
  %1856 = load i32, i32* %18, align 4, !tbaa !562
  %1857 = and i32 %1856, -4
  %1858 = icmp sgt i32 %1857, 0
  br i1 %1858, label %1861, label %1859

1859:                                             ; preds = %1852
  %1860 = load i32, i32* %19, align 8, !tbaa !561
  br label %1882

1861:                                             ; preds = %1852
  %1862 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1654, i64 0, i32 6, i64 17
  %1863 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1654, i64 0, i32 7
  %1864 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1654, i64 0, i32 6, i64 18
  %1865 = sub nsw i32 0, %1657
  %1866 = load i32, i32* %19, align 8, !tbaa !561
  br label %1867

1867:                                             ; preds = %2056, %1861
  %1868 = phi i32 [ %1856, %1861 ], [ %2058, %2056 ]
  %1869 = phi i32 [ %1866, %1861 ], [ %2059, %2056 ]
  %1870 = phi i16* [ %1855, %1861 ], [ %2066, %2056 ]
  %1871 = phi i32* [ %1853, %1861 ], [ %2062, %2056 ]
  %1872 = phi i32 [ 0, %1861 ], [ %2057, %2056 ]
  %1873 = icmp sgt i32 %1869, 0
  br i1 %1873, label %1876, label %1874

1874:                                             ; preds = %1867
  %1875 = add nuw nsw i32 %1872, 4
  br label %2056

1876:                                             ; preds = %1867
  %1877 = or i32 %1872, 1
  %1878 = add nuw nsw i32 %1877, 1
  %1879 = or i32 %1872, 3
  %1880 = add nuw nsw i32 %1877, 3
  %1881 = add nuw nsw i32 %1872, 4
  br label %1889

1882:                                             ; preds = %2056, %1859
  %1883 = phi i32 [ %1856, %1859 ], [ %2058, %2056 ]
  %1884 = phi i32 [ %1860, %1859 ], [ %2059, %2056 ]
  %1885 = phi i32 [ 0, %1859 ], [ %2057, %2056 ]
  %1886 = phi i32* [ %1853, %1859 ], [ %2062, %2056 ]
  %1887 = phi i16* [ %1855, %1859 ], [ %2066, %2056 ]
  %1888 = icmp sgt i32 %1884, 0
  br i1 %1888, label %2069, label %2096

1889:                                             ; preds = %2050, %1876
  %1890 = phi i64 [ 0, %1876 ], [ %1896, %2050 ]
  %1891 = getelementptr inbounds i32, i32* %1871, i64 %1890
  %1892 = getelementptr inbounds i16, i16* %1870, i64 %1890
  %1893 = load i16*, i16** %20, align 8, !tbaa !540
  %1894 = load i32, i32* %21, align 8, !tbaa !582
  %1895 = mul nsw i32 %1894, %1877
  %1896 = add nuw nsw i64 %1890, 1
  %1897 = trunc i64 %1896 to i32
  %1898 = add nsw i32 %1895, %1897
  %1899 = sext i32 %1898 to i64
  %1900 = getelementptr inbounds i16, i16* %1893, i64 %1899
  %1901 = load i16, i16* %1900, align 2, !tbaa !509
  %1902 = and i16 %1901, 20735
  %1903 = icmp eq i16 %1902, 0
  br i1 %1903, label %1904, label %2029

1904:                                             ; preds = %1889
  %1905 = mul nsw i32 %1894, %1878
  %1906 = add nsw i32 %1905, %1897
  %1907 = sext i32 %1906 to i64
  %1908 = getelementptr inbounds i16, i16* %1893, i64 %1907
  %1909 = load i16, i16* %1908, align 2, !tbaa !509
  %1910 = and i16 %1909, 20735
  %1911 = icmp eq i16 %1910, 0
  br i1 %1911, label %1912, label %2029

1912:                                             ; preds = %1904
  %1913 = mul nsw i32 %1894, %1879
  %1914 = add nsw i32 %1913, %1897
  %1915 = sext i32 %1914 to i64
  %1916 = getelementptr inbounds i16, i16* %1893, i64 %1915
  %1917 = load i16, i16* %1916, align 2, !tbaa !509
  %1918 = and i16 %1917, 20735
  %1919 = icmp eq i16 %1918, 0
  br i1 %1919, label %1920, label %2029

1920:                                             ; preds = %1912
  %1921 = mul nsw i32 %1894, %1880
  %1922 = add nsw i32 %1921, %1897
  %1923 = sext i32 %1922 to i64
  %1924 = getelementptr inbounds i16, i16* %1893, i64 %1923
  %1925 = load i16, i16* %1924, align 2, !tbaa !509
  %1926 = and i16 %1925, 20735
  %1927 = icmp eq i16 %1926, 0
  br i1 %1927, label %1928, label %2029

1928:                                             ; preds = %1920
  store %struct.opj_mqc_state** %1862, %struct.opj_mqc_state*** %1863, align 8, !tbaa !441
  %1929 = tail call i32 @mqc_decode(%struct.opj_mqc* %1654) #9
  %1930 = icmp eq i32 %1929, 0
  br i1 %1930, label %2050, label %1931

1931:                                             ; preds = %1928
  store %struct.opj_mqc_state** %1864, %struct.opj_mqc_state*** %1863, align 8, !tbaa !441
  %1932 = tail call i32 @mqc_decode(%struct.opj_mqc* nonnull %1654) #9
  %1933 = shl i32 %1932, 1
  %1934 = tail call i32 @mqc_decode(%struct.opj_mqc* nonnull %1654) #9
  %1935 = or i32 %1933, %1934
  %1936 = add nsw i32 %1935, %1872
  %1937 = icmp slt i32 %1936, %1881
  br i1 %1937, label %1938, label %2050

1938:                                             ; preds = %1931
  %1939 = load i32, i32* %19, align 8, !tbaa !561
  %1940 = mul nsw i32 %1939, %1935
  %1941 = sext i32 %1940 to i64
  %1942 = getelementptr inbounds i32, i32* %1891, i64 %1941
  %1943 = load i32, i32* %21, align 8, !tbaa !582
  %1944 = mul nsw i32 %1943, %1935
  %1945 = sext i32 %1944 to i64
  %1946 = getelementptr inbounds i16, i16* %1892, i64 %1945
  br label %1947

1947:                                             ; preds = %2023, %1938
  %1948 = phi i16* [ %1956, %2023 ], [ %1946, %1938 ]
  %1949 = phi i32* [ %2026, %2023 ], [ %1942, %1938 ]
  %1950 = phi i32 [ %2027, %2023 ], [ %1936, %1938 ]
  %1951 = load i32, i32* %18, align 4, !tbaa !562
  %1952 = icmp slt i32 %1950, %1951
  br i1 %1952, label %1953, label %2050

1953:                                             ; preds = %1947
  %1954 = load i32, i32* %21, align 8, !tbaa !582
  %1955 = sext i32 %1954 to i64
  %1956 = getelementptr inbounds i16, i16* %1948, i64 %1955
  %1957 = icmp eq i32 %1950, %1936
  br i1 %1957, label %1959, label %1958

1958:                                             ; preds = %1953
  tail call fastcc void @t1_dec_clnpass_step(%struct.opj_t1* nonnull %0, i16* %1956, i32* %1949, i32 %77, i32 %1657) #9
  br label %2023

1959:                                             ; preds = %1953
  %1960 = load %struct.opj_mqc*, %struct.opj_mqc** %17, align 8, !tbaa !535
  %1961 = load i16, i16* %1956, align 2, !tbaa !509
  %1962 = lshr i16 %1961, 4
  %1963 = and i16 %1962, 255
  %1964 = zext i16 %1963 to i64
  %1965 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1964
  %1966 = load i8, i8* %1965, align 1, !tbaa !15
  %1967 = sext i8 %1966 to i64
  %1968 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1960, i64 0, i32 6, i64 %1967
  %1969 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1960, i64 0, i32 7
  store %struct.opj_mqc_state** %1968, %struct.opj_mqc_state*** %1969, align 8, !tbaa !441
  %1970 = tail call i32 @mqc_decode(%struct.opj_mqc* %1960) #9
  %1971 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1964
  %1972 = load i8, i8* %1971, align 1, !tbaa !15
  %1973 = sext i8 %1972 to i32
  %1974 = xor i32 %1970, %1973
  %1975 = icmp eq i32 %1974, 0
  %1976 = select i1 %1975, i32 %1657, i32 %1865
  store i32 %1976, i32* %1949, align 4, !tbaa !43
  %1977 = load i32, i32* %21, align 8, !tbaa !582
  %1978 = sext i32 %1977 to i64
  %1979 = sub nsw i64 0, %1978
  %1980 = getelementptr inbounds i16, i16* %1956, i64 %1979
  %1981 = getelementptr inbounds i16, i16* %1956, i64 %1978
  %1982 = getelementptr inbounds i16, i16* %1980, i64 -1
  %1983 = load i16, i16* %1982, align 2, !tbaa !509
  %1984 = or i16 %1983, 2
  store i16 %1984, i16* %1982, align 2, !tbaa !509
  %1985 = sext i32 %1974 to i64
  %1986 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %1985
  %1987 = load i16, i16* %1986, align 2, !tbaa !509
  %1988 = load i16, i16* %1980, align 2, !tbaa !509
  %1989 = or i16 %1988, %1987
  store i16 %1989, i16* %1980, align 2, !tbaa !509
  %1990 = getelementptr inbounds i16, i16* %1980, i64 1
  %1991 = load i16, i16* %1990, align 2, !tbaa !509
  %1992 = or i16 %1991, 4
  store i16 %1992, i16* %1990, align 2, !tbaa !509
  %1993 = add nsw i32 %1974, 2
  %1994 = sext i32 %1993 to i64
  %1995 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %1994
  %1996 = load i16, i16* %1995, align 2, !tbaa !509
  %1997 = getelementptr inbounds i16, i16* %1956, i64 -1
  %1998 = load i16, i16* %1997, align 2, !tbaa !509
  %1999 = or i16 %1998, %1996
  store i16 %1999, i16* %1997, align 2, !tbaa !509
  %2000 = load i16, i16* %1956, align 2, !tbaa !509
  %2001 = or i16 %2000, 4096
  store i16 %2001, i16* %1956, align 2, !tbaa !509
  %2002 = add nsw i32 %1974, 4
  %2003 = sext i32 %2002 to i64
  %2004 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %2003
  %2005 = load i16, i16* %2004, align 2, !tbaa !509
  %2006 = getelementptr inbounds i16, i16* %1956, i64 1
  %2007 = load i16, i16* %2006, align 2, !tbaa !509
  %2008 = or i16 %2007, %2005
  store i16 %2008, i16* %2006, align 2, !tbaa !509
  %2009 = getelementptr inbounds i16, i16* %1981, i64 -1
  %2010 = load i16, i16* %2009, align 2, !tbaa !509
  %2011 = or i16 %2010, 1
  store i16 %2011, i16* %2009, align 2, !tbaa !509
  %2012 = add nsw i32 %1974, 6
  %2013 = sext i32 %2012 to i64
  %2014 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %2013
  %2015 = load i16, i16* %2014, align 2, !tbaa !509
  %2016 = load i16, i16* %1981, align 2, !tbaa !509
  %2017 = or i16 %2016, %2015
  store i16 %2017, i16* %1981, align 2, !tbaa !509
  %2018 = getelementptr inbounds i16, i16* %1981, i64 1
  %2019 = load i16, i16* %2018, align 2, !tbaa !509
  %2020 = or i16 %2019, 8
  store i16 %2020, i16* %2018, align 2, !tbaa !509
  %2021 = load i16, i16* %1956, align 2, !tbaa !509
  %2022 = and i16 %2021, -16385
  store i16 %2022, i16* %1956, align 2, !tbaa !509
  br label %2023

2023:                                             ; preds = %1959, %1958
  %2024 = load i32, i32* %19, align 8, !tbaa !561
  %2025 = sext i32 %2024 to i64
  %2026 = getelementptr inbounds i32, i32* %1949, i64 %2025
  %2027 = add nsw i32 %1950, 1
  %2028 = icmp slt i32 %2027, %1881
  br i1 %2028, label %1947, label %2050

2029:                                             ; preds = %1920, %1912, %1904, %1889
  %2030 = sext i32 %1894 to i64
  %2031 = getelementptr inbounds i16, i16* %1892, i64 %2030
  tail call fastcc void @t1_dec_clnpass_step(%struct.opj_t1* nonnull %0, i16* %2031, i32* %1891, i32 %77, i32 %1657) #9
  %2032 = load i32, i32* %19, align 8, !tbaa !561
  %2033 = sext i32 %2032 to i64
  %2034 = getelementptr inbounds i32, i32* %1891, i64 %2033
  %2035 = load i32, i32* %21, align 8, !tbaa !582
  %2036 = sext i32 %2035 to i64
  %2037 = getelementptr inbounds i16, i16* %2031, i64 %2036
  tail call fastcc void @t1_dec_clnpass_step(%struct.opj_t1* nonnull %0, i16* %2037, i32* %2034, i32 %77, i32 %1657) #9
  %2038 = load i32, i32* %19, align 8, !tbaa !561
  %2039 = sext i32 %2038 to i64
  %2040 = getelementptr inbounds i32, i32* %2034, i64 %2039
  %2041 = load i32, i32* %21, align 8, !tbaa !582
  %2042 = sext i32 %2041 to i64
  %2043 = getelementptr inbounds i16, i16* %2037, i64 %2042
  tail call fastcc void @t1_dec_clnpass_step(%struct.opj_t1* nonnull %0, i16* %2043, i32* %2040, i32 %77, i32 %1657) #9
  %2044 = load i32, i32* %19, align 8, !tbaa !561
  %2045 = sext i32 %2044 to i64
  %2046 = getelementptr inbounds i32, i32* %2040, i64 %2045
  %2047 = load i32, i32* %21, align 8, !tbaa !582
  %2048 = sext i32 %2047 to i64
  %2049 = getelementptr inbounds i16, i16* %2043, i64 %2048
  tail call fastcc void @t1_dec_clnpass_step(%struct.opj_t1* nonnull %0, i16* %2049, i32* %2046, i32 %77, i32 %1657) #9
  br label %2050

2050:                                             ; preds = %2029, %2023, %1947, %1931, %1928
  %2051 = load i32, i32* %19, align 8, !tbaa !561
  %2052 = sext i32 %2051 to i64
  %2053 = icmp slt i64 %1896, %2052
  br i1 %2053, label %1889, label %2054

2054:                                             ; preds = %2050
  %2055 = load i32, i32* %18, align 4, !tbaa !562
  br label %2056

2056:                                             ; preds = %2054, %1874
  %2057 = phi i32 [ %1875, %1874 ], [ %1881, %2054 ]
  %2058 = phi i32 [ %1868, %1874 ], [ %2055, %2054 ]
  %2059 = phi i32 [ %1869, %1874 ], [ %2051, %2054 ]
  %2060 = shl i32 %2059, 2
  %2061 = sext i32 %2060 to i64
  %2062 = getelementptr inbounds i32, i32* %1871, i64 %2061
  %2063 = load i32, i32* %21, align 8, !tbaa !582
  %2064 = shl i32 %2063, 2
  %2065 = sext i32 %2064 to i64
  %2066 = getelementptr inbounds i16, i16* %1870, i64 %2065
  %2067 = and i32 %2058, -4
  %2068 = icmp slt i32 %2057, %2067
  br i1 %2068, label %1867, label %1882

2069:                                             ; preds = %2090, %1882
  %2070 = phi i32 [ %2091, %2090 ], [ %1884, %1882 ]
  %2071 = phi i32 [ %2092, %2090 ], [ %1883, %1882 ]
  %2072 = phi i64 [ %2094, %2090 ], [ 0, %1882 ]
  %2073 = icmp slt i32 %1885, %2071
  br i1 %2073, label %2074, label %2090

2074:                                             ; preds = %2069
  %2075 = getelementptr inbounds i16, i16* %1887, i64 %2072
  %2076 = getelementptr inbounds i32, i32* %1886, i64 %2072
  br label %2077

2077:                                             ; preds = %2077, %2074
  %2078 = phi i16* [ %2083, %2077 ], [ %2075, %2074 ]
  %2079 = phi i32* [ %2086, %2077 ], [ %2076, %2074 ]
  %2080 = phi i32 [ %2087, %2077 ], [ %1885, %2074 ]
  %2081 = load i32, i32* %21, align 8, !tbaa !582
  %2082 = sext i32 %2081 to i64
  %2083 = getelementptr inbounds i16, i16* %2078, i64 %2082
  tail call fastcc void @t1_dec_clnpass_step(%struct.opj_t1* nonnull %0, i16* %2083, i32* %2079, i32 %77, i32 %1657) #9
  %2084 = load i32, i32* %19, align 8, !tbaa !561
  %2085 = sext i32 %2084 to i64
  %2086 = getelementptr inbounds i32, i32* %2079, i64 %2085
  %2087 = add nuw nsw i32 %2080, 1
  %2088 = load i32, i32* %18, align 4, !tbaa !562
  %2089 = icmp slt i32 %2087, %2088
  br i1 %2089, label %2077, label %2090

2090:                                             ; preds = %2077, %2069
  %2091 = phi i32 [ %2070, %2069 ], [ %2084, %2077 ]
  %2092 = phi i32 [ %2071, %2069 ], [ %2088, %2077 ]
  %2093 = sext i32 %2091 to i64
  %2094 = add nuw nsw i64 %2072, 1
  %2095 = icmp slt i64 %2094, %2093
  br i1 %2095, label %2069, label %2096

2096:                                             ; preds = %2090, %1882, %1847, %1658
  br i1 %110, label %2104, label %2097

2097:                                             ; preds = %2096
  %2098 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1654, i64 0, i32 6, i64 18
  %2099 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %1654, i64 0, i32 7
  store %struct.opj_mqc_state** %2098, %struct.opj_mqc_state*** %2099, align 8, !tbaa !441
  %2100 = tail call i32 @mqc_decode(%struct.opj_mqc* %1654) #9
  %2101 = tail call i32 @mqc_decode(%struct.opj_mqc* %1654) #9
  %2102 = tail call i32 @mqc_decode(%struct.opj_mqc* %1654) #9
  %2103 = tail call i32 @mqc_decode(%struct.opj_mqc* %1654) #9
  br label %2104

2104:                                             ; preds = %2097, %2096, %1645, %1425, %1267, %1190, %1088, %1015, %507, %480, %349, %344, %143
  br i1 %142, label %2106, label %2105

2105:                                             ; preds = %2104
  tail call void @mqc_resetstates(%struct.opj_mqc* %81) #9
  tail call void @mqc_setstate(%struct.opj_mqc* %81, i32 18, i32 0, i32 46) #9
  tail call void @mqc_setstate(%struct.opj_mqc* %81, i32 17, i32 0, i32 3) #9
  tail call void @mqc_setstate(%struct.opj_mqc* %81, i32 0, i32 0, i32 4) #9
  br label %2106

2106:                                             ; preds = %2105, %2104, %1024, %149
  %2107 = add nsw i32 %146, 1
  %2108 = icmp eq i32 %2107, 3
  %2109 = select i1 %2108, i32 0, i32 %2107
  %2110 = zext i1 %2108 to i32
  %2111 = sub i32 %144, %2110
  %2112 = add nuw nsw i32 %145, 1
  %2113 = load i32, i32* %138, align 4, !tbaa !601
  %2114 = icmp slt i32 %2112, %2113
  br i1 %2114, label %143, label %2115

2115:                                             ; preds = %2106, %137, %113
  %2116 = phi i32 [ %116, %113 ], [ %116, %137 ], [ %2109, %2106 ]
  %2117 = phi i32 [ %115, %113 ], [ %115, %137 ], [ %2111, %2106 ]
  %2118 = add nuw nsw i64 %114, 1
  %2119 = load i32, i32* %97, align 8, !tbaa !595
  %2120 = sext i32 %2119 to i64
  %2121 = icmp slt i64 %2118, %2120
  br i1 %2121, label %113, label %2122

2122:                                             ; preds = %2115, %94, %74
  %2123 = load i32, i32* %84, align 8, !tbaa !591
  %2124 = load i32, i32* %58, align 8, !tbaa !555
  %2125 = sub nsw i32 %2123, %2124
  %2126 = load i32, i32* %89, align 4, !tbaa !593
  %2127 = load i32, i32* %59, align 4, !tbaa !557
  %2128 = sub nsw i32 %2126, %2127
  %2129 = load i32, i32* %57, align 8, !tbaa !558
  %2130 = and i32 %2129, 1
  %2131 = icmp eq i32 %2130, 0
  br i1 %2131, label %2140, label %2132

2132:                                             ; preds = %2122
  %2133 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %13, align 8, !tbaa !37
  %2134 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %2133, i64 %42, i32 2
  %2135 = load i32, i32* %2134, align 8, !tbaa !38
  %2136 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %2133, i64 %42, i32 0
  %2137 = load i32, i32* %2136, align 8, !tbaa !40
  %2138 = add i32 %2135, %2125
  %2139 = sub i32 %2138, %2137
  br label %2140

2140:                                             ; preds = %2132, %2122
  %2141 = phi i32 [ %2139, %2132 ], [ %2125, %2122 ]
  %2142 = and i32 %2129, 2
  %2143 = icmp eq i32 %2142, 0
  br i1 %2143, label %2152, label %2144

2144:                                             ; preds = %2140
  %2145 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %13, align 8, !tbaa !37
  %2146 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %2145, i64 %42, i32 3
  %2147 = load i32, i32* %2146, align 4, !tbaa !41
  %2148 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %2145, i64 %42, i32 1
  %2149 = load i32, i32* %2148, align 4, !tbaa !42
  %2150 = add i32 %2147, %2128
  %2151 = sub i32 %2150, %2149
  br label %2152

2152:                                             ; preds = %2144, %2140
  %2153 = phi i32 [ %2151, %2144 ], [ %2128, %2140 ]
  %2154 = load i32*, i32** %22, align 8, !tbaa !539
  %2155 = load i32, i32* %19, align 8, !tbaa !561
  %2156 = load i32, i32* %18, align 4, !tbaa !562
  %2157 = load i32, i32* %14, align 4, !tbaa !225
  %2158 = icmp eq i32 %2157, 0
  br i1 %2158, label %2191, label %2159

2159:                                             ; preds = %2152
  %2160 = shl i32 1, %2157
  %2161 = icmp sgt i32 %2156, 0
  %2162 = icmp sgt i32 %2155, 0
  %2163 = and i1 %2161, %2162
  br i1 %2163, label %2164, label %2191

2164:                                             ; preds = %2159
  %2165 = sext i32 %2155 to i64
  %2166 = zext i32 %2155 to i64
  %2167 = zext i32 %2156 to i64
  br label %2168

2168:                                             ; preds = %2188, %2164
  %2169 = phi i64 [ 0, %2164 ], [ %2189, %2188 ]
  %2170 = mul nsw i64 %2169, %2165
  br label %2171

2171:                                             ; preds = %2185, %2168
  %2172 = phi i64 [ 0, %2168 ], [ %2186, %2185 ]
  %2173 = add nsw i64 %2172, %2170
  %2174 = getelementptr inbounds i32, i32* %2154, i64 %2173
  %2175 = load i32, i32* %2174, align 4, !tbaa !43
  %2176 = icmp slt i32 %2175, 0
  %2177 = sub nsw i32 0, %2175
  %2178 = select i1 %2176, i32 %2177, i32 %2175
  %2179 = icmp slt i32 %2178, %2160
  br i1 %2179, label %2185, label %2180

2180:                                             ; preds = %2171
  %2181 = load i32, i32* %14, align 4, !tbaa !225
  %2182 = lshr i32 %2178, %2181
  %2183 = sub nsw i32 0, %2182
  %2184 = select i1 %2176, i32 %2183, i32 %2182
  store i32 %2184, i32* %2174, align 4, !tbaa !43
  br label %2185

2185:                                             ; preds = %2180, %2171
  %2186 = add nuw nsw i64 %2172, 1
  %2187 = icmp eq i64 %2186, %2166
  br i1 %2187, label %2188, label %2171

2188:                                             ; preds = %2185
  %2189 = add nuw nsw i64 %2169, 1
  %2190 = icmp eq i64 %2189, %2167
  br i1 %2190, label %2191, label %2168

2191:                                             ; preds = %2188, %2159, %2152
  %2192 = load i32, i32* %23, align 4, !tbaa !97
  %2193 = icmp eq i32 %2192, 1
  %2194 = load i32*, i32** %24, align 8, !tbaa !36
  %2195 = mul nsw i32 %2153, %8
  %2196 = add nsw i32 %2195, %2141
  %2197 = sext i32 %2196 to i64
  %2198 = getelementptr inbounds i32, i32* %2194, i64 %2197
  %2199 = icmp sgt i32 %2156, 0
  %2200 = icmp sgt i32 %2155, 0
  %2201 = and i1 %2199, %2200
  br i1 %2193, label %2202, label %2287

2202:                                             ; preds = %2191
  br i1 %2201, label %2203, label %2408

2203:                                             ; preds = %2202
  %2204 = sext i32 %2155 to i64
  %2205 = zext i32 %2155 to i64
  %2206 = zext i32 %2156 to i64
  %2207 = add nsw i64 %2197, %2205
  %2208 = icmp ult i32 %2155, 8
  %2209 = and i64 %2205, 4294967288
  %2210 = icmp eq i64 %2209, %2205
  %2211 = and i64 %2205, 1
  %2212 = icmp eq i64 %2211, 0
  %2213 = sub nsw i64 0, %2205
  br label %2214

2214:                                             ; preds = %2283, %2203
  %2215 = phi i64 [ 0, %2203 ], [ %2284, %2283 ]
  %2216 = phi i32 [ 0, %2203 ], [ %2285, %2283 ]
  %2217 = mul i64 %2215, %27
  %2218 = mul i64 %2215, %2204
  %2219 = mul nsw i64 %2215, %2204
  %2220 = mul nsw i32 %2216, %8
  %2221 = sext i32 %2220 to i64
  br i1 %2208, label %2252, label %2222

2222:                                             ; preds = %2214
  %2223 = add i64 %2218, %2205
  %2224 = getelementptr i32, i32* %2154, i64 %2223
  %2225 = getelementptr i32, i32* %2154, i64 %2218
  %2226 = add i64 %2207, %2217
  %2227 = getelementptr i32, i32* %2194, i64 %2226
  %2228 = add i64 %2217, %2197
  %2229 = getelementptr i32, i32* %2194, i64 %2228
  %2230 = icmp ult i32* %2229, %2224
  %2231 = icmp ult i32* %2225, %2227
  %2232 = and i1 %2230, %2231
  br i1 %2232, label %2252, label %2233

2233:                                             ; preds = %2233, %2222
  %2234 = phi i64 [ %2249, %2233 ], [ 0, %2222 ]
  %2235 = add nsw i64 %2234, %2219
  %2236 = getelementptr inbounds i32, i32* %2154, i64 %2235
  %2237 = bitcast i32* %2236 to <4 x i32>*
  %2238 = load <4 x i32>, <4 x i32>* %2237, align 4, !tbaa !43, !alias.scope !602
  %2239 = getelementptr inbounds i32, i32* %2236, i64 4
  %2240 = bitcast i32* %2239 to <4 x i32>*
  %2241 = load <4 x i32>, <4 x i32>* %2240, align 4, !tbaa !43, !alias.scope !602
  %2242 = sdiv <4 x i32> %2238, <i32 2, i32 2, i32 2, i32 2>
  %2243 = sdiv <4 x i32> %2241, <i32 2, i32 2, i32 2, i32 2>
  %2244 = add nsw i64 %2234, %2221
  %2245 = getelementptr inbounds i32, i32* %2198, i64 %2244
  %2246 = bitcast i32* %2245 to <4 x i32>*
  store <4 x i32> %2242, <4 x i32>* %2246, align 4, !tbaa !43, !alias.scope !605, !noalias !602
  %2247 = getelementptr inbounds i32, i32* %2245, i64 4
  %2248 = bitcast i32* %2247 to <4 x i32>*
  store <4 x i32> %2243, <4 x i32>* %2248, align 4, !tbaa !43, !alias.scope !605, !noalias !602
  %2249 = add i64 %2234, 8
  %2250 = icmp eq i64 %2249, %2209
  br i1 %2250, label %2251, label %2233, !llvm.loop !607

2251:                                             ; preds = %2233
  br i1 %2210, label %2283, label %2252

2252:                                             ; preds = %2251, %2222, %2214
  %2253 = phi i64 [ 0, %2222 ], [ 0, %2214 ], [ %2209, %2251 ]
  %2254 = xor i64 %2253, -1
  br i1 %2212, label %2263, label %2255

2255:                                             ; preds = %2252
  %2256 = add nsw i64 %2253, %2219
  %2257 = getelementptr inbounds i32, i32* %2154, i64 %2256
  %2258 = load i32, i32* %2257, align 4, !tbaa !43
  %2259 = sdiv i32 %2258, 2
  %2260 = add nsw i64 %2253, %2221
  %2261 = getelementptr inbounds i32, i32* %2198, i64 %2260
  store i32 %2259, i32* %2261, align 4, !tbaa !43
  %2262 = or i64 %2253, 1
  br label %2263

2263:                                             ; preds = %2255, %2252
  %2264 = phi i64 [ %2262, %2255 ], [ %2253, %2252 ]
  %2265 = icmp eq i64 %2254, %2213
  br i1 %2265, label %2283, label %2266

2266:                                             ; preds = %2266, %2263
  %2267 = phi i64 [ %2281, %2266 ], [ %2264, %2263 ]
  %2268 = add nsw i64 %2267, %2219
  %2269 = getelementptr inbounds i32, i32* %2154, i64 %2268
  %2270 = load i32, i32* %2269, align 4, !tbaa !43
  %2271 = sdiv i32 %2270, 2
  %2272 = add nsw i64 %2267, %2221
  %2273 = getelementptr inbounds i32, i32* %2198, i64 %2272
  store i32 %2271, i32* %2273, align 4, !tbaa !43
  %2274 = add nuw nsw i64 %2267, 1
  %2275 = add nsw i64 %2274, %2219
  %2276 = getelementptr inbounds i32, i32* %2154, i64 %2275
  %2277 = load i32, i32* %2276, align 4, !tbaa !43
  %2278 = sdiv i32 %2277, 2
  %2279 = add nsw i64 %2274, %2221
  %2280 = getelementptr inbounds i32, i32* %2198, i64 %2279
  store i32 %2278, i32* %2280, align 4, !tbaa !43
  %2281 = add nsw i64 %2267, 2
  %2282 = icmp eq i64 %2281, %2205
  br i1 %2282, label %2283, label %2266, !llvm.loop !608

2283:                                             ; preds = %2266, %2263, %2251
  %2284 = add nuw nsw i64 %2215, 1
  %2285 = add nuw nsw i32 %2216, 1
  %2286 = icmp eq i64 %2284, %2206
  br i1 %2286, label %2408, label %2214

2287:                                             ; preds = %2191
  br i1 %2201, label %2288, label %2408

2288:                                             ; preds = %2287
  %2289 = bitcast i32* %2198 to float*
  %2290 = add i32 %2155, -1
  %2291 = zext i32 %2290 to i64
  %2292 = add nuw nsw i64 %2291, 1
  %2293 = getelementptr i32, i32* %2194, i64 %2197
  %2294 = bitcast i32* %2293 to i8*
  %2295 = add nsw i64 %2197, 1
  %2296 = zext i32 %2290 to i64
  %2297 = add nsw i64 %2295, %2296
  %2298 = getelementptr i32, i32* %2194, i64 %2297
  %2299 = bitcast i32* %2298 to i8*
  %2300 = icmp ult i64 %2292, 8
  %2301 = and i64 %2292, 8589934584
  %2302 = trunc i64 %2301 to i32
  %2303 = icmp eq i64 %2292, %2301
  br label %2304

2304:                                             ; preds = %2402, %2288
  %2305 = phi i64 [ %2407, %2402 ], [ 0, %2288 ]
  %2306 = phi float* [ %2404, %2402 ], [ %2289, %2288 ]
  %2307 = phi i32* [ %2403, %2402 ], [ %2154, %2288 ]
  %2308 = phi i32 [ %2405, %2402 ], [ 0, %2288 ]
  %2309 = mul i64 %31, %2305
  br i1 %2300, label %2343, label %2310

2310:                                             ; preds = %2304
  %2311 = getelementptr i8, i8* %2299, i64 %2309
  %2312 = getelementptr i8, i8* %2294, i64 %2309
  %2313 = icmp ult i8* %2312, %52
  %2314 = icmp ugt i8* %2311, %61
  %2315 = and i1 %2313, %2314
  br i1 %2315, label %2343, label %2316

2316:                                             ; preds = %2310
  %2317 = getelementptr float, float* %2306, i64 %2301
  %2318 = getelementptr i32, i32* %2307, i64 %2301
  %2319 = load float, float* %60, align 4, !tbaa !547, !alias.scope !609
  %2320 = insertelement <4 x float> undef, float %2319, i32 0
  %2321 = shufflevector <4 x float> %2320, <4 x float> undef, <4 x i32> zeroinitializer
  %2322 = insertelement <4 x float> undef, float %2319, i32 0
  %2323 = shufflevector <4 x float> %2322, <4 x float> undef, <4 x i32> zeroinitializer
  br label %2324

2324:                                             ; preds = %2324, %2316
  %2325 = phi i64 [ 0, %2316 ], [ %2340, %2324 ]
  %2326 = getelementptr float, float* %2306, i64 %2325
  %2327 = getelementptr i32, i32* %2307, i64 %2325
  %2328 = bitcast i32* %2327 to <4 x i32>*
  %2329 = load <4 x i32>, <4 x i32>* %2328, align 4, !tbaa !43, !alias.scope !612
  %2330 = getelementptr i32, i32* %2327, i64 4
  %2331 = bitcast i32* %2330 to <4 x i32>*
  %2332 = load <4 x i32>, <4 x i32>* %2331, align 4, !tbaa !43, !alias.scope !612
  %2333 = sitofp <4 x i32> %2329 to <4 x float>
  %2334 = sitofp <4 x i32> %2332 to <4 x float>
  %2335 = fmul <4 x float> %2321, %2333
  %2336 = fmul <4 x float> %2323, %2334
  %2337 = bitcast float* %2326 to <4 x float>*
  store <4 x float> %2335, <4 x float>* %2337, align 4, !tbaa !112, !alias.scope !614, !noalias !609
  %2338 = getelementptr float, float* %2326, i64 4
  %2339 = bitcast float* %2338 to <4 x float>*
  store <4 x float> %2336, <4 x float>* %2339, align 4, !tbaa !112, !alias.scope !614, !noalias !609
  %2340 = add i64 %2325, 8
  %2341 = icmp eq i64 %2340, %2301
  br i1 %2341, label %2342, label %2324, !llvm.loop !616

2342:                                             ; preds = %2324
  br i1 %2303, label %2402, label %2343

2343:                                             ; preds = %2342, %2310, %2304
  %2344 = phi float* [ %2306, %2310 ], [ %2306, %2304 ], [ %2317, %2342 ]
  %2345 = phi i32* [ %2307, %2310 ], [ %2307, %2304 ], [ %2318, %2342 ]
  %2346 = phi i32 [ 0, %2310 ], [ 0, %2304 ], [ %2302, %2342 ]
  %2347 = sub i32 %2155, %2346
  %2348 = xor i32 %2346, -1
  %2349 = add i32 %2155, %2348
  %2350 = and i32 %2347, 3
  %2351 = icmp eq i32 %2350, 0
  br i1 %2351, label %2366, label %2352

2352:                                             ; preds = %2352, %2343
  %2353 = phi float* [ %2362, %2352 ], [ %2344, %2343 ]
  %2354 = phi i32* [ %2361, %2352 ], [ %2345, %2343 ]
  %2355 = phi i32 [ %2363, %2352 ], [ %2346, %2343 ]
  %2356 = phi i32 [ %2364, %2352 ], [ %2350, %2343 ]
  %2357 = load i32, i32* %2354, align 4, !tbaa !43
  %2358 = sitofp i32 %2357 to float
  %2359 = load float, float* %60, align 4, !tbaa !547
  %2360 = fmul float %2359, %2358
  store float %2360, float* %2353, align 4, !tbaa !112
  %2361 = getelementptr inbounds i32, i32* %2354, i64 1
  %2362 = getelementptr inbounds float, float* %2353, i64 1
  %2363 = add nuw nsw i32 %2355, 1
  %2364 = add i32 %2356, -1
  %2365 = icmp eq i32 %2364, 0
  br i1 %2365, label %2366, label %2352, !llvm.loop !617

2366:                                             ; preds = %2352, %2343
  %2367 = phi i32* [ undef, %2343 ], [ %2361, %2352 ]
  %2368 = phi float* [ %2344, %2343 ], [ %2362, %2352 ]
  %2369 = phi i32* [ %2345, %2343 ], [ %2361, %2352 ]
  %2370 = phi i32 [ %2346, %2343 ], [ %2363, %2352 ]
  %2371 = icmp ult i32 %2349, 3
  br i1 %2371, label %2402, label %2372

2372:                                             ; preds = %2372, %2366
  %2373 = phi float* [ %2399, %2372 ], [ %2368, %2366 ]
  %2374 = phi i32* [ %2398, %2372 ], [ %2369, %2366 ]
  %2375 = phi i32 [ %2400, %2372 ], [ %2370, %2366 ]
  %2376 = load i32, i32* %2374, align 4, !tbaa !43
  %2377 = sitofp i32 %2376 to float
  %2378 = load float, float* %60, align 4, !tbaa !547
  %2379 = fmul float %2378, %2377
  store float %2379, float* %2373, align 4, !tbaa !112
  %2380 = getelementptr inbounds i32, i32* %2374, i64 1
  %2381 = getelementptr inbounds float, float* %2373, i64 1
  %2382 = load i32, i32* %2380, align 4, !tbaa !43
  %2383 = sitofp i32 %2382 to float
  %2384 = load float, float* %60, align 4, !tbaa !547
  %2385 = fmul float %2384, %2383
  store float %2385, float* %2381, align 4, !tbaa !112
  %2386 = getelementptr inbounds i32, i32* %2374, i64 2
  %2387 = getelementptr inbounds float, float* %2373, i64 2
  %2388 = load i32, i32* %2386, align 4, !tbaa !43
  %2389 = sitofp i32 %2388 to float
  %2390 = load float, float* %60, align 4, !tbaa !547
  %2391 = fmul float %2390, %2389
  store float %2391, float* %2387, align 4, !tbaa !112
  %2392 = getelementptr inbounds i32, i32* %2374, i64 3
  %2393 = getelementptr inbounds float, float* %2373, i64 3
  %2394 = load i32, i32* %2392, align 4, !tbaa !43
  %2395 = sitofp i32 %2394 to float
  %2396 = load float, float* %60, align 4, !tbaa !547
  %2397 = fmul float %2396, %2395
  store float %2397, float* %2393, align 4, !tbaa !112
  %2398 = getelementptr inbounds i32, i32* %2374, i64 4
  %2399 = getelementptr inbounds float, float* %2373, i64 4
  %2400 = add nsw i32 %2375, 4
  %2401 = icmp eq i32 %2400, %2155
  br i1 %2401, label %2402, label %2372, !llvm.loop !618

2402:                                             ; preds = %2372, %2366, %2342
  %2403 = phi i32* [ %2318, %2342 ], [ %2367, %2366 ], [ %2398, %2372 ]
  %2404 = getelementptr inbounds float, float* %2306, i64 %25
  %2405 = add nuw nsw i32 %2308, 1
  %2406 = icmp eq i32 %2405, %2156
  %2407 = add i64 %2305, 1
  br i1 %2406, label %2408, label %2304

2408:                                             ; preds = %2402, %2287, %2283, %2202
  %2409 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %76, i64 %75, i32 0
  %2410 = load i8*, i8** %2409, align 8, !tbaa !619
  tail call void @free(i8* %2410) #9
  %2411 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %76, i64 %75, i32 1
  %2412 = bitcast %struct.opj_tcd_seg** %2411 to i8**
  %2413 = load i8*, i8** %2412, align 8, !tbaa !596
  tail call void @free(i8* %2413) #9
  %2414 = add nuw nsw i64 %75, 1
  %2415 = load i32, i32* %65, align 8, !tbaa !550
  %2416 = load i32, i32* %67, align 4, !tbaa !552
  %2417 = mul nsw i32 %2416, %2415
  %2418 = sext i32 %2417 to i64
  %2419 = icmp slt i64 %2414, %2418
  br i1 %2419, label %74, label %2420

2420:                                             ; preds = %2408, %62
  %2421 = bitcast %union.anon* %71 to i8**
  %2422 = load i8*, i8** %2421, align 8, !tbaa !15
  tail call void @free(i8* %2422) #9
  %2423 = add nuw nsw i64 %63, 1
  %2424 = load i32, i32* %40, align 8, !tbaa !545
  %2425 = load i32, i32* %41, align 4, !tbaa !546
  %2426 = mul nsw i32 %2425, %2424
  %2427 = sext i32 %2426 to i64
  %2428 = icmp slt i64 %2423, %2427
  br i1 %2428, label %62, label %2429

2429:                                             ; preds = %2420
  %2430 = load i32, i32* %36, align 8, !tbaa !544
  br label %2431

2431:                                             ; preds = %2429, %45
  %2432 = phi i32 [ %2430, %2429 ], [ %46, %45 ]
  %2433 = phi i32 [ %2425, %2429 ], [ %47, %45 ]
  %2434 = phi i32 [ %2424, %2429 ], [ %48, %45 ]
  %2435 = add nuw nsw i64 %49, 1
  %2436 = sext i32 %2432 to i64
  %2437 = icmp slt i64 %2435, %2436
  br i1 %2437, label %45, label %2438

2438:                                             ; preds = %2431
  %2439 = load i32, i32* %9, align 8, !tbaa !35
  br label %2440

2440:                                             ; preds = %2438, %32
  %2441 = phi i32 [ %2439, %2438 ], [ %33, %32 ]
  %2442 = add nuw nsw i64 %34, 1
  %2443 = sext i32 %2441 to i64
  %2444 = icmp slt i64 %2442, %2443
  br i1 %2444, label %32, label %2445

2445:                                             ; preds = %2440, %3
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @t1_dec_clnpass_step(%struct.opj_t1* nocapture readonly, i16* nocapture, i32* nocapture, i32, i32) unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 1
  %7 = load %struct.opj_mqc*, %struct.opj_mqc** %6, align 8, !tbaa !535
  %8 = load i16, i16* %1, align 2, !tbaa !509
  %9 = sext i16 %8 to i32
  %10 = and i32 %9, 20480
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %85

12:                                               ; preds = %5
  %13 = shl i32 %3, 8
  %14 = and i32 %9, 255
  %15 = or i32 %14, %13
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [1024 x i8], [1024 x i8]* @lut_ctxno_zc, i64 0, i64 %16
  %18 = load i8, i8* %17, align 1, !tbaa !15
  %19 = sext i8 %18 to i64
  %20 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %7, i64 0, i32 6, i64 %19
  %21 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %7, i64 0, i32 7
  store %struct.opj_mqc_state** %20, %struct.opj_mqc_state*** %21, align 8, !tbaa !441
  %22 = tail call i32 @mqc_decode(%struct.opj_mqc* %7) #9
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %85, label %24

24:                                               ; preds = %12
  %25 = lshr i32 %9, 4
  %26 = and i32 %25, 255
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %27
  %29 = load i8, i8* %28, align 1, !tbaa !15
  %30 = sext i8 %29 to i64
  %31 = getelementptr inbounds %struct.opj_mqc, %struct.opj_mqc* %7, i64 0, i32 6, i64 %30
  store %struct.opj_mqc_state** %31, %struct.opj_mqc_state*** %21, align 8, !tbaa !441
  %32 = tail call i32 @mqc_decode(%struct.opj_mqc* nonnull %7) #9
  %33 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %27
  %34 = load i8, i8* %33, align 1, !tbaa !15
  %35 = sext i8 %34 to i32
  %36 = xor i32 %32, %35
  %37 = icmp eq i32 %36, 0
  %38 = sub nsw i32 0, %4
  %39 = select i1 %37, i32 %4, i32 %38
  store i32 %39, i32* %2, align 4, !tbaa !43
  %40 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 9
  %41 = load i32, i32* %40, align 8, !tbaa !582
  %42 = sext i32 %41 to i64
  %43 = sub nsw i64 0, %42
  %44 = getelementptr inbounds i16, i16* %1, i64 %43
  %45 = getelementptr inbounds i16, i16* %1, i64 %42
  %46 = getelementptr inbounds i16, i16* %44, i64 -1
  %47 = load i16, i16* %46, align 2, !tbaa !509
  %48 = or i16 %47, 2
  store i16 %48, i16* %46, align 2, !tbaa !509
  %49 = sext i32 %36 to i64
  %50 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %49
  %51 = load i16, i16* %50, align 2, !tbaa !509
  %52 = load i16, i16* %44, align 2, !tbaa !509
  %53 = or i16 %52, %51
  store i16 %53, i16* %44, align 2, !tbaa !509
  %54 = getelementptr inbounds i16, i16* %44, i64 1
  %55 = load i16, i16* %54, align 2, !tbaa !509
  %56 = or i16 %55, 4
  store i16 %56, i16* %54, align 2, !tbaa !509
  %57 = add nsw i32 %36, 2
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %58
  %60 = load i16, i16* %59, align 2, !tbaa !509
  %61 = getelementptr inbounds i16, i16* %1, i64 -1
  %62 = load i16, i16* %61, align 2, !tbaa !509
  %63 = or i16 %62, %60
  store i16 %63, i16* %61, align 2, !tbaa !509
  %64 = load i16, i16* %1, align 2, !tbaa !509
  %65 = or i16 %64, 4096
  store i16 %65, i16* %1, align 2, !tbaa !509
  %66 = add nsw i32 %36, 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %67
  %69 = load i16, i16* %68, align 2, !tbaa !509
  %70 = getelementptr inbounds i16, i16* %1, i64 1
  %71 = load i16, i16* %70, align 2, !tbaa !509
  %72 = or i16 %71, %69
  store i16 %72, i16* %70, align 2, !tbaa !509
  %73 = getelementptr inbounds i16, i16* %45, i64 -1
  %74 = load i16, i16* %73, align 2, !tbaa !509
  %75 = or i16 %74, 1
  store i16 %75, i16* %73, align 2, !tbaa !509
  %76 = add nsw i32 %36, 6
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* @t1_updateflags.mod, i64 0, i64 %77
  %79 = load i16, i16* %78, align 2, !tbaa !509
  %80 = load i16, i16* %45, align 2, !tbaa !509
  %81 = or i16 %80, %79
  store i16 %81, i16* %45, align 2, !tbaa !509
  %82 = getelementptr inbounds i16, i16* %45, i64 1
  %83 = load i16, i16* %82, align 2, !tbaa !509
  %84 = or i16 %83, 8
  store i16 %84, i16* %82, align 2, !tbaa !509
  br label %85

85:                                               ; preds = %24, %12, %5
  %86 = load i16, i16* %1, align 2, !tbaa !509
  %87 = and i16 %86, -16385
  store i16 %87, i16* %1, align 2, !tbaa !509
  ret void
}

; Function Attrs: nounwind uwtable
define void @dump_array16(i32* nocapture readonly, i32) #0 {
  %3 = add i32 %1, -1
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %19

5:                                                ; preds = %2
  %6 = zext i32 %3 to i64
  br label %7

7:                                                ; preds = %17, %5
  %8 = phi i64 [ 0, %5 ], [ %12, %17 ]
  %9 = getelementptr inbounds i32, i32* %0, i64 %8
  %10 = load i32, i32* %9, align 4, !tbaa !43
  %11 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0), i32 %10)
  %12 = add nuw nsw i64 %8, 1
  %13 = and i64 %12, 7
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %7
  %16 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.37, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %7
  %18 = icmp eq i64 %12, %6
  br i1 %18, label %19, label %7

19:                                               ; preds = %17, %2
  %20 = sext i32 %3 to i64
  %21 = getelementptr inbounds i32, i32* %0, i64 %20
  %22 = load i32, i32* %21, align 4, !tbaa !43
  %23 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2.38, i64 0, i64 0), i32 %22)
  ret void
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = alloca [1024 x i32], align 16
  %2 = alloca [128 x i32], align 16
  %3 = alloca [128 x i32], align 16
  %4 = alloca [128 x i32], align 16
  %5 = alloca [128 x i32], align 16
  %6 = bitcast [1024 x i32]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %6) #9
  %7 = bitcast [128 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %7) #9
  %8 = bitcast [128 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #9
  %9 = bitcast [128 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %9) #9
  %10 = bitcast [128 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %10) #9
  %11 = tail call i32 @puts(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @str, i64 0, i64 0))
  br label %12

12:                                               ; preds = %118, %0
  %13 = phi i32 [ 0, %0 ], [ %119, %118 ]
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %56

15:                                               ; preds = %49, %12
  %16 = phi i32 [ %54, %49 ], [ 0, %12 ]
  %17 = lshr i32 %16, 7
  %18 = and i32 %17, 1
  %19 = lshr i32 %16, 5
  %20 = and i32 %19, 1
  %21 = add nuw nsw i32 %18, %20
  %22 = lshr i32 %16, 4
  %23 = and i32 %22, 1
  %24 = lshr i32 %16, 6
  %25 = and i32 %24, 1
  %26 = add nuw nsw i32 %23, %25
  %27 = lshr i32 %16, 3
  %28 = and i32 %27, 1
  %29 = and i32 %16, 1
  %30 = add nuw nsw i32 %28, %29
  %31 = lshr i32 %16, 1
  %32 = and i32 %31, 1
  %33 = add nuw nsw i32 %30, %32
  %34 = lshr i32 %16, 2
  %35 = and i32 %34, 1
  %36 = add nuw nsw i32 %33, %35
  switch i32 %26, label %49 [
    i32 0, label %42
    i32 1, label %37
  ]

37:                                               ; preds = %15
  %38 = icmp eq i32 %21, 0
  br i1 %38, label %39, label %49

39:                                               ; preds = %37
  %40 = icmp eq i32 %36, 0
  %41 = select i1 %40, i32 5, i32 6
  br label %49

42:                                               ; preds = %15
  switch i32 %21, label %48 [
    i32 0, label %43
    i32 1, label %49
  ]

43:                                               ; preds = %42
  %44 = icmp eq i32 %36, 1
  %45 = select i1 %44, i32 1, i32 2
  %46 = icmp eq i32 %36, 0
  %47 = select i1 %46, i32 0, i32 %45
  br label %49

48:                                               ; preds = %42
  br label %49

49:                                               ; preds = %48, %43, %42, %39, %37, %15
  %50 = phi i32 [ 4, %48 ], [ 3, %42 ], [ %41, %39 ], [ 7, %37 ], [ 8, %15 ], [ %47, %43 ]
  %51 = or i32 %16, 256
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [1024 x i32], [1024 x i32]* %1, i64 0, i64 %52
  store i32 %50, i32* %53, align 4, !tbaa !43
  %54 = add nuw nsw i32 %16, 1
  %55 = icmp eq i32 %54, 256
  br i1 %55, label %118, label %15

56:                                               ; preds = %110, %12
  %57 = phi i32 [ %116, %110 ], [ 0, %12 ]
  switch i32 %13, label %59 [
    i32 2, label %60
    i32 1, label %58
  ]

58:                                               ; preds = %56
  br label %60

59:                                               ; preds = %56
  br label %60

60:                                               ; preds = %59, %58, %56
  %61 = phi i32 [ 2, %58 ], [ 1, %56 ], [ %13, %59 ]
  %62 = lshr i32 %57, 7
  %63 = and i32 %62, 1
  %64 = lshr i32 %57, 5
  %65 = and i32 %64, 1
  %66 = add nuw nsw i32 %63, %65
  %67 = lshr i32 %57, 4
  %68 = and i32 %67, 1
  %69 = lshr i32 %57, 6
  %70 = and i32 %69, 1
  %71 = add nuw nsw i32 %68, %70
  %72 = lshr i32 %57, 3
  %73 = and i32 %72, 1
  %74 = and i32 %57, 1
  %75 = add nuw nsw i32 %73, %74
  %76 = lshr i32 %57, 1
  %77 = and i32 %76, 1
  %78 = add nuw nsw i32 %75, %77
  %79 = lshr i32 %57, 2
  %80 = and i32 %79, 1
  %81 = add nuw nsw i32 %78, %80
  switch i32 %13, label %110 [
    i32 3, label %95
    i32 0, label %82
    i32 1, label %82
  ]

82:                                               ; preds = %60, %60
  switch i32 %66, label %110 [
    i32 0, label %83
    i32 1, label %90
  ]

83:                                               ; preds = %82
  switch i32 %71, label %89 [
    i32 0, label %84
    i32 1, label %110
  ]

84:                                               ; preds = %83
  %85 = icmp eq i32 %81, 1
  %86 = select i1 %85, i32 1, i32 2
  %87 = icmp eq i32 %81, 0
  %88 = select i1 %87, i32 0, i32 %86
  br label %110

89:                                               ; preds = %83
  br label %110

90:                                               ; preds = %82
  %91 = icmp eq i32 %71, 0
  br i1 %91, label %92, label %110

92:                                               ; preds = %90
  %93 = icmp eq i32 %81, 0
  %94 = select i1 %93, i32 5, i32 6
  br label %110

95:                                               ; preds = %60
  %96 = add nuw nsw i32 %66, %71
  switch i32 %81, label %110 [
    i32 0, label %97
    i32 1, label %102
    i32 2, label %107
  ]

97:                                               ; preds = %95
  %98 = icmp eq i32 %96, 1
  %99 = select i1 %98, i32 1, i32 2
  %100 = icmp eq i32 %96, 0
  %101 = select i1 %100, i32 0, i32 %99
  br label %110

102:                                              ; preds = %95
  %103 = icmp eq i32 %96, 1
  %104 = select i1 %103, i32 4, i32 5
  %105 = icmp eq i32 %96, 0
  %106 = select i1 %105, i32 3, i32 %104
  br label %110

107:                                              ; preds = %95
  %108 = icmp eq i32 %96, 0
  %109 = select i1 %108, i32 6, i32 7
  br label %110

110:                                              ; preds = %107, %102, %97, %95, %92, %90, %89, %84, %83, %82, %60
  %111 = phi i32 [ 0, %60 ], [ 4, %89 ], [ 3, %83 ], [ %94, %92 ], [ 7, %90 ], [ 8, %82 ], [ %109, %107 ], [ 8, %95 ], [ %88, %84 ], [ %101, %97 ], [ %106, %102 ]
  %112 = shl i32 %61, 8
  %113 = or i32 %112, %57
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [1024 x i32], [1024 x i32]* %1, i64 0, i64 %114
  store i32 %111, i32* %115, align 4, !tbaa !43
  %116 = add nuw nsw i32 %57, 1
  %117 = icmp eq i32 %116, 256
  br i1 %117, label %118, label %56

118:                                              ; preds = %110, %49
  %119 = add nuw nsw i32 %13, 1
  %120 = icmp eq i32 %119, 4
  br i1 %120, label %121, label %12

121:                                              ; preds = %118
  %122 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4.39, i64 0, i64 0))
  br label %123

123:                                              ; preds = %133, %121
  %124 = phi i64 [ 0, %121 ], [ %128, %133 ]
  %125 = getelementptr inbounds [1024 x i32], [1024 x i32]* %1, i64 0, i64 %124
  %126 = load i32, i32* %125, align 4, !tbaa !43
  %127 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.40, i64 0, i64 0), i32 %126)
  %128 = add nuw nsw i64 %124, 1
  %129 = and i64 %128, 31
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %133

131:                                              ; preds = %123
  %132 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.37, i64 0, i64 0))
  br label %133

133:                                              ; preds = %131, %123
  %134 = icmp eq i64 %128, 1023
  br i1 %134, label %135, label %123

135:                                              ; preds = %133
  %136 = getelementptr inbounds [1024 x i32], [1024 x i32]* %1, i64 0, i64 1023
  %137 = load i32, i32* %136, align 4, !tbaa !43
  %138 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.41, i64 0, i64 0), i32 %137)
  %139 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7.42, i64 0, i64 0))
  br label %140

140:                                              ; preds = %194, %135
  %141 = phi i32 [ 0, %135 ], [ %189, %194 ]
  %142 = shl i32 %141, 4
  %143 = and i32 %142, 544
  %144 = icmp eq i32 %143, 32
  %145 = zext i1 %144 to i32
  %146 = and i32 %142, 2176
  %147 = icmp eq i32 %146, 128
  %148 = sext i1 %147 to i32
  %149 = icmp ne i32 %145, %148
  %150 = zext i1 %149 to i32
  %151 = icmp eq i32 %143, 544
  %152 = zext i1 %151 to i32
  %153 = icmp eq i32 %146, 2176
  %154 = sext i1 %153 to i32
  %155 = icmp ne i32 %152, %154
  %156 = zext i1 %155 to i32
  %157 = sub nsw i32 %150, %156
  %158 = and i32 %142, 272
  %159 = icmp eq i32 %158, 16
  %160 = zext i1 %159 to i32
  %161 = and i32 %142, 1088
  %162 = icmp eq i32 %161, 64
  %163 = sext i1 %162 to i32
  %164 = icmp ne i32 %160, %163
  %165 = zext i1 %164 to i32
  %166 = icmp eq i32 %158, 272
  %167 = zext i1 %166 to i32
  %168 = icmp eq i32 %161, 1088
  %169 = sext i1 %168 to i32
  %170 = icmp ne i32 %167, %169
  %171 = zext i1 %170 to i32
  %172 = sub nsw i32 %165, %171
  %173 = icmp slt i32 %157, 0
  %174 = sub nsw i32 0, %157
  %175 = sub nsw i32 0, %172
  %176 = select i1 %173, i32 %174, i32 %157
  %177 = select i1 %173, i32 %175, i32 %172
  switch i32 %176, label %186 [
    i32 0, label %178
    i32 1, label %181
  ]

178:                                              ; preds = %140
  %179 = icmp eq i32 %177, 0
  %180 = select i1 %179, i32 9, i32 10
  br label %186

181:                                              ; preds = %140
  %182 = icmp eq i32 %177, 0
  %183 = select i1 %182, i32 12, i32 13
  %184 = icmp eq i32 %177, -1
  %185 = select i1 %184, i32 11, i32 %183
  br label %186

186:                                              ; preds = %181, %178, %140
  %187 = phi i32 [ %180, %178 ], [ 9, %140 ], [ %185, %181 ]
  %188 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.43, i64 0, i64 0), i32 %187)
  %189 = add nuw nsw i32 %141, 1
  %190 = and i32 %189, 15
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %194

192:                                              ; preds = %186
  %193 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.37, i64 0, i64 0))
  br label %194

194:                                              ; preds = %192, %186
  %195 = icmp eq i32 %189, 255
  br i1 %195, label %196, label %140

196:                                              ; preds = %194
  %197 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9.44, i64 0, i64 0), i32 13)
  %198 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10.45, i64 0, i64 0))
  br label %199

199:                                              ; preds = %249, %196
  %200 = phi i32 [ 0, %196 ], [ %244, %249 ]
  %201 = shl i32 %200, 4
  %202 = and i32 %201, 544
  %203 = icmp eq i32 %202, 32
  %204 = zext i1 %203 to i32
  %205 = and i32 %201, 2176
  %206 = icmp eq i32 %205, 128
  %207 = sext i1 %206 to i32
  %208 = icmp ne i32 %204, %207
  %209 = zext i1 %208 to i32
  %210 = icmp eq i32 %202, 544
  %211 = zext i1 %210 to i32
  %212 = icmp eq i32 %205, 2176
  %213 = sext i1 %212 to i32
  %214 = icmp ne i32 %211, %213
  %215 = zext i1 %214 to i32
  %216 = sub nsw i32 %209, %215
  %217 = and i32 %201, 272
  %218 = icmp eq i32 %217, 16
  %219 = zext i1 %218 to i32
  %220 = and i32 %201, 1088
  %221 = icmp eq i32 %220, 64
  %222 = sext i1 %221 to i32
  %223 = icmp ne i32 %219, %222
  %224 = zext i1 %223 to i32
  %225 = icmp eq i32 %217, 272
  %226 = zext i1 %225 to i32
  %227 = icmp eq i32 %220, 1088
  %228 = sext i1 %227 to i32
  %229 = icmp ne i32 %226, %228
  %230 = zext i1 %229 to i32
  %231 = sub nsw i32 %224, %230
  %232 = or i32 %216, %231
  %233 = icmp eq i32 %232, 0
  %234 = icmp sgt i32 %216, 0
  %235 = or i1 %234, %233
  br i1 %235, label %241, label %236

236:                                              ; preds = %199
  %237 = icmp ne i32 %216, 0
  %238 = icmp slt i32 %231, 1
  %239 = or i1 %238, %237
  %240 = zext i1 %239 to i32
  br label %241

241:                                              ; preds = %236, %199
  %242 = phi i32 [ 0, %199 ], [ %240, %236 ]
  %243 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.40, i64 0, i64 0), i32 %242)
  %244 = add nuw nsw i32 %200, 1
  %245 = and i32 %244, 31
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %249

247:                                              ; preds = %241
  %248 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.37, i64 0, i64 0))
  br label %249

249:                                              ; preds = %247, %241
  %250 = icmp eq i32 %244, 255
  br i1 %250, label %251, label %199

251:                                              ; preds = %249
  %252 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.41, i64 0, i64 0), i32 1)
  br label %253

253:                                              ; preds = %253, %251
  %254 = phi i64 [ 0, %251 ], [ %310, %253 ]
  %255 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %251 ], [ %311, %253 ]
  %256 = sitofp <4 x i32> %255 to <4 x double>
  %257 = fmul <4 x double> %256, <double 1.562500e-02, double 1.562500e-02, double 1.562500e-02, double 1.562500e-02>
  %258 = fadd <4 x double> %257, <double -1.500000e+00, double -1.500000e+00, double -1.500000e+00, double -1.500000e+00>
  %259 = fmul <4 x double> %257, %257
  %260 = fmul <4 x double> %258, %258
  %261 = fsub <4 x double> %259, %260
  %262 = fmul <4 x double> %261, <double 6.400000e+01, double 6.400000e+01, double 6.400000e+01, double 6.400000e+01>
  %263 = fadd <4 x double> %262, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %264 = call <4 x double> @llvm.floor.v4f64(<4 x double> %263)
  %265 = fmul <4 x double> %264, <double 1.562500e-02, double 1.562500e-02, double 1.562500e-02, double 1.562500e-02>
  %266 = fmul <4 x double> %265, <double 8.192000e+03, double 8.192000e+03, double 8.192000e+03, double 8.192000e+03>
  %267 = fptosi <4 x double> %266 to <4 x i32>
  %268 = icmp sgt <4 x i32> %267, zeroinitializer
  %269 = select <4 x i1> %268, <4 x i32> %267, <4 x i32> zeroinitializer
  %270 = getelementptr inbounds [128 x i32], [128 x i32]* %2, i64 0, i64 %254
  %271 = bitcast i32* %270 to <4 x i32>*
  store <4 x i32> %269, <4 x i32>* %271, align 16, !tbaa !43
  %272 = fmul <4 x double> %259, <double 6.400000e+01, double 6.400000e+01, double 6.400000e+01, double 6.400000e+01>
  %273 = fadd <4 x double> %272, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %274 = call <4 x double> @llvm.floor.v4f64(<4 x double> %273)
  %275 = fmul <4 x double> %274, <double 1.562500e-02, double 1.562500e-02, double 1.562500e-02, double 1.562500e-02>
  %276 = fmul <4 x double> %275, <double 8.192000e+03, double 8.192000e+03, double 8.192000e+03, double 8.192000e+03>
  %277 = fptosi <4 x double> %276 to <4 x i32>
  %278 = icmp sgt <4 x i32> %277, zeroinitializer
  %279 = select <4 x i1> %278, <4 x i32> %277, <4 x i32> zeroinitializer
  %280 = getelementptr inbounds [128 x i32], [128 x i32]* %3, i64 0, i64 %254
  %281 = bitcast i32* %280 to <4 x i32>*
  store <4 x i32> %279, <4 x i32>* %281, align 16, !tbaa !43
  %282 = fadd <4 x double> %257, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %283 = and <4 x i32> %255, <i32 64, i32 64, i32 64, i32 64>
  %284 = icmp eq <4 x i32> %283, zeroinitializer
  %285 = fadd <4 x double> %257, <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>
  %286 = select <4 x i1> %284, <4 x double> %285, <4 x double> %258
  %287 = fmul <4 x double> %282, %282
  %288 = fmul <4 x double> %286, %286
  %289 = fsub <4 x double> %287, %288
  %290 = fmul <4 x double> %289, <double 6.400000e+01, double 6.400000e+01, double 6.400000e+01, double 6.400000e+01>
  %291 = fadd <4 x double> %290, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %292 = call <4 x double> @llvm.floor.v4f64(<4 x double> %291)
  %293 = fmul <4 x double> %292, <double 1.562500e-02, double 1.562500e-02, double 1.562500e-02, double 1.562500e-02>
  %294 = fmul <4 x double> %293, <double 8.192000e+03, double 8.192000e+03, double 8.192000e+03, double 8.192000e+03>
  %295 = fptosi <4 x double> %294 to <4 x i32>
  %296 = icmp sgt <4 x i32> %295, zeroinitializer
  %297 = select <4 x i1> %296, <4 x i32> %295, <4 x i32> zeroinitializer
  %298 = getelementptr inbounds [128 x i32], [128 x i32]* %4, i64 0, i64 %254
  %299 = bitcast i32* %298 to <4 x i32>*
  store <4 x i32> %297, <4 x i32>* %299, align 16, !tbaa !43
  %300 = fmul <4 x double> %287, <double 6.400000e+01, double 6.400000e+01, double 6.400000e+01, double 6.400000e+01>
  %301 = fadd <4 x double> %300, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %302 = call <4 x double> @llvm.floor.v4f64(<4 x double> %301)
  %303 = fmul <4 x double> %302, <double 1.562500e-02, double 1.562500e-02, double 1.562500e-02, double 1.562500e-02>
  %304 = fmul <4 x double> %303, <double 8.192000e+03, double 8.192000e+03, double 8.192000e+03, double 8.192000e+03>
  %305 = fptosi <4 x double> %304 to <4 x i32>
  %306 = icmp sgt <4 x i32> %305, zeroinitializer
  %307 = select <4 x i1> %306, <4 x i32> %305, <4 x i32> zeroinitializer
  %308 = getelementptr inbounds [128 x i32], [128 x i32]* %5, i64 0, i64 %254
  %309 = bitcast i32* %308 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %309, align 16, !tbaa !43
  %310 = add i64 %254, 4
  %311 = add <4 x i32> %255, <i32 4, i32 4, i32 4, i32 4>
  %312 = icmp eq i64 %310, 128
  br i1 %312, label %313, label %253, !llvm.loop !620

313:                                              ; preds = %253
  %314 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.11.46, i64 0, i64 0))
  br label %315

315:                                              ; preds = %325, %313
  %316 = phi i64 [ 0, %313 ], [ %320, %325 ]
  %317 = getelementptr inbounds [128 x i32], [128 x i32]* %2, i64 0, i64 %316
  %318 = load i32, i32* %317, align 4, !tbaa !43
  %319 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0), i32 %318) #9
  %320 = add nuw nsw i64 %316, 1
  %321 = and i64 %320, 7
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %323, label %325

323:                                              ; preds = %315
  %324 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.37, i64 0, i64 0)) #9
  br label %325

325:                                              ; preds = %323, %315
  %326 = icmp eq i64 %320, 127
  br i1 %326, label %327, label %315

327:                                              ; preds = %325
  %328 = getelementptr inbounds [128 x i32], [128 x i32]* %2, i64 0, i64 127
  %329 = load i32, i32* %328, align 4, !tbaa !43
  %330 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2.38, i64 0, i64 0), i32 %329) #9
  %331 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.12.47, i64 0, i64 0))
  br label %332

332:                                              ; preds = %342, %327
  %333 = phi i64 [ 0, %327 ], [ %337, %342 ]
  %334 = getelementptr inbounds [128 x i32], [128 x i32]* %3, i64 0, i64 %333
  %335 = load i32, i32* %334, align 4, !tbaa !43
  %336 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0), i32 %335) #9
  %337 = add nuw nsw i64 %333, 1
  %338 = and i64 %337, 7
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %342

340:                                              ; preds = %332
  %341 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.37, i64 0, i64 0)) #9
  br label %342

342:                                              ; preds = %340, %332
  %343 = icmp eq i64 %337, 127
  br i1 %343, label %344, label %332

344:                                              ; preds = %342
  %345 = getelementptr inbounds [128 x i32], [128 x i32]* %3, i64 0, i64 127
  %346 = load i32, i32* %345, align 4, !tbaa !43
  %347 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2.38, i64 0, i64 0), i32 %346) #9
  %348 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.13.48, i64 0, i64 0))
  br label %349

349:                                              ; preds = %359, %344
  %350 = phi i64 [ 0, %344 ], [ %354, %359 ]
  %351 = getelementptr inbounds [128 x i32], [128 x i32]* %4, i64 0, i64 %350
  %352 = load i32, i32* %351, align 4, !tbaa !43
  %353 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0), i32 %352) #9
  %354 = add nuw nsw i64 %350, 1
  %355 = and i64 %354, 7
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %359

357:                                              ; preds = %349
  %358 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.37, i64 0, i64 0)) #9
  br label %359

359:                                              ; preds = %357, %349
  %360 = icmp eq i64 %354, 127
  br i1 %360, label %361, label %349

361:                                              ; preds = %359
  %362 = getelementptr inbounds [128 x i32], [128 x i32]* %4, i64 0, i64 127
  %363 = load i32, i32* %362, align 4, !tbaa !43
  %364 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2.38, i64 0, i64 0), i32 %363) #9
  %365 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.14.49, i64 0, i64 0))
  br label %366

366:                                              ; preds = %376, %361
  %367 = phi i64 [ 0, %361 ], [ %371, %376 ]
  %368 = getelementptr inbounds [128 x i32], [128 x i32]* %5, i64 0, i64 %367
  %369 = load i32, i32* %368, align 4, !tbaa !43
  %370 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0), i32 %369) #9
  %371 = add nuw nsw i64 %367, 1
  %372 = and i64 %371, 7
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %366
  %375 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.37, i64 0, i64 0)) #9
  br label %376

376:                                              ; preds = %374, %366
  %377 = icmp eq i64 %371, 127
  br i1 %377, label %378, label %366

378:                                              ; preds = %376
  %379 = getelementptr inbounds [128 x i32], [128 x i32]* %5, i64 0, i64 127
  %380 = load i32, i32* %379, align 4, !tbaa !43
  %381 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2.38, i64 0, i64 0), i32 %380) #9
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %6) #9
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare <4 x double> @llvm.floor.v4f64(<4 x double>) #7

; Function Attrs: nounwind uwtable
define i32 @t2_encode_packets(%struct.opj_t2* nocapture readonly, i32, %struct.opj_tcd_tile* nocapture, i32, i8*, i32, %struct.opj_codestream_info*, i32, i32, i32, i32, i32) #0 {
  %13 = getelementptr inbounds %struct.opj_t2, %struct.opj_t2* %0, i64 0, i32 1
  %14 = load %struct.opj_image*, %struct.opj_image** %13, align 8, !tbaa !621
  %15 = getelementptr inbounds %struct.opj_t2, %struct.opj_t2* %0, i64 0, i32 2
  %16 = load %struct.opj_cp*, %struct.opj_cp** %15, align 8, !tbaa !623
  %17 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %16, i64 0, i32 28
  %18 = load %struct.opj_tcp*, %struct.opj_tcp** %17, align 8, !tbaa !139
  %19 = sext i32 %1 to i64
  %20 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %16, i64 0, i32 0
  %21 = load i32, i32* %20, align 8, !tbaa !250
  %22 = icmp eq i32 %21, 3
  %23 = select i1 %22, i64 2, i64 1
  %24 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %16, i64 0, i32 1
  %25 = load i32, i32* %24, align 4, !tbaa !252
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %12
  %28 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %14, i64 0, i32 4
  %29 = load i32, i32* %28, align 8, !tbaa !127
  br label %30

30:                                               ; preds = %27, %12
  %31 = phi i32 [ %29, %27 ], [ 1, %12 ]
  %32 = tail call %struct.opj_pi_iterator* @pi_initialise_encode(%struct.opj_image* %14, %struct.opj_cp* %16, i32 %1, i32 %10) #9
  %33 = icmp eq %struct.opj_pi_iterator* %32, null
  br i1 %33, label %225, label %34

34:                                               ; preds = %30
  %35 = icmp eq i32 %10, 0
  br i1 %35, label %36, label %105

36:                                               ; preds = %34
  %37 = icmp sgt i32 %31, 0
  br i1 %37, label %38, label %49

38:                                               ; preds = %36
  %39 = sext i32 %5 to i64
  %40 = getelementptr inbounds i8, i8* %4, i64 %39
  %41 = ptrtoint i8* %40 to i64
  br label %45

42:                                               ; preds = %51
  %43 = add nuw nsw i32 %48, 1
  %44 = icmp slt i32 %43, %31
  br i1 %44, label %45, label %49

45:                                               ; preds = %42, %38
  %46 = phi i8* [ %4, %38 ], [ %97, %42 ]
  %47 = phi i32 [ 0, %38 ], [ %98, %42 ]
  %48 = phi i32 [ 0, %38 ], [ %43, %42 ]
  br label %53

49:                                               ; preds = %42, %36
  %50 = phi i8* [ %4, %36 ], [ %97, %42 ]
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %32, %struct.opj_cp* %16, i32 %1) #9
  br label %219

51:                                               ; preds = %96
  %52 = icmp ult i64 %104, %23
  br i1 %52, label %53, label %42

53:                                               ; preds = %51, %45
  %54 = phi i64 [ 0, %45 ], [ %104, %51 ]
  %55 = phi i8* [ %46, %45 ], [ %97, %51 ]
  %56 = phi i32 [ %47, %45 ], [ %98, %51 ]
  %57 = trunc i64 %54 to i32
  %58 = tail call i32 @pi_create_encode(%struct.opj_pi_iterator* nonnull %32, %struct.opj_cp* %16, i32 %1, i32 %57, i32 %48, i32 %8, i32 0, i32 %11) #9
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %66

60:                                               ; preds = %53
  %61 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %32, i64 %54
  %62 = tail call i32 @pi_next(%struct.opj_pi_iterator* nonnull %61) #9
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %96, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %32, i64 %54, i32 9
  br label %70

66:                                               ; preds = %53
  %67 = getelementptr inbounds %struct.opj_t2, %struct.opj_t2* %0, i64 0, i32 0
  %68 = load %struct.opj_common_struct*, %struct.opj_common_struct** %67, align 8, !tbaa !624
  %69 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %68, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.50, i64 0, i64 0)) #9
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %32, %struct.opj_cp* %16, i32 %1) #9
  br label %225

70:                                               ; preds = %88, %64
  %71 = phi i8* [ %55, %64 ], [ %91, %88 ]
  %72 = phi i32 [ %56, %64 ], [ %90, %88 ]
  %73 = phi i32 [ 0, %64 ], [ %89, %88 ]
  %74 = load i32, i32* %65, align 4, !tbaa !500
  %75 = icmp slt i32 %74, %3
  br i1 %75, label %76, label %88

76:                                               ; preds = %70
  %77 = load %struct.opj_tcp*, %struct.opj_tcp** %17, align 8, !tbaa !139
  %78 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %77, i64 %19
  %79 = ptrtoint i8* %71 to i64
  %80 = sub i64 %41, %79
  %81 = trunc i64 %80 to i32
  %82 = tail call fastcc i32 @t2_encode_packet(%struct.opj_tcd_tile* %2, %struct.opj_tcp* %78, %struct.opj_pi_iterator* nonnull %61, i8* %71, i32 %81, %struct.opj_codestream_info* %6, i32 %1)
  %83 = icmp eq i32 %82, -999
  br i1 %83, label %214, label %84

84:                                               ; preds = %76
  %85 = add nsw i32 %82, %73
  %86 = sext i32 %82 to i64
  %87 = getelementptr inbounds i8, i8* %71, i64 %86
  br label %88

88:                                               ; preds = %84, %70
  %89 = phi i32 [ %85, %84 ], [ %73, %70 ]
  %90 = phi i32 [ %82, %84 ], [ %72, %70 ]
  %91 = phi i8* [ %87, %84 ], [ %71, %70 ]
  %92 = tail call i32 @pi_next(%struct.opj_pi_iterator* nonnull %61) #9
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %70

94:                                               ; preds = %88
  %95 = icmp eq i32 %90, -999
  br i1 %95, label %214, label %96

96:                                               ; preds = %94, %60
  %97 = phi i8* [ %91, %94 ], [ %55, %60 ]
  %98 = phi i32 [ %90, %94 ], [ %56, %60 ]
  %99 = phi i32 [ %89, %94 ], [ 0, %60 ]
  %100 = load i32, i32* %24, align 4, !tbaa !252
  %101 = icmp ne i32 %100, 0
  %102 = icmp sgt i32 %99, %100
  %103 = and i1 %101, %102
  %104 = add nuw nsw i64 %54, 1
  br i1 %103, label %214, label %51

105:                                              ; preds = %34
  %106 = tail call i32 @pi_create_encode(%struct.opj_pi_iterator* nonnull %32, %struct.opj_cp* %16, i32 %1, i32 %9, i32 %7, i32 %8, i32 %10, i32 %11) #9
  %107 = sext i32 %9 to i64
  %108 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %32, i64 %107
  %109 = tail call i32 @pi_next(%struct.opj_pi_iterator* nonnull %108) #9
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %112

111:                                              ; preds = %105
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %32, %struct.opj_cp* %16, i32 %1) #9
  br label %219

112:                                              ; preds = %105
  %113 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %32, i64 %107, i32 9
  %114 = sext i32 %5 to i64
  %115 = getelementptr inbounds i8, i8* %4, i64 %114
  %116 = ptrtoint i8* %115 to i64
  %117 = icmp eq %struct.opj_codestream_info* %6, null
  %118 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %6, i64 0, i32 2
  %119 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %6, i64 0, i32 21
  %120 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %6, i64 0, i32 1
  %121 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %16, i64 0, i32 4
  %122 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %18, i64 %19, i32 7
  %123 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %2, i64 0, i32 9
  br i1 %117, label %124, label %147

124:                                              ; preds = %142, %112
  %125 = phi i8* [ %144, %142 ], [ %4, %112 ]
  %126 = phi i32 [ %143, %142 ], [ 0, %112 ]
  %127 = load i32, i32* %113, align 4, !tbaa !500
  %128 = icmp slt i32 %127, %3
  br i1 %128, label %129, label %142

129:                                              ; preds = %124
  %130 = load %struct.opj_tcp*, %struct.opj_tcp** %17, align 8, !tbaa !139
  %131 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %130, i64 %19
  %132 = ptrtoint i8* %125 to i64
  %133 = sub i64 %116, %132
  %134 = trunc i64 %133 to i32
  %135 = tail call fastcc i32 @t2_encode_packet(%struct.opj_tcd_tile* %2, %struct.opj_tcp* %131, %struct.opj_pi_iterator* nonnull %108, i8* %125, i32 %134, %struct.opj_codestream_info* null, i32 %1)
  %136 = icmp eq i32 %135, -999
  br i1 %136, label %214, label %137

137:                                              ; preds = %129
  %138 = sext i32 %135 to i64
  %139 = getelementptr inbounds i8, i8* %125, i64 %138
  %140 = load i32, i32* %123, align 8, !tbaa !362
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %123, align 8, !tbaa !362
  br label %142

142:                                              ; preds = %137, %124
  %143 = phi i32 [ %135, %137 ], [ %126, %124 ]
  %144 = phi i8* [ %139, %137 ], [ %125, %124 ]
  %145 = tail call i32 @pi_next(%struct.opj_pi_iterator* nonnull %108) #9
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %215, label %124

147:                                              ; preds = %209, %112
  %148 = phi i8* [ %211, %209 ], [ %4, %112 ]
  %149 = phi i32 [ %210, %209 ], [ 0, %112 ]
  %150 = load i32, i32* %113, align 4, !tbaa !500
  %151 = icmp slt i32 %150, %3
  br i1 %151, label %152, label %209

152:                                              ; preds = %147
  %153 = load %struct.opj_tcp*, %struct.opj_tcp** %17, align 8, !tbaa !139
  %154 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %153, i64 %19
  %155 = ptrtoint i8* %148 to i64
  %156 = sub i64 %116, %155
  %157 = trunc i64 %156 to i32
  %158 = tail call fastcc i32 @t2_encode_packet(%struct.opj_tcd_tile* %2, %struct.opj_tcp* %154, %struct.opj_pi_iterator* nonnull %108, i8* %148, i32 %157, %struct.opj_codestream_info* nonnull %6, i32 %1)
  %159 = icmp eq i32 %158, -999
  br i1 %159, label %214, label %160

160:                                              ; preds = %152
  %161 = sext i32 %158 to i64
  %162 = getelementptr inbounds i8, i8* %148, i64 %161
  %163 = load i32, i32* %118, align 4, !tbaa !625
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %167

165:                                              ; preds = %160
  %166 = load i32, i32* %120, align 8, !tbaa !198
  br label %204

167:                                              ; preds = %160
  %168 = load %struct.opj_tile_info*, %struct.opj_tile_info** %119, align 8, !tbaa !143
  %169 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %168, i64 %19, i32 9
  %170 = load %struct.opj_packet_info*, %struct.opj_packet_info** %169, align 8, !tbaa !355
  %171 = load i32, i32* %120, align 8, !tbaa !198
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %170, i64 %172
  %174 = icmp eq i32 %171, 0
  br i1 %174, label %175, label %177

175:                                              ; preds = %167
  %176 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %168, i64 %19, i32 3
  br label %191

177:                                              ; preds = %167
  %178 = load i8, i8* %121, align 8, !tbaa !149
  %179 = sext i8 %178 to i32
  %180 = load i32, i32* %122, align 8, !tbaa !212
  %181 = or i32 %180, %179
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %187, label %183

183:                                              ; preds = %177
  %184 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %173, i64 0, i32 0
  %185 = load i32, i32* %184, align 8, !tbaa !358
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %195

187:                                              ; preds = %183, %177
  %188 = add nsw i32 %171, -1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %170, i64 %189, i32 2
  br label %191

191:                                              ; preds = %187, %175
  %192 = phi i32* [ %190, %187 ], [ %176, %175 ]
  %193 = load i32, i32* %192, align 8, !tbaa !43
  %194 = add nsw i32 %193, 1
  br label %195

195:                                              ; preds = %191, %183
  %196 = phi i32 [ %185, %183 ], [ %194, %191 ]
  %197 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %173, i64 0, i32 0
  store i32 %196, i32* %197, align 8, !tbaa !358
  %198 = add i32 %196, -1
  %199 = add i32 %198, %158
  %200 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %170, i64 %172, i32 2
  store i32 %199, i32* %200, align 8, !tbaa !356
  %201 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %170, i64 %172, i32 1
  %202 = load i32, i32* %201, align 4, !tbaa !626
  %203 = add nsw i32 %198, %202
  store i32 %203, i32* %201, align 4, !tbaa !626
  br label %204

204:                                              ; preds = %195, %165
  %205 = phi i32 [ %166, %165 ], [ %171, %195 ]
  %206 = add nsw i32 %205, 1
  store i32 %206, i32* %120, align 8, !tbaa !198
  %207 = load i32, i32* %123, align 8, !tbaa !362
  %208 = add nsw i32 %207, 1
  store i32 %208, i32* %123, align 8, !tbaa !362
  br label %209

209:                                              ; preds = %204, %147
  %210 = phi i32 [ %158, %204 ], [ %149, %147 ]
  %211 = phi i8* [ %162, %204 ], [ %148, %147 ]
  %212 = tail call i32 @pi_next(%struct.opj_pi_iterator* nonnull %108) #9
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %215, label %147

214:                                              ; preds = %152, %129, %96, %94, %76
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %32, %struct.opj_cp* %16, i32 %1) #9
  br label %225

215:                                              ; preds = %209, %142
  %216 = phi i32 [ %143, %142 ], [ %210, %209 ]
  %217 = phi i8* [ %144, %142 ], [ %211, %209 ]
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %32, %struct.opj_cp* %16, i32 %1) #9
  %218 = icmp eq i32 %216, -999
  br i1 %218, label %225, label %219

219:                                              ; preds = %215, %111, %49
  %220 = phi i8* [ %50, %49 ], [ %217, %215 ], [ %4, %111 ]
  %221 = ptrtoint i8* %220 to i64
  %222 = ptrtoint i8* %4 to i64
  %223 = sub i64 %221, %222
  %224 = trunc i64 %223 to i32
  br label %225

225:                                              ; preds = %219, %215, %214, %66, %30
  %226 = phi i32 [ %224, %219 ], [ -999, %30 ], [ -999, %215 ], [ -999, %66 ], [ -999, %214 ]
  ret i32 %226
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @t2_encode_packet(%struct.opj_tcd_tile* nocapture readonly, %struct.opj_tcp* nocapture readonly, %struct.opj_pi_iterator* nocapture readonly, i8*, i32, %struct.opj_codestream_info*, i32) unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %2, i64 0, i32 6
  %9 = load i32, i32* %8, align 8, !tbaa !506
  %10 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %2, i64 0, i32 7
  %11 = load i32, i32* %10, align 4, !tbaa !503
  %12 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %2, i64 0, i32 8
  %13 = load i32, i32* %12, align 8, !tbaa !498
  %14 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %2, i64 0, i32 9
  %15 = load i32, i32* %14, align 4, !tbaa !500
  %16 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %0, i64 0, i32 5
  %17 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %16, align 8, !tbaa !543
  %18 = sext i32 %9 to i64
  %19 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %17, i64 %18, i32 5
  %20 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %19, align 8, !tbaa !37
  %21 = sext i32 %11 to i64
  %22 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1, i64 0, i32 1
  %23 = load i32, i32* %22, align 4, !tbaa !218
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %40, label %26

26:                                               ; preds = %7
  store i8 -1, i8* %3, align 1, !tbaa !15
  %27 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 -111, i8* %27, align 1, !tbaa !15
  %28 = getelementptr inbounds i8, i8* %3, i64 2
  store i8 0, i8* %28, align 1, !tbaa !15
  %29 = getelementptr inbounds i8, i8* %3, i64 3
  store i8 4, i8* %29, align 1, !tbaa !15
  %30 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %0, i64 0, i32 9
  %31 = load i32, i32* %30, align 8, !tbaa !362
  %32 = srem i32 %31, 65536
  %33 = sdiv i32 %32, 256
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %3, i64 4
  store i8 %34, i8* %35, align 1, !tbaa !15
  %36 = load i32, i32* %30, align 8, !tbaa !362
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %3, i64 5
  store i8 %37, i8* %38, align 1, !tbaa !15
  %39 = getelementptr inbounds i8, i8* %3, i64 6
  br label %40

40:                                               ; preds = %26, %7
  %41 = phi i8* [ %39, %26 ], [ %3, %7 ]
  %42 = icmp eq i32 %15, 0
  br i1 %42, label %43, label %87

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %21, i32 6
  %45 = load i32, i32* %44, align 8, !tbaa !544
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %87

47:                                               ; preds = %43
  %48 = sext i32 %13 to i64
  br label %49

49:                                               ; preds = %82, %47
  %50 = phi i64 [ 0, %47 ], [ %83, %82 ]
  %51 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %21, i32 7, i64 %50, i32 5
  %52 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %51, align 8, !tbaa !549
  %53 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %52, i64 %48, i32 7
  %54 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %53, align 8, !tbaa !627
  tail call void @tgt_reset(%struct.opj_tgt_tree* %54) #9
  %55 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %52, i64 %48, i32 8
  %56 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %55, align 8, !tbaa !628
  tail call void @tgt_reset(%struct.opj_tgt_tree* %56) #9
  %57 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %52, i64 %48, i32 4
  %58 = load i32, i32* %57, align 8, !tbaa !550
  %59 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %52, i64 %48, i32 5
  %60 = load i32, i32* %59, align 4, !tbaa !552
  %61 = mul nsw i32 %60, %58
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %82

63:                                               ; preds = %49
  %64 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %52, i64 %48, i32 6, i32 0
  %65 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %21, i32 7, i64 %50, i32 6
  br label %66

66:                                               ; preds = %66, %63
  %67 = phi i64 [ 0, %63 ], [ %76, %66 ]
  %68 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %64, align 8, !tbaa !15
  %69 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %68, i64 %67, i32 9
  store i32 0, i32* %69, align 8, !tbaa !629
  %70 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %55, align 8, !tbaa !628
  %71 = load i32, i32* %65, align 8, !tbaa !630
  %72 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %68, i64 %67, i32 7
  %73 = load i32, i32* %72, align 8, !tbaa !579
  %74 = sub nsw i32 %71, %73
  %75 = trunc i64 %67 to i32
  tail call void @tgt_setvalue(%struct.opj_tgt_tree* %70, i32 %75, i32 %74) #9
  %76 = add nuw nsw i64 %67, 1
  %77 = load i32, i32* %57, align 8, !tbaa !550
  %78 = load i32, i32* %59, align 4, !tbaa !552
  %79 = mul nsw i32 %78, %77
  %80 = sext i32 %79 to i64
  %81 = icmp slt i64 %76, %80
  br i1 %81, label %66, label %82

82:                                               ; preds = %66, %49
  %83 = add nuw nsw i64 %50, 1
  %84 = load i32, i32* %44, align 8, !tbaa !544
  %85 = sext i32 %84 to i64
  %86 = icmp slt i64 %83, %85
  br i1 %86, label %49, label %87

87:                                               ; preds = %82, %43, %40
  %88 = tail call %struct.opj_bio* @bio_create() #9
  tail call void @bio_init_enc(%struct.opj_bio* %88, i8* %41, i32 %4) #9
  tail call void @bio_write(%struct.opj_bio* %88, i32 1, i32 1) #9
  %89 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %21, i32 6
  %90 = load i32, i32* %89, align 8, !tbaa !544
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %92, label %321

92:                                               ; preds = %87
  %93 = sext i32 %13 to i64
  %94 = sext i32 %15 to i64
  %95 = add nsw i32 %15, 1
  br label %96

96:                                               ; preds = %316, %92
  %97 = phi i64 [ 0, %92 ], [ %317, %316 ]
  %98 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %21, i32 7, i64 %97, i32 5
  %99 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %98, align 8, !tbaa !549
  %100 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %99, i64 %93, i32 4
  %101 = load i32, i32* %100, align 8, !tbaa !550
  %102 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %99, i64 %93, i32 5
  %103 = load i32, i32* %102, align 4, !tbaa !552
  %104 = mul nsw i32 %103, %101
  %105 = icmp sgt i32 %104, 0
  br i1 %105, label %106, label %316

106:                                              ; preds = %96
  %107 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %99, i64 %93, i32 6, i32 0
  %108 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %99, i64 %93, i32 7
  br label %115

109:                                              ; preds = %134
  %110 = icmp sgt i32 %138, 0
  br i1 %110, label %111, label %316

111:                                              ; preds = %109
  %112 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %99, i64 %93, i32 6, i32 0
  %113 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %99, i64 %93, i32 7
  %114 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %99, i64 %93, i32 8
  br label %141

115:                                              ; preds = %134, %106
  %116 = phi i32 [ %103, %106 ], [ %135, %134 ]
  %117 = phi i32 [ %101, %106 ], [ %136, %134 ]
  %118 = phi i64 [ 0, %106 ], [ %137, %134 ]
  %119 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %107, align 8, !tbaa !15
  %120 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %119, i64 %118, i32 9
  %121 = load i32, i32* %120, align 8, !tbaa !629
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %134

123:                                              ; preds = %115
  %124 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %119, i64 %118, i32 1
  %125 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %124, align 8, !tbaa !631
  %126 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %125, i64 %94, i32 0
  %127 = load i32, i32* %126, align 8, !tbaa !632
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %134, label %129

129:                                              ; preds = %123
  %130 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %108, align 8, !tbaa !627
  %131 = trunc i64 %118 to i32
  tail call void @tgt_setvalue(%struct.opj_tgt_tree* %130, i32 %131, i32 %15) #9
  %132 = load i32, i32* %100, align 8, !tbaa !550
  %133 = load i32, i32* %102, align 4, !tbaa !552
  br label %134

134:                                              ; preds = %129, %123, %115
  %135 = phi i32 [ %116, %123 ], [ %116, %115 ], [ %133, %129 ]
  %136 = phi i32 [ %117, %123 ], [ %117, %115 ], [ %132, %129 ]
  %137 = add nuw nsw i64 %118, 1
  %138 = mul nsw i32 %135, %136
  %139 = sext i32 %138 to i64
  %140 = icmp slt i64 %137, %139
  br i1 %140, label %115, label %109

141:                                              ; preds = %309, %111
  %142 = phi i64 [ 0, %111 ], [ %310, %309 ]
  %143 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %112, align 8, !tbaa !15
  %144 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %143, i64 %142, i32 1
  %145 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %144, align 8, !tbaa !631
  %146 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %145, i64 %94
  %147 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %143, i64 %142, i32 9
  %148 = load i32, i32* %147, align 8, !tbaa !629
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %153

150:                                              ; preds = %141
  %151 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %113, align 8, !tbaa !627
  %152 = trunc i64 %142 to i32
  tail call void @tgt_encode(%struct.opj_bio* %88, %struct.opj_tgt_tree* %151, i32 %152, i32 %95) #9
  br label %158

153:                                              ; preds = %141
  %154 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %146, i64 0, i32 0
  %155 = load i32, i32* %154, align 8, !tbaa !632
  %156 = icmp ne i32 %155, 0
  %157 = zext i1 %156 to i32
  tail call void @bio_write(%struct.opj_bio* %88, i32 %157, i32 1) #9
  br label %158

158:                                              ; preds = %153, %150
  %159 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %146, i64 0, i32 0
  %160 = load i32, i32* %159, align 8, !tbaa !632
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %309, label %162

162:                                              ; preds = %158
  %163 = load i32, i32* %147, align 8, !tbaa !629
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %170

165:                                              ; preds = %162
  %166 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %143, i64 %142, i32 8
  store i32 3, i32* %166, align 4, !tbaa !634
  %167 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %114, align 8, !tbaa !628
  %168 = trunc i64 %142 to i32
  tail call void @tgt_encode(%struct.opj_bio* %88, %struct.opj_tgt_tree* %167, i32 %168, i32 999) #9
  %169 = load i32, i32* %159, align 8, !tbaa !632
  br label %170

170:                                              ; preds = %165, %162
  %171 = phi i32 [ %160, %162 ], [ %169, %165 ]
  switch i32 %171, label %174 [
    i32 1, label %172
    i32 2, label %173
  ]

172:                                              ; preds = %170
  tail call void @bio_write(%struct.opj_bio* %88, i32 0, i32 1) #9
  br label %189

173:                                              ; preds = %170
  tail call void @bio_write(%struct.opj_bio* %88, i32 2, i32 2) #9
  br label %189

174:                                              ; preds = %170
  %175 = icmp slt i32 %171, 6
  br i1 %175, label %176, label %179

176:                                              ; preds = %174
  %177 = add nsw i32 %171, -3
  %178 = or i32 %177, 12
  tail call void @bio_write(%struct.opj_bio* %88, i32 %178, i32 4) #9
  br label %189

179:                                              ; preds = %174
  %180 = icmp slt i32 %171, 37
  br i1 %180, label %181, label %184

181:                                              ; preds = %179
  %182 = add nsw i32 %171, -6
  %183 = or i32 %182, 480
  tail call void @bio_write(%struct.opj_bio* %88, i32 %183, i32 9) #9
  br label %189

184:                                              ; preds = %179
  %185 = icmp slt i32 %171, 165
  br i1 %185, label %186, label %189

186:                                              ; preds = %184
  %187 = add nsw i32 %171, -37
  %188 = or i32 %187, 65408
  tail call void @bio_write(%struct.opj_bio* %88, i32 %188, i32 16) #9
  br label %189

189:                                              ; preds = %186, %184, %181, %176, %173, %172
  %190 = load i32, i32* %147, align 8, !tbaa !629
  %191 = load i32, i32* %159, align 8, !tbaa !632
  %192 = icmp sgt i32 %191, 0
  br i1 %192, label %193, label %253

193:                                              ; preds = %189
  %194 = add nsw i32 %191, %190
  %195 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %143, i64 %142, i32 2
  %196 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %195, align 8, !tbaa !581
  %197 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %143, i64 %142, i32 8
  %198 = sext i32 %190 to i64
  %199 = sext i32 %194 to i64
  %200 = add nsw i32 %194, -1
  br label %201

201:                                              ; preds = %241, %193
  %202 = phi i64 [ %198, %193 ], [ %245, %241 ]
  %203 = phi i32 [ 0, %193 ], [ %244, %241 ]
  %204 = phi i32 [ 0, %193 ], [ %243, %241 ]
  %205 = phi i32 [ 0, %193 ], [ %242, %241 ]
  %206 = add nsw i32 %204, 1
  %207 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %196, i64 %202, i32 3
  %208 = load i32, i32* %207, align 4, !tbaa !588
  %209 = add nsw i32 %208, %205
  %210 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %196, i64 %202, i32 2
  %211 = load i32, i32* %210, align 8, !tbaa !583
  %212 = icmp ne i32 %211, 0
  %213 = trunc i64 %202 to i32
  %214 = icmp eq i32 %200, %213
  %215 = or i1 %214, %212
  br i1 %215, label %216, label %241

216:                                              ; preds = %201
  %217 = icmp sgt i32 %209, 1
  br i1 %217, label %218, label %224

218:                                              ; preds = %218, %216
  %219 = phi i32 [ %222, %218 ], [ 0, %216 ]
  %220 = phi i32 [ %221, %218 ], [ %209, %216 ]
  %221 = lshr i32 %220, 1
  %222 = add nuw nsw i32 %219, 1
  %223 = icmp ugt i32 %220, 3
  br i1 %223, label %218, label %224

224:                                              ; preds = %218, %216
  %225 = phi i32 [ 0, %216 ], [ %222, %218 ]
  %226 = load i32, i32* %197, align 4, !tbaa !634
  %227 = icmp sgt i32 %204, 0
  br i1 %227, label %228, label %234

228:                                              ; preds = %228, %224
  %229 = phi i32 [ %232, %228 ], [ 0, %224 ]
  %230 = phi i32 [ %231, %228 ], [ %206, %224 ]
  %231 = lshr i32 %230, 1
  %232 = add nuw nsw i32 %229, 1
  %233 = icmp ugt i32 %230, 3
  br i1 %233, label %228, label %234

234:                                              ; preds = %228, %224
  %235 = phi i32 [ 0, %224 ], [ %232, %228 ]
  %236 = add i32 %225, 1
  %237 = sub i32 %236, %226
  %238 = sub i32 %237, %235
  %239 = icmp sgt i32 %203, %238
  %240 = select i1 %239, i32 %203, i32 %238
  br label %241

241:                                              ; preds = %234, %201
  %242 = phi i32 [ 0, %234 ], [ %209, %201 ]
  %243 = phi i32 [ 0, %234 ], [ %206, %201 ]
  %244 = phi i32 [ %240, %234 ], [ %203, %201 ]
  %245 = add nsw i64 %202, 1
  %246 = icmp slt i64 %245, %199
  br i1 %246, label %201, label %247

247:                                              ; preds = %241
  %248 = icmp sgt i32 %244, 0
  br i1 %248, label %249, label %253

249:                                              ; preds = %249, %247
  %250 = phi i32 [ %251, %249 ], [ %244, %247 ]
  %251 = add nsw i32 %250, -1
  tail call void @bio_write(%struct.opj_bio* %88, i32 1, i32 1) #9
  %252 = icmp sgt i32 %251, 0
  br i1 %252, label %249, label %253

253:                                              ; preds = %249, %247, %189
  %254 = phi i32 [ %244, %247 ], [ 0, %189 ], [ %244, %249 ]
  %255 = phi i32 [ %243, %247 ], [ 0, %189 ], [ %243, %249 ]
  %256 = phi i32 [ %242, %247 ], [ 0, %189 ], [ %242, %249 ]
  tail call void @bio_write(%struct.opj_bio* %88, i32 0, i32 1) #9
  %257 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %143, i64 %142, i32 8
  %258 = load i32, i32* %257, align 4, !tbaa !634
  %259 = add nsw i32 %258, %254
  store i32 %259, i32* %257, align 4, !tbaa !634
  %260 = load i32, i32* %147, align 8, !tbaa !629
  %261 = load i32, i32* %159, align 8, !tbaa !632
  %262 = icmp sgt i32 %261, 0
  br i1 %262, label %263, label %309

263:                                              ; preds = %253
  %264 = add nsw i32 %261, %260
  %265 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %143, i64 %142, i32 2
  %266 = sext i32 %260 to i64
  br label %267

267:                                              ; preds = %300, %263
  %268 = phi i32 [ %261, %263 ], [ %301, %300 ]
  %269 = phi i32 [ %260, %263 ], [ %302, %300 ]
  %270 = phi i64 [ %266, %263 ], [ %305, %300 ]
  %271 = phi i32 [ %264, %263 ], [ %306, %300 ]
  %272 = phi i32 [ %255, %263 ], [ %304, %300 ]
  %273 = phi i32 [ %256, %263 ], [ %303, %300 ]
  %274 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %265, align 8, !tbaa !581
  %275 = add nsw i32 %272, 1
  %276 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %274, i64 %270, i32 3
  %277 = load i32, i32* %276, align 4, !tbaa !588
  %278 = add nsw i32 %277, %273
  %279 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %274, i64 %270, i32 2
  %280 = load i32, i32* %279, align 8, !tbaa !583
  %281 = icmp ne i32 %280, 0
  %282 = add nsw i32 %271, -1
  %283 = trunc i64 %270 to i32
  %284 = icmp eq i32 %282, %283
  %285 = or i1 %284, %281
  br i1 %285, label %286, label %300

286:                                              ; preds = %267
  %287 = load i32, i32* %257, align 4, !tbaa !634
  %288 = icmp sgt i32 %272, 0
  br i1 %288, label %289, label %295

289:                                              ; preds = %289, %286
  %290 = phi i32 [ %293, %289 ], [ 0, %286 ]
  %291 = phi i32 [ %292, %289 ], [ %275, %286 ]
  %292 = lshr i32 %291, 1
  %293 = add nuw nsw i32 %290, 1
  %294 = icmp ugt i32 %291, 3
  br i1 %294, label %289, label %295

295:                                              ; preds = %289, %286
  %296 = phi i32 [ 0, %286 ], [ %293, %289 ]
  %297 = add nsw i32 %296, %287
  tail call void @bio_write(%struct.opj_bio* %88, i32 %278, i32 %297) #9
  %298 = load i32, i32* %147, align 8, !tbaa !629
  %299 = load i32, i32* %159, align 8, !tbaa !632
  br label %300

300:                                              ; preds = %295, %267
  %301 = phi i32 [ %299, %295 ], [ %268, %267 ]
  %302 = phi i32 [ %298, %295 ], [ %269, %267 ]
  %303 = phi i32 [ 0, %295 ], [ %278, %267 ]
  %304 = phi i32 [ 0, %295 ], [ %275, %267 ]
  %305 = add nsw i64 %270, 1
  %306 = add nsw i32 %301, %302
  %307 = sext i32 %306 to i64
  %308 = icmp slt i64 %305, %307
  br i1 %308, label %267, label %309

309:                                              ; preds = %300, %253, %158
  %310 = add nuw nsw i64 %142, 1
  %311 = load i32, i32* %100, align 8, !tbaa !550
  %312 = load i32, i32* %102, align 4, !tbaa !552
  %313 = mul nsw i32 %312, %311
  %314 = sext i32 %313 to i64
  %315 = icmp slt i64 %310, %314
  br i1 %315, label %141, label %316

316:                                              ; preds = %309, %109, %96
  %317 = add nuw nsw i64 %97, 1
  %318 = load i32, i32* %89, align 8, !tbaa !544
  %319 = sext i32 %318 to i64
  %320 = icmp slt i64 %317, %319
  br i1 %320, label %96, label %321

321:                                              ; preds = %316, %87
  %322 = tail call i32 @bio_flush(%struct.opj_bio* %88) #9
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %325, label %324

324:                                              ; preds = %321
  tail call void @bio_destroy(%struct.opj_bio* %88) #9
  br label %480

325:                                              ; preds = %321
  %326 = tail call i32 @bio_numbytes(%struct.opj_bio* %88) #9
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds i8, i8* %41, i64 %327
  tail call void @bio_destroy(%struct.opj_bio* %88) #9
  %329 = load i32, i32* %22, align 4, !tbaa !218
  %330 = and i32 %329, 4
  %331 = icmp eq i32 %330, 0
  br i1 %331, label %335, label %332

332:                                              ; preds = %325
  store i8 -1, i8* %328, align 1, !tbaa !15
  %333 = getelementptr inbounds i8, i8* %328, i64 1
  store i8 -110, i8* %333, align 1, !tbaa !15
  %334 = getelementptr inbounds i8, i8* %328, i64 2
  br label %335

335:                                              ; preds = %332, %325
  %336 = phi i8* [ %334, %332 ], [ %328, %325 ]
  %337 = icmp ne %struct.opj_codestream_info* %5, null
  br i1 %337, label %338, label %356

338:                                              ; preds = %335
  %339 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 2
  %340 = load i32, i32* %339, align 4, !tbaa !625
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %356, label %342

342:                                              ; preds = %338
  %343 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 21
  %344 = load %struct.opj_tile_info*, %struct.opj_tile_info** %343, align 8, !tbaa !143
  %345 = sext i32 %6 to i64
  %346 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %344, i64 %345, i32 9
  %347 = load %struct.opj_packet_info*, %struct.opj_packet_info** %346, align 8, !tbaa !355
  %348 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 1
  %349 = load i32, i32* %348, align 8, !tbaa !198
  %350 = sext i32 %349 to i64
  %351 = ptrtoint i8* %336 to i64
  %352 = ptrtoint i8* %3 to i64
  %353 = sub i64 %351, %352
  %354 = trunc i64 %353 to i32
  %355 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %347, i64 %350, i32 1
  store i32 %354, i32* %355, align 4, !tbaa !626
  br label %356

356:                                              ; preds = %342, %338, %335
  %357 = load i32, i32* %89, align 8, !tbaa !544
  %358 = icmp sgt i32 %357, 0
  br i1 %358, label %359, label %474

359:                                              ; preds = %356
  %360 = sext i32 %13 to i64
  %361 = sext i32 %15 to i64
  %362 = sext i32 %4 to i64
  %363 = getelementptr inbounds i8, i8* %3, i64 %362
  %364 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 2
  %365 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 21
  %366 = sext i32 %6 to i64
  %367 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 1
  %368 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 0
  br label %369

369:                                              ; preds = %468, %359
  %370 = phi i64 [ 0, %359 ], [ %470, %468 ]
  %371 = phi i8* [ %336, %359 ], [ %469, %468 ]
  %372 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %21, i32 7, i64 %370, i32 5
  %373 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %372, align 8, !tbaa !549
  %374 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %373, i64 %360, i32 4
  %375 = load i32, i32* %374, align 8, !tbaa !550
  %376 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %373, i64 %360, i32 5
  %377 = load i32, i32* %376, align 4, !tbaa !552
  %378 = mul nsw i32 %377, %375
  %379 = icmp sgt i32 %378, 0
  br i1 %379, label %380, label %468

380:                                              ; preds = %369
  %381 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %373, i64 %360, i32 6, i32 0
  br i1 %337, label %382, label %431

382:                                              ; preds = %423, %380
  %383 = phi i64 [ %425, %423 ], [ 0, %380 ]
  %384 = phi i8* [ %424, %423 ], [ %371, %380 ]
  %385 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %381, align 8, !tbaa !15
  %386 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %385, i64 %383, i32 1
  %387 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %386, align 8, !tbaa !631
  %388 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %387, i64 %361, i32 0
  %389 = load i32, i32* %388, align 8, !tbaa !632
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %423, label %391

391:                                              ; preds = %382
  %392 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %387, i64 %361, i32 1
  %393 = load i32, i32* %392, align 4, !tbaa !635
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds i8, i8* %384, i64 %394
  %396 = icmp ugt i8* %395, %363
  br i1 %396, label %480, label %397

397:                                              ; preds = %391
  %398 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %387, i64 %361, i32 3
  %399 = load i8*, i8** %398, align 8, !tbaa !636
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %384, i8* align 1 %399, i64 %394, i1 false)
  %400 = load i32, i32* %388, align 8, !tbaa !632
  %401 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %385, i64 %383, i32 9
  %402 = load i32, i32* %401, align 8, !tbaa !629
  %403 = add nsw i32 %402, %400
  store i32 %403, i32* %401, align 8, !tbaa !629
  %404 = load i32, i32* %392, align 4, !tbaa !635
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds i8, i8* %384, i64 %405
  %407 = load i32, i32* %364, align 4, !tbaa !625
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %423, label %409

409:                                              ; preds = %397
  %410 = load %struct.opj_tile_info*, %struct.opj_tile_info** %365, align 8, !tbaa !143
  %411 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %410, i64 %366, i32 9
  %412 = load %struct.opj_packet_info*, %struct.opj_packet_info** %411, align 8, !tbaa !355
  %413 = load i32, i32* %367, align 8, !tbaa !198
  %414 = sext i32 %413 to i64
  %415 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %387, i64 %361, i32 2
  %416 = load double, double* %415, align 8, !tbaa !637
  %417 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %412, i64 %414, i32 3
  %418 = load double, double* %417, align 8, !tbaa !638
  %419 = fadd double %416, %418
  store double %419, double* %417, align 8, !tbaa !638
  %420 = load double, double* %368, align 8, !tbaa !330
  %421 = fcmp olt double %420, %419
  br i1 %421, label %422, label %423

422:                                              ; preds = %409
  store double %419, double* %368, align 8, !tbaa !330
  br label %423

423:                                              ; preds = %422, %409, %397, %382
  %424 = phi i8* [ %406, %397 ], [ %406, %422 ], [ %406, %409 ], [ %384, %382 ]
  %425 = add nuw nsw i64 %383, 1
  %426 = load i32, i32* %374, align 8, !tbaa !550
  %427 = load i32, i32* %376, align 4, !tbaa !552
  %428 = mul nsw i32 %427, %426
  %429 = sext i32 %428 to i64
  %430 = icmp slt i64 %425, %429
  br i1 %430, label %382, label %468

431:                                              ; preds = %460, %380
  %432 = phi i32 [ %461, %460 ], [ %377, %380 ]
  %433 = phi i32 [ %462, %460 ], [ %375, %380 ]
  %434 = phi i64 [ %464, %460 ], [ 0, %380 ]
  %435 = phi i8* [ %463, %460 ], [ %371, %380 ]
  %436 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %381, align 8, !tbaa !15
  %437 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %436, i64 %434, i32 1
  %438 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %437, align 8, !tbaa !631
  %439 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %438, i64 %361, i32 0
  %440 = load i32, i32* %439, align 8, !tbaa !632
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %460, label %442

442:                                              ; preds = %431
  %443 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %438, i64 %361, i32 1
  %444 = load i32, i32* %443, align 4, !tbaa !635
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds i8, i8* %435, i64 %445
  %447 = icmp ugt i8* %446, %363
  br i1 %447, label %480, label %448

448:                                              ; preds = %442
  %449 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %438, i64 %361, i32 3
  %450 = load i8*, i8** %449, align 8, !tbaa !636
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %435, i8* align 1 %450, i64 %445, i1 false)
  %451 = load i32, i32* %439, align 8, !tbaa !632
  %452 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %436, i64 %434, i32 9
  %453 = load i32, i32* %452, align 8, !tbaa !629
  %454 = add nsw i32 %453, %451
  store i32 %454, i32* %452, align 8, !tbaa !629
  %455 = load i32, i32* %443, align 4, !tbaa !635
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds i8, i8* %435, i64 %456
  %458 = load i32, i32* %374, align 8, !tbaa !550
  %459 = load i32, i32* %376, align 4, !tbaa !552
  br label %460

460:                                              ; preds = %448, %431
  %461 = phi i32 [ %459, %448 ], [ %432, %431 ]
  %462 = phi i32 [ %458, %448 ], [ %433, %431 ]
  %463 = phi i8* [ %457, %448 ], [ %435, %431 ]
  %464 = add nuw nsw i64 %434, 1
  %465 = mul nsw i32 %461, %462
  %466 = sext i32 %465 to i64
  %467 = icmp slt i64 %464, %466
  br i1 %467, label %431, label %468

468:                                              ; preds = %460, %423, %369
  %469 = phi i8* [ %371, %369 ], [ %424, %423 ], [ %463, %460 ]
  %470 = add nuw nsw i64 %370, 1
  %471 = load i32, i32* %89, align 8, !tbaa !544
  %472 = sext i32 %471 to i64
  %473 = icmp slt i64 %470, %472
  br i1 %473, label %369, label %474

474:                                              ; preds = %468, %356
  %475 = phi i8* [ %336, %356 ], [ %469, %468 ]
  %476 = ptrtoint i8* %475 to i64
  %477 = ptrtoint i8* %3 to i64
  %478 = sub i64 %476, %477
  %479 = trunc i64 %478 to i32
  br label %480

480:                                              ; preds = %474, %442, %391, %324
  %481 = phi i32 [ -999, %324 ], [ %479, %474 ], [ -999, %391 ], [ -999, %442 ]
  ret i32 %481
}

; Function Attrs: nounwind uwtable
define i32 @t2_decode_packets(%struct.opj_t2* nocapture readonly, i8*, i32, i32, %struct.opj_tcd_tile* nocapture readonly, %struct.opj_codestream_info*) #0 {
  %7 = getelementptr inbounds %struct.opj_t2, %struct.opj_t2* %0, i64 0, i32 1
  %8 = load %struct.opj_image*, %struct.opj_image** %7, align 8, !tbaa !621
  %9 = getelementptr inbounds %struct.opj_t2, %struct.opj_t2* %0, i64 0, i32 2
  %10 = load %struct.opj_cp*, %struct.opj_cp** %9, align 8, !tbaa !623
  %11 = tail call %struct.opj_pi_iterator* @pi_create_decode(%struct.opj_image* %8, %struct.opj_cp* %10, i32 %3) #9
  %12 = icmp eq %struct.opj_pi_iterator* %11, null
  br i1 %12, label %829, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %10, i64 0, i32 28
  %15 = load %struct.opj_tcp*, %struct.opj_tcp** %14, align 8, !tbaa !139
  %16 = sext i32 %3 to i64
  %17 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %15, i64 %16, i32 6
  %18 = load i32, i32* %17, align 4, !tbaa !140
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %805, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %10, i64 0, i32 11
  %22 = icmp eq %struct.opj_codestream_info* %5, null
  %23 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 21
  %24 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 1
  %25 = sext i32 %2 to i64
  %26 = getelementptr inbounds i8, i8* %1, i64 %25
  %27 = ptrtoint i8* %26 to i64
  %28 = getelementptr %struct.opj_tcd_tile, %struct.opj_tcd_tile* %4, i64 0, i32 5
  %29 = getelementptr inbounds %struct.opj_t2, %struct.opj_t2* %0, i64 0, i32 0
  %30 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %8, i64 0, i32 6
  %31 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %10, i64 0, i32 4
  br label %32

32:                                               ; preds = %794, %20
  %33 = phi i64 [ %799, %794 ], [ 0, %20 ]
  %34 = phi i8* [ %798, %794 ], [ %1, %20 ]
  %35 = phi i32 [ %797, %794 ], [ 0, %20 ]
  %36 = phi i32 [ %796, %794 ], [ 0, %20 ]
  %37 = phi i32 [ %795, %794 ], [ 0, %20 ]
  %38 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %11, i64 %33
  %39 = tail call i32 @pi_next(%struct.opj_pi_iterator* nonnull %38) #9
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %794, label %41

41:                                               ; preds = %32
  %42 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %11, i64 %33, i32 9
  %43 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %11, i64 %33, i32 6
  %44 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %11, i64 %33, i32 7
  %45 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %11, i64 %33, i32 8
  br label %46

46:                                               ; preds = %787, %41
  %47 = phi i8* [ %34, %41 ], [ %791, %787 ]
  %48 = phi i32 [ %36, %41 ], [ %789, %787 ]
  %49 = phi i32 [ %37, %41 ], [ %788, %787 ]
  %50 = load i32, i32* %21, align 8, !tbaa !170
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %55, label %52

52:                                               ; preds = %46
  %53 = load i32, i32* %42, align 4, !tbaa !500
  %54 = icmp sgt i32 %50, %53
  br i1 %54, label %55, label %721

55:                                               ; preds = %52, %46
  br i1 %22, label %63, label %56

56:                                               ; preds = %55
  %57 = load %struct.opj_tile_info*, %struct.opj_tile_info** %23, align 8, !tbaa !143
  %58 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %57, i64 %16, i32 9
  %59 = load %struct.opj_packet_info*, %struct.opj_packet_info** %58, align 8, !tbaa !355
  %60 = load i32, i32* %24, align 8, !tbaa !198
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %59, i64 %61
  br label %63

63:                                               ; preds = %56, %55
  %64 = phi %struct.opj_packet_info* [ %62, %56 ], [ null, %55 ]
  %65 = ptrtoint i8* %47 to i64
  %66 = sub i64 %27, %65
  %67 = load %struct.opj_tcp*, %struct.opj_tcp** %14, align 8, !tbaa !139
  %68 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %28, align 8, !tbaa !543
  %69 = load %struct.opj_cp*, %struct.opj_cp** %9, align 8, !tbaa !623
  %70 = load i32, i32* %43, align 8, !tbaa !506
  %71 = load i32, i32* %44, align 4, !tbaa !503
  %72 = load i32, i32* %45, align 8, !tbaa !498
  %73 = load i32, i32* %42, align 4, !tbaa !500
  %74 = sext i32 %70 to i64
  %75 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %68, i64 %74, i32 5
  %76 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %75, align 8, !tbaa !37
  %77 = sext i32 %71 to i64
  %78 = icmp eq i32 %73, 0
  br i1 %78, label %79, label %153

79:                                               ; preds = %63
  %80 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 6
  %81 = load i32, i32* %80, align 8, !tbaa !544
  %82 = icmp sgt i32 %81, 0
  br i1 %82, label %83, label %153

83:                                               ; preds = %79
  %84 = sext i32 %72 to i64
  br label %85

85:                                               ; preds = %148, %83
  %86 = phi i64 [ 0, %83 ], [ %149, %148 ]
  %87 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %86, i32 5
  %88 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %87, align 8, !tbaa !549
  %89 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %86, i32 2
  %90 = load i32, i32* %89, align 8, !tbaa !639
  %91 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %86, i32 0
  %92 = load i32, i32* %91, align 8, !tbaa !555
  %93 = icmp eq i32 %90, %92
  br i1 %93, label %148, label %94

94:                                               ; preds = %85
  %95 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %86, i32 3
  %96 = load i32, i32* %95, align 4, !tbaa !640
  %97 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %86, i32 1
  %98 = load i32, i32* %97, align 4, !tbaa !557
  %99 = icmp eq i32 %96, %98
  br i1 %99, label %148, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %88, i64 %84, i32 7
  %102 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %101, align 8, !tbaa !627
  tail call void @tgt_reset(%struct.opj_tgt_tree* %102) #9
  %103 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %88, i64 %84, i32 8
  %104 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %103, align 8, !tbaa !628
  tail call void @tgt_reset(%struct.opj_tgt_tree* %104) #9
  %105 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %88, i64 %84, i32 4
  %106 = load i32, i32* %105, align 8, !tbaa !550
  %107 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %88, i64 %84, i32 5
  %108 = load i32, i32* %107, align 4, !tbaa !552
  %109 = mul nsw i32 %108, %106
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %111, label %148

111:                                              ; preds = %100
  %112 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %88, i64 %84, i32 6
  %113 = bitcast %union.anon* %112 to %struct.opj_tcd_cblk_dec**
  %114 = sext i32 %109 to i64
  %115 = add nsw i64 %114, -1
  %116 = and i64 %114, 3
  %117 = icmp ult i64 %115, 3
  br i1 %117, label %137, label %118

118:                                              ; preds = %111
  %119 = sub nsw i64 %114, %116
  br label %120

120:                                              ; preds = %120, %118
  %121 = phi i64 [ 0, %118 ], [ %134, %120 ]
  %122 = phi i64 [ %119, %118 ], [ %135, %120 ]
  %123 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %113, align 8, !tbaa !15
  %124 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %123, i64 %121, i32 10
  store i32 0, i32* %124, align 8, !tbaa !595
  %125 = or i64 %121, 1
  %126 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %113, align 8, !tbaa !15
  %127 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %126, i64 %125, i32 10
  store i32 0, i32* %127, align 8, !tbaa !595
  %128 = or i64 %121, 2
  %129 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %113, align 8, !tbaa !15
  %130 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %129, i64 %128, i32 10
  store i32 0, i32* %130, align 8, !tbaa !595
  %131 = or i64 %121, 3
  %132 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %113, align 8, !tbaa !15
  %133 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %132, i64 %131, i32 10
  store i32 0, i32* %133, align 8, !tbaa !595
  %134 = add nuw nsw i64 %121, 4
  %135 = add i64 %122, -4
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %120

137:                                              ; preds = %120, %111
  %138 = phi i64 [ 0, %111 ], [ %134, %120 ]
  %139 = icmp eq i64 %116, 0
  br i1 %139, label %148, label %140

140:                                              ; preds = %140, %137
  %141 = phi i64 [ %145, %140 ], [ %138, %137 ]
  %142 = phi i64 [ %146, %140 ], [ %116, %137 ]
  %143 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %113, align 8, !tbaa !15
  %144 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %143, i64 %141, i32 10
  store i32 0, i32* %144, align 8, !tbaa !595
  %145 = add nuw nsw i64 %141, 1
  %146 = add i64 %142, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %140, !llvm.loop !641

148:                                              ; preds = %140, %137, %100, %94, %85
  %149 = add nuw nsw i64 %86, 1
  %150 = load i32, i32* %80, align 8, !tbaa !544
  %151 = sext i32 %150 to i64
  %152 = icmp slt i64 %149, %151
  br i1 %152, label %85, label %153

153:                                              ; preds = %148, %79, %63
  %154 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %67, i64 %16, i32 1
  %155 = load i32, i32* %154, align 4, !tbaa !218
  %156 = and i32 %155, 2
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %170, label %158

158:                                              ; preds = %153
  %159 = load i8, i8* %47, align 1, !tbaa !15
  %160 = icmp eq i8 %159, -1
  br i1 %160, label %161, label %165

161:                                              ; preds = %158
  %162 = getelementptr inbounds i8, i8* %47, i64 1
  %163 = load i8, i8* %162, align 1, !tbaa !15
  %164 = icmp eq i8 %163, -111
  br i1 %164, label %168, label %165

165:                                              ; preds = %161, %158
  %166 = load %struct.opj_common_struct*, %struct.opj_common_struct** %29, align 8, !tbaa !624
  %167 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %166, i32 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1.51, i64 0, i64 0)) #9
  br label %170

168:                                              ; preds = %161
  %169 = getelementptr inbounds i8, i8* %47, i64 6
  br label %170

170:                                              ; preds = %168, %165, %153
  %171 = phi i8* [ %47, %165 ], [ %169, %168 ], [ %47, %153 ]
  %172 = tail call %struct.opj_bio* @bio_create() #9
  %173 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %69, i64 0, i32 24
  %174 = load i32, i32* %173, align 8, !tbaa !232
  %175 = icmp eq i32 %174, 1
  br i1 %175, label %176, label %181

176:                                              ; preds = %170
  %177 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %69, i64 0, i32 22
  %178 = load i8*, i8** %177, align 8, !tbaa !235
  %179 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %69, i64 0, i32 27
  %180 = load i32, i32* %179, align 4, !tbaa !236
  tail call void @bio_init_dec(%struct.opj_bio* %172, i8* %178, i32 %180) #9
  br label %198

181:                                              ; preds = %170
  %182 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %67, i64 %16, i32 11
  %183 = load i32, i32* %182, align 8, !tbaa !237
  %184 = icmp eq i32 %183, 1
  br i1 %184, label %185, label %190

185:                                              ; preds = %181
  %186 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %67, i64 %16, i32 9
  %187 = load i8*, i8** %186, align 8, !tbaa !238
  %188 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %67, i64 %16, i32 13
  %189 = load i32, i32* %188, align 8, !tbaa !642
  tail call void @bio_init_dec(%struct.opj_bio* %172, i8* %187, i32 %189) #9
  br label %198

190:                                              ; preds = %181
  %191 = shl i64 %66, 32
  %192 = ashr exact i64 %191, 32
  %193 = getelementptr inbounds i8, i8* %47, i64 %192
  %194 = ptrtoint i8* %193 to i64
  %195 = ptrtoint i8* %171 to i64
  %196 = sub i64 %194, %195
  %197 = trunc i64 %196 to i32
  tail call void @bio_init_dec(%struct.opj_bio* %172, i8* %171, i32 %197) #9
  br label %198

198:                                              ; preds = %190, %185, %176
  %199 = phi i8* [ %178, %176 ], [ %187, %185 ], [ %171, %190 ]
  %200 = tail call i32 @bio_read(%struct.opj_bio* %172, i32 1) #9
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %210, label %202

202:                                              ; preds = %198
  %203 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 6
  %204 = load i32, i32* %203, align 8, !tbaa !544
  %205 = icmp sgt i32 %204, 0
  br i1 %205, label %206, label %501

206:                                              ; preds = %202
  %207 = sext i32 %72 to i64
  %208 = add nsw i32 %73, 1
  %209 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %67, i64 %16, i32 15
  br label %264

210:                                              ; preds = %198
  %211 = tail call i32 @bio_inalign(%struct.opj_bio* %172) #9
  %212 = tail call i32 @bio_numbytes(%struct.opj_bio* %172) #9
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %199, i64 %213
  tail call void @bio_destroy(%struct.opj_bio* %172) #9
  %215 = load i32, i32* %154, align 4, !tbaa !218
  %216 = and i32 %215, 4
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %229, label %218

218:                                              ; preds = %210
  %219 = load i8, i8* %214, align 1, !tbaa !15
  %220 = icmp eq i8 %219, -1
  br i1 %220, label %221, label %225

221:                                              ; preds = %218
  %222 = getelementptr inbounds i8, i8* %214, i64 1
  %223 = load i8, i8* %222, align 1, !tbaa !15
  %224 = icmp eq i8 %223, -110
  br i1 %224, label %227, label %225

225:                                              ; preds = %221, %218
  %226 = tail call i32 @puts(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str.52, i64 0, i64 0)) #9
  br label %229

227:                                              ; preds = %221
  %228 = getelementptr inbounds i8, i8* %214, i64 2
  br label %229

229:                                              ; preds = %227, %225, %210
  %230 = phi i8* [ %214, %225 ], [ %228, %227 ], [ %214, %210 ]
  %231 = icmp eq %struct.opj_packet_info* %64, null
  br i1 %231, label %237, label %232

232:                                              ; preds = %229
  %233 = ptrtoint i8* %171 to i64
  %234 = sub i64 %233, %65
  %235 = trunc i64 %234 to i32
  %236 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %64, i64 0, i32 1
  store i32 %235, i32* %236, align 4, !tbaa !626
  br label %237

237:                                              ; preds = %232, %229
  %238 = load i32, i32* %173, align 8, !tbaa !232
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %240, label %250

240:                                              ; preds = %237
  %241 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %69, i64 0, i32 22
  %242 = bitcast i8** %241 to i64*
  %243 = load i64, i64* %242, align 8, !tbaa !235
  %244 = ptrtoint i8* %230 to i64
  %245 = sub i64 %243, %244
  %246 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %69, i64 0, i32 27
  %247 = load i32, i32* %246, align 4, !tbaa !236
  %248 = trunc i64 %245 to i32
  %249 = add i32 %247, %248
  store i32 %249, i32* %246, align 4, !tbaa !236
  store i8* %230, i8** %241, align 8, !tbaa !235
  br label %704

250:                                              ; preds = %237
  %251 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %67, i64 %16, i32 11
  %252 = load i32, i32* %251, align 8, !tbaa !237
  %253 = icmp eq i32 %252, 1
  br i1 %253, label %254, label %704

254:                                              ; preds = %250
  %255 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %67, i64 %16, i32 9
  %256 = bitcast i8** %255 to i64*
  %257 = load i64, i64* %256, align 8, !tbaa !238
  %258 = ptrtoint i8* %230 to i64
  %259 = sub i64 %257, %258
  %260 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %67, i64 %16, i32 13
  %261 = load i32, i32* %260, align 8, !tbaa !642
  %262 = trunc i64 %259 to i32
  %263 = add i32 %261, %262
  store i32 %263, i32* %260, align 8, !tbaa !642
  store i8* %230, i8** %255, align 8, !tbaa !238
  br label %704

264:                                              ; preds = %496, %206
  %265 = phi i32 [ %204, %206 ], [ %497, %496 ]
  %266 = phi i64 [ 0, %206 ], [ %498, %496 ]
  %267 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %266, i32 5
  %268 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %267, align 8, !tbaa !549
  %269 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %266, i32 2
  %270 = load i32, i32* %269, align 8, !tbaa !639
  %271 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %266, i32 0
  %272 = load i32, i32* %271, align 8, !tbaa !555
  %273 = icmp eq i32 %270, %272
  br i1 %273, label %496, label %274

274:                                              ; preds = %264
  %275 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %266, i32 3
  %276 = load i32, i32* %275, align 4, !tbaa !640
  %277 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %266, i32 1
  %278 = load i32, i32* %277, align 4, !tbaa !557
  %279 = icmp eq i32 %276, %278
  br i1 %279, label %496, label %280

280:                                              ; preds = %274
  %281 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %268, i64 %207, i32 4
  %282 = load i32, i32* %281, align 8, !tbaa !550
  %283 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %268, i64 %207, i32 5
  %284 = load i32, i32* %283, align 4, !tbaa !552
  %285 = mul nsw i32 %284, %282
  %286 = icmp sgt i32 %285, 0
  br i1 %286, label %287, label %496

287:                                              ; preds = %280
  %288 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %268, i64 %207, i32 6
  %289 = bitcast %union.anon* %288 to %struct.opj_tcd_cblk_dec**
  %290 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %268, i64 %207, i32 7
  %291 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %268, i64 %207, i32 8
  %292 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %266, i32 6
  br label %293

293:                                              ; preds = %487, %287
  %294 = phi i64 [ 0, %287 ], [ %488, %487 ]
  %295 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %289, align 8, !tbaa !15
  %296 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %295, i64 %294, i32 10
  %297 = load i32, i32* %296, align 8, !tbaa !595
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %299, label %303

299:                                              ; preds = %293
  %300 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %290, align 8, !tbaa !627
  %301 = trunc i64 %294 to i32
  %302 = tail call i32 @tgt_decode(%struct.opj_bio* %172, %struct.opj_tgt_tree* %300, i32 %301, i32 %208) #9
  br label %305

303:                                              ; preds = %293
  %304 = tail call i32 @bio_read(%struct.opj_bio* %172, i32 1) #9
  br label %305

305:                                              ; preds = %303, %299
  %306 = phi i32 [ %304, %303 ], [ %302, %299 ]
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %308, label %310

308:                                              ; preds = %305
  %309 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %295, i64 %294, i32 9
  store i32 0, i32* %309, align 4, !tbaa !643
  br label %487

310:                                              ; preds = %305
  %311 = load i32, i32* %296, align 8, !tbaa !595
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %327

313:                                              ; preds = %310
  %314 = trunc i64 %294 to i32
  br label %315

315:                                              ; preds = %315, %313
  %316 = phi i32 [ %320, %315 ], [ 0, %313 ]
  %317 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %291, align 8, !tbaa !628
  %318 = tail call i32 @tgt_decode(%struct.opj_bio* %172, %struct.opj_tgt_tree* %317, i32 %314, i32 %316) #9
  %319 = icmp eq i32 %318, 0
  %320 = add nuw nsw i32 %316, 1
  br i1 %319, label %315, label %321

321:                                              ; preds = %315
  %322 = load i32, i32* %292, align 8, !tbaa !630
  %323 = sub nsw i32 1, %316
  %324 = add i32 %323, %322
  %325 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %295, i64 %294, i32 6
  store i32 %324, i32* %325, align 8, !tbaa !594
  %326 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %295, i64 %294, i32 7
  store i32 3, i32* %326, align 4, !tbaa !644
  br label %327

327:                                              ; preds = %321, %310
  %328 = tail call i32 @bio_read(%struct.opj_bio* %172, i32 1) #9
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %346, label %330

330:                                              ; preds = %327
  %331 = tail call i32 @bio_read(%struct.opj_bio* %172, i32 1) #9
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %346, label %333

333:                                              ; preds = %330
  %334 = tail call i32 @bio_read(%struct.opj_bio* %172, i32 2) #9
  %335 = icmp eq i32 %334, 3
  br i1 %335, label %338, label %336

336:                                              ; preds = %333
  %337 = add nsw i32 %334, 3
  br label %346

338:                                              ; preds = %333
  %339 = tail call i32 @bio_read(%struct.opj_bio* %172, i32 5) #9
  %340 = icmp eq i32 %339, 31
  br i1 %340, label %343, label %341

341:                                              ; preds = %338
  %342 = add nsw i32 %339, 6
  br label %346

343:                                              ; preds = %338
  %344 = tail call i32 @bio_read(%struct.opj_bio* %172, i32 7) #9
  %345 = add nsw i32 %344, 37
  br label %346

346:                                              ; preds = %343, %341, %336, %330, %327
  %347 = phi i32 [ %337, %336 ], [ %342, %341 ], [ %345, %343 ], [ 1, %327 ], [ 2, %330 ]
  %348 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %295, i64 %294, i32 9
  store i32 %347, i32* %348, align 4, !tbaa !643
  br label %349

349:                                              ; preds = %349, %346
  %350 = phi i32 [ 0, %346 ], [ %353, %349 ]
  %351 = tail call i32 @bio_read(%struct.opj_bio* %172, i32 1) #9
  %352 = icmp eq i32 %351, 0
  %353 = add nuw nsw i32 %350, 1
  br i1 %352, label %354, label %349

354:                                              ; preds = %349
  %355 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %295, i64 %294, i32 7
  %356 = load i32, i32* %355, align 4, !tbaa !644
  %357 = add nsw i32 %356, %350
  store i32 %357, i32* %355, align 4, !tbaa !644
  %358 = load i32, i32* %296, align 8, !tbaa !595
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %360, label %380

360:                                              ; preds = %354
  %361 = load %struct.opj_tccp*, %struct.opj_tccp** %209, align 8, !tbaa !162
  %362 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %361, i64 %74, i32 4
  %363 = load i32, i32* %362, align 4, !tbaa !243
  %364 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %295, i64 %294, i32 1
  %365 = bitcast %struct.opj_tcd_seg** %364 to i8**
  %366 = load i8*, i8** %365, align 8, !tbaa !596
  %367 = tail call i8* @realloc(i8* %366, i64 32) #9
  store i8* %367, i8** %365, align 8, !tbaa !596
  %368 = and i32 %363, 4
  %369 = icmp eq i32 %368, 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %367, i8 0, i64 20, i1 false) #9
  br i1 %369, label %373, label %370

370:                                              ; preds = %360
  %371 = getelementptr inbounds i8, i8* %367, i64 20
  %372 = bitcast i8* %371 to i32*
  store i32 1, i32* %372, align 4, !tbaa !645
  br label %424

373:                                              ; preds = %360
  %374 = and i32 %363, 1
  %375 = icmp eq i32 %374, 0
  %376 = getelementptr inbounds i8, i8* %367, i64 20
  %377 = bitcast i8* %376 to i32*
  br i1 %375, label %379, label %378

378:                                              ; preds = %373
  store i32 10, i32* %377, align 4, !tbaa !645
  br label %424

379:                                              ; preds = %373
  store i32 109, i32* %377, align 4, !tbaa !645
  br label %424

380:                                              ; preds = %354
  %381 = add nsw i32 %358, -1
  %382 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %295, i64 %294, i32 1
  %383 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %382, align 8, !tbaa !596
  %384 = sext i32 %381 to i64
  %385 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %383, i64 %384, i32 2
  %386 = load i32, i32* %385, align 4, !tbaa !601
  %387 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %383, i64 %384, i32 4
  %388 = load i32, i32* %387, align 4, !tbaa !645
  %389 = icmp eq i32 %386, %388
  br i1 %389, label %392, label %390

390:                                              ; preds = %380
  %391 = bitcast %struct.opj_tcd_seg** %382 to i8**
  br label %424

392:                                              ; preds = %380
  %393 = bitcast %struct.opj_tcd_seg* %383 to i8*
  %394 = load %struct.opj_tccp*, %struct.opj_tccp** %209, align 8, !tbaa !162
  %395 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %394, i64 %74, i32 4
  %396 = load i32, i32* %395, align 4, !tbaa !243
  %397 = bitcast %struct.opj_tcd_seg** %382 to i8**
  %398 = add nsw i32 %358, 1
  %399 = sext i32 %398 to i64
  %400 = shl nsw i64 %399, 5
  %401 = tail call i8* @realloc(i8* %393, i64 %400) #9
  %402 = bitcast i8* %401 to %struct.opj_tcd_seg*
  store i8* %401, i8** %397, align 8, !tbaa !596
  %403 = sext i32 %358 to i64
  %404 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %402, i64 %403
  %405 = and i32 %396, 4
  %406 = icmp eq i32 %405, 0
  %407 = bitcast %struct.opj_tcd_seg* %404 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %407, i8 0, i64 20, i1 false) #9
  br i1 %406, label %410, label %408

408:                                              ; preds = %392
  %409 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %402, i64 %403, i32 4
  store i32 1, i32* %409, align 4, !tbaa !645
  br label %424

410:                                              ; preds = %392
  %411 = and i32 %396, 1
  %412 = icmp eq i32 %411, 0
  br i1 %412, label %422, label %413

413:                                              ; preds = %410
  %414 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %404, i64 -1
  %415 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %414, i64 0, i32 4
  %416 = load i32, i32* %415, align 4, !tbaa !645
  %417 = icmp eq i32 %416, 1
  %418 = icmp eq i32 %416, 10
  %419 = or i1 %417, %418
  %420 = select i1 %419, i32 2, i32 1
  %421 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %402, i64 %403, i32 4
  store i32 %420, i32* %421, align 4, !tbaa !645
  br label %424

422:                                              ; preds = %410
  %423 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %402, i64 %403, i32 4
  store i32 109, i32* %423, align 4, !tbaa !645
  br label %424

424:                                              ; preds = %422, %413, %408, %390, %379, %378, %370
  %425 = phi i8** [ %391, %390 ], [ %397, %422 ], [ %397, %413 ], [ %397, %408 ], [ %365, %379 ], [ %365, %378 ], [ %365, %370 ]
  %426 = phi i32 [ %381, %390 ], [ %358, %422 ], [ %358, %413 ], [ %358, %408 ], [ 0, %379 ], [ 0, %378 ], [ 0, %370 ]
  %427 = load i32, i32* %348, align 4, !tbaa !643
  %428 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %295, i64 %294, i32 1
  %429 = sext i32 %426 to i64
  br label %430

430:                                              ; preds = %484, %424
  %431 = phi i64 [ %462, %484 ], [ %429, %424 ]
  %432 = phi i32 [ %458, %484 ], [ %427, %424 ]
  %433 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %428, align 8, !tbaa !596
  %434 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %433, i64 %431, i32 4
  %435 = load i32, i32* %434, align 4, !tbaa !645
  %436 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %433, i64 %431, i32 2
  %437 = load i32, i32* %436, align 4, !tbaa !601
  %438 = sub nsw i32 %435, %437
  %439 = icmp slt i32 %438, %432
  %440 = select i1 %439, i32 %438, i32 %432
  %441 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %433, i64 %431, i32 5
  store i32 %440, i32* %441, align 8, !tbaa !646
  %442 = load i32, i32* %355, align 4, !tbaa !644
  %443 = icmp sgt i32 %440, 1
  br i1 %443, label %444, label %450

444:                                              ; preds = %444, %430
  %445 = phi i32 [ %448, %444 ], [ 0, %430 ]
  %446 = phi i32 [ %447, %444 ], [ %440, %430 ]
  %447 = lshr i32 %446, 1
  %448 = add nuw nsw i32 %445, 1
  %449 = icmp ugt i32 %446, 3
  br i1 %449, label %444, label %450

450:                                              ; preds = %444, %430
  %451 = phi i32 [ 0, %430 ], [ %448, %444 ]
  %452 = add nsw i32 %451, %442
  %453 = tail call i32 @bio_read(%struct.opj_bio* %172, i32 %452) #9
  %454 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %428, align 8, !tbaa !596
  %455 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %454, i64 %431, i32 6
  store i32 %453, i32* %455, align 4, !tbaa !647
  %456 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %454, i64 %431, i32 5
  %457 = load i32, i32* %456, align 8, !tbaa !646
  %458 = sub nsw i32 %432, %457
  %459 = icmp sgt i32 %458, 0
  br i1 %459, label %460, label %487

460:                                              ; preds = %450
  %461 = bitcast %struct.opj_tcd_seg* %454 to i8*
  %462 = add i64 %431, 1
  %463 = load %struct.opj_tccp*, %struct.opj_tccp** %209, align 8, !tbaa !162
  %464 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %463, i64 %74, i32 4
  %465 = load i32, i32* %464, align 4, !tbaa !243
  %466 = shl i64 %431, 5
  %467 = add i64 %466, 64
  %468 = tail call i8* @realloc(i8* %461, i64 %467) #9
  %469 = bitcast i8* %468 to %struct.opj_tcd_seg*
  store i8* %468, i8** %425, align 8, !tbaa !596
  %470 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %469, i64 %462
  %471 = and i32 %465, 4
  %472 = icmp eq i32 %471, 0
  %473 = bitcast %struct.opj_tcd_seg* %470 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %473, i8 0, i64 20, i1 false) #9
  br i1 %472, label %474, label %484

474:                                              ; preds = %460
  %475 = and i32 %465, 1
  %476 = icmp eq i32 %475, 0
  br i1 %476, label %484, label %477

477:                                              ; preds = %474
  %478 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %469, i64 %431, i32 4
  %479 = load i32, i32* %478, align 4, !tbaa !645
  %480 = icmp eq i32 %479, 1
  %481 = icmp eq i32 %479, 10
  %482 = or i1 %480, %481
  %483 = select i1 %482, i32 2, i32 1
  br label %484

484:                                              ; preds = %477, %474, %460
  %485 = phi i32 [ %483, %477 ], [ 1, %460 ], [ 109, %474 ]
  %486 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %469, i64 %462, i32 4
  store i32 %485, i32* %486, align 4, !tbaa !645
  br label %430

487:                                              ; preds = %450, %308
  %488 = add nuw nsw i64 %294, 1
  %489 = load i32, i32* %281, align 8, !tbaa !550
  %490 = load i32, i32* %283, align 4, !tbaa !552
  %491 = mul nsw i32 %490, %489
  %492 = sext i32 %491 to i64
  %493 = icmp slt i64 %488, %492
  br i1 %493, label %293, label %494

494:                                              ; preds = %487
  %495 = load i32, i32* %203, align 8, !tbaa !544
  br label %496

496:                                              ; preds = %494, %280, %274, %264
  %497 = phi i32 [ %495, %494 ], [ %265, %280 ], [ %265, %264 ], [ %265, %274 ]
  %498 = add nuw nsw i64 %266, 1
  %499 = sext i32 %497 to i64
  %500 = icmp slt i64 %498, %499
  br i1 %500, label %264, label %501

501:                                              ; preds = %496, %202
  %502 = tail call i32 @bio_inalign(%struct.opj_bio* %172) #9
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %505, label %504

504:                                              ; preds = %501
  tail call void @bio_destroy(%struct.opj_bio* %172) #9
  br label %829

505:                                              ; preds = %501
  %506 = tail call i32 @bio_numbytes(%struct.opj_bio* %172) #9
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds i8, i8* %199, i64 %507
  tail call void @bio_destroy(%struct.opj_bio* %172) #9
  %509 = load i32, i32* %154, align 4, !tbaa !218
  %510 = and i32 %509, 4
  %511 = icmp eq i32 %510, 0
  br i1 %511, label %524, label %512

512:                                              ; preds = %505
  %513 = load i8, i8* %508, align 1, !tbaa !15
  %514 = icmp eq i8 %513, -1
  br i1 %514, label %515, label %519

515:                                              ; preds = %512
  %516 = getelementptr inbounds i8, i8* %508, i64 1
  %517 = load i8, i8* %516, align 1, !tbaa !15
  %518 = icmp eq i8 %517, -110
  br i1 %518, label %522, label %519

519:                                              ; preds = %515, %512
  %520 = load %struct.opj_common_struct*, %struct.opj_common_struct** %29, align 8, !tbaa !624
  %521 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %520, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3.53, i64 0, i64 0)) #9
  br label %829

522:                                              ; preds = %515
  %523 = getelementptr inbounds i8, i8* %508, i64 2
  br label %524

524:                                              ; preds = %522, %505
  %525 = phi i8* [ %523, %522 ], [ %508, %505 ]
  %526 = icmp eq %struct.opj_packet_info* %64, null
  br i1 %526, label %532, label %527

527:                                              ; preds = %524
  %528 = ptrtoint i8* %525 to i64
  %529 = sub i64 %528, %65
  %530 = trunc i64 %529 to i32
  %531 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %64, i64 0, i32 1
  store i32 %530, i32* %531, align 4, !tbaa !626
  br label %532

532:                                              ; preds = %527, %524
  %533 = load i32, i32* %173, align 8, !tbaa !232
  %534 = icmp eq i32 %533, 1
  br i1 %534, label %535, label %545

535:                                              ; preds = %532
  %536 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %69, i64 0, i32 22
  %537 = bitcast i8** %536 to i64*
  %538 = load i64, i64* %537, align 8, !tbaa !235
  %539 = ptrtoint i8* %525 to i64
  %540 = sub i64 %538, %539
  %541 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %69, i64 0, i32 27
  %542 = load i32, i32* %541, align 4, !tbaa !236
  %543 = trunc i64 %540 to i32
  %544 = add i32 %542, %543
  store i32 %544, i32* %541, align 4, !tbaa !236
  br label %559

545:                                              ; preds = %532
  %546 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %67, i64 %16, i32 11
  %547 = load i32, i32* %546, align 8, !tbaa !237
  %548 = icmp eq i32 %547, 1
  br i1 %548, label %549, label %561

549:                                              ; preds = %545
  %550 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %67, i64 %16, i32 9
  %551 = bitcast i8** %550 to i64*
  %552 = load i64, i64* %551, align 8, !tbaa !238
  %553 = ptrtoint i8* %525 to i64
  %554 = sub i64 %552, %553
  %555 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %67, i64 %16, i32 13
  %556 = load i32, i32* %555, align 8, !tbaa !642
  %557 = trunc i64 %554 to i32
  %558 = add i32 %556, %557
  store i32 %558, i32* %555, align 8, !tbaa !642
  br label %559

559:                                              ; preds = %549, %535
  %560 = phi i8** [ %550, %549 ], [ %536, %535 ]
  store i8* %525, i8** %560, align 8, !tbaa !24
  br label %561

561:                                              ; preds = %559, %545
  %562 = phi i8* [ %525, %545 ], [ %171, %559 ]
  %563 = load i32, i32* %203, align 8, !tbaa !544
  %564 = icmp sgt i32 %563, 0
  br i1 %564, label %565, label %704

565:                                              ; preds = %561
  %566 = sext i32 %72 to i64
  %567 = shl i64 %66, 32
  %568 = ashr exact i64 %567, 32
  %569 = getelementptr inbounds i8, i8* %47, i64 %568
  br label %570

570:                                              ; preds = %698, %565
  %571 = phi i32 [ %563, %565 ], [ %699, %698 ]
  %572 = phi i64 [ 0, %565 ], [ %701, %698 ]
  %573 = phi i8* [ %562, %565 ], [ %700, %698 ]
  %574 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %572, i32 5
  %575 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %574, align 8, !tbaa !549
  %576 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %572, i32 2
  %577 = load i32, i32* %576, align 8, !tbaa !639
  %578 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %572, i32 0
  %579 = load i32, i32* %578, align 8, !tbaa !555
  %580 = icmp eq i32 %577, %579
  br i1 %580, label %698, label %581

581:                                              ; preds = %570
  %582 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %572, i32 3
  %583 = load i32, i32* %582, align 4, !tbaa !640
  %584 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %76, i64 %77, i32 7, i64 %572, i32 1
  %585 = load i32, i32* %584, align 4, !tbaa !557
  %586 = icmp eq i32 %583, %585
  br i1 %586, label %698, label %587

587:                                              ; preds = %581
  %588 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %575, i64 %566, i32 4
  %589 = load i32, i32* %588, align 8, !tbaa !550
  %590 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %575, i64 %566, i32 5
  %591 = load i32, i32* %590, align 4, !tbaa !552
  %592 = mul nsw i32 %591, %589
  %593 = icmp sgt i32 %592, 0
  br i1 %593, label %594, label %698

594:                                              ; preds = %587
  %595 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %575, i64 %566, i32 6
  %596 = bitcast %union.anon* %595 to %struct.opj_tcd_cblk_dec**
  br label %597

597:                                              ; preds = %688, %594
  %598 = phi i32 [ %591, %594 ], [ %689, %688 ]
  %599 = phi i32 [ %589, %594 ], [ %690, %688 ]
  %600 = phi i64 [ 0, %594 ], [ %692, %688 ]
  %601 = phi i8* [ %573, %594 ], [ %691, %688 ]
  %602 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %596, align 8, !tbaa !15
  %603 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %602, i64 %600, i32 9
  %604 = load i32, i32* %603, align 4, !tbaa !643
  %605 = icmp eq i32 %604, 0
  br i1 %605, label %688, label %606

606:                                              ; preds = %597
  %607 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %602, i64 %600, i32 10
  %608 = load i32, i32* %607, align 8, !tbaa !595
  %609 = icmp eq i32 %608, 0
  %610 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %602, i64 %600, i32 1
  %611 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %610, align 8, !tbaa !596
  br i1 %609, label %612, label %614

612:                                              ; preds = %606
  store i32 1, i32* %607, align 8, !tbaa !595
  %613 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %602, i64 %600, i32 8
  store i32 0, i32* %613, align 8, !tbaa !648
  br label %626

614:                                              ; preds = %606
  %615 = add nsw i32 %608, -1
  %616 = sext i32 %615 to i64
  %617 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %611, i64 %616
  %618 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %611, i64 %616, i32 2
  %619 = load i32, i32* %618, align 4, !tbaa !601
  %620 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %611, i64 %616, i32 4
  %621 = load i32, i32* %620, align 4, !tbaa !645
  %622 = icmp eq i32 %619, %621
  br i1 %622, label %623, label %626

623:                                              ; preds = %614
  %624 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %617, i64 1
  %625 = add nsw i32 %608, 1
  store i32 %625, i32* %607, align 8, !tbaa !595
  br label %626

626:                                              ; preds = %623, %614, %612
  %627 = phi %struct.opj_tcd_seg* [ %624, %623 ], [ %617, %614 ], [ %611, %612 ]
  %628 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %627, i64 0, i32 6
  %629 = load i32, i32* %628, align 4, !tbaa !647
  %630 = sext i32 %629 to i64
  %631 = getelementptr inbounds i8, i8* %601, i64 %630
  %632 = icmp ugt i8* %631, %569
  br i1 %632, label %829, label %633

633:                                              ; preds = %626
  %634 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %602, i64 %600, i32 0
  %635 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %602, i64 %600, i32 8
  %636 = load i32, i32* %635, align 8, !tbaa !648
  br label %637

637:                                              ; preds = %676, %633
  %638 = phi i32 [ %636, %633 ], [ %666, %676 ]
  %639 = phi i32 [ %629, %633 ], [ %681, %676 ]
  %640 = phi i32* [ %628, %633 ], [ %680, %676 ]
  %641 = phi %struct.opj_tcd_seg* [ %627, %633 ], [ %677, %676 ]
  %642 = phi i8* [ %601, %633 ], [ %665, %676 ]
  %643 = load i8*, i8** %634, align 8, !tbaa !619
  %644 = add nsw i32 %639, %638
  %645 = sext i32 %644 to i64
  %646 = tail call i8* @realloc(i8* %643, i64 %645) #9
  store i8* %646, i8** %634, align 8, !tbaa !619
  %647 = load i32, i32* %635, align 8, !tbaa !648
  %648 = sext i32 %647 to i64
  %649 = getelementptr inbounds i8, i8* %646, i64 %648
  %650 = load i32, i32* %640, align 4, !tbaa !647
  %651 = sext i32 %650 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %649, i8* align 1 %642, i64 %651, i1 false) #9
  %652 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %641, i64 0, i32 2
  %653 = load i32, i32* %652, align 4, !tbaa !601
  %654 = icmp eq i32 %653, 0
  br i1 %654, label %657, label %655

655:                                              ; preds = %637
  %656 = load i32, i32* %635, align 8, !tbaa !648
  br label %661

657:                                              ; preds = %637
  %658 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %641, i64 0, i32 0
  store i8** %634, i8*** %658, align 8, !tbaa !597
  %659 = load i32, i32* %635, align 8, !tbaa !648
  %660 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %641, i64 0, i32 1
  store i32 %659, i32* %660, align 8, !tbaa !599
  br label %661

661:                                              ; preds = %657, %655
  %662 = phi i32 [ %656, %655 ], [ %659, %657 ]
  %663 = load i32, i32* %640, align 4, !tbaa !647
  %664 = sext i32 %663 to i64
  %665 = getelementptr inbounds i8, i8* %642, i64 %664
  %666 = add nsw i32 %663, %662
  store i32 %666, i32* %635, align 8, !tbaa !648
  %667 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %641, i64 0, i32 3
  %668 = load i32, i32* %667, align 8, !tbaa !600
  %669 = add nsw i32 %668, %663
  store i32 %669, i32* %667, align 8, !tbaa !600
  %670 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %641, i64 0, i32 5
  %671 = load i32, i32* %670, align 8, !tbaa !646
  %672 = add nsw i32 %671, %653
  store i32 %672, i32* %652, align 4, !tbaa !601
  %673 = load i32, i32* %603, align 4, !tbaa !643
  %674 = sub nsw i32 %673, %671
  store i32 %674, i32* %603, align 4, !tbaa !643
  %675 = icmp sgt i32 %674, 0
  br i1 %675, label %676, label %685

676:                                              ; preds = %661
  %677 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %641, i64 1
  %678 = load i32, i32* %607, align 8, !tbaa !595
  %679 = add nsw i32 %678, 1
  store i32 %679, i32* %607, align 8, !tbaa !595
  %680 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %641, i64 1, i32 6
  %681 = load i32, i32* %680, align 4, !tbaa !647
  %682 = sext i32 %681 to i64
  %683 = getelementptr inbounds i8, i8* %665, i64 %682
  %684 = icmp ugt i8* %683, %569
  br i1 %684, label %829, label %637

685:                                              ; preds = %661
  %686 = load i32, i32* %588, align 8, !tbaa !550
  %687 = load i32, i32* %590, align 4, !tbaa !552
  br label %688

688:                                              ; preds = %685, %597
  %689 = phi i32 [ %598, %597 ], [ %687, %685 ]
  %690 = phi i32 [ %599, %597 ], [ %686, %685 ]
  %691 = phi i8* [ %601, %597 ], [ %665, %685 ]
  %692 = add nuw nsw i64 %600, 1
  %693 = mul nsw i32 %690, %689
  %694 = sext i32 %693 to i64
  %695 = icmp slt i64 %692, %694
  br i1 %695, label %597, label %696

696:                                              ; preds = %688
  %697 = load i32, i32* %203, align 8, !tbaa !544
  br label %698

698:                                              ; preds = %696, %587, %581, %570
  %699 = phi i32 [ %571, %570 ], [ %571, %581 ], [ %571, %587 ], [ %697, %696 ]
  %700 = phi i8* [ %573, %570 ], [ %573, %581 ], [ %573, %587 ], [ %691, %696 ]
  %701 = add nuw nsw i64 %572, 1
  %702 = sext i32 %699 to i64
  %703 = icmp slt i64 %701, %702
  br i1 %703, label %570, label %704

704:                                              ; preds = %698, %561, %254, %250, %240
  %705 = phi i8* [ %171, %240 ], [ %171, %254 ], [ %230, %250 ], [ %562, %561 ], [ %700, %698 ]
  %706 = ptrtoint i8* %705 to i64
  %707 = sub i64 %706, %65
  %708 = trunc i64 %707 to i32
  %709 = icmp eq i32 %708, -999
  br i1 %709, label %829, label %710

710:                                              ; preds = %704
  %711 = icmp sgt i32 %708, 0
  br i1 %711, label %712, label %721

712:                                              ; preds = %710
  %713 = load i32, i32* %44, align 4, !tbaa !503
  %714 = load %struct.opj_image_comp*, %struct.opj_image_comp** %30, align 8, !tbaa !128
  %715 = load i32, i32* %43, align 8, !tbaa !506
  %716 = sext i32 %715 to i64
  %717 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %714, i64 %716, i32 9
  %718 = load i32, i32* %717, align 4, !tbaa !210
  %719 = icmp sgt i32 %713, %718
  %720 = select i1 %719, i32 %713, i32 %718
  br label %728

721:                                              ; preds = %710, %52
  %722 = phi i32 [ %708, %710 ], [ 0, %52 ]
  %723 = load %struct.opj_image_comp*, %struct.opj_image_comp** %30, align 8, !tbaa !128
  %724 = load i32, i32* %43, align 8, !tbaa !506
  %725 = sext i32 %724 to i64
  %726 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %723, i64 %725, i32 9
  %727 = load i32, i32* %726, align 4, !tbaa !210
  br label %728

728:                                              ; preds = %721, %712
  %729 = phi i64 [ %725, %721 ], [ %716, %712 ]
  %730 = phi %struct.opj_image_comp* [ %723, %721 ], [ %714, %712 ]
  %731 = phi i32 [ %722, %721 ], [ %708, %712 ]
  %732 = phi i32 [ %727, %721 ], [ %720, %712 ]
  %733 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %730, i64 %729, i32 9
  store i32 %732, i32* %733, align 4, !tbaa !210
  br i1 %22, label %787, label %734

734:                                              ; preds = %728
  %735 = load %struct.opj_tile_info*, %struct.opj_tile_info** %23, align 8, !tbaa !143
  %736 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %735, i64 %16, i32 9
  %737 = load %struct.opj_packet_info*, %struct.opj_packet_info** %736, align 8, !tbaa !355
  %738 = load i32, i32* %24, align 8, !tbaa !198
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %737, i64 %739
  %741 = icmp eq i32 %738, 0
  br i1 %741, label %742, label %746

742:                                              ; preds = %734
  %743 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %735, i64 %16, i32 3
  %744 = load i32, i32* %743, align 8, !tbaa !197
  %745 = add nsw i32 %744, 1
  br label %775

746:                                              ; preds = %734
  %747 = add nsw i32 %738, -1
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %737, i64 %748, i32 2
  %750 = load i32, i32* %749, align 8, !tbaa !356
  %751 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %735, i64 %16, i32 16
  %752 = load %struct.opj_tp_info*, %struct.opj_tp_info** %751, align 8, !tbaa !147
  %753 = sext i32 %49 to i64
  %754 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %752, i64 %753, i32 2
  %755 = load i32, i32* %754, align 4, !tbaa !193
  %756 = icmp slt i32 %750, %755
  br i1 %756, label %766, label %757

757:                                              ; preds = %746
  %758 = sub nsw i32 %738, %48
  %759 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %752, i64 %753, i32 4
  store i32 %758, i32* %759, align 4, !tbaa !351
  %760 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %752, i64 %753, i32 3
  store i32 %48, i32* %760, align 4, !tbaa !350
  %761 = add nsw i32 %49, 1
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %752, i64 %762, i32 1
  %764 = load i32, i32* %763, align 4, !tbaa !196
  %765 = add nsw i32 %764, 1
  br label %775

766:                                              ; preds = %746
  %767 = load i8, i8* %31, align 8, !tbaa !149
  %768 = icmp eq i8 %767, 0
  br i1 %768, label %773, label %769

769:                                              ; preds = %766
  %770 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %740, i64 0, i32 0
  %771 = load i32, i32* %770, align 8, !tbaa !358
  %772 = icmp eq i32 %771, 0
  br i1 %772, label %773, label %775

773:                                              ; preds = %769, %766
  %774 = add nsw i32 %750, 1
  br label %775

775:                                              ; preds = %773, %769, %757, %742
  %776 = phi i32 [ %765, %757 ], [ %745, %742 ], [ %774, %773 ], [ %771, %769 ]
  %777 = phi i32 [ %761, %757 ], [ %49, %742 ], [ %49, %773 ], [ %49, %769 ]
  %778 = phi i32 [ %738, %757 ], [ %48, %742 ], [ %48, %773 ], [ %48, %769 ]
  %779 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %740, i64 0, i32 0
  store i32 %776, i32* %779, align 8, !tbaa !358
  %780 = add i32 %776, -1
  %781 = add i32 %780, %731
  %782 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %737, i64 %739, i32 2
  store i32 %781, i32* %782, align 8, !tbaa !356
  %783 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %737, i64 %739, i32 1
  %784 = load i32, i32* %783, align 4, !tbaa !626
  %785 = add nsw i32 %780, %784
  store i32 %785, i32* %783, align 4, !tbaa !626
  %786 = add nsw i32 %738, 1
  store i32 %786, i32* %24, align 8, !tbaa !198
  br label %787

787:                                              ; preds = %775, %728
  %788 = phi i32 [ %777, %775 ], [ %49, %728 ]
  %789 = phi i32 [ %778, %775 ], [ %48, %728 ]
  %790 = sext i32 %731 to i64
  %791 = getelementptr inbounds i8, i8* %47, i64 %790
  %792 = tail call i32 @pi_next(%struct.opj_pi_iterator* nonnull %38) #9
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %794, label %46

794:                                              ; preds = %787, %32
  %795 = phi i32 [ %37, %32 ], [ %788, %787 ]
  %796 = phi i32 [ %36, %32 ], [ %789, %787 ]
  %797 = phi i32 [ %35, %32 ], [ %731, %787 ]
  %798 = phi i8* [ %34, %32 ], [ %791, %787 ]
  %799 = add nuw nsw i64 %33, 1
  %800 = load %struct.opj_tcp*, %struct.opj_tcp** %14, align 8, !tbaa !139
  %801 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %800, i64 %16, i32 6
  %802 = load i32, i32* %801, align 4, !tbaa !140
  %803 = sext i32 %802 to i64
  %804 = icmp slt i64 %33, %803
  br i1 %804, label %32, label %805

805:                                              ; preds = %794, %13
  %806 = phi i32 [ 0, %13 ], [ %795, %794 ]
  %807 = phi i32 [ 0, %13 ], [ %796, %794 ]
  %808 = phi i32 [ 0, %13 ], [ %797, %794 ]
  %809 = phi i8* [ %1, %13 ], [ %798, %794 ]
  %810 = icmp eq %struct.opj_codestream_info* %5, null
  br i1 %810, label %822, label %811

811:                                              ; preds = %805
  %812 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 1
  %813 = load i32, i32* %812, align 8, !tbaa !198
  %814 = sub nsw i32 %813, %807
  %815 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %5, i64 0, i32 21
  %816 = load %struct.opj_tile_info*, %struct.opj_tile_info** %815, align 8, !tbaa !143
  %817 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %816, i64 %16, i32 16
  %818 = load %struct.opj_tp_info*, %struct.opj_tp_info** %817, align 8, !tbaa !147
  %819 = sext i32 %806 to i64
  %820 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %818, i64 %819, i32 4
  store i32 %814, i32* %820, align 4, !tbaa !351
  %821 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %818, i64 %819, i32 3
  store i32 %807, i32* %821, align 4, !tbaa !350
  br label %822

822:                                              ; preds = %811, %805
  tail call void @pi_destroy(%struct.opj_pi_iterator* nonnull %11, %struct.opj_cp* nonnull %10, i32 %3) #9
  %823 = icmp eq i32 %808, -999
  br i1 %823, label %829, label %824

824:                                              ; preds = %822
  %825 = ptrtoint i8* %809 to i64
  %826 = ptrtoint i8* %1 to i64
  %827 = sub i64 %825, %826
  %828 = trunc i64 %827 to i32
  br label %829

829:                                              ; preds = %824, %822, %704, %676, %626, %519, %504, %6
  %830 = phi i32 [ %828, %824 ], [ -999, %6 ], [ -999, %822 ], [ -999, %504 ], [ -999, %519 ], [ -999, %676 ], [ -999, %626 ], [ -999, %704 ]
  ret i32 %830
}

; Function Attrs: nounwind uwtable
define noalias %struct.opj_t2* @t2_create(%struct.opj_common_struct*, %struct.opj_image*, %struct.opj_cp*) #0 {
  %4 = tail call noalias i8* @malloc(i64 24) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %3
  %7 = bitcast i8* %4 to %struct.opj_t2*
  %8 = bitcast i8* %4 to %struct.opj_common_struct**
  store %struct.opj_common_struct* %0, %struct.opj_common_struct** %8, align 8, !tbaa !624
  %9 = getelementptr inbounds i8, i8* %4, i64 8
  %10 = bitcast i8* %9 to %struct.opj_image**
  store %struct.opj_image* %1, %struct.opj_image** %10, align 8, !tbaa !621
  %11 = getelementptr inbounds i8, i8* %4, i64 16
  %12 = bitcast i8* %11 to %struct.opj_cp**
  store %struct.opj_cp* %2, %struct.opj_cp** %12, align 8, !tbaa !623
  br label %13

13:                                               ; preds = %6, %3
  %14 = phi %struct.opj_t2* [ %7, %6 ], [ null, %3 ]
  ret %struct.opj_t2* %14
}

; Function Attrs: nounwind uwtable
define void @t2_destroy(%struct.opj_t2*) #0 {
  %2 = icmp eq %struct.opj_t2* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.opj_t2* %0 to i8*
  tail call void @free(i8* %4) #9
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @tcd_dump(%struct._IO_FILE* nocapture, %struct.opj_tcd* nocapture readonly, %struct.opj_tcd_image* nocapture readonly) #0 {
  %4 = tail call i64 @fwrite(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %0)
  %5 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %2, i64 0, i32 0
  %6 = load i32, i32* %5, align 8, !tbaa !649
  %7 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %2, i64 0, i32 1
  %8 = load i32, i32* %7, align 4, !tbaa !650
  %9 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %1, i64 0, i32 7
  %10 = load %struct.opj_image*, %struct.opj_image** %9, align 8, !tbaa !651
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 8, !tbaa !201
  %13 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %10, i64 0, i32 2
  %14 = load i32, i32* %13, align 8, !tbaa !199
  %15 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %10, i64 0, i32 1
  %16 = load i32, i32* %15, align 4, !tbaa !202
  %17 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %10, i64 0, i32 3
  %18 = load i32, i32* %17, align 4, !tbaa !200
  %19 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1.55, i64 0, i64 0), i32 %6, i32 %8, i32 %12, i32 %14, i32 %16, i32 %18)
  %20 = load i32, i32* %7, align 4, !tbaa !650
  %21 = load i32, i32* %5, align 8, !tbaa !649
  %22 = mul nsw i32 %21, %20
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %160

24:                                               ; preds = %3
  %25 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %1, i64 0, i32 6
  br label %26

26:                                               ; preds = %152, %24
  %27 = phi i64 [ 0, %24 ], [ %154, %152 ]
  %28 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %25, align 8, !tbaa !359
  %29 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %28, i64 0, i32 2
  %30 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %29, align 8, !tbaa !360
  %31 = tail call i64 @fwrite(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2.56, i64 0, i64 0), i64 9, i64 1, %struct._IO_FILE* %0)
  %32 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %30, i64 %27, i32 0
  %33 = load i32, i32* %32, align 8, !tbaa !652
  %34 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %30, i64 %27, i32 1
  %35 = load i32, i32* %34, align 4, !tbaa !653
  %36 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %30, i64 %27, i32 2
  %37 = load i32, i32* %36, align 8, !tbaa !654
  %38 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %30, i64 %27, i32 3
  %39 = load i32, i32* %38, align 4, !tbaa !655
  %40 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %30, i64 %27, i32 4
  %41 = load i32, i32* %40, align 8, !tbaa !542
  %42 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3.57, i64 0, i64 0), i32 %33, i32 %35, i32 %37, i32 %39, i32 %41)
  %43 = load i32, i32* %40, align 8, !tbaa !542
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %152

45:                                               ; preds = %26
  %46 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %30, i64 %27, i32 5
  br label %47

47:                                               ; preds = %146, %45
  %48 = phi i64 [ 0, %45 ], [ %148, %146 ]
  %49 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %46, align 8, !tbaa !543
  %50 = tail call i64 @fwrite(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4.58, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %0)
  %51 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %49, i64 %48, i32 0
  %52 = load i32, i32* %51, align 8, !tbaa !34
  %53 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %49, i64 %48, i32 1
  %54 = load i32, i32* %53, align 4, !tbaa !108
  %55 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %49, i64 %48, i32 2
  %56 = load i32, i32* %55, align 8, !tbaa !32
  %57 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %49, i64 %48, i32 3
  %58 = load i32, i32* %57, align 4, !tbaa !107
  %59 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %49, i64 %48, i32 4
  %60 = load i32, i32* %59, align 8, !tbaa !35
  %61 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5.59, i64 0, i64 0), i32 %52, i32 %54, i32 %56, i32 %58, i32 %60)
  %62 = load i32, i32* %59, align 8, !tbaa !35
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %64, label %146

64:                                               ; preds = %47
  %65 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %49, i64 %48, i32 5
  br label %66

66:                                               ; preds = %140, %64
  %67 = phi i64 [ 0, %64 ], [ %142, %140 ]
  %68 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %65, align 8, !tbaa !37
  %69 = tail call i64 @fwrite(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6.60, i64 0, i64 0), i64 10, i64 1, %struct._IO_FILE* %0)
  %70 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 0
  %71 = load i32, i32* %70, align 8, !tbaa !40
  %72 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 1
  %73 = load i32, i32* %72, align 4, !tbaa !42
  %74 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 2
  %75 = load i32, i32* %74, align 8, !tbaa !38
  %76 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 3
  %77 = load i32, i32* %76, align 4, !tbaa !41
  %78 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 4
  %79 = load i32, i32* %78, align 8, !tbaa !545
  %80 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 5
  %81 = load i32, i32* %80, align 4, !tbaa !546
  %82 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 6
  %83 = load i32, i32* %82, align 8, !tbaa !544
  %84 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.7.61, i64 0, i64 0), i32 %71, i32 %73, i32 %75, i32 %77, i32 %79, i32 %81, i32 %83)
  %85 = load i32, i32* %82, align 8, !tbaa !544
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %87, label %140

87:                                               ; preds = %134, %66
  %88 = phi i64 [ %136, %134 ], [ 0, %66 ]
  %89 = tail call i64 @fwrite(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8.62, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %0)
  %90 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 7, i64 %88, i32 0
  %91 = load i32, i32* %90, align 8, !tbaa !555
  %92 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 7, i64 %88, i32 1
  %93 = load i32, i32* %92, align 4, !tbaa !557
  %94 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 7, i64 %88, i32 2
  %95 = load i32, i32* %94, align 8, !tbaa !639
  %96 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 7, i64 %88, i32 3
  %97 = load i32, i32* %96, align 4, !tbaa !640
  %98 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 7, i64 %88, i32 7
  %99 = load float, float* %98, align 4, !tbaa !547
  %100 = fpext float %99 to double
  %101 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 7, i64 %88, i32 6
  %102 = load i32, i32* %101, align 8, !tbaa !630
  %103 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.9.63, i64 0, i64 0), i32 %91, i32 %93, i32 %95, i32 %97, double %100, i32 %102)
  %104 = load i32, i32* %78, align 8, !tbaa !545
  %105 = load i32, i32* %80, align 4, !tbaa !546
  %106 = mul nsw i32 %105, %104
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %108, label %134

108:                                              ; preds = %87
  %109 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %68, i64 %67, i32 7, i64 %88, i32 5
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %128, %110 ]
  %112 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %109, align 8, !tbaa !549
  %113 = tail call i64 @fwrite(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10.64, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %0)
  %114 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %112, i64 %111, i32 0
  %115 = load i32, i32* %114, align 8, !tbaa !656
  %116 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %112, i64 %111, i32 1
  %117 = load i32, i32* %116, align 4, !tbaa !657
  %118 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %112, i64 %111, i32 2
  %119 = load i32, i32* %118, align 8, !tbaa !658
  %120 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %112, i64 %111, i32 3
  %121 = load i32, i32* %120, align 4, !tbaa !659
  %122 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %112, i64 %111, i32 4
  %123 = load i32, i32* %122, align 8, !tbaa !550
  %124 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %112, i64 %111, i32 5
  %125 = load i32, i32* %124, align 4, !tbaa !552
  %126 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.11.65, i64 0, i64 0), i32 %115, i32 %117, i32 %119, i32 %121, i32 %123, i32 %125)
  %127 = tail call i64 @fwrite(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.66, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %0)
  %128 = add nuw nsw i64 %111, 1
  %129 = load i32, i32* %78, align 8, !tbaa !545
  %130 = load i32, i32* %80, align 4, !tbaa !546
  %131 = mul nsw i32 %130, %129
  %132 = sext i32 %131 to i64
  %133 = icmp slt i64 %128, %132
  br i1 %133, label %110, label %134

134:                                              ; preds = %110, %87
  %135 = tail call i64 @fwrite(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.13.67, i64 0, i64 0), i64 10, i64 1, %struct._IO_FILE* %0)
  %136 = add nuw nsw i64 %88, 1
  %137 = load i32, i32* %82, align 8, !tbaa !544
  %138 = sext i32 %137 to i64
  %139 = icmp slt i64 %136, %138
  br i1 %139, label %87, label %140

140:                                              ; preds = %134, %66
  %141 = tail call i64 @fwrite(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14.68, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %0)
  %142 = add nuw nsw i64 %67, 1
  %143 = load i32, i32* %59, align 8, !tbaa !35
  %144 = sext i32 %143 to i64
  %145 = icmp slt i64 %142, %144
  br i1 %145, label %66, label %146

146:                                              ; preds = %140, %47
  %147 = tail call i64 @fwrite(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15.69, i64 0, i64 0), i64 6, i64 1, %struct._IO_FILE* %0)
  %148 = add nuw nsw i64 %48, 1
  %149 = load i32, i32* %40, align 8, !tbaa !542
  %150 = sext i32 %149 to i64
  %151 = icmp slt i64 %148, %150
  br i1 %151, label %47, label %152

152:                                              ; preds = %146, %26
  %153 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16.70, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %0)
  %154 = add nuw nsw i64 %27, 1
  %155 = load i32, i32* %7, align 4, !tbaa !650
  %156 = load i32, i32* %5, align 8, !tbaa !649
  %157 = mul nsw i32 %156, %155
  %158 = sext i32 %157 to i64
  %159 = icmp slt i64 %154, %158
  br i1 %159, label %26, label %160

160:                                              ; preds = %152, %3
  %161 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17.71, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %0)
  ret void
}

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define noalias %struct.opj_tcd* @tcd_create(%struct.opj_common_struct*) #0 {
  %2 = tail call noalias i8* @malloc(i64 88) #9
  %3 = icmp eq i8* %2, null
  br i1 %3, label %13, label %4

4:                                                ; preds = %1
  %5 = bitcast i8* %2 to %struct.opj_tcd*
  %6 = getelementptr inbounds i8, i8* %2, i64 24
  %7 = bitcast i8* %6 to %struct.opj_common_struct**
  store %struct.opj_common_struct* %0, %struct.opj_common_struct** %7, align 8, !tbaa !660
  %8 = tail call noalias i8* @malloc(i64 16) #9
  %9 = getelementptr inbounds i8, i8* %2, i64 32
  %10 = bitcast i8* %9 to i8**
  store i8* %8, i8** %10, align 8, !tbaa !359
  %11 = icmp eq i8* %8, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %4
  tail call void @free(i8* nonnull %2) #9
  br label %13

13:                                               ; preds = %12, %4, %1
  %14 = phi %struct.opj_tcd* [ null, %12 ], [ null, %1 ], [ %5, %4 ]
  ret %struct.opj_tcd* %14
}

; Function Attrs: nounwind uwtable
define void @tcd_destroy(%struct.opj_tcd*) #0 {
  %2 = icmp eq %struct.opj_tcd* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %5 = bitcast %struct.opj_tcd_image** %4 to i8**
  %6 = load i8*, i8** %5, align 8, !tbaa !359
  tail call void @free(i8* %6) #9
  %7 = bitcast %struct.opj_tcd* %0 to i8*
  tail call void @free(i8* %7) #9
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @tcd_malloc_encode(%struct.opj_tcd* nocapture, %struct.opj_image*, %struct.opj_cp*, i32) #0 {
  %5 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  store %struct.opj_image* %1, %struct.opj_image** %5, align 8, !tbaa !651
  %6 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  store %struct.opj_cp* %2, %struct.opj_cp** %6, align 8, !tbaa !661
  %7 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 18
  %8 = load i32, i32* %7, align 8, !tbaa !136
  %9 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %10 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %9, align 8, !tbaa !359
  %11 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %10, i64 0, i32 0
  store i32 %8, i32* %11, align 8, !tbaa !649
  %12 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 19
  %13 = load i32, i32* %12, align 4, !tbaa !137
  %14 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %10, i64 0, i32 1
  store i32 %13, i32* %14, align 4, !tbaa !650
  %15 = tail call noalias i8* @malloc(i64 856) #9
  %16 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %10, i64 0, i32 2
  %17 = bitcast %struct.opj_tcd_tile** %16 to i8**
  store i8* %15, i8** %17, align 8, !tbaa !360
  %18 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 28
  %19 = sext i32 %3 to i64
  %20 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 13
  %21 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 15
  %22 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 0
  %23 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 14
  %24 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 16
  %25 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 1
  %26 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 2
  %27 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 3
  %28 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 4
  %29 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 4
  %30 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 6
  %31 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 3
  %32 = load %struct.opj_tcp*, %struct.opj_tcp** %18, align 8, !tbaa !139
  %33 = srem i32 %3, %8
  %34 = sdiv i32 %3, %8
  %35 = load i32, i32* %20, align 8, !tbaa !205
  %36 = load i32, i32* %21, align 8, !tbaa !203
  %37 = mul nsw i32 %36, %33
  %38 = add nsw i32 %37, %35
  %39 = load i32, i32* %22, align 8, !tbaa !201
  %40 = icmp sgt i32 %38, %39
  %41 = select i1 %40, i32 %38, i32 %39
  %42 = bitcast i8* %15 to i32*
  store i32 %41, i32* %42, align 8, !tbaa !652
  %43 = load i32, i32* %23, align 4, !tbaa !206
  %44 = load i32, i32* %24, align 4, !tbaa !204
  %45 = mul nsw i32 %44, %34
  %46 = add nsw i32 %45, %43
  %47 = load i32, i32* %25, align 4, !tbaa !202
  %48 = icmp sgt i32 %46, %47
  %49 = select i1 %48, i32 %46, i32 %47
  %50 = getelementptr inbounds i8, i8* %15, i64 4
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 4, !tbaa !653
  %52 = add nsw i32 %33, 1
  %53 = mul nsw i32 %36, %52
  %54 = add nsw i32 %53, %35
  %55 = load i32, i32* %26, align 8, !tbaa !199
  %56 = icmp slt i32 %54, %55
  %57 = select i1 %56, i32 %54, i32 %55
  %58 = getelementptr inbounds i8, i8* %15, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 8, !tbaa !654
  %60 = add nsw i32 %34, 1
  %61 = mul nsw i32 %44, %60
  %62 = add nsw i32 %61, %43
  %63 = load i32, i32* %27, align 4, !tbaa !200
  %64 = icmp slt i32 %62, %63
  %65 = select i1 %64, i32 %62, i32 %63
  %66 = getelementptr inbounds i8, i8* %15, i64 12
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 4, !tbaa !655
  %68 = load i32, i32* %28, align 8, !tbaa !127
  %69 = getelementptr inbounds i8, i8* %15, i64 16
  %70 = bitcast i8* %69 to i32*
  store i32 %68, i32* %70, align 8, !tbaa !542
  %71 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %32, i64 %19, i32 3
  %72 = load i32, i32* %71, align 4, !tbaa !219
  %73 = icmp sgt i32 %72, 0
  br i1 %73, label %74, label %137

74:                                               ; preds = %4
  %75 = sub nsw i32 %57, %41
  %76 = mul nsw i32 %68, %75
  %77 = sub nsw i32 %65, %49
  %78 = mul nsw i32 %76, %77
  %79 = sext i32 %72 to i64
  %80 = add nsw i32 %72, -1
  %81 = zext i32 %80 to i64
  br label %82

82:                                               ; preds = %134, %74
  %83 = phi i64 [ 0, %74 ], [ %135, %134 ]
  %84 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %32, i64 %19, i32 5, i64 %83
  %85 = load float, float* %84, align 4, !tbaa !112
  %86 = fcmp une float %85, 0.000000e+00
  br i1 %86, label %88, label %87

87:                                               ; preds = %82
  store float 0.000000e+00, float* %84, align 4, !tbaa !112
  br label %134

88:                                               ; preds = %82
  %89 = load i8, i8* %29, align 8, !tbaa !149
  %90 = icmp eq i8 %89, 0
  %91 = load %struct.opj_image_comp*, %struct.opj_image_comp** %30, align 8, !tbaa !128
  %92 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %91, i64 0, i32 6
  %93 = load i32, i32* %92, align 8, !tbaa !207
  %94 = mul nsw i32 %78, %93
  %95 = sitofp i32 %94 to float
  %96 = fmul float %85, 8.000000e+00
  %97 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %91, i64 0, i32 0
  %98 = load i32, i32* %97, align 8, !tbaa !208
  %99 = sitofp i32 %98 to float
  %100 = fmul float %96, %99
  %101 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %91, i64 0, i32 1
  %102 = load i32, i32* %101, align 4, !tbaa !209
  %103 = sitofp i32 %102 to float
  %104 = fmul float %100, %103
  %105 = fdiv float %95, %104
  br i1 %90, label %113, label %106

106:                                              ; preds = %88
  %107 = load i32, i32* %31, align 4, !tbaa !341
  %108 = mul i32 %107, 14
  %109 = add i32 %108, -14
  %110 = sdiv i32 %109, %72
  %111 = sitofp i32 %110 to float
  %112 = fsub float %105, %111
  br label %113

113:                                              ; preds = %106, %88
  %114 = phi float [ %112, %106 ], [ %105, %88 ]
  store float %114, float* %84, align 4, !tbaa !112
  %115 = fcmp une float %114, 0.000000e+00
  br i1 %115, label %116, label %134

116:                                              ; preds = %113
  %117 = icmp eq i64 %83, 0
  br i1 %117, label %126, label %118

118:                                              ; preds = %116
  %119 = add nsw i64 %83, -1
  %120 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %32, i64 %19, i32 5, i64 %119
  %121 = load float, float* %120, align 4, !tbaa !112
  %122 = fadd float %121, 1.000000e+01
  %123 = fcmp olt float %114, %122
  br i1 %123, label %124, label %129

124:                                              ; preds = %118
  %125 = fadd float %121, 2.000000e+01
  store float %125, float* %84, align 4, !tbaa !112
  br label %129

126:                                              ; preds = %116
  %127 = fcmp olt float %114, 3.000000e+01
  br i1 %127, label %128, label %129

128:                                              ; preds = %126
  store float 3.000000e+01, float* %84, align 4, !tbaa !112
  br label %129

129:                                              ; preds = %128, %126, %124, %118
  %130 = phi float [ %114, %118 ], [ %114, %126 ], [ 3.000000e+01, %128 ], [ %125, %124 ]
  %131 = icmp eq i64 %83, %81
  br i1 %131, label %132, label %134

132:                                              ; preds = %129
  %133 = fadd float %130, -2.000000e+00
  store float %133, float* %84, align 4, !tbaa !112
  br label %134

134:                                              ; preds = %132, %129, %113, %87
  %135 = add nuw nsw i64 %83, 1
  %136 = icmp slt i64 %135, %79
  br i1 %136, label %82, label %137

137:                                              ; preds = %134, %4
  %138 = sext i32 %68 to i64
  %139 = mul nsw i64 %138, 48
  %140 = tail call noalias i8* @malloc(i64 %139) #9
  %141 = getelementptr inbounds i8, i8* %15, i64 24
  %142 = bitcast i8* %141 to %struct.opj_tcd_tilecomp**
  %143 = bitcast i8* %141 to i8**
  store i8* %140, i8** %143, align 8, !tbaa !543
  %144 = load i32, i32* %70, align 8, !tbaa !542
  %145 = icmp sgt i32 %144, 0
  br i1 %145, label %146, label %541

146:                                              ; preds = %137
  %147 = bitcast i8* %140 to %struct.opj_tcd_tilecomp*
  %148 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %32, i64 %19, i32 15
  br label %149

149:                                              ; preds = %539, %146
  %150 = phi %struct.opj_tcd_tilecomp* [ %147, %146 ], [ %540, %539 ]
  %151 = phi i64 [ 0, %146 ], [ %535, %539 ]
  %152 = load %struct.opj_tccp*, %struct.opj_tccp** %148, align 8, !tbaa !162
  %153 = load i32, i32* %42, align 8, !tbaa !652
  %154 = load %struct.opj_image_comp*, %struct.opj_image_comp** %30, align 8, !tbaa !128
  %155 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %154, i64 %151, i32 0
  %156 = load i32, i32* %155, align 8, !tbaa !208
  %157 = add i32 %156, -1
  %158 = add i32 %157, %153
  %159 = sdiv i32 %158, %156
  %160 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %150, i64 %151, i32 0
  store i32 %159, i32* %160, align 8, !tbaa !34
  %161 = load i32, i32* %51, align 4, !tbaa !653
  %162 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %154, i64 %151, i32 1
  %163 = load i32, i32* %162, align 4, !tbaa !209
  %164 = add i32 %163, -1
  %165 = add i32 %164, %161
  %166 = sdiv i32 %165, %163
  %167 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %150, i64 %151, i32 1
  store i32 %166, i32* %167, align 4, !tbaa !108
  %168 = load i32, i32* %59, align 8, !tbaa !654
  %169 = add i32 %157, %168
  %170 = sdiv i32 %169, %156
  %171 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %150, i64 %151, i32 2
  store i32 %170, i32* %171, align 8, !tbaa !32
  %172 = load i32, i32* %67, align 4, !tbaa !655
  %173 = add i32 %164, %172
  %174 = sdiv i32 %173, %163
  %175 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %150, i64 %151, i32 3
  store i32 %174, i32* %175, align 4, !tbaa !107
  %176 = sub nsw i32 %170, %159
  %177 = sub nsw i32 %174, %166
  %178 = mul nsw i32 %177, %176
  %179 = sext i32 %178 to i64
  %180 = shl nsw i64 %179, 2
  %181 = tail call noalias i8* @malloc(i64 %180) #9
  %182 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %150, i64 %151, i32 6
  %183 = bitcast i32** %182 to i8**
  store i8* %181, i8** %183, align 8, !tbaa !36
  %184 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %152, i64 %151, i32 1
  %185 = load i32, i32* %184, align 4, !tbaa !95
  %186 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %150, i64 %151, i32 4
  store i32 %185, i32* %186, align 8, !tbaa !35
  %187 = sext i32 %185 to i64
  %188 = mul nsw i64 %187, 152
  %189 = tail call noalias i8* @malloc(i64 %188) #9
  %190 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %150, i64 %151, i32 5
  %191 = bitcast %struct.opj_tcd_resolution** %190 to i8**
  store i8* %189, i8** %191, align 8, !tbaa !37
  %192 = load i32, i32* %186, align 8, !tbaa !35
  %193 = icmp sgt i32 %192, 0
  br i1 %193, label %194, label %534

194:                                              ; preds = %149
  %195 = bitcast i8* %189 to %struct.opj_tcd_resolution*
  %196 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %152, i64 %151, i32 0
  %197 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %152, i64 %151, i32 2
  %198 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %152, i64 %151, i32 3
  %199 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %152, i64 %151, i32 5
  %200 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %152, i64 %151, i32 8
  br label %201

201:                                              ; preds = %531, %194
  %202 = phi %struct.opj_tcd_resolution* [ %195, %194 ], [ %533, %531 ]
  %203 = phi i64 [ 0, %194 ], [ %528, %531 ]
  %204 = phi i32 [ %192, %194 ], [ %527, %531 ]
  %205 = phi i32 [ 0, %194 ], [ %532, %531 ]
  %206 = xor i32 %205, -1
  %207 = add i32 %204, %206
  %208 = load i32, i32* %160, align 8, !tbaa !34
  %209 = shl nsw i32 -1, %207
  %210 = xor i32 %209, -1
  %211 = add i32 %208, %210
  %212 = ashr i32 %211, %207
  %213 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 0
  store i32 %212, i32* %213, align 8, !tbaa !40
  %214 = load i32, i32* %167, align 4, !tbaa !108
  %215 = add i32 %214, %210
  %216 = ashr i32 %215, %207
  %217 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 1
  store i32 %216, i32* %217, align 4, !tbaa !42
  %218 = load i32, i32* %171, align 8, !tbaa !32
  %219 = add i32 %218, %210
  %220 = ashr i32 %219, %207
  %221 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 2
  store i32 %220, i32* %221, align 8, !tbaa !38
  %222 = load i32, i32* %175, align 4, !tbaa !107
  %223 = add i32 %222, %210
  %224 = ashr i32 %223, %207
  %225 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 3
  store i32 %224, i32* %225, align 4, !tbaa !41
  %226 = icmp eq i64 %203, 0
  %227 = select i1 %226, i32 1, i32 3
  %228 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 6
  store i32 %227, i32* %228, align 8, !tbaa !544
  %229 = load i32, i32* %196, align 4, !tbaa !221
  %230 = and i32 %229, 1
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %237, label %232

232:                                              ; preds = %201
  %233 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %152, i64 %151, i32 10, i64 %203
  %234 = load i32, i32* %233, align 4, !tbaa !43
  %235 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %152, i64 %151, i32 11, i64 %203
  %236 = load i32, i32* %235, align 4, !tbaa !43
  br label %237

237:                                              ; preds = %232, %201
  %238 = phi i32 [ %236, %232 ], [ 15, %201 ]
  %239 = phi i32 [ %234, %232 ], [ 15, %201 ]
  %240 = shl i32 -1, %239
  %241 = and i32 %240, %212
  %242 = shl i32 -1, %238
  %243 = and i32 %242, %216
  %244 = shl i32 1, %239
  %245 = add i32 %220, -1
  %246 = add i32 %245, %244
  %247 = and i32 %246, %240
  %248 = shl i32 1, %238
  %249 = add i32 %224, -1
  %250 = add i32 %249, %248
  %251 = and i32 %250, %242
  %252 = sub nsw i32 %247, %241
  %253 = ashr i32 %252, %239
  %254 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 4
  store i32 %253, i32* %254, align 8, !tbaa !545
  %255 = sub nsw i32 %251, %243
  %256 = ashr i32 %255, %238
  %257 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 5
  store i32 %256, i32* %257, align 4, !tbaa !546
  br i1 %226, label %265, label %258

258:                                              ; preds = %237
  %259 = add i32 %241, 1
  %260 = ashr i32 %259, 1
  %261 = add i32 %243, 1
  %262 = ashr i32 %261, 1
  %263 = add nsw i32 %239, -1
  %264 = add nsw i32 %238, -1
  br label %265

265:                                              ; preds = %258, %237
  %266 = phi i32 [ %264, %258 ], [ %238, %237 ]
  %267 = phi i32 [ %263, %258 ], [ %239, %237 ]
  %268 = phi i32 [ %262, %258 ], [ %243, %237 ]
  %269 = phi i32 [ %260, %258 ], [ %241, %237 ]
  %270 = load i32, i32* %197, align 4, !tbaa !241
  %271 = icmp slt i32 %270, %267
  %272 = select i1 %271, i32 %270, i32 %267
  %273 = load i32, i32* %198, align 4, !tbaa !242
  %274 = icmp slt i32 %273, %266
  %275 = select i1 %274, i32 %273, i32 %266
  %276 = add nsw i32 %207, 1
  %277 = shl i32 1, %276
  %278 = mul i64 %203, 3
  %279 = add i64 %278, -2
  %280 = shl i32 1, %267
  %281 = shl i32 1, %266
  %282 = shl i32 -1, %272
  %283 = shl i32 -1, %275
  %284 = shl i32 1, %272
  %285 = add i32 %284, -1
  %286 = shl i32 1, %275
  %287 = add i32 %286, -1
  br label %294

288:                                              ; preds = %519, %400
  %289 = load i32, i32* %228, align 8, !tbaa !544
  %290 = sext i32 %289 to i64
  %291 = icmp slt i64 %297, %290
  br i1 %291, label %292, label %526

292:                                              ; preds = %288
  %293 = load i32, i32* %160, align 8, !tbaa !34
  br label %294

294:                                              ; preds = %292, %265
  %295 = phi i32 [ %208, %265 ], [ %293, %292 ]
  %296 = phi i64 [ 0, %265 ], [ %297, %292 ]
  %297 = add nuw nsw i64 %296, 1
  %298 = trunc i64 %297 to i32
  %299 = select i1 %226, i32 0, i32 %298
  %300 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 7, i64 %296, i32 4
  store i32 %299, i32* %300, align 8, !tbaa !558
  br i1 %226, label %301, label %313

301:                                              ; preds = %294
  %302 = add i32 %295, %210
  %303 = ashr i32 %302, %207
  %304 = load i32, i32* %167, align 4, !tbaa !108
  %305 = add i32 %304, %210
  %306 = ashr i32 %305, %207
  %307 = load i32, i32* %171, align 8, !tbaa !32
  %308 = add i32 %307, %210
  %309 = ashr i32 %308, %207
  %310 = load i32, i32* %175, align 4, !tbaa !107
  %311 = add i32 %310, %210
  %312 = ashr i32 %311, %207
  br label %338

313:                                              ; preds = %294
  %314 = or i32 %299, 1
  %315 = icmp eq i32 %314, 3
  %316 = or i32 %299, 2
  %317 = icmp eq i32 %316, 3
  %318 = zext i1 %317 to i32
  %319 = zext i1 %315 to i32
  %320 = shl i32 %318, %207
  %321 = xor i32 %320, -1
  %322 = add i32 %277, %321
  %323 = add i32 %322, %295
  %324 = ashr i32 %323, %276
  %325 = load i32, i32* %167, align 4, !tbaa !108
  %326 = shl i32 %319, %207
  %327 = xor i32 %326, -1
  %328 = add i32 %277, %327
  %329 = add i32 %328, %325
  %330 = ashr i32 %329, %276
  %331 = load i32, i32* %171, align 8, !tbaa !32
  %332 = add i32 %322, %331
  %333 = ashr i32 %332, %276
  %334 = load i32, i32* %175, align 4, !tbaa !107
  %335 = add i32 %328, %334
  %336 = ashr i32 %335, %276
  %337 = add i64 %279, %296
  br label %338

338:                                              ; preds = %313, %301
  %339 = phi i32 [ %303, %301 ], [ %324, %313 ]
  %340 = phi i32 [ %306, %301 ], [ %330, %313 ]
  %341 = phi i32 [ %309, %301 ], [ %333, %313 ]
  %342 = phi i32 [ %312, %301 ], [ %336, %313 ]
  %343 = phi i64 [ 0, %301 ], [ %337, %313 ]
  %344 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 7, i64 %296, i32 0
  store i32 %339, i32* %344, align 8
  %345 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 7, i64 %296, i32 1
  store i32 %340, i32* %345, align 4
  %346 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 7, i64 %296, i32 2
  store i32 %341, i32* %346, align 8
  %347 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 7, i64 %296, i32 3
  store i32 %342, i32* %347, align 4
  %348 = shl i64 %343, 32
  %349 = ashr exact i64 %348, 32
  %350 = load i32, i32* %199, align 4, !tbaa !97
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %352, label %354

352:                                              ; preds = %338
  %353 = tail call i32 @dwt_getgain_real(i32 %299) #9
  br label %356

354:                                              ; preds = %338
  %355 = tail call i32 @dwt_getgain(i32 %299) #9
  br label %356

356:                                              ; preds = %354, %352
  %357 = phi i32 [ %353, %352 ], [ %355, %354 ]
  %358 = load %struct.opj_image_comp*, %struct.opj_image_comp** %30, align 8, !tbaa !128
  %359 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %358, i64 %151, i32 6
  %360 = load i32, i32* %359, align 8, !tbaa !207
  %361 = add nsw i32 %360, %357
  %362 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %152, i64 %151, i32 7, i64 %349, i32 1
  %363 = load i32, i32* %362, align 4, !tbaa !99
  %364 = sitofp i32 %363 to double
  %365 = fmul double %364, 0x3F40000000000000
  %366 = fadd double %365, 1.000000e+00
  %367 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %152, i64 %151, i32 7, i64 %349, i32 0
  %368 = load i32, i32* %367, align 4, !tbaa !101
  %369 = sub i32 %361, %368
  %370 = tail call double @ldexp(double 1.000000e+00, i32 %369) #9
  %371 = fmul double %370, %366
  %372 = fptrunc double %371 to float
  %373 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 7, i64 %296, i32 7
  store float %372, float* %373, align 4, !tbaa !547
  %374 = load i32, i32* %367, align 4, !tbaa !101
  %375 = load i32, i32* %200, align 4, !tbaa !240
  %376 = add i32 %374, -1
  %377 = add i32 %376, %375
  %378 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 7, i64 %296, i32 6
  store i32 %377, i32* %378, align 8, !tbaa !630
  %379 = load i32, i32* %254, align 8, !tbaa !545
  %380 = mul nsw i32 %379, 3
  %381 = load i32, i32* %257, align 4, !tbaa !546
  %382 = mul nsw i32 %380, %381
  %383 = sext i32 %382 to i64
  %384 = mul nsw i64 %383, 48
  %385 = tail call noalias i8* @malloc(i64 %384) #9
  %386 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %202, i64 %203, i32 7, i64 %296, i32 5
  %387 = bitcast %struct.opj_tcd_precinct** %386 to i8**
  store i8* %385, i8** %387, align 8, !tbaa !549
  %388 = load i32, i32* %254, align 8, !tbaa !545
  %389 = load i32, i32* %257, align 4, !tbaa !546
  %390 = mul i32 %388, 3
  %391 = mul i32 %390, %389
  %392 = icmp sgt i32 %391, 0
  br i1 %392, label %393, label %400

393:                                              ; preds = %356
  %394 = getelementptr inbounds i8, i8* %385, i64 24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %394, i8 0, i64 24, i1 false)
  %395 = load i32, i32* %254, align 8, !tbaa !545
  %396 = load i32, i32* %257, align 4, !tbaa !546
  %397 = mul i32 %395, 3
  %398 = mul i32 %397, %396
  %399 = icmp sgt i32 %398, 1
  br i1 %399, label %405, label %400

400:                                              ; preds = %405, %393, %356
  %401 = phi i32 [ %389, %356 ], [ %396, %393 ], [ %412, %405 ]
  %402 = phi i32 [ %388, %356 ], [ %395, %393 ], [ %411, %405 ]
  %403 = mul nsw i32 %401, %402
  %404 = icmp sgt i32 %403, 0
  br i1 %404, label %417, label %288

405:                                              ; preds = %405, %393
  %406 = phi i64 [ %409, %405 ], [ 1, %393 ]
  %407 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %386, align 8, !tbaa !549
  %408 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %407, i64 %406, i32 6, i32 0
  %409 = add nuw nsw i64 %406, 1
  %410 = bitcast %struct.opj_tcd_cblk_enc** %408 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %410, i8 0, i64 24, i1 false)
  %411 = load i32, i32* %254, align 8, !tbaa !545
  %412 = load i32, i32* %257, align 4, !tbaa !546
  %413 = mul i32 %411, 3
  %414 = mul i32 %413, %412
  %415 = sext i32 %414 to i64
  %416 = icmp slt i64 %409, %415
  br i1 %416, label %405, label %400

417:                                              ; preds = %519, %400
  %418 = phi i64 [ %520, %519 ], [ 0, %400 ]
  %419 = phi i32 [ %521, %519 ], [ %402, %400 ]
  %420 = trunc i64 %418 to i32
  %421 = srem i32 %420, %419
  %422 = shl i32 %421, %267
  %423 = add nsw i32 %422, %269
  %424 = sdiv i32 %420, %419
  %425 = shl i32 %424, %266
  %426 = add nsw i32 %425, %268
  %427 = add nsw i32 %423, %280
  %428 = add nsw i32 %426, %281
  %429 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %386, align 8, !tbaa !549
  %430 = load i32, i32* %344, align 8, !tbaa !555
  %431 = icmp sgt i32 %423, %430
  %432 = select i1 %431, i32 %423, i32 %430
  %433 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %429, i64 %418, i32 0
  store i32 %432, i32* %433, align 8, !tbaa !656
  %434 = load i32, i32* %345, align 4, !tbaa !557
  %435 = icmp sgt i32 %426, %434
  %436 = select i1 %435, i32 %426, i32 %434
  %437 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %429, i64 %418, i32 1
  store i32 %436, i32* %437, align 4, !tbaa !657
  %438 = load i32, i32* %346, align 8, !tbaa !639
  %439 = icmp slt i32 %427, %438
  %440 = select i1 %439, i32 %427, i32 %438
  %441 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %429, i64 %418, i32 2
  store i32 %440, i32* %441, align 8, !tbaa !658
  %442 = load i32, i32* %347, align 4, !tbaa !640
  %443 = icmp slt i32 %428, %442
  %444 = select i1 %443, i32 %428, i32 %442
  %445 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %429, i64 %418, i32 3
  store i32 %444, i32* %445, align 4, !tbaa !659
  %446 = and i32 %432, %282
  %447 = and i32 %436, %283
  %448 = add i32 %285, %440
  %449 = and i32 %448, %282
  %450 = add i32 %287, %444
  %451 = and i32 %450, %283
  %452 = sub nsw i32 %449, %446
  %453 = ashr i32 %452, %272
  %454 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %429, i64 %418, i32 4
  store i32 %453, i32* %454, align 8, !tbaa !550
  %455 = sub nsw i32 %451, %447
  %456 = ashr i32 %455, %275
  %457 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %429, i64 %418, i32 5
  store i32 %456, i32* %457, align 4, !tbaa !552
  %458 = mul nsw i32 %456, %453
  %459 = sext i32 %458 to i64
  %460 = tail call noalias i8* @calloc(i64 %459, i64 64) #9
  %461 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %429, i64 %418, i32 6, i32 0
  %462 = bitcast %struct.opj_tcd_cblk_enc** %461 to i8**
  store i8* %460, i8** %462, align 8, !tbaa !15
  %463 = load i32, i32* %454, align 8, !tbaa !550
  %464 = load i32, i32* %457, align 4, !tbaa !552
  %465 = tail call %struct.opj_tgt_tree* @tgt_create(i32 %463, i32 %464) #9
  %466 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %429, i64 %418, i32 7
  store %struct.opj_tgt_tree* %465, %struct.opj_tgt_tree** %466, align 8, !tbaa !627
  %467 = load i32, i32* %454, align 8, !tbaa !550
  %468 = load i32, i32* %457, align 4, !tbaa !552
  %469 = tail call %struct.opj_tgt_tree* @tgt_create(i32 %467, i32 %468) #9
  %470 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %429, i64 %418, i32 8
  store %struct.opj_tgt_tree* %469, %struct.opj_tgt_tree** %470, align 8, !tbaa !628
  %471 = load i32, i32* %454, align 8, !tbaa !550
  %472 = load i32, i32* %457, align 4, !tbaa !552
  %473 = mul nsw i32 %472, %471
  %474 = icmp sgt i32 %473, 0
  br i1 %474, label %475, label %519

475:                                              ; preds = %475, %417
  %476 = phi i64 [ %513, %475 ], [ 0, %417 ]
  %477 = phi i32 [ %514, %475 ], [ %471, %417 ]
  %478 = trunc i64 %476 to i32
  %479 = srem i32 %478, %477
  %480 = shl i32 %479, %272
  %481 = add nsw i32 %480, %446
  %482 = sdiv i32 %478, %477
  %483 = shl i32 %482, %275
  %484 = add nsw i32 %483, %447
  %485 = add nsw i32 %481, %284
  %486 = add nsw i32 %484, %286
  %487 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %461, align 8, !tbaa !15
  %488 = load i32, i32* %433, align 8, !tbaa !656
  %489 = icmp sgt i32 %481, %488
  %490 = select i1 %489, i32 %481, i32 %488
  %491 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %487, i64 %476, i32 3
  store i32 %490, i32* %491, align 8, !tbaa !553
  %492 = load i32, i32* %437, align 4, !tbaa !657
  %493 = icmp sgt i32 %484, %492
  %494 = select i1 %493, i32 %484, i32 %492
  %495 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %487, i64 %476, i32 4
  store i32 %494, i32* %495, align 4, !tbaa !556
  %496 = load i32, i32* %441, align 8, !tbaa !658
  %497 = icmp slt i32 %485, %496
  %498 = select i1 %497, i32 %485, i32 %496
  %499 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %487, i64 %476, i32 5
  store i32 %498, i32* %499, align 8, !tbaa !559
  %500 = load i32, i32* %445, align 4, !tbaa !659
  %501 = icmp slt i32 %486, %500
  %502 = select i1 %501, i32 %486, i32 %500
  %503 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %487, i64 %476, i32 6
  store i32 %502, i32* %503, align 4, !tbaa !560
  %504 = tail call noalias i8* @calloc(i64 8194, i64 1) #9
  %505 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %487, i64 %476, i32 0
  %506 = getelementptr inbounds i8, i8* %504, i64 2
  store i8* %506, i8** %505, align 8, !tbaa !580
  %507 = tail call noalias i8* @calloc(i64 100, i64 24) #9
  %508 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %487, i64 %476, i32 1
  %509 = bitcast %struct.opj_tcd_layer** %508 to i8**
  store i8* %507, i8** %509, align 8, !tbaa !631
  %510 = tail call noalias i8* @calloc(i64 100, i64 24) #9
  %511 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %487, i64 %476, i32 2
  %512 = bitcast %struct.opj_tcd_pass** %511 to i8**
  store i8* %510, i8** %512, align 8, !tbaa !581
  %513 = add nuw nsw i64 %476, 1
  %514 = load i32, i32* %454, align 8, !tbaa !550
  %515 = load i32, i32* %457, align 4, !tbaa !552
  %516 = mul nsw i32 %515, %514
  %517 = sext i32 %516 to i64
  %518 = icmp slt i64 %513, %517
  br i1 %518, label %475, label %519

519:                                              ; preds = %475, %417
  %520 = add nuw nsw i64 %418, 1
  %521 = load i32, i32* %254, align 8, !tbaa !545
  %522 = load i32, i32* %257, align 4, !tbaa !546
  %523 = mul nsw i32 %522, %521
  %524 = sext i32 %523 to i64
  %525 = icmp slt i64 %520, %524
  br i1 %525, label %417, label %288

526:                                              ; preds = %288
  %527 = load i32, i32* %186, align 8, !tbaa !35
  %528 = add nuw nsw i64 %203, 1
  %529 = sext i32 %527 to i64
  %530 = icmp slt i64 %528, %529
  br i1 %530, label %531, label %534

531:                                              ; preds = %526
  %532 = add nuw nsw i32 %205, 1
  %533 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %190, align 8, !tbaa !37
  br label %201

534:                                              ; preds = %526, %149
  %535 = add nuw nsw i64 %151, 1
  %536 = load i32, i32* %70, align 8, !tbaa !542
  %537 = sext i32 %536 to i64
  %538 = icmp slt i64 %535, %537
  br i1 %538, label %539, label %541

539:                                              ; preds = %534
  %540 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %142, align 8, !tbaa !543
  br label %149

541:                                              ; preds = %534, %137
  ret void
}

declare double @ldexp(double, i32) local_unnamed_addr

; Function Attrs: nounwind uwtable
define void @tcd_free_encode(%struct.opj_tcd* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %3 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %2, align 8, !tbaa !359
  %4 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %3, i64 0, i32 2
  %5 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %4, align 8, !tbaa !360
  %6 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %5, i64 0, i32 4
  %7 = load i32, i32* %6, align 8, !tbaa !542
  %8 = icmp sgt i32 %7, 0
  %9 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %5, i64 0, i32 5
  br i1 %8, label %10, label %106

10:                                               ; preds = %99, %1
  %11 = phi i64 [ %102, %99 ], [ 0, %1 ]
  %12 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %9, align 8, !tbaa !543
  %13 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %12, i64 %11, i32 4
  %14 = load i32, i32* %13, align 8, !tbaa !35
  %15 = icmp sgt i32 %14, 0
  %16 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %12, i64 %11, i32 5
  br i1 %15, label %17, label %99

17:                                               ; preds = %94, %10
  %18 = phi i32 [ %95, %94 ], [ %14, %10 ]
  %19 = phi i64 [ %96, %94 ], [ 0, %10 ]
  %20 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %16, align 8, !tbaa !37
  %21 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %19, i32 6
  %22 = load i32, i32* %21, align 8, !tbaa !544
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %94

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %19, i32 4
  %26 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %19, i32 5
  br label %27

27:                                               ; preds = %85, %24
  %28 = phi i64 [ 0, %24 ], [ %88, %85 ]
  %29 = load i32, i32* %25, align 8, !tbaa !545
  %30 = load i32, i32* %26, align 4, !tbaa !546
  %31 = mul nsw i32 %30, %29
  %32 = icmp sgt i32 %31, 0
  %33 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %19, i32 7, i64 %28, i32 5
  br i1 %32, label %34, label %85

34:                                               ; preds = %76, %27
  %35 = phi i64 [ %79, %76 ], [ 0, %27 ]
  %36 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %33, align 8, !tbaa !549
  %37 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %36, i64 %35, i32 7
  %38 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %37, align 8, !tbaa !627
  %39 = icmp eq %struct.opj_tgt_tree* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %34
  tail call void @tgt_destroy(%struct.opj_tgt_tree* nonnull %38) #9
  store %struct.opj_tgt_tree* null, %struct.opj_tgt_tree** %37, align 8, !tbaa !627
  br label %41

41:                                               ; preds = %40, %34
  %42 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %36, i64 %35, i32 8
  %43 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %42, align 8, !tbaa !628
  %44 = icmp eq %struct.opj_tgt_tree* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @tgt_destroy(%struct.opj_tgt_tree* nonnull %43) #9
  store %struct.opj_tgt_tree* null, %struct.opj_tgt_tree** %42, align 8, !tbaa !628
  br label %46

46:                                               ; preds = %45, %41
  %47 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %36, i64 %35, i32 4
  %48 = load i32, i32* %47, align 8, !tbaa !550
  %49 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %36, i64 %35, i32 5
  %50 = load i32, i32* %49, align 4, !tbaa !552
  %51 = mul nsw i32 %50, %48
  %52 = icmp sgt i32 %51, 0
  %53 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %36, i64 %35, i32 6, i32 0
  %54 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %53, align 8, !tbaa !15
  br i1 %52, label %55, label %76

55:                                               ; preds = %55, %46
  %56 = phi i64 [ %69, %55 ], [ 0, %46 ]
  %57 = phi %struct.opj_tcd_cblk_enc* [ %75, %55 ], [ %54, %46 ]
  %58 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %57, i64 %56, i32 0
  %59 = load i8*, i8** %58, align 8, !tbaa !580
  %60 = getelementptr inbounds i8, i8* %59, i64 -2
  tail call void @free(i8* nonnull %60) #9
  %61 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %53, align 8, !tbaa !15
  %62 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %61, i64 %56, i32 1
  %63 = bitcast %struct.opj_tcd_layer** %62 to i8**
  %64 = load i8*, i8** %63, align 8, !tbaa !631
  tail call void @free(i8* %64) #9
  %65 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %53, align 8, !tbaa !15
  %66 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %65, i64 %56, i32 2
  %67 = bitcast %struct.opj_tcd_pass** %66 to i8**
  %68 = load i8*, i8** %67, align 8, !tbaa !581
  tail call void @free(i8* %68) #9
  %69 = add nuw nsw i64 %56, 1
  %70 = load i32, i32* %47, align 8, !tbaa !550
  %71 = load i32, i32* %49, align 4, !tbaa !552
  %72 = mul nsw i32 %71, %70
  %73 = sext i32 %72 to i64
  %74 = icmp slt i64 %69, %73
  %75 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %53, align 8, !tbaa !15
  br i1 %74, label %55, label %76

76:                                               ; preds = %55, %46
  %77 = phi %struct.opj_tcd_cblk_enc* [ %54, %46 ], [ %75, %55 ]
  %78 = bitcast %struct.opj_tcd_cblk_enc* %77 to i8*
  tail call void @free(i8* %78) #9
  %79 = add nuw nsw i64 %35, 1
  %80 = load i32, i32* %25, align 8, !tbaa !545
  %81 = load i32, i32* %26, align 4, !tbaa !546
  %82 = mul nsw i32 %81, %80
  %83 = sext i32 %82 to i64
  %84 = icmp slt i64 %79, %83
  br i1 %84, label %34, label %85

85:                                               ; preds = %76, %27
  %86 = bitcast %struct.opj_tcd_precinct** %33 to i8**
  %87 = load i8*, i8** %86, align 8, !tbaa !549
  tail call void @free(i8* %87) #9
  store %struct.opj_tcd_precinct* null, %struct.opj_tcd_precinct** %33, align 8, !tbaa !549
  %88 = add nuw nsw i64 %28, 1
  %89 = load i32, i32* %21, align 8, !tbaa !544
  %90 = sext i32 %89 to i64
  %91 = icmp slt i64 %88, %90
  br i1 %91, label %27, label %92

92:                                               ; preds = %85
  %93 = load i32, i32* %13, align 8, !tbaa !35
  br label %94

94:                                               ; preds = %92, %17
  %95 = phi i32 [ %93, %92 ], [ %18, %17 ]
  %96 = add nuw nsw i64 %19, 1
  %97 = sext i32 %95 to i64
  %98 = icmp slt i64 %96, %97
  br i1 %98, label %17, label %99

99:                                               ; preds = %94, %10
  %100 = bitcast %struct.opj_tcd_resolution** %16 to i8**
  %101 = load i8*, i8** %100, align 8, !tbaa !37
  tail call void @free(i8* %101) #9
  store %struct.opj_tcd_resolution* null, %struct.opj_tcd_resolution** %16, align 8, !tbaa !37
  %102 = add nuw nsw i64 %11, 1
  %103 = load i32, i32* %6, align 8, !tbaa !542
  %104 = sext i32 %103 to i64
  %105 = icmp slt i64 %102, %104
  br i1 %105, label %10, label %106

106:                                              ; preds = %99, %1
  %107 = bitcast %struct.opj_tcd_tilecomp** %9 to i8**
  %108 = load i8*, i8** %107, align 8, !tbaa !543
  tail call void @free(i8* %108) #9
  store %struct.opj_tcd_tilecomp* null, %struct.opj_tcd_tilecomp** %9, align 8, !tbaa !543
  %109 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %2, align 8, !tbaa !359
  %110 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %109, i64 0, i32 2
  %111 = bitcast %struct.opj_tcd_tile** %110 to i8**
  %112 = load i8*, i8** %111, align 8, !tbaa !360
  tail call void @free(i8* %112) #9
  %113 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %2, align 8, !tbaa !359
  %114 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %113, i64 0, i32 2
  store %struct.opj_tcd_tile* null, %struct.opj_tcd_tile** %114, align 8, !tbaa !360
  ret void
}

; Function Attrs: nounwind uwtable
define void @tcd_init_encode(%struct.opj_tcd* nocapture readonly, %struct.opj_image* nocapture readonly, %struct.opj_cp* nocapture readonly, i32) #0 {
  %5 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 28
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 18
  %8 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %9 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 13
  %10 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 15
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 0
  %12 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 14
  %13 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 16
  %14 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 1
  %15 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 2
  %16 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 3
  %17 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 4
  %18 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 4
  %19 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 6
  %20 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 3
  %21 = load %struct.opj_tcp*, %struct.opj_tcp** %5, align 8, !tbaa !139
  %22 = load i32, i32* %7, align 8, !tbaa !136
  %23 = srem i32 %3, %22
  %24 = sdiv i32 %3, %22
  %25 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %8, align 8, !tbaa !359
  %26 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %25, i64 0, i32 2
  %27 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %26, align 8, !tbaa !360
  %28 = load i32, i32* %9, align 8, !tbaa !205
  %29 = load i32, i32* %10, align 8, !tbaa !203
  %30 = mul nsw i32 %29, %23
  %31 = add nsw i32 %30, %28
  %32 = load i32, i32* %11, align 8, !tbaa !201
  %33 = icmp sgt i32 %31, %32
  %34 = select i1 %33, i32 %31, i32 %32
  %35 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %27, i64 0, i32 0
  store i32 %34, i32* %35, align 8, !tbaa !652
  %36 = load i32, i32* %12, align 4, !tbaa !206
  %37 = load i32, i32* %13, align 4, !tbaa !204
  %38 = mul nsw i32 %37, %24
  %39 = add nsw i32 %38, %36
  %40 = load i32, i32* %14, align 4, !tbaa !202
  %41 = icmp sgt i32 %39, %40
  %42 = select i1 %41, i32 %39, i32 %40
  %43 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %27, i64 0, i32 1
  store i32 %42, i32* %43, align 4, !tbaa !653
  %44 = add nsw i32 %23, 1
  %45 = mul nsw i32 %29, %44
  %46 = add nsw i32 %45, %28
  %47 = load i32, i32* %15, align 8, !tbaa !199
  %48 = icmp slt i32 %46, %47
  %49 = select i1 %48, i32 %46, i32 %47
  %50 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %27, i64 0, i32 2
  store i32 %49, i32* %50, align 8, !tbaa !654
  %51 = add nsw i32 %24, 1
  %52 = mul nsw i32 %37, %51
  %53 = add nsw i32 %52, %36
  %54 = load i32, i32* %16, align 4, !tbaa !200
  %55 = icmp slt i32 %53, %54
  %56 = select i1 %55, i32 %53, i32 %54
  %57 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %27, i64 0, i32 3
  store i32 %56, i32* %57, align 4, !tbaa !655
  %58 = load i32, i32* %17, align 8, !tbaa !127
  %59 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %27, i64 0, i32 4
  store i32 %58, i32* %59, align 8, !tbaa !542
  %60 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 %6, i32 3
  %61 = load i32, i32* %60, align 4, !tbaa !219
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %69

63:                                               ; preds = %4
  %64 = sub nsw i32 %49, %34
  %65 = mul nsw i32 %58, %64
  %66 = sub nsw i32 %56, %42
  %67 = mul nsw i32 %65, %66
  %68 = sext i32 %61 to i64
  br label %74

69:                                               ; preds = %121, %4
  %70 = icmp sgt i32 %58, 0
  br i1 %70, label %71, label %490

71:                                               ; preds = %69
  %72 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 %6, i32 15
  %73 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %27, i64 0, i32 5
  br label %124

74:                                               ; preds = %121, %63
  %75 = phi i64 [ 0, %63 ], [ %122, %121 ]
  %76 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 %6, i32 5, i64 %75
  %77 = load float, float* %76, align 4, !tbaa !112
  %78 = fcmp une float %77, 0.000000e+00
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  store float 0.000000e+00, float* %76, align 4, !tbaa !112
  br label %121

80:                                               ; preds = %74
  %81 = load i8, i8* %18, align 8, !tbaa !149
  %82 = icmp eq i8 %81, 0
  %83 = load %struct.opj_image_comp*, %struct.opj_image_comp** %19, align 8, !tbaa !128
  %84 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %83, i64 0, i32 6
  %85 = load i32, i32* %84, align 8, !tbaa !207
  %86 = mul nsw i32 %67, %85
  %87 = sitofp i32 %86 to float
  %88 = fmul float %77, 8.000000e+00
  %89 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %83, i64 0, i32 0
  %90 = load i32, i32* %89, align 8, !tbaa !208
  %91 = sitofp i32 %90 to float
  %92 = fmul float %88, %91
  %93 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %83, i64 0, i32 1
  %94 = load i32, i32* %93, align 4, !tbaa !209
  %95 = sitofp i32 %94 to float
  %96 = fmul float %92, %95
  %97 = fdiv float %87, %96
  br i1 %82, label %105, label %98

98:                                               ; preds = %80
  %99 = load i32, i32* %20, align 4, !tbaa !341
  %100 = mul i32 %99, 14
  %101 = add i32 %100, -14
  %102 = sdiv i32 %101, %61
  %103 = sitofp i32 %102 to float
  %104 = fsub float %97, %103
  br label %105

105:                                              ; preds = %98, %80
  %106 = phi float [ %104, %98 ], [ %97, %80 ]
  store float %106, float* %76, align 4, !tbaa !112
  %107 = fcmp une float %106, 0.000000e+00
  br i1 %107, label %108, label %121

108:                                              ; preds = %105
  %109 = icmp eq i64 %75, 0
  br i1 %109, label %118, label %110

110:                                              ; preds = %108
  %111 = add nsw i64 %75, -1
  %112 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 %6, i32 5, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !112
  %114 = fadd float %113, 1.000000e+01
  %115 = fcmp olt float %106, %114
  br i1 %115, label %116, label %121

116:                                              ; preds = %110
  %117 = fadd float %113, 2.000000e+01
  store float %117, float* %76, align 4, !tbaa !112
  br label %121

118:                                              ; preds = %108
  %119 = fcmp olt float %106, 3.000000e+01
  br i1 %119, label %120, label %121

120:                                              ; preds = %118
  store float 3.000000e+01, float* %76, align 4, !tbaa !112
  br label %121

121:                                              ; preds = %120, %118, %116, %110, %105, %79
  %122 = add nuw nsw i64 %75, 1
  %123 = icmp slt i64 %122, %68
  br i1 %123, label %74, label %69

124:                                              ; preds = %485, %71
  %125 = phi i32 [ %56, %71 ], [ %489, %485 ]
  %126 = phi i32 [ %49, %71 ], [ %488, %485 ]
  %127 = phi i32 [ %42, %71 ], [ %487, %485 ]
  %128 = phi i32 [ %34, %71 ], [ %486, %485 ]
  %129 = phi i64 [ 0, %71 ], [ %481, %485 ]
  %130 = load %struct.opj_tccp*, %struct.opj_tccp** %72, align 8, !tbaa !162
  %131 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %73, align 8, !tbaa !543
  %132 = load %struct.opj_image_comp*, %struct.opj_image_comp** %19, align 8, !tbaa !128
  %133 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %132, i64 %129, i32 0
  %134 = load i32, i32* %133, align 8, !tbaa !208
  %135 = add i32 %134, -1
  %136 = add i32 %135, %128
  %137 = sdiv i32 %136, %134
  %138 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %131, i64 %129, i32 0
  store i32 %137, i32* %138, align 8, !tbaa !34
  %139 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %132, i64 %129, i32 1
  %140 = load i32, i32* %139, align 4, !tbaa !209
  %141 = add i32 %140, -1
  %142 = add i32 %141, %127
  %143 = sdiv i32 %142, %140
  %144 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %131, i64 %129, i32 1
  store i32 %143, i32* %144, align 4, !tbaa !108
  %145 = add i32 %135, %126
  %146 = sdiv i32 %145, %134
  %147 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %131, i64 %129, i32 2
  store i32 %146, i32* %147, align 8, !tbaa !32
  %148 = add i32 %141, %125
  %149 = sdiv i32 %148, %140
  %150 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %131, i64 %129, i32 3
  store i32 %149, i32* %150, align 4, !tbaa !107
  %151 = sub nsw i32 %146, %137
  %152 = sub nsw i32 %149, %143
  %153 = mul nsw i32 %152, %151
  %154 = sext i32 %153 to i64
  %155 = shl nsw i64 %154, 2
  %156 = tail call noalias i8* @malloc(i64 %155) #9
  %157 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %131, i64 %129, i32 6
  %158 = bitcast i32** %157 to i8**
  store i8* %156, i8** %158, align 8, !tbaa !36
  %159 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %130, i64 %129, i32 1
  %160 = load i32, i32* %159, align 4, !tbaa !95
  %161 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %131, i64 %129, i32 4
  store i32 %160, i32* %161, align 8, !tbaa !35
  %162 = icmp sgt i32 %160, 0
  br i1 %162, label %163, label %480

163:                                              ; preds = %124
  %164 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %131, i64 %129, i32 5
  %165 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %130, i64 %129, i32 0
  %166 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %130, i64 %129, i32 2
  %167 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %130, i64 %129, i32 3
  %168 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %130, i64 %129, i32 5
  %169 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %130, i64 %129, i32 8
  br label %170

170:                                              ; preds = %474, %163
  %171 = phi i64 [ 0, %163 ], [ %476, %474 ]
  %172 = phi i32 [ %160, %163 ], [ %475, %474 ]
  %173 = phi i32 [ 0, %163 ], [ %477, %474 ]
  %174 = xor i32 %173, -1
  %175 = add i32 %172, %174
  %176 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %164, align 8, !tbaa !37
  %177 = load i32, i32* %138, align 8, !tbaa !34
  %178 = shl nsw i32 -1, %175
  %179 = xor i32 %178, -1
  %180 = add i32 %177, %179
  %181 = ashr i32 %180, %175
  %182 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 0
  store i32 %181, i32* %182, align 8, !tbaa !40
  %183 = load i32, i32* %144, align 4, !tbaa !108
  %184 = add i32 %183, %179
  %185 = ashr i32 %184, %175
  %186 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 1
  store i32 %185, i32* %186, align 4, !tbaa !42
  %187 = load i32, i32* %147, align 8, !tbaa !32
  %188 = add i32 %187, %179
  %189 = ashr i32 %188, %175
  %190 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 2
  store i32 %189, i32* %190, align 8, !tbaa !38
  %191 = load i32, i32* %150, align 4, !tbaa !107
  %192 = add i32 %191, %179
  %193 = ashr i32 %192, %175
  %194 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 3
  store i32 %193, i32* %194, align 4, !tbaa !41
  %195 = icmp eq i64 %171, 0
  %196 = select i1 %195, i32 1, i32 3
  %197 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 6
  store i32 %196, i32* %197, align 8, !tbaa !544
  %198 = load i32, i32* %165, align 4, !tbaa !221
  %199 = and i32 %198, 1
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %206, label %201

201:                                              ; preds = %170
  %202 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %130, i64 %129, i32 10, i64 %171
  %203 = load i32, i32* %202, align 4, !tbaa !43
  %204 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %130, i64 %129, i32 11, i64 %171
  %205 = load i32, i32* %204, align 4, !tbaa !43
  br label %206

206:                                              ; preds = %201, %170
  %207 = phi i32 [ %205, %201 ], [ 15, %170 ]
  %208 = phi i32 [ %203, %201 ], [ 15, %170 ]
  %209 = shl i32 -1, %208
  %210 = and i32 %209, %181
  %211 = shl i32 -1, %207
  %212 = and i32 %211, %185
  %213 = shl i32 1, %208
  %214 = add i32 %189, -1
  %215 = add i32 %214, %213
  %216 = and i32 %215, %209
  %217 = shl i32 1, %207
  %218 = add i32 %193, -1
  %219 = add i32 %218, %217
  %220 = and i32 %219, %211
  %221 = sub nsw i32 %216, %210
  %222 = ashr i32 %221, %208
  %223 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 4
  store i32 %222, i32* %223, align 8, !tbaa !545
  %224 = sub nsw i32 %220, %212
  %225 = ashr i32 %224, %207
  %226 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 5
  store i32 %225, i32* %226, align 4, !tbaa !546
  br i1 %195, label %234, label %227

227:                                              ; preds = %206
  %228 = add i32 %210, 1
  %229 = ashr i32 %228, 1
  %230 = add i32 %212, 1
  %231 = ashr i32 %230, 1
  %232 = add nsw i32 %208, -1
  %233 = add nsw i32 %207, -1
  br label %234

234:                                              ; preds = %227, %206
  %235 = phi i32 [ %233, %227 ], [ %207, %206 ]
  %236 = phi i32 [ %232, %227 ], [ %208, %206 ]
  %237 = phi i32 [ %231, %227 ], [ %212, %206 ]
  %238 = phi i32 [ %229, %227 ], [ %210, %206 ]
  %239 = load i32, i32* %166, align 4, !tbaa !241
  %240 = icmp slt i32 %239, %236
  %241 = select i1 %240, i32 %239, i32 %236
  %242 = load i32, i32* %167, align 4, !tbaa !242
  %243 = icmp slt i32 %242, %235
  %244 = select i1 %243, i32 %242, i32 %235
  %245 = add nsw i32 %175, 1
  %246 = shl i32 1, %245
  %247 = mul i64 %171, 3
  %248 = add i64 %247, -2
  %249 = shl i32 1, %236
  %250 = shl i32 1, %235
  %251 = shl i32 -1, %241
  %252 = shl i32 -1, %244
  %253 = shl i32 1, %241
  %254 = add i32 %253, -1
  %255 = shl i32 1, %244
  %256 = add i32 %255, -1
  br label %263

257:                                              ; preds = %467, %325
  %258 = load i32, i32* %197, align 8, !tbaa !544
  %259 = sext i32 %258 to i64
  %260 = icmp slt i64 %266, %259
  br i1 %260, label %261, label %474

261:                                              ; preds = %257
  %262 = load i32, i32* %138, align 8, !tbaa !34
  br label %263

263:                                              ; preds = %261, %234
  %264 = phi i32 [ %177, %234 ], [ %262, %261 ]
  %265 = phi i64 [ 0, %234 ], [ %266, %261 ]
  %266 = add nuw nsw i64 %265, 1
  %267 = trunc i64 %266 to i32
  %268 = select i1 %195, i32 0, i32 %267
  %269 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 7, i64 %265, i32 4
  store i32 %268, i32* %269, align 8, !tbaa !558
  br i1 %195, label %270, label %282

270:                                              ; preds = %263
  %271 = add i32 %264, %179
  %272 = ashr i32 %271, %175
  %273 = load i32, i32* %144, align 4, !tbaa !108
  %274 = add i32 %273, %179
  %275 = ashr i32 %274, %175
  %276 = load i32, i32* %147, align 8, !tbaa !32
  %277 = add i32 %276, %179
  %278 = ashr i32 %277, %175
  %279 = load i32, i32* %150, align 4, !tbaa !107
  %280 = add i32 %279, %179
  %281 = ashr i32 %280, %175
  br label %307

282:                                              ; preds = %263
  %283 = or i32 %268, 1
  %284 = icmp eq i32 %283, 3
  %285 = or i32 %268, 2
  %286 = icmp eq i32 %285, 3
  %287 = zext i1 %286 to i32
  %288 = zext i1 %284 to i32
  %289 = shl i32 %287, %175
  %290 = xor i32 %289, -1
  %291 = add i32 %246, %290
  %292 = add i32 %291, %264
  %293 = ashr i32 %292, %245
  %294 = load i32, i32* %144, align 4, !tbaa !108
  %295 = shl i32 %288, %175
  %296 = xor i32 %295, -1
  %297 = add i32 %246, %296
  %298 = add i32 %297, %294
  %299 = ashr i32 %298, %245
  %300 = load i32, i32* %147, align 8, !tbaa !32
  %301 = add i32 %291, %300
  %302 = ashr i32 %301, %245
  %303 = load i32, i32* %150, align 4, !tbaa !107
  %304 = add i32 %297, %303
  %305 = ashr i32 %304, %245
  %306 = add i64 %248, %265
  br label %307

307:                                              ; preds = %282, %270
  %308 = phi i32 [ %272, %270 ], [ %293, %282 ]
  %309 = phi i32 [ %275, %270 ], [ %299, %282 ]
  %310 = phi i32 [ %278, %270 ], [ %302, %282 ]
  %311 = phi i32 [ %281, %270 ], [ %305, %282 ]
  %312 = phi i64 [ 0, %270 ], [ %306, %282 ]
  %313 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 7, i64 %265, i32 0
  store i32 %308, i32* %313, align 8
  %314 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 7, i64 %265, i32 1
  store i32 %309, i32* %314, align 4
  %315 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 7, i64 %265, i32 2
  store i32 %310, i32* %315, align 8
  %316 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 7, i64 %265, i32 3
  store i32 %311, i32* %316, align 4
  %317 = shl i64 %312, 32
  %318 = ashr exact i64 %317, 32
  %319 = load i32, i32* %168, align 4, !tbaa !97
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %323

321:                                              ; preds = %307
  %322 = tail call i32 @dwt_getgain_real(i32 %268) #9
  br label %325

323:                                              ; preds = %307
  %324 = tail call i32 @dwt_getgain(i32 %268) #9
  br label %325

325:                                              ; preds = %323, %321
  %326 = phi i32 [ %322, %321 ], [ %324, %323 ]
  %327 = load %struct.opj_image_comp*, %struct.opj_image_comp** %19, align 8, !tbaa !128
  %328 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %327, i64 %129, i32 6
  %329 = load i32, i32* %328, align 8, !tbaa !207
  %330 = add nsw i32 %329, %326
  %331 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %130, i64 %129, i32 7, i64 %318, i32 1
  %332 = load i32, i32* %331, align 4, !tbaa !99
  %333 = sitofp i32 %332 to double
  %334 = fmul double %333, 0x3F40000000000000
  %335 = fadd double %334, 1.000000e+00
  %336 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %130, i64 %129, i32 7, i64 %318, i32 0
  %337 = load i32, i32* %336, align 4, !tbaa !101
  %338 = sub i32 %330, %337
  %339 = tail call double @ldexp(double 1.000000e+00, i32 %338) #9
  %340 = fmul double %339, %335
  %341 = fptrunc double %340 to float
  %342 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 7, i64 %265, i32 7
  store float %341, float* %342, align 4, !tbaa !547
  %343 = load i32, i32* %336, align 4, !tbaa !101
  %344 = load i32, i32* %169, align 4, !tbaa !240
  %345 = add i32 %343, -1
  %346 = add i32 %345, %344
  %347 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 7, i64 %265, i32 6
  store i32 %346, i32* %347, align 8, !tbaa !630
  %348 = load i32, i32* %223, align 8, !tbaa !545
  %349 = load i32, i32* %226, align 4, !tbaa !546
  %350 = mul nsw i32 %349, %348
  %351 = icmp sgt i32 %350, 0
  br i1 %351, label %352, label %257

352:                                              ; preds = %325
  %353 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %176, i64 %171, i32 7, i64 %265, i32 5
  br label %354

354:                                              ; preds = %467, %352
  %355 = phi i64 [ 0, %352 ], [ %468, %467 ]
  %356 = phi i32 [ %348, %352 ], [ %469, %467 ]
  %357 = trunc i64 %355 to i32
  %358 = srem i32 %357, %356
  %359 = shl i32 %358, %236
  %360 = add nsw i32 %359, %238
  %361 = sdiv i32 %357, %356
  %362 = shl i32 %361, %235
  %363 = add nsw i32 %362, %237
  %364 = add nsw i32 %360, %249
  %365 = add nsw i32 %363, %250
  %366 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %353, align 8, !tbaa !549
  %367 = load i32, i32* %313, align 8, !tbaa !555
  %368 = icmp sgt i32 %360, %367
  %369 = select i1 %368, i32 %360, i32 %367
  %370 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %366, i64 %355, i32 0
  store i32 %369, i32* %370, align 8, !tbaa !656
  %371 = load i32, i32* %314, align 4, !tbaa !557
  %372 = icmp sgt i32 %363, %371
  %373 = select i1 %372, i32 %363, i32 %371
  %374 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %366, i64 %355, i32 1
  store i32 %373, i32* %374, align 4, !tbaa !657
  %375 = load i32, i32* %315, align 8, !tbaa !639
  %376 = icmp slt i32 %364, %375
  %377 = select i1 %376, i32 %364, i32 %375
  %378 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %366, i64 %355, i32 2
  store i32 %377, i32* %378, align 8, !tbaa !658
  %379 = load i32, i32* %316, align 4, !tbaa !640
  %380 = icmp slt i32 %365, %379
  %381 = select i1 %380, i32 %365, i32 %379
  %382 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %366, i64 %355, i32 3
  store i32 %381, i32* %382, align 4, !tbaa !659
  %383 = and i32 %369, %251
  %384 = and i32 %373, %252
  %385 = add i32 %254, %377
  %386 = and i32 %385, %251
  %387 = add i32 %256, %381
  %388 = and i32 %387, %252
  %389 = sub nsw i32 %386, %383
  %390 = ashr i32 %389, %241
  %391 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %366, i64 %355, i32 4
  store i32 %390, i32* %391, align 8, !tbaa !550
  %392 = sub nsw i32 %388, %384
  %393 = ashr i32 %392, %244
  %394 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %366, i64 %355, i32 5
  store i32 %393, i32* %394, align 4, !tbaa !552
  %395 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %366, i64 %355, i32 6, i32 0
  %396 = bitcast %struct.opj_tcd_cblk_enc** %395 to i8**
  %397 = load i8*, i8** %396, align 8, !tbaa !15
  tail call void @free(i8* %397) #9
  %398 = load i32, i32* %391, align 8, !tbaa !550
  %399 = load i32, i32* %394, align 4, !tbaa !552
  %400 = mul nsw i32 %399, %398
  %401 = sext i32 %400 to i64
  %402 = tail call noalias i8* @calloc(i64 %401, i64 64) #9
  store i8* %402, i8** %396, align 8, !tbaa !15
  %403 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %366, i64 %355, i32 7
  %404 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %403, align 8, !tbaa !627
  %405 = icmp eq %struct.opj_tgt_tree* %404, null
  br i1 %405, label %407, label %406

406:                                              ; preds = %354
  tail call void @tgt_destroy(%struct.opj_tgt_tree* nonnull %404) #9
  br label %407

407:                                              ; preds = %406, %354
  %408 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %366, i64 %355, i32 8
  %409 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %408, align 8, !tbaa !628
  %410 = icmp eq %struct.opj_tgt_tree* %409, null
  br i1 %410, label %412, label %411

411:                                              ; preds = %407
  tail call void @tgt_destroy(%struct.opj_tgt_tree* nonnull %409) #9
  br label %412

412:                                              ; preds = %411, %407
  %413 = load i32, i32* %391, align 8, !tbaa !550
  %414 = load i32, i32* %394, align 4, !tbaa !552
  %415 = tail call %struct.opj_tgt_tree* @tgt_create(i32 %413, i32 %414) #9
  store %struct.opj_tgt_tree* %415, %struct.opj_tgt_tree** %403, align 8, !tbaa !627
  %416 = load i32, i32* %391, align 8, !tbaa !550
  %417 = load i32, i32* %394, align 4, !tbaa !552
  %418 = tail call %struct.opj_tgt_tree* @tgt_create(i32 %416, i32 %417) #9
  store %struct.opj_tgt_tree* %418, %struct.opj_tgt_tree** %408, align 8, !tbaa !628
  %419 = load i32, i32* %391, align 8, !tbaa !550
  %420 = load i32, i32* %394, align 4, !tbaa !552
  %421 = mul nsw i32 %420, %419
  %422 = icmp sgt i32 %421, 0
  br i1 %422, label %423, label %467

423:                                              ; preds = %423, %412
  %424 = phi i64 [ %461, %423 ], [ 0, %412 ]
  %425 = phi i32 [ %462, %423 ], [ %419, %412 ]
  %426 = trunc i64 %424 to i32
  %427 = srem i32 %426, %425
  %428 = shl i32 %427, %241
  %429 = add nsw i32 %428, %383
  %430 = sdiv i32 %426, %425
  %431 = shl i32 %430, %244
  %432 = add nsw i32 %431, %384
  %433 = add nsw i32 %429, %253
  %434 = add nsw i32 %432, %255
  %435 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %395, align 8, !tbaa !15
  %436 = load i32, i32* %370, align 8, !tbaa !656
  %437 = icmp sgt i32 %429, %436
  %438 = select i1 %437, i32 %429, i32 %436
  %439 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %435, i64 %424, i32 3
  store i32 %438, i32* %439, align 8, !tbaa !553
  %440 = load i32, i32* %374, align 4, !tbaa !657
  %441 = icmp sgt i32 %432, %440
  %442 = select i1 %441, i32 %432, i32 %440
  %443 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %435, i64 %424, i32 4
  store i32 %442, i32* %443, align 4, !tbaa !556
  %444 = load i32, i32* %378, align 8, !tbaa !658
  %445 = icmp slt i32 %433, %444
  %446 = select i1 %445, i32 %433, i32 %444
  %447 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %435, i64 %424, i32 5
  store i32 %446, i32* %447, align 8, !tbaa !559
  %448 = load i32, i32* %382, align 4, !tbaa !659
  %449 = icmp slt i32 %434, %448
  %450 = select i1 %449, i32 %434, i32 %448
  %451 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %435, i64 %424, i32 6
  store i32 %450, i32* %451, align 4, !tbaa !560
  %452 = tail call noalias i8* @calloc(i64 8194, i64 1) #9
  %453 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %435, i64 %424, i32 0
  %454 = getelementptr inbounds i8, i8* %452, i64 2
  store i8* %454, i8** %453, align 8, !tbaa !580
  %455 = tail call noalias i8* @calloc(i64 100, i64 24) #9
  %456 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %435, i64 %424, i32 1
  %457 = bitcast %struct.opj_tcd_layer** %456 to i8**
  store i8* %455, i8** %457, align 8, !tbaa !631
  %458 = tail call noalias i8* @calloc(i64 100, i64 24) #9
  %459 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %435, i64 %424, i32 2
  %460 = bitcast %struct.opj_tcd_pass** %459 to i8**
  store i8* %458, i8** %460, align 8, !tbaa !581
  %461 = add nuw nsw i64 %424, 1
  %462 = load i32, i32* %391, align 8, !tbaa !550
  %463 = load i32, i32* %394, align 4, !tbaa !552
  %464 = mul nsw i32 %463, %462
  %465 = sext i32 %464 to i64
  %466 = icmp slt i64 %461, %465
  br i1 %466, label %423, label %467

467:                                              ; preds = %423, %412
  %468 = add nuw nsw i64 %355, 1
  %469 = load i32, i32* %223, align 8, !tbaa !545
  %470 = load i32, i32* %226, align 4, !tbaa !546
  %471 = mul nsw i32 %470, %469
  %472 = sext i32 %471 to i64
  %473 = icmp slt i64 %468, %472
  br i1 %473, label %354, label %257

474:                                              ; preds = %257
  %475 = load i32, i32* %161, align 8, !tbaa !35
  %476 = add nuw nsw i64 %171, 1
  %477 = add nuw nsw i32 %173, 1
  %478 = sext i32 %475 to i64
  %479 = icmp slt i64 %476, %478
  br i1 %479, label %170, label %480

480:                                              ; preds = %474, %124
  %481 = add nuw nsw i64 %129, 1
  %482 = load i32, i32* %59, align 8, !tbaa !542
  %483 = sext i32 %482 to i64
  %484 = icmp slt i64 %481, %483
  br i1 %484, label %485, label %490

485:                                              ; preds = %480
  %486 = load i32, i32* %35, align 8, !tbaa !652
  %487 = load i32, i32* %43, align 4, !tbaa !653
  %488 = load i32, i32* %50, align 8, !tbaa !654
  %489 = load i32, i32* %57, align 4, !tbaa !655
  br label %124

490:                                              ; preds = %480, %69
  ret void
}

; Function Attrs: nounwind uwtable
define void @tcd_malloc_decode(%struct.opj_tcd* nocapture, %struct.opj_image*, %struct.opj_cp* nocapture readonly) #0 {
  %4 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  store %struct.opj_image* %1, %struct.opj_image** %4, align 8, !tbaa !651
  %5 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 18
  %6 = load i32, i32* %5, align 8, !tbaa !136
  %7 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %8 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %7, align 8, !tbaa !359
  %9 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %8, i64 0, i32 0
  store i32 %6, i32* %9, align 8, !tbaa !649
  %10 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 19
  %11 = load i32, i32* %10, align 4, !tbaa !137
  %12 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %8, i64 0, i32 1
  store i32 %11, i32* %12, align 4, !tbaa !650
  %13 = mul nsw i32 %11, %6
  %14 = sext i32 %13 to i64
  %15 = mul nsw i64 %14, 856
  %16 = tail call noalias i8* @malloc(i64 %15) #9
  %17 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %8, i64 0, i32 2
  %18 = bitcast %struct.opj_tcd_tile** %17 to i8**
  store i8* %16, i8** %18, align 8, !tbaa !360
  %19 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 21
  %20 = load i32, i32* %19, align 8, !tbaa !180
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %3
  %23 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 4
  %24 = load i32, i32* %23, align 8, !tbaa !127
  br label %43

25:                                               ; preds = %3
  %26 = bitcast i8* %16 to %struct.opj_tcd_tile*
  %27 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 20
  %28 = load i32*, i32** %27, align 8, !tbaa !164
  %29 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 8, !tbaa !127
  %31 = sext i32 %30 to i64
  %32 = sext i32 %20 to i64
  %33 = load i32, i32* %28, align 4, !tbaa !43
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i32, i32* %28, i64 %34
  %36 = load i32, i32* %35, align 4, !tbaa !43
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %26, i64 %37, i32 4
  store i32 %30, i32* %38, align 8, !tbaa !542
  %39 = tail call noalias i8* @calloc(i64 %31, i64 48) #9
  %40 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %26, i64 %37, i32 5
  %41 = bitcast %struct.opj_tcd_tilecomp** %40 to i8**
  store i8* %39, i8** %41, align 8, !tbaa !543
  %42 = icmp eq i32 %20, 1
  br i1 %42, label %43, label %60

43:                                               ; preds = %60, %25, %22
  %44 = phi i32 [ %24, %22 ], [ %30, %25 ], [ %30, %60 ]
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %46, label %187

46:                                               ; preds = %43
  %47 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 20
  %48 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 13
  %49 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 15
  %50 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 0
  %51 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 14
  %52 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 16
  %53 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 1
  %54 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 2
  %55 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 3
  %56 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 6
  %57 = load %struct.opj_image_comp*, %struct.opj_image_comp** %56, align 8, !tbaa !128
  %58 = zext i32 %20 to i64
  %59 = sext i32 %44 to i64
  br label %75

60:                                               ; preds = %60, %25
  %61 = phi i64 [ %73, %60 ], [ 1, %25 ]
  %62 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %17, align 8, !tbaa !360
  %63 = getelementptr inbounds i32, i32* %28, i64 %61
  %64 = load i32, i32* %63, align 4, !tbaa !43
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %28, i64 %65
  %67 = load i32, i32* %66, align 4, !tbaa !43
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %62, i64 %68, i32 4
  store i32 %30, i32* %69, align 8, !tbaa !542
  %70 = tail call noalias i8* @calloc(i64 %31, i64 48) #9
  %71 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %62, i64 %68, i32 5
  %72 = bitcast %struct.opj_tcd_tilecomp** %71 to i8**
  store i8* %70, i8** %72, align 8, !tbaa !543
  %73 = add nuw nsw i64 %61, 1
  %74 = icmp slt i64 %73, %32
  br i1 %74, label %60, label %43

75:                                               ; preds = %165, %46
  %76 = phi i64 [ 0, %46 ], [ %185, %165 ]
  %77 = phi i32 [ 0, %46 ], [ %169, %165 ]
  %78 = phi i32 [ 0, %46 ], [ %168, %165 ]
  %79 = phi i32 [ 0, %46 ], [ %167, %165 ]
  %80 = phi i32 [ 0, %46 ], [ %166, %165 ]
  br i1 %21, label %81, label %165

81:                                               ; preds = %75
  %82 = load i32*, i32** %47, align 8, !tbaa !164
  %83 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %17, align 8, !tbaa !360
  %84 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %57, i64 %76, i32 0
  %85 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %57, i64 %76, i32 1
  %86 = load i32, i32* %48, align 8, !tbaa !205
  %87 = load i32, i32* %49, align 8, !tbaa !203
  %88 = load i32, i32* %50, align 8, !tbaa !201
  %89 = load i32, i32* %51, align 4, !tbaa !206
  %90 = load i32, i32* %52, align 4, !tbaa !204
  %91 = load i32, i32* %53, align 4, !tbaa !202
  %92 = load i32, i32* %54, align 8, !tbaa !199
  %93 = load i32, i32* %55, align 4, !tbaa !200
  %94 = load i32, i32* %84, align 8, !tbaa !208
  %95 = load i32, i32* %85, align 4, !tbaa !209
  %96 = add i32 %94, -1
  %97 = add i32 %95, -1
  br label %98

98:                                               ; preds = %158, %81
  %99 = phi i64 [ 0, %81 ], [ %163, %158 ]
  %100 = phi i32 [ %77, %81 ], [ %160, %158 ]
  %101 = phi i32 [ %78, %81 ], [ %161, %158 ]
  %102 = phi i32 [ %79, %81 ], [ %162, %158 ]
  %103 = phi i32 [ %80, %81 ], [ %159, %158 ]
  %104 = getelementptr inbounds i32, i32* %82, i64 %99
  %105 = load i32, i32* %104, align 4, !tbaa !43
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32, i32* %82, i64 %106
  %108 = load i32, i32* %107, align 4, !tbaa !43
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %83, i64 %109, i32 5
  %111 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %110, align 8, !tbaa !543
  %112 = srem i32 %105, %6
  %113 = sdiv i32 %105, %6
  %114 = mul nsw i32 %87, %112
  %115 = add nsw i32 %114, %86
  %116 = icmp sgt i32 %115, %88
  %117 = select i1 %116, i32 %115, i32 %88
  %118 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %83, i64 %109, i32 0
  store i32 %117, i32* %118, align 8, !tbaa !652
  %119 = mul nsw i32 %90, %113
  %120 = add nsw i32 %119, %89
  %121 = icmp sgt i32 %120, %91
  %122 = select i1 %121, i32 %120, i32 %91
  %123 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %83, i64 %109, i32 1
  store i32 %122, i32* %123, align 4, !tbaa !653
  %124 = add nsw i32 %112, 1
  %125 = mul nsw i32 %87, %124
  %126 = add nsw i32 %125, %86
  %127 = icmp slt i32 %126, %92
  %128 = select i1 %127, i32 %126, i32 %92
  %129 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %83, i64 %109, i32 2
  store i32 %128, i32* %129, align 8, !tbaa !654
  %130 = add nsw i32 %113, 1
  %131 = mul nsw i32 %90, %130
  %132 = add nsw i32 %131, %89
  %133 = icmp slt i32 %132, %93
  %134 = select i1 %133, i32 %132, i32 %93
  %135 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %83, i64 %109, i32 3
  store i32 %134, i32* %135, align 4, !tbaa !655
  %136 = add i32 %96, %117
  %137 = sdiv i32 %136, %94
  %138 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %111, i64 %76, i32 0
  store i32 %137, i32* %138, align 8, !tbaa !34
  %139 = add i32 %97, %122
  %140 = sdiv i32 %139, %95
  %141 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %111, i64 %76, i32 1
  store i32 %140, i32* %141, align 4, !tbaa !108
  %142 = add i32 %96, %128
  %143 = sdiv i32 %142, %94
  %144 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %111, i64 %76, i32 2
  store i32 %143, i32* %144, align 8, !tbaa !32
  %145 = add i32 %97, %134
  %146 = sdiv i32 %145, %95
  %147 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %111, i64 %76, i32 3
  store i32 %146, i32* %147, align 4, !tbaa !107
  %148 = icmp eq i64 %99, 0
  br i1 %148, label %158, label %149

149:                                              ; preds = %98
  %150 = icmp slt i32 %100, %137
  %151 = select i1 %150, i32 %100, i32 %137
  %152 = icmp slt i32 %101, %140
  %153 = select i1 %152, i32 %101, i32 %140
  %154 = icmp sgt i32 %103, %143
  %155 = select i1 %154, i32 %103, i32 %143
  %156 = icmp sgt i32 %102, %146
  %157 = select i1 %156, i32 %102, i32 %146
  br label %158

158:                                              ; preds = %149, %98
  %159 = phi i32 [ %155, %149 ], [ %143, %98 ]
  %160 = phi i32 [ %151, %149 ], [ %137, %98 ]
  %161 = phi i32 [ %153, %149 ], [ %140, %98 ]
  %162 = phi i32 [ %157, %149 ], [ %146, %98 ]
  %163 = add nuw nsw i64 %99, 1
  %164 = icmp eq i64 %163, %58
  br i1 %164, label %165, label %98

165:                                              ; preds = %158, %75
  %166 = phi i32 [ %80, %75 ], [ %159, %158 ]
  %167 = phi i32 [ %79, %75 ], [ %162, %158 ]
  %168 = phi i32 [ %78, %75 ], [ %161, %158 ]
  %169 = phi i32 [ %77, %75 ], [ %160, %158 ]
  %170 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %57, i64 %76, i32 10
  %171 = load i32, i32* %170, align 8, !tbaa !211
  %172 = shl i32 1, %171
  %173 = xor i32 %169, -1
  %174 = add i32 %166, %173
  %175 = add i32 %174, %172
  %176 = ashr i32 %175, %171
  %177 = xor i32 %168, -1
  %178 = add i32 %167, %177
  %179 = add i32 %178, %172
  %180 = ashr i32 %179, %171
  %181 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %57, i64 %76, i32 2
  store i32 %176, i32* %181, align 8, !tbaa !268
  %182 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %57, i64 %76, i32 3
  store i32 %180, i32* %182, align 4, !tbaa !269
  %183 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %57, i64 %76, i32 4
  store i32 %169, i32* %183, align 8, !tbaa !662
  %184 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %57, i64 %76, i32 5
  store i32 %168, i32* %184, align 4, !tbaa !663
  %185 = add nuw nsw i64 %76, 1
  %186 = icmp slt i64 %185, %59
  br i1 %186, label %75, label %187

187:                                              ; preds = %165, %43
  ret void
}

; Function Attrs: nounwind uwtable
define void @tcd_malloc_decode_tile(%struct.opj_tcd* nocapture, %struct.opj_image* nocapture readonly, %struct.opj_cp*, i32, %struct.opj_codestream_info* nocapture readnone) #0 {
  %6 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  store %struct.opj_cp* %2, %struct.opj_cp** %6, align 8, !tbaa !661
  %7 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 20
  %8 = load i32*, i32** %7, align 8, !tbaa !164
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds i32, i32* %8, i64 %9
  %11 = load i32, i32* %10, align 4, !tbaa !43
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %14 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %13, align 8, !tbaa !359
  %15 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %14, i64 0, i32 2
  %16 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %15, align 8, !tbaa !360
  %17 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %16, i64 %12, i32 4
  %18 = load i32, i32* %17, align 8, !tbaa !542
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %388

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %2, i64 0, i32 28
  %22 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8, !tbaa !139
  %23 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 %12, i32 15
  %24 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %16, i64 %12, i32 5
  %25 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %16, i64 %12, i32 0
  %26 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 6
  %27 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %16, i64 %12, i32 1
  %28 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %16, i64 %12, i32 2
  %29 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %16, i64 %12, i32 3
  br label %30

30:                                               ; preds = %383, %20
  %31 = phi i64 [ 0, %20 ], [ %384, %383 ]
  %32 = load %struct.opj_tccp*, %struct.opj_tccp** %23, align 8, !tbaa !162
  %33 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %24, align 8, !tbaa !543
  %34 = load i32, i32* %25, align 8, !tbaa !652
  %35 = load %struct.opj_image_comp*, %struct.opj_image_comp** %26, align 8, !tbaa !128
  %36 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %35, i64 %31, i32 0
  %37 = load i32, i32* %36, align 8, !tbaa !208
  %38 = add i32 %37, -1
  %39 = add i32 %38, %34
  %40 = sdiv i32 %39, %37
  %41 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %33, i64 %31, i32 0
  store i32 %40, i32* %41, align 8, !tbaa !34
  %42 = load i32, i32* %27, align 4, !tbaa !653
  %43 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %35, i64 %31, i32 1
  %44 = load i32, i32* %43, align 4, !tbaa !209
  %45 = add i32 %44, -1
  %46 = add i32 %45, %42
  %47 = sdiv i32 %46, %44
  %48 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %33, i64 %31, i32 1
  store i32 %47, i32* %48, align 4, !tbaa !108
  %49 = load i32, i32* %28, align 8, !tbaa !654
  %50 = add i32 %38, %49
  %51 = sdiv i32 %50, %37
  %52 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %33, i64 %31, i32 2
  store i32 %51, i32* %52, align 8, !tbaa !32
  %53 = load i32, i32* %29, align 4, !tbaa !655
  %54 = add i32 %45, %53
  %55 = sdiv i32 %54, %44
  %56 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %33, i64 %31, i32 3
  store i32 %55, i32* %56, align 4, !tbaa !107
  %57 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 %31, i32 1
  %58 = load i32, i32* %57, align 4, !tbaa !95
  %59 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %33, i64 %31, i32 4
  store i32 %58, i32* %59, align 8, !tbaa !35
  %60 = sext i32 %58 to i64
  %61 = mul nsw i64 %60, 152
  %62 = tail call noalias i8* @malloc(i64 %61) #9
  %63 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %33, i64 %31, i32 5
  %64 = bitcast %struct.opj_tcd_resolution** %63 to i8**
  store i8* %62, i8** %64, align 8, !tbaa !37
  %65 = load i32, i32* %59, align 8, !tbaa !35
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %383

67:                                               ; preds = %30
  %68 = bitcast i8* %62 to %struct.opj_tcd_resolution*
  %69 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 %31, i32 0
  %70 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 %31, i32 2
  %71 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 %31, i32 3
  %72 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 %31, i32 5
  %73 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 %31, i32 8
  br label %74

74:                                               ; preds = %380, %67
  %75 = phi %struct.opj_tcd_resolution* [ %68, %67 ], [ %382, %380 ]
  %76 = phi i64 [ 0, %67 ], [ %377, %380 ]
  %77 = phi i32 [ %65, %67 ], [ %376, %380 ]
  %78 = phi i32 [ 0, %67 ], [ %381, %380 ]
  %79 = xor i32 %78, -1
  %80 = add i32 %77, %79
  %81 = load i32, i32* %41, align 8, !tbaa !34
  %82 = shl nsw i32 -1, %80
  %83 = xor i32 %82, -1
  %84 = add i32 %81, %83
  %85 = ashr i32 %84, %80
  %86 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 0
  store i32 %85, i32* %86, align 8, !tbaa !40
  %87 = load i32, i32* %48, align 4, !tbaa !108
  %88 = add i32 %87, %83
  %89 = ashr i32 %88, %80
  %90 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 1
  store i32 %89, i32* %90, align 4, !tbaa !42
  %91 = load i32, i32* %52, align 8, !tbaa !32
  %92 = add i32 %91, %83
  %93 = ashr i32 %92, %80
  %94 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 2
  store i32 %93, i32* %94, align 8, !tbaa !38
  %95 = load i32, i32* %56, align 4, !tbaa !107
  %96 = add i32 %95, %83
  %97 = ashr i32 %96, %80
  %98 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 3
  store i32 %97, i32* %98, align 4, !tbaa !41
  %99 = icmp eq i64 %76, 0
  %100 = select i1 %99, i32 1, i32 3
  %101 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 6
  store i32 %100, i32* %101, align 8, !tbaa !544
  %102 = load i32, i32* %69, align 4, !tbaa !221
  %103 = and i32 %102, 1
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %110, label %105

105:                                              ; preds = %74
  %106 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 %31, i32 10, i64 %76
  %107 = load i32, i32* %106, align 4, !tbaa !43
  %108 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 %31, i32 11, i64 %76
  %109 = load i32, i32* %108, align 4, !tbaa !43
  br label %110

110:                                              ; preds = %105, %74
  %111 = phi i32 [ %109, %105 ], [ 15, %74 ]
  %112 = phi i32 [ %107, %105 ], [ 15, %74 ]
  %113 = shl i32 -1, %112
  %114 = and i32 %113, %85
  %115 = shl i32 -1, %111
  %116 = and i32 %115, %89
  %117 = shl i32 1, %112
  %118 = add i32 %93, -1
  %119 = add i32 %118, %117
  %120 = and i32 %119, %113
  %121 = shl i32 1, %111
  %122 = add i32 %97, -1
  %123 = add i32 %122, %121
  %124 = and i32 %123, %115
  %125 = icmp eq i32 %85, %93
  %126 = sub nsw i32 %120, %114
  %127 = ashr i32 %126, %112
  %128 = select i1 %125, i32 0, i32 %127
  %129 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 4
  store i32 %128, i32* %129, align 8, !tbaa !545
  %130 = icmp eq i32 %89, %97
  %131 = sub nsw i32 %124, %116
  %132 = ashr i32 %131, %111
  %133 = select i1 %130, i32 0, i32 %132
  %134 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 5
  store i32 %133, i32* %134, align 4, !tbaa !546
  br i1 %99, label %142, label %135

135:                                              ; preds = %110
  %136 = add i32 %114, 1
  %137 = ashr i32 %136, 1
  %138 = add i32 %116, 1
  %139 = ashr i32 %138, 1
  %140 = add nsw i32 %112, -1
  %141 = add nsw i32 %111, -1
  br label %142

142:                                              ; preds = %135, %110
  %143 = phi i32 [ %141, %135 ], [ %111, %110 ]
  %144 = phi i32 [ %140, %135 ], [ %112, %110 ]
  %145 = phi i32 [ %139, %135 ], [ %116, %110 ]
  %146 = phi i32 [ %137, %135 ], [ %114, %110 ]
  %147 = load i32, i32* %70, align 4, !tbaa !241
  %148 = icmp slt i32 %147, %144
  %149 = select i1 %148, i32 %147, i32 %144
  %150 = load i32, i32* %71, align 4, !tbaa !242
  %151 = icmp slt i32 %150, %143
  %152 = select i1 %151, i32 %150, i32 %143
  %153 = add nsw i32 %80, 1
  %154 = shl i32 1, %153
  %155 = mul i64 %76, 3
  %156 = add i64 %155, -2
  %157 = shl i32 1, %144
  %158 = shl i32 1, %143
  %159 = shl i32 -1, %149
  %160 = shl i32 -1, %152
  %161 = shl i32 1, %149
  %162 = add i32 %161, -1
  %163 = shl i32 1, %152
  %164 = add i32 %163, -1
  br label %171

165:                                              ; preds = %366, %233
  %166 = load i32, i32* %101, align 8, !tbaa !544
  %167 = sext i32 %166 to i64
  %168 = icmp slt i64 %174, %167
  br i1 %168, label %169, label %375

169:                                              ; preds = %165
  %170 = load i32, i32* %41, align 8, !tbaa !34
  br label %171

171:                                              ; preds = %169, %142
  %172 = phi i32 [ %81, %142 ], [ %170, %169 ]
  %173 = phi i64 [ 0, %142 ], [ %174, %169 ]
  %174 = add nuw nsw i64 %173, 1
  %175 = trunc i64 %174 to i32
  %176 = select i1 %99, i32 0, i32 %175
  %177 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 7, i64 %173, i32 4
  store i32 %176, i32* %177, align 8, !tbaa !558
  br i1 %99, label %178, label %190

178:                                              ; preds = %171
  %179 = add i32 %172, %83
  %180 = ashr i32 %179, %80
  %181 = load i32, i32* %48, align 4, !tbaa !108
  %182 = add i32 %181, %83
  %183 = ashr i32 %182, %80
  %184 = load i32, i32* %52, align 8, !tbaa !32
  %185 = add i32 %184, %83
  %186 = ashr i32 %185, %80
  %187 = load i32, i32* %56, align 4, !tbaa !107
  %188 = add i32 %187, %83
  %189 = ashr i32 %188, %80
  br label %215

190:                                              ; preds = %171
  %191 = or i32 %176, 1
  %192 = icmp eq i32 %191, 3
  %193 = or i32 %176, 2
  %194 = icmp eq i32 %193, 3
  %195 = zext i1 %194 to i32
  %196 = zext i1 %192 to i32
  %197 = shl i32 %195, %80
  %198 = xor i32 %197, -1
  %199 = add i32 %154, %198
  %200 = add i32 %199, %172
  %201 = ashr i32 %200, %153
  %202 = load i32, i32* %48, align 4, !tbaa !108
  %203 = shl i32 %196, %80
  %204 = xor i32 %203, -1
  %205 = add i32 %154, %204
  %206 = add i32 %205, %202
  %207 = ashr i32 %206, %153
  %208 = load i32, i32* %52, align 8, !tbaa !32
  %209 = add i32 %199, %208
  %210 = ashr i32 %209, %153
  %211 = load i32, i32* %56, align 4, !tbaa !107
  %212 = add i32 %205, %211
  %213 = ashr i32 %212, %153
  %214 = add i64 %156, %173
  br label %215

215:                                              ; preds = %190, %178
  %216 = phi i32 [ %180, %178 ], [ %201, %190 ]
  %217 = phi i32 [ %183, %178 ], [ %207, %190 ]
  %218 = phi i32 [ %186, %178 ], [ %210, %190 ]
  %219 = phi i32 [ %189, %178 ], [ %213, %190 ]
  %220 = phi i64 [ 0, %178 ], [ %214, %190 ]
  %221 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 7, i64 %173, i32 0
  store i32 %216, i32* %221, align 8
  %222 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 7, i64 %173, i32 1
  store i32 %217, i32* %222, align 4
  %223 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 7, i64 %173, i32 2
  store i32 %218, i32* %223, align 8
  %224 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 7, i64 %173, i32 3
  store i32 %219, i32* %224, align 4
  %225 = shl i64 %220, 32
  %226 = ashr exact i64 %225, 32
  %227 = load i32, i32* %72, align 4, !tbaa !97
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %231

229:                                              ; preds = %215
  %230 = tail call i32 @dwt_getgain_real(i32 %176) #9
  br label %233

231:                                              ; preds = %215
  %232 = tail call i32 @dwt_getgain(i32 %176) #9
  br label %233

233:                                              ; preds = %231, %229
  %234 = phi i32 [ %230, %229 ], [ %232, %231 ]
  %235 = load %struct.opj_image_comp*, %struct.opj_image_comp** %26, align 8, !tbaa !128
  %236 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %235, i64 %31, i32 6
  %237 = load i32, i32* %236, align 8, !tbaa !207
  %238 = add nsw i32 %237, %234
  %239 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 %31, i32 7, i64 %226, i32 1
  %240 = load i32, i32* %239, align 4, !tbaa !99
  %241 = sitofp i32 %240 to double
  %242 = fmul double %241, 0x3F40000000000000
  %243 = fadd double %242, 1.000000e+00
  %244 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 %31, i32 7, i64 %226, i32 0
  %245 = load i32, i32* %244, align 4, !tbaa !101
  %246 = sub i32 %238, %245
  %247 = tail call double @ldexp(double 1.000000e+00, i32 %246) #9
  %248 = fmul double %247, %243
  %249 = fmul double %248, 5.000000e-01
  %250 = fptrunc double %249 to float
  %251 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 7, i64 %173, i32 7
  store float %250, float* %251, align 4, !tbaa !547
  %252 = load i32, i32* %244, align 4, !tbaa !101
  %253 = load i32, i32* %73, align 4, !tbaa !240
  %254 = add i32 %252, -1
  %255 = add i32 %254, %253
  %256 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 7, i64 %173, i32 6
  store i32 %255, i32* %256, align 8, !tbaa !630
  %257 = load i32, i32* %129, align 8, !tbaa !545
  %258 = load i32, i32* %134, align 4, !tbaa !546
  %259 = mul nsw i32 %258, %257
  %260 = sext i32 %259 to i64
  %261 = mul nsw i64 %260, 48
  %262 = tail call noalias i8* @malloc(i64 %261) #9
  %263 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %76, i32 7, i64 %173, i32 5
  %264 = bitcast %struct.opj_tcd_precinct** %263 to i8**
  store i8* %262, i8** %264, align 8, !tbaa !549
  %265 = load i32, i32* %129, align 8, !tbaa !545
  %266 = load i32, i32* %134, align 4, !tbaa !546
  %267 = mul nsw i32 %266, %265
  %268 = icmp sgt i32 %267, 0
  br i1 %268, label %269, label %165

269:                                              ; preds = %233
  %270 = bitcast i8* %262 to %struct.opj_tcd_precinct*
  br label %271

271:                                              ; preds = %373, %269
  %272 = phi %struct.opj_tcd_precinct* [ %270, %269 ], [ %374, %373 ]
  %273 = phi i64 [ 0, %269 ], [ %367, %373 ]
  %274 = phi i32 [ %265, %269 ], [ %368, %373 ]
  %275 = trunc i64 %273 to i32
  %276 = srem i32 %275, %274
  %277 = shl i32 %276, %144
  %278 = add nsw i32 %277, %146
  %279 = sdiv i32 %275, %274
  %280 = shl i32 %279, %143
  %281 = add nsw i32 %280, %145
  %282 = add nsw i32 %278, %157
  %283 = add nsw i32 %281, %158
  %284 = load i32, i32* %221, align 8, !tbaa !555
  %285 = icmp sgt i32 %278, %284
  %286 = select i1 %285, i32 %278, i32 %284
  %287 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %272, i64 %273, i32 0
  store i32 %286, i32* %287, align 8, !tbaa !656
  %288 = load i32, i32* %222, align 4, !tbaa !557
  %289 = icmp sgt i32 %281, %288
  %290 = select i1 %289, i32 %281, i32 %288
  %291 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %272, i64 %273, i32 1
  store i32 %290, i32* %291, align 4, !tbaa !657
  %292 = load i32, i32* %223, align 8, !tbaa !639
  %293 = icmp slt i32 %282, %292
  %294 = select i1 %293, i32 %282, i32 %292
  %295 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %272, i64 %273, i32 2
  store i32 %294, i32* %295, align 8, !tbaa !658
  %296 = load i32, i32* %224, align 4, !tbaa !640
  %297 = icmp slt i32 %283, %296
  %298 = select i1 %297, i32 %283, i32 %296
  %299 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %272, i64 %273, i32 3
  store i32 %298, i32* %299, align 4, !tbaa !659
  %300 = and i32 %286, %159
  %301 = and i32 %290, %160
  %302 = add i32 %162, %294
  %303 = and i32 %302, %159
  %304 = add i32 %164, %298
  %305 = and i32 %304, %160
  %306 = sub nsw i32 %303, %300
  %307 = ashr i32 %306, %149
  %308 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %272, i64 %273, i32 4
  store i32 %307, i32* %308, align 8, !tbaa !550
  %309 = sub nsw i32 %305, %301
  %310 = ashr i32 %309, %152
  %311 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %272, i64 %273, i32 5
  store i32 %310, i32* %311, align 4, !tbaa !552
  %312 = mul nsw i32 %310, %307
  %313 = sext i32 %312 to i64
  %314 = mul nsw i64 %313, 56
  %315 = tail call noalias i8* @malloc(i64 %314) #9
  %316 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %272, i64 %273, i32 6
  %317 = bitcast %union.anon* %316 to %struct.opj_tcd_cblk_dec**
  %318 = bitcast %union.anon* %316 to i8**
  store i8* %315, i8** %318, align 8, !tbaa !15
  %319 = load i32, i32* %308, align 8, !tbaa !550
  %320 = load i32, i32* %311, align 4, !tbaa !552
  %321 = tail call %struct.opj_tgt_tree* @tgt_create(i32 %319, i32 %320) #9
  %322 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %272, i64 %273, i32 7
  store %struct.opj_tgt_tree* %321, %struct.opj_tgt_tree** %322, align 8, !tbaa !627
  %323 = load i32, i32* %308, align 8, !tbaa !550
  %324 = load i32, i32* %311, align 4, !tbaa !552
  %325 = tail call %struct.opj_tgt_tree* @tgt_create(i32 %323, i32 %324) #9
  %326 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %272, i64 %273, i32 8
  store %struct.opj_tgt_tree* %325, %struct.opj_tgt_tree** %326, align 8, !tbaa !628
  %327 = load i32, i32* %308, align 8, !tbaa !550
  %328 = load i32, i32* %311, align 4, !tbaa !552
  %329 = mul nsw i32 %328, %327
  %330 = icmp sgt i32 %329, 0
  br i1 %330, label %331, label %366

331:                                              ; preds = %271
  %332 = load i32, i32* %287, align 8, !tbaa !656
  %333 = load i32, i32* %291, align 4, !tbaa !657
  %334 = load i32, i32* %295, align 8, !tbaa !658
  %335 = load i32, i32* %299, align 4, !tbaa !659
  %336 = sext i32 %329 to i64
  br label %337

337:                                              ; preds = %337, %331
  %338 = phi i64 [ 0, %331 ], [ %364, %337 ]
  %339 = trunc i64 %338 to i32
  %340 = srem i32 %339, %327
  %341 = shl i32 %340, %149
  %342 = add nsw i32 %341, %300
  %343 = sdiv i32 %339, %327
  %344 = shl i32 %343, %152
  %345 = add nsw i32 %344, %301
  %346 = add nsw i32 %342, %161
  %347 = add nsw i32 %345, %163
  %348 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %317, align 8, !tbaa !15
  %349 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %348, i64 %338, i32 0
  %350 = icmp sgt i32 %342, %332
  %351 = select i1 %350, i32 %342, i32 %332
  %352 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %348, i64 %338, i32 2
  %353 = bitcast i8** %349 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %353, i8 0, i64 16, i1 false)
  store i32 %351, i32* %352, align 8, !tbaa !591
  %354 = icmp sgt i32 %345, %333
  %355 = select i1 %354, i32 %345, i32 %333
  %356 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %348, i64 %338, i32 3
  store i32 %355, i32* %356, align 4, !tbaa !593
  %357 = icmp slt i32 %346, %334
  %358 = select i1 %357, i32 %346, i32 %334
  %359 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %348, i64 %338, i32 4
  store i32 %358, i32* %359, align 8, !tbaa !589
  %360 = icmp slt i32 %347, %335
  %361 = select i1 %360, i32 %347, i32 %335
  %362 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %348, i64 %338, i32 5
  store i32 %361, i32* %362, align 4, !tbaa !592
  %363 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %348, i64 %338, i32 10
  store i32 0, i32* %363, align 8, !tbaa !595
  %364 = add nuw nsw i64 %338, 1
  %365 = icmp slt i64 %364, %336
  br i1 %365, label %337, label %366

366:                                              ; preds = %337, %271
  %367 = add nuw nsw i64 %273, 1
  %368 = load i32, i32* %129, align 8, !tbaa !545
  %369 = load i32, i32* %134, align 4, !tbaa !546
  %370 = mul nsw i32 %369, %368
  %371 = sext i32 %370 to i64
  %372 = icmp slt i64 %367, %371
  br i1 %372, label %373, label %165

373:                                              ; preds = %366
  %374 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %263, align 8, !tbaa !549
  br label %271

375:                                              ; preds = %165
  %376 = load i32, i32* %59, align 8, !tbaa !35
  %377 = add nuw nsw i64 %76, 1
  %378 = sext i32 %376 to i64
  %379 = icmp slt i64 %377, %378
  br i1 %379, label %380, label %383

380:                                              ; preds = %375
  %381 = add nuw nsw i32 %78, 1
  %382 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %63, align 8, !tbaa !37
  br label %74

383:                                              ; preds = %375, %30
  %384 = add nuw nsw i64 %31, 1
  %385 = load i32, i32* %17, align 8, !tbaa !542
  %386 = sext i32 %385 to i64
  %387 = icmp slt i64 %384, %386
  br i1 %387, label %30, label %388

388:                                              ; preds = %383, %5
  ret void
}

; Function Attrs: nounwind uwtable
define void @tcd_makelayer_fixed(%struct.opj_tcd* nocapture readonly, i32, i32) #0 {
  %4 = alloca [10 x [10 x [3 x i32]]], align 16
  %5 = bitcast [10 x [10 x [3 x i32]]]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1200, i8* nonnull %5) #9
  %6 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 9
  %7 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %6, align 8, !tbaa !664
  %8 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %7, i64 0, i32 4
  %9 = load i32, i32* %8, align 8, !tbaa !542
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %276

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 10
  %13 = load %struct.opj_tcp*, %struct.opj_tcp** %12, align 8, !tbaa !665
  %14 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  %15 = load %struct.opj_cp*, %struct.opj_cp** %14, align 8, !tbaa !661
  %16 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %7, i64 0, i32 5
  %17 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 0, i32 3
  %18 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %15, i64 0, i32 29
  %19 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  %20 = sext i32 %1 to i64
  %21 = icmp eq i32 %1, 0
  %22 = add nsw i32 %1, -1
  %23 = sext i32 %22 to i64
  %24 = icmp eq i32 %2, 0
  br label %25

25:                                               ; preds = %271, %11
  %26 = phi i32 [ %9, %11 ], [ %272, %271 ]
  %27 = phi i64 [ 0, %11 ], [ %273, %271 ]
  %28 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %16, align 8, !tbaa !543
  %29 = load i32, i32* %17, align 4, !tbaa !219
  %30 = icmp sgt i32 %29, 0
  %31 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %28, i64 %27, i32 4
  %32 = load i32, i32* %31, align 8, !tbaa !35
  br i1 %30, label %33, label %82

33:                                               ; preds = %25
  %34 = icmp sgt i32 %32, 0
  br i1 %34, label %35, label %271

35:                                               ; preds = %33
  %36 = sext i32 %29 to i64
  %37 = load i32*, i32** %18, align 8, !tbaa !247
  %38 = load %struct.opj_image*, %struct.opj_image** %19, align 8, !tbaa !651
  %39 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %38, i64 0, i32 6
  %40 = load %struct.opj_image_comp*, %struct.opj_image_comp** %39, align 8, !tbaa !128
  %41 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %40, i64 %27, i32 6
  %42 = load i32, i32* %41, align 8, !tbaa !207
  %43 = sitofp i32 %42 to double
  %44 = fmul double %43, 6.250000e-02
  %45 = fptrunc double %44 to float
  %46 = sext i32 %32 to i64
  br label %47

47:                                               ; preds = %79, %35
  %48 = phi i64 [ 0, %35 ], [ %80, %79 ]
  %49 = trunc i64 %48 to i32
  %50 = mul nsw i32 %32, %49
  br label %51

51:                                               ; preds = %51, %47
  %52 = phi i64 [ 0, %47 ], [ %77, %51 ]
  %53 = trunc i64 %52 to i32
  %54 = add i32 %50, %53
  %55 = mul i32 %54, 3
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %37, i64 %56
  %58 = load i32, i32* %57, align 4, !tbaa !43
  %59 = sitofp i32 %58 to float
  %60 = fmul float %59, %45
  %61 = fptosi float %60 to i32
  %62 = getelementptr inbounds [10 x [10 x [3 x i32]]], [10 x [10 x [3 x i32]]]* %4, i64 0, i64 %48, i64 %52, i64 0
  store i32 %61, i32* %62, align 4, !tbaa !43
  %63 = add nsw i64 %56, 1
  %64 = getelementptr inbounds i32, i32* %37, i64 %63
  %65 = load i32, i32* %64, align 4, !tbaa !43
  %66 = sitofp i32 %65 to float
  %67 = fmul float %66, %45
  %68 = fptosi float %67 to i32
  %69 = getelementptr inbounds [10 x [10 x [3 x i32]]], [10 x [10 x [3 x i32]]]* %4, i64 0, i64 %48, i64 %52, i64 1
  store i32 %68, i32* %69, align 4, !tbaa !43
  %70 = add nsw i64 %56, 2
  %71 = getelementptr inbounds i32, i32* %37, i64 %70
  %72 = load i32, i32* %71, align 4, !tbaa !43
  %73 = sitofp i32 %72 to float
  %74 = fmul float %73, %45
  %75 = fptosi float %74 to i32
  %76 = getelementptr inbounds [10 x [10 x [3 x i32]]], [10 x [10 x [3 x i32]]]* %4, i64 0, i64 %48, i64 %52, i64 2
  store i32 %75, i32* %76, align 4, !tbaa !43
  %77 = add nuw nsw i64 %52, 1
  %78 = icmp slt i64 %77, %46
  br i1 %78, label %51, label %79

79:                                               ; preds = %51
  %80 = add nuw nsw i64 %48, 1
  %81 = icmp slt i64 %80, %36
  br i1 %81, label %47, label %82

82:                                               ; preds = %79, %25
  %83 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %28, i64 %27, i32 4
  %84 = icmp sgt i32 %32, 0
  br i1 %84, label %85, label %271

85:                                               ; preds = %82
  %86 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %28, i64 %27, i32 5
  br label %87

87:                                               ; preds = %264, %85
  %88 = phi i32 [ %32, %85 ], [ %265, %264 ]
  %89 = phi i64 [ 0, %85 ], [ %266, %264 ]
  %90 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %86, align 8, !tbaa !37
  %91 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %90, i64 %89, i32 6
  %92 = load i32, i32* %91, align 8, !tbaa !544
  %93 = icmp sgt i32 %92, 0
  br i1 %93, label %94, label %264

94:                                               ; preds = %87
  %95 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %90, i64 %89, i32 4
  %96 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %90, i64 %89, i32 5
  %97 = load i32, i32* %95, align 8, !tbaa !545
  %98 = load i32, i32* %96, align 4, !tbaa !546
  br label %99

99:                                               ; preds = %253, %94
  %100 = phi i32 [ %92, %94 ], [ %254, %253 ]
  %101 = phi i32 [ %98, %94 ], [ %255, %253 ]
  %102 = phi i32 [ %97, %94 ], [ %256, %253 ]
  %103 = phi i32 [ %98, %94 ], [ %257, %253 ]
  %104 = phi i32 [ %97, %94 ], [ %258, %253 ]
  %105 = phi i64 [ 0, %94 ], [ %259, %253 ]
  %106 = mul nsw i32 %103, %104
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %108, label %253

108:                                              ; preds = %99
  %109 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %90, i64 %89, i32 7, i64 %105, i32 5
  %110 = getelementptr inbounds [10 x [10 x [3 x i32]]], [10 x [10 x [3 x i32]]]* %4, i64 0, i64 %20, i64 %89, i64 %105
  %111 = getelementptr inbounds [10 x [10 x [3 x i32]]], [10 x [10 x [3 x i32]]]* %4, i64 0, i64 %23, i64 %89, i64 %105
  br label %112

112:                                              ; preds = %244, %108
  %113 = phi i32 [ %101, %108 ], [ %245, %244 ]
  %114 = phi i32 [ %102, %108 ], [ %246, %244 ]
  %115 = phi i64 [ 0, %108 ], [ %247, %244 ]
  %116 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %109, align 8, !tbaa !549
  %117 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %116, i64 %115, i32 4
  %118 = load i32, i32* %117, align 8, !tbaa !550
  %119 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %116, i64 %115, i32 5
  %120 = load i32, i32* %119, align 4, !tbaa !552
  %121 = mul nsw i32 %120, %118
  %122 = icmp sgt i32 %121, 0
  br i1 %122, label %123, label %244

123:                                              ; preds = %112
  %124 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %116, i64 %115, i32 6, i32 0
  %125 = load i32, i32* %110, align 4, !tbaa !43
  %126 = sext i32 %121 to i64
  br i1 %21, label %130, label %127

127:                                              ; preds = %123
  %128 = load i32, i32* %111, align 4, !tbaa !43
  %129 = sub nsw i32 %125, %128
  br label %173

130:                                              ; preds = %123
  %131 = load %struct.opj_image*, %struct.opj_image** %19, align 8, !tbaa !651
  %132 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %131, i64 0, i32 6
  %133 = load %struct.opj_image_comp*, %struct.opj_image_comp** %132, align 8, !tbaa !128
  %134 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %133, i64 %27, i32 6
  %135 = load i32, i32* %134, align 8, !tbaa !207
  br label %136

136:                                              ; preds = %170, %130
  %137 = phi i64 [ 0, %130 ], [ %171, %170 ]
  %138 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %124, align 8, !tbaa !15
  %139 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %138, i64 %137
  %140 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %138, i64 %137, i32 1
  %141 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %140, align 8, !tbaa !631
  %142 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %138, i64 %137, i32 7
  %143 = load i32, i32* %142, align 8, !tbaa !579
  %144 = sub nsw i32 %135, %143
  %145 = icmp sle i32 %125, %144
  %146 = sub nsw i32 %125, %144
  %147 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %138, i64 %137, i32 10
  store i32 0, i32* %147, align 4, !tbaa !666
  %148 = icmp eq i32 %146, 0
  %149 = or i1 %148, %145
  br i1 %149, label %150, label %152

150:                                              ; preds = %136
  %151 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %141, i64 %20, i32 0
  store i32 0, i32* %151, align 8, !tbaa !632
  br label %170

152:                                              ; preds = %136
  %153 = mul nsw i32 %146, 3
  %154 = add nsw i32 %153, -2
  %155 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %141, i64 %20, i32 0
  store i32 %154, i32* %155, align 8, !tbaa !632
  %156 = icmp eq i32 %154, 0
  br i1 %156, label %170, label %157

157:                                              ; preds = %152
  %158 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %138, i64 %137, i32 2
  %159 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %158, align 8, !tbaa !581
  %160 = add nsw i32 %153, -3
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %159, i64 %161, i32 0
  %163 = load i32, i32* %162, align 8, !tbaa !586
  %164 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %141, i64 %20, i32 1
  store i32 %163, i32* %164, align 4, !tbaa !635
  %165 = bitcast %struct.opj_tcd_cblk_enc* %139 to i64*
  %166 = load i64, i64* %165, align 8, !tbaa !580
  %167 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %141, i64 %20, i32 3
  %168 = bitcast i8** %167 to i64*
  store i64 %166, i64* %168, align 8, !tbaa !636
  br i1 %24, label %170, label %169

169:                                              ; preds = %157
  store i32 %154, i32* %147, align 4, !tbaa !666
  br label %170

170:                                              ; preds = %169, %157, %152, %150
  %171 = add nuw nsw i64 %137, 1
  %172 = icmp slt i64 %171, %126
  br i1 %172, label %136, label %244

173:                                              ; preds = %238, %127
  %174 = phi i64 [ 0, %127 ], [ %239, %238 ]
  %175 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %124, align 8, !tbaa !15
  %176 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %175, i64 %174
  %177 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %175, i64 %174, i32 1
  %178 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %177, align 8, !tbaa !631
  %179 = load %struct.opj_image*, %struct.opj_image** %19, align 8, !tbaa !651
  %180 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %179, i64 0, i32 6
  %181 = load %struct.opj_image_comp*, %struct.opj_image_comp** %180, align 8, !tbaa !128
  %182 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %181, i64 %27, i32 6
  %183 = load i32, i32* %182, align 8, !tbaa !207
  %184 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %175, i64 %174, i32 7
  %185 = load i32, i32* %184, align 8, !tbaa !579
  %186 = sub nsw i32 %183, %185
  %187 = icmp sgt i32 %128, %186
  br i1 %187, label %193, label %188

188:                                              ; preds = %173
  %189 = sub i32 %128, %186
  %190 = add i32 %129, %189
  %191 = icmp sgt i32 %190, 0
  %192 = select i1 %191, i32 %190, i32 0
  br label %193

193:                                              ; preds = %188, %173
  %194 = phi i32 [ %129, %173 ], [ %192, %188 ]
  %195 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %175, i64 %174, i32 10
  %196 = load i32, i32* %195, align 4, !tbaa !666
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %203

198:                                              ; preds = %193
  %199 = icmp eq i32 %194, 0
  br i1 %199, label %206, label %200

200:                                              ; preds = %198
  %201 = mul nsw i32 %194, 3
  %202 = add nsw i32 %201, -2
  br label %206

203:                                              ; preds = %193
  %204 = mul nsw i32 %194, 3
  %205 = add nsw i32 %204, %196
  br label %206

206:                                              ; preds = %203, %200, %198
  %207 = phi i32 [ %202, %200 ], [ %205, %203 ], [ 0, %198 ]
  %208 = sub nsw i32 %207, %196
  %209 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %178, i64 %20, i32 0
  store i32 %208, i32* %209, align 8, !tbaa !632
  %210 = icmp eq i32 %208, 0
  br i1 %210, label %238, label %211

211:                                              ; preds = %206
  %212 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %175, i64 %174, i32 2
  %213 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %212, align 8, !tbaa !581
  %214 = add nsw i32 %207, -1
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %213, i64 %215, i32 0
  %217 = load i32, i32* %216, align 8, !tbaa !586
  br i1 %197, label %218, label %223

218:                                              ; preds = %211
  %219 = bitcast %struct.opj_tcd_cblk_enc* %176 to i64*
  %220 = load i64, i64* %219, align 8, !tbaa !580
  %221 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %178, i64 %20, i32 3
  %222 = bitcast i8** %221 to i64*
  store i64 %220, i64* %222, align 8, !tbaa !636
  br label %234

223:                                              ; preds = %211
  %224 = add nsw i32 %196, -1
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %213, i64 %225, i32 0
  %227 = load i32, i32* %226, align 8, !tbaa !586
  %228 = sub nsw i32 %217, %227
  %229 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %176, i64 0, i32 0
  %230 = load i8*, i8** %229, align 8, !tbaa !580
  %231 = sext i32 %227 to i64
  %232 = getelementptr inbounds i8, i8* %230, i64 %231
  %233 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %178, i64 %20, i32 3
  store i8* %232, i8** %233, align 8, !tbaa !636
  br label %234

234:                                              ; preds = %223, %218
  %235 = phi i32 [ %228, %223 ], [ %217, %218 ]
  %236 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %178, i64 %20, i32 1
  store i32 %235, i32* %236, align 4
  br i1 %24, label %238, label %237

237:                                              ; preds = %234
  store i32 %207, i32* %195, align 4, !tbaa !666
  br label %238

238:                                              ; preds = %237, %234, %206
  %239 = add nuw nsw i64 %174, 1
  %240 = icmp slt i64 %239, %126
  br i1 %240, label %173, label %241

241:                                              ; preds = %238
  %242 = load i32, i32* %95, align 8, !tbaa !545
  %243 = load i32, i32* %96, align 4, !tbaa !546
  br label %244

244:                                              ; preds = %241, %170, %112
  %245 = phi i32 [ %243, %241 ], [ %113, %112 ], [ %113, %170 ]
  %246 = phi i32 [ %242, %241 ], [ %114, %112 ], [ %114, %170 ]
  %247 = add nuw nsw i64 %115, 1
  %248 = mul nsw i32 %245, %246
  %249 = sext i32 %248 to i64
  %250 = icmp slt i64 %247, %249
  br i1 %250, label %112, label %251

251:                                              ; preds = %244
  %252 = load i32, i32* %91, align 8, !tbaa !544
  br label %253

253:                                              ; preds = %251, %99
  %254 = phi i32 [ %252, %251 ], [ %100, %99 ]
  %255 = phi i32 [ %245, %251 ], [ %101, %99 ]
  %256 = phi i32 [ %246, %251 ], [ %102, %99 ]
  %257 = phi i32 [ %245, %251 ], [ %103, %99 ]
  %258 = phi i32 [ %246, %251 ], [ %104, %99 ]
  %259 = add nuw nsw i64 %105, 1
  %260 = sext i32 %254 to i64
  %261 = icmp slt i64 %259, %260
  br i1 %261, label %99, label %262

262:                                              ; preds = %253
  %263 = load i32, i32* %83, align 8, !tbaa !35
  br label %264

264:                                              ; preds = %262, %87
  %265 = phi i32 [ %263, %262 ], [ %88, %87 ]
  %266 = add nuw nsw i64 %89, 1
  %267 = sext i32 %265 to i64
  %268 = icmp slt i64 %266, %267
  br i1 %268, label %87, label %269

269:                                              ; preds = %264
  %270 = load i32, i32* %8, align 8, !tbaa !542
  br label %271

271:                                              ; preds = %269, %82, %33
  %272 = phi i32 [ %270, %269 ], [ %26, %82 ], [ %26, %33 ]
  %273 = add nuw nsw i64 %27, 1
  %274 = sext i32 %272 to i64
  %275 = icmp slt i64 %273, %274
  br i1 %275, label %25, label %276

276:                                              ; preds = %271, %3
  call void @llvm.lifetime.end.p0i8(i64 1200, i8* nonnull %5) #9
  ret void
}

; Function Attrs: nounwind uwtable
define void @tcd_rateallocate_fixed(%struct.opj_tcd* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 10
  %3 = load %struct.opj_tcp*, %struct.opj_tcp** %2, align 8, !tbaa !665
  %4 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %3, i64 0, i32 3
  %5 = load i32, i32* %4, align 4, !tbaa !219
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %7, %1
  %8 = phi i32 [ %9, %7 ], [ 0, %1 ]
  tail call void @tcd_makelayer_fixed(%struct.opj_tcd* nonnull %0, i32 %8, i32 1)
  %9 = add nuw nsw i32 %8, 1
  %10 = load %struct.opj_tcp*, %struct.opj_tcp** %2, align 8, !tbaa !665
  %11 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %10, i64 0, i32 3
  %12 = load i32, i32* %11, align 4, !tbaa !219
  %13 = icmp slt i32 %9, %12
  br i1 %13, label %7, label %14

14:                                               ; preds = %7, %1
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @tcd_makelayer(%struct.opj_tcd* nocapture readonly, i32, double, i32) #4 {
  %5 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 9
  %6 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %5, align 8, !tbaa !664
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %6, i64 0, i32 8, i64 %7
  store double 0.000000e+00, double* %8, align 8, !tbaa !68
  %9 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %6, i64 0, i32 4
  %10 = load i32, i32* %9, align 8, !tbaa !542
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %211

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %6, i64 0, i32 5
  %14 = icmp eq i32 %1, 0
  %15 = icmp eq i32 %3, 0
  br label %16

16:                                               ; preds = %206, %12
  %17 = phi i32 [ %10, %12 ], [ %207, %206 ]
  %18 = phi i64 [ 0, %12 ], [ %208, %206 ]
  %19 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %13, align 8, !tbaa !543
  %20 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %19, i64 %18, i32 4
  %21 = load i32, i32* %20, align 8, !tbaa !35
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %206

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %19, i64 %18, i32 5
  br label %25

25:                                               ; preds = %199, %23
  %26 = phi i32 [ %21, %23 ], [ %200, %199 ]
  %27 = phi i64 [ 0, %23 ], [ %201, %199 ]
  %28 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %24, align 8, !tbaa !37
  %29 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 %27, i32 6
  %30 = load i32, i32* %29, align 8, !tbaa !544
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %199

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 %27, i32 4
  %34 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 %27, i32 5
  %35 = load i32, i32* %33, align 8, !tbaa !545
  %36 = load i32, i32* %34, align 4, !tbaa !546
  br label %37

37:                                               ; preds = %188, %32
  %38 = phi i32 [ %30, %32 ], [ %189, %188 ]
  %39 = phi i32 [ %36, %32 ], [ %190, %188 ]
  %40 = phi i32 [ %35, %32 ], [ %191, %188 ]
  %41 = phi i32 [ %36, %32 ], [ %192, %188 ]
  %42 = phi i32 [ %35, %32 ], [ %193, %188 ]
  %43 = phi i64 [ 0, %32 ], [ %194, %188 ]
  %44 = mul nsw i32 %41, %42
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %46, label %188

46:                                               ; preds = %37
  %47 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 %27, i32 7, i64 %43, i32 5
  br label %48

48:                                               ; preds = %179, %46
  %49 = phi i32 [ %39, %46 ], [ %180, %179 ]
  %50 = phi i32 [ %40, %46 ], [ %181, %179 ]
  %51 = phi i64 [ 0, %46 ], [ %182, %179 ]
  %52 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %47, align 8, !tbaa !549
  %53 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %52, i64 %51, i32 4
  %54 = load i32, i32* %53, align 8, !tbaa !550
  %55 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %52, i64 %51, i32 5
  %56 = load i32, i32* %55, align 4, !tbaa !552
  %57 = mul nsw i32 %56, %54
  %58 = icmp sgt i32 %57, 0
  br i1 %58, label %59, label %179

59:                                               ; preds = %48
  %60 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %52, i64 %51, i32 6, i32 0
  %61 = sext i32 %57 to i64
  br label %62

62:                                               ; preds = %173, %59
  %63 = phi i64 [ 0, %59 ], [ %174, %173 ]
  %64 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %60, align 8, !tbaa !15
  %65 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %64, i64 %63
  %66 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %64, i64 %63, i32 1
  %67 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %66, align 8, !tbaa !631
  %68 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %64, i64 %63, i32 10
  br i1 %14, label %71, label %69

69:                                               ; preds = %62
  %70 = load i32, i32* %68, align 4, !tbaa !666
  br label %72

71:                                               ; preds = %62
  store i32 0, i32* %68, align 4, !tbaa !666
  br label %72

72:                                               ; preds = %71, %69
  %73 = phi i32 [ %70, %69 ], [ 0, %71 ]
  %74 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %64, i64 %63, i32 10
  %75 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %64, i64 %63, i32 11
  %76 = load i32, i32* %75, align 8, !tbaa !587
  %77 = icmp slt i32 %73, %76
  br i1 %77, label %78, label %123

78:                                               ; preds = %72
  %79 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %64, i64 %63, i32 2
  %80 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %79, align 8, !tbaa !581
  %81 = sext i32 %73 to i64
  %82 = sext i32 %76 to i64
  br label %83

83:                                               ; preds = %119, %78
  %84 = phi i64 [ %81, %78 ], [ %120, %119 ]
  %85 = phi i32 [ %73, %78 ], [ %121, %119 ]
  %86 = icmp eq i32 %85, 0
  %87 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %80, i64 %84, i32 0
  %88 = load i32, i32* %87, align 8, !tbaa !586
  br i1 %86, label %89, label %92

89:                                               ; preds = %83
  %90 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %80, i64 %84, i32 1
  %91 = load double, double* %90, align 8, !tbaa !585
  br label %103

92:                                               ; preds = %83
  %93 = add nsw i32 %85, -1
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %80, i64 %94, i32 0
  %96 = load i32, i32* %95, align 8, !tbaa !586
  %97 = sub nsw i32 %88, %96
  %98 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %80, i64 %84, i32 1
  %99 = load double, double* %98, align 8, !tbaa !585
  %100 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %80, i64 %94, i32 1
  %101 = load double, double* %100, align 8, !tbaa !585
  %102 = fsub double %99, %101
  br label %103

103:                                              ; preds = %92, %89
  %104 = phi i32 [ %88, %89 ], [ %97, %92 ]
  %105 = phi double [ %91, %89 ], [ %102, %92 ]
  %106 = icmp eq i32 %104, 0
  br i1 %106, label %107, label %112

107:                                              ; preds = %103
  %108 = fcmp une double %105, 0.000000e+00
  %109 = add nsw i64 %84, 1
  %110 = trunc i64 %109 to i32
  %111 = select i1 %108, i32 %110, i32 %85
  br label %119

112:                                              ; preds = %103
  %113 = sitofp i32 %104 to double
  %114 = fdiv double %105, %113
  %115 = fcmp ult double %114, %2
  %116 = add nsw i64 %84, 1
  %117 = trunc i64 %116 to i32
  %118 = select i1 %115, i32 %85, i32 %117
  br label %119

119:                                              ; preds = %112, %107
  %120 = phi i64 [ %116, %112 ], [ %109, %107 ]
  %121 = phi i32 [ %118, %112 ], [ %111, %107 ]
  %122 = icmp slt i64 %120, %82
  br i1 %122, label %83, label %123

123:                                              ; preds = %119, %72
  %124 = phi i32 [ %73, %72 ], [ %121, %119 ]
  %125 = sub nsw i32 %124, %73
  %126 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %67, i64 %7, i32 0
  store i32 %125, i32* %126, align 8, !tbaa !632
  %127 = icmp eq i32 %125, 0
  br i1 %127, label %128, label %130

128:                                              ; preds = %123
  %129 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %67, i64 %7, i32 2
  store double 0.000000e+00, double* %129, align 8, !tbaa !637
  br label %173

130:                                              ; preds = %123
  %131 = icmp eq i32 %73, 0
  %132 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %64, i64 %63, i32 2
  %133 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %132, align 8, !tbaa !581
  %134 = add nsw i32 %124, -1
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %133, i64 %135, i32 0
  %137 = load i32, i32* %136, align 8, !tbaa !586
  br i1 %131, label %138, label %149

138:                                              ; preds = %130
  %139 = bitcast %struct.opj_tcd_cblk_enc* %65 to i64*
  %140 = load i64, i64* %139, align 8, !tbaa !580
  %141 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %67, i64 %7, i32 3
  %142 = bitcast i8** %141 to i64*
  store i64 %140, i64* %142, align 8, !tbaa !636
  %143 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %133, i64 %135, i32 1
  %144 = bitcast double* %143 to i64*
  %145 = load i64, i64* %144, align 8, !tbaa !585
  %146 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %67, i64 %7, i32 2
  %147 = bitcast double* %146 to i64*
  store i64 %145, i64* %147, align 8, !tbaa !637
  %148 = bitcast i64 %145 to double
  br label %166

149:                                              ; preds = %130
  %150 = add nsw i32 %73, -1
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %133, i64 %151, i32 0
  %153 = load i32, i32* %152, align 8, !tbaa !586
  %154 = sub nsw i32 %137, %153
  %155 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %65, i64 0, i32 0
  %156 = load i8*, i8** %155, align 8, !tbaa !580
  %157 = sext i32 %153 to i64
  %158 = getelementptr inbounds i8, i8* %156, i64 %157
  %159 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %67, i64 %7, i32 3
  store i8* %158, i8** %159, align 8, !tbaa !636
  %160 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %133, i64 %135, i32 1
  %161 = load double, double* %160, align 8, !tbaa !585
  %162 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %133, i64 %151, i32 1
  %163 = load double, double* %162, align 8, !tbaa !585
  %164 = fsub double %161, %163
  %165 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %67, i64 %7, i32 2
  store double %164, double* %165, align 8, !tbaa !637
  br label %166

166:                                              ; preds = %149, %138
  %167 = phi double [ %164, %149 ], [ %148, %138 ]
  %168 = phi i32 [ %154, %149 ], [ %137, %138 ]
  %169 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %67, i64 %7, i32 1
  store i32 %168, i32* %169, align 4
  %170 = load double, double* %8, align 8, !tbaa !68
  %171 = fadd double %167, %170
  store double %171, double* %8, align 8, !tbaa !68
  br i1 %15, label %173, label %172

172:                                              ; preds = %166
  store i32 %124, i32* %74, align 4, !tbaa !666
  br label %173

173:                                              ; preds = %172, %166, %128
  %174 = add nuw nsw i64 %63, 1
  %175 = icmp slt i64 %174, %61
  br i1 %175, label %62, label %176

176:                                              ; preds = %173
  %177 = load i32, i32* %33, align 8, !tbaa !545
  %178 = load i32, i32* %34, align 4, !tbaa !546
  br label %179

179:                                              ; preds = %176, %48
  %180 = phi i32 [ %178, %176 ], [ %49, %48 ]
  %181 = phi i32 [ %177, %176 ], [ %50, %48 ]
  %182 = add nuw nsw i64 %51, 1
  %183 = mul nsw i32 %180, %181
  %184 = sext i32 %183 to i64
  %185 = icmp slt i64 %182, %184
  br i1 %185, label %48, label %186

186:                                              ; preds = %179
  %187 = load i32, i32* %29, align 8, !tbaa !544
  br label %188

188:                                              ; preds = %186, %37
  %189 = phi i32 [ %187, %186 ], [ %38, %37 ]
  %190 = phi i32 [ %180, %186 ], [ %39, %37 ]
  %191 = phi i32 [ %181, %186 ], [ %40, %37 ]
  %192 = phi i32 [ %180, %186 ], [ %41, %37 ]
  %193 = phi i32 [ %181, %186 ], [ %42, %37 ]
  %194 = add nuw nsw i64 %43, 1
  %195 = sext i32 %189 to i64
  %196 = icmp slt i64 %194, %195
  br i1 %196, label %37, label %197

197:                                              ; preds = %188
  %198 = load i32, i32* %20, align 8, !tbaa !35
  br label %199

199:                                              ; preds = %197, %25
  %200 = phi i32 [ %198, %197 ], [ %26, %25 ]
  %201 = add nuw nsw i64 %27, 1
  %202 = sext i32 %200 to i64
  %203 = icmp slt i64 %201, %202
  br i1 %203, label %25, label %204

204:                                              ; preds = %199
  %205 = load i32, i32* %9, align 8, !tbaa !542
  br label %206

206:                                              ; preds = %204, %16
  %207 = phi i32 [ %205, %204 ], [ %17, %16 ]
  %208 = add nuw nsw i64 %18, 1
  %209 = sext i32 %207 to i64
  %210 = icmp slt i64 %208, %209
  br i1 %210, label %16, label %211

211:                                              ; preds = %206, %4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @tcd_rateallocate(%struct.opj_tcd* nocapture readonly, i8*, i32, %struct.opj_codestream_info*) #0 {
  %5 = alloca [100 x double], align 16
  %6 = bitcast [100 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %6) #9
  %7 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  %8 = load %struct.opj_cp*, %struct.opj_cp** %7, align 8, !tbaa !661
  %9 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 9
  %10 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %9, align 8, !tbaa !664
  %11 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 10
  %12 = load %struct.opj_tcp*, %struct.opj_tcp** %11, align 8, !tbaa !665
  %13 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 0, i32 6
  store i32 0, i32* %13, align 8, !tbaa !667
  %14 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 0, i32 4
  %15 = load i32, i32* %14, align 8, !tbaa !542
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %187

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 0, i32 5
  %19 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  %20 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %18, align 8, !tbaa !543
  %21 = sext i32 %15 to i64
  br label %22

22:                                               ; preds = %168, %17
  %23 = phi i32 [ 0, %17 ], [ %170, %168 ]
  %24 = phi i64 [ 0, %17 ], [ %185, %168 ]
  %25 = phi double [ 0x7FEFFFFFFFFFFFFF, %17 ], [ %172, %168 ]
  %26 = phi double [ 0.000000e+00, %17 ], [ %171, %168 ]
  %27 = phi double [ 0.000000e+00, %17 ], [ %184, %168 ]
  %28 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %20, i64 %24, i32 7
  store i32 0, i32* %28, align 8, !tbaa !668
  %29 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %20, i64 %24, i32 4
  %30 = load i32, i32* %29, align 8, !tbaa !35
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %168

32:                                               ; preds = %22
  %33 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %20, i64 %24, i32 5
  %34 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %33, align 8, !tbaa !37
  %35 = sext i32 %30 to i64
  br label %36

36:                                               ; preds = %161, %32
  %37 = phi i32 [ 0, %32 ], [ %162, %161 ]
  %38 = phi i32 [ %23, %32 ], [ %163, %161 ]
  %39 = phi i64 [ 0, %32 ], [ %166, %161 ]
  %40 = phi double [ %25, %32 ], [ %165, %161 ]
  %41 = phi double [ %26, %32 ], [ %164, %161 ]
  %42 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %39, i32 6
  %43 = load i32, i32* %42, align 8, !tbaa !544
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %161

45:                                               ; preds = %36
  %46 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %39, i32 4
  %47 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %39, i32 5
  %48 = load i32, i32* %46, align 8, !tbaa !545
  %49 = load i32, i32* %47, align 4, !tbaa !546
  %50 = mul nsw i32 %49, %48
  %51 = icmp sgt i32 %50, 0
  %52 = mul nsw i32 %49, %48
  %53 = sext i32 %52 to i64
  %54 = sext i32 %43 to i64
  br label %55

55:                                               ; preds = %154, %45
  %56 = phi i32 [ %37, %45 ], [ %155, %154 ]
  %57 = phi i32 [ %38, %45 ], [ %156, %154 ]
  %58 = phi i64 [ 0, %45 ], [ %159, %154 ]
  %59 = phi double [ %40, %45 ], [ %158, %154 ]
  %60 = phi double [ %41, %45 ], [ %157, %154 ]
  br i1 %51, label %61, label %154

61:                                               ; preds = %55
  %62 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %39, i32 7, i64 %58, i32 5
  %63 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %62, align 8, !tbaa !549
  br label %64

64:                                               ; preds = %147, %61
  %65 = phi i32 [ %56, %61 ], [ %148, %147 ]
  %66 = phi i32 [ %57, %61 ], [ %149, %147 ]
  %67 = phi i64 [ 0, %61 ], [ %152, %147 ]
  %68 = phi double [ %59, %61 ], [ %151, %147 ]
  %69 = phi double [ %60, %61 ], [ %150, %147 ]
  %70 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %63, i64 %67, i32 4
  %71 = load i32, i32* %70, align 8, !tbaa !550
  %72 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %63, i64 %67, i32 5
  %73 = load i32, i32* %72, align 4, !tbaa !552
  %74 = mul nsw i32 %73, %71
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %76, label %147

76:                                               ; preds = %64
  %77 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %63, i64 %67, i32 6, i32 0
  %78 = sext i32 %74 to i64
  br label %79

79:                                               ; preds = %129, %76
  %80 = phi i32 [ %65, %76 ], [ %144, %129 ]
  %81 = phi i32 [ %66, %76 ], [ %143, %129 ]
  %82 = phi i64 [ 0, %76 ], [ %145, %129 ]
  %83 = phi double [ %68, %76 ], [ %131, %129 ]
  %84 = phi double [ %69, %76 ], [ %130, %129 ]
  %85 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %77, align 8, !tbaa !15
  %86 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %85, i64 %82, i32 11
  %87 = load i32, i32* %86, align 8, !tbaa !587
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %89, label %129

89:                                               ; preds = %79
  %90 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %85, i64 %82, i32 2
  %91 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %90, align 8, !tbaa !581
  %92 = sext i32 %87 to i64
  %93 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %91, i64 0, i32 1
  br label %94

94:                                               ; preds = %124, %89
  %95 = phi i64 [ 0, %89 ], [ %127, %124 ]
  %96 = phi double [ %83, %89 ], [ %126, %124 ]
  %97 = phi double [ %84, %89 ], [ %125, %124 ]
  %98 = icmp eq i64 %95, 0
  %99 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %91, i64 %95, i32 0
  %100 = load i32, i32* %99, align 8, !tbaa !586
  br i1 %98, label %101, label %103

101:                                              ; preds = %94
  %102 = load double, double* %93, align 8, !tbaa !585
  br label %113

103:                                              ; preds = %94
  %104 = add nsw i64 %95, -1
  %105 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %91, i64 %104, i32 0
  %106 = load i32, i32* %105, align 8, !tbaa !586
  %107 = sub nsw i32 %100, %106
  %108 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %91, i64 %95, i32 1
  %109 = load double, double* %108, align 8, !tbaa !585
  %110 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %91, i64 %104, i32 1
  %111 = load double, double* %110, align 8, !tbaa !585
  %112 = fsub double %109, %111
  br label %113

113:                                              ; preds = %103, %101
  %114 = phi i32 [ %100, %101 ], [ %107, %103 ]
  %115 = phi double [ %102, %101 ], [ %112, %103 ]
  %116 = icmp eq i32 %114, 0
  br i1 %116, label %124, label %117

117:                                              ; preds = %113
  %118 = sitofp i32 %114 to double
  %119 = fdiv double %115, %118
  %120 = fcmp olt double %119, %96
  %121 = select i1 %120, double %119, double %96
  %122 = fcmp ogt double %119, %97
  %123 = select i1 %122, double %119, double %97
  br label %124

124:                                              ; preds = %117, %113
  %125 = phi double [ %97, %113 ], [ %123, %117 ]
  %126 = phi double [ %96, %113 ], [ %121, %117 ]
  %127 = add nuw nsw i64 %95, 1
  %128 = icmp slt i64 %127, %92
  br i1 %128, label %94, label %129

129:                                              ; preds = %124, %79
  %130 = phi double [ %84, %79 ], [ %125, %124 ]
  %131 = phi double [ %83, %79 ], [ %126, %124 ]
  %132 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %85, i64 %82, i32 5
  %133 = load i32, i32* %132, align 8, !tbaa !559
  %134 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %85, i64 %82, i32 3
  %135 = load i32, i32* %134, align 8, !tbaa !553
  %136 = sub nsw i32 %133, %135
  %137 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %85, i64 %82, i32 6
  %138 = load i32, i32* %137, align 4, !tbaa !560
  %139 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %85, i64 %82, i32 4
  %140 = load i32, i32* %139, align 4, !tbaa !556
  %141 = sub nsw i32 %138, %140
  %142 = mul nsw i32 %141, %136
  %143 = add nsw i32 %142, %81
  store i32 %143, i32* %13, align 8, !tbaa !667
  %144 = add nsw i32 %80, %142
  store i32 %144, i32* %28, align 8, !tbaa !668
  %145 = add nuw nsw i64 %82, 1
  %146 = icmp slt i64 %145, %78
  br i1 %146, label %79, label %147

147:                                              ; preds = %129, %64
  %148 = phi i32 [ %65, %64 ], [ %144, %129 ]
  %149 = phi i32 [ %66, %64 ], [ %143, %129 ]
  %150 = phi double [ %69, %64 ], [ %130, %129 ]
  %151 = phi double [ %68, %64 ], [ %131, %129 ]
  %152 = add nuw nsw i64 %67, 1
  %153 = icmp slt i64 %152, %53
  br i1 %153, label %64, label %154

154:                                              ; preds = %147, %55
  %155 = phi i32 [ %56, %55 ], [ %148, %147 ]
  %156 = phi i32 [ %57, %55 ], [ %149, %147 ]
  %157 = phi double [ %60, %55 ], [ %150, %147 ]
  %158 = phi double [ %59, %55 ], [ %151, %147 ]
  %159 = add nuw nsw i64 %58, 1
  %160 = icmp slt i64 %159, %54
  br i1 %160, label %55, label %161

161:                                              ; preds = %154, %36
  %162 = phi i32 [ %37, %36 ], [ %155, %154 ]
  %163 = phi i32 [ %38, %36 ], [ %156, %154 ]
  %164 = phi double [ %41, %36 ], [ %157, %154 ]
  %165 = phi double [ %40, %36 ], [ %158, %154 ]
  %166 = add nuw nsw i64 %39, 1
  %167 = icmp slt i64 %166, %35
  br i1 %167, label %36, label %168

168:                                              ; preds = %161, %22
  %169 = phi i32 [ 0, %22 ], [ %162, %161 ]
  %170 = phi i32 [ %23, %22 ], [ %163, %161 ]
  %171 = phi double [ %26, %22 ], [ %164, %161 ]
  %172 = phi double [ %25, %22 ], [ %165, %161 ]
  %173 = load %struct.opj_image*, %struct.opj_image** %19, align 8, !tbaa !651
  %174 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %173, i64 0, i32 6
  %175 = load %struct.opj_image_comp*, %struct.opj_image_comp** %174, align 8, !tbaa !128
  %176 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %175, i64 %24, i32 6
  %177 = load i32, i32* %176, align 8, !tbaa !207
  %178 = shl i32 1, %177
  %179 = sitofp i32 %178 to double
  %180 = fadd double %179, -1.000000e+00
  %181 = fmul double %180, %180
  %182 = sitofp i32 %169 to double
  %183 = fmul double %181, %182
  %184 = fadd double %27, %183
  %185 = add nuw nsw i64 %24, 1
  %186 = icmp slt i64 %185, %21
  br i1 %186, label %22, label %187

187:                                              ; preds = %168, %4
  %188 = phi i32 [ 0, %4 ], [ %170, %168 ]
  %189 = phi double [ 0.000000e+00, %4 ], [ %184, %168 ]
  %190 = phi double [ 0.000000e+00, %4 ], [ %171, %168 ]
  %191 = phi double [ 0x7FEFFFFFFFFFFFFF, %4 ], [ %172, %168 ]
  %192 = icmp ne %struct.opj_codestream_info* %3, null
  br i1 %192, label %193, label %212

193:                                              ; preds = %187
  %194 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 21
  %195 = load %struct.opj_tile_info*, %struct.opj_tile_info** %194, align 8, !tbaa !143
  %196 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  %197 = load i32, i32* %196, align 8, !tbaa !669
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %195, i64 %198, i32 10
  store i32 %188, i32* %199, align 8, !tbaa !670
  %200 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 0, i32 7
  %201 = bitcast double* %200 to i64*
  %202 = load i64, i64* %201, align 8, !tbaa !541
  %203 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %195, i64 %198, i32 11
  %204 = bitcast double* %203 to i64*
  store i64 %202, i64* %204, align 8, !tbaa !671
  %205 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %12, i64 0, i32 3
  %206 = load i32, i32* %205, align 4, !tbaa !219
  %207 = sext i32 %206 to i64
  %208 = shl nsw i64 %207, 3
  %209 = tail call noalias i8* @malloc(i64 %208) #9
  %210 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %195, i64 %198, i32 0
  %211 = bitcast double** %210 to i8**
  store i8* %209, i8** %211, align 8, !tbaa !463
  br label %212

212:                                              ; preds = %193, %187
  %213 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %12, i64 0, i32 3
  %214 = load i32, i32* %213, align 4, !tbaa !219
  %215 = icmp sgt i32 %214, 0
  br i1 %215, label %216, label %402

216:                                              ; preds = %212
  %217 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 0, i32 7
  %218 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 7
  %219 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 9
  %220 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %221 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  %222 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %8, i64 0, i32 0
  %223 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  %224 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 2
  %225 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 0
  %226 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 4
  %227 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 3
  %228 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 0, i32 8, i64 0
  %229 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 21
  br label %230

230:                                              ; preds = %395, %216
  %231 = phi i64 [ 0, %216 ], [ %398, %395 ]
  %232 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %12, i64 0, i32 5, i64 %231
  %233 = load float, float* %232, align 4, !tbaa !112
  %234 = fcmp une float %233, 0.000000e+00
  br i1 %234, label %235, label %240

235:                                              ; preds = %230
  %236 = tail call float @llvm.ceil.f32(float %233)
  %237 = fptosi float %236 to i32
  %238 = icmp slt i32 %237, %2
  %239 = select i1 %238, i32 %237, i32 %2
  br label %240

240:                                              ; preds = %235, %230
  %241 = phi i32 [ %239, %235 ], [ %2, %230 ]
  %242 = load double, double* %217, align 8, !tbaa !541
  %243 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %12, i64 0, i32 14, i64 %231
  %244 = load float, float* %243, align 4, !tbaa !112
  %245 = fdiv float %244, 1.000000e+01
  %246 = fpext float %245 to double
  %247 = tail call double @pow(double 1.000000e+01, double %246) #9
  %248 = fdiv double %189, %247
  %249 = fsub double %242, %248
  %250 = load i32, i32* %218, align 8, !tbaa !256
  %251 = icmp eq i32 %250, 1
  br i1 %251, label %252, label %255

252:                                              ; preds = %240
  %253 = load float, float* %232, align 4, !tbaa !112
  %254 = fcmp ogt float %253, 0.000000e+00
  br i1 %254, label %261, label %255

255:                                              ; preds = %252, %240
  %256 = load i32, i32* %219, align 8, !tbaa !260
  %257 = icmp eq i32 %256, 1
  br i1 %257, label %258, label %374

258:                                              ; preds = %255
  %259 = load float, float* %243, align 4, !tbaa !112
  %260 = fcmp ogt float %259, 0.000000e+00
  br i1 %260, label %261, label %374

261:                                              ; preds = %258, %252
  %262 = load %struct.opj_common_struct*, %struct.opj_common_struct** %220, align 8, !tbaa !660
  %263 = load %struct.opj_image*, %struct.opj_image** %221, align 8, !tbaa !651
  %264 = tail call %struct.opj_t2* @t2_create(%struct.opj_common_struct* %262, %struct.opj_image* %263, %struct.opj_cp* nonnull %8) #9
  %265 = add nuw nsw i64 %231, 1
  %266 = icmp eq i64 %231, 0
  %267 = add nsw i64 %231, -1
  %268 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %267
  %269 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 0, i32 8, i64 %231
  br i1 %266, label %274, label %270

270:                                              ; preds = %261
  %271 = trunc i64 %231 to i32
  %272 = trunc i64 %265 to i32
  %273 = trunc i64 %265 to i32
  br label %321

274:                                              ; preds = %261
  %275 = trunc i64 %265 to i32
  %276 = trunc i64 %265 to i32
  br label %277

277:                                              ; preds = %315, %274
  %278 = phi i32 [ %319, %315 ], [ 0, %274 ]
  %279 = phi double [ %318, %315 ], [ 0.000000e+00, %274 ]
  %280 = phi double [ %317, %315 ], [ %190, %274 ]
  %281 = phi double [ %316, %315 ], [ %191, %274 ]
  %282 = fadd double %281, %280
  %283 = fmul double %282, 5.000000e-01
  tail call void @tcd_makelayer(%struct.opj_tcd* %0, i32 0, double %283, i32 0)
  %284 = load i32, i32* %219, align 8, !tbaa !260
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %303, label %286

286:                                              ; preds = %277
  %287 = load i32, i32* %222, align 8, !tbaa !250
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %300, label %289

289:                                              ; preds = %286
  %290 = load i32, i32* %223, align 8, !tbaa !669
  %291 = load i32, i32* %224, align 8, !tbaa !353
  %292 = load i32, i32* %225, align 8, !tbaa !347
  %293 = load i32, i32* %226, align 8, !tbaa !346
  %294 = load i32, i32* %227, align 4, !tbaa !341
  %295 = tail call i32 @t2_encode_packets(%struct.opj_t2* %264, i32 %290, %struct.opj_tcd_tile* %10, i32 %275, i8* %1, i32 %241, %struct.opj_codestream_info* %3, i32 %291, i32 %292, i32 %293, i32 0, i32 %294) #9
  %296 = icmp eq i32 %295, -999
  br i1 %296, label %315, label %297

297:                                              ; preds = %289
  %298 = load double, double* %228, align 8, !tbaa !68
  %299 = fcmp olt double %298, %249
  br i1 %299, label %315, label %311

300:                                              ; preds = %286
  %301 = load double, double* %228, align 8, !tbaa !68
  %302 = fcmp olt double %301, %249
  br i1 %302, label %315, label %311

303:                                              ; preds = %277
  %304 = load i32, i32* %223, align 8, !tbaa !669
  %305 = load i32, i32* %224, align 8, !tbaa !353
  %306 = load i32, i32* %225, align 8, !tbaa !347
  %307 = load i32, i32* %226, align 8, !tbaa !346
  %308 = load i32, i32* %227, align 4, !tbaa !341
  %309 = tail call i32 @t2_encode_packets(%struct.opj_t2* %264, i32 %304, %struct.opj_tcd_tile* %10, i32 %276, i8* %1, i32 %241, %struct.opj_codestream_info* %3, i32 %305, i32 %306, i32 %307, i32 0, i32 %308) #9
  %310 = icmp eq i32 %309, -999
  br i1 %310, label %315, label %311

311:                                              ; preds = %303, %300, %297
  %312 = phi double [ %283, %297 ], [ %283, %300 ], [ %281, %303 ]
  %313 = phi double [ %280, %297 ], [ %280, %300 ], [ %283, %303 ]
  %314 = phi double [ %279, %297 ], [ %279, %300 ], [ %283, %303 ]
  br label %315

315:                                              ; preds = %311, %303, %300, %297, %289
  %316 = phi double [ %312, %311 ], [ %283, %289 ], [ %281, %297 ], [ %281, %300 ], [ %283, %303 ]
  %317 = phi double [ %313, %311 ], [ %280, %289 ], [ %283, %297 ], [ %283, %300 ], [ %280, %303 ]
  %318 = phi double [ %314, %311 ], [ %279, %289 ], [ %283, %297 ], [ %283, %300 ], [ %279, %303 ]
  %319 = add nuw nsw i32 %278, 1
  %320 = icmp eq i32 %319, 128
  br i1 %320, label %369, label %277

321:                                              ; preds = %363, %270
  %322 = phi i32 [ %367, %363 ], [ 0, %270 ]
  %323 = phi double [ %366, %363 ], [ 0.000000e+00, %270 ]
  %324 = phi double [ %365, %363 ], [ %190, %270 ]
  %325 = phi double [ %364, %363 ], [ %191, %270 ]
  %326 = fadd double %325, %324
  %327 = fmul double %326, 5.000000e-01
  tail call void @tcd_makelayer(%struct.opj_tcd* %0, i32 %271, double %327, i32 0)
  %328 = load i32, i32* %219, align 8, !tbaa !260
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %351, label %330

330:                                              ; preds = %321
  %331 = load i32, i32* %222, align 8, !tbaa !250
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %346, label %333

333:                                              ; preds = %330
  %334 = load i32, i32* %223, align 8, !tbaa !669
  %335 = load i32, i32* %224, align 8, !tbaa !353
  %336 = load i32, i32* %225, align 8, !tbaa !347
  %337 = load i32, i32* %226, align 8, !tbaa !346
  %338 = load i32, i32* %227, align 4, !tbaa !341
  %339 = tail call i32 @t2_encode_packets(%struct.opj_t2* %264, i32 %334, %struct.opj_tcd_tile* %10, i32 %272, i8* %1, i32 %241, %struct.opj_codestream_info* %3, i32 %335, i32 %336, i32 %337, i32 0, i32 %338) #9
  %340 = icmp eq i32 %339, -999
  br i1 %340, label %363, label %341

341:                                              ; preds = %333
  %342 = load double, double* %268, align 8, !tbaa !68
  %343 = load double, double* %269, align 8, !tbaa !68
  %344 = fadd double %342, %343
  %345 = fcmp olt double %344, %249
  br i1 %345, label %363, label %359

346:                                              ; preds = %330
  %347 = load double, double* %268, align 8, !tbaa !68
  %348 = load double, double* %269, align 8, !tbaa !68
  %349 = fadd double %347, %348
  %350 = fcmp olt double %349, %249
  br i1 %350, label %363, label %359

351:                                              ; preds = %321
  %352 = load i32, i32* %223, align 8, !tbaa !669
  %353 = load i32, i32* %224, align 8, !tbaa !353
  %354 = load i32, i32* %225, align 8, !tbaa !347
  %355 = load i32, i32* %226, align 8, !tbaa !346
  %356 = load i32, i32* %227, align 4, !tbaa !341
  %357 = tail call i32 @t2_encode_packets(%struct.opj_t2* %264, i32 %352, %struct.opj_tcd_tile* %10, i32 %273, i8* %1, i32 %241, %struct.opj_codestream_info* %3, i32 %353, i32 %354, i32 %355, i32 0, i32 %356) #9
  %358 = icmp eq i32 %357, -999
  br i1 %358, label %363, label %359

359:                                              ; preds = %351, %346, %341
  %360 = phi double [ %327, %341 ], [ %327, %346 ], [ %325, %351 ]
  %361 = phi double [ %324, %341 ], [ %324, %346 ], [ %327, %351 ]
  %362 = phi double [ %323, %341 ], [ %323, %346 ], [ %327, %351 ]
  br label %363

363:                                              ; preds = %359, %351, %346, %341, %333
  %364 = phi double [ %360, %359 ], [ %327, %333 ], [ %325, %341 ], [ %325, %346 ], [ %327, %351 ]
  %365 = phi double [ %361, %359 ], [ %324, %333 ], [ %327, %341 ], [ %327, %346 ], [ %324, %351 ]
  %366 = phi double [ %362, %359 ], [ %323, %333 ], [ %327, %341 ], [ %327, %346 ], [ %323, %351 ]
  %367 = add nuw nsw i32 %322, 1
  %368 = icmp eq i32 %367, 128
  br i1 %368, label %369, label %321

369:                                              ; preds = %363, %315
  %370 = phi double [ %318, %315 ], [ %366, %363 ]
  %371 = phi double [ %283, %315 ], [ %327, %363 ]
  %372 = fcmp oeq double %370, 0.000000e+00
  %373 = select i1 %372, double %371, double %370
  tail call void @t2_destroy(%struct.opj_t2* %264) #9
  br label %374

374:                                              ; preds = %369, %258, %255
  %375 = phi double [ %373, %369 ], [ %191, %258 ], [ %191, %255 ]
  br i1 %192, label %376, label %383

376:                                              ; preds = %374
  %377 = load %struct.opj_tile_info*, %struct.opj_tile_info** %229, align 8, !tbaa !143
  %378 = load i32, i32* %223, align 8, !tbaa !669
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %377, i64 %379, i32 0
  %381 = load double*, double** %380, align 8, !tbaa !463
  %382 = getelementptr inbounds double, double* %381, i64 %231
  store double %375, double* %382, align 8, !tbaa !68
  br label %383

383:                                              ; preds = %376, %374
  %384 = trunc i64 %231 to i32
  tail call void @tcd_makelayer(%struct.opj_tcd* %0, i32 %384, double %375, i32 1)
  %385 = icmp eq i64 %231, 0
  br i1 %385, label %386, label %388

386:                                              ; preds = %383
  %387 = load double, double* %228, align 8, !tbaa !68
  br label %395

388:                                              ; preds = %383
  %389 = add nsw i64 %231, -1
  %390 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %389
  %391 = load double, double* %390, align 8, !tbaa !68
  %392 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 0, i32 8, i64 %231
  %393 = load double, double* %392, align 8, !tbaa !68
  %394 = fadd double %391, %393
  br label %395

395:                                              ; preds = %388, %386
  %396 = phi double [ %387, %386 ], [ %394, %388 ]
  %397 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %231
  store double %396, double* %397, align 8, !tbaa !68
  %398 = add nuw nsw i64 %231, 1
  %399 = load i32, i32* %213, align 4, !tbaa !219
  %400 = sext i32 %399 to i64
  %401 = icmp slt i64 %398, %400
  br i1 %401, label %230, label %402

402:                                              ; preds = %395, %212
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %6) #9
  ret i32 1
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #7

; Function Attrs: nounwind
declare double @pow(double, double) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define i32 @tcd_encode_tile(%struct.opj_tcd* nocapture, i32, i8*, i32, %struct.opj_codestream_info*) #0 {
  %6 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  %7 = load %struct.opj_cp*, %struct.opj_cp** %6, align 8, !tbaa !661
  %8 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 28
  %9 = load %struct.opj_tcp*, %struct.opj_tcp** %8, align 8, !tbaa !139
  %10 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 0, i32 15
  %11 = load %struct.opj_tccp*, %struct.opj_tccp** %10, align 8, !tbaa !162
  %12 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  %13 = load %struct.opj_image*, %struct.opj_image** %12, align 8, !tbaa !651
  %14 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  store i32 %1, i32* %14, align 8, !tbaa !669
  %15 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %16 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %15, align 8, !tbaa !359
  %17 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %16, i64 0, i32 2
  %18 = bitcast %struct.opj_tcd_tile** %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !360
  %20 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 9
  %21 = bitcast %struct.opj_tcd_tile** %20 to i64*
  store i64 %19, i64* %21, align 8, !tbaa !664
  %22 = sext i32 %1 to i64
  %23 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %22
  %24 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 10
  store %struct.opj_tcp* %23, %struct.opj_tcp** %24, align 8, !tbaa !665
  %25 = inttoptr i64 %19 to %struct.opj_tcd_tile*
  %26 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 2
  %27 = load i32, i32* %26, align 8, !tbaa !353
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %316

29:                                               ; preds = %5
  %30 = tail call double @opj_clock() #9
  %31 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 12
  store double %30, double* %31, align 8, !tbaa !672
  %32 = icmp ne %struct.opj_codestream_info* %4, null
  br i1 %32, label %33, label %81

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %25, i64 0, i32 5
  %35 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %34, align 8, !tbaa !543
  %36 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %35, i64 0, i32 4
  %37 = load i32, i32* %36, align 8, !tbaa !35
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %67

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %35, i64 0, i32 5
  %41 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %40, align 8, !tbaa !37
  %42 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 21
  %43 = load %struct.opj_tile_info*, %struct.opj_tile_info** %42, align 8, !tbaa !143
  br label %44

44:                                               ; preds = %44, %39
  %45 = phi i64 [ 0, %39 ], [ %63, %44 ]
  %46 = phi i32 [ 0, %39 ], [ %56, %44 ]
  %47 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %41, i64 %45, i32 4
  %48 = load i32, i32* %47, align 8, !tbaa !545
  %49 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %43, i64 %22, i32 5, i64 %45
  store i32 %48, i32* %49, align 4, !tbaa !43
  %50 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %41, i64 %45, i32 5
  %51 = load i32, i32* %50, align 4, !tbaa !546
  %52 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %43, i64 %22, i32 6, i64 %45
  store i32 %51, i32* %52, align 4, !tbaa !43
  %53 = load i32, i32* %47, align 8, !tbaa !545
  %54 = load i32, i32* %50, align 4, !tbaa !546
  %55 = mul nsw i32 %54, %53
  %56 = add nsw i32 %55, %46
  %57 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %11, i64 0, i32 10, i64 %45
  %58 = load i32, i32* %57, align 4, !tbaa !43
  %59 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %43, i64 %22, i32 7, i64 %45
  store i32 %58, i32* %59, align 4, !tbaa !43
  %60 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %11, i64 0, i32 11, i64 %45
  %61 = load i32, i32* %60, align 4, !tbaa !43
  %62 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %43, i64 %22, i32 8, i64 %45
  store i32 %61, i32* %62, align 4, !tbaa !43
  %63 = add nuw nsw i64 %45, 1
  %64 = load i32, i32* %36, align 8, !tbaa !35
  %65 = sext i32 %64 to i64
  %66 = icmp slt i64 %63, %65
  br i1 %66, label %44, label %67

67:                                               ; preds = %44, %33
  %68 = phi i32 [ 0, %33 ], [ %56, %44 ]
  %69 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 12
  %70 = load i32, i32* %69, align 4, !tbaa !215
  %71 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 13
  %72 = load i32, i32* %71, align 8, !tbaa !223
  %73 = mul i32 %70, %68
  %74 = mul i32 %73, %72
  %75 = sext i32 %74 to i64
  %76 = tail call noalias i8* @calloc(i64 %75, i64 24) #9
  %77 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 21
  %78 = load %struct.opj_tile_info*, %struct.opj_tile_info** %77, align 8, !tbaa !143
  %79 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %78, i64 %22, i32 9
  %80 = bitcast %struct.opj_packet_info** %79 to i8**
  store i8* %76, i8** %80, align 8, !tbaa !355
  br label %81

81:                                               ; preds = %67, %29
  %82 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %25, i64 0, i32 4
  %83 = load i32, i32* %82, align 8, !tbaa !542
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %237

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %13, i64 0, i32 6
  %87 = load %struct.opj_image_comp*, %struct.opj_image_comp** %86, align 8, !tbaa !128
  %88 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %13, i64 0, i32 0
  %89 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %13, i64 0, i32 1
  %90 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %25, i64 0, i32 5
  %91 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %90, align 8, !tbaa !543
  %92 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %13, i64 0, i32 2
  %93 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %22, i32 15
  %94 = load %struct.opj_tccp*, %struct.opj_tccp** %93, align 8, !tbaa !162
  br label %95

95:                                               ; preds = %232, %85
  %96 = phi i64 [ 0, %85 ], [ %233, %232 ]
  %97 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %87, i64 %96, i32 8
  %98 = load i32, i32* %97, align 8, !tbaa !131
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %105

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %87, i64 %96, i32 6
  %102 = load i32, i32* %101, align 8, !tbaa !207
  %103 = add nsw i32 %102, -1
  %104 = shl i32 1, %103
  br label %105

105:                                              ; preds = %100, %95
  %106 = phi i32 [ %104, %100 ], [ 0, %95 ]
  %107 = load i32, i32* %88, align 8, !tbaa !201
  %108 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %87, i64 %96, i32 0
  %109 = load i32, i32* %108, align 8, !tbaa !208
  %110 = add i32 %107, -1
  %111 = add i32 %110, %109
  %112 = sdiv i32 %111, %109
  %113 = load i32, i32* %89, align 4, !tbaa !202
  %114 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %87, i64 %96, i32 1
  %115 = load i32, i32* %114, align 4, !tbaa !209
  %116 = add i32 %113, -1
  %117 = add i32 %116, %115
  %118 = sdiv i32 %117, %115
  %119 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %91, i64 %96, i32 2
  %120 = load i32, i32* %119, align 8, !tbaa !32
  %121 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %91, i64 %96, i32 0
  %122 = load i32, i32* %121, align 8, !tbaa !34
  %123 = sub nsw i32 %120, %122
  %124 = load i32, i32* %92, align 8, !tbaa !199
  %125 = xor i32 %107, -1
  %126 = add i32 %109, %125
  %127 = add i32 %126, %124
  %128 = sdiv i32 %127, %109
  %129 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %94, i64 %96, i32 5
  %130 = load i32, i32* %129, align 4, !tbaa !97
  switch i32 %130, label %232 [
    i32 1, label %131
    i32 0, label %181
  ]

131:                                              ; preds = %105
  %132 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %91, i64 %96, i32 1
  %133 = load i32, i32* %132, align 4, !tbaa !108
  %134 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %91, i64 %96, i32 3
  %135 = load i32, i32* %134, align 4, !tbaa !107
  %136 = icmp slt i32 %133, %135
  br i1 %136, label %137, label %232

137:                                              ; preds = %131
  %138 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %87, i64 %96, i32 11
  %139 = load i32*, i32** %138, align 8, !tbaa !133
  %140 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %91, i64 %96, i32 6
  %141 = load i32*, i32** %140, align 8, !tbaa !36
  br label %142

142:                                              ; preds = %178, %137
  %143 = phi i32 [ %135, %137 ], [ %174, %178 ]
  %144 = phi i32 [ %120, %137 ], [ %175, %178 ]
  %145 = phi i32 [ %133, %137 ], [ %180, %178 ]
  %146 = phi i32 [ %122, %137 ], [ %179, %178 ]
  %147 = phi i32 [ %133, %137 ], [ %176, %178 ]
  %148 = icmp slt i32 %146, %144
  br i1 %148, label %149, label %173

149:                                              ; preds = %142
  %150 = sub nsw i32 %147, %145
  %151 = mul nsw i32 %150, %123
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i32, i32* %141, i64 %152
  %154 = sub nsw i32 %147, %118
  %155 = mul nsw i32 %154, %128
  %156 = sub i32 %155, %112
  %157 = add i32 %156, %146
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds i32, i32* %139, i64 %158
  br label %160

160:                                              ; preds = %160, %149
  %161 = phi i32* [ %167, %160 ], [ %153, %149 ]
  %162 = phi i32* [ %164, %160 ], [ %159, %149 ]
  %163 = phi i32 [ %168, %160 ], [ %146, %149 ]
  %164 = getelementptr inbounds i32, i32* %162, i64 1
  %165 = load i32, i32* %162, align 4, !tbaa !43
  %166 = sub nsw i32 %165, %106
  %167 = getelementptr inbounds i32, i32* %161, i64 1
  store i32 %166, i32* %161, align 4, !tbaa !43
  %168 = add nsw i32 %163, 1
  %169 = load i32, i32* %119, align 8, !tbaa !32
  %170 = icmp slt i32 %168, %169
  br i1 %170, label %160, label %171

171:                                              ; preds = %160
  %172 = load i32, i32* %134, align 4, !tbaa !107
  br label %173

173:                                              ; preds = %171, %142
  %174 = phi i32 [ %172, %171 ], [ %143, %142 ]
  %175 = phi i32 [ %169, %171 ], [ %144, %142 ]
  %176 = add nsw i32 %147, 1
  %177 = icmp slt i32 %176, %174
  br i1 %177, label %178, label %232

178:                                              ; preds = %173
  %179 = load i32, i32* %121, align 8, !tbaa !34
  %180 = load i32, i32* %132, align 4, !tbaa !108
  br label %142

181:                                              ; preds = %105
  %182 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %91, i64 %96, i32 1
  %183 = load i32, i32* %182, align 4, !tbaa !108
  %184 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %91, i64 %96, i32 3
  %185 = load i32, i32* %184, align 4, !tbaa !107
  %186 = icmp slt i32 %183, %185
  br i1 %186, label %187, label %232

187:                                              ; preds = %181
  %188 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %87, i64 %96, i32 11
  %189 = load i32*, i32** %188, align 8, !tbaa !133
  %190 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %91, i64 %96, i32 6
  %191 = load i32*, i32** %190, align 8, !tbaa !36
  br label %192

192:                                              ; preds = %229, %187
  %193 = phi i32 [ %185, %187 ], [ %225, %229 ]
  %194 = phi i32 [ %120, %187 ], [ %226, %229 ]
  %195 = phi i32 [ %183, %187 ], [ %231, %229 ]
  %196 = phi i32 [ %122, %187 ], [ %230, %229 ]
  %197 = phi i32 [ %183, %187 ], [ %227, %229 ]
  %198 = icmp slt i32 %196, %194
  br i1 %198, label %199, label %224

199:                                              ; preds = %192
  %200 = sub nsw i32 %197, %195
  %201 = mul nsw i32 %200, %123
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i32, i32* %191, i64 %202
  %204 = sub nsw i32 %197, %118
  %205 = mul nsw i32 %204, %128
  %206 = sub i32 %205, %112
  %207 = add i32 %206, %196
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i32, i32* %189, i64 %208
  br label %210

210:                                              ; preds = %210, %199
  %211 = phi i32* [ %218, %210 ], [ %203, %199 ]
  %212 = phi i32* [ %214, %210 ], [ %209, %199 ]
  %213 = phi i32 [ %219, %210 ], [ %196, %199 ]
  %214 = getelementptr inbounds i32, i32* %212, i64 1
  %215 = load i32, i32* %212, align 4, !tbaa !43
  %216 = sub nsw i32 %215, %106
  %217 = shl i32 %216, 11
  %218 = getelementptr inbounds i32, i32* %211, i64 1
  store i32 %217, i32* %211, align 4, !tbaa !43
  %219 = add nsw i32 %213, 1
  %220 = load i32, i32* %119, align 8, !tbaa !32
  %221 = icmp slt i32 %219, %220
  br i1 %221, label %210, label %222

222:                                              ; preds = %210
  %223 = load i32, i32* %184, align 4, !tbaa !107
  br label %224

224:                                              ; preds = %222, %192
  %225 = phi i32 [ %223, %222 ], [ %193, %192 ]
  %226 = phi i32 [ %220, %222 ], [ %194, %192 ]
  %227 = add nsw i32 %197, 1
  %228 = icmp slt i32 %227, %225
  br i1 %228, label %229, label %232

229:                                              ; preds = %224
  %230 = load i32, i32* %121, align 8, !tbaa !34
  %231 = load i32, i32* %182, align 4, !tbaa !108
  br label %192

232:                                              ; preds = %224, %181, %173, %131, %105
  %233 = add nuw nsw i64 %96, 1
  %234 = load i32, i32* %82, align 8, !tbaa !542
  %235 = sext i32 %234 to i64
  %236 = icmp slt i64 %233, %235
  br i1 %236, label %95, label %237

237:                                              ; preds = %232, %81
  %238 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %22, i32 4
  %239 = load i32, i32* %238, align 8, !tbaa !220
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %268, label %241

241:                                              ; preds = %237
  %242 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %25, i64 0, i32 5
  %243 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %242, align 8, !tbaa !543
  %244 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %243, i64 0, i32 2
  %245 = load i32, i32* %244, align 8, !tbaa !32
  %246 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %243, i64 0, i32 0
  %247 = load i32, i32* %246, align 8, !tbaa !34
  %248 = sub nsw i32 %245, %247
  %249 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %243, i64 0, i32 3
  %250 = load i32, i32* %249, align 4, !tbaa !107
  %251 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %243, i64 0, i32 1
  %252 = load i32, i32* %251, align 4, !tbaa !108
  %253 = sub nsw i32 %250, %252
  %254 = mul nsw i32 %253, %248
  %255 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %22, i32 15
  %256 = load %struct.opj_tccp*, %struct.opj_tccp** %255, align 8, !tbaa !162
  %257 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %256, i64 0, i32 5
  %258 = load i32, i32* %257, align 4, !tbaa !97
  %259 = icmp eq i32 %258, 0
  %260 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %243, i64 0, i32 6
  %261 = load i32*, i32** %260, align 8, !tbaa !36
  %262 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %243, i64 1, i32 6
  %263 = load i32*, i32** %262, align 8, !tbaa !36
  %264 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %243, i64 2, i32 6
  %265 = load i32*, i32** %264, align 8, !tbaa !36
  br i1 %259, label %266, label %267

266:                                              ; preds = %241
  tail call void @mct_encode_real(i32* %261, i32* %263, i32* %265, i32 %254) #9
  br label %268

267:                                              ; preds = %241
  tail call void @mct_encode(i32* %261, i32* %263, i32* %265, i32 %254) #9
  br label %268

268:                                              ; preds = %267, %266, %237
  %269 = load i32, i32* %82, align 8, !tbaa !542
  %270 = icmp sgt i32 %269, 0
  br i1 %270, label %271, label %288

271:                                              ; preds = %268
  %272 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %25, i64 0, i32 5
  %273 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %22, i32 15
  br label %274

274:                                              ; preds = %283, %271
  %275 = phi i64 [ 0, %271 ], [ %284, %283 ]
  %276 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %272, align 8, !tbaa !543
  %277 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %276, i64 %275
  %278 = load %struct.opj_tccp*, %struct.opj_tccp** %273, align 8, !tbaa !162
  %279 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %278, i64 %275, i32 5
  %280 = load i32, i32* %279, align 4, !tbaa !97
  switch i32 %280, label %283 [
    i32 1, label %281
    i32 0, label %282
  ]

281:                                              ; preds = %274
  tail call void @dwt_encode(%struct.opj_tcd_tilecomp* %277) #9
  br label %283

282:                                              ; preds = %274
  tail call void @dwt_encode_real(%struct.opj_tcd_tilecomp* %277) #9
  br label %283

283:                                              ; preds = %282, %281, %274
  %284 = add nuw nsw i64 %275, 1
  %285 = load i32, i32* %82, align 8, !tbaa !542
  %286 = sext i32 %285 to i64
  %287 = icmp slt i64 %284, %286
  br i1 %287, label %274, label %288

288:                                              ; preds = %283, %268
  %289 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %290 = load %struct.opj_common_struct*, %struct.opj_common_struct** %289, align 8, !tbaa !660
  %291 = tail call %struct.opj_t1* @t1_create(%struct.opj_common_struct* %290) #9
  tail call void @t1_encode_cblks(%struct.opj_t1* %291, %struct.opj_tcd_tile* nonnull %25, %struct.opj_tcp* nonnull %23) #9
  tail call void @t1_destroy(%struct.opj_t1* %291) #9
  br i1 %32, label %292, label %294

292:                                              ; preds = %288
  %293 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 2
  store i32 0, i32* %293, align 4, !tbaa !625
  br label %294

294:                                              ; preds = %292, %288
  %295 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 7
  %296 = load i32, i32* %295, align 8, !tbaa !256
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %302

298:                                              ; preds = %294
  %299 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %7, i64 0, i32 9
  %300 = load i32, i32* %299, align 8, !tbaa !260
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %304, label %302

302:                                              ; preds = %298, %294
  %303 = tail call i32 @tcd_rateallocate(%struct.opj_tcd* nonnull %0, i8* %2, i32 %3, %struct.opj_codestream_info* %4)
  br label %316

304:                                              ; preds = %298
  %305 = load %struct.opj_tcp*, %struct.opj_tcp** %24, align 8, !tbaa !665
  %306 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %305, i64 0, i32 3
  %307 = load i32, i32* %306, align 4, !tbaa !219
  %308 = icmp sgt i32 %307, 0
  br i1 %308, label %309, label %316

309:                                              ; preds = %309, %304
  %310 = phi i32 [ %311, %309 ], [ 0, %304 ]
  tail call void @tcd_makelayer_fixed(%struct.opj_tcd* nonnull %0, i32 %310, i32 1) #9
  %311 = add nuw nsw i32 %310, 1
  %312 = load %struct.opj_tcp*, %struct.opj_tcp** %24, align 8, !tbaa !665
  %313 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %312, i64 0, i32 3
  %314 = load i32, i32* %313, align 4, !tbaa !219
  %315 = icmp slt i32 %311, %314
  br i1 %315, label %309, label %316

316:                                              ; preds = %309, %304, %302, %5
  %317 = icmp eq %struct.opj_codestream_info* %4, null
  br i1 %317, label %320, label %318

318:                                              ; preds = %316
  %319 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 2
  store i32 1, i32* %319, align 4, !tbaa !625
  br label %320

320:                                              ; preds = %318, %316
  %321 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %322 = load %struct.opj_common_struct*, %struct.opj_common_struct** %321, align 8, !tbaa !660
  %323 = tail call %struct.opj_t2* @t2_create(%struct.opj_common_struct* %322, %struct.opj_image* %13, %struct.opj_cp* %7) #9
  %324 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %22, i32 3
  %325 = load i32, i32* %324, align 4, !tbaa !219
  %326 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 1
  %327 = load i32, i32* %326, align 4, !tbaa !352
  %328 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 0
  %329 = load i32, i32* %328, align 8, !tbaa !347
  %330 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 4
  %331 = load i32, i32* %330, align 8, !tbaa !346
  %332 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 3
  %333 = load i32, i32* %332, align 4, !tbaa !341
  %334 = tail call i32 @t2_encode_packets(%struct.opj_t2* %323, i32 %1, %struct.opj_tcd_tile* %25, i32 %325, i8* %2, i32 %3, %struct.opj_codestream_info* %4, i32 %327, i32 %329, i32 %331, i32 1, i32 %333) #9
  tail call void @t2_destroy(%struct.opj_t2* %323) #9
  %335 = load i32, i32* %26, align 8, !tbaa !353
  %336 = load i32, i32* %332, align 4, !tbaa !341
  %337 = add nsw i32 %336, -1
  %338 = icmp eq i32 %335, %337
  br i1 %338, label %339, label %361

339:                                              ; preds = %320
  %340 = tail call double @opj_clock() #9
  %341 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 12
  %342 = load double, double* %341, align 8, !tbaa !672
  %343 = fsub double %340, %342
  store double %343, double* %341, align 8, !tbaa !672
  %344 = load %struct.opj_common_struct*, %struct.opj_common_struct** %321, align 8, !tbaa !660
  %345 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %344, i32 4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18, i64 0, i64 0), double %343) #9
  %346 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %25, i64 0, i32 4
  %347 = load i32, i32* %346, align 8, !tbaa !542
  %348 = icmp sgt i32 %347, 0
  br i1 %348, label %349, label %361

349:                                              ; preds = %339
  %350 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %25, i64 0, i32 5
  br label %351

351:                                              ; preds = %351, %349
  %352 = phi i64 [ 0, %349 ], [ %357, %351 ]
  %353 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %350, align 8, !tbaa !543
  %354 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %353, i64 %352, i32 6
  %355 = bitcast i32** %354 to i8**
  %356 = load i8*, i8** %355, align 8, !tbaa !36
  tail call void @free(i8* %356) #9
  %357 = add nuw nsw i64 %352, 1
  %358 = load i32, i32* %346, align 8, !tbaa !542
  %359 = sext i32 %358 to i64
  %360 = icmp slt i64 %357, %359
  br i1 %360, label %351, label %361

361:                                              ; preds = %351, %339, %320
  ret i32 %334
}

; Function Attrs: nounwind uwtable
define i32 @tcd_decode_tile(%struct.opj_tcd* nocapture, i8*, i32, i32, %struct.opj_codestream_info*) #0 {
  %6 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  store i32 %3, i32* %6, align 8, !tbaa !669
  %7 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %8 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %7, align 8, !tbaa !359
  %9 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %8, i64 0, i32 2
  %10 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %9, align 8, !tbaa !360
  %11 = sext i32 %3 to i64
  %12 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 %11
  %13 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 9
  store %struct.opj_tcd_tile* %12, %struct.opj_tcd_tile** %13, align 8, !tbaa !664
  %14 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 8
  %15 = load %struct.opj_cp*, %struct.opj_cp** %14, align 8, !tbaa !661
  %16 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %15, i64 0, i32 28
  %17 = load %struct.opj_tcp*, %struct.opj_tcp** %16, align 8, !tbaa !139
  %18 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %17, i64 %11
  %19 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 10
  store %struct.opj_tcp* %18, %struct.opj_tcp** %19, align 8, !tbaa !665
  %20 = tail call double @opj_clock() #9
  %21 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %22 = load %struct.opj_common_struct*, %struct.opj_common_struct** %21, align 8, !tbaa !660
  %23 = add nsw i32 %3, 1
  %24 = load %struct.opj_cp*, %struct.opj_cp** %14, align 8, !tbaa !661
  %25 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %24, i64 0, i32 18
  %26 = load i32, i32* %25, align 8, !tbaa !136
  %27 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %24, i64 0, i32 19
  %28 = load i32, i32* %27, align 4, !tbaa !137
  %29 = mul nsw i32 %28, %26
  %30 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %22, i32 4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0), i32 %23, i32 %29) #9
  %31 = icmp eq %struct.opj_codestream_info* %4, null
  br i1 %31, label %109, label %32

32:                                               ; preds = %5
  %33 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 12
  %34 = load i32, i32* %33, align 4, !tbaa !215
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %96

36:                                               ; preds = %32
  %37 = load %struct.opj_cp*, %struct.opj_cp** %14, align 8, !tbaa !661
  %38 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %37, i64 0, i32 28
  %39 = load %struct.opj_tcp*, %struct.opj_tcp** %38, align 8, !tbaa !139
  %40 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %39, i64 0, i32 15
  %41 = load %struct.opj_tccp*, %struct.opj_tccp** %40, align 8, !tbaa !162
  %42 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 %11, i32 5
  %43 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %42, align 8, !tbaa !543
  %44 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 21
  br label %45

45:                                               ; preds = %90, %36
  %46 = phi i32 [ %34, %36 ], [ %91, %90 ]
  %47 = phi i64 [ 0, %36 ], [ %93, %90 ]
  %48 = phi i32 [ 0, %36 ], [ %92, %90 ]
  %49 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %43, i64 %47, i32 4
  %50 = load i32, i32* %49, align 8, !tbaa !35
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %52, label %90

52:                                               ; preds = %45
  %53 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %43, i64 %47, i32 5
  %54 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %53, align 8, !tbaa !37
  %55 = load %struct.opj_tile_info*, %struct.opj_tile_info** %44, align 8, !tbaa !143
  %56 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %41, i64 %47, i32 0
  br label %57

57:                                               ; preds = %81, %52
  %58 = phi i64 [ 0, %52 ], [ %84, %81 ]
  %59 = phi i32 [ %48, %52 ], [ %69, %81 ]
  %60 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %54, i64 %58, i32 4
  %61 = load i32, i32* %60, align 8, !tbaa !545
  %62 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %55, i64 %11, i32 5, i64 %58
  store i32 %61, i32* %62, align 4, !tbaa !43
  %63 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %54, i64 %58, i32 5
  %64 = load i32, i32* %63, align 4, !tbaa !546
  %65 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %55, i64 %11, i32 6, i64 %58
  store i32 %64, i32* %65, align 4, !tbaa !43
  %66 = load i32, i32* %60, align 8, !tbaa !545
  %67 = load i32, i32* %63, align 4, !tbaa !546
  %68 = mul nsw i32 %67, %66
  %69 = add nsw i32 %68, %59
  %70 = load i32, i32* %56, align 4, !tbaa !221
  %71 = and i32 %70, 1
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %79, label %73

73:                                               ; preds = %57
  %74 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %41, i64 %47, i32 10, i64 %58
  %75 = load i32, i32* %74, align 4, !tbaa !43
  %76 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %55, i64 %11, i32 7, i64 %58
  store i32 %75, i32* %76, align 4, !tbaa !43
  %77 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %41, i64 %47, i32 11, i64 %58
  %78 = load i32, i32* %77, align 4, !tbaa !43
  br label %81

79:                                               ; preds = %57
  %80 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %55, i64 %11, i32 7, i64 %58
  store i32 15, i32* %80, align 4, !tbaa !43
  br label %81

81:                                               ; preds = %79, %73
  %82 = phi i32 [ 15, %79 ], [ %78, %73 ]
  %83 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %55, i64 %11, i32 8, i64 %58
  store i32 %82, i32* %83, align 4
  %84 = add nuw nsw i64 %58, 1
  %85 = load i32, i32* %49, align 8, !tbaa !35
  %86 = sext i32 %85 to i64
  %87 = icmp slt i64 %84, %86
  br i1 %87, label %57, label %88

88:                                               ; preds = %81
  %89 = load i32, i32* %33, align 4, !tbaa !215
  br label %90

90:                                               ; preds = %88, %45
  %91 = phi i32 [ %46, %45 ], [ %89, %88 ]
  %92 = phi i32 [ %48, %45 ], [ %69, %88 ]
  %93 = add nuw nsw i64 %47, 1
  %94 = sext i32 %91 to i64
  %95 = icmp slt i64 %93, %94
  br i1 %95, label %45, label %96

96:                                               ; preds = %90, %32
  %97 = phi i32 [ 0, %32 ], [ %92, %90 ]
  %98 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 13
  %99 = load i32, i32* %98, align 8, !tbaa !223
  %100 = mul nsw i32 %99, %97
  %101 = sext i32 %100 to i64
  %102 = mul nsw i64 %101, 24
  %103 = tail call noalias i8* @malloc(i64 %102) #9
  %104 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 21
  %105 = load %struct.opj_tile_info*, %struct.opj_tile_info** %104, align 8, !tbaa !143
  %106 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %105, i64 %11, i32 9
  %107 = bitcast %struct.opj_packet_info** %106 to i8**
  store i8* %103, i8** %107, align 8, !tbaa !355
  %108 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %4, i64 0, i32 1
  store i32 0, i32* %108, align 8, !tbaa !198
  br label %109

109:                                              ; preds = %96, %5
  %110 = load %struct.opj_common_struct*, %struct.opj_common_struct** %21, align 8, !tbaa !660
  %111 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 7
  %112 = load %struct.opj_image*, %struct.opj_image** %111, align 8, !tbaa !651
  %113 = load %struct.opj_cp*, %struct.opj_cp** %14, align 8, !tbaa !661
  %114 = tail call %struct.opj_t2* @t2_create(%struct.opj_common_struct* %110, %struct.opj_image* %112, %struct.opj_cp* %113) #9
  %115 = tail call i32 @t2_decode_packets(%struct.opj_t2* %114, i8* %1, i32 %2, i32 %3, %struct.opj_tcd_tile* %12, %struct.opj_codestream_info* %4) #9
  tail call void @t2_destroy(%struct.opj_t2* %114) #9
  %116 = icmp eq i32 %115, -999
  br i1 %116, label %117, label %120

117:                                              ; preds = %109
  %118 = load %struct.opj_common_struct*, %struct.opj_common_struct** %21, align 8, !tbaa !660
  %119 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %118, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.20, i64 0, i64 0)) #9
  br label %120

120:                                              ; preds = %117, %109
  %121 = phi i32 [ 0, %117 ], [ 1, %109 ]
  %122 = tail call double @opj_clock() #9
  %123 = load %struct.opj_common_struct*, %struct.opj_common_struct** %21, align 8, !tbaa !660
  %124 = tail call %struct.opj_t1* @t1_create(%struct.opj_common_struct* %123) #9
  %125 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 %11, i32 4
  %126 = load i32, i32* %125, align 8, !tbaa !542
  %127 = icmp sgt i32 %126, 0
  br i1 %127, label %128, label %159

128:                                              ; preds = %120
  %129 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 %11, i32 5
  br label %130

130:                                              ; preds = %130, %128
  %131 = phi i64 [ 0, %128 ], [ %155, %130 ]
  %132 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %129, align 8, !tbaa !543
  %133 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %132, i64 %131
  %134 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %132, i64 %131, i32 2
  %135 = load i32, i32* %134, align 8, !tbaa !32
  %136 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %133, i64 0, i32 0
  %137 = load i32, i32* %136, align 8, !tbaa !34
  %138 = sub nsw i32 %135, %137
  %139 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %132, i64 %131, i32 3
  %140 = load i32, i32* %139, align 4, !tbaa !107
  %141 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %132, i64 %131, i32 1
  %142 = load i32, i32* %141, align 4, !tbaa !108
  %143 = sub nsw i32 %140, %142
  %144 = mul nsw i32 %143, %138
  %145 = add nsw i32 %144, 3
  %146 = sext i32 %145 to i64
  %147 = shl nsw i64 %146, 2
  %148 = tail call noalias i8* @malloc(i64 %147) #9
  %149 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %132, i64 %131, i32 6
  %150 = bitcast i32** %149 to i8**
  store i8* %148, i8** %150, align 8, !tbaa !36
  %151 = load %struct.opj_tcp*, %struct.opj_tcp** %19, align 8, !tbaa !665
  %152 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %151, i64 0, i32 15
  %153 = load %struct.opj_tccp*, %struct.opj_tccp** %152, align 8, !tbaa !162
  %154 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %153, i64 %131
  tail call void @t1_decode_cblks(%struct.opj_t1* %124, %struct.opj_tcd_tilecomp* %133, %struct.opj_tccp* %154) #9
  %155 = add nuw nsw i64 %131, 1
  %156 = load i32, i32* %125, align 8, !tbaa !542
  %157 = sext i32 %156 to i64
  %158 = icmp slt i64 %155, %157
  br i1 %158, label %130, label %159

159:                                              ; preds = %130, %120
  tail call void @t1_destroy(%struct.opj_t1* %124) #9
  %160 = tail call double @opj_clock() #9
  %161 = fsub double %160, %122
  %162 = load %struct.opj_common_struct*, %struct.opj_common_struct** %21, align 8, !tbaa !660
  %163 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %162, i32 4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0), double %161) #9
  %164 = tail call double @opj_clock() #9
  %165 = load i32, i32* %125, align 8, !tbaa !542
  %166 = icmp sgt i32 %165, 0
  br i1 %166, label %167, label %213

167:                                              ; preds = %159
  %168 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 %11, i32 5
  br label %169

169:                                              ; preds = %208, %167
  %170 = phi i64 [ 0, %167 ], [ %209, %208 ]
  %171 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %168, align 8, !tbaa !543
  %172 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %171, i64 %170
  %173 = load %struct.opj_cp*, %struct.opj_cp** %14, align 8, !tbaa !661
  %174 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %173, i64 0, i32 10
  %175 = load i32, i32* %174, align 4, !tbaa !168
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %190, label %177

177:                                              ; preds = %169
  %178 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %171, i64 %170, i32 4
  %179 = load i32, i32* %178, align 8, !tbaa !35
  %180 = xor i32 %175, -1
  %181 = add i32 %179, %180
  %182 = load %struct.opj_image*, %struct.opj_image** %111, align 8, !tbaa !651
  %183 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %182, i64 0, i32 6
  %184 = load %struct.opj_image_comp*, %struct.opj_image_comp** %183, align 8, !tbaa !128
  %185 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %184, i64 %170, i32 9
  store i32 %181, i32* %185, align 4, !tbaa !210
  %186 = icmp slt i32 %181, 0
  br i1 %186, label %187, label %197

187:                                              ; preds = %177
  %188 = load %struct.opj_common_struct*, %struct.opj_common_struct** %21, align 8, !tbaa !660
  %189 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %188, i32 1, i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.22, i64 0, i64 0), i32 %175, i32 %179) #9
  br label %457

190:                                              ; preds = %169
  %191 = load %struct.opj_image*, %struct.opj_image** %111, align 8, !tbaa !651
  %192 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %191, i64 0, i32 6
  %193 = load %struct.opj_image_comp*, %struct.opj_image_comp** %192, align 8, !tbaa !128
  %194 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %193, i64 %170, i32 9
  %195 = load i32, i32* %194, align 4, !tbaa !210
  %196 = icmp sgt i32 %195, -1
  br i1 %196, label %197, label %208

197:                                              ; preds = %190, %177
  %198 = phi i32 [ %195, %190 ], [ %181, %177 ]
  %199 = add nsw i32 %198, 1
  %200 = load %struct.opj_tcp*, %struct.opj_tcp** %19, align 8, !tbaa !665
  %201 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %200, i64 0, i32 15
  %202 = load %struct.opj_tccp*, %struct.opj_tccp** %201, align 8, !tbaa !162
  %203 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %202, i64 %170, i32 5
  %204 = load i32, i32* %203, align 4, !tbaa !97
  %205 = icmp eq i32 %204, 1
  br i1 %205, label %206, label %207

206:                                              ; preds = %197
  tail call void @dwt_decode(%struct.opj_tcd_tilecomp* %172, i32 %199) #9
  br label %208

207:                                              ; preds = %197
  tail call void @dwt_decode_real(%struct.opj_tcd_tilecomp* %172, i32 %199) #9
  br label %208

208:                                              ; preds = %207, %206, %190
  %209 = add nuw nsw i64 %170, 1
  %210 = load i32, i32* %125, align 8, !tbaa !542
  %211 = sext i32 %210 to i64
  %212 = icmp slt i64 %209, %211
  br i1 %212, label %169, label %213

213:                                              ; preds = %208, %159
  %214 = tail call double @opj_clock() #9
  %215 = fsub double %214, %164
  %216 = load %struct.opj_common_struct*, %struct.opj_common_struct** %21, align 8, !tbaa !660
  %217 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %216, i32 4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23, i64 0, i64 0), double %215) #9
  %218 = load %struct.opj_tcp*, %struct.opj_tcp** %19, align 8, !tbaa !665
  %219 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %218, i64 0, i32 4
  %220 = load i32, i32* %219, align 8, !tbaa !220
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %262, label %222

222:                                              ; preds = %213
  %223 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 %11, i32 5
  %224 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %223, align 8, !tbaa !543
  %225 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %224, i64 0, i32 2
  %226 = load i32, i32* %225, align 8, !tbaa !32
  %227 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %224, i64 0, i32 0
  %228 = load i32, i32* %227, align 8, !tbaa !34
  %229 = sub nsw i32 %226, %228
  %230 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %224, i64 0, i32 3
  %231 = load i32, i32* %230, align 4, !tbaa !107
  %232 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %224, i64 0, i32 1
  %233 = load i32, i32* %232, align 4, !tbaa !108
  %234 = sub nsw i32 %231, %233
  %235 = mul nsw i32 %234, %229
  %236 = load i32, i32* %125, align 8, !tbaa !542
  %237 = icmp sgt i32 %236, 2
  br i1 %237, label %238, label %259

238:                                              ; preds = %222
  %239 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %218, i64 0, i32 15
  %240 = load %struct.opj_tccp*, %struct.opj_tccp** %239, align 8, !tbaa !162
  %241 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %240, i64 0, i32 5
  %242 = load i32, i32* %241, align 4, !tbaa !97
  %243 = icmp eq i32 %242, 1
  %244 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %224, i64 0, i32 6
  %245 = load i32*, i32** %244, align 8, !tbaa !36
  br i1 %243, label %246, label %251

246:                                              ; preds = %238
  %247 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %224, i64 1, i32 6
  %248 = load i32*, i32** %247, align 8, !tbaa !36
  %249 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %224, i64 2, i32 6
  %250 = load i32*, i32** %249, align 8, !tbaa !36
  tail call void @mct_decode(i32* %245, i32* %248, i32* %250, i32 %235) #9
  br label %262

251:                                              ; preds = %238
  %252 = bitcast i32* %245 to float*
  %253 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %224, i64 1, i32 6
  %254 = bitcast i32** %253 to float**
  %255 = load float*, float** %254, align 8, !tbaa !36
  %256 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %224, i64 2, i32 6
  %257 = bitcast i32** %256 to float**
  %258 = load float*, float** %257, align 8, !tbaa !36
  tail call void @mct_decode_real(float* %252, float* %255, float* %258, i32 %235) #9
  br label %262

259:                                              ; preds = %222
  %260 = load %struct.opj_common_struct*, %struct.opj_common_struct** %21, align 8, !tbaa !660
  %261 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %260, i32 2, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.24, i64 0, i64 0), i32 %236) #9
  br label %262

262:                                              ; preds = %259, %251, %246, %213
  %263 = load i32, i32* %125, align 8, !tbaa !542
  %264 = icmp sgt i32 %263, 0
  br i1 %264, label %265, label %452

265:                                              ; preds = %262
  %266 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %10, i64 %11, i32 5
  br label %267

267:                                              ; preds = %444, %265
  %268 = phi i64 [ 0, %265 ], [ %448, %444 ]
  %269 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %266, align 8, !tbaa !543
  %270 = load %struct.opj_image*, %struct.opj_image** %111, align 8, !tbaa !651
  %271 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %270, i64 0, i32 6
  %272 = load %struct.opj_image_comp*, %struct.opj_image_comp** %271, align 8, !tbaa !128
  %273 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %269, i64 %268, i32 5
  %274 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %273, align 8, !tbaa !37
  %275 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %272, i64 %268, i32 9
  %276 = load i32, i32* %275, align 4, !tbaa !210
  %277 = sext i32 %276 to i64
  %278 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %274, i64 %277
  %279 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %272, i64 %268, i32 8
  %280 = load i32, i32* %279, align 8, !tbaa !131
  %281 = icmp eq i32 %280, 0
  %282 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %272, i64 %268, i32 6
  %283 = load i32, i32* %282, align 8, !tbaa !207
  %284 = add nsw i32 %283, -1
  %285 = shl i32 -1, %284
  %286 = shl i32 1, %284
  %287 = select i1 %281, i32 %286, i32 0
  %288 = select i1 %281, i32 0, i32 %285
  %289 = xor i1 %281, true
  %290 = zext i1 %289 to i32
  %291 = sub i32 %283, %290
  %292 = shl nsw i32 -1, %291
  %293 = xor i32 %292, -1
  %294 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %269, i64 %268, i32 2
  %295 = load i32, i32* %294, align 8, !tbaa !32
  %296 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %269, i64 %268, i32 0
  %297 = load i32, i32* %296, align 8, !tbaa !34
  %298 = sub nsw i32 %295, %297
  %299 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %272, i64 %268, i32 2
  %300 = load i32, i32* %299, align 8, !tbaa !268
  %301 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %272, i64 %268, i32 4
  %302 = load i32, i32* %301, align 8, !tbaa !662
  %303 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %272, i64 %268, i32 10
  %304 = load i32, i32* %303, align 8, !tbaa !211
  %305 = shl nsw i32 -1, %304
  %306 = xor i32 %305, -1
  %307 = add i32 %302, %306
  %308 = ashr i32 %307, %304
  %309 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %272, i64 %268, i32 5
  %310 = load i32, i32* %309, align 4, !tbaa !663
  %311 = add i32 %310, %306
  %312 = ashr i32 %311, %304
  %313 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %272, i64 %268, i32 11
  %314 = load i32*, i32** %313, align 8, !tbaa !133
  %315 = icmp eq i32* %314, null
  br i1 %315, label %316, label %325

316:                                              ; preds = %267
  %317 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %272, i64 %268, i32 3
  %318 = load i32, i32* %317, align 4, !tbaa !269
  %319 = mul nsw i32 %318, %300
  %320 = sext i32 %319 to i64
  %321 = shl nsw i64 %320, 2
  %322 = tail call noalias i8* @malloc(i64 %321) #9
  %323 = bitcast i32** %313 to i8**
  store i8* %322, i8** %323, align 8, !tbaa !133
  %324 = bitcast i8* %322 to i32*
  br label %325

325:                                              ; preds = %316, %267
  %326 = phi i32* [ %314, %267 ], [ %324, %316 ]
  %327 = load %struct.opj_tcp*, %struct.opj_tcp** %19, align 8, !tbaa !665
  %328 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %327, i64 0, i32 15
  %329 = load %struct.opj_tccp*, %struct.opj_tccp** %328, align 8, !tbaa !162
  %330 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %329, i64 %268, i32 5
  %331 = load i32, i32* %330, align 4, !tbaa !97
  %332 = icmp eq i32 %331, 1
  %333 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %274, i64 %277, i32 1
  %334 = load i32, i32* %333, align 4, !tbaa !42
  %335 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %274, i64 %277, i32 3
  %336 = load i32, i32* %335, align 4, !tbaa !41
  %337 = icmp slt i32 %334, %336
  br i1 %332, label %345, label %338

338:                                              ; preds = %325
  br i1 %337, label %339, label %444

339:                                              ; preds = %338
  %340 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %278, i64 0, i32 0
  %341 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %274, i64 %277, i32 2
  %342 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %269, i64 %268, i32 6
  %343 = bitcast i32** %342 to float**
  %344 = load i32, i32* %341, align 8, !tbaa !38
  br label %396

345:                                              ; preds = %325
  br i1 %337, label %346, label %444

346:                                              ; preds = %345
  %347 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %278, i64 0, i32 0
  %348 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %274, i64 %277, i32 2
  %349 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %269, i64 %268, i32 6
  %350 = load i32, i32* %348, align 8, !tbaa !38
  br label %351

351:                                              ; preds = %391, %346
  %352 = phi i32 [ %336, %346 ], [ %392, %391 ]
  %353 = phi i32 [ %350, %346 ], [ %393, %391 ]
  %354 = phi i32 [ %334, %346 ], [ %394, %391 ]
  %355 = load i32, i32* %347, align 8, !tbaa !40
  %356 = icmp slt i32 %355, %353
  br i1 %356, label %357, label %391

357:                                              ; preds = %351
  %358 = load i32*, i32** %349, align 8, !tbaa !36
  %359 = sub nsw i32 %354, %312
  %360 = mul nsw i32 %359, %300
  %361 = sub i32 %360, %308
  %362 = sext i32 %355 to i64
  br label %363

363:                                              ; preds = %387, %357
  %364 = phi i32 [ %355, %357 ], [ %388, %387 ]
  %365 = phi i64 [ %362, %357 ], [ %383, %387 ]
  %366 = trunc i64 %365 to i32
  %367 = sub i32 %366, %364
  %368 = load i32, i32* %333, align 4, !tbaa !42
  %369 = sub nsw i32 %354, %368
  %370 = mul nsw i32 %369, %298
  %371 = add nsw i32 %367, %370
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds i32, i32* %358, i64 %372
  %374 = load i32, i32* %373, align 4, !tbaa !43
  %375 = add nsw i32 %374, %287
  %376 = icmp slt i32 %375, %288
  %377 = icmp sgt i32 %375, %293
  %378 = select i1 %377, i32 %293, i32 %375
  %379 = select i1 %376, i32 %288, i32 %378
  %380 = add i32 %361, %366
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds i32, i32* %326, i64 %381
  store i32 %379, i32* %382, align 4, !tbaa !43
  %383 = add nsw i64 %365, 1
  %384 = load i32, i32* %348, align 8, !tbaa !38
  %385 = sext i32 %384 to i64
  %386 = icmp slt i64 %383, %385
  br i1 %386, label %387, label %389

387:                                              ; preds = %363
  %388 = load i32, i32* %347, align 8, !tbaa !40
  br label %363

389:                                              ; preds = %363
  %390 = load i32, i32* %335, align 4, !tbaa !41
  br label %391

391:                                              ; preds = %389, %351
  %392 = phi i32 [ %390, %389 ], [ %352, %351 ]
  %393 = phi i32 [ %384, %389 ], [ %353, %351 ]
  %394 = add nsw i32 %354, 1
  %395 = icmp slt i32 %394, %392
  br i1 %395, label %351, label %444

396:                                              ; preds = %439, %339
  %397 = phi i32 [ %336, %339 ], [ %440, %439 ]
  %398 = phi i32 [ %344, %339 ], [ %441, %439 ]
  %399 = phi i32 [ %334, %339 ], [ %442, %439 ]
  %400 = load i32, i32* %340, align 8, !tbaa !40
  %401 = icmp slt i32 %400, %398
  br i1 %401, label %402, label %439

402:                                              ; preds = %396
  %403 = sub nsw i32 %399, %312
  %404 = mul nsw i32 %403, %300
  %405 = sub i32 %404, %308
  %406 = sext i32 %400 to i64
  br label %407

407:                                              ; preds = %435, %402
  %408 = phi i32 [ %400, %402 ], [ %436, %435 ]
  %409 = phi i64 [ %406, %402 ], [ %431, %435 ]
  %410 = load float*, float** %343, align 8, !tbaa !36
  %411 = trunc i64 %409 to i32
  %412 = sub i32 %411, %408
  %413 = load i32, i32* %333, align 4, !tbaa !42
  %414 = sub nsw i32 %399, %413
  %415 = mul nsw i32 %414, %298
  %416 = add nsw i32 %412, %415
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds float, float* %410, i64 %417
  %419 = load float, float* %418, align 4, !tbaa !112
  %420 = tail call i64 @lrintf(float %419) #9
  %421 = trunc i64 %420 to i32
  %422 = add nsw i32 %287, %421
  %423 = icmp slt i32 %422, %288
  %424 = icmp sgt i32 %422, %293
  %425 = select i1 %424, i32 %293, i32 %422
  %426 = select i1 %423, i32 %288, i32 %425
  %427 = load i32*, i32** %313, align 8, !tbaa !133
  %428 = add i32 %405, %411
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds i32, i32* %427, i64 %429
  store i32 %426, i32* %430, align 4, !tbaa !43
  %431 = add nsw i64 %409, 1
  %432 = load i32, i32* %341, align 8, !tbaa !38
  %433 = sext i32 %432 to i64
  %434 = icmp slt i64 %431, %433
  br i1 %434, label %435, label %437

435:                                              ; preds = %407
  %436 = load i32, i32* %340, align 8, !tbaa !40
  br label %407

437:                                              ; preds = %407
  %438 = load i32, i32* %335, align 4, !tbaa !41
  br label %439

439:                                              ; preds = %437, %396
  %440 = phi i32 [ %438, %437 ], [ %397, %396 ]
  %441 = phi i32 [ %432, %437 ], [ %398, %396 ]
  %442 = add nsw i32 %399, 1
  %443 = icmp slt i32 %442, %440
  br i1 %443, label %396, label %444

444:                                              ; preds = %439, %391, %345, %338
  %445 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %269, i64 %268, i32 6
  %446 = bitcast i32** %445 to i8**
  %447 = load i8*, i8** %446, align 8, !tbaa !36
  tail call void @free(i8* %447) #9
  %448 = add nuw nsw i64 %268, 1
  %449 = load i32, i32* %125, align 8, !tbaa !542
  %450 = sext i32 %449 to i64
  %451 = icmp slt i64 %448, %450
  br i1 %451, label %267, label %452

452:                                              ; preds = %444, %262
  %453 = tail call double @opj_clock() #9
  %454 = fsub double %453, %20
  %455 = load %struct.opj_common_struct*, %struct.opj_common_struct** %21, align 8, !tbaa !660
  %456 = tail call i32 (%struct.opj_common_struct*, i32, i8*, ...) @opj_event_msg(%struct.opj_common_struct* %455, i32 4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.25, i64 0, i64 0), double %454) #9
  br label %457

457:                                              ; preds = %452, %187
  %458 = phi i32 [ 0, %187 ], [ %121, %452 ]
  ret i32 %458
}

; Function Attrs: nounwind
declare i64 @lrintf(float) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define void @tcd_free_decode(%struct.opj_tcd* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %3 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %2, align 8, !tbaa !359
  %4 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %3, i64 0, i32 2
  %5 = bitcast %struct.opj_tcd_tile** %4 to i8**
  %6 = load i8*, i8** %5, align 8, !tbaa !360
  tail call void @free(i8* %6) #9
  ret void
}

; Function Attrs: nounwind uwtable
define void @tcd_free_decode_tile(%struct.opj_tcd* nocapture readonly, i32) #0 {
  %3 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %4 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %3, align 8, !tbaa !359
  %5 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %4, i64 0, i32 2
  %6 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %5, align 8, !tbaa !360
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %6, i64 %7, i32 4
  %9 = load i32, i32* %8, align 8, !tbaa !542
  %10 = icmp sgt i32 %9, 0
  %11 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %6, i64 %7, i32 5
  br i1 %10, label %12, label %76

12:                                               ; preds = %69, %2
  %13 = phi i64 [ %72, %69 ], [ 0, %2 ]
  %14 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %11, align 8, !tbaa !543
  %15 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %14, i64 %13, i32 4
  %16 = load i32, i32* %15, align 8, !tbaa !35
  %17 = icmp sgt i32 %16, 0
  %18 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %14, i64 %13, i32 5
  br i1 %17, label %19, label %69

19:                                               ; preds = %64, %12
  %20 = phi i32 [ %65, %64 ], [ %16, %12 ]
  %21 = phi i64 [ %66, %64 ], [ 0, %12 ]
  %22 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %18, align 8, !tbaa !37
  %23 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %22, i64 %21, i32 6
  %24 = load i32, i32* %23, align 8, !tbaa !544
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %64

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %22, i64 %21, i32 5
  %28 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %22, i64 %21, i32 4
  br label %29

29:                                               ; preds = %55, %26
  %30 = phi i64 [ 0, %26 ], [ %58, %55 ]
  %31 = load i32, i32* %27, align 4, !tbaa !546
  %32 = load i32, i32* %28, align 8, !tbaa !545
  %33 = mul nsw i32 %32, %31
  %34 = icmp sgt i32 %33, 0
  %35 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %22, i64 %21, i32 7, i64 %30, i32 5
  br i1 %34, label %36, label %55

36:                                               ; preds = %48, %29
  %37 = phi i64 [ %49, %48 ], [ 0, %29 ]
  %38 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %35, align 8, !tbaa !549
  %39 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %38, i64 %37, i32 8
  %40 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %39, align 8, !tbaa !628
  %41 = icmp eq %struct.opj_tgt_tree* %40, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %36
  tail call void @tgt_destroy(%struct.opj_tgt_tree* nonnull %40) #9
  br label %43

43:                                               ; preds = %42, %36
  %44 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %38, i64 %37, i32 7
  %45 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %44, align 8, !tbaa !627
  %46 = icmp eq %struct.opj_tgt_tree* %45, null
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  tail call void @tgt_destroy(%struct.opj_tgt_tree* nonnull %45) #9
  br label %48

48:                                               ; preds = %47, %43
  %49 = add nuw nsw i64 %37, 1
  %50 = load i32, i32* %27, align 4, !tbaa !546
  %51 = load i32, i32* %28, align 8, !tbaa !545
  %52 = mul nsw i32 %51, %50
  %53 = sext i32 %52 to i64
  %54 = icmp slt i64 %49, %53
  br i1 %54, label %36, label %55

55:                                               ; preds = %48, %29
  %56 = bitcast %struct.opj_tcd_precinct** %35 to i8**
  %57 = load i8*, i8** %56, align 8, !tbaa !549
  tail call void @free(i8* %57) #9
  %58 = add nuw nsw i64 %30, 1
  %59 = load i32, i32* %23, align 8, !tbaa !544
  %60 = sext i32 %59 to i64
  %61 = icmp slt i64 %58, %60
  br i1 %61, label %29, label %62

62:                                               ; preds = %55
  %63 = load i32, i32* %15, align 8, !tbaa !35
  br label %64

64:                                               ; preds = %62, %19
  %65 = phi i32 [ %63, %62 ], [ %20, %19 ]
  %66 = add nuw nsw i64 %21, 1
  %67 = sext i32 %65 to i64
  %68 = icmp slt i64 %66, %67
  br i1 %68, label %19, label %69

69:                                               ; preds = %64, %12
  %70 = bitcast %struct.opj_tcd_resolution** %18 to i8**
  %71 = load i8*, i8** %70, align 8, !tbaa !37
  tail call void @free(i8* %71) #9
  %72 = add nuw nsw i64 %13, 1
  %73 = load i32, i32* %8, align 8, !tbaa !542
  %74 = sext i32 %73 to i64
  %75 = icmp slt i64 %72, %74
  br i1 %75, label %12, label %76

76:                                               ; preds = %69, %2
  %77 = bitcast %struct.opj_tcd_tilecomp** %11 to i8**
  %78 = load i8*, i8** %77, align 8, !tbaa !543
  tail call void @free(i8* %78) #9
  ret void
}

; Function Attrs: nounwind uwtable
define noalias %struct.opj_tgt_tree* @tgt_create(i32, i32) #0 {
  %3 = alloca [32 x i32], align 16
  %4 = alloca [32 x i32], align 16
  %5 = bitcast [32 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %5) #9
  %6 = bitcast [32 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #9
  %7 = tail call noalias i8* @malloc(i64 24) #9
  %8 = bitcast i8* %7 to %struct.opj_tgt_tree*
  %9 = icmp eq i8* %7, null
  br i1 %9, label %166, label %10

10:                                               ; preds = %2
  %11 = bitcast i8* %7 to i32*
  store i32 %0, i32* %11, align 8, !tbaa !673
  %12 = getelementptr inbounds i8, i8* %7, i64 4
  %13 = bitcast i8* %12 to i32*
  store i32 %1, i32* %13, align 4, !tbaa !675
  %14 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 0
  store i32 %0, i32* %14, align 16, !tbaa !43
  %15 = getelementptr inbounds [32 x i32], [32 x i32]* %4, i64 0, i64 0
  store i32 %1, i32* %15, align 16, !tbaa !43
  %16 = getelementptr inbounds i8, i8* %7, i64 8
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 8, !tbaa !676
  br label %18

18:                                               ; preds = %18, %10
  %19 = phi i32 [ %29, %18 ], [ %1, %10 ]
  %20 = phi i32 [ %25, %18 ], [ %0, %10 ]
  %21 = phi i64 [ %26, %18 ], [ 0, %10 ]
  %22 = phi i32 [ %31, %18 ], [ 0, %10 ]
  %23 = mul nsw i32 %19, %20
  %24 = add nsw i32 %20, 1
  %25 = sdiv i32 %24, 2
  %26 = add nuw i64 %21, 1
  %27 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 %26
  store i32 %25, i32* %27, align 4, !tbaa !43
  %28 = add nsw i32 %19, 1
  %29 = sdiv i32 %28, 2
  %30 = getelementptr inbounds [32 x i32], [32 x i32]* %4, i64 0, i64 %26
  store i32 %29, i32* %30, align 4, !tbaa !43
  %31 = add nsw i32 %22, %23
  %32 = icmp sgt i32 %23, 1
  br i1 %32, label %18, label %33

33:                                               ; preds = %18
  %34 = trunc i64 %21 to i32
  store i32 %31, i32* %17, align 8, !tbaa !676
  %35 = icmp eq i32 %31, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %33
  tail call void @free(i8* nonnull %7) #9
  br label %166

37:                                               ; preds = %33
  %38 = sext i32 %31 to i64
  %39 = tail call noalias i8* @calloc(i64 %38, i64 24) #9
  %40 = bitcast i8* %39 to %struct.opj_tgt_node*
  %41 = getelementptr inbounds i8, i8* %7, i64 16
  %42 = bitcast i8* %41 to i8**
  store i8* %39, i8** %42, align 8, !tbaa !677
  %43 = icmp eq i8* %39, null
  br i1 %43, label %44, label %45

44:                                               ; preds = %37
  tail call void @free(i8* nonnull %7) #9
  br label %166

45:                                               ; preds = %37
  %46 = mul nsw i32 %1, %0
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %40, i64 %47
  %49 = icmp eq i32 %34, 0
  br i1 %49, label %133, label %50

50:                                               ; preds = %45
  %51 = and i64 %21, 4294967295
  br label %52

52:                                               ; preds = %127, %50
  %53 = phi i64 [ 0, %50 ], [ %131, %127 ]
  %54 = phi %struct.opj_tgt_node* [ %48, %50 ], [ %130, %127 ]
  %55 = phi %struct.opj_tgt_node* [ %48, %50 ], [ %129, %127 ]
  %56 = phi %struct.opj_tgt_node* [ %40, %50 ], [ %128, %127 ]
  %57 = getelementptr inbounds [32 x i32], [32 x i32]* %4, i64 0, i64 %53
  %58 = load i32, i32* %57, align 4, !tbaa !43
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %60, label %127

60:                                               ; preds = %52
  %61 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 %53
  %62 = load i32, i32* %61, align 4, !tbaa !43
  %63 = icmp sgt i32 %62, 0
  %64 = sext i32 %62 to i64
  %65 = add nsw i32 %58, -1
  br i1 %63, label %71, label %66

66:                                               ; preds = %60
  %67 = and i32 %58, 1
  %68 = icmp eq i32 %58, 1
  br i1 %68, label %113, label %69

69:                                               ; preds = %66
  %70 = sub i32 %58, %67
  br label %103

71:                                               ; preds = %91, %60
  %72 = phi i32 [ %101, %91 ], [ 0, %60 ]
  %73 = phi %struct.opj_tgt_node* [ %100, %91 ], [ %54, %60 ]
  %74 = phi %struct.opj_tgt_node* [ %99, %91 ], [ %55, %60 ]
  %75 = phi %struct.opj_tgt_node* [ %93, %91 ], [ %56, %60 ]
  br label %76

76:                                               ; preds = %86, %71
  %77 = phi i32 [ %62, %71 ], [ %82, %86 ]
  %78 = phi %struct.opj_tgt_node* [ %74, %71 ], [ %89, %86 ]
  %79 = phi %struct.opj_tgt_node* [ %75, %71 ], [ %88, %86 ]
  %80 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %79, i64 0, i32 0
  store %struct.opj_tgt_node* %78, %struct.opj_tgt_node** %80, align 8, !tbaa !678
  %81 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %79, i64 1
  %82 = add nsw i32 %77, -2
  %83 = icmp sgt i32 %82, -1
  br i1 %83, label %86, label %84

84:                                               ; preds = %76
  %85 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %78, i64 1
  br label %91

86:                                               ; preds = %76
  %87 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %81, i64 0, i32 0
  store %struct.opj_tgt_node* %78, %struct.opj_tgt_node** %87, align 8, !tbaa !678
  %88 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %79, i64 2
  %89 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %78, i64 1
  %90 = icmp eq i32 %82, 0
  br i1 %90, label %91, label %76

91:                                               ; preds = %86, %84
  %92 = phi %struct.opj_tgt_node* [ %85, %84 ], [ %89, %86 ]
  %93 = phi %struct.opj_tgt_node* [ %81, %84 ], [ %88, %86 ]
  %94 = and i32 %72, 1
  %95 = icmp ne i32 %94, 0
  %96 = icmp eq i32 %72, %65
  %97 = or i1 %95, %96
  %98 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %73, i64 %64
  %99 = select i1 %97, %struct.opj_tgt_node* %92, %struct.opj_tgt_node* %73
  %100 = select i1 %97, %struct.opj_tgt_node* %92, %struct.opj_tgt_node* %98
  %101 = add nuw nsw i32 %72, 1
  %102 = icmp slt i32 %101, %58
  br i1 %102, label %71, label %127

103:                                              ; preds = %103, %69
  %104 = phi i32 [ 0, %69 ], [ %110, %103 ]
  %105 = phi %struct.opj_tgt_node* [ %54, %69 ], [ %109, %103 ]
  %106 = phi %struct.opj_tgt_node* [ %55, %69 ], [ %109, %103 ]
  %107 = phi i32 [ %70, %69 ], [ %111, %103 ]
  %108 = icmp eq i32 %104, %65
  %109 = select i1 %108, %struct.opj_tgt_node* %106, %struct.opj_tgt_node* %105
  %110 = add nuw nsw i32 %104, 2
  %111 = add i32 %107, -2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %103

113:                                              ; preds = %103, %66
  %114 = phi %struct.opj_tgt_node* [ undef, %66 ], [ %109, %103 ]
  %115 = phi i32 [ 0, %66 ], [ %110, %103 ]
  %116 = phi %struct.opj_tgt_node* [ %54, %66 ], [ %109, %103 ]
  %117 = phi %struct.opj_tgt_node* [ %55, %66 ], [ %109, %103 ]
  %118 = icmp eq i32 %67, 0
  br i1 %118, label %127, label %119

119:                                              ; preds = %113
  %120 = and i32 %115, 1
  %121 = icmp ne i32 %120, 0
  %122 = icmp eq i32 %115, %65
  %123 = or i1 %121, %122
  %124 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %116, i64 %64
  %125 = select i1 %123, %struct.opj_tgt_node* %117, %struct.opj_tgt_node* %124
  %126 = select i1 %123, %struct.opj_tgt_node* %117, %struct.opj_tgt_node* %116
  br label %127

127:                                              ; preds = %119, %113, %91, %52
  %128 = phi %struct.opj_tgt_node* [ %56, %52 ], [ %93, %91 ], [ %56, %113 ], [ %56, %119 ]
  %129 = phi %struct.opj_tgt_node* [ %55, %52 ], [ %99, %91 ], [ %114, %113 ], [ %126, %119 ]
  %130 = phi %struct.opj_tgt_node* [ %54, %52 ], [ %100, %91 ], [ %114, %113 ], [ %125, %119 ]
  %131 = add nuw nsw i64 %53, 1
  %132 = icmp eq i64 %131, %51
  br i1 %132, label %133, label %52

133:                                              ; preds = %127, %45
  %134 = phi %struct.opj_tgt_node* [ %40, %45 ], [ %128, %127 ]
  %135 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %134, i64 0, i32 0
  store %struct.opj_tgt_node* null, %struct.opj_tgt_node** %135, align 8, !tbaa !678
  %136 = icmp sgt i32 %31, 0
  br i1 %136, label %137, label %166

137:                                              ; preds = %133
  %138 = add nsw i64 %38, -1
  %139 = and i64 %38, 3
  %140 = icmp ult i64 %138, 3
  br i1 %140, label %156, label %141

141:                                              ; preds = %137
  %142 = sub nsw i64 %38, %139
  br label %143

143:                                              ; preds = %143, %141
  %144 = phi i64 [ 0, %141 ], [ %153, %143 ]
  %145 = phi i64 [ %142, %141 ], [ %154, %143 ]
  %146 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %40, i64 %144, i32 1
  store i32 999, i32* %146, align 8, !tbaa !680
  %147 = or i64 %144, 1
  %148 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %40, i64 %147, i32 1
  store i32 999, i32* %148, align 8, !tbaa !680
  %149 = or i64 %144, 2
  %150 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %40, i64 %149, i32 1
  store i32 999, i32* %150, align 8, !tbaa !680
  %151 = or i64 %144, 3
  %152 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %40, i64 %151, i32 1
  store i32 999, i32* %152, align 8, !tbaa !680
  %153 = add nuw nsw i64 %144, 4
  %154 = add i64 %145, -4
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %143

156:                                              ; preds = %143, %137
  %157 = phi i64 [ 0, %137 ], [ %153, %143 ]
  %158 = icmp eq i64 %139, 0
  br i1 %158, label %166, label %159

159:                                              ; preds = %159, %156
  %160 = phi i64 [ %163, %159 ], [ %157, %156 ]
  %161 = phi i64 [ %164, %159 ], [ %139, %156 ]
  %162 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %40, i64 %160, i32 1
  store i32 999, i32* %162, align 8, !tbaa !680
  %163 = add nuw nsw i64 %160, 1
  %164 = add i64 %161, -1
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %159, !llvm.loop !681

166:                                              ; preds = %159, %156, %133, %44, %36, %2
  %167 = phi %struct.opj_tgt_tree* [ null, %36 ], [ null, %44 ], [ null, %2 ], [ %8, %133 ], [ %8, %159 ], [ %8, %156 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %5) #9
  ret %struct.opj_tgt_tree* %167
}

; Function Attrs: norecurse nounwind uwtable
define void @tgt_reset(%struct.opj_tgt_tree* readonly) #4 {
  %2 = icmp eq %struct.opj_tgt_tree* %0, null
  br i1 %2, label %35, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8, !tbaa !676
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %35

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 3
  %9 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %8, align 8, !tbaa !677
  %10 = sext i32 %5 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i32 %5, 1
  br i1 %12, label %28, label %13

13:                                               ; preds = %7
  %14 = sub nsw i64 %10, %11
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i64 [ 0, %13 ], [ %25, %15 ]
  %17 = phi i64 [ %14, %13 ], [ %26, %15 ]
  %18 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %9, i64 %16, i32 1
  store i32 999, i32* %18, align 8, !tbaa !680
  %19 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %9, i64 %16, i32 2
  store i32 0, i32* %19, align 4, !tbaa !682
  %20 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %9, i64 %16, i32 3
  store i32 0, i32* %20, align 8, !tbaa !683
  %21 = or i64 %16, 1
  %22 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %9, i64 %21, i32 1
  store i32 999, i32* %22, align 8, !tbaa !680
  %23 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %9, i64 %21, i32 2
  store i32 0, i32* %23, align 4, !tbaa !682
  %24 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %9, i64 %21, i32 3
  store i32 0, i32* %24, align 8, !tbaa !683
  %25 = add nuw nsw i64 %16, 2
  %26 = add i64 %17, -2
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %15

28:                                               ; preds = %15, %7
  %29 = phi i64 [ 0, %7 ], [ %25, %15 ]
  %30 = icmp eq i64 %11, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %9, i64 %29, i32 1
  store i32 999, i32* %32, align 8, !tbaa !680
  %33 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %9, i64 %29, i32 2
  store i32 0, i32* %33, align 4, !tbaa !682
  %34 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %9, i64 %29, i32 3
  store i32 0, i32* %34, align 8, !tbaa !683
  br label %35

35:                                               ; preds = %31, %28, %3, %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @tgt_destroy(%struct.opj_tgt_tree* nocapture) #0 {
  %2 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 3
  %3 = bitcast %struct.opj_tgt_node** %2 to i8**
  %4 = load i8*, i8** %3, align 8, !tbaa !677
  tail call void @free(i8* %4) #9
  %5 = bitcast %struct.opj_tgt_tree* %0 to i8*
  tail call void @free(i8* %5) #9
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @tgt_setvalue(%struct.opj_tgt_tree* nocapture readonly, i32, i32) #4 {
  %4 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 3
  %5 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %4, align 8, !tbaa !677
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %5, i64 %6
  %8 = icmp eq %struct.opj_tgt_node* %7, null
  br i1 %8, label %18, label %9

9:                                                ; preds = %14, %3
  %10 = phi %struct.opj_tgt_node* [ %16, %14 ], [ %7, %3 ]
  %11 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %10, i64 0, i32 1
  %12 = load i32, i32* %11, align 8, !tbaa !680
  %13 = icmp sgt i32 %12, %2
  br i1 %13, label %14, label %18

14:                                               ; preds = %9
  store i32 %2, i32* %11, align 8, !tbaa !680
  %15 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %10, i64 0, i32 0
  %16 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %15, align 8, !tbaa !678
  %17 = icmp eq %struct.opj_tgt_node* %16, null
  br i1 %17, label %18, label %9

18:                                               ; preds = %14, %9, %3
  ret void
}

; Function Attrs: nounwind uwtable
define void @tgt_encode(%struct.opj_bio*, %struct.opj_tgt_tree* nocapture readonly, i32, i32) #0 {
  %5 = alloca [31 x %struct.opj_tgt_node*], align 16
  %6 = bitcast [31 x %struct.opj_tgt_node*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 248, i8* nonnull %6) #9
  %7 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %1, i64 0, i32 3
  %8 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %7, align 8, !tbaa !677
  %9 = sext i32 %2 to i64
  %10 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %8, i64 %9
  %11 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %10, i64 0, i32 0
  %12 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %11, align 8, !tbaa !678
  %13 = icmp eq %struct.opj_tgt_node* %12, null
  br i1 %13, label %23, label %14

14:                                               ; preds = %14, %4
  %15 = phi %struct.opj_tgt_node* [ %21, %14 ], [ %12, %4 ]
  %16 = phi %struct.opj_tgt_node* [ %15, %14 ], [ %10, %4 ]
  %17 = phi i64 [ %19, %14 ], [ 0, %4 ]
  %18 = getelementptr inbounds [31 x %struct.opj_tgt_node*], [31 x %struct.opj_tgt_node*]* %5, i64 0, i64 %17
  %19 = add nuw nsw i64 %17, 1
  store %struct.opj_tgt_node* %16, %struct.opj_tgt_node** %18, align 8, !tbaa !24
  %20 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %15, i64 0, i32 0
  %21 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %20, align 8, !tbaa !678
  %22 = icmp eq %struct.opj_tgt_node* %21, null
  br i1 %22, label %23, label %14

23:                                               ; preds = %14, %4
  %24 = phi i64 [ 0, %4 ], [ %19, %14 ]
  %25 = phi %struct.opj_tgt_node* [ %10, %4 ], [ %15, %14 ]
  br label %26

26:                                               ; preds = %54, %23
  %27 = phi i64 [ %55, %54 ], [ %24, %23 ]
  %28 = phi %struct.opj_tgt_node* [ %57, %54 ], [ %25, %23 ]
  %29 = phi i32 [ %52, %54 ], [ 0, %23 ]
  %30 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %28, i64 0, i32 2
  %31 = load i32, i32* %30, align 4, !tbaa !682
  %32 = icmp sgt i32 %29, %31
  br i1 %32, label %33, label %34

33:                                               ; preds = %26
  store i32 %29, i32* %30, align 4, !tbaa !682
  br label %34

34:                                               ; preds = %33, %26
  %35 = phi i32 [ %29, %33 ], [ %31, %26 ]
  %36 = icmp slt i32 %35, %3
  br i1 %36, label %37, label %51

37:                                               ; preds = %34
  %38 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %28, i64 0, i32 1
  br label %39

39:                                               ; preds = %48, %37
  %40 = phi i32 [ %35, %37 ], [ %49, %48 ]
  %41 = load i32, i32* %38, align 8, !tbaa !680
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %28, i64 0, i32 3
  %45 = load i32, i32* %44, align 8, !tbaa !683
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %43
  tail call void @bio_write(%struct.opj_bio* %0, i32 1, i32 1) #9
  store i32 1, i32* %44, align 8, !tbaa !683
  br label %51

48:                                               ; preds = %39
  tail call void @bio_write(%struct.opj_bio* %0, i32 0, i32 1) #9
  %49 = add nsw i32 %40, 1
  %50 = icmp slt i32 %49, %3
  br i1 %50, label %39, label %51

51:                                               ; preds = %48, %47, %43, %34
  %52 = phi i32 [ %40, %43 ], [ %40, %47 ], [ %35, %34 ], [ %49, %48 ]
  store i32 %52, i32* %30, align 4, !tbaa !682
  %53 = icmp eq i64 %27, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %51
  %55 = add nsw i64 %27, -1
  %56 = getelementptr inbounds [31 x %struct.opj_tgt_node*], [31 x %struct.opj_tgt_node*]* %5, i64 0, i64 %55
  %57 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %56, align 8, !tbaa !24
  br label %26

58:                                               ; preds = %51
  call void @llvm.lifetime.end.p0i8(i64 248, i8* nonnull %6) #9
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @tgt_decode(%struct.opj_bio*, %struct.opj_tgt_tree* nocapture readonly, i32, i32) #0 {
  %5 = alloca [31 x %struct.opj_tgt_node*], align 16
  %6 = bitcast [31 x %struct.opj_tgt_node*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 248, i8* nonnull %6) #9
  %7 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %1, i64 0, i32 3
  %8 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %7, align 8, !tbaa !677
  %9 = sext i32 %2 to i64
  %10 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %8, i64 %9
  %11 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %10, i64 0, i32 0
  %12 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %11, align 8, !tbaa !678
  %13 = icmp eq %struct.opj_tgt_node* %12, null
  br i1 %13, label %23, label %14

14:                                               ; preds = %14, %4
  %15 = phi %struct.opj_tgt_node* [ %21, %14 ], [ %12, %4 ]
  %16 = phi %struct.opj_tgt_node* [ %15, %14 ], [ %10, %4 ]
  %17 = phi i64 [ %19, %14 ], [ 0, %4 ]
  %18 = getelementptr inbounds [31 x %struct.opj_tgt_node*], [31 x %struct.opj_tgt_node*]* %5, i64 0, i64 %17
  %19 = add nuw nsw i64 %17, 1
  store %struct.opj_tgt_node* %16, %struct.opj_tgt_node** %18, align 8, !tbaa !24
  %20 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %15, i64 0, i32 0
  %21 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %20, align 8, !tbaa !678
  %22 = icmp eq %struct.opj_tgt_node* %21, null
  br i1 %22, label %23, label %14

23:                                               ; preds = %14, %4
  %24 = phi i64 [ 0, %4 ], [ %19, %14 ]
  %25 = phi %struct.opj_tgt_node* [ %10, %4 ], [ %15, %14 ]
  br label %26

26:                                               ; preds = %54, %23
  %27 = phi i64 [ %55, %54 ], [ %24, %23 ]
  %28 = phi %struct.opj_tgt_node* [ %57, %54 ], [ %25, %23 ]
  %29 = phi i32 [ %52, %54 ], [ 0, %23 ]
  %30 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %28, i64 0, i32 2
  %31 = load i32, i32* %30, align 4, !tbaa !682
  %32 = icmp sgt i32 %29, %31
  br i1 %32, label %33, label %34

33:                                               ; preds = %26
  store i32 %29, i32* %30, align 4, !tbaa !682
  br label %34

34:                                               ; preds = %33, %26
  %35 = phi i32 [ %29, %33 ], [ %31, %26 ]
  %36 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %28, i64 0, i32 1
  %37 = icmp slt i32 %35, %3
  br i1 %37, label %38, label %51

38:                                               ; preds = %48, %34
  %39 = phi i32 [ %49, %48 ], [ %35, %34 ]
  %40 = load i32, i32* %36, align 8, !tbaa !680
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %42, label %51

42:                                               ; preds = %38
  %43 = tail call i32 @bio_read(%struct.opj_bio* %0, i32 1) #9
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %46, label %45

45:                                               ; preds = %42
  store i32 %39, i32* %36, align 8, !tbaa !680
  br label %48

46:                                               ; preds = %42
  %47 = add nsw i32 %39, 1
  br label %48

48:                                               ; preds = %46, %45
  %49 = phi i32 [ %39, %45 ], [ %47, %46 ]
  %50 = icmp slt i32 %49, %3
  br i1 %50, label %38, label %51

51:                                               ; preds = %48, %38, %34
  %52 = phi i32 [ %35, %34 ], [ %49, %48 ], [ %39, %38 ]
  store i32 %52, i32* %30, align 4, !tbaa !682
  %53 = icmp eq i64 %27, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %51
  %55 = add nsw i64 %27, -1
  %56 = getelementptr inbounds [31 x %struct.opj_tgt_node*], [31 x %struct.opj_tgt_node*]* %5, i64 0, i64 %55
  %57 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %56, align 8, !tbaa !24
  br label %26

58:                                               ; preds = %51
  %59 = load i32, i32* %36, align 8, !tbaa !680
  %60 = icmp slt i32 %59, %3
  %61 = zext i1 %60 to i32
  call void @llvm.lifetime.end.p0i8(i64 248, i8* nonnull %6) #9
  ret i32 %61
}

; Function Attrs: nounwind uwtable
define i32 @write_cidx(i32, %struct.opj_cio*, %struct.opj_image* nocapture readnone, %struct.opj_codestream_info* byval align 8, i32) #0 {
  %6 = tail call noalias i8* @calloc(i64 32, i64 12) #9
  %7 = bitcast i8* %6 to %struct.opj_jp2_comps*
  %8 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 20
  %9 = bitcast i8* %6 to i32*
  %10 = getelementptr inbounds i8, i8* %6, i64 4
  %11 = bitcast i8* %10 to i32*
  %12 = getelementptr inbounds i8, i8* %6, i64 12
  %13 = bitcast i8* %12 to i32*
  %14 = getelementptr inbounds i8, i8* %6, i64 16
  %15 = bitcast i8* %14 to i32*
  %16 = getelementptr inbounds i8, i8* %6, i64 24
  %17 = bitcast i8* %16 to i32*
  %18 = getelementptr inbounds i8, i8* %6, i64 28
  %19 = bitcast i8* %18 to i32*
  %20 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 16
  %21 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %3, i64 0, i32 15
  %22 = add i32 %0, 2
  %23 = getelementptr inbounds i8, i8* %6, i64 36
  %24 = bitcast i8* %23 to i32*
  %25 = getelementptr inbounds i8, i8* %6, i64 40
  %26 = bitcast i8* %25 to i32*
  %27 = getelementptr inbounds i8, i8* %6, i64 48
  %28 = bitcast i8* %27 to i32*
  %29 = getelementptr inbounds i8, i8* %6, i64 52
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %8, align 4, !tbaa !182
  %32 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %33 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1667851384, i32 4) #9
  tail call void @write_cptr(i32 %0, i32 %31, %struct.opj_cio* %1)
  tail call void @write_manf(i32 0, i32 0, %struct.opj_jp2_comps* %7, %struct.opj_cio* %1)
  %34 = tail call i32 @write_mainmhix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %3, %struct.opj_cio* %1)
  store i32 %34, i32* %9, align 4, !tbaa !375
  store i32 1835559288, i32* %11, align 4, !tbaa !373
  %35 = tail call i32 @write_tpix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %3, i32 %4, %struct.opj_cio* %1) #9
  store i32 %35, i32* %13, align 4, !tbaa !375
  store i32 1953524088, i32* %15, align 4, !tbaa !373
  %36 = tail call i32 @write_thix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %3, %struct.opj_cio* %1) #9
  store i32 %36, i32* %17, align 4, !tbaa !375
  store i32 1952999800, i32* %19, align 4, !tbaa !373
  %37 = load %struct.opj_marker_info_t*, %struct.opj_marker_info_t** %20, align 8, !tbaa !332
  %38 = load i32, i32* %21, align 8, !tbaa !333
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %59

40:                                               ; preds = %5
  %41 = sext i32 %38 to i64
  br label %44

42:                                               ; preds = %44
  %43 = icmp slt i64 %49, %41
  br i1 %43, label %44, label %59

44:                                               ; preds = %42, %40
  %45 = phi i64 [ 0, %40 ], [ %49, %42 ]
  %46 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %37, i64 %45, i32 0
  %47 = load i16, i16* %46, align 4, !tbaa !334
  %48 = icmp eq i16 %47, -174
  %49 = add nuw nsw i64 %45, 1
  br i1 %48, label %50, label %42

50:                                               ; preds = %44
  %51 = and i64 %45, 4294967295
  %52 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %53 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %37, i64 %51, i32 1
  %54 = load i32, i32* %53, align 4, !tbaa !337
  %55 = add i32 %22, %54
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %55) #9
  %56 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %57 = lshr i32 %56, 2
  %58 = and i32 %57, 1
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %52) #9
  br label %59

59:                                               ; preds = %50, %42, %5
  %60 = phi i32 [ %58, %50 ], [ 0, %5 ], [ 0, %42 ]
  %61 = tail call i32 @write_ppix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %3, i32 %60, i32 %4, %struct.opj_cio* %1) #9
  store i32 %61, i32* %24, align 4, !tbaa !375
  store i32 1886415224, i32* %26, align 4, !tbaa !373
  %62 = tail call i32 @write_phix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %3, i32 %60, i32 %4, %struct.opj_cio* %1) #9
  store i32 %62, i32* %28, align 4, !tbaa !375
  store i32 1885890936, i32* %30, align 4, !tbaa !373
  %63 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %64 = sub nsw i32 %63, %32
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %32) #9
  %65 = sext i32 %64 to i64
  %66 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %65, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %63) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %32) #9
  %67 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  tail call void @cio_skip(%struct.opj_cio* %1, i32 4) #9
  %68 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 1667851384, i32 4) #9
  %69 = load i32, i32* %8, align 4, !tbaa !182
  tail call void @write_cptr(i32 %0, i32 %69, %struct.opj_cio* %1)
  tail call void @write_manf(i32 1, i32 5, %struct.opj_jp2_comps* %7, %struct.opj_cio* %1)
  %70 = tail call i32 @write_mainmhix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %3, %struct.opj_cio* %1)
  store i32 %70, i32* %9, align 4, !tbaa !375
  store i32 1835559288, i32* %11, align 4, !tbaa !373
  %71 = tail call i32 @write_tpix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %3, i32 %4, %struct.opj_cio* %1) #9
  store i32 %71, i32* %13, align 4, !tbaa !375
  store i32 1953524088, i32* %15, align 4, !tbaa !373
  %72 = tail call i32 @write_thix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %3, %struct.opj_cio* %1) #9
  store i32 %72, i32* %17, align 4, !tbaa !375
  store i32 1952999800, i32* %19, align 4, !tbaa !373
  %73 = load %struct.opj_marker_info_t*, %struct.opj_marker_info_t** %20, align 8, !tbaa !332
  %74 = load i32, i32* %21, align 8, !tbaa !333
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %76, label %95

76:                                               ; preds = %59
  %77 = sext i32 %74 to i64
  br label %78

78:                                               ; preds = %84, %76
  %79 = phi i64 [ 0, %76 ], [ %83, %84 ]
  %80 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %73, i64 %79, i32 0
  %81 = load i16, i16* %80, align 4, !tbaa !334
  %82 = icmp eq i16 %81, -174
  %83 = add nuw nsw i64 %79, 1
  br i1 %82, label %86, label %84

84:                                               ; preds = %78
  %85 = icmp slt i64 %83, %77
  br i1 %85, label %78, label %95

86:                                               ; preds = %78
  %87 = and i64 %79, 4294967295
  %88 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %89 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %73, i64 %87, i32 1
  %90 = load i32, i32* %89, align 4, !tbaa !337
  %91 = add i32 %22, %90
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %91) #9
  %92 = tail call i32 @cio_read(%struct.opj_cio* %1, i32 1) #9
  %93 = lshr i32 %92, 2
  %94 = and i32 %93, 1
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %88) #9
  br label %95

95:                                               ; preds = %86, %84, %59
  %96 = phi i32 [ %94, %86 ], [ 0, %59 ], [ 0, %84 ]
  %97 = tail call i32 @write_ppix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %3, i32 %96, i32 %4, %struct.opj_cio* %1) #9
  %98 = tail call i32 @write_phix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %3, i32 %96, i32 %4, %struct.opj_cio* %1) #9
  %99 = tail call i32 @cio_tell(%struct.opj_cio* %1) #9
  %100 = sub nsw i32 %99, %67
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %67) #9
  %101 = sext i32 %100 to i64
  %102 = tail call i32 @cio_write(%struct.opj_cio* %1, i64 %101, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %1, i32 %99) #9
  tail call void @free(i8* %6) #9
  ret i32 %100
}

; Function Attrs: nounwind uwtable
define void @write_cptr(i32, i32, %struct.opj_cio*) #0 {
  %4 = tail call i32 @cio_tell(%struct.opj_cio* %2) #9
  tail call void @cio_skip(%struct.opj_cio* %2, i32 4) #9
  %5 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 1668314226, i32 4) #9
  %6 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 0, i32 2) #9
  %7 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 0, i32 2) #9
  %8 = sext i32 %0 to i64
  %9 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %8, i32 8) #9
  %10 = sext i32 %1 to i64
  %11 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %10, i32 8) #9
  %12 = tail call i32 @cio_tell(%struct.opj_cio* %2) #9
  %13 = sub nsw i32 %12, %4
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %4) #9
  %14 = sext i32 %13 to i64
  %15 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %14, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %12) #9
  ret void
}

; Function Attrs: nounwind uwtable
define void @write_manf(i32, i32, %struct.opj_jp2_comps* nocapture readonly, %struct.opj_cio*) #0 {
  %5 = tail call i32 @cio_tell(%struct.opj_cio* %3) #9
  tail call void @cio_skip(%struct.opj_cio* %3, i32 4) #9
  %6 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 1835101798, i32 4) #9
  %7 = icmp ne i32 %0, 0
  %8 = icmp sgt i32 %1, 0
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %24

10:                                               ; preds = %4
  %11 = zext i32 %1 to i64
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %22, %12 ]
  %14 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %2, i64 %13, i32 0
  %15 = load i32, i32* %14, align 4, !tbaa !375
  %16 = sext i32 %15 to i64
  %17 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 %16, i32 4) #9
  %18 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %2, i64 %13, i32 1
  %19 = load i32, i32* %18, align 4, !tbaa !373
  %20 = sext i32 %19 to i64
  %21 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 %20, i32 4) #9
  %22 = add nuw nsw i64 %13, 1
  %23 = icmp eq i64 %22, %11
  br i1 %23, label %24, label %12

24:                                               ; preds = %12, %4
  %25 = tail call i32 @cio_tell(%struct.opj_cio* %3) #9
  %26 = sub nsw i32 %25, %5
  tail call void @cio_seek(%struct.opj_cio* %3, i32 %5) #9
  %27 = sext i32 %26 to i64
  %28 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 %27, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %3, i32 %25) #9
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @write_mainmhix(i32, %struct.opj_codestream_info* byval nocapture readonly align 8, %struct.opj_cio*) #0 {
  %4 = tail call i32 @cio_tell(%struct.opj_cio* %2) #9
  tail call void @cio_skip(%struct.opj_cio* %2, i32 4) #9
  %5 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 1835559288, i32 4) #9
  %6 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %1, i64 0, i32 19
  %7 = load i32, i32* %6, align 8, !tbaa !187
  %8 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %1, i64 0, i32 18
  %9 = load i32, i32* %8, align 4, !tbaa !181
  %10 = add i32 %7, 1
  %11 = sub i32 %10, %9
  %12 = sext i32 %11 to i64
  %13 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %12, i32 8) #9
  %14 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %1, i64 0, i32 15
  %15 = load i32, i32* %14, align 8, !tbaa !333
  %16 = icmp sgt i32 %15, 1
  br i1 %16, label %17, label %39

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %1, i64 0, i32 16
  %19 = load %struct.opj_marker_info_t*, %struct.opj_marker_info_t** %18, align 8, !tbaa !332
  %20 = sext i32 %15 to i64
  br label %21

21:                                               ; preds = %21, %17
  %22 = phi i64 [ 1, %17 ], [ %37, %21 ]
  %23 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %19, i64 %22, i32 0
  %24 = load i16, i16* %23, align 4, !tbaa !334
  %25 = zext i16 %24 to i64
  %26 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %25, i32 2) #9
  %27 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 0, i32 2) #9
  %28 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %19, i64 %22, i32 1
  %29 = load i32, i32* %28, align 4, !tbaa !337
  %30 = sub nsw i32 %29, %0
  %31 = sext i32 %30 to i64
  %32 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %31, i32 8) #9
  %33 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %19, i64 %22, i32 2
  %34 = load i32, i32* %33, align 4, !tbaa !338
  %35 = sext i32 %34 to i64
  %36 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %35, i32 2) #9
  %37 = add nuw nsw i64 %22, 1
  %38 = icmp slt i64 %37, %20
  br i1 %38, label %21, label %39

39:                                               ; preds = %21, %3
  %40 = tail call i32 @cio_tell(%struct.opj_cio* %2) #9
  %41 = sub nsw i32 %40, %4
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %4) #9
  %42 = sext i32 %41 to i64
  %43 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %42, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %40) #9
  ret i32 %41
}

; Function Attrs: nounwind uwtable
define i32 @check_EPHuse(i32, %struct.opj_marker_info_t* nocapture readonly, i32, %struct.opj_cio*) #0 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %26

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %10

8:                                                ; preds = %10
  %9 = icmp slt i64 %15, %7
  br i1 %9, label %10, label %26

10:                                               ; preds = %8, %6
  %11 = phi i64 [ 0, %6 ], [ %15, %8 ]
  %12 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %1, i64 %11, i32 0
  %13 = load i16, i16* %12, align 4, !tbaa !334
  %14 = icmp eq i16 %13, -174
  %15 = add nuw nsw i64 %11, 1
  br i1 %14, label %16, label %8

16:                                               ; preds = %10
  %17 = and i64 %11, 4294967295
  %18 = tail call i32 @cio_tell(%struct.opj_cio* %3) #9
  %19 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %1, i64 %17, i32 1
  %20 = load i32, i32* %19, align 4, !tbaa !337
  %21 = add i32 %0, 2
  %22 = add i32 %21, %20
  tail call void @cio_seek(%struct.opj_cio* %3, i32 %22) #9
  %23 = tail call i32 @cio_read(%struct.opj_cio* %3, i32 1) #9
  %24 = lshr i32 %23, 2
  %25 = and i32 %24, 1
  tail call void @cio_seek(%struct.opj_cio* %3, i32 %18) #9
  br label %26

26:                                               ; preds = %16, %8, %4
  %27 = phi i32 [ %25, %16 ], [ 0, %4 ], [ 0, %8 ]
  ret i32 %27
}

; Function Attrs: nounwind uwtable
define i32 @write_phix(i32, %struct.opj_codestream_info* byval nocapture readonly align 8, i32, i32, %struct.opj_cio*) #0 {
  %6 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %1, i64 0, i32 12
  %7 = load i32, i32* %6, align 4, !tbaa !215
  %8 = sext i32 %7 to i64
  %9 = tail call noalias i8* @calloc(i64 %8, i64 12) #9
  %10 = bitcast i8* %9 to %struct.opj_jp2_comps*
  %11 = icmp sgt i32 %7, 0
  %12 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  tail call void @cio_skip(%struct.opj_cio* %4, i32 4) #9
  %13 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 1885890936, i32 4) #9
  tail call void @write_manf(i32 0, i32 %7, %struct.opj_jp2_comps* %10, %struct.opj_cio* %4) #9
  br i1 %11, label %14, label %46

14:                                               ; preds = %5
  %15 = zext i32 %7 to i64
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %22, %16 ]
  %18 = trunc i64 %17 to i32
  %19 = tail call i32 @write_phixfaix(i32 %0, i32 %18, %struct.opj_codestream_info* byval nonnull align 8 %1, i32 undef, i32 %3, %struct.opj_cio* %4)
  %20 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %10, i64 %17, i32 0
  store i32 %19, i32* %20, align 4, !tbaa !375
  %21 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %10, i64 %17, i32 1
  store i32 1717660024, i32* %21, align 4, !tbaa !373
  %22 = add nuw nsw i64 %17, 1
  %23 = icmp eq i64 %22, %15
  br i1 %23, label %26, label %16

24:                                               ; preds = %46, %41
  %25 = phi i32 [ %43, %41 ], [ %54, %46 ]
  tail call void @free(i8* %9) #9
  ret i32 %25

26:                                               ; preds = %16
  %27 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  %28 = sub nsw i32 %27, %12
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %12) #9
  %29 = sext i32 %28 to i64
  %30 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %29, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %27) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %12) #9
  %31 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  tail call void @cio_skip(%struct.opj_cio* %4, i32 4) #9
  %32 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 1885890936, i32 4) #9
  tail call void @write_manf(i32 1, i32 %7, %struct.opj_jp2_comps* nonnull %10, %struct.opj_cio* %4) #9
  br label %33

33:                                               ; preds = %33, %26
  %34 = phi i64 [ 0, %26 ], [ %39, %33 ]
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @write_phixfaix(i32 %0, i32 %35, %struct.opj_codestream_info* byval nonnull align 8 %1, i32 undef, i32 %3, %struct.opj_cio* %4)
  %37 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %10, i64 %34, i32 0
  store i32 %36, i32* %37, align 4, !tbaa !375
  %38 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %10, i64 %34, i32 1
  store i32 1717660024, i32* %38, align 4, !tbaa !373
  %39 = add nuw nsw i64 %34, 1
  %40 = icmp eq i64 %39, %22
  br i1 %40, label %41, label %33

41:                                               ; preds = %33
  %42 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  %43 = sub nsw i32 %42, %31
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %31) #9
  %44 = sext i32 %43 to i64
  %45 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %44, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %42) #9
  br label %24

46:                                               ; preds = %5
  %47 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  %48 = sub nsw i32 %47, %12
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %12) #9
  %49 = sext i32 %48 to i64
  %50 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %49, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %47) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %12) #9
  %51 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  tail call void @cio_skip(%struct.opj_cio* %4, i32 4) #9
  %52 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 1885890936, i32 4) #9
  tail call void @write_manf(i32 1, i32 %7, %struct.opj_jp2_comps* %10, %struct.opj_cio* %4) #9
  %53 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  %54 = sub nsw i32 %53, %51
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %51) #9
  %55 = sext i32 %54 to i64
  %56 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %55, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %53) #9
  br label %24
}

; Function Attrs: nounwind uwtable
define i32 @write_phixfaix(i32, i32, %struct.opj_codestream_info* byval nocapture readonly align 8, i32, i32, %struct.opj_cio*) #0 {
  %7 = tail call i32 @cio_tell(%struct.opj_cio* %5) #9
  tail call void @cio_skip(%struct.opj_cio* %5, i32 4) #9
  %8 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 1717660024, i32 4) #9
  %9 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 0, i32 1) #9
  %10 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 14
  %11 = load i32*, i32** %10, align 8, !tbaa !224
  %12 = sext i32 %1 to i64
  %13 = getelementptr inbounds i32, i32* %11, i64 %12
  %14 = load i32, i32* %13, align 4, !tbaa !43
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %133, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 21
  %18 = load %struct.opj_tile_info*, %struct.opj_tile_info** %17, align 8, !tbaa !143
  %19 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 13
  %20 = load i32, i32* %19, align 8, !tbaa !223
  %21 = sext i32 %14 to i64
  %22 = add nsw i64 %21, 1
  %23 = icmp ult i64 %22, 8
  br i1 %23, label %118, label %24

24:                                               ; preds = %16
  %25 = and i64 %22, -8
  %26 = insertelement <4 x i32> undef, i32 %20, i32 0
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = insertelement <4 x i32> undef, i32 %20, i32 0
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> zeroinitializer
  %30 = add nsw i64 %25, -8
  %31 = lshr exact i64 %30, 3
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 1
  %34 = icmp eq i64 %30, 0
  br i1 %34, label %82, label %35

35:                                               ; preds = %24
  %36 = sub nuw nsw i64 %32, %33
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi i64 [ 0, %35 ], [ %79, %37 ]
  %39 = phi <4 x i32> [ zeroinitializer, %35 ], [ %77, %37 ]
  %40 = phi <4 x i32> [ zeroinitializer, %35 ], [ %78, %37 ]
  %41 = phi i64 [ %36, %35 ], [ %80, %37 ]
  %42 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 6, i64 %38
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4, !tbaa !43
  %45 = getelementptr inbounds i32, i32* %42, i64 4
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4, !tbaa !43
  %48 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 5, i64 %38
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4, !tbaa !43
  %51 = getelementptr inbounds i32, i32* %48, i64 4
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4, !tbaa !43
  %54 = mul nsw <4 x i32> %50, %44
  %55 = mul nsw <4 x i32> %53, %47
  %56 = mul nsw <4 x i32> %54, %27
  %57 = mul nsw <4 x i32> %55, %29
  %58 = add nsw <4 x i32> %56, %39
  %59 = add nsw <4 x i32> %57, %40
  %60 = or i64 %38, 8
  %61 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 6, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4, !tbaa !43
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !tbaa !43
  %67 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 5, i64 %60
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !tbaa !43
  %70 = getelementptr inbounds i32, i32* %67, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !tbaa !43
  %73 = mul nsw <4 x i32> %69, %63
  %74 = mul nsw <4 x i32> %72, %66
  %75 = mul nsw <4 x i32> %73, %27
  %76 = mul nsw <4 x i32> %74, %29
  %77 = add nsw <4 x i32> %75, %58
  %78 = add nsw <4 x i32> %76, %59
  %79 = add i64 %38, 16
  %80 = add i64 %41, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %37, !llvm.loop !684

82:                                               ; preds = %37, %24
  %83 = phi <4 x i32> [ undef, %24 ], [ %77, %37 ]
  %84 = phi <4 x i32> [ undef, %24 ], [ %78, %37 ]
  %85 = phi i64 [ 0, %24 ], [ %79, %37 ]
  %86 = phi <4 x i32> [ zeroinitializer, %24 ], [ %77, %37 ]
  %87 = phi <4 x i32> [ zeroinitializer, %24 ], [ %78, %37 ]
  %88 = icmp eq i64 %33, 0
  br i1 %88, label %108, label %89

89:                                               ; preds = %82
  %90 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 6, i64 %85
  %91 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 5, i64 %85
  %92 = getelementptr inbounds i32, i32* %91, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !tbaa !43
  %95 = getelementptr inbounds i32, i32* %90, i64 4
  %96 = bitcast i32* %95 to <4 x i32>*
  %97 = load <4 x i32>, <4 x i32>* %96, align 4, !tbaa !43
  %98 = mul nsw <4 x i32> %94, %97
  %99 = mul nsw <4 x i32> %98, %29
  %100 = add nsw <4 x i32> %99, %87
  %101 = bitcast i32* %91 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4, !tbaa !43
  %103 = bitcast i32* %90 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !tbaa !43
  %105 = mul nsw <4 x i32> %102, %104
  %106 = mul nsw <4 x i32> %105, %27
  %107 = add nsw <4 x i32> %106, %86
  br label %108

108:                                              ; preds = %89, %82
  %109 = phi <4 x i32> [ %83, %82 ], [ %107, %89 ]
  %110 = phi <4 x i32> [ %84, %82 ], [ %100, %89 ]
  %111 = add <4 x i32> %110, %109
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %113 = add <4 x i32> %111, %112
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %115 = add <4 x i32> %113, %114
  %116 = extractelement <4 x i32> %115, i32 0
  %117 = icmp eq i64 %22, %25
  br i1 %117, label %133, label %118

118:                                              ; preds = %108, %16
  %119 = phi i64 [ 0, %16 ], [ %25, %108 ]
  %120 = phi i32 [ 0, %16 ], [ %116, %108 ]
  br label %121

121:                                              ; preds = %121, %118
  %122 = phi i64 [ %131, %121 ], [ %119, %118 ]
  %123 = phi i32 [ %130, %121 ], [ %120, %118 ]
  %124 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 6, i64 %122
  %125 = load i32, i32* %124, align 4, !tbaa !43
  %126 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 5, i64 %122
  %127 = load i32, i32* %126, align 4, !tbaa !43
  %128 = mul nsw i32 %127, %125
  %129 = mul nsw i32 %128, %20
  %130 = add nsw i32 %129, %123
  %131 = add nuw nsw i64 %122, 1
  %132 = icmp slt i64 %122, %21
  br i1 %132, label %121, label %133, !llvm.loop !685

133:                                              ; preds = %121, %108, %6
  %134 = phi i32 [ 0, %6 ], [ %116, %108 ], [ %130, %121 ]
  %135 = sext i32 %134 to i64
  %136 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %135, i32 4) #9
  %137 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 10
  %138 = load i32, i32* %137, align 4, !tbaa !216
  %139 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 11
  %140 = load i32, i32* %139, align 8, !tbaa !217
  %141 = mul i32 %140, %138
  %142 = sext i32 %141 to i64
  %143 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %142, i32 4) #9
  %144 = icmp sgt i32 %141, 0
  br i1 %144, label %145, label %305

145:                                              ; preds = %133
  %146 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 21
  %147 = load %struct.opj_tile_info*, %struct.opj_tile_info** %146, align 8, !tbaa !143
  %148 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 13
  %149 = load i32, i32* %148, align 8
  %150 = icmp sgt i32 %149, 0
  %151 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 5
  %152 = load i32, i32* %151, align 8
  %153 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 12
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %152, 0
  %156 = sext i32 %154 to i64
  %157 = sext i32 %149 to i64
  %158 = zext i32 %149 to i64
  %159 = zext i32 %149 to i64
  %160 = zext i32 %141 to i64
  br label %161

161:                                              ; preds = %302, %145
  %162 = phi i64 [ 0, %145 ], [ %303, %302 ]
  %163 = phi <2 x i32> [ <i32 -1, i32 -1>, %145 ], [ %173, %302 ]
  %164 = load i32, i32* %13, align 4, !tbaa !43
  %165 = add i32 %164, 1
  %166 = icmp slt i32 %164, 0
  br i1 %166, label %171, label %167

167:                                              ; preds = %161
  %168 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %147, i64 %162, i32 9
  %169 = sext i32 %165 to i64
  %170 = zext i32 %165 to i64
  br label %175

171:                                              ; preds = %291, %161
  %172 = phi i32 [ 0, %161 ], [ %292, %291 ]
  %173 = phi <2 x i32> [ %163, %161 ], [ %293, %291 ]
  %174 = icmp slt i32 %172, %134
  br i1 %174, label %296, label %302

175:                                              ; preds = %291, %167
  %176 = phi i64 [ %294, %291 ], [ 0, %167 ]
  %177 = phi i32 [ %292, %291 ], [ 0, %167 ]
  %178 = phi <2 x i32> [ %293, %291 ], [ %163, %167 ]
  %179 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %147, i64 %162, i32 5, i64 %176
  %180 = load i32, i32* %179, align 4, !tbaa !43
  %181 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %147, i64 %162, i32 6, i64 %176
  %182 = load i32, i32* %181, align 4, !tbaa !43
  %183 = mul i32 %182, %180
  %184 = icmp sgt i32 %183, 0
  br i1 %184, label %185, label %291

185:                                              ; preds = %175
  %186 = mul nsw i32 %183, %1
  %187 = trunc i64 %176 to i32
  %188 = mul nsw i32 %183, %187
  %189 = mul nsw i64 %176, %157
  %190 = sext i32 %183 to i64
  %191 = sext i32 %188 to i64
  %192 = sext i32 %186 to i64
  %193 = zext i32 %183 to i64
  br label %194

194:                                              ; preds = %286, %185
  %195 = phi i64 [ 0, %185 ], [ %289, %286 ]
  %196 = phi i32 [ %177, %185 ], [ %287, %286 ]
  %197 = phi <2 x i32> [ %178, %185 ], [ %288, %286 ]
  br i1 %150, label %198, label %286

198:                                              ; preds = %194
  %199 = add nsw i64 %195, %192
  %200 = mul nsw i64 %199, %169
  %201 = add nsw i64 %200, %176
  %202 = mul nsw i64 %201, %157
  %203 = mul nsw i64 %195, %156
  %204 = add nsw i64 %203, %12
  %205 = mul nsw i64 %204, %169
  %206 = add nsw i64 %205, %176
  %207 = mul nsw i64 %206, %157
  %208 = add nsw i64 %195, %191
  %209 = mul nsw i64 %208, %156
  %210 = add nsw i64 %209, %12
  %211 = mul nsw i64 %210, %157
  br i1 %155, label %212, label %235

212:                                              ; preds = %212, %198
  %213 = phi i64 [ %233, %212 ], [ 0, %198 ]
  %214 = load %struct.opj_packet_info*, %struct.opj_packet_info** %168, align 8, !tbaa !355
  %215 = mul nsw i64 %213, %169
  %216 = add nsw i64 %215, %176
  %217 = mul nsw i64 %216, %156
  %218 = add nsw i64 %217, %12
  %219 = mul nsw i64 %218, %190
  %220 = add nsw i64 %219, %195
  %221 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %214, i64 %220, i32 0
  %222 = bitcast i32* %221 to <2 x i32>*
  %223 = load <2 x i32>, <2 x i32>* %222, align 8
  %224 = extractelement <2 x i32> %223, i32 0
  %225 = sub nsw i32 %224, %0
  %226 = sext i32 %225 to i64
  %227 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %226, i32 4) #9
  %228 = extractelement <2 x i32> %223, i32 1
  %229 = add i32 %228, 1
  %230 = sub i32 %229, %224
  %231 = sext i32 %230 to i64
  %232 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %231, i32 4) #9
  %233 = add nuw nsw i64 %213, 1
  %234 = icmp eq i64 %233, %159
  br i1 %234, label %282, label %212

235:                                              ; preds = %269, %198
  %236 = phi i64 [ %280, %269 ], [ 0, %198 ]
  %237 = phi <2 x i32> [ %270, %269 ], [ %197, %198 ]
  switch i32 %152, label %266 [
    i32 4, label %260
    i32 1, label %238
    i32 2, label %248
    i32 3, label %254
  ]

238:                                              ; preds = %235
  %239 = load %struct.opj_packet_info*, %struct.opj_packet_info** %168, align 8, !tbaa !355
  %240 = add nsw i64 %236, %189
  %241 = mul nsw i64 %240, %156
  %242 = add nsw i64 %241, %12
  %243 = mul nsw i64 %242, %190
  %244 = add nsw i64 %243, %195
  %245 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %239, i64 %244, i32 0
  %246 = bitcast i32* %245 to <2 x i32>*
  %247 = load <2 x i32>, <2 x i32>* %246, align 8
  br label %269

248:                                              ; preds = %235
  %249 = load %struct.opj_packet_info*, %struct.opj_packet_info** %168, align 8, !tbaa !355
  %250 = add nsw i64 %211, %236
  %251 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %249, i64 %250, i32 0
  %252 = bitcast i32* %251 to <2 x i32>*
  %253 = load <2 x i32>, <2 x i32>* %252, align 8
  br label %269

254:                                              ; preds = %235
  %255 = load %struct.opj_packet_info*, %struct.opj_packet_info** %168, align 8, !tbaa !355
  %256 = add nsw i64 %207, %236
  %257 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %255, i64 %256, i32 0
  %258 = bitcast i32* %257 to <2 x i32>*
  %259 = load <2 x i32>, <2 x i32>* %258, align 8
  br label %269

260:                                              ; preds = %235
  %261 = load %struct.opj_packet_info*, %struct.opj_packet_info** %168, align 8, !tbaa !355
  %262 = add nsw i64 %236, %202
  %263 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %261, i64 %262, i32 0
  %264 = bitcast i32* %263 to <2 x i32>*
  %265 = load <2 x i32>, <2 x i32>* %264, align 8
  br label %269

266:                                              ; preds = %235
  %267 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !24
  %268 = tail call i64 @fwrite(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.110, i64 0, i64 0), i64 24, i64 1, %struct._IO_FILE* %267) #11
  br label %269

269:                                              ; preds = %266, %260, %254, %248, %238
  %270 = phi <2 x i32> [ %237, %266 ], [ %265, %260 ], [ %259, %254 ], [ %253, %248 ], [ %247, %238 ]
  %271 = extractelement <2 x i32> %270, i32 0
  %272 = sub nsw i32 %271, %0
  %273 = sext i32 %272 to i64
  %274 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %273, i32 4) #9
  %275 = extractelement <2 x i32> %270, i32 1
  %276 = add i32 %275, 1
  %277 = sub i32 %276, %271
  %278 = sext i32 %277 to i64
  %279 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %278, i32 4) #9
  %280 = add nuw nsw i64 %236, 1
  %281 = icmp eq i64 %280, %158
  br i1 %281, label %284, label %235

282:                                              ; preds = %212
  %283 = add i32 %149, %196
  br label %286

284:                                              ; preds = %269
  %285 = add i32 %149, %196
  br label %286

286:                                              ; preds = %284, %282, %194
  %287 = phi i32 [ %196, %194 ], [ %283, %282 ], [ %285, %284 ]
  %288 = phi <2 x i32> [ %197, %194 ], [ %223, %282 ], [ %270, %284 ]
  %289 = add nuw nsw i64 %195, 1
  %290 = icmp eq i64 %289, %193
  br i1 %290, label %291, label %194

291:                                              ; preds = %286, %175
  %292 = phi i32 [ %177, %175 ], [ %287, %286 ]
  %293 = phi <2 x i32> [ %178, %175 ], [ %288, %286 ]
  %294 = add nuw nsw i64 %176, 1
  %295 = icmp eq i64 %294, %170
  br i1 %295, label %171, label %175

296:                                              ; preds = %296, %171
  %297 = phi i32 [ %300, %296 ], [ %172, %171 ]
  %298 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 0, i32 4) #9
  %299 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 0, i32 4) #9
  %300 = add nsw i32 %297, 1
  %301 = icmp eq i32 %300, %134
  br i1 %301, label %302, label %296

302:                                              ; preds = %296, %171
  %303 = add nuw nsw i64 %162, 1
  %304 = icmp eq i64 %303, %160
  br i1 %304, label %305, label %161

305:                                              ; preds = %302, %133
  %306 = tail call i32 @cio_tell(%struct.opj_cio* %5) #9
  %307 = sub nsw i32 %306, %7
  tail call void @cio_seek(%struct.opj_cio* %5, i32 %7) #9
  %308 = sext i32 %307 to i64
  %309 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %308, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %5, i32 %306) #9
  ret i32 %307
}

; Function Attrs: nounwind uwtable
define i32 @write_ppix(i32, %struct.opj_codestream_info* byval nocapture readonly align 8, i32, i32, %struct.opj_cio*) #0 {
  %6 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %1, i64 0, i32 12
  %7 = load i32, i32* %6, align 4, !tbaa !215
  %8 = sext i32 %7 to i64
  %9 = tail call noalias i8* @calloc(i64 %8, i64 12) #9
  %10 = bitcast i8* %9 to %struct.opj_jp2_comps*
  %11 = icmp sgt i32 %7, 0
  %12 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  tail call void @cio_skip(%struct.opj_cio* %4, i32 4) #9
  %13 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 1886415224, i32 4) #9
  tail call void @write_manf(i32 0, i32 %7, %struct.opj_jp2_comps* %10, %struct.opj_cio* %4) #9
  br i1 %11, label %14, label %46

14:                                               ; preds = %5
  %15 = zext i32 %7 to i64
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %22, %16 ]
  %18 = trunc i64 %17 to i32
  %19 = tail call i32 @write_ppixfaix(i32 %0, i32 %18, %struct.opj_codestream_info* byval nonnull align 8 %1, i32 undef, i32 %3, %struct.opj_cio* %4)
  %20 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %10, i64 %17, i32 0
  store i32 %19, i32* %20, align 4, !tbaa !375
  %21 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %10, i64 %17, i32 1
  store i32 1717660024, i32* %21, align 4, !tbaa !373
  %22 = add nuw nsw i64 %17, 1
  %23 = icmp eq i64 %22, %15
  br i1 %23, label %26, label %16

24:                                               ; preds = %46, %41
  %25 = phi i32 [ %43, %41 ], [ %54, %46 ]
  tail call void @free(i8* %9) #9
  ret i32 %25

26:                                               ; preds = %16
  %27 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  %28 = sub nsw i32 %27, %12
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %12) #9
  %29 = sext i32 %28 to i64
  %30 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %29, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %27) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %12) #9
  %31 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  tail call void @cio_skip(%struct.opj_cio* %4, i32 4) #9
  %32 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 1886415224, i32 4) #9
  tail call void @write_manf(i32 1, i32 %7, %struct.opj_jp2_comps* nonnull %10, %struct.opj_cio* %4) #9
  br label %33

33:                                               ; preds = %33, %26
  %34 = phi i64 [ 0, %26 ], [ %39, %33 ]
  %35 = trunc i64 %34 to i32
  %36 = tail call i32 @write_ppixfaix(i32 %0, i32 %35, %struct.opj_codestream_info* byval nonnull align 8 %1, i32 undef, i32 %3, %struct.opj_cio* %4)
  %37 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %10, i64 %34, i32 0
  store i32 %36, i32* %37, align 4, !tbaa !375
  %38 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %10, i64 %34, i32 1
  store i32 1717660024, i32* %38, align 4, !tbaa !373
  %39 = add nuw nsw i64 %34, 1
  %40 = icmp eq i64 %39, %22
  br i1 %40, label %41, label %33

41:                                               ; preds = %33
  %42 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  %43 = sub nsw i32 %42, %31
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %31) #9
  %44 = sext i32 %43 to i64
  %45 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %44, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %42) #9
  br label %24

46:                                               ; preds = %5
  %47 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  %48 = sub nsw i32 %47, %12
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %12) #9
  %49 = sext i32 %48 to i64
  %50 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %49, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %47) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %12) #9
  %51 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  tail call void @cio_skip(%struct.opj_cio* %4, i32 4) #9
  %52 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 1886415224, i32 4) #9
  tail call void @write_manf(i32 1, i32 %7, %struct.opj_jp2_comps* %10, %struct.opj_cio* %4) #9
  %53 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  %54 = sub nsw i32 %53, %51
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %51) #9
  %55 = sext i32 %54 to i64
  %56 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %55, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %53) #9
  br label %24
}

; Function Attrs: nounwind uwtable
define i32 @write_ppixfaix(i32, i32, %struct.opj_codestream_info* byval nocapture readonly align 8, i32, i32, %struct.opj_cio*) #0 {
  %7 = tail call i32 @cio_tell(%struct.opj_cio* %5) #9
  tail call void @cio_skip(%struct.opj_cio* %5, i32 4) #9
  %8 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 1717660024, i32 4) #9
  %9 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 0, i32 1) #9
  %10 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 14
  %11 = load i32*, i32** %10, align 8, !tbaa !224
  %12 = sext i32 %1 to i64
  %13 = getelementptr inbounds i32, i32* %11, i64 %12
  %14 = load i32, i32* %13, align 4, !tbaa !43
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %133, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 21
  %18 = load %struct.opj_tile_info*, %struct.opj_tile_info** %17, align 8, !tbaa !143
  %19 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 13
  %20 = load i32, i32* %19, align 8, !tbaa !223
  %21 = sext i32 %14 to i64
  %22 = add nsw i64 %21, 1
  %23 = icmp ult i64 %22, 8
  br i1 %23, label %118, label %24

24:                                               ; preds = %16
  %25 = and i64 %22, -8
  %26 = insertelement <4 x i32> undef, i32 %20, i32 0
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = insertelement <4 x i32> undef, i32 %20, i32 0
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> zeroinitializer
  %30 = add nsw i64 %25, -8
  %31 = lshr exact i64 %30, 3
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 1
  %34 = icmp eq i64 %30, 0
  br i1 %34, label %82, label %35

35:                                               ; preds = %24
  %36 = sub nuw nsw i64 %32, %33
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi i64 [ 0, %35 ], [ %79, %37 ]
  %39 = phi <4 x i32> [ zeroinitializer, %35 ], [ %77, %37 ]
  %40 = phi <4 x i32> [ zeroinitializer, %35 ], [ %78, %37 ]
  %41 = phi i64 [ %36, %35 ], [ %80, %37 ]
  %42 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 6, i64 %38
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4, !tbaa !43
  %45 = getelementptr inbounds i32, i32* %42, i64 4
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4, !tbaa !43
  %48 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 5, i64 %38
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4, !tbaa !43
  %51 = getelementptr inbounds i32, i32* %48, i64 4
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4, !tbaa !43
  %54 = mul nsw <4 x i32> %50, %44
  %55 = mul nsw <4 x i32> %53, %47
  %56 = mul nsw <4 x i32> %54, %27
  %57 = mul nsw <4 x i32> %55, %29
  %58 = add nsw <4 x i32> %56, %39
  %59 = add nsw <4 x i32> %57, %40
  %60 = or i64 %38, 8
  %61 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 6, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4, !tbaa !43
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !tbaa !43
  %67 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 5, i64 %60
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !tbaa !43
  %70 = getelementptr inbounds i32, i32* %67, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !tbaa !43
  %73 = mul nsw <4 x i32> %69, %63
  %74 = mul nsw <4 x i32> %72, %66
  %75 = mul nsw <4 x i32> %73, %27
  %76 = mul nsw <4 x i32> %74, %29
  %77 = add nsw <4 x i32> %75, %58
  %78 = add nsw <4 x i32> %76, %59
  %79 = add i64 %38, 16
  %80 = add i64 %41, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %37, !llvm.loop !686

82:                                               ; preds = %37, %24
  %83 = phi <4 x i32> [ undef, %24 ], [ %77, %37 ]
  %84 = phi <4 x i32> [ undef, %24 ], [ %78, %37 ]
  %85 = phi i64 [ 0, %24 ], [ %79, %37 ]
  %86 = phi <4 x i32> [ zeroinitializer, %24 ], [ %77, %37 ]
  %87 = phi <4 x i32> [ zeroinitializer, %24 ], [ %78, %37 ]
  %88 = icmp eq i64 %33, 0
  br i1 %88, label %108, label %89

89:                                               ; preds = %82
  %90 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 6, i64 %85
  %91 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 5, i64 %85
  %92 = getelementptr inbounds i32, i32* %91, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !tbaa !43
  %95 = getelementptr inbounds i32, i32* %90, i64 4
  %96 = bitcast i32* %95 to <4 x i32>*
  %97 = load <4 x i32>, <4 x i32>* %96, align 4, !tbaa !43
  %98 = mul nsw <4 x i32> %94, %97
  %99 = mul nsw <4 x i32> %98, %29
  %100 = add nsw <4 x i32> %99, %87
  %101 = bitcast i32* %91 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4, !tbaa !43
  %103 = bitcast i32* %90 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !tbaa !43
  %105 = mul nsw <4 x i32> %102, %104
  %106 = mul nsw <4 x i32> %105, %27
  %107 = add nsw <4 x i32> %106, %86
  br label %108

108:                                              ; preds = %89, %82
  %109 = phi <4 x i32> [ %83, %82 ], [ %107, %89 ]
  %110 = phi <4 x i32> [ %84, %82 ], [ %100, %89 ]
  %111 = add <4 x i32> %110, %109
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %113 = add <4 x i32> %111, %112
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %115 = add <4 x i32> %113, %114
  %116 = extractelement <4 x i32> %115, i32 0
  %117 = icmp eq i64 %22, %25
  br i1 %117, label %133, label %118

118:                                              ; preds = %108, %16
  %119 = phi i64 [ 0, %16 ], [ %25, %108 ]
  %120 = phi i32 [ 0, %16 ], [ %116, %108 ]
  br label %121

121:                                              ; preds = %121, %118
  %122 = phi i64 [ %131, %121 ], [ %119, %118 ]
  %123 = phi i32 [ %130, %121 ], [ %120, %118 ]
  %124 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 6, i64 %122
  %125 = load i32, i32* %124, align 4, !tbaa !43
  %126 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %18, i64 0, i32 5, i64 %122
  %127 = load i32, i32* %126, align 4, !tbaa !43
  %128 = mul nsw i32 %127, %125
  %129 = mul nsw i32 %128, %20
  %130 = add nsw i32 %129, %123
  %131 = add nuw nsw i64 %122, 1
  %132 = icmp slt i64 %122, %21
  br i1 %132, label %121, label %133, !llvm.loop !687

133:                                              ; preds = %121, %108, %6
  %134 = phi i32 [ 0, %6 ], [ %116, %108 ], [ %130, %121 ]
  %135 = sext i32 %134 to i64
  %136 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %135, i32 4) #9
  %137 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 10
  %138 = load i32, i32* %137, align 4, !tbaa !216
  %139 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 11
  %140 = load i32, i32* %139, align 8, !tbaa !217
  %141 = mul i32 %140, %138
  %142 = sext i32 %141 to i64
  %143 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %142, i32 4) #9
  %144 = icmp sgt i32 %141, 0
  br i1 %144, label %145, label %314

145:                                              ; preds = %133
  %146 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 21
  %147 = load %struct.opj_tile_info*, %struct.opj_tile_info** %146, align 8, !tbaa !143
  %148 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 13
  %149 = load i32, i32* %148, align 8
  %150 = icmp sgt i32 %149, 0
  %151 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 5
  %152 = load i32, i32* %151, align 8
  %153 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 12
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %152, 0
  %156 = sext i32 %154 to i64
  %157 = sext i32 %149 to i64
  %158 = zext i32 %149 to i64
  %159 = zext i32 %149 to i64
  %160 = zext i32 %141 to i64
  br label %161

161:                                              ; preds = %311, %145
  %162 = phi i64 [ 0, %145 ], [ %312, %311 ]
  %163 = phi i32 [ -1, %145 ], [ %174, %311 ]
  %164 = phi i32 [ -1, %145 ], [ %173, %311 ]
  %165 = load i32, i32* %13, align 4, !tbaa !43
  %166 = add i32 %165, 1
  %167 = icmp slt i32 %165, 0
  br i1 %167, label %172, label %168

168:                                              ; preds = %161
  %169 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %147, i64 %162, i32 9
  %170 = sext i32 %166 to i64
  %171 = zext i32 %166 to i64
  br label %177

172:                                              ; preds = %299, %161
  %173 = phi i32 [ %164, %161 ], [ %300, %299 ]
  %174 = phi i32 [ %163, %161 ], [ %301, %299 ]
  %175 = phi i32 [ 0, %161 ], [ %302, %299 ]
  %176 = icmp slt i32 %175, %134
  br i1 %176, label %305, label %311

177:                                              ; preds = %299, %168
  %178 = phi i64 [ %303, %299 ], [ 0, %168 ]
  %179 = phi i32 [ %302, %299 ], [ 0, %168 ]
  %180 = phi i32 [ %301, %299 ], [ %163, %168 ]
  %181 = phi i32 [ %300, %299 ], [ %164, %168 ]
  %182 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %147, i64 %162, i32 5, i64 %178
  %183 = load i32, i32* %182, align 4, !tbaa !43
  %184 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %147, i64 %162, i32 6, i64 %178
  %185 = load i32, i32* %184, align 4, !tbaa !43
  %186 = mul i32 %185, %183
  %187 = icmp sgt i32 %186, 0
  br i1 %187, label %188, label %299

188:                                              ; preds = %177
  %189 = mul nsw i32 %186, %1
  %190 = trunc i64 %178 to i32
  %191 = mul nsw i32 %186, %190
  %192 = mul nsw i64 %178, %157
  %193 = sext i32 %186 to i64
  %194 = sext i32 %191 to i64
  %195 = sext i32 %189 to i64
  %196 = zext i32 %186 to i64
  br label %197

197:                                              ; preds = %293, %188
  %198 = phi i64 [ 0, %188 ], [ %297, %293 ]
  %199 = phi i32 [ %179, %188 ], [ %296, %293 ]
  %200 = phi i32 [ %180, %188 ], [ %295, %293 ]
  %201 = phi i32 [ %181, %188 ], [ %294, %293 ]
  br i1 %150, label %202, label %293

202:                                              ; preds = %197
  %203 = add nsw i64 %198, %195
  %204 = mul nsw i64 %203, %170
  %205 = add nsw i64 %204, %178
  %206 = mul nsw i64 %205, %157
  %207 = mul nsw i64 %198, %156
  %208 = add nsw i64 %207, %12
  %209 = mul nsw i64 %208, %170
  %210 = add nsw i64 %209, %178
  %211 = mul nsw i64 %210, %157
  %212 = add nsw i64 %198, %194
  %213 = mul nsw i64 %212, %156
  %214 = add nsw i64 %213, %12
  %215 = mul nsw i64 %214, %157
  br i1 %155, label %216, label %238

216:                                              ; preds = %216, %202
  %217 = phi i64 [ %236, %216 ], [ 0, %202 ]
  %218 = load %struct.opj_packet_info*, %struct.opj_packet_info** %169, align 8, !tbaa !355
  %219 = mul nsw i64 %217, %170
  %220 = add nsw i64 %219, %178
  %221 = mul nsw i64 %220, %156
  %222 = add nsw i64 %221, %12
  %223 = mul nsw i64 %222, %193
  %224 = add nsw i64 %223, %198
  %225 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %218, i64 %224, i32 0
  %226 = load i32, i32* %225, align 8
  %227 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %218, i64 %224, i32 2
  %228 = load i32, i32* %227, align 8
  %229 = sub nsw i32 %226, %0
  %230 = sext i32 %229 to i64
  %231 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %230, i32 4) #9
  %232 = add i32 %228, 1
  %233 = sub i32 %232, %226
  %234 = sext i32 %233 to i64
  %235 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %234, i32 4) #9
  %236 = add nuw nsw i64 %217, 1
  %237 = icmp eq i64 %236, %159
  br i1 %237, label %289, label %216

238:                                              ; preds = %277, %202
  %239 = phi i64 [ %287, %277 ], [ 0, %202 ]
  %240 = phi i32 [ %279, %277 ], [ %200, %202 ]
  %241 = phi i32 [ %278, %277 ], [ %201, %202 ]
  switch i32 %152, label %274 [
    i32 4, label %267
    i32 1, label %242
    i32 2, label %253
    i32 3, label %260
  ]

242:                                              ; preds = %238
  %243 = load %struct.opj_packet_info*, %struct.opj_packet_info** %169, align 8, !tbaa !355
  %244 = add nsw i64 %239, %192
  %245 = mul nsw i64 %244, %156
  %246 = add nsw i64 %245, %12
  %247 = mul nsw i64 %246, %193
  %248 = add nsw i64 %247, %198
  %249 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %243, i64 %248, i32 0
  %250 = load i32, i32* %249, align 8
  %251 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %243, i64 %248, i32 2
  %252 = load i32, i32* %251, align 8
  br label %277

253:                                              ; preds = %238
  %254 = load %struct.opj_packet_info*, %struct.opj_packet_info** %169, align 8, !tbaa !355
  %255 = add nsw i64 %215, %239
  %256 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %254, i64 %255, i32 0
  %257 = load i32, i32* %256, align 8
  %258 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %254, i64 %255, i32 2
  %259 = load i32, i32* %258, align 8
  br label %277

260:                                              ; preds = %238
  %261 = load %struct.opj_packet_info*, %struct.opj_packet_info** %169, align 8, !tbaa !355
  %262 = add nsw i64 %211, %239
  %263 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %261, i64 %262, i32 0
  %264 = load i32, i32* %263, align 8
  %265 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %261, i64 %262, i32 2
  %266 = load i32, i32* %265, align 8
  br label %277

267:                                              ; preds = %238
  %268 = load %struct.opj_packet_info*, %struct.opj_packet_info** %169, align 8, !tbaa !355
  %269 = add nsw i64 %239, %206
  %270 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %268, i64 %269, i32 0
  %271 = load i32, i32* %270, align 8
  %272 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %268, i64 %269, i32 2
  %273 = load i32, i32* %272, align 8
  br label %277

274:                                              ; preds = %238
  %275 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !24
  %276 = tail call i64 @fwrite(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.113, i64 0, i64 0), i64 24, i64 1, %struct._IO_FILE* %275) #11
  br label %277

277:                                              ; preds = %274, %267, %260, %253, %242
  %278 = phi i32 [ %241, %274 ], [ %273, %267 ], [ %266, %260 ], [ %259, %253 ], [ %252, %242 ]
  %279 = phi i32 [ %240, %274 ], [ %271, %267 ], [ %264, %260 ], [ %257, %253 ], [ %250, %242 ]
  %280 = sub nsw i32 %279, %0
  %281 = sext i32 %280 to i64
  %282 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %281, i32 4) #9
  %283 = add i32 %278, 1
  %284 = sub i32 %283, %279
  %285 = sext i32 %284 to i64
  %286 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %285, i32 4) #9
  %287 = add nuw nsw i64 %239, 1
  %288 = icmp eq i64 %287, %158
  br i1 %288, label %291, label %238

289:                                              ; preds = %216
  %290 = add i32 %149, %199
  br label %293

291:                                              ; preds = %277
  %292 = add i32 %149, %199
  br label %293

293:                                              ; preds = %291, %289, %197
  %294 = phi i32 [ %201, %197 ], [ %228, %289 ], [ %278, %291 ]
  %295 = phi i32 [ %200, %197 ], [ %226, %289 ], [ %279, %291 ]
  %296 = phi i32 [ %199, %197 ], [ %290, %289 ], [ %292, %291 ]
  %297 = add nuw nsw i64 %198, 1
  %298 = icmp eq i64 %297, %196
  br i1 %298, label %299, label %197

299:                                              ; preds = %293, %177
  %300 = phi i32 [ %181, %177 ], [ %294, %293 ]
  %301 = phi i32 [ %180, %177 ], [ %295, %293 ]
  %302 = phi i32 [ %179, %177 ], [ %296, %293 ]
  %303 = add nuw nsw i64 %178, 1
  %304 = icmp eq i64 %303, %171
  br i1 %304, label %172, label %177

305:                                              ; preds = %305, %172
  %306 = phi i32 [ %309, %305 ], [ %175, %172 ]
  %307 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 0, i32 4) #9
  %308 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 0, i32 4) #9
  %309 = add nsw i32 %306, 1
  %310 = icmp eq i32 %309, %134
  br i1 %310, label %311, label %305

311:                                              ; preds = %305, %172
  %312 = add nuw nsw i64 %162, 1
  %313 = icmp eq i64 %312, %160
  br i1 %313, label %314, label %161

314:                                              ; preds = %311, %133
  %315 = tail call i32 @cio_tell(%struct.opj_cio* %5) #9
  %316 = sub nsw i32 %315, %7
  tail call void @cio_seek(%struct.opj_cio* %5, i32 %7) #9
  %317 = sext i32 %316 to i64
  %318 = tail call i32 @cio_write(%struct.opj_cio* %5, i64 %317, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %5, i32 %315) #9
  ret i32 %316
}

; Function Attrs: nounwind uwtable
define i32 @write_thix(i32, %struct.opj_codestream_info* byval nocapture readonly align 8, %struct.opj_cio*) #0 {
  %4 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %1, i64 0, i32 10
  %5 = load i32, i32* %4, align 4, !tbaa !216
  %6 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %1, i64 0, i32 11
  %7 = load i32, i32* %6, align 8, !tbaa !217
  %8 = mul i32 %7, %5
  %9 = sext i32 %8 to i64
  %10 = tail call noalias i8* @calloc(i64 %9, i64 12) #9
  %11 = bitcast i8* %10 to %struct.opj_jp2_comps*
  %12 = icmp sgt i32 %8, 0
  %13 = tail call i32 @cio_tell(%struct.opj_cio* %2) #9
  tail call void @cio_skip(%struct.opj_cio* %2, i32 4) #9
  %14 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 1952999800, i32 4) #9
  tail call void @write_manf(i32 0, i32 %8, %struct.opj_jp2_comps* %11, %struct.opj_cio* %2) #9
  br i1 %12, label %15, label %47

15:                                               ; preds = %3
  %16 = zext i32 %8 to i64
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 0, %15 ], [ %23, %17 ]
  %19 = trunc i64 %18 to i32
  %20 = tail call i32 @write_tilemhix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %1, i32 %19, %struct.opj_cio* %2)
  %21 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %11, i64 %18, i32 0
  store i32 %20, i32* %21, align 4, !tbaa !375
  %22 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %11, i64 %18, i32 1
  store i32 1835559288, i32* %22, align 4, !tbaa !373
  %23 = add nuw nsw i64 %18, 1
  %24 = icmp eq i64 %23, %16
  br i1 %24, label %27, label %17

25:                                               ; preds = %47, %42
  %26 = phi i32 [ %44, %42 ], [ %55, %47 ]
  tail call void @free(i8* %10) #9
  ret i32 %26

27:                                               ; preds = %17
  %28 = tail call i32 @cio_tell(%struct.opj_cio* %2) #9
  %29 = sub nsw i32 %28, %13
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %13) #9
  %30 = sext i32 %29 to i64
  %31 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %30, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %28) #9
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %13) #9
  %32 = tail call i32 @cio_tell(%struct.opj_cio* %2) #9
  tail call void @cio_skip(%struct.opj_cio* %2, i32 4) #9
  %33 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 1952999800, i32 4) #9
  tail call void @write_manf(i32 1, i32 %8, %struct.opj_jp2_comps* nonnull %11, %struct.opj_cio* %2) #9
  br label %34

34:                                               ; preds = %34, %27
  %35 = phi i64 [ 0, %27 ], [ %40, %34 ]
  %36 = trunc i64 %35 to i32
  %37 = tail call i32 @write_tilemhix(i32 %0, %struct.opj_codestream_info* byval nonnull align 8 %1, i32 %36, %struct.opj_cio* %2)
  %38 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %11, i64 %35, i32 0
  store i32 %37, i32* %38, align 4, !tbaa !375
  %39 = getelementptr inbounds %struct.opj_jp2_comps, %struct.opj_jp2_comps* %11, i64 %35, i32 1
  store i32 1835559288, i32* %39, align 4, !tbaa !373
  %40 = add nuw nsw i64 %35, 1
  %41 = icmp eq i64 %40, %23
  br i1 %41, label %42, label %34

42:                                               ; preds = %34
  %43 = tail call i32 @cio_tell(%struct.opj_cio* %2) #9
  %44 = sub nsw i32 %43, %32
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %32) #9
  %45 = sext i32 %44 to i64
  %46 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %45, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %43) #9
  br label %25

47:                                               ; preds = %3
  %48 = tail call i32 @cio_tell(%struct.opj_cio* %2) #9
  %49 = sub nsw i32 %48, %13
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %13) #9
  %50 = sext i32 %49 to i64
  %51 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %50, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %48) #9
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %13) #9
  %52 = tail call i32 @cio_tell(%struct.opj_cio* %2) #9
  tail call void @cio_skip(%struct.opj_cio* %2, i32 4) #9
  %53 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 1952999800, i32 4) #9
  tail call void @write_manf(i32 1, i32 %8, %struct.opj_jp2_comps* %11, %struct.opj_cio* %2) #9
  %54 = tail call i32 @cio_tell(%struct.opj_cio* %2) #9
  %55 = sub nsw i32 %54, %52
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %52) #9
  %56 = sext i32 %55 to i64
  %57 = tail call i32 @cio_write(%struct.opj_cio* %2, i64 %56, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %2, i32 %54) #9
  br label %25
}

; Function Attrs: nounwind uwtable
define i32 @write_tilemhix(i32, %struct.opj_codestream_info* byval nocapture readonly align 8, i32, %struct.opj_cio*) #0 {
  %5 = tail call i32 @cio_tell(%struct.opj_cio* %3) #9
  tail call void @cio_skip(%struct.opj_cio* %3, i32 4) #9
  %6 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 1835559288, i32 4) #9
  %7 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %1, i64 0, i32 21
  %8 = load %struct.opj_tile_info*, %struct.opj_tile_info** %7, align 8, !tbaa !143
  %9 = sext i32 %2 to i64
  %10 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %8, i64 %9, i32 16
  %11 = load %struct.opj_tp_info*, %struct.opj_tp_info** %10, align 8
  %12 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %11, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = sub i32 1, %13
  %17 = add i32 %16, %15
  %18 = sext i32 %17 to i64
  %19 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 %18, i32 8) #9
  %20 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %8, i64 %9, i32 13
  %21 = load %struct.opj_marker_info_t*, %struct.opj_marker_info_t** %20, align 8, !tbaa !344
  %22 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %8, i64 %9, i32 12
  %23 = load i32, i32* %22, align 8, !tbaa !345
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %45

25:                                               ; preds = %25, %4
  %26 = phi i64 [ %41, %25 ], [ 0, %4 ]
  %27 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %21, i64 %26, i32 0
  %28 = load i16, i16* %27, align 4, !tbaa !334
  %29 = zext i16 %28 to i64
  %30 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 %29, i32 2) #9
  %31 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 0, i32 2) #9
  %32 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %21, i64 %26, i32 1
  %33 = load i32, i32* %32, align 4, !tbaa !337
  %34 = sub nsw i32 %33, %0
  %35 = sext i32 %34 to i64
  %36 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 %35, i32 8) #9
  %37 = getelementptr inbounds %struct.opj_marker_info_t, %struct.opj_marker_info_t* %21, i64 %26, i32 2
  %38 = load i32, i32* %37, align 4, !tbaa !338
  %39 = sext i32 %38 to i64
  %40 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 %39, i32 2) #9
  %41 = add nuw nsw i64 %26, 1
  %42 = load i32, i32* %22, align 8, !tbaa !345
  %43 = sext i32 %42 to i64
  %44 = icmp slt i64 %41, %43
  br i1 %44, label %25, label %45

45:                                               ; preds = %25, %4
  %46 = tail call i32 @cio_tell(%struct.opj_cio* %3) #9
  %47 = sub nsw i32 %46, %5
  tail call void @cio_seek(%struct.opj_cio* %3, i32 %5) #9
  %48 = sext i32 %47 to i64
  %49 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 %48, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %3, i32 %46) #9
  ret i32 %47
}

; Function Attrs: nounwind uwtable
define i32 @write_tpix(i32, %struct.opj_codestream_info* byval nocapture readonly align 8, i32, %struct.opj_cio*) #0 {
  %5 = tail call i32 @cio_tell(%struct.opj_cio* %3) #9
  tail call void @cio_skip(%struct.opj_cio* %3, i32 4) #9
  %6 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 1953524088, i32 4) #9
  %7 = tail call i32 @write_tpixfaix(i32 %0, i32 0, %struct.opj_codestream_info* byval nonnull align 8 %1, i32 %2, %struct.opj_cio* %3)
  %8 = tail call i32 @cio_tell(%struct.opj_cio* %3) #9
  %9 = sub nsw i32 %8, %5
  tail call void @cio_seek(%struct.opj_cio* %3, i32 %5) #9
  %10 = sext i32 %9 to i64
  %11 = tail call i32 @cio_write(%struct.opj_cio* %3, i64 %10, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %3, i32 %8) #9
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define i32 @write_tpixfaix(i32, i32, %struct.opj_codestream_info* byval nocapture readonly align 8, i32, %struct.opj_cio*) #0 {
  %6 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 10
  %7 = load i32, i32* %6, align 4, !tbaa !216
  %8 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 11
  %9 = load i32, i32* %8, align 8, !tbaa !217
  %10 = mul i32 %9, %7
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %5
  %13 = sext i32 %10 to i64
  br label %65

14:                                               ; preds = %5
  %15 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 21
  %16 = load %struct.opj_tile_info*, %struct.opj_tile_info** %15, align 8, !tbaa !143
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = and i64 %17, 3
  %20 = icmp ult i64 %18, 3
  br i1 %20, label %49, label %21

21:                                               ; preds = %14
  %22 = sub nsw i64 %17, %19
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %46, %23 ]
  %25 = phi i32 [ 0, %21 ], [ %45, %23 ]
  %26 = phi i64 [ %22, %21 ], [ %47, %23 ]
  %27 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %16, i64 %24, i32 15
  %28 = load i32, i32* %27, align 4, !tbaa !145
  %29 = icmp sgt i32 %28, %25
  %30 = select i1 %29, i32 %28, i32 %25
  %31 = or i64 %24, 1
  %32 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %16, i64 %31, i32 15
  %33 = load i32, i32* %32, align 4, !tbaa !145
  %34 = icmp sgt i32 %33, %30
  %35 = select i1 %34, i32 %33, i32 %30
  %36 = or i64 %24, 2
  %37 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %16, i64 %36, i32 15
  %38 = load i32, i32* %37, align 4, !tbaa !145
  %39 = icmp sgt i32 %38, %35
  %40 = select i1 %39, i32 %38, i32 %35
  %41 = or i64 %24, 3
  %42 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %16, i64 %41, i32 15
  %43 = load i32, i32* %42, align 4, !tbaa !145
  %44 = icmp sgt i32 %43, %40
  %45 = select i1 %44, i32 %43, i32 %40
  %46 = add nuw nsw i64 %24, 4
  %47 = add i64 %26, -4
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %23

49:                                               ; preds = %23, %14
  %50 = phi i32 [ undef, %14 ], [ %45, %23 ]
  %51 = phi i64 [ 0, %14 ], [ %46, %23 ]
  %52 = phi i32 [ 0, %14 ], [ %45, %23 ]
  %53 = icmp eq i64 %19, 0
  br i1 %53, label %65, label %54

54:                                               ; preds = %54, %49
  %55 = phi i64 [ %62, %54 ], [ %51, %49 ]
  %56 = phi i32 [ %61, %54 ], [ %52, %49 ]
  %57 = phi i64 [ %63, %54 ], [ %19, %49 ]
  %58 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %16, i64 %55, i32 15
  %59 = load i32, i32* %58, align 4, !tbaa !145
  %60 = icmp sgt i32 %59, %56
  %61 = select i1 %60, i32 %59, i32 %56
  %62 = add nuw nsw i64 %55, 1
  %63 = add i64 %57, -1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %54, !llvm.loop !688

65:                                               ; preds = %54, %49, %12
  %66 = phi i64 [ %13, %12 ], [ %17, %54 ], [ %17, %49 ]
  %67 = phi i32 [ 0, %12 ], [ %50, %49 ], [ %61, %54 ]
  %68 = icmp eq i32 %67, 1
  %69 = select i1 %68, i64 0, i64 2
  %70 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  tail call void @cio_skip(%struct.opj_cio* %4, i32 4) #9
  %71 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 1717660024, i32 4) #9
  %72 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %69, i32 1) #9
  %73 = sext i32 %67 to i64
  %74 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %73, i32 4) #9
  %75 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %66, i32 4) #9
  br i1 %11, label %76, label %163

76:                                               ; preds = %65
  %77 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 21
  %78 = load %struct.opj_tile_info*, %struct.opj_tile_info** %77, align 8
  %79 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %2, i64 0, i32 14
  %80 = load i32*, i32** %79, align 8
  %81 = sext i32 %1 to i64
  %82 = getelementptr inbounds i32, i32* %80, i64 %81
  %83 = zext i32 %10 to i64
  br label %84

84:                                               ; preds = %160, %76
  %85 = phi i64 [ 0, %76 ], [ %161, %160 ]
  %86 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %78, i64 %85, i32 15
  %87 = load i32, i32* %86, align 4, !tbaa !145
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %89, label %113

89:                                               ; preds = %84
  %90 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %78, i64 %85, i32 16
  br i1 %68, label %91, label %123

91:                                               ; preds = %91, %89
  %92 = phi i64 [ %105, %91 ], [ 0, %89 ]
  %93 = load %struct.opj_tp_info*, %struct.opj_tp_info** %90, align 8, !tbaa !147
  %94 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %93, i64 %92, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %93, i64 %92, i32 2
  %97 = load i32, i32* %96, align 4
  %98 = sub nsw i32 %95, %0
  %99 = sext i32 %98 to i64
  %100 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %99, i32 4) #9
  %101 = sub i32 1, %95
  %102 = add i32 %101, %97
  %103 = sext i32 %102 to i64
  %104 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %103, i32 4) #9
  %105 = add nuw nsw i64 %92, 1
  %106 = load i32, i32* %86, align 4, !tbaa !145
  %107 = sext i32 %106 to i64
  %108 = icmp slt i64 %105, %107
  br i1 %108, label %91, label %109

109:                                              ; preds = %91
  %110 = trunc i64 %105 to i32
  br label %113

111:                                              ; preds = %144
  %112 = trunc i64 %149 to i32
  br label %113

113:                                              ; preds = %111, %109, %84
  %114 = phi i32 [ 0, %84 ], [ %110, %109 ], [ %112, %111 ]
  %115 = icmp slt i32 %114, %67
  br i1 %115, label %116, label %160

116:                                              ; preds = %113
  br i1 %68, label %117, label %153

117:                                              ; preds = %117, %116
  %118 = phi i32 [ %121, %117 ], [ %114, %116 ]
  %119 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 0, i32 4) #9
  %120 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 0, i32 4) #9
  %121 = add nuw nsw i32 %118, 1
  %122 = icmp eq i32 %118, 0
  br i1 %122, label %160, label %117

123:                                              ; preds = %144, %89
  %124 = phi i64 [ %149, %144 ], [ 0, %89 ]
  %125 = load %struct.opj_tp_info*, %struct.opj_tp_info** %90, align 8, !tbaa !147
  %126 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %125, i64 %124, i32 0
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds %struct.opj_tp_info, %struct.opj_tp_info* %125, i64 %124, i32 2
  %129 = load i32, i32* %128, align 4
  %130 = sub nsw i32 %127, %0
  %131 = sext i32 %130 to i64
  %132 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %131, i32 4) #9
  %133 = sub i32 1, %127
  %134 = add i32 %133, %129
  %135 = sext i32 %134 to i64
  %136 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %135, i32 4) #9
  %137 = load i32, i32* %86, align 4, !tbaa !145
  %138 = icmp eq i32 %137, 1
  br i1 %138, label %139, label %142

139:                                              ; preds = %123
  %140 = load i32, i32* %82, align 4, !tbaa !43
  %141 = icmp sgt i32 %140, 1
  br i1 %141, label %144, label %142

142:                                              ; preds = %139, %123
  %143 = trunc i64 %124 to i32
  br label %144

144:                                              ; preds = %142, %139
  %145 = phi i32 [ %143, %142 ], [ %140, %139 ]
  %146 = add nsw i32 %145, 1
  %147 = sext i32 %146 to i64
  %148 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %147, i32 4) #9
  %149 = add nuw nsw i64 %124, 1
  %150 = load i32, i32* %86, align 4, !tbaa !145
  %151 = sext i32 %150 to i64
  %152 = icmp slt i64 %149, %151
  br i1 %152, label %123, label %111

153:                                              ; preds = %153, %116
  %154 = phi i32 [ %158, %153 ], [ %114, %116 ]
  %155 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 0, i32 4) #9
  %156 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 0, i32 4) #9
  %157 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 0, i32 4) #9
  %158 = add nuw nsw i32 %154, 1
  %159 = icmp eq i32 %158, %67
  br i1 %159, label %160, label %153

160:                                              ; preds = %153, %117, %113
  %161 = add nuw nsw i64 %85, 1
  %162 = icmp eq i64 %161, %83
  br i1 %162, label %163, label %84

163:                                              ; preds = %160, %65
  %164 = tail call i32 @cio_tell(%struct.opj_cio* %4) #9
  %165 = sub nsw i32 %164, %70
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %70) #9
  %166 = sext i32 %165 to i64
  %167 = tail call i32 @cio_write(%struct.opj_cio* %4, i64 %166, i32 4) #9
  tail call void @cio_seek(%struct.opj_cio* %4, i32 %164) #9
  ret i32 %165
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @get_num_max_tile_parts(%struct.opj_codestream_info* byval nocapture readonly align 8) #2 {
  %2 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %0, i64 0, i32 10
  %3 = load i32, i32* %2, align 4, !tbaa !216
  %4 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 8, !tbaa !217
  %6 = mul nsw i32 %5, %3
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %59

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %0, i64 0, i32 21
  %10 = load %struct.opj_tile_info*, %struct.opj_tile_info** %9, align 8, !tbaa !143
  %11 = sext i32 %6 to i64
  %12 = add nsw i64 %11, -1
  %13 = and i64 %11, 3
  %14 = icmp ult i64 %12, 3
  br i1 %14, label %43, label %15

15:                                               ; preds = %8
  %16 = sub nsw i64 %11, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 0, %15 ], [ %40, %17 ]
  %19 = phi i32 [ 0, %15 ], [ %39, %17 ]
  %20 = phi i64 [ %16, %15 ], [ %41, %17 ]
  %21 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %10, i64 %18, i32 15
  %22 = load i32, i32* %21, align 4, !tbaa !145
  %23 = icmp sgt i32 %22, %19
  %24 = select i1 %23, i32 %22, i32 %19
  %25 = or i64 %18, 1
  %26 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %10, i64 %25, i32 15
  %27 = load i32, i32* %26, align 4, !tbaa !145
  %28 = icmp sgt i32 %27, %24
  %29 = select i1 %28, i32 %27, i32 %24
  %30 = or i64 %18, 2
  %31 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %10, i64 %30, i32 15
  %32 = load i32, i32* %31, align 4, !tbaa !145
  %33 = icmp sgt i32 %32, %29
  %34 = select i1 %33, i32 %32, i32 %29
  %35 = or i64 %18, 3
  %36 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %10, i64 %35, i32 15
  %37 = load i32, i32* %36, align 4, !tbaa !145
  %38 = icmp sgt i32 %37, %34
  %39 = select i1 %38, i32 %37, i32 %34
  %40 = add nuw nsw i64 %18, 4
  %41 = add i64 %20, -4
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %17

43:                                               ; preds = %17, %8
  %44 = phi i32 [ undef, %8 ], [ %39, %17 ]
  %45 = phi i64 [ 0, %8 ], [ %40, %17 ]
  %46 = phi i32 [ 0, %8 ], [ %39, %17 ]
  %47 = icmp eq i64 %13, 0
  br i1 %47, label %59, label %48

48:                                               ; preds = %48, %43
  %49 = phi i64 [ %56, %48 ], [ %45, %43 ]
  %50 = phi i32 [ %55, %48 ], [ %46, %43 ]
  %51 = phi i64 [ %57, %48 ], [ %13, %43 ]
  %52 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %10, i64 %49, i32 15
  %53 = load i32, i32* %52, align 4, !tbaa !145
  %54 = icmp sgt i32 %53, %50
  %55 = select i1 %54, i32 %53, i32 %50
  %56 = add nuw nsw i64 %49, 1
  %57 = add i64 %51, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %48, !llvm.loop !689

59:                                               ; preds = %48, %43, %1
  %60 = phi i32 [ 0, %1 ], [ %44, %43 ], [ %55, %48 ]
  ret i32 %60
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { argmemonly nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { cold }
attributes #12 = { nounwind readonly }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4}

!0 = !{!"clang version 9.0.0 (ssh://git@ruisrv:2341/home/git/gitrui/clang.git 2a2e29ecdebf00a4c9bcd9a5db013cd3c911b452) (ssh://git@ruisrv:2341/home/git/gitrui/llvm.git cc301f6696f39515397df004a9c09a3f2ab60254)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{i32 1, !"ThinLTO", i32 0}
!4 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!5 = !{!6, !7, i64 16}
!6 = !{!"opj_bio", !7, i64 0, !7, i64 8, !7, i64 16, !10, i64 24, !10, i64 28}
!7 = !{!"any pointer", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!"int", !8, i64 0}
!11 = !{!6, !7, i64 0}
!12 = !{!6, !7, i64 8}
!13 = !{!6, !10, i64 24}
!14 = !{!6, !10, i64 28}
!15 = !{!8, !8, i64 0}
!16 = !{!17, !7, i64 0}
!17 = !{!"opj_cio", !7, i64 0, !10, i64 8, !7, i64 16, !10, i64 24, !7, i64 32, !7, i64 40, !7, i64 48}
!18 = !{!17, !10, i64 8}
!19 = !{!17, !7, i64 16}
!20 = !{!17, !10, i64 24}
!21 = !{!22, !8, i64 20}
!22 = !{!"opj_common_struct", !7, i64 0, !7, i64 8, !10, i64 16, !8, i64 20, !7, i64 24, !7, i64 32, !7, i64 40}
!23 = !{!22, !7, i64 32}
!24 = !{!7, !7, i64 0}
!25 = !{!26, !7, i64 96}
!26 = !{!"opj_j2k", !7, i64 0, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !7, i64 24, !10, i64 32, !10, i64 36, !7, i64 40, !10, i64 48, !10, i64 52, !10, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112}
!27 = !{!28, !10, i64 8}
!28 = !{!"opj_cp", !8, i64 0, !10, i64 4, !10, i64 8, !8, i64 12, !8, i64 16, !8, i64 17, !10, i64 20, !10, i64 24, !10, i64 28, !10, i64 32, !10, i64 36, !10, i64 40, !8, i64 44, !10, i64 48, !10, i64 52, !10, i64 56, !10, i64 60, !7, i64 64, !10, i64 72, !10, i64 76, !7, i64 80, !10, i64 88, !7, i64 96, !7, i64 104, !10, i64 112, !10, i64 116, !10, i64 120, !10, i64 124, !7, i64 128, !7, i64 136}
!29 = !{!17, !7, i64 32}
!30 = !{!17, !7, i64 40}
!31 = !{!17, !7, i64 48}
!32 = !{!33, !10, i64 8}
!33 = !{!"opj_tcd_tilecomp", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !7, i64 24, !7, i64 32, !10, i64 40}
!34 = !{!33, !10, i64 0}
!35 = !{!33, !10, i64 16}
!36 = !{!33, !7, i64 32}
!37 = !{!33, !7, i64 24}
!38 = !{!39, !10, i64 8}
!39 = !{!"opj_tcd_resolution", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24, !8, i64 32}
!40 = !{!39, !10, i64 0}
!41 = !{!39, !10, i64 12}
!42 = !{!39, !10, i64 4}
!43 = !{!10, !10, i64 0}
!44 = distinct !{!44, !45}
!45 = !{!"llvm.loop.isvectorized", i32 1}
!46 = distinct !{!46, !47, !45}
!47 = !{!"llvm.loop.unroll.runtime.disable"}
!48 = distinct !{!48, !45}
!49 = distinct !{!49, !47, !45}
!50 = !{!51, !7, i64 0}
!51 = !{!"dwt_local", !7, i64 0, !10, i64 8, !10, i64 12, !10, i64 16}
!52 = !{!53}
!53 = distinct !{!53, !54, !"dwt_decode_max_resolution: %r"}
!54 = distinct !{!54, !"dwt_decode_max_resolution"}
!55 = !{!51, !10, i64 12}
!56 = !{!51, !10, i64 8}
!57 = !{!51, !10, i64 16}
!58 = distinct !{!58, !59}
!59 = !{!"llvm.loop.unroll.disable"}
!60 = distinct !{!60, !59}
!61 = distinct !{!61, !59}
!62 = distinct !{!62, !59}
!63 = distinct !{!63, !59}
!64 = distinct !{!64, !59}
!65 = distinct !{!65, !59}
!66 = distinct !{!66, !59}
!67 = distinct !{!67, !59}
!68 = !{!69, !69, i64 0}
!69 = !{!"double", !8, i64 0}
!70 = distinct !{!70, !59}
!71 = !{!72}
!72 = distinct !{!72, !73}
!73 = distinct !{!73, !"LVerDomain"}
!74 = !{!75}
!75 = distinct !{!75, !73}
!76 = distinct !{!76, !45}
!77 = distinct !{!77, !59}
!78 = distinct !{!78, !45}
!79 = distinct !{!79, !45}
!80 = distinct !{!80, !59}
!81 = !{!82}
!82 = distinct !{!82, !83}
!83 = distinct !{!83, !"LVerDomain"}
!84 = !{!85}
!85 = distinct !{!85, !83}
!86 = distinct !{!86, !45}
!87 = !{!88}
!88 = distinct !{!88, !89}
!89 = distinct !{!89, !"LVerDomain"}
!90 = !{!91}
!91 = distinct !{!91, !89}
!92 = distinct !{!92, !45}
!93 = distinct !{!93, !59}
!94 = distinct !{!94, !45}
!95 = !{!96, !10, i64 4}
!96 = !{!"opj_tccp", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24, !8, i64 28, !10, i64 804, !10, i64 808, !8, i64 812, !8, i64 944}
!97 = !{!96, !10, i64 20}
!98 = !{!96, !10, i64 24}
!99 = !{!100, !10, i64 4}
!100 = !{!"opj_stepsize", !10, i64 0, !10, i64 4}
!101 = !{!100, !10, i64 0}
!102 = !{!103}
!103 = distinct !{!103, !104, !"dwt_decode_max_resolution: %r"}
!104 = distinct !{!104, !"dwt_decode_max_resolution"}
!105 = !{!106, !7, i64 0}
!106 = !{!"v4dwt_local", !7, i64 0, !10, i64 8, !10, i64 12, !10, i64 16}
!107 = !{!33, !10, i64 12}
!108 = !{!33, !10, i64 4}
!109 = !{!106, !10, i64 12}
!110 = !{!106, !10, i64 8}
!111 = !{!106, !10, i64 16}
!112 = !{!113, !113, i64 0}
!113 = !{!"float", !8, i64 0}
!114 = distinct !{!114, !59}
!115 = !{!116}
!116 = distinct !{!116, !117, !"v4dwt_interleave_v: %v"}
!117 = distinct !{!117, !"v4dwt_interleave_v"}
!118 = !{!119}
!119 = distinct !{!119, !120, !"v4dwt_interleave_v: %v"}
!120 = distinct !{!120, !"v4dwt_interleave_v"}
!121 = !{!122}
!122 = distinct !{!122, !120, !"v4dwt_interleave_v: %a"}
!123 = !{!22, !7, i64 0}
!124 = !{!22, !7, i64 8}
!125 = !{!126, !8, i64 20}
!126 = !{!"opj_image", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !8, i64 20, !7, i64 24, !7, i64 32, !10, i64 40}
!127 = !{!126, !10, i64 16}
!128 = !{!126, !7, i64 24}
!129 = !{!130, !10, i64 32}
!130 = !{!"opj_image_comptparm", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !10, i64 32}
!131 = !{!132, !10, i64 32}
!132 = !{!"opj_image_comp", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !10, i64 32, !10, i64 36, !10, i64 40, !7, i64 48}
!133 = !{!132, !7, i64 48}
!134 = !{!135, !8, i64 0}
!135 = !{!"j2k_prog_order", !8, i64 0, !8, i64 4}
!136 = !{!28, !10, i64 72}
!137 = !{!28, !10, i64 76}
!138 = !{!26, !7, i64 24}
!139 = !{!28, !7, i64 128}
!140 = !{!141, !10, i64 420}
!141 = !{!"opj_tcp", !10, i64 0, !10, i64 4, !8, i64 8, !10, i64 12, !10, i64 16, !8, i64 20, !10, i64 420, !10, i64 424, !8, i64 428, !7, i64 5168, !7, i64 5176, !10, i64 5184, !10, i64 5188, !10, i64 5192, !8, i64 5196, !7, i64 5600}
!142 = !{!26, !7, i64 104}
!143 = !{!144, !7, i64 104}
!144 = !{!"opj_codestream_info", !69, i64 0, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !8, i64 24, !10, i64 28, !10, i64 32, !10, i64 36, !10, i64 40, !10, i64 44, !10, i64 48, !10, i64 52, !10, i64 56, !7, i64 64, !10, i64 72, !7, i64 80, !10, i64 88, !10, i64 92, !10, i64 96, !10, i64 100, !7, i64 104}
!145 = !{!146, !10, i64 596}
!146 = !{!"opj_tile_info", !7, i64 0, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !8, i64 24, !8, i64 156, !8, i64 288, !8, i64 420, !7, i64 552, !10, i64 560, !69, i64 568, !10, i64 576, !7, i64 584, !10, i64 592, !10, i64 596, !7, i64 600}
!147 = !{!146, !7, i64 600}
!148 = !{!141, !8, i64 8}
!149 = !{!28, !8, i64 16}
!150 = !{!28, !8, i64 17}
!151 = !{!28, !10, i64 20}
!152 = !{!153, !10, i64 84}
!153 = !{!"opj_poc", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !8, i64 32, !8, i64 36, !8, i64 40, !10, i64 48, !10, i64 52, !10, i64 56, !10, i64 60, !10, i64 64, !10, i64 68, !10, i64 72, !10, i64 76, !10, i64 80, !10, i64 84, !10, i64 88, !10, i64 92, !10, i64 96, !10, i64 100, !10, i64 104, !10, i64 108, !10, i64 112, !10, i64 116, !10, i64 120, !10, i64 124, !10, i64 128, !10, i64 132, !10, i64 136, !10, i64 140, !10, i64 144}
!154 = !{!153, !10, i64 96}
!155 = !{!153, !10, i64 88}
!156 = !{!153, !10, i64 92}
!157 = !{!26, !7, i64 80}
!158 = !{!26, !7, i64 0}
!159 = !{!26, !7, i64 72}
!160 = !{!26, !7, i64 64}
!161 = !{!141, !7, i64 5176}
!162 = !{!141, !7, i64 5600}
!163 = !{!28, !7, i64 104}
!164 = !{!28, !7, i64 80}
!165 = !{!28, !7, i64 64}
!166 = !{!167, !10, i64 0}
!167 = !{!"opj_dparameters", !10, i64 0, !10, i64 4, !8, i64 8, !8, i64 4104, !10, i64 8200, !10, i64 8204, !10, i64 8208, !10, i64 8212, !10, i64 8216, !8, i64 8220, !10, i64 8224}
!168 = !{!28, !10, i64 36}
!169 = !{!167, !10, i64 4}
!170 = !{!28, !10, i64 40}
!171 = !{!167, !8, i64 8220}
!172 = !{!28, !8, i64 44}
!173 = !{!26, !7, i64 112}
!174 = !{!26, !7, i64 88}
!175 = !{!26, !10, i64 8}
!176 = !{!177, !10, i64 0}
!177 = !{!"opj_dec_mstabent", !10, i64 0, !10, i64 4, !7, i64 8}
!178 = !{!177, !10, i64 4}
!179 = !{!177, !7, i64 8}
!180 = !{!28, !10, i64 88}
!181 = !{!144, !10, i64 92}
!182 = !{!144, !10, i64 100}
!183 = !{!26, !10, i64 12}
!184 = !{!26, !10, i64 20}
!185 = !{!26, !7, i64 40}
!186 = !{!141, !10, i64 0}
!187 = !{!144, !10, i64 96}
!188 = !{!146, !10, i64 8}
!189 = !{!146, !10, i64 12}
!190 = !{!146, !10, i64 20}
!191 = !{!192, !10, i64 0}
!192 = !{!"opj_tp_info", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16}
!193 = !{!192, !10, i64 8}
!194 = !{i64 0, i64 4, !43, i64 4, i64 4, !43, i64 8, i64 4, !43, i64 12, i64 4, !43, i64 16, i64 4, !43, i64 20, i64 4, !43, i64 24, i64 4, !43, i64 28, i64 776, !15, i64 804, i64 4, !43, i64 808, i64 4, !43, i64 812, i64 132, !15, i64 944, i64 132, !15}
!195 = !{!26, !10, i64 56}
!196 = !{!192, !10, i64 4}
!197 = !{!146, !10, i64 16}
!198 = !{!144, !10, i64 8}
!199 = !{!126, !10, i64 8}
!200 = !{!126, !10, i64 12}
!201 = !{!126, !10, i64 0}
!202 = !{!126, !10, i64 4}
!203 = !{!28, !10, i64 56}
!204 = !{!28, !10, i64 60}
!205 = !{!28, !10, i64 48}
!206 = !{!28, !10, i64 52}
!207 = !{!132, !10, i64 24}
!208 = !{!132, !10, i64 0}
!209 = !{!132, !10, i64 4}
!210 = !{!132, !10, i64 36}
!211 = !{!132, !10, i64 40}
!212 = !{!141, !10, i64 424}
!213 = !{!144, !10, i64 16}
!214 = !{!144, !10, i64 20}
!215 = !{!144, !10, i64 52}
!216 = !{!144, !10, i64 44}
!217 = !{!144, !10, i64 48}
!218 = !{!141, !10, i64 4}
!219 = !{!141, !10, i64 12}
!220 = !{!141, !10, i64 16}
!221 = !{!96, !10, i64 0}
!222 = !{!144, !8, i64 24}
!223 = !{!144, !10, i64 56}
!224 = !{!144, !7, i64 64}
!225 = !{!96, !10, i64 808}
!226 = !{!153, !10, i64 0}
!227 = !{!153, !10, i64 4}
!228 = !{!153, !10, i64 8}
!229 = !{!153, !10, i64 12}
!230 = !{!153, !10, i64 16}
!231 = !{!153, !8, i64 36}
!232 = !{!28, !10, i64 112}
!233 = !{!28, !10, i64 120}
!234 = !{!28, !10, i64 116}
!235 = !{!28, !7, i64 96}
!236 = !{!28, !10, i64 124}
!237 = !{!141, !10, i64 5184}
!238 = !{!141, !7, i64 5168}
!239 = !{!141, !10, i64 5188}
!240 = !{!96, !10, i64 804}
!241 = !{!96, !10, i64 8}
!242 = !{!96, !10, i64 12}
!243 = !{!96, !10, i64 16}
!244 = !{!245, !10, i64 8}
!245 = !{!"opj_jpt_msg_header", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24}
!246 = !{!245, !10, i64 20}
!247 = !{!28, !7, i64 136}
!248 = !{!249, !8, i64 18684}
!249 = !{!"opj_cparameters", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !7, i64 32, !7, i64 40, !10, i64 48, !8, i64 52, !8, i64 56, !10, i64 4792, !10, i64 4796, !8, i64 4800, !8, i64 5200, !10, i64 5600, !10, i64 5604, !10, i64 5608, !10, i64 5612, !10, i64 5616, !10, i64 5620, !10, i64 5624, !10, i64 5628, !8, i64 5632, !8, i64 5764, !8, i64 5896, !8, i64 9992, !10, i64 14088, !8, i64 14092, !10, i64 18188, !10, i64 18192, !10, i64 18196, !10, i64 18200, !10, i64 18204, !10, i64 18208, !10, i64 18212, !10, i64 18216, !8, i64 18220, !8, i64 18284, !8, i64 18348, !8, i64 18412, !8, i64 18476, !10, i64 18540, !10, i64 18544, !10, i64 18548, !10, i64 18552, !8, i64 18556, !8, i64 18620, !8, i64 18684, !10, i64 18688, !8, i64 18692, !8, i64 18696, !8, i64 18697, !8, i64 18698, !10, i64 18700}
!250 = !{!28, !8, i64 0}
!251 = !{!249, !10, i64 18688}
!252 = !{!28, !10, i64 4}
!253 = !{!249, !8, i64 18692}
!254 = !{!28, !8, i64 12}
!255 = !{!249, !10, i64 20}
!256 = !{!28, !10, i64 24}
!257 = !{!249, !10, i64 24}
!258 = !{!28, !10, i64 28}
!259 = !{!249, !10, i64 28}
!260 = !{!28, !10, i64 32}
!261 = !{!249, !7, i64 32}
!262 = !{!249, !10, i64 4796}
!263 = !{!249, !10, i64 5600}
!264 = !{!249, !7, i64 40}
!265 = !{!249, !10, i64 0}
!266 = !{!249, !8, i64 18696}
!267 = !{!249, !8, i64 18697}
!268 = !{!132, !10, i64 8}
!269 = !{!132, !10, i64 12}
!270 = distinct !{!270, !59}
!271 = !{!272}
!272 = distinct !{!272, !273}
!273 = distinct !{!273, !"LVerDomain"}
!274 = !{!275}
!275 = distinct !{!275, !273}
!276 = distinct !{!276, !45}
!277 = distinct !{!277, !59}
!278 = !{!279}
!279 = distinct !{!279, !280}
!280 = distinct !{!280, !"LVerDomain"}
!281 = !{!282}
!282 = distinct !{!282, !280}
!283 = distinct !{!283, !45}
!284 = distinct !{!284, !59}
!285 = distinct !{!285, !59}
!286 = distinct !{!286, !45}
!287 = distinct !{!287, !45}
!288 = distinct !{!288, !59}
!289 = !{!290}
!290 = distinct !{!290, !291}
!291 = distinct !{!291, !"LVerDomain"}
!292 = !{!293}
!293 = distinct !{!293, !291}
!294 = distinct !{!294, !45}
!295 = distinct !{!295, !59}
!296 = !{!297}
!297 = distinct !{!297, !298}
!298 = distinct !{!298, !"LVerDomain"}
!299 = !{!300}
!300 = distinct !{!300, !298}
!301 = distinct !{!301, !45}
!302 = distinct !{!302, !45}
!303 = distinct !{!303, !45}
!304 = !{!249, !10, i64 48}
!305 = !{!249, !8, i64 52}
!306 = !{!249, !8, i64 18698}
!307 = !{!249, !10, i64 4792}
!308 = !{!153, !10, i64 48}
!309 = !{!153, !8, i64 32}
!310 = !{!249, !10, i64 5604}
!311 = !{!249, !10, i64 5608}
!312 = !{!249, !10, i64 5612}
!313 = !{!249, !10, i64 5616}
!314 = !{!249, !10, i64 5620}
!315 = !{!249, !10, i64 5624}
!316 = distinct !{!316, !45}
!317 = distinct !{!317, !59}
!318 = distinct !{!318, !47, !45}
!319 = distinct !{!319, !45}
!320 = distinct !{!320, !59}
!321 = !{!249, !10, i64 5628}
!322 = distinct !{!322, !47, !45}
!323 = !{!324}
!324 = distinct !{!324, !325}
!325 = distinct !{!325, !"LVerDomain"}
!326 = !{!327}
!327 = distinct !{!327, !325}
!328 = distinct !{!328, !45}
!329 = distinct !{!329, !45}
!330 = !{!144, !69, i64 0}
!331 = !{!144, !10, i64 88}
!332 = !{!144, !7, i64 80}
!333 = !{!144, !10, i64 72}
!334 = !{!335, !336, i64 0}
!335 = !{!"opj_marker_info_t", !336, i64 0, !10, i64 4, !10, i64 8}
!336 = !{!"short", !8, i64 0}
!337 = !{!335, !10, i64 4}
!338 = !{!335, !10, i64 8}
!339 = !{!26, !10, i64 36}
!340 = !{!26, !10, i64 32}
!341 = !{!342, !10, i64 12}
!342 = !{!"opj_tcd", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !10, i64 72, !69, i64 80}
!343 = !{!146, !10, i64 592}
!344 = !{!146, !7, i64 584}
!345 = !{!146, !10, i64 576}
!346 = !{!342, !10, i64 16}
!347 = !{!342, !10, i64 0}
!348 = !{!26, !10, i64 16}
!349 = !{!26, !10, i64 48}
!350 = !{!192, !10, i64 12}
!351 = !{!192, !10, i64 16}
!352 = !{!342, !10, i64 4}
!353 = !{!342, !10, i64 8}
!354 = !{!26, !10, i64 52}
!355 = !{!146, !7, i64 552}
!356 = !{!357, !10, i64 8}
!357 = !{!"opj_packet_info", !10, i64 0, !10, i64 4, !10, i64 8, !69, i64 16}
!358 = !{!357, !10, i64 0}
!359 = !{!342, !7, i64 32}
!360 = !{!361, !7, i64 8}
!361 = !{!"opj_tcd_image", !10, i64 0, !10, i64 4, !7, i64 8}
!362 = !{!363, !10, i64 848}
!363 = !{!"opj_tcd_tile", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !7, i64 24, !10, i64 32, !69, i64 40, !8, i64 48, !10, i64 848}
!364 = !{!365, !367, i64 0}
!365 = !{!"rusage", !366, i64 0, !366, i64 16, !8, i64 32, !8, i64 40, !8, i64 48, !8, i64 56, !8, i64 64, !8, i64 72, !8, i64 80, !8, i64 88, !8, i64 96, !8, i64 104, !8, i64 112, !8, i64 120, !8, i64 128, !8, i64 136}
!366 = !{!"timeval", !367, i64 0, !367, i64 8}
!367 = !{!"long", !8, i64 0}
!368 = !{!365, !367, i64 16}
!369 = !{!365, !367, i64 8}
!370 = !{!365, !367, i64 24}
!371 = !{!372, !7, i64 0}
!372 = !{!"opj_jp2", !7, i64 0, !7, i64 8, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !10, i64 32, !10, i64 36, !10, i64 40, !10, i64 44, !10, i64 48, !10, i64 52, !10, i64 56, !10, i64 60, !10, i64 64, !10, i64 68, !7, i64 72, !7, i64 80, !10, i64 88, !10, i64 92, !10, i64 96, !10, i64 100}
!373 = !{!374, !10, i64 4}
!374 = !{!"opj_jp2_box", !10, i64 0, !10, i64 4, !10, i64 8}
!375 = !{!374, !10, i64 0}
!376 = !{!372, !10, i64 20}
!377 = !{!372, !10, i64 16}
!378 = !{!372, !10, i64 24}
!379 = !{!372, !7, i64 80}
!380 = !{!372, !10, i64 28}
!381 = !{!372, !10, i64 32}
!382 = !{!372, !10, i64 36}
!383 = !{!372, !10, i64 40}
!384 = !{!374, !10, i64 8}
!385 = !{!386, !10, i64 8}
!386 = !{!"opj_jp2_comps", !10, i64 0, !10, i64 4, !10, i64 8}
!387 = !{!388, !8, i64 32}
!388 = !{!"opj_jp2_color", !7, i64 0, !10, i64 8, !7, i64 16, !7, i64 24, !8, i64 32}
!389 = !{!372, !10, i64 44}
!390 = !{!372, !10, i64 56}
!391 = !{!372, !10, i64 48}
!392 = !{!372, !10, i64 52}
!393 = !{!388, !7, i64 0}
!394 = !{!388, !10, i64 8}
!395 = !{!372, !10, i64 100}
!396 = !{!388, !7, i64 16}
!397 = !{!398, !7, i64 0}
!398 = !{!"opj_jp2_cdef", !7, i64 0, !336, i64 8}
!399 = !{!398, !336, i64 8}
!400 = !{!401, !336, i64 0}
!401 = !{!"opj_jp2_cdef_info", !336, i64 0, !336, i64 2, !336, i64 4}
!402 = !{!401, !336, i64 2}
!403 = !{!401, !336, i64 4}
!404 = !{!388, !7, i64 24}
!405 = !{!406, !7, i64 8}
!406 = !{!"opj_jp2_pclr", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !336, i64 32, !336, i64 34}
!407 = !{!406, !7, i64 16}
!408 = !{!406, !7, i64 0}
!409 = !{!406, !336, i64 32}
!410 = !{!406, !336, i64 34}
!411 = !{!406, !7, i64 24}
!412 = !{!413, !336, i64 0}
!413 = !{!"opj_jp2_cmap_comp", !336, i64 0, !8, i64 2, !8, i64 3}
!414 = !{!413, !8, i64 2}
!415 = !{!413, !8, i64 3}
!416 = !{!372, !10, i64 60}
!417 = !{!372, !10, i64 64}
!418 = !{!372, !10, i64 68}
!419 = !{!372, !7, i64 72}
!420 = !{!372, !7, i64 8}
!421 = !{i64 0, i64 4, !43, i64 4, i64 4, !43, i64 8, i64 4, !43, i64 12, i64 4, !43, i64 16, i64 4, !43, i64 20, i64 4, !43, i64 24, i64 4, !43, i64 28, i64 4, !43, i64 32, i64 4, !43, i64 36, i64 4, !43, i64 40, i64 4, !43, i64 48, i64 8, !24}
!422 = !{!126, !7, i64 32}
!423 = !{!126, !10, i64 40}
!424 = !{!167, !10, i64 8224}
!425 = !{!249, !10, i64 18700}
!426 = !{!372, !10, i64 96}
!427 = !{!372, !10, i64 88}
!428 = !{!372, !10, i64 92}
!429 = !{!245, !10, i64 0}
!430 = !{!245, !10, i64 4}
!431 = !{!245, !10, i64 16}
!432 = !{!245, !10, i64 12}
!433 = !{!245, !10, i64 24}
!434 = distinct !{!434, !45}
!435 = distinct !{!435, !47, !45}
!436 = distinct !{!436, !45}
!437 = distinct !{!437, !47, !45}
!438 = !{!439, !7, i64 16}
!439 = !{!"opj_mqc", !10, i64 0, !10, i64 4, !10, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !8, i64 40, !7, i64 192}
!440 = !{!439, !7, i64 24}
!441 = !{!439, !7, i64 192}
!442 = !{!439, !10, i64 4}
!443 = !{!439, !10, i64 0}
!444 = !{!439, !10, i64 8}
!445 = !{!446, !10, i64 4}
!446 = !{!"opj_mqc_state", !10, i64 0, !10, i64 4, !7, i64 8, !7, i64 16}
!447 = !{!446, !10, i64 0}
!448 = !{!446, !7, i64 8}
!449 = !{!446, !7, i64 16}
!450 = distinct !{!450, !59}
!451 = !{!439, !7, i64 32}
!452 = !{!453, !10, i64 16}
!453 = !{!"opj_dinfo", !7, i64 0, !7, i64 8, !10, i64 16, !8, i64 20, !7, i64 24, !7, i64 32, !7, i64 40}
!454 = !{!453, !7, i64 24}
!455 = !{!453, !7, i64 32}
!456 = !{!453, !8, i64 20}
!457 = !{!167, !10, i64 8200}
!458 = !{!167, !10, i64 8204}
!459 = !{!460, !7, i64 24}
!460 = !{!"opj_cinfo", !7, i64 0, !7, i64 8, !10, i64 16, !8, i64 20, !7, i64 24, !7, i64 32, !7, i64 40}
!461 = !{!460, !7, i64 32}
!462 = !{!460, !8, i64 20}
!463 = !{!146, !7, i64 0}
!464 = !{!465, !10, i64 216}
!465 = !{!"opj_pi_iterator", !8, i64 0, !7, i64 8, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !10, i64 32, !10, i64 36, !10, i64 40, !10, i64 44, !10, i64 48, !153, i64 52, !10, i64 200, !7, i64 208, !10, i64 216, !10, i64 220, !10, i64 224, !10, i64 228, !10, i64 232, !10, i64 236, !10, i64 240, !10, i64 244}
!466 = !{!465, !10, i64 220}
!467 = !{!465, !10, i64 224}
!468 = !{!465, !10, i64 228}
!469 = !{!465, !10, i64 200}
!470 = !{!465, !7, i64 208}
!471 = !{!472, !10, i64 0}
!472 = !{!"opj_pi_comp", !10, i64 0, !10, i64 4, !10, i64 8, !7, i64 16}
!473 = !{!472, !10, i64 4}
!474 = !{!472, !10, i64 8}
!475 = !{!472, !7, i64 16}
!476 = !{!477, !10, i64 0}
!477 = !{!"opj_pi_resolution", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12}
!478 = !{!477, !10, i64 8}
!479 = !{!477, !10, i64 12}
!480 = !{!465, !10, i64 28}
!481 = !{!465, !10, i64 24}
!482 = !{!465, !10, i64 20}
!483 = !{!465, !10, i64 16}
!484 = !{!465, !7, i64 8}
!485 = !{!465, !10, i64 48}
!486 = !{!465, !10, i64 80}
!487 = !{!465, !8, i64 0}
!488 = !{!477, !10, i64 4}
!489 = !{!465, !10, i64 240}
!490 = !{!465, !10, i64 244}
!491 = !{!153, !10, i64 76}
!492 = !{!153, !10, i64 72}
!493 = !{!153, !10, i64 68}
!494 = !{!153, !10, i64 80}
!495 = !{!153, !10, i64 116}
!496 = !{!153, !10, i64 120}
!497 = !{!465, !8, i64 88}
!498 = !{!465, !10, i64 40}
!499 = !{!465, !10, i64 72}
!500 = !{!465, !10, i64 44}
!501 = !{!465, !10, i64 60}
!502 = !{!465, !10, i64 52}
!503 = !{!465, !10, i64 36}
!504 = !{!465, !10, i64 64}
!505 = !{!465, !10, i64 56}
!506 = !{!465, !10, i64 32}
!507 = !{!465, !10, i64 68}
!508 = !{!465, !10, i64 76}
!509 = !{!336, !336, i64 0}
!510 = !{!465, !10, i64 112}
!511 = !{!465, !10, i64 236}
!512 = !{!465, !10, i64 116}
!513 = !{!465, !10, i64 104}
!514 = !{!465, !10, i64 232}
!515 = !{!465, !10, i64 108}
!516 = !{!153, !10, i64 132}
!517 = !{!153, !10, i64 128}
!518 = !{!153, !10, i64 124}
!519 = !{!153, !10, i64 136}
!520 = !{!153, !10, i64 100}
!521 = !{!153, !10, i64 108}
!522 = !{!153, !10, i64 140}
!523 = !{!153, !10, i64 144}
!524 = !{!153, !10, i64 104}
!525 = !{!153, !10, i64 112}
!526 = !{!527, !7, i64 16}
!527 = !{!"opj_raw", !8, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !7, i64 16, !7, i64 24, !7, i64 32}
!528 = !{!527, !7, i64 24}
!529 = !{!527, !10, i64 8}
!530 = !{!527, !10, i64 12}
!531 = !{!527, !8, i64 0}
!532 = !{!527, !10, i64 4}
!533 = !{!534, !7, i64 0}
!534 = !{!"opj_t1", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !10, i64 40, !10, i64 44, !10, i64 48, !10, i64 52, !10, i64 56}
!535 = !{!534, !7, i64 8}
!536 = !{!534, !7, i64 16}
!537 = !{!534, !10, i64 48}
!538 = !{!534, !10, i64 52}
!539 = !{!534, !7, i64 24}
!540 = !{!534, !7, i64 32}
!541 = !{!363, !69, i64 40}
!542 = !{!363, !10, i64 16}
!543 = !{!363, !7, i64 24}
!544 = !{!39, !10, i64 24}
!545 = !{!39, !10, i64 16}
!546 = !{!39, !10, i64 20}
!547 = !{!548, !113, i64 36}
!548 = !{!"opj_tcd_band", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !7, i64 24, !10, i64 32, !113, i64 36}
!549 = !{!548, !7, i64 24}
!550 = !{!551, !10, i64 16}
!551 = !{!"opj_tcd_precinct", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !8, i64 24, !7, i64 32, !7, i64 40}
!552 = !{!551, !10, i64 20}
!553 = !{!554, !10, i64 24}
!554 = !{!"opj_tcd_cblk_enc", !7, i64 0, !7, i64 8, !7, i64 16, !10, i64 24, !10, i64 28, !10, i64 32, !10, i64 36, !10, i64 40, !10, i64 44, !10, i64 48, !10, i64 52, !10, i64 56}
!555 = !{!548, !10, i64 0}
!556 = !{!554, !10, i64 28}
!557 = !{!548, !10, i64 4}
!558 = !{!548, !10, i64 16}
!559 = !{!554, !10, i64 32}
!560 = !{!554, !10, i64 36}
!561 = !{!534, !10, i64 40}
!562 = !{!534, !10, i64 44}
!563 = !{!564}
!564 = distinct !{!564, !565}
!565 = distinct !{!565, !"LVerDomain"}
!566 = !{!567}
!567 = distinct !{!567, !565}
!568 = distinct !{!568, !45}
!569 = distinct !{!569, !45}
!570 = !{!571}
!571 = distinct !{!571, !572}
!572 = distinct !{!572, !"LVerDomain"}
!573 = !{!574}
!574 = distinct !{!574, !572}
!575 = distinct !{!575, !45}
!576 = distinct !{!576, !45}
!577 = distinct !{!577, !45}
!578 = distinct !{!578, !47, !45}
!579 = !{!554, !10, i64 40}
!580 = !{!554, !7, i64 0}
!581 = !{!554, !7, i64 16}
!582 = !{!534, !10, i64 56}
!583 = !{!584, !10, i64 16}
!584 = !{!"opj_tcd_pass", !10, i64 0, !69, i64 8, !10, i64 16, !10, i64 20}
!585 = !{!584, !69, i64 8}
!586 = !{!584, !10, i64 0}
!587 = !{!554, !10, i64 56}
!588 = !{!584, !10, i64 20}
!589 = !{!590, !10, i64 24}
!590 = !{!"opj_tcd_cblk_dec", !7, i64 0, !7, i64 8, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !10, i64 32, !10, i64 36, !10, i64 40, !10, i64 44, !10, i64 48}
!591 = !{!590, !10, i64 16}
!592 = !{!590, !10, i64 28}
!593 = !{!590, !10, i64 20}
!594 = !{!590, !10, i64 32}
!595 = !{!590, !10, i64 48}
!596 = !{!590, !7, i64 8}
!597 = !{!598, !7, i64 0}
!598 = !{!"opj_tcd_seg", !7, i64 0, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28}
!599 = !{!598, !10, i64 8}
!600 = !{!598, !10, i64 16}
!601 = !{!598, !10, i64 12}
!602 = !{!603}
!603 = distinct !{!603, !604}
!604 = distinct !{!604, !"LVerDomain"}
!605 = !{!606}
!606 = distinct !{!606, !604}
!607 = distinct !{!607, !45}
!608 = distinct !{!608, !45}
!609 = !{!610}
!610 = distinct !{!610, !611}
!611 = distinct !{!611, !"LVerDomain"}
!612 = !{!613}
!613 = distinct !{!613, !611}
!614 = !{!615}
!615 = distinct !{!615, !611}
!616 = distinct !{!616, !45}
!617 = distinct !{!617, !59}
!618 = distinct !{!618, !45}
!619 = !{!590, !7, i64 0}
!620 = distinct !{!620, !45}
!621 = !{!622, !7, i64 8}
!622 = !{!"opj_t2", !7, i64 0, !7, i64 8, !7, i64 16}
!623 = !{!622, !7, i64 16}
!624 = !{!622, !7, i64 0}
!625 = !{!144, !10, i64 12}
!626 = !{!357, !10, i64 4}
!627 = !{!551, !7, i64 32}
!628 = !{!551, !7, i64 40}
!629 = !{!554, !10, i64 48}
!630 = !{!548, !10, i64 32}
!631 = !{!554, !7, i64 8}
!632 = !{!633, !10, i64 0}
!633 = !{!"opj_tcd_layer", !10, i64 0, !10, i64 4, !69, i64 8, !7, i64 16}
!634 = !{!554, !10, i64 44}
!635 = !{!633, !10, i64 4}
!636 = !{!633, !7, i64 16}
!637 = !{!633, !69, i64 8}
!638 = !{!357, !69, i64 16}
!639 = !{!548, !10, i64 8}
!640 = !{!548, !10, i64 12}
!641 = distinct !{!641, !59}
!642 = !{!141, !10, i64 5192}
!643 = !{!590, !10, i64 44}
!644 = !{!590, !10, i64 36}
!645 = !{!598, !10, i64 20}
!646 = !{!598, !10, i64 24}
!647 = !{!598, !10, i64 28}
!648 = !{!590, !10, i64 40}
!649 = !{!361, !10, i64 0}
!650 = !{!361, !10, i64 4}
!651 = !{!342, !7, i64 40}
!652 = !{!363, !10, i64 0}
!653 = !{!363, !10, i64 4}
!654 = !{!363, !10, i64 8}
!655 = !{!363, !10, i64 12}
!656 = !{!551, !10, i64 0}
!657 = !{!551, !10, i64 4}
!658 = !{!551, !10, i64 8}
!659 = !{!551, !10, i64 12}
!660 = !{!342, !7, i64 24}
!661 = !{!342, !7, i64 48}
!662 = !{!132, !10, i64 16}
!663 = !{!132, !10, i64 20}
!664 = !{!342, !7, i64 56}
!665 = !{!342, !7, i64 64}
!666 = !{!554, !10, i64 52}
!667 = !{!363, !10, i64 32}
!668 = !{!33, !10, i64 40}
!669 = !{!342, !10, i64 72}
!670 = !{!146, !10, i64 560}
!671 = !{!146, !69, i64 568}
!672 = !{!342, !69, i64 80}
!673 = !{!674, !10, i64 0}
!674 = !{!"opj_tgt_tree", !10, i64 0, !10, i64 4, !10, i64 8, !7, i64 16}
!675 = !{!674, !10, i64 4}
!676 = !{!674, !10, i64 8}
!677 = !{!674, !7, i64 16}
!678 = !{!679, !7, i64 0}
!679 = !{!"opj_tgt_node", !7, i64 0, !10, i64 8, !10, i64 12, !10, i64 16}
!680 = !{!679, !10, i64 8}
!681 = distinct !{!681, !59}
!682 = !{!679, !10, i64 12}
!683 = !{!679, !10, i64 16}
!684 = distinct !{!684, !45}
!685 = distinct !{!685, !47, !45}
!686 = distinct !{!686, !45}
!687 = distinct !{!687, !47, !45}
!688 = distinct !{!688, !59}
!689 = distinct !{!689, !59}
