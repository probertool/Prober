	.file	"<stdin>"
	.text
	.globl	main
	.align	16, 0x90
	.type	main,@function
main:                                   # @main
.Leh_func_begin1:
# BB#0:                                 # %entry
	pushl	%edi
.Llabel1:
	pushl	%esi
.Llabel2:
	subl	$36, %esp
.Llabel3:
	movl	48(%esp), %eax
	movl	%eax, 32(%esp)
	movl	52(%esp), %eax
	movl	%eax, 28(%esp)
	movl	$0, 24(%esp)
	movl	$31, 20(%esp)
	movl	$3855, 16(%esp)         # imm = 0xF0F
	movl	$3855, 12(%esp)         # imm = 0xF0F
	movl	$3855, 8(%esp)          # imm = 0xF0F
	movl	$4, (%esp)
	movl	$4, %eax
	lock
	xaddl	%eax, 24(%esp)
	movl	%eax, 4(%esp)
	movl	$-30, %eax
	lock
	xaddl	%eax, 20(%esp)
	movl	%eax, 4(%esp)
	movl	$1, %ecx
	movl	$1, %eax
	lock
	xaddl	%eax, 20(%esp)
	movl	%eax, 4(%esp)
	movl	$-1, %edx
	movl	$-1, %eax
	lock
	xaddl	%eax, 20(%esp)
	movl	%eax, 4(%esp)
	movl	$4080, %esi             # imm = 0xFF0
	.align	16, 0x90
.LBB1_1:                                # %entry
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%esp), %eax
	movl	%eax, %edi
	andl	%esi, %edi
	lock
	cmpxchgl	%edi, 16(%esp)
	jne	.LBB1_1
# BB#2:                                 # %entry
	movl	%eax, 4(%esp)
	.align	16, 0x90
.LBB1_3:                                # %entry
                                        # =>This Inner Loop Header: Depth=1
	movl	12(%esp), %eax
	movl	%eax, %edi
	orl	%esi, %edi
	lock
	cmpxchgl	%edi, 12(%esp)
	jne	.LBB1_3
# BB#4:                                 # %entry
	movl	%eax, 4(%esp)
	.align	16, 0x90
.LBB1_5:                                # %entry
                                        # =>This Inner Loop Header: Depth=1
	movl	8(%esp), %eax
	movl	%eax, %edi
	xorl	%esi, %edi
	lock
	cmpxchgl	%edi, 8(%esp)
	jne	.LBB1_5
# BB#6:                                 # %entry
	movl	%eax, 4(%esp)
	movl	$16, %esi
	.align	16, 0x90
.LBB1_7:                                # %entry
                                        # =>This Inner Loop Header: Depth=1
	movl	20(%esp), %eax
	cmpl	%esi, %eax
	movl	%eax, %edi
	cmovgel	%esi, %edi
	lock
	cmpxchgl	%edi, 20(%esp)
	jne	.LBB1_7
# BB#8:                                 # %entry
	movl	%eax, 4(%esp)
	.align	16, 0x90
.LBB1_9:                                # %entry
                                        # =>This Inner Loop Header: Depth=1
	movl	20(%esp), %eax
	cmpl	%edx, %eax
	movl	%eax, %esi
	cmovgel	%edx, %esi
	lock
	cmpxchgl	%esi, 20(%esp)
	jne	.LBB1_9
# BB#10:                                # %entry
	movl	%eax, 4(%esp)
	.align	16, 0x90
.LBB1_11:                               # %entry
                                        # =>This Inner Loop Header: Depth=1
	movl	20(%esp), %eax
	cmpl	%ecx, %eax
	movl	%eax, %edx
	cmovlel	%ecx, %edx
	lock
	cmpxchgl	%edx, 20(%esp)
	jne	.LBB1_11
# BB#12:                                # %entry
	movl	%eax, 4(%esp)
	xorl	%edx, %edx
	.align	16, 0x90
.LBB1_13:                               # %entry
                                        # =>This Inner Loop Header: Depth=1
	movl	20(%esp), %eax
	cmpl	%edx, %eax
	movl	%eax, %esi
	cmovlel	%edx, %esi
	lock
	cmpxchgl	%esi, 20(%esp)
	jne	.LBB1_13
# BB#14:                                # %entry
	movl	%eax, 4(%esp)
	movl	$65535, %edx            # imm = 0xFFFF
	.align	16, 0x90
.LBB1_15:                               # %entry
                                        # =>This Inner Loop Header: Depth=1
	movl	20(%esp), %eax
	cmpl	%edx, %eax
	movl	%eax, %esi
	cmovbel	%edx, %esi
	lock
	cmpxchgl	%esi, 20(%esp)
	jne	.LBB1_15
# BB#16:                                # %entry
	movl	%eax, 4(%esp)
	movl	$10, %edx
	.align	16, 0x90
.LBB1_17:                               # %entry
                                        # =>This Inner Loop Header: Depth=1
	movl	20(%esp), %eax
	cmpl	%edx, %eax
	movl	%eax, %esi
	cmovbel	%edx, %esi
	lock
	cmpxchgl	%esi, 20(%esp)
	jne	.LBB1_17
# BB#18:                                # %entry
	movl	%eax, 4(%esp)
	.align	16, 0x90
.LBB1_19:                               # %entry
                                        # =>This Inner Loop Header: Depth=1
	movl	20(%esp), %eax
	cmpl	%ecx, %eax
	movl	%eax, %esi
	cmovael	%ecx, %esi
	lock
	cmpxchgl	%esi, 20(%esp)
	jne	.LBB1_19
# BB#20:                                # %entry
	movl	%eax, 4(%esp)
	.align	16, 0x90
.LBB1_21:                               # %entry
                                        # =>This Inner Loop Header: Depth=1
	movl	20(%esp), %eax
	cmpl	%edx, %eax
	movl	%eax, %esi
	cmovael	%edx, %esi
	lock
	cmpxchgl	%esi, 20(%esp)
	jne	.LBB1_21
# BB#22:                                # %entry
	movl	%eax, 4(%esp)
	movl	$1976, %eax             # imm = 0x7B8
	xchgl	%eax, 20(%esp)
	movl	%eax, 4(%esp)
	movl	$-10, %eax
	lock
	cmpxchgl	%ecx, 20(%esp)
	movl	%eax, 4(%esp)
	movl	$1976, %eax             # imm = 0x7B8
	lock
	cmpxchgl	%ecx, 20(%esp)
	movl	%eax, 4(%esp)
	addl	$36, %esp
	popl	%esi
	popl	%edi
	ret
	.size	main, .-main
.Leh_func_end1:

	.section	.eh_frame,"aw",@progbits
.LEH_frame0:
.Lsection_eh_frame:
.Leh_frame_common:
	.set	.Lset1eh,.Leh_frame_common_end-.Leh_frame_common_begin
	.long	.Lset1eh                # Length of Common Information Entry
.Leh_frame_common_begin:
	.long	0                       # CIE Identifier Tag
	.byte	1                       # DW_CIE_VERSION
	.byte	0
                                        # CIE Augmentation
	.uleb128	1               # CIE Code Alignment Factor
	.sleb128	-4              # CIE Data Alignment Factor
	.byte	8
                                        # CIE Return Address Column
	.byte	12                      # CFA_def_cfa
	.uleb128	4               # Register
	.uleb128	4               # Offset
	.byte	136                     # DW_CFA_offset + Reg (8)
	.uleb128	1               # Offset
	.align	4
.Leh_frame_common_end:

.Lmain.eh = 0


	.section	.note.GNU-stack,"",@progbits
