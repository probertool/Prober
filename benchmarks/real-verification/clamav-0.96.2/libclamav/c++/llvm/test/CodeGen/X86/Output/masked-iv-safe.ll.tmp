	.file	"<stdin>"
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI1_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI1_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI1_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	count_up
	.align	16, 0x90
	.type	count_up,@function
count_up:                               # @count_up
# BB#0:                                 # %entry
	xorl	%eax, %eax
	movsd	.LCPI1_0(%rip), %xmm0
	movsd	.LCPI1_1(%rip), %xmm1
	movsd	.LCPI1_2(%rip), %xmm2
	.align	16, 0x90
.LBB1_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	incq	%rax
	cmpq	$10, %rax
	jne	.LBB1_1
# BB#2:                                 # %return
	ret
	.size	count_up, .-count_up

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI2_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI2_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI2_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	count_down
	.align	16, 0x90
	.type	count_down,@function
count_down:                             # @count_down
# BB#0:                                 # %entry
	movl	$10, %eax
	movsd	.LCPI2_0(%rip), %xmm0
	movsd	.LCPI2_1(%rip), %xmm1
	movsd	.LCPI2_2(%rip), %xmm2
	.align	16, 0x90
.LBB2_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	decq	%rax
	jne	.LBB2_1
# BB#2:                                 # %return
	ret
	.size	count_down, .-count_down

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI3_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI3_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI3_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	count_up_signed
	.align	16, 0x90
	.type	count_up_signed,@function
count_up_signed:                        # @count_up_signed
# BB#0:                                 # %entry
	xorl	%eax, %eax
	movsd	.LCPI3_0(%rip), %xmm0
	movsd	.LCPI3_1(%rip), %xmm1
	movsd	.LCPI3_2(%rip), %xmm2
	.align	16, 0x90
.LBB3_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	incq	%rax
	cmpq	$10, %rax
	jne	.LBB3_1
# BB#2:                                 # %return
	ret
	.size	count_up_signed, .-count_up_signed

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI4_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI4_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI4_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	count_down_signed
	.align	16, 0x90
	.type	count_down_signed,@function
count_down_signed:                      # @count_down_signed
# BB#0:                                 # %entry
	movl	$10, %eax
	movsd	.LCPI4_0(%rip), %xmm0
	movsd	.LCPI4_1(%rip), %xmm1
	movsd	.LCPI4_2(%rip), %xmm2
	.align	16, 0x90
.LBB4_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	decq	%rax
	jne	.LBB4_1
# BB#2:                                 # %return
	ret
	.size	count_down_signed, .-count_down_signed

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI5_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI5_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI5_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	another_count_up
	.align	16, 0x90
	.type	another_count_up,@function
another_count_up:                       # @another_count_up
# BB#0:                                 # %entry
	movq	$-1, %rax
	movsd	.LCPI5_0(%rip), %xmm0
	movsd	.LCPI5_1(%rip), %xmm1
	movsd	.LCPI5_2(%rip), %xmm2
	.align	16, 0x90
.LBB5_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movsd	2048(%rdi,%rax,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, 2048(%rdi,%rax,8)
	movsd	134217728(%rdi,%rax,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, 134217728(%rdi,%rax,8)
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	incq	%rax
	jne	.LBB5_1
# BB#2:                                 # %return
	ret
	.size	another_count_up, .-another_count_up

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI6_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI6_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI6_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	another_count_down
	.align	16, 0x90
	.type	another_count_down,@function
another_count_down:                     # @another_count_down
# BB#0:                                 # %entry
	xorl	%eax, %eax
	movsd	.LCPI6_0(%rip), %xmm0
	movsd	.LCPI6_1(%rip), %xmm1
	movsd	.LCPI6_2(%rip), %xmm2
	movq	%rax, %rcx
	movq	%rax, %rdx
	.align	16, 0x90
.LBB6_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	movsd	(%rdi,%rcx,8), %xmm3
	divsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movsd	(%rdi,%rdx,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rdx,8)
	addq	$255, %rax
	addq	$16777215, %rcx         # imm = 0xFFFFFF
	testq	%rdx, %rdx
	leaq	-1(%rdx), %rdx
	jne	.LBB6_1
# BB#2:                                 # %return
	ret
	.size	another_count_down, .-another_count_down

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI7_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI7_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI7_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	another_count_up_signed
	.align	16, 0x90
	.type	another_count_up_signed,@function
another_count_up_signed:                # @another_count_up_signed
# BB#0:                                 # %entry
	movq	$-1, %rax
	movsd	.LCPI7_0(%rip), %xmm0
	movsd	.LCPI7_1(%rip), %xmm1
	movsd	.LCPI7_2(%rip), %xmm2
	.align	16, 0x90
.LBB7_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	divsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	incq	%rax
	jne	.LBB7_1
# BB#2:                                 # %return
	ret
	.size	another_count_up_signed, .-another_count_up_signed

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI8_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI8_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI8_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	another_count_down_signed
	.align	16, 0x90
	.type	another_count_down_signed,@function
another_count_down_signed:              # @another_count_down_signed
# BB#0:                                 # %entry
	xorl	%eax, %eax
	movsd	.LCPI8_0(%rip), %xmm0
	movsd	.LCPI8_1(%rip), %xmm1
	movsd	.LCPI8_2(%rip), %xmm2
	.align	16, 0x90
.LBB8_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	divsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	testq	%rax, %rax
	leaq	-1(%rax), %rax
	jne	.LBB8_1
# BB#2:                                 # %return
	ret
	.size	another_count_down_signed, .-another_count_down_signed


	.section	.note.GNU-stack,"",@progbits
