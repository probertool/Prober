	.file	"<stdin>"
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI1_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI1_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI1_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	count_up
	.align	16, 0x90
	.type	count_up,@function
count_up:                               # @count_up
# BB#0:                                 # %entry
	movl	$10, %eax
	movsd	.LCPI1_0(%rip), %xmm0
	movsd	.LCPI1_1(%rip), %xmm1
	movsd	.LCPI1_2(%rip), %xmm2
	.align	16, 0x90
.LBB1_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movzbl	%al, %ecx
	movsd	(%rdi,%rcx,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movq	%rax, %rcx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	movsd	(%rdi,%rcx,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	incq	%rax
	jne	.LBB1_1
# BB#2:                                 # %return
	ret
	.size	count_up, .-count_up

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI2_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI2_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI2_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	count_down
	.align	16, 0x90
	.type	count_down,@function
count_down:                             # @count_down
# BB#0:                                 # %entry
	movl	$10, %eax
	movsd	.LCPI2_0(%rip), %xmm0
	movsd	.LCPI2_1(%rip), %xmm1
	movsd	.LCPI2_2(%rip), %xmm2
	.align	16, 0x90
.LBB2_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movzbl	%al, %ecx
	movsd	(%rdi,%rcx,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movq	%rax, %rcx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	movsd	(%rdi,%rcx,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	decq	%rax
	cmpq	$20, %rax
	jne	.LBB2_1
# BB#2:                                 # %return
	ret
	.size	count_down, .-count_down

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI3_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI3_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI3_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	count_up_signed
	.align	16, 0x90
	.type	count_up_signed,@function
count_up_signed:                        # @count_up_signed
# BB#0:                                 # %entry
	movl	$10, %eax
	movl	$167772160, %ecx        # imm = 0xA000000
	movl	$2560, %edx             # imm = 0xA00
	movsd	.LCPI3_0(%rip), %xmm0
	movsd	.LCPI3_1(%rip), %xmm1
	movsd	.LCPI3_2(%rip), %xmm2
	.align	16, 0x90
.LBB3_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdx, %rsi
	sarq	$8, %rsi
	movsd	(%rdi,%rsi,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rsi,8)
	movq	%rcx, %rsi
	sarq	$24, %rsi
	movsd	(%rdi,%rsi,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rsi,8)
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	addq	$256, %rdx              # imm = 0x100
	addq	$16777216, %rcx         # imm = 0x1000000
	incq	%rax
	jne	.LBB3_1
# BB#2:                                 # %return
	ret
	.size	count_up_signed, .-count_up_signed

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI4_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI4_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI4_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	count_down_signed
	.align	16, 0x90
	.type	count_down_signed,@function
count_down_signed:                      # @count_down_signed
# BB#0:                                 # %entry
	xorl	%eax, %eax
	movl	$167772160, %ecx        # imm = 0xA000000
	movl	$2560, %edx             # imm = 0xA00
	movsd	.LCPI4_0(%rip), %xmm0
	movsd	.LCPI4_1(%rip), %xmm1
	movsd	.LCPI4_2(%rip), %xmm2
	.align	16, 0x90
.LBB4_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdx, %rsi
	sarq	$8, %rsi
	movsd	(%rdi,%rsi,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rsi,8)
	movq	%rcx, %rsi
	sarq	$24, %rsi
	movsd	(%rdi,%rsi,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rsi,8)
	movsd	80(%rdi,%rax,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, 80(%rdi,%rax,8)
	addq	$-256, %rdx
	addq	$-16777216, %rcx        # imm = 0xFFFFFFFFFF000000
	decq	%rax
	cmpq	$10, %rax
	jne	.LBB4_1
# BB#2:                                 # %return
	ret
	.size	count_down_signed, .-count_down_signed

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI5_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI5_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI5_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	another_count_up
	.align	16, 0x90
	.type	another_count_up,@function
another_count_up:                       # @another_count_up
# BB#0:                                 # %entry
	xorl	%eax, %eax
	movsd	.LCPI5_0(%rip), %xmm0
	movsd	.LCPI5_1(%rip), %xmm1
	movsd	.LCPI5_2(%rip), %xmm2
	.align	16, 0x90
.LBB5_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movzbl	%al, %ecx
	movsd	(%rdi,%rcx,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movq	%rax, %rcx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	movsd	(%rdi,%rcx,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	incq	%rax
	cmpq	%rax, %rsi
	jne	.LBB5_1
# BB#2:                                 # %return
	ret
	.size	another_count_up, .-another_count_up

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI6_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI6_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI6_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	another_count_down
	.align	16, 0x90
	.type	another_count_down,@function
another_count_down:                     # @another_count_down
# BB#0:                                 # %entry
	movsd	.LCPI6_0(%rip), %xmm0
	movsd	.LCPI6_1(%rip), %xmm1
	movsd	.LCPI6_2(%rip), %xmm2
	.align	16, 0x90
.LBB6_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movzbl	%sil, %eax
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	movq	%rsi, %rax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	movsd	(%rdi,%rsi,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rsi,8)
	decq	%rsi
	cmpq	$10, %rsi
	jne	.LBB6_1
# BB#2:                                 # %return
	ret
	.size	another_count_down, .-another_count_down

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI7_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI7_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI7_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	another_count_up_signed
	.align	16, 0x90
	.type	another_count_up_signed,@function
another_count_up_signed:                # @another_count_up_signed
# BB#0:                                 # %entry
	xorl	%eax, %eax
	movsd	.LCPI7_0(%rip), %xmm0
	movsd	.LCPI7_1(%rip), %xmm1
	movsd	.LCPI7_2(%rip), %xmm2
	movq	%rax, %rcx
	movq	%rdi, %rdx
	.align	16, 0x90
.LBB7_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %r8
	sarq	$8, %r8
	movsd	(%rdi,%r8,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%r8,8)
	movq	%rcx, %r8
	sarq	$24, %r8
	movsd	(%rdi,%r8,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%r8,8)
	movsd	(%rdx), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdx)
	addq	$256, %rax              # imm = 0x100
	addq	$16777216, %rcx         # imm = 0x1000000
	addq	$8, %rdx
	decq	%rsi
	jne	.LBB7_1
# BB#2:                                 # %return
	ret
	.size	another_count_up_signed, .-another_count_up_signed

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI8_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI8_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI8_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	another_count_down_signed
	.align	16, 0x90
	.type	another_count_down_signed,@function
another_count_down_signed:              # @another_count_down_signed
# BB#0:                                 # %entry
	movq	%rsi, %rax
	shlq	$8, %rax
	movq	%rsi, %rcx
	shlq	$24, %rcx
	movsd	.LCPI8_0(%rip), %xmm0
	movsd	.LCPI8_1(%rip), %xmm1
	movsd	.LCPI8_2(%rip), %xmm2
	.align	16, 0x90
.LBB8_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdx
	sarq	$8, %rdx
	movsd	(%rdi,%rdx,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rdx,8)
	movq	%rcx, %rdx
	sarq	$24, %rdx
	movsd	(%rdi,%rdx,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rdx,8)
	movsd	(%rdi,%rsi,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rsi,8)
	addq	$-256, %rax
	addq	$-16777216, %rcx        # imm = 0xFFFFFFFFFF000000
	decq	%rsi
	cmpq	$10, %rsi
	jne	.LBB8_1
# BB#2:                                 # %return
	ret
	.size	another_count_down_signed, .-another_count_down_signed

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI9_0:                               # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI9_1:                               # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI9_2:                               # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	yet_another_count_down
	.align	16, 0x90
	.type	yet_another_count_down,@function
yet_another_count_down:                 # @yet_another_count_down
# BB#0:                                 # %entry
	xorl	%eax, %eax
	movsd	.LCPI9_0(%rip), %xmm0
	movsd	.LCPI9_1(%rip), %xmm1
	movsd	.LCPI9_2(%rip), %xmm2
	movq	%rax, %rcx
	movq	%rax, %rdx
	.align	16, 0x90
.LBB9_1:                                # %loop
                                        # =>This Inner Loop Header: Depth=1
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	movsd	(%rdi,%rcx,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movsd	(%rdi,%rdx,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rdx,8)
	addq	$255, %rax
	addq	$16777215, %rcx         # imm = 0xFFFFFF
	testq	%rdx, %rdx
	leaq	-1(%rdx), %rdx
	jne	.LBB9_1
# BB#2:                                 # %return
	ret
	.size	yet_another_count_down, .-yet_another_count_down

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI10_0:                              # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI10_1:                              # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI10_2:                              # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	yet_another_count_up
	.align	16, 0x90
	.type	yet_another_count_up,@function
yet_another_count_up:                   # @yet_another_count_up
# BB#0:                                 # %entry
	xorl	%eax, %eax
	movsd	.LCPI10_0(%rip), %xmm0
	movsd	.LCPI10_1(%rip), %xmm1
	movsd	.LCPI10_2(%rip), %xmm2
	.align	16, 0x90
.LBB10_1:                               # %loop
                                        # =>This Inner Loop Header: Depth=1
	movzbl	%al, %ecx
	movsd	(%rdi,%rcx,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movq	%rax, %rcx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	movsd	(%rdi,%rcx,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	addq	$3, %rax
	cmpq	$10, %rax
	jne	.LBB10_1
# BB#2:                                 # %return
	ret
	.size	yet_another_count_up, .-yet_another_count_up

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI11_0:                              # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI11_1:                              # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI11_2:                              # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	still_another_count_down
	.align	16, 0x90
	.type	still_another_count_down,@function
still_another_count_down:               # @still_another_count_down
# BB#0:                                 # %entry
	movl	$10, %eax
	movsd	.LCPI11_0(%rip), %xmm0
	movsd	.LCPI11_1(%rip), %xmm1
	movsd	.LCPI11_2(%rip), %xmm2
	.align	16, 0x90
.LBB11_1:                               # %loop
                                        # =>This Inner Loop Header: Depth=1
	movzbl	%al, %ecx
	movsd	(%rdi,%rcx,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movq	%rax, %rcx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	movsd	(%rdi,%rcx,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rcx,8)
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	addq	$-3, %rax
	jne	.LBB11_1
# BB#2:                                 # %return
	ret
	.size	still_another_count_down, .-still_another_count_down

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI12_0:                              # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI12_1:                              # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI12_2:                              # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	yet_another_count_up_signed
	.align	16, 0x90
	.type	yet_another_count_up_signed,@function
yet_another_count_up_signed:            # @yet_another_count_up_signed
# BB#0:                                 # %entry
	xorl	%eax, %eax
	movsd	.LCPI12_0(%rip), %xmm0
	movsd	.LCPI12_1(%rip), %xmm1
	movsd	.LCPI12_2(%rip), %xmm2
	movq	%rax, %rcx
	movq	%rax, %rdx
	.align	16, 0x90
.LBB12_1:                               # %loop
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rsi
	sarq	$8, %rsi
	movsd	(%rdi,%rsi,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rsi,8)
	movq	%rcx, %rsi
	sarq	$24, %rsi
	movsd	(%rdi,%rsi,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rsi,8)
	movsd	(%rdi,%rdx,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rdx,8)
	addq	$768, %rax              # imm = 0x300
	addq	$50331648, %rcx         # imm = 0x3000000
	addq	$3, %rdx
	cmpq	$10, %rdx
	jne	.LBB12_1
# BB#2:                                 # %return
	ret
	.size	yet_another_count_up_signed, .-yet_another_count_up_signed

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI13_0:                              # constant pool double
	.quad	4591870180066957722     # double 1.000000e-01
.LCPI13_1:                              # constant pool double
	.quad	4612361558371493478     # double 2.300000e+00
.LCPI13_2:                              # constant pool double
	.quad	4616752568008179712     # double 4.500000e+00
	.text
	.globl	yet_another_count_down_signed
	.align	16, 0x90
	.type	yet_another_count_down_signed,@function
yet_another_count_down_signed:          # @yet_another_count_down_signed
# BB#0:                                 # %entry
	movl	$10, %eax
	movl	$167772160, %ecx        # imm = 0xA000000
	movl	$2560, %edx             # imm = 0xA00
	movsd	.LCPI13_0(%rip), %xmm0
	movsd	.LCPI13_1(%rip), %xmm1
	movsd	.LCPI13_2(%rip), %xmm2
	.align	16, 0x90
.LBB13_1:                               # %loop
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdx, %rsi
	sarq	$8, %rsi
	movsd	(%rdi,%rsi,8), %xmm3
	mulsd	%xmm0, %xmm3
	movsd	%xmm3, (%rdi,%rsi,8)
	movq	%rcx, %rsi
	sarq	$24, %rsi
	movsd	(%rdi,%rsi,8), %xmm3
	mulsd	%xmm1, %xmm3
	movsd	%xmm3, (%rdi,%rsi,8)
	movsd	(%rdi,%rax,8), %xmm3
	mulsd	%xmm2, %xmm3
	movsd	%xmm3, (%rdi,%rax,8)
	addq	$-768, %rdx             # imm = 0xFFFFFFFFFFFFFD00
	addq	$-50331648, %rcx        # imm = 0xFFFFFFFFFD000000
	addq	$-3, %rax
	jne	.LBB13_1
# BB#2:                                 # %return
	ret
	.size	yet_another_count_down_signed, .-yet_another_count_down_signed


	.section	.note.GNU-stack,"",@progbits
