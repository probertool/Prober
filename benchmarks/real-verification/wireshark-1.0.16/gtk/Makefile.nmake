## Makefile for building wireshark.exe with Microsoft C and nmake
## Use: $(MAKE) /$(MAKEFLAGS) -f makefile.nmake
#
# $Id: Makefile.nmake 27186 2009-01-07 23:57:30Z gerald $

include ..\config.nmake

############### no need to modify below this line #########

CFLAGS=-WX -DHAVE_CONFIG_H /I.. /I../wiretap $(GTK_CFLAGS) $(GNUTLS_CFLAGS) \
	/I$(PCAP_DIR)\WPCAP\LIBPCAP /I$(PCAP_DIR)\WPCAP\LIBPCAP\bpf \
	/I$(PCAP_DIR)\WPCAP\LIBPCAP\lbl \
	/I$(PCAP_DIR)\include $(AIRPCAP_CFLAGS) \
	/Zm800 -D_U_="" -D_NEED_VAR_IMPORT_ $(LOCAL_CFLAGS) \
	$(PORTAUDIO_CFLAGS) \
	$(HHC_CFLAGS)

CVARSDLL=-DWIN32 -DNULL=0 -D_MT -D_DLL

.c.obj::
	$(CC) $(CVARSDLL) $(CFLAGS) $(WSUG_CFLAGS) -Fd.\ -c $<

include Makefile.common


# if you add files here, be sure to include them also in Makefile.am EXTRA_DIST
WIRESHARK_WIN32_GTK_SRC = \
	$(WIRESHARK_GTK_SRC) \
	print_mswin.c \
	win32-file-dlg.c \
!IFDEF PORTAUDIO_DIR
!IF "$(PORTAUDIO_VERSION)" == "18"
	pa_lib.c \
!ELSE
	pa_front.c \
	pa_allocation.c \
	pa_converters.c \
	pa_cpuload.c \
	pa_dither.c \
	pa_process.c \
	pa_skeleton.c \
	pa_stream.c \
	pa_trace.c \
	pa_win_util.c \
	pa_win_hostapis.c \
	pa_x86_plain_converters.c \
!ENDIF
	pa_win_wmme.c 
!ENDIF

WIRESHARK_TAP_OBJECTS = $(WIRESHARK_TAP_SRC:.c=.obj)


WIRESHARK_WIN32_GTK_OBJECTS = $(WIRESHARK_WIN32_GTK_SRC:.c=.obj)
	

libui.lib	: ..\config.h $(WIRESHARK_WIN32_GTK_OBJECTS) $(WIRESHARK_TAP_OBJECTS)
	link /lib /out:libui.lib $(WIRESHARK_WIN32_GTK_OBJECTS) $(WIRESHARK_TAP_OBJECTS) winmm.lib

wireshark-tap-register.c: $(WIRESHARK_TAP_SRC) ../make-tapreg-dotc Makefile.common
	@echo Making wireshark-tap-register.c
	@$(SH) ../make-tapreg-dotc wireshark-tap-register.c . $(WIRESHARK_TAP_SRC)


!IF "$(PORTAUDIO_VERSION)" == "18"
pa_lib.obj: $(PORTAUDIO_DIR)\pa_common\pa_lib.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_DIR)\pa_common\pa_lib.c -o $@

pa_win_wmme.obj: $(PORTAUDIO_DIR)\pa_win_wmme\pa_win_wmme.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\pa_win_wmme\pa_win_wmme.c -o $@
!ELSE
pa_front.obj: $(PORTAUDIO_DIR)\src\common\pa_front.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\common\pa_front.c -o $@

pa_allocation.obj: $(PORTAUDIO_DIR)\src\common\pa_allocation.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\common\pa_allocation.c -o $@

pa_converters.obj: $(PORTAUDIO_DIR)\src\common\pa_converters.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\common\pa_converters.c -o $@

pa_cpuload.obj: $(PORTAUDIO_DIR)\src\common\pa_cpuload.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\common\pa_cpuload.c -o $@

pa_dither.obj: $(PORTAUDIO_DIR)\src\common\pa_dither.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\common\pa_dither.c -o $@

pa_process.obj: $(PORTAUDIO_DIR)\src\common\pa_process.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\common\pa_process.c -o $@

pa_skeleton.obj: $(PORTAUDIO_DIR)\src\common\pa_skeleton.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\common\pa_skeleton.c -o $@

pa_stream.obj: $(PORTAUDIO_DIR)\src\common\pa_stream.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\common\pa_stream.c -o $@

pa_trace.obj: $(PORTAUDIO_DIR)\src\common\pa_trace.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\common\pa_trace.c -o $@


pa_win_wmme.obj: $(PORTAUDIO_DIR)\src\hostapi\wmme\pa_win_wmme.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\hostapi\wmme\pa_win_wmme.c -o $@

pa_win_util.obj: $(PORTAUDIO_DIR)\src\os\win\pa_win_util.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\os\win\pa_win_util.c -o $@

pa_win_hostapis.obj: $(PORTAUDIO_DIR)\src\os\win\pa_win_hostapis.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\os\win\pa_win_hostapis.c -o $@

pa_x86_plain_converters.obj: $(PORTAUDIO_DIR)\src\os\win\pa_x86_plain_converters.c
	$(CC) -c $(LOCAL_CFLAGS) $(PORTAUDIO_CFLAGS) $(PORTAUDIO_DIR)\src\os\win\pa_x86_plain_converters.c -o $@

!ENDIF

clean:
	rm -f $(WIRESHARK_WIN32_GTK_OBJECTS) $(WIRESHARK_TAP_OBJECTS) libui.lib *.pdb doxygen.cfg html/*.*
	if exist html rmdir html

distclean: clean

maintainer-clean: distclean
	rm -f $(GENERATED_FILES)

# convert doxygen.cfg.in to doxygen.cfg with stamped version info
doxygen.cfg: ..\config.nmake doxygen.cfg.in
!IFDEF DOXYGEN
	sed -e s/@VERSION@/$(VERSION)/ \
	    < doxygen.cfg.in > $@
!ENDIF

doxygen-run:
!IFDEF DOXYGEN
	$(DOXYGEN) doxygen.cfg
!ENDIF

# MS html help compiler hhc returns 1 on success, but as nmake expects 0 it would stop here.
# the prepended -1 will raise the accepted error levels of nmake, so it will continue
doxygen.chm:
!IFDEF HHC
	-1 $(HHC) html\index.hhp
!ENDIF

doxygen: doxygen.cfg doxygen-run doxygen.chm

