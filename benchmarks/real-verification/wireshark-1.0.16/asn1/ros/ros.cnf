#.EXPORTS
OPERATION
ERROR
OPERATION-PACKAGE
CONTRACT
InvokeId
Code

#.TYPE_RENAME
ReturnResult/result/result	OperationResult

#.FIELD_RENAME
Reject/problem/invoke		invokeProblem
ReturnResult/result/result	operationResult
Reject/problem/returnError	rejectError
Reject/problem/returnResult	rejectResult

#.FN_PARS OperationCode VAL_PTR = &opcode

#.FN_PARS ErrorCode VAL_PTR = &opcode

#.FN_PARS InvokeId/present VAL_PTR = &invokeid

#.FN_BODY Invoke/argument
  char *oid;
  /* not sure what the length should be - -1 for now */
  proto_tree_add_text(tree, tvb, offset,-1, "invoke argument");

  ros_match_call_response(tvb, actx->pinfo, tree, invokeid, TRUE);
	
  if(session && session->pres_ctx_id && (oid = find_oid_by_pres_ctx_id(actx->pinfo, session->pres_ctx_id))) {
	/* this should be ROS! */
	session->ros_op = (ROS_OP_INVOKE | ROS_OP_ARGUMENT);
	/* now add the opcode */
	session->ros_op |= opcode;
	offset = call_ros_oid_callback(oid, tvb, offset, actx->pinfo, top_tree);
  }

#.FN_BODY ReturnResult/result/result
  char *oid;
  /* not sure what the length should be - -1 for now */
  proto_tree_add_text(tree, tvb, offset,-1, "return result");

  ros_match_call_response(tvb, actx->pinfo, tree, invokeid, FALSE);
	
  if(session && session->pres_ctx_id && (oid = find_oid_by_pres_ctx_id(actx->pinfo, session->pres_ctx_id))) {
	/* this should be ROS! */
	session->ros_op = (ROS_OP_INVOKE | ROS_OP_RESULT);
	/* now add the opcode */
	session->ros_op |= opcode;
	offset = call_ros_oid_callback(oid, tvb, offset, actx->pinfo, top_tree);
  }

#.FN_BODY ReturnError/parameter
  char *oid;
  /* not sure what the length should be - -1 for now */
  proto_tree_add_text(tree, tvb, offset,-1, "return result");

  ros_match_call_response(tvb, actx->pinfo, tree, invokeid, FALSE);
	
  if(session && session->pres_ctx_id && (oid = find_oid_by_pres_ctx_id(actx->pinfo, session->pres_ctx_id))) {
	/* this should be ROS! */
	session->ros_op = (ROS_OP_INVOKE | ROS_OP_ERROR);
	/* now add the opcode  (really the error code) */
	session->ros_op |= opcode;
	offset = call_ros_oid_callback(oid, tvb, offset, actx->pinfo, top_tree);
  }


#.FN_BODY ROS/bind-invoke
  char *oid;
  /* not sure what the length should be - -1 for now */
  proto_tree_add_text(tree, tvb, offset,-1, "bind-invoke");

  if(session && session->pres_ctx_id && (oid = find_oid_by_pres_ctx_id(actx->pinfo, session->pres_ctx_id))) {
    /* this should be ROS! */
    session->ros_op = (ROS_OP_BIND | ROS_OP_ARGUMENT);
    offset = call_ros_oid_callback(oid, tvb, offset, actx->pinfo, top_tree);
  }

#.FN_BODY ROS/bind-result
  char *oid;
  /* not sure what the length should be - -1 for now */
  proto_tree_add_text(tree, tvb, offset,-1, "bind-result");

  if(session && session->pres_ctx_id && (oid = find_oid_by_pres_ctx_id(actx->pinfo, session->pres_ctx_id))) {
    /* this should be ROS! */
    session->ros_op = (ROS_OP_BIND | ROS_OP_RESULT);
    offset = call_ros_oid_callback(oid, tvb, offset, actx->pinfo, top_tree);
  }

#.FN_BODY ROS/bind-error
  char *oid;
  /* not sure what the length should be - -1 for now */
  proto_tree_add_text(tree, tvb, offset,-1, "bind-error");

  if(session && session->pres_ctx_id && (oid = find_oid_by_pres_ctx_id(actx->pinfo, session->pres_ctx_id))) {
    /* this should be ROS! */
    session->ros_op = (ROS_OP_BIND | ROS_OP_ERROR);
    offset = call_ros_oid_callback(oid, tvb, offset, actx->pinfo, top_tree);
  }


#.FN_BODY ROS/unbind-invoke
  char *oid;
  /* not sure what the length should be - -1 for now */
  proto_tree_add_text(tree, tvb, offset,-1, "unbind-invoke");

  if(session && session->pres_ctx_id && (oid = find_oid_by_pres_ctx_id(actx->pinfo, session->pres_ctx_id))) {
    /* this should be ROS! */
    session->ros_op = (ROS_OP_UNBIND | ROS_OP_ARGUMENT);
    offset = call_ros_oid_callback(oid, tvb, offset, actx->pinfo, top_tree);
  }


#.FN_BODY ROS/unbind-result
  char *oid;
  /* not sure what the length should be - -1 for now */
  proto_tree_add_text(tree, tvb, offset,-1, "unbind-result");

  if(session && session->pres_ctx_id && (oid = find_oid_by_pres_ctx_id(actx->pinfo, session->pres_ctx_id))) {
    /* this should be ROS! */
    session->ros_op = (ROS_OP_UNBIND | ROS_OP_RESULT);
    offset = call_ros_oid_callback(oid, tvb, offset, actx->pinfo, top_tree);
  }

#.FN_BODY ROS/unbind-error
  char *oid;
  /* not sure what the length should be - -1 for now */
  proto_tree_add_text(tree, tvb, offset,-1, "unbind-error");

  if(session && session->pres_ctx_id && (oid = find_oid_by_pres_ctx_id(actx->pinfo, session->pres_ctx_id))) {
    /* this should be ROS! */
    session->ros_op = (ROS_OP_UNBIND | ROS_OP_ERROR);
    offset = call_ros_oid_callback(oid, tvb, offset, actx->pinfo, top_tree);
  }
#.END
