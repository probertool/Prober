cscope 15 $HOME/llvm/codesample/real-effectiveness/tiff-4.0.1 -q 0000023820 0003036637
	@contrib/addtiffo/addtiffo.c

60 
	~<°dio.h
>

61 
	~<°dlib.h
>

62 
	~<°rög.h
>

63 
	~"tiffio.h
"

65 
TIFFBuûdOvîvõws
–
TIFF
 *, , *, , const *,

72 
	$maö
–
¨gc
, ** 
¨gv
 )

75 
™Ovîvõws
[100];

76 
nOvîvõwCou¡
 = 0;

77 
bU£SubIFD
 = 0;

78 
TIFF
 *
hTIFF
;

79 c⁄° *
pszReßm∂ög
 = "nearest";

84 if–
¨gc
 < 2 )

86 
	`¥ötf
( "Usage:áddtiffo [-r {nearest,average,mode}]\n"

94  
¨gv
[1][0] == '-' )

96 if–
	`°rcmp
(
¨gv
[1],"-subifd") == 0 )

98 
bU£SubIFD
 = 1;

99 
¨gv
++;

100 
¨gc
--;

102 if–
	`°rcmp
(
¨gv
[1],"-r") == 0 )

104 
¨gv
 += 2;

105 
¨gc
 -= 2;

106 
pszReßm∂ög
 = *
¨gv
;

110 
	`Ârötf
–
°dîr
, "IncorrectÖarameters\n" );

120  
nOvîvõwCou¡
 < 
¨gc
 - 2 &&ÇOverviewCount < 100 )

122 
™Ovîvõws
[
nOvîvõwCou¡
] = 
	`©oi
(
¨gv
[nOverviewCount+2]);

123 if–
™Ovîvõws
[
nOvîvõwCou¡
] <= 0)

125 
	`Ârötf
–
°dîr
, "IncorrectÖarameters\n" );

128 
nOvîvõwCou¡
++;

136 if–
nOvîvõwCou¡
 == 0 )

138 
nOvîvõwCou¡
 = 4;

140 
™Ovîvõws
[0] = 2;

141 
™Ovîvõws
[1] = 4;

142 
™Ovîvõws
[2] = 8;

143 
™Ovîvõws
[3] = 16;

149 
hTIFF
 = 
	`TIFFO≥n
–
¨gv
[1], "r+" );

150 if–
hTIFF
 =
NULL
 )

152 
	`Ârötf
–
°dîr
, "TIFFO≥n(%sËÁûed.\n", 
¨gv
[1] );

156 
	`TIFFBuûdOvîvõws
–
hTIFF
, 
nOvîvõwCou¡
, 
™Ovîvõws
, 
bU£SubIFD
,

157 
pszReßm∂ög
, 
NULL
, NULL );

159 
	`TIFFClo£
–
hTIFF
 );

164 #ifde‡
DBMALLOC


165 
	`mÆloc_dump
(1);

169 
	}
}

	@contrib/addtiffo/tif_overview.c

50 
	~<°dio.h
>

51 
	~<as£π.h
>

52 
	~<°dlib.h
>

53 
	~<°rög.h
>

55 
	~"tiffio.h
"

56 
	~"tif_ovrˇche.h
"

58 #i‚de‡
FALSE


59 
	#FALSE
 0

	)

60 
	#TRUE
 1

	)

63 #i‚de‡
MAX


64 
	#MIN
(
a
,
b
Ë(◊<bË?á : b)

	)

65 
	#MAX
(
a
,
b
Ë(◊>bË?á : b)

	)

68 
TIFFBuûdOvîvõws
–
TIFF
 *, , *, , const *,

80 
uöt32
 
	$TIFF_WrôeOvîvõw
–
TIFF
 *
hTIFF
, 
uöt32
 
nXSize
, uöt32 
nYSize
,

81 
nBôsPîPixñ
, 
nPœ«rC⁄fig
, 
nSam∂es
,

82 
nBlockXSize
, 
nBlockYSize
,

83 
bTûed
, 
nCom¥essFœg
, 
nPhŸomëric
,

84 
nSam∂eF‹m©
,

85 *
∑nRed
,

86 *
∑nGªí
,

87 *
∑nBlue
,

88 
bU£SubIFDs
,

89 
nH‹Subßm∂ög
, 
nVîSubßm∂ög
 )

92 
toff_t
 
nBa£DúOff£t
;

93 
toff_t
 
nOff£t
;

95 (Ë
bU£SubIFDs
;

97 
nBa£DúOff£t
 = 
	`TIFFCuºítDúOff£t
–
hTIFF
 );

99 
	`TIFFCª©eDúe˘‹y
–
hTIFF
 );

104 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_IMAGEWIDTH
, 
nXSize
 );

105 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_IMAGELENGTH
, 
nYSize
 );

106 if–
nSam∂es
 == 1 )

107 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
 );

109 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_PLANARCONFIG
, 
nPœ«rC⁄fig
 );

111 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_BITSPERSAMPLE
, 
nBôsPîPixñ
 );

112 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_SAMPLESPERPIXEL
, 
nSam∂es
 );

113 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_COMPRESSION
, 
nCom¥essFœg
 );

114 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_PHOTOMETRIC
, 
nPhŸomëric
 );

115 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_SAMPLEFORMAT
, 
nSam∂eF‹m©
 );

117 if–
bTûed
 )

119 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_TILEWIDTH
, 
nBlockXSize
 );

120 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_TILELENGTH
, 
nBlockYSize
 );

123 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_ROWSPERSTRIP
, 
nBlockYSize
 );

125 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_SUBFILETYPE
, 
FILETYPE_REDUCEDIMAGE
 );

127 if–
nPhŸomëric
 =
PHOTOMETRIC_YCBCR
 ||ÇPhŸomëri¯=
PHOTOMETRIC_ITULAB
 )

129 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_YCBCRSUBSAMPLING
, 
nH‹Subßm∂ög
, 
nVîSubßm∂ög
);

138 if–
∑nRed
 !
NULL
 )

140 
	`TIFFSëFõld
–
hTIFF
, 
TIFFTAG_COLORMAP
, 
∑nRed
, 
∑nGªí
, 
∑nBlue
 );

146 if–
	`TIFFWrôeCheck
–
hTIFF
, 
bTûed
, "TIFFBuildOverviews" ) == 0 )

149 
	`TIFFWrôeDúe˘‹y
–
hTIFF
 );

150 
	`TIFFSëDúe˘‹y
–
hTIFF
, (
tdú_t
Ë(
	`TIFFNumbîOfDúe˘‹õs
(hTIFF)-1) );

152 
nOff£t
 = 
	`TIFFCuºítDúOff£t
–
hTIFF
 );

154 
	`TIFFSëSubDúe˘‹y
–
hTIFF
, 
nBa£DúOff£t
 );

156  
nOff£t
;

157 
	}
}

164 
	$TIFF_GëSour˚Sam∂es
–* 
∑dfSam∂es
, *
∑bySrc
,

165 
nPixñByãs
, 
nSam∂eF‹m©
,

166 
uöt32
 
nXSize
, uöt32 
nYSize
,

167 
nPixñOff£t
, 
nLöeOff£t
 )

169 
uöt32
 
iXOff
, 
iYOff
;

170 
iSam∂e
;

172 
iSam∂e
 = 0;

174  
iYOff
 = 0; iYOf‡< 
nYSize
; iYOff++ )

176  
iXOff
 = 0; iXOf‡< 
nXSize
; iXOff++ )

178 *
∑byD©a
;

180 
∑byD©a
 = 
∑bySrc
 + 
iYOff
 * 
nLöeOff£t
 + 
iXOff
 * 
nPixñOff£t
;

182 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_UINT
 && 
nPixñByãs
 == 1 )

184 
∑dfSam∂es
[
iSam∂e
++] = *
∑byD©a
;

186 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_UINT
 && 
nPixñByãs
 == 2 )

188 
∑dfSam∂es
[
iSam∂e
++] = ((
uöt16
 *Ë
∑byD©a
)[0];

190 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_UINT
 && 
nPixñByãs
 == 4 )

192 
∑dfSam∂es
[
iSam∂e
++] = ((
uöt32
 *Ë
∑byD©a
)[0];

194 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_INT
 && 
nPixñByãs
 == 2 )

196 
∑dfSam∂es
[
iSam∂e
++] = ((
öt16
 *Ë
∑byD©a
)[0];

198 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_INT
 && 
nPixñByãs
 == 32 )

200 
∑dfSam∂es
[
iSam∂e
++] = ((
öt32
 *Ë
∑byD©a
)[0];

202 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_IEEEFP
 && 
nPixñByãs
 == 4 )

204 
∑dfSam∂es
[
iSam∂e
++] = ((*Ë
∑byD©a
)[0];

206 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_IEEEFP
 && 
nPixñByãs
 == 8 )

208 
∑dfSam∂es
[
iSam∂e
++] = ((*Ë
∑byD©a
)[0];

212 
	}
}

219 
	$TIFF_SëSam∂e
–* 
∑byD©a
, 
nPixñByãs
, 
nSam∂eF‹m©
,

220 
dfVÆue
 )

223 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_UINT
 && 
nPixñByãs
 == 1 )

225 *
∑byD©a
 = (Ë
	`MAX
(0,
	`MIN
(255,
dfVÆue
));

227 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_UINT
 && 
nPixñByãs
 == 2 )

229 *((
uöt16
 *)
∑byD©a
Ë(uöt16Ë
	`MAX
(0,
	`MIN
(65535,
dfVÆue
));

231 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_UINT
 && 
nPixñByãs
 == 4 )

233 *((
uöt32
 *)
∑byD©a
Ë(uöt32Ë
dfVÆue
;

235 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_INT
 && 
nPixñByãs
 == 2 )

237 *((
öt16
 *)
∑byD©a
Ë(öt16Ë
	`MAX
(-32768,
	`MIN
(32767,
dfVÆue
));

239 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_INT
 && 
nPixñByãs
 == 32 )

241 *((
öt32
 *)
∑byD©a
Ë(öt32Ë
dfVÆue
;

243 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_IEEEFP
 && 
nPixñByãs
 == 4 )

245 *((*)
∑byD©a
Ë(Ë
dfVÆue
;

247 if–
nSam∂eF‹m©
 =
SAMPLEFORMAT_IEEEFP
 && 
nPixñByãs
 == 8 )

249 *((*)
∑byD©a
Ë
dfVÆue
;

251 
	}
}

261 
	$TIFF_DownSam∂e
–*
∑bySrcTûe
,

262 
uöt32
 
nBlockXSize
, uöt32 
nBlockYSize
,

263 
nPixñSkewBôs
, 
nBôsPîPixñ
,

264 * 
∑byOTûe
,

265 
uöt32
 
nOBlockXSize
, uöt32 
nOBlockYSize
,

266 
uöt32
 
nTXOff
, uöt32 
nTYOff
, 
nOMu…
,

267 
nSam∂eF‹m©
, c⁄° * 
pszReßm∂ög
 )

270 
uöt32
 
i
, 
j
;

271 
k
, 
nPixñByãs
 = (
nBôsPîPixñ
) / 8;

272 
nPixñGroupByãs
 = (
nBôsPîPixñ
+
nPixñSkewBôs
)/8;

273 *
∑bySrc
, *
∑byD°
;

274 *
∑dfSam∂es
;

276 
	`as£π
–
nBôsPîPixñ
 >= 8 );

278 
∑dfSam∂es
 = (*Ë
	`mÆloc
((Ë* 
nOMu…
 *ÇOMult);

284  
j
 = 0; j*
nOMu…
 < 
nBlockYSize
; j++ )

286 if–
j
 + 
nTYOff
 >
nOBlockYSize
 )

289 
∑byD°
 = 
∑byOTûe
 + ((
j
+
nTYOff
)*
nOBlockXSize
 + 
nTXOff
)

290 * 
nPixñByãs
 * 
nPixñGroupByãs
;

296 if–
	`°∫cmp
(
pszReßm∂ög
,"nearest",4) == 0

297 || 
	`°∫cmp
(
pszReßm∂ög
,"NEAR",4) == 0 )

299 
∑bySrc
 = 
∑bySrcTûe
 + 
j
*
nOMu…
*
nBlockXSize
 * 
nPixñGroupByãs
;

301  
i
 = 0; i*
nOMu…
 < 
nBlockXSize
; i++ )

303 if–
i
 + 
nTXOff
 >
nOBlockXSize
 )

311  
k
 = 0; k < 
nPixñByãs
; k++ )

312 
∑byD°
[
k
] = 
∑bySrc
[k];

314 
∑byD°
 +
nPixñByãs
 * 
nPixñGroupByãs
;

315 
∑bySrc
 +
nOMu…
 * 
nPixñGroupByãs
;

323 if–
	`°∫cmp
(
pszReßm∂ög
,"averag",6) == 0

324 || 
	`°∫cmp
(
pszReßm∂ög
,"AVERAG",6) == 0 )

326 
∑bySrc
 = 
∑bySrcTûe
 + 
j
*
nOMu…
*
nBlockXSize
 * 
nPixñGroupByãs
;

328  
i
 = 0; i*
nOMu…
 < 
nBlockXSize
; i++ )

330 
dfTŸÆ
;

331 
uöt32
 
nXSize
, 
nYSize
, 
iSam∂e
;

333 if–
i
 + 
nTXOff
 >
nOBlockXSize
 )

336 
nXSize
 = 
	`MIN
((
uöt32
)
nOMu…
,
nBlockXSize
-
i
);

337 
nYSize
 = 
	`MIN
((
uöt32
)
nOMu…
,
nBlockYSize
-
j
);

339 
	`TIFF_GëSour˚Sam∂es
–
∑dfSam∂es
, 
∑bySrc
,

340 
nPixñByãs
, 
nSam∂eF‹m©
,

341 
nXSize
, 
nYSize
,

342 
nPixñGroupByãs
,

343 
nPixñGroupByãs
 * 
nBlockXSize
 );

345 
dfTŸÆ
 = 0;

346  
iSam∂e
 = 0; iSam∂ê< 
nXSize
*
nYSize
; iSample++ )

348 
dfTŸÆ
 +
∑dfSam∂es
[
iSam∂e
];

351 
	`TIFF_SëSam∂e
–
∑byD°
, 
nPixñByãs
, 
nSam∂eF‹m©
,

352 
dfTŸÆ
 / (
nXSize
*
nYSize
) );

354 
∑bySrc
 +
nOMu…
 * 
nPixñGroupByãs
;

355 
∑byD°
 +
nPixñByãs
;

360 
	`‰ì
–
∑dfSam∂es
 );

361 
	}
}

367 
	$TIFF_DownSam∂e_Subßm∂ed
–*
∑bySrcTûe
, 
nSam∂e
,

368 
uöt32
 
nBlockXSize
, uöt32 
nBlockYSize
,

369 * 
∑byOTûe
,

370 
uöt32
 
nOBlockXSize
, uöt32 
nOBlockYSize
,

371 
uöt32
 
nTXOff
, uöt32 
nTYOff
, 
nOMu…
,

372 c⁄° *
pszReßm∂ög
,

373 
nH‹Subßm∂ög
, 
nVîSubßm∂ög
 )

376 
nSam∂eBlockSize
;

377 
nSour˚Sam∂eRowSize
;

378 
nDe°Sam∂eRowSize
;

379 
uöt32
 
nSour˚X
, 
nSour˚Y
;

380 
uöt32
 
nSour˚XSec
, 
nSour˚YSec
;

381 
uöt32
 
nSour˚XSecEnd
, 
nSour˚YSecEnd
;

382 
uöt32
 
nDe°X
, 
nDe°Y
;

383 
nSam∂eOff£tInSam∂eBlock
;

384 
nCummuœt‹
;

385 
nCummuœt‹Cou¡
;

387 
nSam∂eBlockSize
 = 
nH‹Subßm∂ög
 * 
nVîSubßm∂ög
 + 2;

388 
nSour˚Sam∂eRowSize
 =

389 ––
nBlockXSize
 + 
nH‹Subßm∂ög
 - 1 ) /ÇH‹Subßm∂ög ) * 
nSam∂eBlockSize
;

390 
nDe°Sam∂eRowSize
 =

391 ––
nOBlockXSize
 + 
nH‹Subßm∂ög
 - 1 ) /ÇH‹Subßm∂ög ) * 
nSam∂eBlockSize
;

393 if–
	`°∫cmp
(
pszReßm∂ög
,"nearest",4) == 0

394 || 
	`°∫cmp
(
pszReßm∂ög
,"NEAR",4) == 0 )

396 if–
nSam∂e
 == 0 )

398  
nSour˚Y
 = 0, 
nDe°Y
 = 
nTYOff
;

399 
nSour˚Y
 < 
nBlockYSize
;

400 
nSour˚Y
 +
nOMu…
, 
nDe°Y
 ++)

402 if–
nDe°Y
 >
nOBlockYSize
 )

405  
nSour˚X
 = 0, 
nDe°X
 = 
nTXOff
;

406 
nSour˚X
 < 
nBlockXSize
;

407 
nSour˚X
 +
nOMu…
, 
nDe°X
 ++)

409 if–
nDe°X
 >
nOBlockXSize
 )

412 * ( 
∑byOTûe
 + ( 
nDe°Y
 / 
nVîSubßm∂ög
 ) * 
nDe°Sam∂eRowSize


413 + ( 
nDe°Y
 % 
nVîSubßm∂ög
 ) * 
nH‹Subßm∂ög


414 + ( 
nDe°X
 / 
nH‹Subßm∂ög
 ) * 
nSam∂eBlockSize


415 + ( 
nDe°X
 % 
nH‹Subßm∂ög
 ) ) =

416 * ( 
∑bySrcTûe
 + ( 
nSour˚Y
 / 
nVîSubßm∂ög
 ) * 
nSour˚Sam∂eRowSize


417 + ( 
nSour˚Y
 % 
nVîSubßm∂ög
 ) * 
nH‹Subßm∂ög


418 + ( 
nSour˚X
 / 
nH‹Subßm∂ög
 ) * 
nSam∂eBlockSize


419 + ( 
nSour˚X
 % 
nH‹Subßm∂ög
 ) );

425 
nSam∂eOff£tInSam∂eBlock
 = 
nH‹Subßm∂ög
 * 
nVîSubßm∂ög
 + 
nSam∂e
 - 1;

426  
nSour˚Y
 = 0, 
nDe°Y
 = ( 
nTYOff
 / 
nVîSubßm∂ög
 );

427 
nSour˚Y
 < ( 
nBlockYSize
 / 
nVîSubßm∂ög
 );

428 
nSour˚Y
 +
nOMu…
, 
nDe°Y
 ++)

430 if–
nDe°Y
*
nVîSubßm∂ög
 >
nOBlockYSize
 )

433  
nSour˚X
 = 0, 
nDe°X
 = ( 
nTXOff
 / 
nH‹Subßm∂ög
 );

434 
nSour˚X
 < ( 
nBlockXSize
 / 
nH‹Subßm∂ög
 );

435 
nSour˚X
 +
nOMu…
, 
nDe°X
 ++)

437 if–
nDe°X
*
nH‹Subßm∂ög
 >
nOBlockXSize
 )

440 * ( 
∑byOTûe
 + 
nDe°Y
 * 
nDe°Sam∂eRowSize


441 + 
nDe°X
 * 
nSam∂eBlockSize


442 + 
nSam∂eOff£tInSam∂eBlock
 ) =

443 * ( 
∑bySrcTûe
 + 
nSour˚Y
 * 
nSour˚Sam∂eRowSize


444 + 
nSour˚X
 * 
nSam∂eBlockSize


445 + 
nSam∂eOff£tInSam∂eBlock
 );

450 if–
	`°∫cmp
(
pszReßm∂ög
,"averag",6) == 0

451 || 
	`°∫cmp
(
pszReßm∂ög
,"AVERAG",6) == 0 )

453 if–
nSam∂e
 == 0 )

455  
nSour˚Y
 = 0, 
nDe°Y
 = 
nTYOff
;ÇSour˚Y < 
nBlockYSize
;ÇSour˚Y +
nOMu…
,ÇDestY ++)

457 if–
nDe°Y
 >
nOBlockYSize
 )

460  
nSour˚X
 = 0, 
nDe°X
 = 
nTXOff
;ÇSour˚X < 
nBlockXSize
;ÇSour˚X +
nOMu…
,ÇDestX ++)

462 if–
nDe°X
 >
nOBlockXSize
 )

465 
nSour˚XSecEnd
 = 
nSour˚X
 + 
nOMu…
;

466 if–
nSour˚XSecEnd
 > 
nBlockXSize
 )

467 
nSour˚XSecEnd
 = 
nBlockXSize
;

468 
nSour˚YSecEnd
 = 
nSour˚Y
 + 
nOMu…
;

469 if–
nSour˚YSecEnd
 > 
nBlockYSize
 )

470 
nSour˚YSecEnd
 = 
nBlockYSize
;

471 
nCummuœt‹
 = 0;

472  
nSour˚YSec
 = 
nSour˚Y
;ÇSour˚YSe¯< 
nSour˚YSecEnd
;ÇSourceYSec ++)

474  
nSour˚XSec
 = 
nSour˚X
;ÇSour˚XSe¯< 
nSour˚XSecEnd
;ÇSourceXSec ++)

476 
nCummuœt‹
 +* ( 
∑bySrcTûe
 + ( 
nSour˚YSec
 / 
nVîSubßm∂ög
 ) * 
nSour˚Sam∂eRowSize


477 + ( 
nSour˚YSec
 % 
nVîSubßm∂ög
 ) * 
nH‹Subßm∂ög


478 + ( 
nSour˚XSec
 / 
nH‹Subßm∂ög
 ) * 
nSam∂eBlockSize


479 + ( 
nSour˚XSec
 % 
nH‹Subßm∂ög
 ) );

482 
nCummuœt‹Cou¡
 = ( 
nSour˚XSecEnd
 - 
nSour˚X
 ) * ( 
nSour˚YSecEnd
 - 
nSour˚Y
 );

483 * ( 
∑byOTûe
 + ( 
nDe°Y
 / 
nVîSubßm∂ög
 ) * 
nDe°Sam∂eRowSize


484 + ( 
nDe°Y
 % 
nVîSubßm∂ög
 ) * 
nH‹Subßm∂ög


485 + ( 
nDe°X
 / 
nH‹Subßm∂ög
 ) * 
nSam∂eBlockSize


486 + ( 
nDe°X
 % 
nH‹Subßm∂ög
 ) ) =

487 ––
nCummuœt‹
 + ( 
nCummuœt‹Cou¡
 >> 1 ) ) /ÇCummulatorCount );

493 
nSam∂eOff£tInSam∂eBlock
 = 
nH‹Subßm∂ög
 * 
nVîSubßm∂ög
 + 
nSam∂e
 - 1;

494  
nSour˚Y
 = 0, 
nDe°Y
 = ( 
nTYOff
 / 
nVîSubßm∂ög
 );ÇSour˚Y < ( 
nBlockYSize
 /ÇVerSubsampling );

495 
nSour˚Y
 +
nOMu…
, 
nDe°Y
 ++)

497 if–
nDe°Y
*
nVîSubßm∂ög
 >
nOBlockYSize
 )

500  
nSour˚X
 = 0, 
nDe°X
 = ( 
nTXOff
 / 
nH‹Subßm∂ög
 );ÇSour˚X < ( 
nBlockXSize
 /ÇHorSubsampling );

501 
nSour˚X
 +
nOMu…
, 
nDe°X
 ++)

503 if–
nDe°X
*
nH‹Subßm∂ög
 >
nOBlockXSize
 )

506 
nSour˚XSecEnd
 = 
nSour˚X
 + 
nOMu…
;

507 if–
nSour˚XSecEnd
 > ( 
nBlockXSize
 / 
nH‹Subßm∂ög
 ) )

508 
nSour˚XSecEnd
 = ( 
nBlockXSize
 / 
nH‹Subßm∂ög
 );

509 
nSour˚YSecEnd
 = 
nSour˚Y
 + 
nOMu…
;

510 if–
nSour˚YSecEnd
 > ( 
nBlockYSize
 / 
nVîSubßm∂ög
 ) )

511 
nSour˚YSecEnd
 = ( 
nBlockYSize
 / 
nVîSubßm∂ög
 );

512 
nCummuœt‹
 = 0;

513  
nSour˚YSec
 = 
nSour˚Y
;ÇSour˚YSe¯< 
nSour˚YSecEnd
;ÇSourceYSec ++)

515  
nSour˚XSec
 = 
nSour˚X
;ÇSour˚XSe¯< 
nSour˚XSecEnd
;ÇSourceXSec ++)

517 
nCummuœt‹
 +* ( 
∑bySrcTûe
 + 
nSour˚YSec
 * 
nSour˚Sam∂eRowSize


518 + 
nSour˚XSec
 * 
nSam∂eBlockSize


519 + 
nSam∂eOff£tInSam∂eBlock
 );

522 
nCummuœt‹Cou¡
 = ( 
nSour˚XSecEnd
 - 
nSour˚X
 ) * ( 
nSour˚YSecEnd
 - 
nSour˚Y
 );

523 * ( 
∑byOTûe
 + 
nDe°Y
 * 
nDe°Sam∂eRowSize


524 + 
nDe°X
 * 
nSam∂eBlockSize


525 + 
nSam∂eOff£tInSam∂eBlock
 ) =

526 ––
nCummuœt‹
 + ( 
nCummuœt‹Cou¡
 >> 1 ) ) /ÇCummulatorCount );

531 
	}
}

540 
	$TIFF_Pro˚ssFuŒResBlock
–
TIFF
 *
hTIFF
, 
nPœ«rC⁄fig
,

541 
bSubßm∂ed
,

542 
nH‹Subßm∂ög
, 
nVîSubßm∂ög
,

543 
nOvîvõws
, * 
∑nOvLi°
,

544 
nBôsPîPixñ
,

545 
nSam∂es
, 
TIFFOvrCache
 ** 
∑poRawBIs
,

546 
uöt32
 
nSXOff
, uöt32 
nSYOff
,

547 *
∑bySrcTûe
,

548 
uöt32
 
nBlockXSize
, uöt32 
nBlockYSize
,

549 
nSam∂eF‹m©
, c⁄° * 
pszReßm∂ög
 )

552 
iOvîvõw
, 
iSam∂e
;

554  
iSam∂e
 = 0; iSam∂ê< 
nSam∂es
; iSample++ )

561 if–
nPœ«rC⁄fig
 =
PLANARCONFIG_SEPARATE
 || 
iSam∂e
 == 0 )

563 if–
	`TIFFIsTûed
(
hTIFF
) )

565 
	`TIFFRódEncodedTûe
–
hTIFF
,

566 
	`TIFFCompuãTûe
(
hTIFF
, 
nSXOff
, 
nSYOff
,

567 0, (
tßm∂e_t
)
iSam∂e
 ),

568 
∑bySrcTûe
,

569 
	`TIFFTûeSize
(
hTIFF
));

573 
	`TIFFRódEncodedSåù
–
hTIFF
,

574 
	`TIFFCompuãSåù
(
hTIFF
, 
nSYOff
,

575 (
tßm∂e_t
Ë
iSam∂e
),

576 
∑bySrcTûe
,

577 
	`TIFFSåùSize
(
hTIFF
) );

584  
iOvîvõw
 = 0; iOvîvõw < 
nOvîvõws
; iOverview++ )

586 
TIFFOvrCache
 *
poRBI
 = 
∑poRawBIs
[
iOvîvõw
];

587 *
∑byOTûe
;

588 
uöt32
 
nTXOff
, 
nTYOff
, 
nOXOff
, 
nOYOff
, 
nOMu…
;

589 
uöt32
 
nOBlockXSize
 = 
poRBI
->
nBlockXSize
;

590 
uöt32
 
nOBlockYSize
 = 
poRBI
->
nBlockYSize
;

591 
nSkewBôs
, 
nSam∂eByãOff£t
;

596 
nOMu…
 = 
∑nOvLi°
[
iOvîvõw
];

597 
nOXOff
 = (
nSXOff
/
nOMu…
Ë/ 
nOBlockXSize
;

598 
nOYOff
 = (
nSYOff
/
nOMu…
Ë/ 
nOBlockYSize
;

600 if–
bSubßm∂ed
 )

602 
∑byOTûe
 = 
	`TIFFGëOvrBlock_Subßm∂ed
–
poRBI
, 
nOXOff
, 
nOYOff
 );

608 
nTXOff
 = (
nSXOff
 - 
nOXOff
*
nOMu…
*
nOBlockXSize
) /ÇOMult;

609 
nTYOff
 = (
nSYOff
 - 
nOYOff
*
nOMu…
*
nOBlockYSize
) /ÇOMult;

612 #ifde‡
DBMALLOC


613 
	`mÆloc_chaö_check
( 1 );

615 
	`TIFF_DownSam∂e_Subßm∂ed
–
∑bySrcTûe
, 
iSam∂e
,

616 
nBlockXSize
, 
nBlockYSize
,

617 
∑byOTûe
,

618 
poRBI
->
nBlockXSize
,ÖoRBI->
nBlockYSize
,

619 
nTXOff
, 
nTYOff
,

620 
nOMu…
, 
pszReßm∂ög
,

621 
nH‹Subßm∂ög
, 
nVîSubßm∂ög
 );

622 #ifde‡
DBMALLOC


623 
	`mÆloc_chaö_check
( 1 );

630 
∑byOTûe
 = 
	`TIFFGëOvrBlock
–
poRBI
, 
nOXOff
, 
nOYOff
, 
iSam∂e
 );

636 
nTXOff
 = (
nSXOff
 - 
nOXOff
*
nOMu…
*
nOBlockXSize
) /ÇOMult;

637 
nTYOff
 = (
nSYOff
 - 
nOYOff
*
nOMu…
*
nOBlockYSize
) /ÇOMult;

643 
	`as£π
–(
nBôsPîPixñ
 % 8) == 0 );

644 if–
nPœ«rC⁄fig
 =
PLANARCONFIG_SEPARATE
 )

646 
nSkewBôs
 = 0;

647 
nSam∂eByãOff£t
 = 0;

651 
nSkewBôs
 = 
nBôsPîPixñ
 * (
nSam∂es
-1);

652 
nSam∂eByãOff£t
 = (
nBôsPîPixñ
/8Ë* 
iSam∂e
;

658 #ifde‡
DBMALLOC


659 
	`mÆloc_chaö_check
( 1 );

661 
	`TIFF_DownSam∂e
–
∑bySrcTûe
 + 
nSam∂eByãOff£t
,

662 
nBlockXSize
, 
nBlockYSize
,

663 
nSkewBôs
, 
nBôsPîPixñ
, 
∑byOTûe
,

664 
poRBI
->
nBlockXSize
,ÖoRBI->
nBlockYSize
,

665 
nTXOff
, 
nTYOff
,

666 
nOMu…
, 
nSam∂eF‹m©
, 
pszReßm∂ög
 );

667 #ifde‡
DBMALLOC


668 
	`mÆloc_chaö_check
( 1 );

673 
	}
}

685 
	$TIFFBuûdOvîvõws
–
TIFF
 *
hTIFF
, 
nOvîvõws
, * 
∑nOvLi°
,

686 
bU£SubIFDs
, c⁄° *
pszReßm∂eMëhod
,

687 (*
p‚Progªss
)( , * ),

688 * 
pProgªssD©a
 )

691 
TIFFOvrCache
 **
∑poRawBIs
;

692 
uöt32
 
nXSize
, 
nYSize
, 
nBlockXSize
, 
nBlockYSize
;

693 
uöt16
 
nBôsPîPixñ
, 
nPhŸomëric
, 
nCom¥essFœg
, 
nSam∂es
,

694 
nPœ«rC⁄fig
, 
nSam∂eF‹m©
;

695 
bSubßm∂ed
;

696 
uöt16
 
nH‹Subßm∂ög
, 
nVîSubßm∂ög
;

697 
bTûed
, 
nSXOff
, 
nSYOff
, 
i
;

698 *
∑bySrcTûe
;

699 
uöt16
 *
∑nRedM≠
, *
∑nGªíM≠
, *
∑nBlueM≠
;

700 
TIFFEº‹H™dÀr
 
p‚W¨nög
;

702 (Ë
p‚Progªss
;

703 (Ë
pProgªssD©a
;

708 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_IMAGEWIDTH
, &
nXSize
 );

709 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_IMAGELENGTH
, &
nYSize
 );

711 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_BITSPERSAMPLE
, &
nBôsPîPixñ
 );

713 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_SAMPLESPERPIXEL
, &
nSam∂es
 );

714 
	`TIFFGëFõldDeÁu…ed
–
hTIFF
, 
TIFFTAG_PLANARCONFIG
, &
nPœ«rC⁄fig
 );

716 
	`TIFFGëFõldDeÁu…ed
–
hTIFF
, 
TIFFTAG_PHOTOMETRIC
, &
nPhŸomëric
 );

717 
	`TIFFGëFõldDeÁu…ed
–
hTIFF
, 
TIFFTAG_COMPRESSION
, &
nCom¥essFœg
 );

718 
	`TIFFGëFõldDeÁu…ed
–
hTIFF
, 
TIFFTAG_SAMPLEFORMAT
, &
nSam∂eF‹m©
 );

720 if–
nPhŸomëric
 =
PHOTOMETRIC_YCBCR
 ||ÇPhŸomëri¯=
PHOTOMETRIC_ITULAB
 )

722 if–
nBôsPîPixñ
 !8 || 
nSam∂es
 !3 || 
nPœ«rC⁄fig
 !
PLANARCONFIG_CONTIG
 ||

723 
nSam∂eF‹m©
 !
SAMPLEFORMAT_UINT
)

726 
	`TIFFEº‹Ext
–
	`TIFFClõ¡d©a
(
hTIFF
), "TIFFBuildOverviews",

728 
	`TIFFFûeName
(
hTIFF
) );

735 
bSubßm∂ed
 = 1;

736 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_YCBCRSUBSAMPLING
, &
nH‹Subßm∂ög
, &
nVîSubßm∂ög
 );

741 if–
nBôsPîPixñ
 < 8 )

744 
	`TIFFEº‹Ext
–
	`TIFFClõ¡d©a
(
hTIFF
), "TIFFBuildOverviews",

747 
	`TIFFFûeName
(
hTIFF
), 
nBôsPîPixñ
 );

750 
bSubßm∂ed
 = 0;

751 
nH‹Subßm∂ög
 = 1;

752 
nVîSubßm∂ög
 = 1;

759 
p‚W¨nög
 = 
	`TIFFSëW¨nögH™dÀr
–
NULL
 );

764 if–
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_ROWSPERSTRIP
, &(
nBlockYSize
) ) )

766 
nBlockXSize
 = 
nXSize
;

767 
bTûed
 = 
FALSE
;

771 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_TILEWIDTH
, &
nBlockXSize
 );

772 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_TILELENGTH
, &
nBlockYSize
 );

773 
bTûed
 = 
TRUE
;

779 if–
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_COLORMAP
,

780 &
∑nRedM≠
, &
∑nGªíM≠
, &
∑nBlueM≠
 ) )

782 
uöt16
 *
∑nRed2
, *
∑nGªí2
, *
∑nBlue2
;

783 
nCﬁ‹Cou¡
 = 1 << 
nBôsPîPixñ
;

785 
∑nRed2
 = (
uöt16
 *Ë
	`_TIFFmÆloc
(2*
nCﬁ‹Cou¡
);

786 
∑nGªí2
 = (
uöt16
 *Ë
	`_TIFFmÆloc
(2*
nCﬁ‹Cou¡
);

787 
∑nBlue2
 = (
uöt16
 *Ë
	`_TIFFmÆloc
(2*
nCﬁ‹Cou¡
);

789 
	`mem˝y
–
∑nRed2
, 
∑nRedM≠
, 2 * 
nCﬁ‹Cou¡
 );

790 
	`mem˝y
–
∑nGªí2
, 
∑nGªíM≠
, 2 * 
nCﬁ‹Cou¡
 );

791 
	`mem˝y
–
∑nBlue2
, 
∑nBlueM≠
, 2 * 
nCﬁ‹Cou¡
 );

793 
∑nRedM≠
 = 
∑nRed2
;

794 
∑nGªíM≠
 = 
∑nGªí2
;

795 
∑nBlueM≠
 = 
∑nBlue2
;

799 
∑nRedM≠
 = 
∑nGªíM≠
 = 
∑nBlueM≠
 = 
NULL
;

805 
∑poRawBIs
 = (
TIFFOvrCache
 **Ë
	`_TIFFmÆloc
(
nOvîvõws
*(*));

807  
i
 = 0; i < 
nOvîvõws
; i++ )

809 
uöt32
 
nOXSize
, 
nOYSize
, 
nOBlockXSize
, 
nOBlockYSize
;

810 
toff_t
 
nDúOff£t
;

812 
nOXSize
 = (
nXSize
 + 
∑nOvLi°
[
i
] - 1) /ÖanOvList[i];

813 
nOYSize
 = (
nYSize
 + 
∑nOvLi°
[
i
] - 1) /ÖanOvList[i];

815 
nOBlockXSize
 = 
	`MIN
(
nBlockXSize
,
nOXSize
);

816 
nOBlockYSize
 = 
	`MIN
(
nBlockYSize
,
nOYSize
);

818 if–
bTûed
 )

820 if–(
nOBlockXSize
 % 16) != 0 )

821 
nOBlockXSize
 =ÇOBlockXSize + 16 - (nOBlockXSize % 16);

823 if–(
nOBlockYSize
 % 16) != 0 )

824 
nOBlockYSize
 =ÇOBlockYSize + 16 - (nOBlockYSize % 16);

827 
nDúOff£t
 = 
	`TIFF_WrôeOvîvõw
–
hTIFF
, 
nOXSize
, 
nOYSize
,

828 
nBôsPîPixñ
, 
nPœ«rC⁄fig
,

829 
nSam∂es
, 
nOBlockXSize
, 
nOBlockYSize
,

830 
bTûed
, 
nCom¥essFœg
, 
nPhŸomëric
,

831 
nSam∂eF‹m©
,

832 
∑nRedM≠
, 
∑nGªíM≠
, 
∑nBlueM≠
,

833 
bU£SubIFDs
,

834 
nH‹Subßm∂ög
, 
nVîSubßm∂ög
 );

836 
∑poRawBIs
[
i
] = 
	`TIFFCª©eOvrCache
–
hTIFF
, 
nDúOff£t
 );

839 if–
∑nRedM≠
 !
NULL
 )

841 
	`_TIFF‰ì
–
∑nRedM≠
 );

842 
	`_TIFF‰ì
–
∑nGªíM≠
 );

843 
	`_TIFF‰ì
–
∑nBlueM≠
 );

849 if–
bTûed
 )

850 
∑bySrcTûe
 = (*Ë
	`_TIFFmÆloc
(
	`TIFFTûeSize
(
hTIFF
));

852 
∑bySrcTûe
 = (*Ë
	`_TIFFmÆloc
(
	`TIFFSåùSize
(
hTIFF
));

858  
nSYOff
 = 0;ÇSYOf‡< (Ë
nYSize
;ÇSYOf‡+
nBlockYSize
 )

860  
nSXOff
 = 0;ÇSXOf‡< (Ë
nXSize
;ÇSXOf‡+
nBlockXSize
 )

866 
	`TIFF_Pro˚ssFuŒResBlock
–
hTIFF
, 
nPœ«rC⁄fig
,

867 
bSubßm∂ed
,
nH‹Subßm∂ög
,
nVîSubßm∂ög
,

868 
nOvîvõws
, 
∑nOvLi°
,

869 
nBôsPîPixñ
, 
nSam∂es
, 
∑poRawBIs
,

870 
nSXOff
, 
nSYOff
, 
∑bySrcTûe
,

871 
nBlockXSize
, 
nBlockYSize
,

872 
nSam∂eF‹m©
, 
pszReßm∂eMëhod
 );

876 
	`_TIFF‰ì
–
∑bySrcTûe
 );

881  
i
 = 0; i < 
nOvîvõws
; i++ )

883 
	`TIFFDe°royOvrCache
–
∑poRawBIs
[
i
] );

886 if–
∑poRawBIs
 !
NULL
 )

887 
	`_TIFF‰ì
–
∑poRawBIs
 );

889 
	`TIFFSëW¨nögH™dÀr
–
p‚W¨nög
 );

890 
	}
}

	@contrib/addtiffo/tif_ovrcache.c

32 
	~"tiffi›.h
"

33 
	~"tif_ovrˇche.h
"

34 
	~<as£π.h
>

43 
TIFFOvrCache
 *
	$TIFFCª©eOvrCache
–
TIFF
 *
hTIFF
, 
toff_t
 
nDúOff£t
 )

46 
TIFFOvrCache
 *
psCache
;

47 
toff_t
 
nBa£DúOff£t
;

49 
psCache
 = (
TIFFOvrCache
 *Ë
	`_TIFFmÆloc
((TIFFOvrCache));

50 
psCache
->
nDúOff£t
 =ÇDirOffset;

51 
psCache
->
hTIFF
 = hTIFF;

56 
nBa£DúOff£t
 = 
	`TIFFCuºítDúOff£t
–
psCache
->
hTIFF
 );

57 
	`TIFFSëSubDúe˘‹y
–
hTIFF
, 
nDúOff£t
 );

59 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_IMAGEWIDTH
, &(
psCache
->
nXSize
) );

60 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_IMAGELENGTH
, &(
psCache
->
nYSize
) );

62 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_BITSPERSAMPLE
, &(
psCache
->
nBôsPîPixñ
) );

63 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_SAMPLESPERPIXEL
, &(
psCache
->
nSam∂es
) );

64 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_PLANARCONFIG
, &(
psCache
->
nPœ«rC⁄fig
) );

66 if–!
	`TIFFIsTûed
–
hTIFF
 ) )

68 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_ROWSPERSTRIP
, &(
psCache
->
nBlockYSize
) );

69 
psCache
->
nBlockXSize
 =ÖsCache->
nXSize
;

70 
psCache
->
nByãsPîBlock
 = 
	`TIFFSåùSize
(
hTIFF
);

71 
psCache
->
bTûed
 = 
FALSE
;

75 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_TILEWIDTH
, &(
psCache
->
nBlockXSize
) );

76 
	`TIFFGëFõld
–
hTIFF
, 
TIFFTAG_TILELENGTH
, &(
psCache
->
nBlockYSize
) );

77 
psCache
->
nByãsPîBlock
 = 
	`TIFFTûeSize
(
hTIFF
);

78 
psCache
->
bTûed
 = 
TRUE
;

85 
psCache
->
nBlocksPîRow
 = (psCache->
nXSize
 +ÖsCache->
nBlockXSize
 - 1)

86 / 
psCache
->
nBlockXSize
;

87 
psCache
->
nBlocksPîCﬁumn
 = (psCache->
nYSize
 +ÖsCache->
nBlockYSize
 - 1)

88 / 
psCache
->
nBlockYSize
;

90 i‡(
psCache
->
nPœ«rC⁄fig
 =
PLANARCONFIG_SEPARATE
)

91 
psCache
->
nByãsPîRow
 =ÖsCache->
nByãsPîBlock


92 * 
psCache
->
nBlocksPîRow
 *ÖsCache->
nSam∂es
;

94 
psCache
->
nByãsPîRow
 =

95 
psCache
->
nByãsPîBlock
 *ÖsCache->
nBlocksPîRow
;

102 
psCache
->
∑byRow1Blocks
 =

103 (*Ë
	`_TIFFmÆloc
(
psCache
->
nByãsPîRow
);

104 
psCache
->
∑byRow2Blocks
 =

105 (*Ë
	`_TIFFmÆloc
(
psCache
->
nByãsPîRow
);

107 if–
psCache
->
∑byRow1Blocks
 =
NULL


108 || 
psCache
->
∑byRow2Blocks
 =
NULL
 )

110 
	`TIFFEº‹Ext
–
hTIFF
->
tif_˛õ¡d©a
, hTIFF->
tif_«me
,

113  
NULL
;

116 
	`_TIFFmem£t
–
psCache
->
∑byRow1Blocks
, 0,ÖsCache->
nByãsPîRow
 );

117 
	`_TIFFmem£t
–
psCache
->
∑byRow2Blocks
, 0,ÖsCache->
nByãsPîRow
 );

119 
psCache
->
nBlockOff£t
 = 0;

121 
	`TIFFSëSubDúe˘‹y
–
psCache
->
hTIFF
, 
nBa£DúOff£t
 );

123  
psCache
;

124 
	}
}

134 
	$TIFFWrôeOvrRow
–
TIFFOvrCache
 * 
psCache
 )

137 
nRë
, 
iTûeX
, 
iTûeY
 = 
psCache
->
nBlockOff£t
;

138 *
∑byD©a
;

139 
toff_t
 
nBa£DúOff£t
;

140 
uöt32
 
RowsInSåù
;

147 if–
	`TIFFIsByãSw≠≥d
(
psCache
->
hTIFF
) )

149 if–
psCache
->
nBôsPîPixñ
 == 16 )

150 
	`TIFFSwabAºayOfSh‹t
–(
uöt16
 *Ë
psCache
->
∑byRow1Blocks
,

151 (
psCache
->
nByãsPîBlock
 *ÖsCache->
nSam∂es
) / 2 );

153 if–
psCache
->
nBôsPîPixñ
 == 32 )

154 
	`TIFFSwabAºayOfL⁄g
–(
uöt32
 *Ë
psCache
->
∑byRow1Blocks
,

155 (
psCache
->
nByãsPîBlock
 *ÖsCache->
nSam∂es
) / 4 );

157 if–
psCache
->
nBôsPîPixñ
 == 64 )

158 
	`TIFFSwabAºayOfDoubÀ
–(*Ë
psCache
->
∑byRow1Blocks
,

159 (
psCache
->
nByãsPîBlock
 *ÖsCache->
nSam∂es
) / 8 );

166 
nBa£DúOff£t
 = 
	`TIFFCuºítDúOff£t
–
psCache
->
hTIFF
 );

167 
nRë
 = 
	`TIFFSëSubDúe˘‹y
–
psCache
->
hTIFF
,ÖsCache->
nDúOff£t
 );

168 
	`as£π
–
nRë
 == 1 );

173  
iTûeX
 = 0; iTûeX < 
psCache
->
nBlocksPîRow
; iTileX++ )

175 
nTûeID
;

177 i‡(
psCache
->
nPœ«rC⁄fig
 =
PLANARCONFIG_SEPARATE
)

179 
iSam∂e
;

181  
iSam∂e
 = 0; iSam∂ê< 
psCache
->
nSam∂es
; iSample++ )

183 
∑byD©a
 = 
	`TIFFGëOvrBlock
–
psCache
, 
iTûeX
, 
iTûeY
, 
iSam∂e
 );

185 if–
psCache
->
bTûed
 )

187 
nTûeID
 = 
	`TIFFCompuãTûe
–
psCache
->
hTIFF
,

188 
iTûeX
 * 
psCache
->
nBlockXSize
,

189 
iTûeY
 * 
psCache
->
nBlockYSize
,

190 0, (
tßm∂e_t
Ë
iSam∂e
 );

191 
	`TIFFWrôeEncodedTûe
–
psCache
->
hTIFF
, 
nTûeID
,

192 
∑byD©a
,

193 
	`TIFFTûeSize
(
psCache
->
hTIFF
) );

197 
nTûeID
 = 
	`TIFFCompuãSåù
–
psCache
->
hTIFF
,

198 
iTûeY
 * 
psCache
->
nBlockYSize
,

199 (
tßm∂e_t
Ë
iSam∂e
 );

200 
RowsInSåù
=
psCache
->
nBlockYSize
;

201 i‡((
iTûeY
+1)*
psCache
->
nBlockYSize
>psCache->
nYSize
)

202 
RowsInSåù
=
psCache
->
nYSize
-
iTûeY
*psCache->
nBlockYSize
;

203 
	`TIFFWrôeEncodedSåù
–
psCache
->
hTIFF
, 
nTûeID
,

204 
∑byD©a
,

205 
	`TIFFVSåùSize
(
psCache
->
hTIFF
,
RowsInSåù
) );

212 
∑byD©a
 = 
	`TIFFGëOvrBlock
–
psCache
, 
iTûeX
, 
iTûeY
, 0 );

214 if–
psCache
->
bTûed
 )

216 
nTûeID
 = 
	`TIFFCompuãTûe
–
psCache
->
hTIFF
,

217 
iTûeX
 * 
psCache
->
nBlockXSize
,

218 
iTûeY
 * 
psCache
->
nBlockYSize
,

220 
	`TIFFWrôeEncodedTûe
–
psCache
->
hTIFF
, 
nTûeID
,

221 
∑byD©a
,

222 
	`TIFFTûeSize
(
psCache
->
hTIFF
) );

226 
nTûeID
 = 
	`TIFFCompuãSåù
–
psCache
->
hTIFF
,

227 
iTûeY
 * 
psCache
->
nBlockYSize
,

229 
RowsInSåù
=
psCache
->
nBlockYSize
;

230 i‡((
iTûeY
+1)*
psCache
->
nBlockYSize
>psCache->
nYSize
)

231 
RowsInSåù
=
psCache
->
nYSize
-
iTûeY
*psCache->
nBlockYSize
;

232 
	`TIFFWrôeEncodedSåù
–
psCache
->
hTIFF
, 
nTûeID
,

233 
∑byD©a
,

234 
	`TIFFVSåùSize
(
psCache
->
hTIFF
,
RowsInSåù
) );

243 
∑byD©a
 = 
psCache
->
∑byRow1Blocks
;

244 
psCache
->
∑byRow1Blocks
 =ÖsCache->
∑byRow2Blocks
;

245 
psCache
->
∑byRow2Blocks
 = 
∑byD©a
;

247 
	`_TIFFmem£t
–
∑byD©a
, 0, 
psCache
->
nByãsPîRow
 );

249 
psCache
->
nBlockOff£t
++;

254 
	`TIFFFlush
–
psCache
->
hTIFF
 );

256 
	`TIFFSëSubDúe˘‹y
–
psCache
->
hTIFF
, 
nBa£DúOff£t
 );

258 
	}
}

266 *
	$TIFFGëOvrBlock
–
TIFFOvrCache
 *
psCache
, 
iTûeX
, 
iTûeY
,

267 
iSam∂e
 )

270 
nRowOff£t
;

272 if–
iTûeY
 > 
psCache
->
nBlockOff£t
 + 1 )

273 
	`TIFFWrôeOvrRow
–
psCache
 );

275 
	`as£π
–
iTûeX
 >0 && iTûeX < 
psCache
->
nBlocksPîRow
 );

276 
	`as£π
–
iTûeY
 >0 && iTûeY < 
psCache
->
nBlocksPîCﬁumn
 );

277 
	`as£π
–
iTûeY
 >
psCache
->
nBlockOff£t


278 && 
iTûeY
 < 
psCache
->
nBlockOff£t
+2 );

279 
	`as£π
–
iSam∂e
 >0 && iSam∂ê< 
psCache
->
nSam∂es
 );

281 i‡(
psCache
->
nPœ«rC⁄fig
 =
PLANARCONFIG_SEPARATE
)

282 
nRowOff£t
 = ((
iTûeX
 * 
psCache
->
nSam∂es
Ë+ 
iSam∂e
)

283 * 
psCache
->
nByãsPîBlock
;

285 
nRowOff£t
 = 
iTûeX
 * 
psCache
->
nByãsPîBlock
 +

286 (
psCache
->
nBôsPîPixñ
 + 7Ë/ 8 * 
iSam∂e
;

288 if–
iTûeY
 =
psCache
->
nBlockOff£t
 )

289  
psCache
->
∑byRow1Blocks
 + 
nRowOff£t
;

291  
psCache
->
∑byRow2Blocks
 + 
nRowOff£t
;

292 
	}
}

298 *
	$TIFFGëOvrBlock_Subßm∂ed
–
TIFFOvrCache
 *
psCache
,

299 
iTûeX
, 
iTûeY
 )

302 
nRowOff£t
;

304 if–
iTûeY
 > 
psCache
->
nBlockOff£t
 + 1 )

305 
	`TIFFWrôeOvrRow
–
psCache
 );

307 
	`as£π
–
iTûeX
 >0 && iTûeX < 
psCache
->
nBlocksPîRow
 );

308 
	`as£π
–
iTûeY
 >0 && iTûeY < 
psCache
->
nBlocksPîCﬁumn
 );

309 
	`as£π
–
iTûeY
 >
psCache
->
nBlockOff£t


310 && 
iTûeY
 < 
psCache
->
nBlockOff£t
+2 );

311 
	`as£π
–
psCache
->
nPœ«rC⁄fig
 !
PLANARCONFIG_SEPARATE
 );

313 
nRowOff£t
 = 
iTûeX
 * 
psCache
->
nByãsPîBlock
;

315 if–
iTûeY
 =
psCache
->
nBlockOff£t
 )

316  
psCache
->
∑byRow1Blocks
 + 
nRowOff£t
;

318  
psCache
->
∑byRow2Blocks
 + 
nRowOff£t
;

319 
	}
}

325 
	$TIFFDe°royOvrCache
–
TIFFOvrCache
 * 
psCache
 )

328  
psCache
->
nBlockOff£t
 <ÖsCache->
nBlocksPîCﬁumn
 )

329 
	`TIFFWrôeOvrRow
–
psCache
 );

331 
	`_TIFF‰ì
–
psCache
->
∑byRow1Blocks
 );

332 
	`_TIFF‰ì
–
psCache
->
∑byRow2Blocks
 );

333 
	`_TIFF‰ì
–
psCache
 );

334 
	}
}

	@contrib/addtiffo/tif_ovrcache.h

35 #i‚de‡
TIF_OVRCACHE_H_INCLUDED


36 
	#TIF_OVRCACHE_H_INCLUDED


	)

38 
	~"tiffio.h
"

40 #i‡
deföed
(
__˝lu•lus
)

46 
uöt32
 
nXSize
;

47 
uöt32
 
nYSize
;

49 
uöt16
 
nBôsPîPixñ
;

50 
uöt16
 
nSam∂es
;

51 
uöt16
 
nPœ«rC⁄fig
;

52 
uöt32
 
nBlockXSize
;

53 
uöt32
 
nBlockYSize
;

54 
toff_t
 
nByãsPîBlock
;

55 
toff_t
 
nByãsPîRow
;

57 
nBlocksPîRow
;

58 
nBlocksPîCﬁumn
;

60 
nBlockOff£t
;

61 *
∑byRow1Blocks
;

62 *
∑byRow2Blocks
;

64 
toff_t
 
nDúOff£t
;

65 
TIFF
 *
hTIFF
;

66 
bTûed
;

68 } 
	tTIFFOvrCache
;

70 
TIFFOvrCache
 *
TIFFCª©eOvrCache
–
TIFF
 *
hTIFF
, 
toff_t
 
nDúOff£t
 );

71 *
TIFFGëOvrBlock
–
TIFFOvrCache
 *
psCache
, 
iTûeX
, 
iTûeY
,

72 
iSam∂e
 );

73 *
TIFFGëOvrBlock_Subßm∂ed
–
TIFFOvrCache
 *
psCache
, 
iTûeX
, 
iTûeY
 );

74 
TIFFDe°royOvrCache
–
TIFFOvrCache
 * );

76 
TIFFBuûdOvîvõws
–
TIFF
 *, , *, , const *,

79 
TIFF_Pro˚ssFuŒResBlock
–
TIFF
 *, , , , , , *, ,

80 , 
TIFFOvrCache
 **, 
uöt32
, uint32,

81 *, 
uöt32
, uint32,

84 
uöt32
 
TIFF_WrôeOvîvõw
–
TIFF
 *, uint32, uint32, , , , , ,

91 #i‡
deföed
(
__˝lu•lus
)

	@contrib/dbs/tiff-bi.c

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

30 
	~"tiffio.h
"

32 
	#WIDTH
 512

	)

33 
	#HEIGHT
 
WIDTH


	)

35 
	$maö
(
¨gc
, **
¨gv
)

37 
i
;

38 * 
sˇn_löe
;

39 
TIFF
 * 
tif
;

41 i‡(
¨gc
 != 2) {

42 
	`Ârötf
(
°dîr
, "Ußge: %†tiff-image\n", 
¨gv
[0]);

46 i‡((
tif
 = 
	`TIFFO≥n
(
¨gv
[1], "w")Ë=
NULL
) {

47 
	`Ârötf
(
°dîr
, "ˇn'à›í %†a†®TIFF fûe\n", 
¨gv
[1]);

51 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
WIDTH
);

52 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
HEIGHT
);

53 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 1);

54 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_NONE
);

55 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_MINISBLACK
);

56 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 1);

57 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 1);

58 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

59 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_RESOLUTIONUNIT
, 
RESUNIT_NONE
);

61 
sˇn_löe
 = (*Ë
	`mÆloc
(
WIDTH
 / 8);

63 
i
 = 0; i < (
WIDTH
 / 8) / 2; i++)

64 
sˇn_löe
[
i
] = 0;

66 
i
 = (
WIDTH
 / 8) / 2; i < (WIDTH / 8); i++)

67 
sˇn_löe
[
i
] = 255;

69 
i
 = 0; i < 
HEIGHT
 / 2; i++)

70 
	`TIFFWrôeSˇ∆öe
(
tif
, 
sˇn_löe
, 
i
, 0);

72 
i
 = 0; i < (
WIDTH
 / 8) / 2; i++)

73 
sˇn_löe
[
i
] = 255;

75 
i
 = (
WIDTH
 / 8) / 2; i < (WIDTH / 8); i++)

76 
sˇn_löe
[
i
] = 0;

78 
i
 = 
HEIGHT
 / 2; i < HEIGHT; i++)

79 
	`TIFFWrôeSˇ∆öe
(
tif
, 
sˇn_löe
, 
i
, 0);

81 
	`‰ì
(
sˇn_löe
);

82 
	`TIFFClo£
(
tif
);

84 
	}
}

	@contrib/dbs/tiff-grayscale.c

28 
	~<m©h.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

33 
	~"tiffio.h
"

35 
	#WIDTH
 512

	)

36 
	#HEIGHT
 
WIDTH


	)

38 * 
	g¥ogømName
;

39 
Ußge
();

41 
	$maö
(
¨gc
, **
¨gv
)

43 
bôs_≥r_pixñ
 = 8, 
cmsize
, 
i
, 
j
, 
k
,

44 
gøy_ödex
, 
chunk_size
 = 32, 
nchunks
 = 16;

45 * 
sˇn_löe
;

46 
uöt16
 * 
gøy
;

47 
ªfbœckwhôe
[2*1];

48 
TIFF
 * 
tif
;

50 
¥ogømName
 = 
¨gv
[0];

52 i‡(
¨gc
 != 4)

53 
	`Ußge
();

55 i‡(!
	`°rcmp
(
¨gv
[1], "-depth"))

56 
bôs_≥r_pixñ
 = 
	`©oi
(
¨gv
[2]);

58 
	`Ußge
();

60 
bôs_≥r_pixñ
) {

62 
nchunks
 = 16;

63 
chunk_size
 = 32;

66 
nchunks
 = 4;

67 
chunk_size
 = 128;

70 
nchunks
 = 2;

71 
chunk_size
 = 256;

74 
	`Ußge
();

77 
cmsize
 = 
nchunks
 *Çchunks;

78 
gøy
 = (
uöt16
 *Ë
	`mÆloc
(
cmsize
 * (uint16));

80 
gøy
[0] = 3000;

81 
i
 = 1; i < 
cmsize
; i++)

82 
gøy
[
i
] = (
uöt16
Ë(-
	`log10
((Ëò/ (
cmsize
 - 1)) * 1000);

84 
ªfbœckwhôe
[0] = 0.0;

85 
ªfbœckwhôe
[1] = ()((1L<<
bôs_≥r_pixñ
) - 1);

87 i‡((
tif
 = 
	`TIFFO≥n
(
¨gv
[3], "w")Ë=
NULL
) {

88 
	`Ârötf
(
°dîr
, "ˇn'à›í %†a†®TIFF fûe\n", 
¨gv
[3]);

89 
	`‰ì
(
gøy
);

93 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
WIDTH
);

94 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
HEIGHT
);

95 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 
bôs_≥r_pixñ
);

96 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_NONE
);

97 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_MINISBLACK
);

98 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 1);

99 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 1);

100 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

101 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_REFERENCEBLACKWHITE
, 
ªfbœckwhôe
);

102 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_TRANSFERFUNCTION
, 
gøy
);

103 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_RESOLUTIONUNIT
, 
RESUNIT_NONE
);

105 
sˇn_löe
 = (*Ë
	`mÆloc
(
WIDTH
 / (8 / 
bôs_≥r_pixñ
));

107 
i
 = 0; i < 
HEIGHT
; i++) {

108 
j
 = 0, 
k
 = 0; j < 
WIDTH
;) {

109 
gøy_ödex
 = (
j
 / 
chunk_size
Ë+ ((
i
 / chunk_sizeË* 
nchunks
);

111 
bôs_≥r_pixñ
) {

113 
sˇn_löe
[
k
++] = 
gøy_ödex
;

114 
j
++;

117 
sˇn_löe
[
k
++] = (
gøy_ödex
 << 4) + gray_index;

118 
j
 += 2;

121 
sˇn_löe
[
k
++] = (
gøy_ödex
 << 6) + (gray_index << 4)

122 + (
gøy_ödex
 << 2) + gray_index;

123 
j
 += 4;

127 
	`TIFFWrôeSˇ∆öe
(
tif
, 
sˇn_löe
, 
i
, 0);

130 
	`‰ì
(
sˇn_löe
);

131 
	`TIFFClo£
(
tif
);

133 
	}
}

136 
	$Ußge
()

138 
	`Ârötf
(
°dîr
, "Ußge: %†-dïth (8 | 4 | 2Ëtiff-image\n", 
¥ogømName
);

139 
	`exô
(0);

140 
	}
}

	@contrib/dbs/tiff-palette.c

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

31 
	~"tiffio.h
"

33 
	#WIDTH
 512

	)

34 
	#HEIGHT
 
WIDTH


	)

35 
	#SCALE
(
x
Ë((xË* 257L)

	)

37 * 
	g¥ogømName
;

38 
Ußge
();

40 
	$maö
(
¨gc
, **
¨gv
)

42 
bôs_≥r_pixñ
 = 8, 
cmsize
, 
i
, 
j
, 
k
,

43 
cm≠_ödex
, 
chunk_size
 = 32, 
nchunks
 = 16;

44 * 
sˇn_löe
;

45 
uöt16
 *
ªd
, *
gªí
, *
blue
;

46 
TIFF
 * 
tif
;

48 
¥ogømName
 = 
¨gv
[0];

50 i‡(
¨gc
 != 4)

51 
	`Ußge
();

53 i‡(!
	`°rcmp
(
¨gv
[1], "-depth"))

54 
bôs_≥r_pixñ
 = 
	`©oi
(
¨gv
[2]);

56 
	`Ußge
();

58 
bôs_≥r_pixñ
) {

60 
nchunks
 = 16;

61 
chunk_size
 = 32;

64 
nchunks
 = 4;

65 
chunk_size
 = 128;

68 
nchunks
 = 2;

69 
chunk_size
 = 256;

72 
nchunks
 = 2;

73 
chunk_size
 = 256;

76 
	`Ußge
();

79 i‡(
bôs_≥r_pixñ
 != 1) {

80 
cmsize
 = 
nchunks
 *Çchunks;

82 
cmsize
 = 2;

84 
ªd
 = (
uöt16
 *Ë
	`mÆloc
(
cmsize
 * (uint16));

85 
gªí
 = (
uöt16
 *Ë
	`mÆloc
(
cmsize
 * (uint16));

86 
blue
 = (
uöt16
 *Ë
	`mÆloc
(
cmsize
 * (uint16));

88 
bôs_≥r_pixñ
) {

90 
i
 = 0; i < 
cmsize
; i++) {

91 i‡(
i
 < 32)

92 
ªd
[
i
] = 0;

93 i‡(
i
 < 64)

94 
ªd
[
i
] = 
	`SCALE
(36);

95 i‡(
i
 < 96)

96 
ªd
[
i
] = 
	`SCALE
(73);

97 i‡(
i
 < 128)

98 
ªd
[
i
] = 
	`SCALE
(109);

99 i‡(
i
 < 160)

100 
ªd
[
i
] = 
	`SCALE
(146);

101 i‡(
i
 < 192)

102 
ªd
[
i
] = 
	`SCALE
(182);

103 i‡(
i
 < 224)

104 
ªd
[
i
] = 
	`SCALE
(219);

105 i‡(
i
 < 256)

106 
ªd
[
i
] = 
	`SCALE
(255);

108 i‡((
i
 % 32) < 4)

109 
gªí
[
i
] = 0;

110 i‡(
i
 < 8)

111 
gªí
[
i
] = 
	`SCALE
(36);

112 i‡((
i
 % 32) < 12)

113 
gªí
[
i
] = 
	`SCALE
(73);

114 i‡((
i
 % 32) < 16)

115 
gªí
[
i
] = 
	`SCALE
(109);

116 i‡((
i
 % 32) < 20)

117 
gªí
[
i
] = 
	`SCALE
(146);

118 i‡((
i
 % 32) < 24)

119 
gªí
[
i
] = 
	`SCALE
(182);

120 i‡((
i
 % 32) < 28)

121 
gªí
[
i
] = 
	`SCALE
(219);

122 i‡((
i
 % 32) < 32)

123 
gªí
[
i
] = 
	`SCALE
(255);

125 i‡((
i
 % 4) == 0)

126 
blue
[
i
] = 
	`SCALE
(0);

127 i‡((
i
 % 4) == 1)

128 
blue
[
i
] = 
	`SCALE
(85);

129 i‡((
i
 % 4) == 2)

130 
blue
[
i
] = 
	`SCALE
(170);

131 i‡((
i
 % 4) == 3)

132 
blue
[
i
] = 
	`SCALE
(255);

136 
ªd
[0] = 
	`SCALE
(255);

137 
gªí
[0] = 0;

138 
blue
[0] = 0;

140 
ªd
[1] = 0;

141 
gªí
[1] = 
	`SCALE
(255);

142 
blue
[1] = 0;

144 
ªd
[2] = 0;

145 
gªí
[2] = 0;

146 
blue
[2] = 
	`SCALE
(255);

148 
ªd
[3] = 
	`SCALE
(255);

149 
gªí
[3] = 
	`SCALE
(255);

150 
blue
[3] = 
	`SCALE
(255);

152 
ªd
[4] = 0;

153 
gªí
[4] = 
	`SCALE
(255);

154 
blue
[4] = 
	`SCALE
(255);

156 
ªd
[5] = 
	`SCALE
(255);

157 
gªí
[5] = 0;

158 
blue
[5] = 
	`SCALE
(255);

160 
ªd
[6] = 
	`SCALE
(255);

161 
gªí
[6] = 
	`SCALE
(255);

162 
blue
[6] = 0;

164 
ªd
[7] = 0;

165 
gªí
[7] = 0;

166 
blue
[7] = 0;

168 
ªd
[8] = 
	`SCALE
(176);

169 
gªí
[8] = 
	`SCALE
(224);

170 
blue
[8] = 
	`SCALE
(230);

171 
ªd
[9] = 
	`SCALE
(100);

172 
gªí
[9] = 
	`SCALE
(149);

173 
blue
[9] = 
	`SCALE
(237);

174 
ªd
[10] = 
	`SCALE
(46);

175 
gªí
[10] = 
	`SCALE
(139);

176 
blue
[10] = 
	`SCALE
(87);

177 
ªd
[11] = 
	`SCALE
(160);

178 
gªí
[11] = 
	`SCALE
(82);

179 
blue
[11] = 
	`SCALE
(45);

180 
ªd
[12] = 
	`SCALE
(238);

181 
gªí
[12] = 
	`SCALE
(130);

182 
blue
[12] = 
	`SCALE
(238);

183 
ªd
[13] = 
	`SCALE
(176);

184 
gªí
[13] = 
	`SCALE
(48);

185 
blue
[13] = 
	`SCALE
(96);

186 
ªd
[14] = 
	`SCALE
(50);

187 
gªí
[14] = 
	`SCALE
(205);

188 
blue
[14] = 
	`SCALE
(50);

189 
ªd
[15] = 
	`SCALE
(240);

190 
gªí
[15] = 
	`SCALE
(152);

191 
blue
[15] = 
	`SCALE
(35);

194 
ªd
[0] = 
	`SCALE
(255);

195 
gªí
[0] = 0;

196 
blue
[0] = 0;

198 
ªd
[1] = 0;

199 
gªí
[1] = 
	`SCALE
(255);

200 
blue
[1] = 0;

202 
ªd
[2] = 0;

203 
gªí
[2] = 0;

204 
blue
[2] = 
	`SCALE
(255);

205 
ªd
[3] = 
	`SCALE
(255);

206 
gªí
[3] = 
	`SCALE
(255);

207 
blue
[3] = 
	`SCALE
(255);

210 
ªd
[0] = 0;

211 
gªí
[0] = 0;

212 
blue
[0] = 0;

214 
ªd
[1] = 
	`SCALE
(255);

215 
gªí
[1] = 
	`SCALE
(255);

216 
blue
[1] = 
	`SCALE
(255);

220 i‡((
tif
 = 
	`TIFFO≥n
(
¨gv
[3], "w")Ë=
NULL
) {

221 
	`Ârötf
(
°dîr
, "ˇn'à›í %†a†®TIFF fûe\n", 
¨gv
[3]);

222 
	`‰ì
(
ªd
);‰ì(
gªí
);‰ì(
blue
);

226 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
WIDTH
);

227 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
HEIGHT
);

228 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 
bôs_≥r_pixñ
);

229 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_NONE
);

230 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_PALETTE
);

231 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 1);

232 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 1);

233 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

234 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_RESOLUTIONUNIT
, 
RESUNIT_NONE
);

235 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COLORMAP
, 
ªd
, 
gªí
, 
blue
);

237 
sˇn_löe
 = (*Ë
	`mÆloc
(
WIDTH
 / (8 / 
bôs_≥r_pixñ
));

239 
i
 = 0; i < 
HEIGHT
; i++) {

240 
j
 = 0, 
k
 = 0; j < 
WIDTH
;) {

241 
cm≠_ödex
 = (
j
 / 
chunk_size
Ë+ ((
i
 / chunk_sizeË* 
nchunks
);

243 
bôs_≥r_pixñ
) {

245 
sˇn_löe
[
k
++] = 
cm≠_ödex
;

246 
j
++;

249 
sˇn_löe
[
k
++] = (
cm≠_ödex
 << 4) + cmap_index;

250 
j
 += 2;

253 
sˇn_löe
[
k
++] = (
cm≠_ödex
 << 6) + (cmap_index << 4)

254 + (
cm≠_ödex
 << 2) + cmap_index;

255 
j
 += 4;

258 
sˇn_löe
[
k
++] =

259 ((
j
 / 
chunk_size
Ë=(
i
 / chunk_size)) ? 0x00 : 0xff;

260 
j
 += 8;

264 
	`TIFFWrôeSˇ∆öe
(
tif
, 
sˇn_löe
, 
i
, 0);

267 
	`‰ì
(
sˇn_löe
);

268 
	`TIFFClo£
(
tif
);

270 
	}
}

273 
	$Ußge
()

275 
	`Ârötf
(
°dîr
, "Ußge: %†-dïth (8 | 4 | 2 | 1Ëtiff-image\n", 
¥ogømName
);

276 
	`exô
(0);

277 
	}
}

	@contrib/dbs/tiff-rgb.c

27 
	~<m©h.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

32 
	~"tiffio.h
"

34 
	#ROUND
(
x
Ë(
uöt16
Ë((xË+ 0.5)

	)

35 
	#CMSIZE
 256

	)

36 
	#WIDTH
 525

	)

37 
	#HEIGHT
 512

	)

38 
	#TIFF_GAMMA
 2.2

	)

40 
Ußge
();

41 * 
	g¥ogømName
;

43 
	$maö
(
¨gc
, **
¨gv
)

45 * 
öput_fûe
 = 
NULL
;

46 
image_gamma
 = 
TIFF_GAMMA
;

47 
i
, 
j
;

48 
TIFF
 * 
tif
;

49 * 
sˇn_löe
;

50 
uöt16
 
ªd
[
CMSIZE
], 
gªí
[CMSIZE], 
blue
[CMSIZE];

51 
ªfbœckwhôe
[2*3];

53 
¥ogømName
 = 
¨gv
[0];

55 
¨gc
) {

57 
image_gamma
 = 
TIFF_GAMMA
;

58 
öput_fûe
 = 
¨gv
[1];

61 i‡(!
	`°rcmp
(
¨gv
[1], "-gamma")) {

62 
image_gamma
 = 
	`©of
(
¨gv
[2]);

63 
öput_fûe
 = 
¨gv
[3];

65 
	`Ußge
();

68 
	`Ußge
();

71 
i
 = 0; i < 
CMSIZE
; i++) {

72 i‡(
i
 == 0)

73 
ªd
[
i
] = 
gªí
[i] = 
blue
[i] = 0;

75 
ªd
[
i
] = 
	`ROUND
((
	`pow
(ò/ 255.0, 1.0 / 
image_gamma
) * 65535.0));

76 
gªí
[
i
] = 
	`ROUND
((
	`pow
(ò/ 255.0, 1.0 / 
image_gamma
) * 65535.0));

77 
blue
[
i
] = 
	`ROUND
((
	`pow
(ò/ 255.0, 1.0 / 
image_gamma
) * 65535.0));

80 
ªfbœckwhôe
[0] = 0.0;Ñefblackwhite[1] = 255.0;

81 
ªfbœckwhôe
[2] = 0.0;Ñefblackwhite[3] = 255.0;

82 
ªfbœckwhôe
[4] = 0.0;Ñefblackwhite[5] = 255.0;

84 i‡((
tif
 = 
	`TIFFO≥n
(
öput_fûe
, "w")Ë=
NULL
) {

85 
	`Ârötf
(
°dîr
, "ˇn'à›í %†a†®TIFF fûe\n", 
öput_fûe
);

86 
	`exô
(0);

89 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
WIDTH
);

90 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
HEIGHT
);

91 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 8);

92 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_NONE
);

93 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_RGB
);

94 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 3);

95 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 1);

96 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

97 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_RESOLUTIONUNIT
, 
RESUNIT_NONE
);

98 #ifde‡
nŸdef


99 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_WHITEPOINT
, 
whôex
, 
whôey
);

100 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PRIMARYCHROMATICITIES
, 
¥im¨õs
);

102 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_REFERENCEBLACKWHITE
, 
ªfbœckwhôe
);

103 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_TRANSFERFUNCTION
, 
ªd
, 
gªí
, 
blue
);

105 
sˇn_löe
 = (*Ë
	`mÆloc
(
WIDTH
 * 3);

107 
i
 = 0; i < 255; i++) {

108 
j
 = 0; j < 75; j++) {

109 
sˇn_löe
[
j
 * 3] = 255;

110 
sˇn_löe
[(
j
 * 3Ë+ 1] = 255 - 
i
;

111 
sˇn_löe
[(
j
 * 3Ë+ 2] = 255 - 
i
;

113 
j
 = 75; j < 150; j++) {

114 
sˇn_löe
[
j
 * 3] = 255 - 
i
;

115 
sˇn_löe
[(
j
 * 3) + 1] = 255;

116 
sˇn_löe
[(
j
 * 3Ë+ 2] = 255 - 
i
;

118 
j
 = 150; j < 225; j++) {

119 
sˇn_löe
[
j
 * 3] = 255 - 
i
;

120 
sˇn_löe
[(
j
 * 3Ë+ 1] = 255 - 
i
;

121 
sˇn_löe
[(
j
 * 3) + 2] = 255;

123 
j
 = 225; j < 300; j++) {

124 
sˇn_löe
[
j
 * 3] = (
i
 - 1) / 2;

125 
sˇn_löe
[(
j
 * 3Ë+ 1] = (
i
 - 1) / 2;

126 
sˇn_löe
[(
j
 * 3Ë+ 2] = (
i
 - 1) / 2;

128 
j
 = 300; j < 375; j++) {

129 
sˇn_löe
[
j
 * 3] = 255 - 
i
;

130 
sˇn_löe
[(
j
 * 3) + 1] = 255;

131 
sˇn_löe
[(
j
 * 3) + 2] = 255;

133 
j
 = 375; j < 450; j++) {

134 
sˇn_löe
[
j
 * 3] = 255;

135 
sˇn_löe
[(
j
 * 3Ë+ 1] = 255 - 
i
;

136 
sˇn_löe
[(
j
 * 3) + 2] = 255;

138 
j
 = 450; j < 525; j++) {

139 
sˇn_löe
[
j
 * 3] = 255;

140 
sˇn_löe
[(
j
 * 3) + 1] = 255;

141 
sˇn_löe
[(
j
 * 3Ë+ 2] = 255 - 
i
;

143 
	`TIFFWrôeSˇ∆öe
(
tif
, 
sˇn_löe
, 
i
, 0);

145 
i
 = 255; i < 512; i++) {

146 
j
 = 0; j < 75; j++) {

147 
sˇn_löe
[
j
 * 3] = 
i
;

148 
sˇn_löe
[(
j
 * 3) + 1] = 0;

149 
sˇn_löe
[(
j
 * 3) + 2] = 0;

151 
j
 = 75; j < 150; j++) {

152 
sˇn_löe
[
j
 * 3] = 0;

153 
sˇn_löe
[(
j
 * 3Ë+ 1] = 
i
;

154 
sˇn_löe
[(
j
 * 3) + 2] = 0;

156 
j
 = 150; j < 225; j++) {

157 
sˇn_löe
[
j
 * 3] = 0;

158 
sˇn_löe
[(
j
 * 3) + 1] = 0;

159 
sˇn_löe
[(
j
 * 3Ë+ 2] = 
i
;

161 
j
 = 225; j < 300; j++) {

162 
sˇn_löe
[
j
 * 3] = (
i
 - 1) / 2;

163 
sˇn_löe
[(
j
 * 3Ë+ 1] = (
i
 - 1) / 2;

164 
sˇn_löe
[(
j
 * 3Ë+ 2] = (
i
 - 1) / 2;

166 
j
 = 300; j < 375; j++) {

167 
sˇn_löe
[
j
 * 3] = 0;

168 
sˇn_löe
[(
j
 * 3Ë+ 1] = 
i
;

169 
sˇn_löe
[(
j
 * 3Ë+ 2] = 
i
;

171 
j
 = 375; j < 450; j++) {

172 
sˇn_löe
[
j
 * 3] = 
i
;

173 
sˇn_löe
[(
j
 * 3) + 1] = 0;

174 
sˇn_löe
[(
j
 * 3Ë+ 2] = 
i
;

176 
j
 = 450; j < 525; j++) {

177 
sˇn_löe
[
j
 * 3] = 
i
;

178 
sˇn_löe
[(
j
 * 3Ë+ 1] = 
i
;

179 
sˇn_löe
[(
j
 * 3) + 2] = 0;

181 
	`TIFFWrôeSˇ∆öe
(
tif
, 
sˇn_löe
, 
i
, 0);

184 
	`‰ì
(
sˇn_löe
);

185 
	`TIFFClo£
(
tif
);

186 
	`exô
(0);

187 
	}
}

190 
	$Ußge
()

192 
	`Ârötf
(
°dîr
, "Ußge: %†-gamm®gamm®tiff-image\n", 
¥ogømName
);

193 
	`exô
(0);

194 
	}
}

	@contrib/dbs/xtiff/patchlevel.h

1 
	#PATCHLEVEL
 0

	)

	@contrib/dbs/xtiff/xtiff.c

57 
	~<m©h.h
>

58 
	~<°dio.h
>

59 
	~<°dlib.h
>

60 
	~<tiffio.h
>

61 
	~<X11/X©om.h
>

62 
	~<X11/I¡rösic.h
>

63 
	~<X11/SåögDefs.h
>

64 
	~<X11/X¥Ÿo.h
>

65 
	~<X11/Shñl.h
>

66 
	~<X11/Xaw/F‹m.h
>

67 
	~<X11/Xaw/Li°.h
>

68 
	~<X11/Xaw/Labñ.h
>

69 
	~<X11/curs‹f⁄t.h
>

70 
	#XK_MISCELLANY


	)

71 
	~<X11/keysymdef.h
>

72 
	~"xtiffic⁄.h
"

74 
	#TIFF_GAMMA
 "2.2"

	)

75 
	#ROUND
(
x
Ë(
uöt16
Ë((xË+ 0.5)

	)

76 
	#SCALE
(
x
, 
s
Ë(((xË* 65535LË/ (s))

	)

77 
	#MCHECK
(
m
Ëi‡(!mË{ 
	`Ârötf
(
°dîr
, "mÆlo¯Áûed\n"); 
	`exô
(0); }

	)

78 
	#MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

79 
	#MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

80 
	#VIEWPORT_WIDTH
 700

	)

81 
	#VIEWPORT_HEIGHT
 500

	)

82 
	#KEY_TRANSLATE
 20

	)

84 #ifde‡
__STDC__


85 
	#PP
(
¨gs
Ë
	)
args

87 
	#PP
(
¨gs
Ë()

	)

90 
maö
 
PP
((
¨gc
, **
¨gv
));

91 
O≥nTIFFFûe
 
PP
(());

92 
GëTIFFHódî
 
PP
(());

93 
SëNameLabñ
 
PP
(());

94 
CheckAndC‹ª˘Cﬁ‹m≠
 
PP
(());

95 
Sim∂eGammaC‹ª˘i⁄
 
PP
(());

96 
GëVisuÆ
 
PP
(());

97 
Boﬁón
 
SórchVisuÆLi°
 
PP
((
image_dïth
,

98 
visuÆ_˛ass
, 
VisuÆ
 **
visuÆ
));

99 
GëTIFFImage
 
PP
(());

100 
Cª©eXImage
 
PP
(());

101 
XtCÆlbackProc
 
Sñe˘Proc
 
PP
((
Widgë
 
w
, 
ˇddr_t
 
unu£d_1
, caddr_à
unu£d_2
));

102 
QuôProc
 
PP
(());

103 
NextProc
 
PP
(());

104 
PªviousProc
 
PP
(());

105 
PageProc
 
PP
((
dúe˘i⁄
));

106 
EvítProc
 
PP
((
Widgë
 
widgë
, 
ˇddr_t
 
unu£d
, 
XEvít
 *
evít
));

107 
ResizeProc
 
PP
(());

108 
XTiffEº‹H™dÀr
 
PP
((
Di•œy
 *
di•œy
, 
XEº‹Evít
 *
îr‹_evít
));

109 
Ußge
 
PP
(());

111 
	gxtVîsi⁄
 = 
XtS≥cifiˇti⁄Rñó£
;

116 
Widgë
 
	gshñlWidgë
, 
	gf‹mWidgë
, 
	gli°Widgë
, 
	gœbñWidgë
, 
	gimageWidgë
;

118 íum { 
	mBuâ⁄Quô
 = 0, 
	mBuâ⁄PªviousPage
 = 1, 
	mBuâ⁄NextPage
 = 2 };

120 
Såög
 
	gbuâ⁄Såögs
[] = { "Quit", "Previous", "Next" };

122 
XrmO±i⁄DescRec
 
	gshñlO±i⁄s
[] = {

123 { "-hñp", "*hñp", 
Xrm›ti⁄NoArg
, (
ˇddr_t
) "True" },

124 { "-gamma", "*gamma", 
Xrm›ti⁄SïArg
, 
NULL
 },

125 { "-u£Pixm≠", "*u£Pixm≠", 
Xrm›ti⁄SïArg
, 
NULL
 },

126 { "-võwp‹tWidth", "*võwp‹tWidth", 
Xrm›ti⁄SïArg
, 
NULL
 },

127 { "-võwp‹tHeight", "*võwp‹tHeight", 
Xrm›ti⁄SïArg
, 
NULL
 },

128 { "-å™¶©e", "*å™¶©e", 
Xrm›ti⁄SïArg
, 
NULL
 },

129 { "-vîbo£", "*vîbo£", 
Xrm›ti⁄SïArg
, 
NULL
 }

133 
Boﬁón
 
	mhñp
;

134 
	mgamma
;

135 
Boﬁón
 
	mu£Pixm≠
;

136 
uöt32
 
	mvõwp‹tWidth
;

137 
uöt32
 
	mvõwp‹tHeight
;

138 
	må™¶©e
;

139 
Boﬁón
 
	mvîbo£
;

140 } 
	tAµD©a
, *
	tAµD©aPå
;

142 
AµD©a
 
	g≠pD©a
;

144 
XtResour˚
 
	g˛õ¡Resour˚s
[] = {

146 "hñp", 
XtCBoﬁón
, 
XtRBoﬁón
, (
Boﬁón
),

147 
XtOff£t
(
AµD©aPå
, 
hñp
), 
XtRImmedüã
, (
XtPoöãr
Ë
FÆ£


149 "gamma", "Gamma", 
XtRFlﬂt
, (),

150 
XtOff£t
(
AµD©aPå
, 
gamma
), 
XtRSåög
, (
XtPoöãr
Ë
TIFF_GAMMA


152 "u£Pixm≠", "U£Pixm≠", 
XtRBoﬁón
, (
Boﬁón
),

153 
XtOff£t
(
AµD©aPå
, 
u£Pixm≠
), 
XtRImmedüã
, (
XtPoöãr
Ë
True


155 "võwp‹tWidth", "Võwp‹tWidth", 
XtRI¡
, (),

156 
XtOff£t
(
AµD©aPå
, 
võwp‹tWidth
), 
XtRImmedüã
,

157 (
XtPoöãr
Ë
VIEWPORT_WIDTH


159 "võwp‹tHeight", "Võwp‹tHeight", 
XtRI¡
, (),

160 
XtOff£t
(
AµD©aPå
, 
võwp‹tHeight
), 
XtRImmedüã
,

161 (
XtPoöãr
Ë
VIEWPORT_HEIGHT


163 "å™¶©e", "Tøn¶©e", 
XtRI¡
, (),

164 
XtOff£t
(
AµD©aPå
, 
å™¶©e
), 
XtRImmedüã
, (
XtPoöãr
Ë
KEY_TRANSLATE


166 "vîbo£", "Vîbo£", 
XtRBoﬁón
, (
Boﬁón
),

167 
XtOff£t
(
AµD©aPå
, 
vîbo£
), 
XtRImmedüã
, (
XtPoöãr
Ë
True


171 
Arg
 
	gf‹mArgs
[] = {

172 { 
XtNªsizabÀ
, 
True
 }

175 
Arg
 
	gli°Args
[] = {

176 { 
XtNªsizabÀ
, 
FÆ£
 },

177 { 
XtNb‹dîWidth
, 0 },

178 { 
XtNdeÁu…Cﬁumns
, 3 },

179 { 
XtNf‹˚Cﬁumns
, 
True
 },

180 { 
XtNli°
, (Ë
buâ⁄Såögs
 },

181 { 
XtNnumbîSåögs
, 
XtNumbî
(
buâ⁄Såögs
) },

182 { 
XtNt›
, 
XtChaöT›
 },

183 { 
XtNÀ·
, 
XtChaöLe·
 },

184 { 
XtNbŸtom
, 
XtChaöT›
 },

185 { 
XtNright
, 
XtChaöLe·
 }

188 
Arg
 
	gœbñArgs
[] = {

189 { 
XtNªsizabÀ
, 
FÆ£
 },

190 { 
XtNwidth
, 200 },

191 { 
XtNb‹dîWidth
, 0 },

192 { 
XtNju°ify
, 
XtJu°ifyLe·
 },

193 { 
XtNt›
, 
XtChaöT›
 },

194 { 
XtNÀ·
, 
XtChaöLe·
 },

195 { 
XtNbŸtom
, 
XtChaöT›
 },

196 { 
XtNright
, 
XtChaöLe·
 }

199 
Arg
 
	gimageArgs
[] = {

200 { 
XtNªsizabÀ
, 
True
 },

201 { 
XtNb‹dîWidth
, 0 },

202 { 
XtNt›
, 
XtChaöT›
 },

203 { 
XtNÀ·
, 
XtChaöLe·
 },

204 { 
XtNbŸtom
, 
XtChaöT›
 },

205 { 
XtNright
, 
XtChaöLe·
 }

208 
XtA˘i⁄sRec
 
	ga˘i⁄sTabÀ
[] = {

209 { "quô", 
QuôProc
 },

210 { "√xt", 
NextProc
 },

211 { "¥evious", 
PªviousProc
 },

212 { "nŸifyªsize", 
ResizeProc
 }

215 
	gå™¶©i⁄sTabÀ
[] = "<Key>q: quit() \n \
<Key>Q: quit() \n \
<Message>WM_PROTOCOLS: quit()\n \
<Key>p:Örevious() \n \
<Key>P:Örevious() \n \
<Key>n:Çext() \n \
<Key>N:Çext() \n \
<Configure>:Çotifyresize()";

227 
Cﬁ‹m≠
 
	gxCﬁ‹m≠
;

228 
Di•œy
 * 
	gxDi•œy
;

229 
Pixm≠
 
	gxImagePixm≠
;

230 
VisuÆ
 * 
	gxVisuÆ
;

231 
XImage
 * 
	gxImage
;

232 
GC
 
	gxWöGc
;

233 
	gxImageDïth
, 
	gxS¸ìn
, 
	gxRedMask
, 
	gxGªíMask
, 
	gxBlueMask
,

234 
	gxOff£t
 = 0, 
	gyOff£t
 = 0, 
	ggøbX
 = -1, 
	ggøbY
 = -1;

235 
	gba£Pixñ
 = 0;

240 
TIFF
 * 
	gtfFûe
 = 
NULL
;

241 
uöt32
 
	gtfImageWidth
, 
	gtfImageHeight
;

242 
uöt16
 
	gtfBôsPîSam∂e
, 
	gtfSam∂esPîPixñ
, 
	gtfPœ«rC⁄figuøti⁄
,

243 
	gtfPhŸomëricI¡î¥ë©i⁄
, 
	gtfGøyRe•⁄£Unô
,

244 
	gtfImageDïth
, 
	gtfByãsPîRow
;

245 
	gtfDúe˘‹y
 = 0, 
	gtfMu…iPage
 = 
FÆ£
;

246 
	gtfUnôM≠
, 
	gtfGøyRe•⁄£UnôM≠
[] = {

253 *
	gdRed
, *
	gdGªí
, *
	gdBlue
;

258 
uöt16
 * 
	gªdM≠
 = 
NULL
, *
	ggªíM≠
 = NULL, *
	gblueM≠
 = NULL,

259 *
	ggøyM≠
 = 
NULL
, 
	gcﬁ‹m≠Size
;

260 * 
	gimageMem‹y
;

261 * 
	gfûeName
;

264 
	$maö
(
¨gc
, **
¨gv
)

266 
XSëWödowAâribuãs
 
wödow_©åibuãs
;

267 
Widgë
 
widgë_li°
[3];

268 
Arg
 
¨gs
[5];

270 
	`£tbuf
(
°dout
, 
NULL
); sëbuf(
°dîr
, NULL);

272 
shñlWidgë
 = 
	`XtInôülize
(
¨gv
[0], "XTiff", 
shñlO±i⁄s
,

273 
	`XtNumbî
(
shñlO±i⁄s
), &
¨gc
, 
¨gv
);

275 
	`XSëEº‹H™dÀr
(
XTiffEº‹H™dÀr
);

277 
	`XtGëAµliˇti⁄Resour˚s
(
shñlWidgë
, &
≠pD©a
,

278 (
XtResour˚Li°
Ë
˛õ¡Resour˚s
, (
C¨döÆ
Ë
	`XtNumbî
(clientResources),

279 (
ArgLi°
Ë
NULL
, (
C¨döÆ
) 0);

281 i‡((
¨gc
 <1Ë|| (¨g¯> 2Ë|| 
≠pD©a
.
hñp
)

282 
	`Ußge
();

284 i‡(
≠pD©a
.
vîbo£
 =
FÆ£
) {

285 
	`TIFFSëEº‹H™dÀr
(0);

286 
	`TIFFSëW¨nögH™dÀr
(0);

289 
fûeName
 = 
¨gv
[1];

291 
xDi•œy
 = 
	`XtDi•œy
(
shñlWidgë
);

292 
xS¸ìn
 = 
	`DeÁu…S¸ìn
(
xDi•œy
);

294 
	`O≥nTIFFFûe
();

295 
	`GëTIFFHódî
();

296 
	`Sim∂eGammaC‹ª˘i⁄
();

297 
	`GëVisuÆ
();

298 
	`GëTIFFImage
();

304 
	`XtSëArg
(
¨gs
[0], 
XtNvisuÆ
, 
xVisuÆ
);

305 
	`XtSëArg
(
¨gs
[1], 
XtNcﬁ‹m≠
, 
xCﬁ‹m≠
);

306 
	`XtSëArg
(
¨gs
[2], 
XtNdïth
,

307 
xImageDïth
 =1 ? 
	`DeÁu…Dïth
(
xDi•œy
, 
xS¸ìn
) : xImageDepth);

308 
	`XtSëArg
(
¨gs
[3], 
XtNic⁄Pixm≠
,

309 
	`XCª©eBôm≠FromD©a
(
xDi•œy
, 
	`RoŸWödow
(xDi•œy, 
xS¸ìn
),

310 
xtiffic⁄_bôs
, 
xtiffic⁄_width
, 
xtiffic⁄_height
));

311 
	`XtSëArg
(
¨gs
[4], 
XtNÆlowShñlResize
, 
True
);

312 
	`XtSëVÆues
(
shñlWidgë
, 
¨gs
, 5);

317 
f‹mWidgë
 = 
	`XtCª©eM™agedWidgë
("f‹m", 
f‹mWidgëCœss
,

318 
shñlWidgë
, 
f‹mArgs
, 
	`XtNumbî
(formArgs));

320 
widgë_li°
[0] = 
li°Widgë
 = 
	`XtCª©eWidgë
("list",

321 
li°WidgëCœss
, 
f‹mWidgë
, 
li°Args
, 
	`XtNumbî
(listArgs));

323 
widgë_li°
[1] = 
œbñWidgë
 = 
	`XtCª©eWidgë
("label",

324 
œbñWidgëCœss
, 
f‹mWidgë
, 
œbñArgs
, 
	`XtNumbî
(labelArgs));

326 
widgë_li°
[2] = 
imageWidgë
 = 
	`XtCª©eWidgë
("image",

327 
widgëCœss
, 
f‹mWidgë
, 
imageArgs
, 
	`XtNumbî
(imageArgs));

329 
	`XtM™ageChûdªn
(
widgë_li°
, 
	`XtNumbî
(widget_list));

334 i‡(
tfImageWidth
 >
≠pD©a
.
võwp‹tWidth
) {

335 
	`XtSëArg
(
¨gs
[0], 
XtNwidth
, 
≠pD©a
.
võwp‹tWidth
);

336 
	`XtSëVÆues
(
shñlWidgë
, 
¨gs
, 1);

338 i‡(
tfImageHeight
 >
≠pD©a
.
võwp‹tHeight
) {

339 
	`XtSëArg
(
¨gs
[0], 
XtNheight
, 
≠pD©a
.
võwp‹tHeight
);

340 
	`XtSëVÆues
(
shñlWidgë
, 
¨gs
, 1);

343 
	`XtSëArg
(
¨gs
[0], 
XtNwidth
, 
tfImageWidth
);

344 
	`XtSëArg
(
¨gs
[1], 
XtNheight
, 
tfImageHeight
);

345 
	`XtSëVÆues
(
imageWidgë
, 
¨gs
, 2);

350 
	`XtSëArg
(
¨gs
[0], 
XtN‰omVît
, 
li°Widgë
);

351 
	`XtSëVÆues
(
imageWidgë
, 
¨gs
, 1);

352 
	`XtSëArg
(
¨gs
[0], 
XtN‰omH‹iz
, 
li°Widgë
);

353 
	`XtSëVÆues
(
œbñWidgë
, 
¨gs
, 1);

355 
	`SëNameLabñ
();

357 
	`XtAddCÆlback
(
li°Widgë
, 
XtNˇŒback
, (
XtCÆlbackProc
Ë
Sñe˘Proc
,

358 (
XtPoöãr
Ë
NULL
);

360 
	`XtAddA˘i⁄s
(
a˘i⁄sTabÀ
, 
	`XtNumbî
(actionsTable));

361 
	`XtSëArg
(
¨gs
[0], 
XtNå™¶©i⁄s
,

362 
	`XtP¨£Tøn¶©i⁄TabÀ
(
å™¶©i⁄sTabÀ
));

363 
	`XtSëVÆues
(
f‹mWidgë
, &
¨gs
[0], 1);

364 
	`XtSëVÆues
(
imageWidgë
, &
¨gs
[0], 1);

370 
	`XtAddEvítH™dÀr
(
imageWidgë
, 
ExposuªMask
 | 
Buâ⁄PªssMask


371 | 
Buâ⁄Rñó£Mask
 | 
Buâ⁄1MŸi⁄Mask
 | 
KeyPªssMask
,

372 
FÆ£
, 
EvítProc
, 
NULL
);

374 
	`XtRólizeWidgë
(
shñlWidgë
);

376 
wödow_©åibuãs
.
curs‹
 = 
	`XCª©eF⁄tCurs‹
(
xDi•œy
, 
XC_Êeur
);

377 
	`XCh™geWödowAâribuãs
(
xDi•œy
, 
	`XtWödow
(
imageWidgë
),

378 
CWCurs‹
, &
wödow_©åibuãs
);

380 
	`Cª©eXImage
();

382 
	`XtMaöLo›
();

385 
	}
}

388 
	$O≥nTIFFFûe
()

390 i‡(
tfFûe
 !
NULL
)

391 
	`TIFFClo£
(
tfFûe
);

393 i‡((
tfFûe
 = 
	`TIFFO≥n
(
fûeName
, "r")Ë=
NULL
) {

394 
	`Ârötf
(
≠pD©a
.
vîbo£
 ? 
°dîr
 : 
°dout
,

395 "xtiff: c™'à›í %†a†®TIFF fûe\n", 
fûeName
);

396 
	`exô
(0);

399 
tfMu…iPage
 = (
	`TIFFLa°Dúe˘‹y
(
tfFûe
Ë? 
FÆ£
 : 
True
);

400 
	}
}

403 
	$GëTIFFHódî
()

405 
i
;

407 i‡(!
	`TIFFSëDúe˘‹y
(
tfFûe
, 
tfDúe˘‹y
)) {

408 
	`Ârötf
(
°dîr
, "xtiff: can't seekÅo directory %d in %s\n",

409 
tfDúe˘‹y
, 
fûeName
);

410 
	`exô
(0);

413 
	`TIFFGëFõld
(
tfFûe
, 
TIFFTAG_IMAGEWIDTH
, &
tfImageWidth
);

414 
	`TIFFGëFõld
(
tfFûe
, 
TIFFTAG_IMAGELENGTH
, &
tfImageHeight
);

419 
	`TIFFGëFõldDeÁu…ed
(
tfFûe
, 
TIFFTAG_BITSPERSAMPLE
, &
tfBôsPîSam∂e
);

420 
	`TIFFGëFõldDeÁu…ed
(
tfFûe
, 
TIFFTAG_SAMPLESPERPIXEL
, &
tfSam∂esPîPixñ
);

421 
	`TIFFGëFõldDeÁu…ed
(
tfFûe
, 
TIFFTAG_PLANARCONFIG
, &
tfPœ«rC⁄figuøti⁄
);

422 
	`TIFFGëFõldDeÁu…ed
(
tfFûe
, 
TIFFTAG_GRAYRESPONSEUNIT
, &
tfGøyRe•⁄£Unô
);

424 
tfUnôM≠
 = 
tfGøyRe•⁄£UnôM≠
[
tfGøyRe•⁄£Unô
];

425 
cﬁ‹m≠Size
 = 1 << 
tfBôsPîSam∂e
;

426 
tfImageDïth
 = 
tfBôsPîSam∂e
 * 
tfSam∂esPîPixñ
;

428 
dRed
 = (*Ë
	`mÆloc
(
cﬁ‹m≠Size
 * ());

429 
dGªí
 = (*Ë
	`mÆloc
(
cﬁ‹m≠Size
 * ());

430 
dBlue
 = (*Ë
	`mÆloc
(
cﬁ‹m≠Size
 * ());

431 
	`MCHECK
(
dRed
); MCHECK(
dGªí
); MCHECK(
dBlue
);

437 i‡(!
	`TIFFGëFõld
(
tfFûe
, 
TIFFTAG_PHOTOMETRIC
,

438 &
tfPhŸomëricI¡î¥ë©i⁄
)) {

439 i‡(
tfSam∂esPîPixñ
 != 1)

440 
tfPhŸomëricI¡î¥ë©i⁄
 = 
PHOTOMETRIC_RGB
;

441 i‡(
tfBôsPîSam∂e
 == 1)

442 
tfPhŸomëricI¡î¥ë©i⁄
 = 
PHOTOMETRIC_MINISBLACK
;

443 i‡(
	`TIFFGëFõld
(
tfFûe
, 
TIFFTAG_COLORMAP
,

444 &
ªdM≠
, &
gªíM≠
, &
blueM≠
)) {

445 
tfPhŸomëricI¡î¥ë©i⁄
 = 
PHOTOMETRIC_PALETTE
;

446 
ªdM≠
 = 
gªíM≠
 = 
blueM≠
 = 
NULL
;

448 
tfPhŸomëricI¡î¥ë©i⁄
 = 
PHOTOMETRIC_MINISBLACK
;

454 
tfPhŸomëricI¡î¥ë©i⁄
) {

455 
PHOTOMETRIC_RGB
:

456 
ªdM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

457 
gªíM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

458 
blueM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

459 
	`MCHECK
(
ªdM≠
); MCHECK(
gªíM≠
); MCHECK(
blueM≠
);

460 
i
 = 0; i < 
cﬁ‹m≠Size
; i++)

461 
dRed
[
i
] = 
dGªí
[i] = 
dBlue
[i]

462 (Ë
	`SCALE
(
i
, 
cﬁ‹m≠Size
 - 1);

464 
PHOTOMETRIC_PALETTE
:

465 i‡(!
	`TIFFGëFõld
(
tfFûe
, 
TIFFTAG_COLORMAP
,

466 &
ªdM≠
, &
gªíM≠
, &
blueM≠
)) {

467 
ªdM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

468 
gªíM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

469 
blueM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

470 
	`MCHECK
(
ªdM≠
); MCHECK(
gªíM≠
); MCHECK(
blueM≠
);

471 
i
 = 0; i < 
cﬁ‹m≠Size
; i++)

472 
dRed
[
i
] = 
dGªí
[i] = 
dBlue
[i]

473 (Ë
	`SCALE
(
i
, 
cﬁ‹m≠Size
 - 1);

475 
	`CheckAndC‹ª˘Cﬁ‹m≠
();

476 
i
 = 0; i < 
cﬁ‹m≠Size
; i++) {

477 
dRed
[
i
] = (Ë
ªdM≠
[i];

478 
dGªí
[
i
] = (Ë
gªíM≠
[i];

479 
dBlue
[
i
] = (Ë
blueM≠
[i];

483 
PHOTOMETRIC_MINISWHITE
:

484 
ªdM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

485 
gªíM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

486 
blueM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

487 
	`MCHECK
(
ªdM≠
); MCHECK(
gªíM≠
); MCHECK(
blueM≠
);

488 
i
 = 0; i < 
cﬁ‹m≠Size
; i++)

489 
dRed
[
i
] = 
dGªí
[i] = 
dBlue
[i] = ()

490 
	`SCALE
(
cﬁ‹m≠Size
-1-
i
, colormapSize-1);

492 
PHOTOMETRIC_MINISBLACK
:

493 
ªdM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

494 
gªíM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

495 
blueM≠
 = (
uöt16
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (uint16));

496 
	`MCHECK
(
ªdM≠
); MCHECK(
gªíM≠
); MCHECK(
blueM≠
);

497 
i
 = 0; i < 
cﬁ‹m≠Size
; i++)

498 
dRed
[
i
] = 
dGªí
[i] = 
dBlue
[i] = (Ë
	`SCALE
(i, 
cﬁ‹m≠Size
-1);

501 
	`Ârötf
(
°dîr
,

503 
tfPhŸomëricI¡î¥ë©i⁄
);

504 
	`exô
(0);

506 
	}
}

509 
	$SëNameLabñ
()

511 
buf„r
[
BUFSIZ
];

512 
Arg
 
¨gs
[1];

514 i‡(
tfMu…iPage
)

515 
	`•rötf
(
buf„r
, "%†-Öagê%d", 
fûeName
, 
tfDúe˘‹y
);

517 
	`°r˝y
(
buf„r
, 
fûeName
);

518 
	`XtSëArg
(
¨gs
[0], 
XtNœbñ
, 
buf„r
);

519 
	`XtSëVÆues
(
œbñWidgë
, 
¨gs
, 1);

520 
	}
}

527 
	$CheckAndC‹ª˘Cﬁ‹m≠
()

529 
i
;

531 
i
 = 0; i < 
cﬁ‹m≠Size
; i++)

532 i‡((
ªdM≠
[
i
] > 255Ë|| (
gªíM≠
[i] > 255Ë|| (
blueM≠
[i] > 255))

535 
i
 = 0; i < 
cﬁ‹m≠Size
; i++) {

536 
ªdM≠
[
i
] = 
	`SCALE
(redMap[i], 255);

537 
gªíM≠
[
i
] = 
	`SCALE
(greenMap[i], 255);

538 
blueM≠
[
i
] = 
	`SCALE
(blueMap[i], 255);

540 
	`TIFFW¨nög
(
fûeName
, "Assuming 8-bit colormap");

541 
	}
}

544 
	$Sim∂eGammaC‹ª˘i⁄
()

546 
i
;

547 
i_gamma
 = 1.0 / 
≠pD©a
.
gamma
;

549 
i
 = 0; i < 
cﬁ‹m≠Size
; i++) {

550 i‡(((
tfPhŸomëricI¡î¥ë©i⁄
 =
PHOTOMETRIC_MINISWHITE
)

551 && (
i
 =
cﬁ‹m≠Size
 - 1))

552 || ((
tfPhŸomëricI¡î¥ë©i⁄
 =
PHOTOMETRIC_MINISBLACK
)

553 && (
i
 == 0)))

554 
ªdM≠
[
i
] = 
gªíM≠
[i] = 
blueM≠
[i] = 0;

556 
ªdM≠
[
i
] = 
	`ROUND
((
	`pow
(
dRed
[i] / 65535.0, 
i_gamma
) * 65535.0));

557 
gªíM≠
[
i
] = 
	`ROUND
((
	`pow
(
dGªí
[i] / 65535.0, 
i_gamma
) * 65535.0));

558 
blueM≠
[
i
] = 
	`ROUND
((
	`pow
(
dBlue
[i] / 65535.0, 
i_gamma
) * 65535.0));

562 
	`‰ì
(
dRed
); fªe(
dGªí
); fªe(
dBlue
);

563 
	}
}

565 * 
	g˛assNames
[] = {

579 
	$GëVisuÆ
()

581 
XCﬁ‹
 *
cﬁ‹s
 = 
NULL
;

582 *
pixñs
 = 
NULL
;

583 
i
;

585 
tfImageDïth
) {

592 i‡(
	`SórchVisuÆLi°
(24, 
Dúe˘Cﬁ‹
, &
xVisuÆ
Ë=
FÆ£
) {

593 
	`Ârötf
(
°dîr
, "xtiff: 24-bit DirectColor visualÇotávailable\n");

594 
	`exô
(0);

597 
cﬁ‹s
 = (
XCﬁ‹
 *Ë
	`mÆloc
(3 * 
cﬁ‹m≠Size
 * (XColor));

598 
	`MCHECK
(
cﬁ‹s
);

600 
i
 = 0; i < 
cﬁ‹m≠Size
; i++) {

601 
cﬁ‹s
[
i
].
pixñ
 = (i << 16) + (i << 8) + i;

602 
cﬁ‹s
[
i
].
ªd
 = 
ªdM≠
[i];

603 
cﬁ‹s
[
i
].
gªí
 = 
gªíM≠
[i];

604 
cﬁ‹s
[
i
].
blue
 = 
blueM≠
[i];

605 
cﬁ‹s
[
i
].
Êags
 = 
DoRed
 | 
DoGªí
 | 
DoBlue
;

608 
xCﬁ‹m≠
 = 
	`XCª©eCﬁ‹m≠
(
xDi•œy
, 
	`RoŸWödow
(xDi•œy, 
xS¸ìn
),

609 
xVisuÆ
, 
AŒocAŒ
);

610 
	`XSt‹eCﬁ‹s
(
xDi•œy
, 
xCﬁ‹m≠
, 
cﬁ‹s
, 
cﬁ‹m≠Size
);

619 
tfPhŸomëricI¡î¥ë©i⁄
) {

620 
PHOTOMETRIC_MINISWHITE
:

621 
PHOTOMETRIC_MINISBLACK
:

622 i‡(
	`SórchVisuÆLi°
((Ë
tfImageDïth
, 
GøySˇÀ
, &
xVisuÆ
Ë=
True
)

624 
PHOTOMETRIC_PALETTE
:

625 i‡(
	`SórchVisuÆLi°
((Ë
tfImageDïth
, 
P£udoCﬁ‹
, &
xVisuÆ
Ë=
True
)

628 
	`Ârötf
(
°dîr
, "xtiff: Unsupported TIFF/X configuration\n");

629 
	`exô
(0);

632 
cﬁ‹s
 = (
XCﬁ‹
 *Ë
	`mÆloc
(
cﬁ‹m≠Size
 * (XColor));

633 
	`MCHECK
(
cﬁ‹s
);

635 
i
 = 0; i < 
cﬁ‹m≠Size
; i++) {

636 
cﬁ‹s
[
i
].
pixñ
 = i;

637 
cﬁ‹s
[
i
].
ªd
 = 
ªdM≠
[i];

638 
cﬁ‹s
[
i
].
gªí
 = 
gªíM≠
[i];

639 
cﬁ‹s
[
i
].
blue
 = 
blueM≠
[i];

640 
cﬁ‹s
[
i
].
Êags
 = 
DoRed
 | 
DoGªí
 | 
DoBlue
;

652 i‡(
tfImageDïth
 == 8)

653 
xCﬁ‹m≠
 = 
	`XCª©eCﬁ‹m≠
(
xDi•œy
, 
	`RoŸWödow
(xDi•œy, 
xS¸ìn
),

654 
xVisuÆ
, 
AŒocAŒ
);

656 
xCﬁ‹m≠
 = 
	`XCª©eCﬁ‹m≠
(
xDi•œy
, 
	`RoŸWödow
(xDi•œy, 
xS¸ìn
),

657 
xVisuÆ
, 
AŒocN⁄e
);

658 
pixñs
 = (*)

659 
	`mÆloc
(
cﬁ‹m≠Size
 * ());

660 
	`MCHECK
(
pixñs
);

661 (Ë
	`XAŒocCﬁ‹Cñls
(
xDi•œy
, 
xCﬁ‹m≠
, 
True
,

662 
NULL
, 0, 
pixñs
, 
cﬁ‹m≠Size
);

663 
ba£Pixñ
 = (Ë
pixñs
[0];

664 
	`‰ì
(
pixñs
);

666 
	`XSt‹eCﬁ‹s
(
xDi•œy
, 
xCﬁ‹m≠
, 
cﬁ‹s
, 
cﬁ‹m≠Size
);

669 
xImageDïth
 = 1;

670 
xVisuÆ
 = 
	`DeÁu…VisuÆ
(
xDi•œy
, 
xS¸ìn
);

671 
xCﬁ‹m≠
 = 
	`DeÁu…Cﬁ‹m≠
(
xDi•œy
, 
xS¸ìn
);

674 
	`Ârötf
(
°dîr
, "xtiff: unsuµ‹ãd imagêdïth %d\n", 
tfImageDïth
);

675 
	`exô
(0);

678 i‡(
≠pD©a
.
vîbo£
 =
True
)

679 
	`Ârötf
(
°dîr
, "%s: Using %d-bit %s visual.\n",

680 
fûeName
, 
xImageDïth
, 
˛assNames
[
xVisuÆ
->
˛ass
]);

682 i‡(
cﬁ‹s
 !
NULL
)

683 
	`‰ì
(
cﬁ‹s
);

684 i‡(
gøyM≠
 !
NULL
)

685 
	`‰ì
(
gøyM≠
);

686 i‡(
ªdM≠
 !
NULL
)

687 
	`‰ì
(
ªdM≠
);

688 i‡(
gªíM≠
 !
NULL
)

689 
	`‰ì
(
gªíM≠
);

690 i‡(
blueM≠
 !
NULL
)

691 
	`‰ì
(
blueM≠
);

693 
cﬁ‹s
 = 
NULL
; 
gøyM≠
 = 
ªdM≠
 = 
gªíM≠
 = 
blueM≠
 = NULL;

694 
	}
}

702 
Boﬁón


703 
	$SórchVisuÆLi°
(
image_dïth
, 
visuÆ_˛ass
, 
visuÆ
)

704 
image_dïth
, 
visuÆ_˛ass
;

705 
VisuÆ
 **
visuÆ
;

707 
XVisuÆInfo
 
ãm∂©e_visuÆ
, *
visuÆ_li°
, *
vl
;

708 
i
, 
n_visuÆs
;

710 
ãm∂©e_visuÆ
.
s¸ìn
 = 
xS¸ìn
;

711 
vl
 = 
visuÆ_li°
 = 
	`XGëVisuÆInfo
(
xDi•œy
, 
VisuÆS¸ìnMask
,

712 &
ãm∂©e_visuÆ
, &
n_visuÆs
);

714 i‡(
n_visuÆs
 == 0) {

715 
	`Ârötf
(
°dîr
, "xtiff: visualÜistÇotávailable\n");

716 
	`exô
(0);

719 
i
 = 0; i < 
n_visuÆs
; 
vl
++, i++) {

720 i‡((
vl
->
˛ass
 =
visuÆ_˛ass
Ë&& (vl->
dïth
 >
image_dïth
)

721 && (
vl
->
visuÆ
->
m≠_íåõs
 >(1 << vl->
dïth
))) {

722 *
visuÆ
 = 
vl
->visual;

723 
xImageDïth
 = 
vl
->
dïth
;

724 
xRedMask
 = 
vl
->
ªd_mask
;

725 
xGªíMask
 = 
vl
->
gªí_mask
;

726 
xBlueMask
 = 
vl
->
blue_mask
;

727 
	`XFªe
((*Ë
visuÆ_li°
);

728  
True
;

732 
	`XFªe
((*Ë
visuÆ_li°
);

733  
FÆ£
;

734 
	}
}

737 
	$GëTIFFImage
()

739 
pixñ_m≠
[3], 
ªd_shi·
, 
gªí_shi·
, 
blue_shi·
;

740 *
sˇn_löe
, *
ouçut_p
, *
öput_p
;

741 
uöt32
 
i
, 
j
;

742 
uöt16
 
s
;

744 
sˇn_löe
 = (*Ë
	`mÆloc
(
tfByãsPîRow
 = 
	`TIFFSˇ∆öeSize
(
tfFûe
));

745 
	`MCHECK
(
sˇn_löe
);

747 i‡((
tfImageDïth
 == 32) || (tfImageDepth == 24)) {

748 
ouçut_p
 = 
imageMem‹y
 = (*)

749 
	`mÆloc
(
tfImageWidth
 * 
tfImageHeight
 * 4);

750 
	`MCHECK
(
imageMem‹y
);

755 i‡(
	`ImageByãOrdî
(
xDi•œy
Ë=
LSBFú°
) {

756 
ªd_shi·
 = 
pixñ_m≠
[0] = 
xRedMask
 == 0xFF000000 ? 3

757 : (
xRedMask
 == 0xFF0000 ? 2 : (xRedMask == 0xFF00 ? 1 : 0));

758 
gªí_shi·
 = 
pixñ_m≠
[1] = 
xGªíMask
 == 0xFF000000 ? 3

759 : (
xGªíMask
 == 0xFF0000 ? 2 : (xGreenMask == 0xFF00 ? 1 : 0));

760 
blue_shi·
 = 
pixñ_m≠
[2] = 
xBlueMask
 == 0xFF000000 ? 3

761 : (
xBlueMask
 == 0xFF0000 ? 2 : (xBlueMask == 0xFF00 ? 1 : 0));

763 
ªd_shi·
 = 
pixñ_m≠
[0] = 
xRedMask
 == 0xFF000000 ? 0

764 : (
xRedMask
 == 0xFF0000 ? 1 : (xRedMask == 0xFF00 ? 2 : 3));

765 
gªí_shi·
 = 
pixñ_m≠
[0] = 
xGªíMask
 == 0xFF000000 ? 0

766 : (
xGªíMask
 == 0xFF0000 ? 1 : (xGreenMask == 0xFF00 ? 2 : 3));

767 
blue_shi·
 = 
pixñ_m≠
[0] = 
xBlueMask
 == 0xFF000000 ? 0

768 : (
xBlueMask
 == 0xFF0000 ? 1 : (xBlueMask == 0xFF00 ? 2 : 3));

771 i‡(
tfPœ«rC⁄figuøti⁄
 =
PLANARCONFIG_CONTIG
) {

772 
i
 = 0; i < 
tfImageHeight
; i++) {

773 i‡(
	`TIFFRódSˇ∆öe
(
tfFûe
, 
sˇn_löe
, 
i
, 0) < 0)

775 
öput_p
 = 
sˇn_löe
, 
j
 = 0; j < 
tfImageWidth
; j++) {

776 *(
ouçut_p
 + 
ªd_shi·
Ë*
öput_p
++;

777 *(
ouçut_p
 + 
gªí_shi·
Ë*
öput_p
++;

778 *(
ouçut_p
 + 
blue_shi·
Ë*
öput_p
++;

779 
ouçut_p
 += 4;

780 i‡(
tfSam∂esPîPixñ
 == 4)

781 
öput_p
++;

785 
s
 = 0; s < 
tfSam∂esPîPixñ
; s++) {

786 i‡(
s
 == 3)

788 
i
 = 0; i < 
tfImageHeight
; i++) {

789 i‡(
	`TIFFRódSˇ∆öe
(
tfFûe
, 
sˇn_löe
, 
i
, 
s
) < 0)

791 
öput_p
 = 
sˇn_löe
;

792 
ouçut_p
 = 
imageMem‹y
 + (
i
*
tfImageWidth
*4Ë+ 
pixñ_m≠
[
s
];

793 
j
 = 0; j < 
tfImageWidth
; j++, 
ouçut_p
 += 4)

794 *
ouçut_p
 = *
öput_p
++;

799 i‡(
xImageDïth
 =
tfImageDïth
) {

800 
ouçut_p
 = 
imageMem‹y
 = (*)

801 
	`mÆloc
(
tfByãsPîRow
 * 
tfImageHeight
);

802 
	`MCHECK
(
imageMem‹y
);

804 
i
 = 0; i < 
tfImageHeight
; i++, 
ouçut_p
 +
tfByãsPîRow
)

805 i‡(
	`TIFFRódSˇ∆öe
(
tfFûe
, 
ouçut_p
, 
i
, 0) < 0)

807 } i‡((
xImageDïth
 =8Ë&& (
tfImageDïth
 == 4)) {

808 
ouçut_p
 = 
imageMem‹y
 = (*)

809 
	`mÆloc
(
tfByãsPîRow
 * 2 * 
tfImageHeight
 + 2);

810 
	`MCHECK
(
imageMem‹y
);

817 
i
 = 0; i < 
tfImageHeight
; i++) {

818 i‡(
	`TIFFRódSˇ∆öe
(
tfFûe
, 
sˇn_löe
, 
i
, 0) < 0)

820 
ouçut_p
 = &
imageMem‹y
[
i
 * 
tfImageWidth
];

821 
öput_p
 = 
sˇn_löe
;

822 
j
 = 0; j < 
tfImageWidth
; j +2, 
öput_p
++) {

823 *
ouçut_p
++ = (*
öput_p
 >> 4Ë+ 
ba£Pixñ
;

824 *
ouçut_p
++ = (*
öput_p
 & 0xfË+ 
ba£Pixñ
;

827 } i‡((
xImageDïth
 =8Ë&& (
tfImageDïth
 == 2)) {

828 
ouçut_p
 = 
imageMem‹y
 = (*)

829 
	`mÆloc
(
tfByãsPîRow
 * 4 * 
tfImageHeight
 + 4);

830 
	`MCHECK
(
imageMem‹y
);

832 
i
 = 0; i < 
tfImageHeight
; i++) {

833 i‡(
	`TIFFRódSˇ∆öe
(
tfFûe
, 
sˇn_löe
, 
i
, 0) < 0)

835 
ouçut_p
 = &
imageMem‹y
[
i
 * 
tfImageWidth
];

836 
öput_p
 = 
sˇn_löe
;

837 
j
 = 0; j < 
tfImageWidth
; j +4, 
öput_p
++) {

838 *
ouçut_p
++ = (*
öput_p
 >> 6Ë+ 
ba£Pixñ
;

839 *
ouçut_p
++ = ((*
öput_p
 >> 4Ë& 3Ë+ 
ba£Pixñ
;

840 *
ouçut_p
++ = ((*
öput_p
 >> 2Ë& 3Ë+ 
ba£Pixñ
;

841 *
ouçut_p
++ = (*
öput_p
 & 3Ë+ 
ba£Pixñ
;

844 } i‡((
xImageDïth
 =4Ë&& (
tfImageDïth
 == 2)) {

845 
ouçut_p
 = 
imageMem‹y
 = (*)

846 
	`mÆloc
(
tfByãsPîRow
 * 2 * 
tfImageHeight
 + 2);

847 
	`MCHECK
(
imageMem‹y
);

849 
i
 = 0; i < 
tfImageHeight
; i++) {

850 i‡(
	`TIFFRódSˇ∆öe
(
tfFûe
, 
sˇn_löe
, 
i
, 0) < 0)

852 
ouçut_p
 = &
imageMem‹y
[
i
 * 
tfByãsPîRow
 * 2];

853 
öput_p
 = 
sˇn_löe
;

854 
j
 = 0; j < 
tfImageWidth
; j +4, 
öput_p
++) {

855 *
ouçut_p
++ = (((*
öput_p
>>6) << 4)

856 | ((*
öput_p
 >> 4Ë& 3)Ë+ 
ba£Pixñ
;

857 *
ouçut_p
++ = ((((*
öput_p
>>2) & 3) << 4)

858 | (*
öput_p
 & 3)Ë+ 
ba£Pixñ
;

862 
	`Ârötf
(
°dîr
,

864 
tfImageDïth
, 
xImageDïth
);

865 
	`exô
(0);

869 
	`‰ì
(
sˇn_löe
);

870 
	}
}

873 
	$Cª©eXImage
()

875 
XGCVÆues
 
gc_vÆues
;

876 
GC
 
bôm≠_gc
;

878 
xOff£t
 = 
yOff£t
 = 0;

879 
gøbX
 = 
gøbY
 = -1;

881 
xImage
 = 
	`XCª©eImage
(
xDi•œy
, 
xVisuÆ
, 
xImageDïth
,

882 
xImageDïth
 =1 ? 
XYBôm≠
 : 
ZPixm≠
, 0,

883 (*Ë
imageMem‹y
, 
tfImageWidth
, 
tfImageHeight
,

889 i‡(
xImageDïth
 == 1)

890 
xImage
->
bôm≠_bô_‹dî
 = 
MSBFú°
;

891 i‡(
xImageDïth
 <= 8)

892 
xImage
->
byã_‹dî
 = 
MSBFú°
;

897 
gc_vÆues
.
fun˘i⁄
 = 
GXc›y
;

898 
gc_vÆues
.
∂™e_mask
 = 
AŒPœ√s
;

899 i‡(
tfPhŸomëricI¡î¥ë©i⁄
 =
PHOTOMETRIC_MINISBLACK
) {

900 
gc_vÆues
.
f‹eground
 = 
	`XWhôePixñ
(
xDi•œy
, 
xS¸ìn
);

901 
gc_vÆues
.
background
 = 
	`XBœckPixñ
(
xDi•œy
, 
xS¸ìn
);

903 
gc_vÆues
.
f‹eground
 = 
	`XBœckPixñ
(
xDi•œy
, 
xS¸ìn
);

904 
gc_vÆues
.
background
 = 
	`XWhôePixñ
(
xDi•œy
, 
xS¸ìn
);

906 
xWöGc
 = 
	`XCª©eGC
(
xDi•œy
, 
	`XtWödow
(
shñlWidgë
),

907 
GCFun˘i⁄
 | 
GCPœ√Mask
 | 
GCF‹eground
 | 
GCBackground
, &
gc_vÆues
);

912 i‡(
≠pD©a
.
u£Pixm≠
 =
True
) {

913 
xImagePixm≠
 = 
	`XCª©ePixm≠
(
xDi•œy
, 
	`RoŸWödow
(xDi•œy, 
xS¸ìn
),

914 
xImage
->
width
, xImage->
height
, 
xImageDïth
);

922 i‡(
xImageDïth
 == 1) {

923 
gc_vÆues
.
f‹eground
 = 1;

924 
gc_vÆues
.
background
 = 0;

925 
bôm≠_gc
 = 
	`XCª©eGC
(
xDi•œy
, 
xImagePixm≠
,

926 
GCF‹eground
 | 
GCBackground
, &
gc_vÆues
);

927 
	`XPutImage
(
xDi•œy
, 
xImagePixm≠
, 
bôm≠_gc
, 
xImage
,

928 0, 0, 0, 0, 
xImage
->
width
, xImage->
height
);

930 
	`XPutImage
(
xDi•œy
, 
xImagePixm≠
, 
xWöGc
, 
xImage
,

931 0, 0, 0, 0, 
xImage
->
width
, xImage->
height
);

932 
	`XDe°royImage
(
xImage
);

933 
	`‰ì
(
imageMem‹y
);

935 
	}
}

937 
XtCÆlbackProc


938 
	$Sñe˘Proc
(
w
, 
unu£d_1
, 
unu£d_2
)

939 
Widgë
 
w
;

940 
ˇddr_t
 
unu£d_1
;

941 
ˇddr_t
 
unu£d_2
;

943 
XawLi°Rëu∫Såu˘
 *
li°_ªtu∫
;

945 
li°_ªtu∫
 = 
	`XawLi°ShowCuºít
(
w
);

947 
li°_ªtu∫
->
li°_ödex
) {

948 
Buâ⁄Quô
:

949 
	`QuôProc
();

951 
Buâ⁄PªviousPage
:

952 
	`PªviousProc
();

954 
Buâ⁄NextPage
:

955 
	`NextProc
();

958 
	`Ârötf
(
°dîr
, "error in SelectProc\n");

959 
	`exô
(0);

961 
	`XawLi°Unhighlight
(
w
);

962 
	}
}

965 
	$QuôProc
()

967 
	`exô
(0);

968 
	}
}

971 
	$NextProc
()

973 
	`PageProc
(
Buâ⁄NextPage
);

974 
	}
}

977 
	$PªviousProc
()

979 
	`PageProc
(
Buâ⁄PªviousPage
);

980 
	}
}

983 
	$PageProc
(
dúe˘i⁄
)

984 
dúe˘i⁄
;

986 
XEvít
 
Áke_evít
;

987 
Arg
 
¨gs
[4];

989 
dúe˘i⁄
) {

990 
Buâ⁄PªviousPage
:

991 i‡(
tfDúe˘‹y
 > 0)

992 
	`TIFFSëDúe˘‹y
(
tfFûe
, --
tfDúe˘‹y
);

996 
Buâ⁄NextPage
:

997 i‡(
	`TIFFRódDúe˘‹y
(
tfFûe
Ë=
True
)

998 
tfDúe˘‹y
++;

1003 
	`Ârötf
(
°dîr
, "error in PageProc\n");

1004 
	`exô
(0);

1007 
xOff£t
 = 
yOff£t
 = 0;

1008 
gøbX
 = 
gøbY
 = -1;

1010 
	`GëTIFFHódî
();

1011 
	`SëNameLabñ
();

1012 
	`GëTIFFImage
();

1014 i‡(
≠pD©a
.
u£Pixm≠
 =
True
)

1015 
	`XFªePixm≠
(
xDi•œy
, 
xImagePixm≠
);

1017 
	`XDe°royImage
(
xImage
);

1019 
	`Cª©eXImage
();

1027 
	`XtSëArg
(
¨gs
[0], 
XtNÆlowShñlResize
, 
FÆ£
);

1028 
	`XtSëVÆues
(
shñlWidgë
, 
¨gs
, 1);

1030 
	`XtSëArg
(
¨gs
[0], 
XtNwidth
, 
tfImageWidth
);

1031 
	`XtSëArg
(
¨gs
[1], 
XtNheight
, 
tfImageHeight
);

1032 
	`XtSëVÆues
(
imageWidgë
, 
¨gs
, 2);

1034 
	`XtSëArg
(
¨gs
[0], 
XtNÆlowShñlResize
, 
True
);

1035 
	`XtSëVÆues
(
shñlWidgë
, 
¨gs
, 1);

1037 
	`XCÀ¨Wödow
(
xDi•œy
, 
	`XtWödow
(
imageWidgë
));

1039 
Áke_evít
.
ty≥
 = 
Expo£
;

1040 
Áke_evít
.
xexpo£
.
x
 = fake_evít.xexpo£.
y
 = 0;

1041 
Áke_evít
.
xexpo£
.
width
 = 
tfImageWidth
;

1042 
Áke_evít
.
xexpo£
.
height
 = 
tfImageHeight
;

1043 
	`EvítProc
(
imageWidgë
, 
NULL
, &
Áke_evít
);

1044 
	}
}

1047 
	$EvítProc
(
widgë
, 
unu£d
, 
evít
)

1048 
Widgë
 
widgë
;

1049 
ˇddr_t
 
unu£d
;

1050 
XEvít
 *
evít
;

1052 
ih
, 
iw
, 
ww
, 
wh
, 
sx
, 
sy
, 
w
, 
h
, 
dx
, 
dy
;

1053 
Dimísi⁄
 
w_width
, 
w_height
;

1054 
XEvít
 
√xt_evít
;

1055 
Arg
 
¨gs
[2];

1057 i‡(
evít
->
ty≥
 =
M≠pögNŸify
) {

1058 
	`XRe‰eshKeybﬂrdM≠pög
((
XM≠pögEvít
 *Ë
evít
);

1062 i‡(!
	`XtIsRólized
(
widgë
))

1065 i‡((
evít
->
ty≥
 =
Buâ⁄Pªss
Ë|| (evít->ty≥ =
Buâ⁄Rñó£
))

1066 i‡(
evít
->
xbuâ⁄
.
buâ⁄
 !
Buâ⁄1
)

1069 
iw
 = 
tfImageWidth
;

1070 
ih
 = 
tfImageHeight
;

1076 i‡(
evít
->
ty≥
 =
Buâ⁄Pªss
) {

1077 
gøbX
 = 
evít
->
xbuâ⁄
.
x
;

1078 
gøbY
 = 
evít
->
xbuâ⁄
.
y
;

1086 
	`XtSëArg
(
¨gs
[0], 
XtNwidth
, &
w_width
);

1087 
	`XtSëArg
(
¨gs
[1], 
XtNheight
, &
w_height
);

1088 
	`XtGëVÆues
(
shñlWidgë
, 
¨gs
, 2);

1089 
ww
 = 
w_width
;

1090 
wh
 = 
w_height
;

1091 
	`XtGëVÆues
(
li°Widgë
, 
¨gs
, 2);

1092 
wh
 -
w_height
;

1094 
evít
->
ty≥
) {

1095 
Expo£
:

1096 
dx
 = 
evít
->
xexpo£
.
x
;

1097 
dy
 = 
evít
->
xexpo£
.
y
;

1098 
sx
 = 
dx
 + 
xOff£t
;

1099 
sy
 = 
dy
 + 
yOff£t
;

1100 
w
 = 
	`MIN
(
evít
->
xexpo£
.
width
, 
iw
);

1101 
h
 = 
	`MIN
(
evít
->
xexpo£
.
height
, 
ih
);

1103 
KeyPªss
:

1104 i‡((
gøbX
 >0Ë|| (
gøbY
 >= 0))

1106 
	`XLookupKeysym
((
XKeyEvít
 *Ë
evít
, 0)) {

1107 
XK_Up
:

1108 i‡(
ih
 < 
wh
)

1110 
sy
 = 
yOff£t
 + 
≠pD©a
.
å™¶©e
;

1111 
sy
 = 
	`MIN
(
ih
 - 
wh
, sy);

1112 i‡(
sy
 =
yOff£t
)

1114 
yOff£t
 = 
sy
;

1115 
sx
 = 
xOff£t
;

1116 
dx
 = 
dy
 = 0;

1117 
w
 = 
ww
; 
h
 = 
wh
;

1119 
XK_Down
:

1120 i‡(
ih
 < 
wh
)

1122 
sy
 = 
yOff£t
 - 
≠pD©a
.
å™¶©e
;

1123 
sy
 = 
	`MAX
(sy, 0);

1124 i‡(
sy
 =
yOff£t
)

1126 
yOff£t
 = 
sy
;

1127 
sx
 = 
xOff£t
;

1128 
dx
 = 
dy
 = 0;

1129 
w
 = 
ww
; 
h
 = 
wh
;

1131 
XK_Le·
:

1132 i‡(
iw
 < 
ww
)

1134 
sx
 = 
xOff£t
 + 
≠pD©a
.
å™¶©e
;

1135 
sx
 = 
	`MIN
(
iw
 - 
ww
, sx);

1136 i‡(
sx
 =
xOff£t
)

1138 
xOff£t
 = 
sx
;

1139 
sy
 = 
yOff£t
;

1140 
dx
 = 
dy
 = 0;

1141 
w
 = 
ww
; 
h
 = 
wh
;

1143 
XK_Right
:

1144 i‡(
iw
 < 
ww
)

1146 
sx
 = 
xOff£t
 - 
≠pD©a
.
å™¶©e
;

1147 
sx
 = 
	`MAX
(sx, 0);

1148 i‡(
sx
 =
xOff£t
)

1150 
xOff£t
 = 
sx
;

1151 
sy
 = 
yOff£t
;

1152 
dx
 = 
dy
 = 0;

1153 
w
 = 
ww
; 
h
 = 
wh
;

1159 
MŸi⁄NŸify
:

1164 i‡(
	`XPídög
(
xDi•œy
))

1165 i‡(
	`XtPìkEvít
(&
√xt_evít
))

1166 i‡(
√xt_evít
.
ty≥
 =
MŸi⁄NŸify
)

1168 i‡((
gøbX
 < 0Ë|| (
gøbY
 < 0))

1170 
sx
 = 
xOff£t
 + 
gøbX
 - (Ë
evít
->
xmŸi⁄
.
x
;

1171 i‡(
sx
 >(
iw
 - 
ww
))

1172 
sx
 = 
iw
 - 
ww
;

1173 
sx
 = 
	`MAX
(sx, 0);

1174 
sy
 = 
yOff£t
 + 
gøbY
 - (Ë
evít
->
xmŸi⁄
.
y
;

1175 i‡(
sy
 >(
ih
 - 
wh
))

1176 
sy
 = 
ih
 - 
wh
;

1177 
sy
 = 
	`MAX
(sy, 0);

1178 i‡((
sx
 =
xOff£t
Ë&& (
sy
 =
yOff£t
))

1180 
dx
 = 
dy
 = 0;

1181 
w
 = 
ww
; 
h
 = 
wh
;

1183 
Buâ⁄Rñó£
:

1184 
xOff£t
 = xOff£à+ 
gøbX
 - (Ë
evít
->
xbuâ⁄
.
x
;

1185 
xOff£t
 = 
	`MIN
(
iw
 - 
ww
, xOffset);

1186 
xOff£t
 = 
	`MAX
(xOffset, 0);

1187 
yOff£t
 = yOff£à+ 
gøbY
 - (Ë
evít
->
xbuâ⁄
.
y
;

1188 
yOff£t
 = 
	`MIN
(
ih
 - 
wh
, yOffset);

1189 
yOff£t
 = 
	`MAX
(yOffset, 0);

1190 
gøbX
 = 
gøbY
 = -1;

1195 i‡(
≠pD©a
.
u£Pixm≠
 =
True
) {

1196 i‡(
xImageDïth
 == 1)

1197 
	`XC›yPœ√
(
xDi•œy
, 
xImagePixm≠
, 
	`XtWödow
(
widgë
),

1198 
xWöGc
, 
sx
, 
sy
, 
w
, 
h
, 
dx
, 
dy
, 1);

1200 
	`XC›yAªa
(
xDi•œy
, 
xImagePixm≠
, 
	`XtWödow
(
widgë
),

1201 
xWöGc
, 
sx
, 
sy
, 
w
, 
h
, 
dx
, 
dy
);

1203 
	`XPutImage
(
xDi•œy
, 
	`XtWödow
(
widgë
), 
xWöGc
, 
xImage
,

1204 
sx
, 
sy
, 
dx
, 
dy
, 
w
, 
h
);

1205 
	}
}

1208 
	$ResizeProc
()

1210 
Dimísi⁄
 
w_width
, 
w_height
;

1211 
xo
, 
yo
, 
ww
, 
wh
;

1212 
XEvít
 
Áke_evít
;

1213 
Arg
 
¨gs
[2];

1215 i‡((
xOff£t
 =0Ë&& (
yOff£t
 == 0))

1218 
	`XtSëArg
(
¨gs
[0], 
XtNwidth
, &
w_width
);

1219 
	`XtSëArg
(
¨gs
[1], 
XtNheight
, &
w_height
);

1220 
	`XtGëVÆues
(
shñlWidgë
, 
¨gs
, 2);

1221 
ww
 = 
w_width
;

1222 
wh
 = 
w_height
;

1223 
	`XtGëVÆues
(
li°Widgë
, 
¨gs
, 2);

1224 
wh
 -
w_height
;

1226 
xo
 = 
xOff£t
; 
yo
 = 
yOff£t
;

1228 i‡((
xOff£t
 + 
ww
Ë>
tfImageWidth
)

1229 
xOff£t
 = 
	`MAX
((Ë
tfImageWidth
 - 
ww
, 0);

1230 i‡((
yOff£t
 + 
wh
Ë>
tfImageHeight
)

1231 
yOff£t
 = 
	`MAX
((Ë
tfImageHeight
 - 
wh
, 0);

1237 i‡((
xo
 !
xOff£t
Ë|| (
yo
 !
yOff£t
)) {

1238 
Áke_evít
.
ty≥
 = 
Expo£
;

1239 
Áke_evít
.
xexpo£
.
x
 = fake_evít.xexpo£.
y
 = 0;

1240 
Áke_evít
.
xexpo£
.
width
 = 
tfImageWidth
;

1241 
Áke_evít
.
xexpo£
.
height
 = 
tfImageHeight
;

1242 
	`EvítProc
(
imageWidgë
, 
NULL
, &
Áke_evít
);

1244 
	}
}

1247 
	$XTiffEº‹H™dÀr
(
di•œy
, 
îr‹_evít
)

1248 
Di•œy
 *
di•œy
;

1249 
XEº‹Evít
 *
îr‹_evít
;

1251 
mesßge
[80];

1256 i‡((
îr‹_evít
->
îr‹_code
 =
BadAŒoc
)

1257 && (
îr‹_evít
->
ªque°_code
 =
X_Cª©ePixm≠
))

1258 
	`Ârötf
(
°dîr
, "xtiff:ÑequestedÖixmapÅoo big for display\n");

1260 
	`XGëEº‹Text
(
di•œy
, 
îr‹_evít
->
îr‹_code
, 
mesßge
, 80);

1261 
	`Ârötf
(
°dîr
, "xtiff:Éº‹ codê%s\n", 
mesßge
);

1264 
	`exô
(0);

1265 
	}
}

1268 
	$Ußge
()

1270 
	`Ârötf
(
°dîr
, "Usage xtiff: [options]Åiff-file\n");

1271 
	`Ârötf
(
°dîr
, "\tstandard Xt options\n");

1272 
	`Ârötf
(
°dîr
, "\t[-help]\n");

1273 
	`Ârötf
(
°dîr
, "\t[-gamma gamma]\n");

1274 
	`Ârötf
(
°dîr
, "\t[-usePixmap (True | False)]\n");

1275 
	`Ârötf
(
°dîr
, "\t[-viewportWidthÖixels]\n");

1276 
	`Ârötf
(
°dîr
, "\t[-viewportHeightÖixels]\n");

1277 
	`Ârötf
(
°dîr
, "\t[-translateÖixels]\n");

1278 
	`Ârötf
(
°dîr
, "\t[-verbose (True | False)]\n");

1279 
	`exô
(0);

1280 
	}
}

	@contrib/dbs/xtiff/xtifficon.h

1 
	#xtiffic⁄_width
 32

	)

2 
	#xtiffic⁄_height
 32

	)

3 
	gxtiffic⁄_bôs
[] = {

	@contrib/iptcutil/iptcutil.c

3 
	~"tif_c⁄fig.h
"

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

8 
	~<˘y≥.h
>

10 #ifde‡
HAVE_STRINGS_H


11 
	~<°rögs.h
>

14 #ifde‡
HAVE_IO_H


15 
	~<io.h
>

18 #ifde‡
HAVE_FCNTL_H


19 
	~<f˙é.h
>

22 #ifde‡
WIN32


23 
	#STRNICMP
 
°∫icmp


	)

25 
	#STRNICMP
 
°∫ˇ£cmp


	)

28 
	s_èg_•ec


31 
	mid
;

34 *
	m«me
;

35 } 
	tèg_•ec
;

37 
èg_•ec
 
	gègs
[] = {

96 
	$f‹m©Såög
(
FILE
 *
ofûe
, c⁄° *
s
, 
Àn
)

98 
	`putc
('"', 
ofûe
);

99 ; 
Àn
 > 0; --Àn, ++
s
) {

100 
c
 = *
s
;

101 
c
) {

103 
	`Âuts
("&amp;", 
ofûe
);

105 #ifde‡
HANDLE_GT_LT


107 
	`Âuts
("&…;", 
ofûe
);

110 
	`Âuts
("&gt;", 
ofûe
);

114 
	`Âuts
("&quŸ;", 
ofûe
);

117 i‡(
	`is˙ål
(
c
))

118 
	`Ârötf
(
ofûe
, "&#%d;", 
c
);

120 
	`putc
(*
s
, 
ofûe
);

124 
	`Âuts
("\"\n", 
ofûe
);

125 
	}
}

127 
	s_html_code


130 
	mÀn
;

132 *
	mcode
,

133 
	mvÆ
;

134 } 
	thtml_code
;

136 
html_code
 
	ghtml_codes
[] = {

137 #ifde‡
HANDLE_GT_LT


150 
	$c⁄vîtHTMLcodes
(*
s
, 
Àn
)

152 i‡(
Àn
 <=0 || 
s
==(*)
NULL
 || *s=='\0')

155 i‡(
s
[1] == '#')

157 
vÆ
, 
o
;

159 i‡(
	`ssˇnf
(
s
,"&#%d;",&
vÆ
) == 1)

161 
o
 = 3;

162 
s
[
o
] != ';')

164 
o
++;

165 i‡(
o
 > 5)

168 i‡(
o
 < 5)

169 
	`°r˝y
(
s
+1, s+1+
o
);

170 *
s
 = 
vÆ
;

171  
o
;

177 
i
,

178 
codes
 = (
html_codes
Ë/ (
html_code
);

180 
i
=0; i < 
codes
; i++)

182 i‡(
html_codes
[
i
].
Àn
 <=Üen)

183 i‡(
	`STRNICMP
(
s
, 
html_codes
[
i
].
code
, html_codes[i].
Àn
) == 0)

185 
	`°r˝y
(
s
+1, s+
html_codes
[
i
].
Àn
);

186 *
s
 = 
html_codes
[
i
].
vÆ
;

187  
html_codes
[
i
].
Àn
-1;

193 
	}
}

195 
	$f‹m©IPTC
(
FILE
 *
ifûe
, FILE *
ofûe
)

198 
foundùtc
,

199 
ègsfound
;

202 
ª˙um
,

203 
d©a£t
;

206 *
ªadabÀ
,

207 *
°r
;

210 
ègödx
,

211 
ègÀn
;

214 
i
,

215 
ègcou¡
 = (
ègs
Ë/ (
èg_•ec
);

218 
c
;

220 
foundùtc
 = 0;

221 
ègsfound
 = 0;

223 
c
 = 
	`gëc
(
ifûe
);

224 
c
 !
EOF
)

226 i‡(
c
 == 0x1c)

227 
foundùtc
 = 1;

230 i‡(
foundùtc
)

237 
d©a£t
 = 
	`gëc
(
ifûe
);

238 i‡((Ë
d©a£t
 =
EOF
)

240 
ª˙um
 = 
	`gëc
(
ifûe
);

241 i‡((Ë
ª˙um
 =
EOF
)

244 
i
=0; i< 
ègcou¡
; i++)

246 i‡(
ègs
[
i
].
id
 =
ª˙um
)

249 i‡(
i
 < 
ègcou¡
)

250 
ªadabÀ
 = 
ègs
[
i
].
«me
;

252 
ªadabÀ
 = "";

255 
c
 = 
	`gëc
(
ifûe
);

256 i‡(
c
 =
EOF
)

258 i‡(
c
 & () 0x80)

261 
buf„r
[4];

263 
i
=0; i<4; i++)

265 
c
 = 
buf„r
[
i
] = 
	`gëc
(
ifûe
);

266 i‡(
c
 =
EOF
)

269 
ègÀn
 = (((Ë
buf„r
[ 0 ]) << 24) |

270 (((Ë
buf„r
[ 1 ]) << 16) |

271 (((Ë
buf„r
[ 2 ]) << 8) |

272 (((Ë
buf„r
[ 3 ]));

277 
x
 = 
c
;

279 
ègÀn
 = ((Ë
x
) << 8;

280 
x
 = 
	`gëc
(
ifûe
);

281 i‡(()
x
 =
EOF
)

283 
ègÀn
 |(Ë
x
;

286 
°r
 = (*Ë
	`mÆloc
((Ë(
ègÀn
+1));

287 i‡(
°r
 =(*Ë
NULL
)

289 
	`¥ötf
("Memoryállocation failed");

292 
ègödx
=0;Åagödx<
ègÀn
;Åagindx++)

294 
c
 = 
°r
[
ègödx
] = 
	`gëc
(
ifûe
);

295 i‡(
c
 =
EOF
)

297 
	`‰ì
(
°r
);

301 
°r
[ 
ègÀn
 ] = 0;

304 i‡(
	`°æí
(
ªadabÀ
) > 0)

305 
	`Ârötf
(
ofûe
, "%d#%d#%s=",()
d©a£t
, (Ë
ª˙um
, 
ªadabÀ
);

307 
	`Ârötf
(
ofûe
, "%d#%d=",()
d©a£t
, (Ë
ª˙um
);

308 
	`f‹m©Såög
–
ofûe
, 
°r
, 
ègÀn
 );

309 
	`‰ì
(
°r
);

311 
ègsfound
++;

313 
c
 = 
	`gëc
(
ifûe
);

315  
ègsfound
;

316 
	}
}

318 
tokíizî
(
öÊag
,*
tokí
,
tokmax
,*
löe
,

319 *
whôe
,*
brkch¨
,*
quŸe
,
esch¨
,*
brku£d
,

320 *
√xt
,*
quŸed
);

322 *
	$su≥r_fgës
(*
b
, *
bÀn
, 
FILE
 *
fûe
)

325 
c
,

326 
Àn
;

329 *
q
;

331 
Àn
=*
bÀn
;

332 
q
=
b
; ; q++)

334 
c
=
	`fgëc
(
fûe
);

335 i‡(
c
 =
EOF
 || c == '\n')

337 i‡((()
q
 - ()
b
 + 1 ) >(Ë
Àn
)

340 
éí
;

342 
éí
=()
q
-()
b
;

343 
Àn
<<=1;

344 
b
=(*Ë
	`ªÆloc
((*Ëb,(
Àn
+2));

345 i‡((*Ë
b
 =(*Ë
NULL
)

347 
q
=
b
+
éí
;

349 *
q
=(Ë
c
;

351 *
bÀn
=0;

352 i‡((*)
b
 !(*Ë
NULL
)

355 
éí
;

357 
éí
=()
q
 - ()
b
;

358 i‡(
éí
 == 0)

359  (*Ë
NULL
;

360 
b
[
éí
] = '\0';

361 *
bÀn
=++
éí
;

363  
b
;

364 
	}
}

366 
	#BUFFER_SZ
 4096

	)

368 
	$maö
(
¨gc
, *
¨gv
[])

371 
Àngth
;

374 *
buf„r
;

377 
i
,

378 
mode
;

380 
FILE


381 *
ifûe
 = 
°dö
,

382 *
ofûe
 = 
°dout
;

385 
c
,

386 *
ußge
 = "usage: iptcutil -t | -b [-i file] [-o file] <input >output";

388 if–
¨gc
 < 2 )

390 
	`puts
(
ußge
);

394 
mode
 = 0;

395 
Àngth
 = -1;

396 
buf„r
 = (*)
NULL
;

398 
i
=1; i<
¨gc
; i++)

400 
c
 = 
¨gv
[
i
][0];

401 i‡(
c
 == '-' || c == '/')

403 
c
 = 
¨gv
[
i
][1];

404  
c
 )

407 
mode
 = 1;

408 #ifde‡
WIN32


410 
	`_£tmode
–
	`_fûío
–
ofûe
 ), 
_O_BINARY
 );

414 
mode
 = 0;

415 #ifde‡
WIN32


417 
	`_£tmode
–
	`_fûío
–
ifûe
 ), 
_O_BINARY
 );

421 i‡(
mode
 == 0)

422 
ifûe
 = 
	`f›í
(
¨gv
[++
i
], "rb");

424 
ifûe
 = 
	`f›í
(
¨gv
[++
i
], "rt");

425 i‡(
ifûe
 =(
FILE
 *)
NULL
)

427 
	`¥ötf
("U«bÀÅÿ›í: %s\n", 
¨gv
[
i
]);

432 i‡(
mode
 == 0)

433 
ofûe
 = 
	`f›í
(
¨gv
[++
i
], "wt");

435 
ofûe
 = 
	`f›í
(
¨gv
[++
i
], "wb");

436 i‡(
ofûe
 =(
FILE
 *)
NULL
)

438 
	`¥ötf
("U«bÀÅÿ›í: %s\n", 
¨gv
[
i
]);

443 
	`¥ötf
("Unknow¿›ti⁄: %s\n", 
¨gv
[
i
]);

449 
	`puts
(
ußge
);

454 i‡(
mode
 == 0)

455 
	`f‹m©IPTC
(
ifûe
, 
ofûe
);

457 i‡(
mode
 == 1)

460 
brku£d
,

461 
quŸed
,

462 *
löe
,

463 *
tokí
,

464 *
√w°r
;

467 
°©e
,

468 
√xt
;

471 
ª˙um
 = 0,

472 
d©a£t
 = 0;

475 
öpuéí
 = 
BUFFER_SZ
;

477 
löe
 = (*Ë
	`mÆloc
(
öpuéí
);

478 
tokí
 = (*)
NULL
;

479 (
löe
 = 
	`su≥r_fgës
÷öe,&
öpuéí
,
ifûe
))!=
NULL
)

481 
°©e
=0;

482 
√xt
=0;

484 
tokí
 = (*Ë
	`mÆloc
(
öpuéí
);

485 
√w°r
 = (*Ë
	`mÆloc
(
öpuéí
);

486 
	`tokíizî
(0, 
tokí
, 
öpuéí
, 
löe
, "", "=", "\"", 0,

487 &
brku£d
,&
√xt
,&
quŸed
)==0)

489 i‡(
°©e
 == 0)

492 
°©e
,

493 
√xt
;

496 
brku£d
,

497 
quŸed
;

499 
°©e
=0;

500 
√xt
=0;

501 
	`tokíizî
(0, 
√w°r
, 
öpuéí
, 
tokí
, "", "#", "", 0,

502 &
brku£d
, &
√xt
, &
quŸed
)==0)

504 i‡(
°©e
 == 0)

505 
d©a£t
 = (Ë
	`©oi
(
√w°r
);

507 i‡(
°©e
 == 1)

508 
ª˙um
 = (Ë
	`©oi
(
√w°r
);

509 
°©e
++;

513 i‡(
°©e
 == 1)

516 
√xt
;

519 
Àn
;

522 
brku£d
,

523 
quŸed
;

525 
√xt
=0;

526 
Àn
 = 
	`°æí
(
tokí
);

527 
	`tokíizî
(0, 
√w°r
, 
öpuéí
, 
tokí
, "", "&", "", 0,

528 &
brku£d
, &
√xt
, &
quŸed
)==0)

530 i‡(
brku£d
 && 
√xt
 > 0)

533 *
s
 = &
tokí
[
√xt
-1];

535 
Àn
 -
	`c⁄vîtHTMLcodes
(
s
, 
	`°æí
(s));

539 
	`Âutc
(0x1c, 
ofûe
);

540 
	`Âutc
(
d©a£t
, 
ofûe
);

541 
	`Âutc
(
ª˙um
, 
ofûe
);

542 i‡(
Àn
 < 0x10000)

544 
	`Âutc
((
Àn
 >> 8Ë& 255, 
ofûe
);

545 
	`Âutc
(
Àn
 & 255, 
ofûe
);

549 
	`Âutc
(((
Àn
 >> 24Ë& 255Ë| 0x80, 
ofûe
);

550 
	`Âutc
((
Àn
 >> 16Ë& 255, 
ofûe
);

551 
	`Âutc
((
Àn
 >> 8Ë& 255, 
ofûe
);

552 
	`Âutc
(
Àn
 & 255, 
ofûe
);

554 
√xt
=0;

555 
Àn
--)

556 
	`Âutc
(
tokí
[
√xt
++], 
ofûe
);

558 
°©e
++;

560 
	`‰ì
(
tokí
);

561 
tokí
 = (*)
NULL
;

562 
	`‰ì
(
√w°r
);

563 
√w°r
 = (*)
NULL
;

565 
	`‰ì
(
löe
);

567 
	`f˛o£
–
ifûe
 );

568 
	`f˛o£
–
ofûe
 );

572 
	}
}

759 
	#IN_WHITE
 0

	)

760 
	#IN_TOKEN
 1

	)

761 
	#IN_QUOTE
 2

	)

762 
	#IN_OZONE
 3

	)

764 
	g_p_°©e
;

765 
	g_p_Êag
;

766 
	g_p_curquŸe
;

767 
	g_p_tokpos
;

771 
	$södex
(
ch
,*
°rög
)

773 *
˝
;

774 
˝
=
°rög
;*cp;++cp)

775 if(
ch
==*
˝
)

776  ()(
˝
-
°rög
);

778 
	}
}

782 
	$ch°‹e
(*
°rög
,
max
,
ch
)

784 
c
;

785 if(
_p_tokpos
>=0&&_p_tokpos<
max
-1)

787 if(
_p_°©e
==
IN_QUOTE
)

788 
c
=
ch
;

790 
_p_Êag
&3)

793 
c
=
	`touµî
(
ch
);

797 
c
=
	`tﬁowî
(
ch
);

801 
c
=
ch
;

804 
°rög
[
_p_tokpos
++]=
c
;

807 
	}
}

809 
	$tokíizî
(
öÊag
,*
tokí
,
tokmax
,*
löe
,

810 *
whôe
,*
brkch¨
,*
quŸe
,
esch¨
,*
brku£d
,

811 *
√xt
,*
quŸed
)

813 
qp
;

814 
c
,
nc
;

816 *
brku£d
=0;

817 *
quŸed
=0;

819 if(!
löe
[*
√xt
])

822 
_p_°©e
=
IN_WHITE
;

823 
_p_curquŸe
=0;

824 
_p_Êag
=
öÊag
;

826 
_p_tokpos
=0;(
c
=
löe
[*
√xt
]);++(*next))

828 if((
qp
=
	`södex
(
c
,
brkch¨
))>=0)

830 
_p_°©e
)

832 
IN_WHITE
:

833 
IN_TOKEN
:

834 
IN_OZONE
:

835 ++(*
√xt
);

836 *
brku£d
=
brkch¨
[
qp
];

837 
byebye
;

839 
IN_QUOTE
:

840 
	`ch°‹e
(
tokí
,
tokmax
,
c
);

844 if((
qp
=
	`södex
(
c
,
quŸe
))>=0)

846 
_p_°©e
)

848 
IN_WHITE
:

849 
_p_°©e
=
IN_QUOTE
;

850 
_p_curquŸe
=
quŸe
[
qp
];

851 *
quŸed
=1;

854 
IN_QUOTE
:

855 if(
quŸe
[
qp
]==
_p_curquŸe
)

857 
_p_°©e
=
IN_OZONE
;

858 
_p_curquŸe
=0;

861 
	`ch°‹e
(
tokí
,
tokmax
,
c
);

864 
IN_TOKEN
:

865 
IN_OZONE
:

866 *
brku£d
=
c
;

867 
byebye
;

870 if((
qp
=
	`södex
(
c
,
whôe
))>=0)

872 
_p_°©e
)

874 
IN_WHITE
:

875 
IN_OZONE
:

878 
IN_TOKEN
:

879 
_p_°©e
=
IN_OZONE
;

882 
IN_QUOTE
:

883 
	`ch°‹e
(
tokí
,
tokmax
,
c
);

887 if(
c
==
esch¨
)

889 
nc
=
löe
[(*
√xt
)+1];

890 if(
nc
==0)

892 *
brku£d
=0;

893 
	`ch°‹e
(
tokí
,
tokmax
,
c
);

894 ++(*
√xt
);

895 
byebye
;

897 
_p_°©e
)

899 
IN_WHITE
:

900 --(*
√xt
);

901 
_p_°©e
=
IN_TOKEN
;

904 
IN_TOKEN
:

905 
IN_QUOTE
:

906 ++(*
√xt
);

907 
	`ch°‹e
(
tokí
,
tokmax
,
nc
);

910 
IN_OZONE
:

911 
byebye
;

916 
_p_°©e
)

918 
IN_WHITE
:

919 
_p_°©e
=
IN_TOKEN
;

921 
IN_TOKEN
:

922 
IN_QUOTE
:

923 
	`ch°‹e
(
tokí
,
tokmax
,
c
);

926 
IN_OZONE
:

927 
byebye
;

932 
byebye
:

933 
tokí
[
_p_tokpos
]=0;

936 
	}
}

	@contrib/mfs/mfs_file.c

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

54 
	#MAX_BUFFS
 20

	)

55 
	#FALSE
 0

	)

56 
	#TRUE
 1

	)

64 *
	gbuf
[
MAX_BUFFS
];

65 
	gbuf_off
[
MAX_BUFFS
];

66 
	gbuf_size
[
MAX_BUFFS
];

67 
	gfds
[
MAX_BUFFS
];

68 
	gbuf_mode
[
MAX_BUFFS
];

70 
	glibøry_öô_d⁄e
 = 
FALSE
;

79 
mfs_›í
 (*
±r
, 
size
, *
mode
);

80 
mfs_l£ek
 (
fd
, 
off£t
, 
whí˚
);

81 
mfs_ªad
 (
fd
, *
buf
, 
size
);

82 
mfs_wrôe
 (
fd
, *
buf
, 
size
);

83 
mfs_size
 (
fd
);

84 
mfs_m≠
 (
fd
, **
addr
, 
size_t
 *
Àn
);

85 
mfs_unm≠
 (
fd
);

86 
mfs_˛o£
 (
fd
);

87 
exãnd_mem_fûe
 (
fd
, 
size
);

88 
mem_öô
 ();

119 
	$mfs_›í
 (*
buf„r
, 
size
, *
mode
)

121 
ªt
, 
i
;

122 *
tmp
;

124 i‡(
libøry_öô_d⁄e
 =
FALSE
)

126 
	`mem_öô
 ();

127 
libøry_öô_d⁄e
 = 
TRUE
;

130 
ªt
 = -1;

134 
i
 = 0; i < 
MAX_BUFFS
; i++)

136 i‡(
fds
[
i
] == -1)

138 
ªt
 = 
i
;

143 i‡(
i
 =
MAX_BUFFS
)

145 
ªt
 = -1;

146 
î∫o
 = 
EMFILE
;

149 i‡(
ªt
 >0 && *
mode
 == 'r')

151 i‡(
buf„r
 =(*)
NULL
)

153 
ªt
 = -1;

154 
î∫o
 = 
EINVAL
;

158 
buf
[
ªt
] = (*)
buf„r
;

159 
buf_size
[
ªt
] = 
size
;

160 
buf_off
[
ªt
] = 0;

163 i‡(
ªt
 >0 && *
mode
 == 'w')

166 i‡(
buf„r
 !(*)
NULL
)

168 
ªt
 = -1;

169 
î∫o
 = 
EINVAL
;

174 
tmp
 = 
	`mÆloc
 (0);

175 i‡(
tmp
 =(*)
NULL
)

177 
ªt
 = -1;

178 
î∫o
 = 
EDQUOT
;

182 
buf
[
ªt
] = (*)
tmp
;

183 
buf_size
[
ªt
] = 0;

184 
buf_off
[
ªt
] = 0;

188 i‡(
ªt
 >0 && *
mode
 == 'a')

190 i‡(
buf„r
 =(*Ë
NULL
)

192 
tmp
 = 
	`mÆloc
 (0);

193 i‡(
tmp
 =(*)
NULL
)

195 
ªt
 = -1;

196 
î∫o
 = 
EDQUOT
;

200 
buf
[
ªt
] = (*)
tmp
;

201 
buf_size
[
ªt
] = 0;

202 
buf_off
[
ªt
] = 0;

207 
buf
[
ªt
] = (*)
buf„r
;

208 
buf_size
[
ªt
] = 
size
;

209 
buf_off
[
ªt
] = 0;

214 
ªt
 = -1;

215 
î∫o
 = 
EINVAL
;

218 i‡(
ªt
 != -1)

220 
fds
[
ªt
] = 0;

221 
buf_mode
[
ªt
] = *
mode
;

224  (
ªt
);

225 
	}
}

242 
	$mfs_l£ek
 (
fd
, 
off£t
, 
whí˚
)

244 
ªt
;

245 
ã°_off
;

247 i‡(
fds
[
fd
] == -1)

249 
ªt
 = -1;

250 
î∫o
 = 
EBADF
;

252 i‡(
off£t
 < 0 && 
whí˚
 =
SEEK_SET
)

254 
ªt
 = -1;

255 
î∫o
 = 
EINVAL
;

259 
whí˚
)

261 
SEEK_SET
:

262 i‡(
off£t
 > 
buf_size
[
fd
])

263 
	`exãnd_mem_fûe
 (
fd
, 
off£t
);

264 
buf_off
[
fd
] = 
off£t
;

265 
ªt
 = 
off£t
;

268 
SEEK_CUR
:

269 
ã°_off
 = 
buf_off
[
fd
] + 
off£t
;

271 i‡(
ã°_off
 < 0)

273 
ªt
 = -1;

274 
î∫o
 = 
EINVAL
;

278 i‡(
ã°_off
 > 
buf_size
[
fd
])

279 
	`exãnd_mem_fûe
 (
fd
, 
ã°_off
);

280 
buf_off
[
fd
] = 
ã°_off
;

281 
ªt
 = 
ã°_off
;

285 
SEEK_END
:

286 
ã°_off
 = 
buf_size
[
fd
] + 
off£t
;

288 i‡(
ã°_off
 < 0)

290 
ªt
 = -1;

291 
î∫o
 = 
EINVAL
;

295 i‡(
ã°_off
 > 
buf_size
[
fd
])

296 
	`exãnd_mem_fûe
 (
fd
, 
ã°_off
);

297 
buf_off
[
fd
] = 
ã°_off
;

298 
ªt
 = 
ã°_off
;

303 
î∫o
 = 
EINVAL
;

304 
ªt
 = -1;

309  (
ªt
);

310 
	}
}

327 
	$mfs_ªad
 (
fd
, *
˛¡_buf
, 
size
)

329 
ªt
;

331 i‡(
fds
[
fd
] =-1 || 
buf_mode
[fd] != 'r')

335 
ªt
 = -1;

336 
î∫o
 = 
EBADF
;

338 i‡(
buf_off
[
fd
] + 
size
 > 
buf_size
[fd])

340 
ªt
 = 0;

344 
	`mem˝y
 (
˛¡_buf
, (*Ë(
buf
[
fd
] + 
buf_off
[fd]), 
size
);

345 
buf_off
[
fd
] = buf_off[fd] + 
size
;

346 
ªt
 = 
size
;

349  (
ªt
);

350 
	}
}

367 
	$mfs_wrôe
 (
fd
, *
˛¡_buf
, 
size
)

369 
ªt
;

371 i‡(
fds
[
fd
] =-1 || 
buf_mode
[fd] == 'r')

375 
ªt
 = -1;

376 
î∫o
 = 
EBADF
;

378 i‡(
buf_mode
[
fd
] == 'w')

382 i‡(
buf_off
[
fd
] + 
size
 > 
buf_size
[fd])

384 
	`exãnd_mem_fûe
 (
fd
, 
buf_off
[fd] + 
size
);

385 
buf_size
[
fd
] = (
buf_off
[fd] + 
size
);

388 
	`mem˝y
 ((
buf
[
fd
] + 
buf_off
[fd]), 
˛¡_buf
, 
size
);

389 
buf_off
[
fd
] = buf_off[fd] + 
size
;

391 
ªt
 = 
size
;

397 i‡(
buf_off
[
fd
] !
buf_size
[fd])

398 
buf_off
[
fd
] = 
buf_size
[fd];

400 
	`exãnd_mem_fûe
 (
fd
, 
buf_off
[fd] + 
size
);

401 
buf_size
[
fd
] +
size
;

403 
	`mem˝y
 ((
buf
[
fd
] + 
buf_off
[fd]), 
˛¡_buf
, 
size
);

404 
buf_off
[
fd
] = buf_off[fd] + 
size
;

406 
ªt
 = 
size
;

409  (
ªt
);

410 
	}
}

425 
	$mfs_size
 (
fd
)

427 
ªt
;

429 i‡(
fds
[
fd
] == -1)

431 
ªt
 = -1;

432 
î∫o
 = 
EBADF
;

435 
ªt
 = 
buf_size
[
fd
];

437  (
ªt
);

438 
	}
}

456 
	$mfs_m≠
 (
fd
, **
addr
, 
size_t
 *
Àn
)

458 
ªt
;

460 i‡(
fds
[
fd
] == -1)

462 
ªt
 = -1;

463 
î∫o
 = 
EBADF
;

467 *
addr
 = 
buf
[
fd
];

468 *
Àn
 = 
buf_size
[
fd
];

469 
ªt
 = 0;

472  (
ªt
);

473 
	}
}

489 
	$mfs_unm≠
 (
fd
)

492 
	}
}

507 
	$mfs_˛o£
 (
fd
)

509 
ªt
;

511 i‡(
fds
[
fd
] == -1)

513 
ªt
 = -1;

514 
î∫o
 = 
EBADF
;

518 
fds
[
fd
] = -1;

519 
ªt
 = 0;

522  (
ªt
);

523 
	}
}

538 
	$exãnd_mem_fûe
 (
fd
, 
size
)

540 *
√w_mem
;

541 
ªt
;

543 i‡((
√w_mem
 = 
	`ªÆloc
 (
buf
[
fd
], 
size
)Ë=(*Ë
NULL
)

544 
ªt
 = -1;

547 
buf
[
fd
] = (*Ë
√w_mem
;

548 
ªt
 = 0;

551  (
ªt
);

552 
	}
}

567 
	$mem_öô
 ()

569 
i
;

571 
i
 = 0; i < 
MAX_BUFFS
; i++)

573 
fds
[
i
] = -1;

574 
buf
[
i
] = (*)
NULL
;

575 
buf_size
[
i
] = 0;

576 
buf_off
[
i
] = 0;

578 
	}
}

	@contrib/pds/tif_imageiter.c

49 
	~"tiffi›.h
"

50 
	~"tif_imageôî.h
"

51 
	~<as£π.h
>

52 
	~<°dio.h
>

54 
gtTûeC⁄tig
(
TIFFImageIãr
*, *
ud©a
, 
uöt32
, uint32);

55 
gtTûeSï¨©e
(
TIFFImageIãr
*, *
ud©a
, 
uöt32
, uint32);

56 
gtSåùC⁄tig
(
TIFFImageIãr
*, *
ud©a
, 
uöt32
, uint32);

57 
gtSåùSï¨©e
(
TIFFImageIãr
*, *
ud©a
, 
uöt32
, uint32);

59 c⁄° 
	gphŸoTag
[] = "PhotometricInterpretation";

62 
	$isCCITTCom¥essi⁄
(
TIFF
* 
tif
)

64 
uöt16
 
com¥ess
;

65 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, &
com¥ess
);

66  (
com¥ess
 =
COMPRESSION_CCITTFAX3
 ||

67 
com¥ess
 =
COMPRESSION_CCITTFAX4
 ||

68 
com¥ess
 =
COMPRESSION_CCITTRLE
 ||

69 
com¥ess
 =
COMPRESSION_CCITTRLEW
);

70 
	}
}

73 
	$TIFFImageIãrBegö
(
TIFFImageIãr
* 
img
, 
TIFF
* 
tif
, 
°›
, 
emsg
[1024])

75 
uöt16
* 
ßm∂eöfo
;

76 
uöt16
 
exåaßm∂es
;

77 
uöt16
 
∂™¨c⁄fig
;

78 
cﬁ‹ch™√ls
;

80 
img
->
tif
 =Åif;

81 
img
->
°›⁄îr
 = 
°›
;

82 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, &
img
->
bô•îßm∂e
);

83 
img
->
Æpha
 = 0;

84 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, &
img
->
ßm∂e•îpixñ
);

85 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_EXTRASAMPLES
,

86 &
exåaßm∂es
, &
ßm∂eöfo
);

87 i‡(
exåaßm∂es
 == 1)

88 
ßm∂eöfo
[0]) {

89 
EXTRASAMPLE_ASSOCALPHA
:

90 
EXTRASAMPLE_UNASSALPHA
:

91 
img
->
Æpha
 = 
ßm∂eöfo
[0];

94 
cﬁ‹ch™√ls
 = 
img
->
ßm∂e•îpixñ
 - 
exåaßm∂es
;

95 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_PLANARCONFIG
, &
∂™¨c⁄fig
);

96 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, &
img
->
phŸomëric
)) {

97 
cﬁ‹ch™√ls
) {

99 i‡(
	`isCCITTCom¥essi⁄
(
tif
))

100 
img
->
phŸomëric
 = 
PHOTOMETRIC_MINISWHITE
;

102 
img
->
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

105 
img
->
phŸomëric
 = 
PHOTOMETRIC_RGB
;

108 
	`•rötf
(
emsg
, "MissögÇìded %†èg", 
phŸoTag
);

112 
img
->
phŸomëric
) {

113 
PHOTOMETRIC_PALETTE
:

114 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COLORMAP
,

115 &
img
->
ªdcm≠
, &img->
gªícm≠
, &img->
bluecm≠
)) {

116 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif), "MissingÑequired \"Colormap\"Åag");

120 
PHOTOMETRIC_MINISWHITE
:

121 
PHOTOMETRIC_MINISBLACK
:

132 
PHOTOMETRIC_YCBCR
:

133 i‡(
∂™¨c⁄fig
 !
PLANARCONFIG_CONTIG
) {

134 
	`•rötf
(
emsg
, "Sorry, canÇot handle YCbCr images with %s=%d",

135 "Pœ«rc⁄figuøti⁄", 
∂™¨c⁄fig
);

139 { 
uöt16
 
com¥ess
;

140 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, &
com¥ess
);

141 i‡(
com¥ess
 =
COMPRESSION_JPEG
 && 
∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
) {

144 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_JPEGCOLORMODE
, 
JPEGCOLORMODE_RGB
);

145 
img
->
phŸomëric
 = 
PHOTOMETRIC_RGB
;

149 
PHOTOMETRIC_RGB
:

150 i‡(
cﬁ‹ch™√ls
 < 3) {

151 
	`•rötf
(
emsg
, "Sorry, canÇot handle RGB image with %s=%d",

152 "Cﬁ‹ ch™√ls", 
cﬁ‹ch™√ls
);

156 
PHOTOMETRIC_SEPARATED
: {

157 
uöt16
 
ök£t
;

158 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_INKSET
, &
ök£t
);

159 i‡(
ök£t
 !
INKSET_CMYK
) {

160 
	`•rötf
(
emsg
, "Sorry, canÇot handle separated image with %s=%d",

161 "InkSë", 
ök£t
);

164 i‡(
img
->
ßm∂e•îpixñ
 != 4) {

165 
	`•rötf
(
emsg
, "Sorry, canÇot handle separated image with %s=%d",

166 "Sam∂es/pixñ", 
img
->
ßm∂e•îpixñ
);

172 
	`•rötf
(
emsg
, "Sorry, canÇot handle image with %s=%d",

173 
phŸoTag
, 
img
->
phŸomëric
);

176 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, &
img
->
width
);

177 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
img
->
height
);

179 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_ORIENTATION
, &
img
->
‹õ¡©i⁄
);

180 
img
->
‹õ¡©i⁄
) {

181 
ORIENTATION_BOTRIGHT
:

182 
ORIENTATION_RIGHTBOT
:

183 
ORIENTATION_LEFTBOT
:

184 
	`TIFFW¨nög
(
	`TIFFFûeName
(
tif
), "using bottom-left orientation");

185 
img
->
‹õ¡©i⁄
 = 
ORIENTATION_BOTLEFT
;

187 
ORIENTATION_BOTLEFT
:

189 
ORIENTATION_TOPRIGHT
:

190 
ORIENTATION_RIGHTTOP
:

191 
ORIENTATION_LEFTTOP
:

193 
	`TIFFW¨nög
(
	`TIFFFûeName
(
tif
), "usingÅop-left orientation");

194 
img
->
‹õ¡©i⁄
 = 
ORIENTATION_TOPLEFT
;

196 
ORIENTATION_TOPLEFT
:

200 
img
->
isC⁄tig
 =

201 !(
∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
 && 
cﬁ‹ch™√ls
 > 1);

202 i‡(
img
->
isC⁄tig
) {

203 
img
->
gë
 = 
	`TIFFIsTûed
(
tif
Ë? 
gtTûeC⁄tig
 : 
gtSåùC⁄tig
;

205 
img
->
gë
 = 
	`TIFFIsTûed
(
tif
Ë? 
gtTûeSï¨©e
 : 
gtSåùSï¨©e
;

208 
	}
}

211 
	$TIFFImageIãrGë
(
TIFFImageIãr
* 
img
, *
ud©a
, 
uöt32
 
w
, uöt32 
h
)

213 i‡(
img
->
gë
 =
NULL
) {

214 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(img->tif), "No \"get\"Ñoutine setup");

217 i‡(
img
->
ˇŒback
.
™y
 =
NULL
) {

218 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(img->tif),

222  (*
img
->
gë
)(img, 
ud©a
, 
w
, 
h
);

223 
	}
}

225 
	$TIFFImageIãrEnd
(
TIFFImageIãr
* 
img
)

228 
	}
}

234 
	$TIFFRódImageIãr
(
TIFF
* 
tif
,

235 
uöt32
 
rwidth
, uöt32 
rheight
, 
uöt8
* 
ø°î
, 
°›
)

237 
emsg
[1024];

238 
TIFFImageIãr
 
img
;

239 
ok
;

241 i‡(
	`TIFFImageIãrBegö
(&
img
, 
tif
, 
°›
, 
emsg
)) {

243 
ok
 = 
	`TIFFImageIãrGë
(&
img
, 
ø°î
, 
rwidth
, img.
height
);

244 
	`TIFFImageIãrEnd
(&
img
);

246 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
—if), 
emsg
);

247 
ok
 = 0;

249  (
ok
);

250 
	}
}

260 
	$gtTûeC⁄tig
(
TIFFImageIãr
* 
img
, *
ud©a
, 
uöt32
 
w
, uöt32 
h
)

262 
TIFF
* 
tif
 = 
img
->tif;

263 
ImageIãrTûeC⁄tigRoutöe
 
ˇŒback
 = 
img
->ˇŒback.
c⁄tig
;

264 
uöt16
 
‹õ¡©i⁄
;

265 
uöt32
 
cﬁ
, 
row
;

266 
uöt32
 
tw
, 
th
;

267 
u_ch¨
* 
buf
;

268 
öt32
 
‰omskew
;

269 
uöt32
 
ƒow
;

271 
buf
 = (
u_ch¨
*Ë
	`_TIFFmÆloc
(
	`TIFFTûeSize
(
tif
));

272 i‡(
buf
 == 0) {

273 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif), "No space forÅile buffer");

276 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILEWIDTH
, &
tw
);

277 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILELENGTH
, &
th
);

278 
‹õ¡©i⁄
 = 
img
->orientation;

279 
row
 = 0;Ñow < 
h
;Ñow +
th
) {

280 
ƒow
 = (
row
 + 
th
 > 
h
 ? h -Ñow :Åh);

281 
cﬁ
 = 0; cﬁ < 
w
; cﬁ +
tw
) {

282 i‡(
	`TIFFRódTûe
(
tif
, 
buf
, 
cﬁ
, 
row
, 0, 0Ë< 0 && 
img
->
°›⁄îr
)

284 i‡(
cﬁ
 + 
tw
 > 
w
) {

289 
uöt32
 
≈ix
 = 
w
 - 
cﬁ
;

290 
‰omskew
 = 
tw
 - 
≈ix
;

291 (*
ˇŒback
)(
img
, 
ud©a
, 
cﬁ
, 
row
, 
≈ix
, 
ƒow
, 
‰omskew
, 
buf
);

293 (*
ˇŒback
)(
img
, 
ud©a
, 
cﬁ
, 
row
, 
tw
, 
ƒow
, 0, 
buf
);

297 
	`_TIFF‰ì
(
buf
);

299 
	}
}

308 
	$gtTûeSï¨©e
(
TIFFImageIãr
* 
img
, *
ud©a
, 
uöt32
 
w
, uöt32 
h
)

310 
TIFF
* 
tif
 = 
img
->tif;

311 
ImageIãrTûeSï¨©eRoutöe
 
ˇŒback
 = 
img
->ˇŒback.
£∑øã
;

312 
uöt16
 
‹õ¡©i⁄
;

313 
uöt32
 
cﬁ
, 
row
;

314 
uöt32
 
tw
, 
th
;

315 
u_ch¨
* 
buf
;

316 
u_ch¨
* 
r
;

317 
u_ch¨
* 
g
;

318 
u_ch¨
* 
b
;

319 
u_ch¨
* 
a
;

320 
tsize_t
 
tûesize
;

321 
öt32
 
‰omskew
;

322 
Æpha
 = 
img
->alpha;

323 
uöt32
 
ƒow
;

325 
tûesize
 = 
	`TIFFTûeSize
(
tif
);

326 
buf
 = (
u_ch¨
*Ë
	`_TIFFmÆloc
(4*
tûesize
);

327 i‡(
buf
 == 0) {

328 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif), "No space forÅile buffer");

331 
r
 = 
buf
;

332 
g
 = 
r
 + 
tûesize
;

333 
b
 = 
g
 + 
tûesize
;

334 
a
 = 
b
 + 
tûesize
;

335 i‡(!
Æpha
)

336 
	`mem£t
(
a
, 0xff, 
tûesize
);

337 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILEWIDTH
, &
tw
);

338 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILELENGTH
, &
th
);

339 
‹õ¡©i⁄
 = 
img
->orientation;

340 
row
 = 0;Ñow < 
h
;Ñow +
th
) {

341 
ƒow
 = (
row
 + 
th
 > 
h
 ? h -Ñow :Åh);

342 
cﬁ
 = 0; cﬁ < 
w
; cﬁ +
tw
) {

343 i‡(
	`TIFFRódTûe
(
tif
, 
r
, 
cﬁ
, 
row
,0,0Ë< 0 && 
img
->
°›⁄îr
)

345 i‡(
	`TIFFRódTûe
(
tif
, 
g
, 
cﬁ
, 
row
,0,1Ë< 0 && 
img
->
°›⁄îr
)

347 i‡(
	`TIFFRódTûe
(
tif
, 
b
, 
cﬁ
, 
row
,0,2Ë< 0 && 
img
->
°›⁄îr
)

349 i‡(
Æpha
 && 
	`TIFFRódTûe
(
tif
,
a
,
cﬁ
,
row
,0,3Ë< 0 && 
img
->
°›⁄îr
)

351 i‡(
cﬁ
 + 
tw
 > 
w
) {

356 
uöt32
 
≈ix
 = 
w
 - 
cﬁ
;

357 
‰omskew
 = 
tw
 - 
≈ix
;

358 (*
ˇŒback
)(
img
, 
ud©a
, 
cﬁ
, 
row
, 
≈ix
, 
ƒow
, 
‰omskew
, 
r
, 
g
, 
b
, 
a
);

360 (*
ˇŒback
)(
img
, 
ud©a
, 
cﬁ
, 
row
, 
tw
, 
ƒow
, 0, 
r
, 
g
, 
b
, 
a
);

364 
	`_TIFF‰ì
(
buf
);

366 
	}
}

375 
	$gtSåùC⁄tig
(
TIFFImageIãr
* 
img
, *
ud©a
, 
uöt32
 
w
, uöt32 
h
)

377 
TIFF
* 
tif
 = 
img
->tif;

378 
ImageIãrTûeC⁄tigRoutöe
 
ˇŒback
 = 
img
->ˇŒback.
c⁄tig
;

379 
uöt16
 
‹õ¡©i⁄
;

380 
uöt32
 
row
, 
ƒow
;

381 
u_ch¨
* 
buf
;

382 
uöt32
 
row•î°rù
;

383 
uöt32
 
imagewidth
 = 
img
->
width
;

384 
tsize_t
 
sˇ∆öe
;

385 
öt32
 
‰omskew
;

387 
buf
 = (
u_ch¨
*Ë
	`_TIFFmÆloc
(
	`TIFFSåùSize
(
tif
));

388 i‡(
buf
 == 0) {

389 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif), "No space for strip buffer");

392 
‹õ¡©i⁄
 = 
img
->orientation;

393 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

394 
sˇ∆öe
 = 
	`TIFFSˇ∆öeSize
(
tif
);

395 
‰omskew
 = (
w
 < 
imagewidth
 ? imagewidth - w : 0);

396 
row
 = 0;Ñow < 
h
;Ñow +
row•î°rù
) {

397 
ƒow
 = (
row
 + 
row•î°rù
 > 
h
 ? h -Ñow :Ñowsperstrip);

398 i‡(
	`TIFFRódEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if, 
row
, 0),

399 
buf
, 
ƒow
*
sˇ∆öe
Ë< 0 && 
img
->
°›⁄îr
)

401 (*
ˇŒback
)(
img
, 
ud©a
, 0, 
row
, 
w
, 
ƒow
, 
‰omskew
, 
buf
);

403 
	`_TIFF‰ì
(
buf
);

405 
	}
}

414 
	$gtSåùSï¨©e
(
TIFFImageIãr
* 
img
, *
ud©a
, 
uöt32
 
w
, uöt32 
h
)

416 
TIFF
* 
tif
 = 
img
->tif;

417 
ImageIãrTûeSï¨©eRoutöe
 
ˇŒback
 = 
img
->ˇŒback.
£∑øã
;

418 
uöt16
 
‹õ¡©i⁄
;

419 
u_ch¨
 *
buf
;

420 
u_ch¨
 *
r
, *
g
, *
b
, *
a
;

421 
uöt32
 
row
, 
ƒow
;

422 
tsize_t
 
sˇ∆öe
;

423 
uöt32
 
row•î°rù
;

424 
uöt32
 
imagewidth
 = 
img
->
width
;

425 
tsize_t
 
°rùsize
;

426 
öt32
 
‰omskew
;

427 
Æpha
 = 
img
->alpha;

429 
°rùsize
 = 
	`TIFFSåùSize
(
tif
);

430 
r
 = 
buf
 = (
u_ch¨
 *)
	`_TIFFmÆloc
(4*
°rùsize
);

431 i‡(
buf
 == 0) {

432 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif), "No space forÅile buffer");

435 
g
 = 
r
 + 
°rùsize
;

436 
b
 = 
g
 + 
°rùsize
;

437 
a
 = 
b
 + 
°rùsize
;

438 i‡(!
Æpha
)

439 
	`mem£t
(
a
, 0xff, 
°rùsize
);

440 
‹õ¡©i⁄
 = 
img
->orientation;

441 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

442 
sˇ∆öe
 = 
	`TIFFSˇ∆öeSize
(
tif
);

443 
‰omskew
 = (
w
 < 
imagewidth
 ? imagewidth - w : 0);

444 
row
 = 0;Ñow < 
h
;Ñow +
row•î°rù
) {

445 
ƒow
 = (
row
 + 
row•î°rù
 > 
h
 ? h -Ñow :Ñowsperstrip);

446 i‡(
	`TIFFRódEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if, 
row
, 0),

447 
r
, 
ƒow
*
sˇ∆öe
Ë< 0 && 
img
->
°›⁄îr
)

449 i‡(
	`TIFFRódEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if, 
row
, 1),

450 
g
, 
ƒow
*
sˇ∆öe
Ë< 0 && 
img
->
°›⁄îr
)

452 i‡(
	`TIFFRódEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if, 
row
, 2),

453 
b
, 
ƒow
*
sˇ∆öe
Ë< 0 && 
img
->
°›⁄îr
)

455 i‡(
Æpha
 &&

456 (
	`TIFFRódEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if, 
row
, 3),

457 
a
, 
ƒow
*
sˇ∆öe
Ë< 0 && 
img
->
°›⁄îr
))

459 (*
ˇŒback
)(
img
, 
ud©a
, 0, 
row
, 
w
, 
ƒow
, 
‰omskew
, 
r
, 
g
, 
b
, 
a
);

461 
	`_TIFF‰ì
(
buf
);

463 
	}
}

465 
	$DECLAREC⁄tigCÆlbackFunc
(
Te°C⁄tigCÆlback
)

467 
	`¥ötf
("Contig Callback called with x = %d, y = %d, w = %d, h = %d, fromskew = %d\n",

468 
x
, 
y
, 
w
, 
h
, 
‰omskew
);

469 
	}
}

472 
	$DECLARESïCÆlbackFunc
(
Te°SïCÆlback
)

474 
	`¥ötf
("Sep Callback called with x = %d, y = %d, w = %d, h = %d, fromskew = %d\n",

475 
x
, 
y
, 
w
, 
h
, 
‰omskew
);

476 
	}
}

479 #ifde‡
MAIN


480 
	$maö
(
¨gc
, **
¨gv
)

482 
emsg
[1024];

483 
TIFFImageIãr
 
img
;

484 
ok
;

485 
°›
 = 1;

487 
TIFF
 *
tif
;

488 
nx
, 
ny
;

489 
BôsPîSam∂e
, 
Sam∂esPîPixñ
;

490 
isCﬁ‹M≠≥d
, 
isPliFûe
;

491 *
Cﬁ‹M≠
;

492 *
d©a
;

494 i‡(
¨gc
 < 2) {

495 
	`Ârötf
(
°dîr
,"ußge: %†tiff_fûe\n",
¨gv
[0]);

496 
	`exô
(1);

498 
tif
 = (
TIFF
 *)
	`PLIGëImage
(
¨gv
[1], (*Ë&
d©a
, &
Cﬁ‹M≠
,

499 &
nx
, &
ny
, &
BôsPîSam∂e
, &
Sam∂esPîPixñ
,

500 &
isCﬁ‹M≠≥d
, &
isPliFûe
);

501 i‡(
tif
 !
NULL
) {

503 i‡(
	`TIFFImageIãrBegö
(&
img
, 
tif
, 
°›
, 
emsg
)) {

505 i‡(
img
.
isC⁄tig
) {

506 
img
.
ˇŒback
 = 
Te°C⁄tigCÆlback
;

508 
img
.
ˇŒback
 = 
Te°SïCÆlback
;

510 
ok
 = 
	`TIFFImageIãrGë
(&
img
, 
NULL
, img.
width
, img.
height
);

511 
	`TIFFImageIãrEnd
(&
img
);

513 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
—if), 
emsg
);

517 
	}
}

	@contrib/pds/tif_imageiter.h

1 
_TIFFImageIãr
 
	tTIFFImageIãr
;

10 (*
	tImageIãrTûeC⁄tigRoutöe
)

11 (
	tTIFFImageIãr
*, *, 
	tuöt32
, uöt32, uöt32, uöt32, 
	töt32
,

13 
	#DECLAREC⁄tigCÆlbackFunc
(
«me
) \

14 
	`«me
(\

15 
TIFFImageIãr
* 
img
, \

16 * 
u£r_d©a
, \

17 
uöt32
 
x
, uöt32 
y
, \

18 
uöt32
 
w
, uöt32 
h
, \

19 
öt32
 
‰omskew
, \

20 
u_ch¨
* 
µ
 \

21 )

	)

23 (*
	tImageIãrTûeSï¨©eRoutöe
)

24 (
	tTIFFImageIãr
*, *, 
	tuöt32
, uöt32, uöt32, uöt32, 
	töt32
,

26 
	#DECLARESïCÆlbackFunc
(
«me
) \

27 
	`«me
(\

28 
TIFFImageIãr
* 
img
, \

29 * 
u£r_d©a
, \

30 
uöt32
 
x
, uöt32 
y
, \

31 
uöt32
 
w
, uöt32 
h
,\

32 
öt32
 
‰omskew
, \

33 
u_ch¨
* 
r
, u_ch¨* 
g
, u_ch¨* 
b
, u_ch¨* 
a
\

34 )

	)

36 
	s_TIFFImageIãr
 {

37 
TIFF
* 
tif
;

38 
°›⁄îr
;

39 
isC⁄tig
;

40 
Æpha
;

41 
uöt32
 
width
;

42 
uöt32
 
height
;

43 
uöt16
 
bô•îßm∂e
;

44 
uöt16
 
ßm∂e•îpixñ
;

45 
uöt16
 
‹õ¡©i⁄
;

46 
uöt16
 
phŸomëric
;

47 
uöt16
* 
ªdcm≠
;

48 
uöt16
* 
gªícm≠
;

49 
uöt16
* 
bluecm≠
;

51 (*
gë
)(
TIFFImageIãr
*, *
ud©a
, 
uöt32
, uint32);

53 (*
™y
)(
TIFFImageIãr
*);

54 
ImageIãrTûeC⁄tigRoutöe
 
c⁄tig
;

55 
ImageIãrTûeSï¨©eRoutöe
 
£∑øã
;

56 } 
ˇŒback
;

	@contrib/pds/tif_pdsdirread.c

52 
	~"tiffi›.h
"

54 
	#IGNORE
 0

	)

56 #i‡
HAVE_IEEEFP


57 
	#TIFFCvtIEEEFlﬂtToN©ive
(
tif
, 
n
, 
Â
)

	)

58 
	#TIFFCvtIEEEDoubÀToN©ive
(
tif
, 
n
, 
dp
)

	)

60 
TIFFCvtIEEEFlﬂtToN©ive
(
TIFF
*, 
uöt32
, *);

61 
TIFFCvtIEEEDoubÀToN©ive
(
TIFF
*, 
uöt32
, *);

64 
E°im©eSåùByãCou¡s
(
TIFF
*, 
TIFFDúE¡ry
*, 
uöt16
);

65 
MissögRequúed
(
TIFF
*, const *);

66 
CheckDúCou¡
(
TIFF
*, 
TIFFDúE¡ry
*, 
uöt32
);

67 
tsize_t
 
TIFFFëchD©a
(
TIFF
*, 
TIFFDúE¡ry
*, *);

68 
tsize_t
 
TIFFFëchSåög
(
TIFF
*, 
TIFFDúE¡ry
*, *);

69 
TIFFFëchR©i⁄Æ
(
TIFF
*, 
TIFFDúE¡ry
*);

70 
TIFFFëchN‹mÆSubTag
(
TIFF
*, 
TIFFDúE¡ry
*, c⁄° 
TIFFFõldInfo
*,

71 (*
gëFõldFn
)(
TIFF
 *
tif
,
âag_t
 
èg
,...));

72 
	`TIFFFëchPîSam∂eSh‹ts
(
TIFF
*, 
TIFFDúE¡ry
*, *);

73 
	`TIFFFëchPîSam∂eAnys
(
TIFF
*, 
TIFFDúE¡ry
*, *);

74 
	`TIFFFëchSh‹tAºay
(
TIFF
*, 
TIFFDúE¡ry
*, 
uöt16
*);

75 
	`TIFFFëchSåùThög
(
TIFF
*, 
TIFFDúE¡ry
*, , 
uöt32
**);

76 
	`TIFFFëchExåaSam∂es
(
TIFF
*, 
TIFFDúE¡ry
*);

77 
	`TIFFFëchRefBœckWhôe
(
TIFF
*, 
TIFFDúE¡ry
*);

78 
	`TIFFFëchFlﬂt
(
TIFF
*, 
TIFFDúE¡ry
*);

79 
	`TIFFFëchFlﬂtAºay
(
TIFF
*, 
TIFFDúE¡ry
*, *);

80 
	`TIFFFëchDoubÀAºay
(
TIFF
*, 
TIFFDúE¡ry
*, *);

81 
	`TIFFFëchAnyAºay
(
TIFF
*, 
TIFFDúE¡ry
*, *);

82 
	`TIFFFëchSh‹tPaú
(
TIFF
*, 
TIFFDúE¡ry
*);

83 #i‡
STRIPCHOP_SUPPORT


84 
	`Ch›UpSögÀUncom¥es£dSåù
(
TIFF
*);

88 
	$CheckMÆloc
(
TIFF
* 
tif
, 
tsize_t
 
n
, c⁄° * 
wh©
)

90 *
˝
 = (*)
	`_TIFFmÆloc
(
n
);

91 i‡(
˝
 =
NULL
)

92 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "Nÿ•a˚ %s", 
wh©
);

93  (
˝
);

94 
	}
}

118 
	$TIFFRódPriv©eD©aSubDúe˘‹y
(
TIFF
* 
tif
, 
toff_t
 
pdú_off£t
,

119 
TIFFFõldInfo
 *
fõld_öfo
,

120 (*
£tFõldFn
)(
TIFF
 *
tif
, 
âag_t
 
èg
, ...))

122 
TIFFDúE¡ry
* 
dp
;

123 
n
;

124 
TIFFDúe˘‹y
* 
td
;

125 
TIFFDúE¡ry
* 
dú
;

126 
iv
;

127 
v
;

128 
dv
;

129 c⁄° 
TIFFFõldInfo
* 
fù
;

130 
fix
;

131 
uöt16
 
dúcou¡
;

132 
uöt32
 
√xtdúoff
;

133 * 
˝
;

134 
dúoutof‹dîw¨nög
 = 0;

138 i‡(!
	`isM≠≥d
(
tif
)) {

139 i‡(!
	`SìkOK
(
tif
, 
pdú_off£t
)) {

140 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

144 i‡(!
	`RódOK
(
tif
, &
dúcou¡
,  (
uöt16
))) {

145 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

149 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

150 
	`TIFFSwabSh‹t
(&
dúcou¡
);

151 
dú
 = (
TIFFDúE¡ry
 *)
	`CheckMÆloc
(
tif
,

152 
dúcou¡
 *  (
TIFFDúE¡ry
), "toÑead TIFFÖrivate subdirectory");

153 i‡(
dú
 =
NULL
)

155 i‡(!
	`RódOK
(
tif
, 
dú
, 
dúcou¡
* (
TIFFDúE¡ry
))) {

156 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "CanÇotÑead TIFFÖrivate subdirectory");

157 
bad
;

162 (Ë
	`RódOK
(
tif
, &
√xtdúoff
,  (
uöt32
));

164 
toff_t
 
off
 = 
pdú_off£t
;

166 i‡(
off
 +  (Ë> 
tif
->
tif_size
) {

167 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

171 
	`_TIFFmem˝y
(&
dúcou¡
, 
tif
->
tif_ba£
 + 
off
,  (
uöt16
));

172 
off
 + (
uöt16
);

173 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

174 
	`TIFFSwabSh‹t
(&
dúcou¡
);

175 
dú
 = (
TIFFDúE¡ry
 *)
	`CheckMÆloc
(
tif
,

176 
dúcou¡
 *  (
TIFFDúE¡ry
), "toÑead TIFFÖrivate subdirectory");

177 i‡(
dú
 =
NULL
)

179 i‡(
off
 + 
dúcou¡
* (
TIFFDúE¡ry
Ë> 
tif
->
tif_size
) {

180 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "CanÇotÑead TIFFÖrivate subdirectory");

181 
bad
;

183 
	`_TIFFmem˝y
(
dú
, 
tif
->
tif_ba£
 + 
off
,

184 
dúcou¡
* (
TIFFDúE¡ry
));

185 
off
 +
dúcou¡
*  (
TIFFDúE¡ry
);

186 i‡(
off
 +  (
uöt32
Ë< 
tif
->
tif_size
)

187 
	`_TIFFmem˝y
(&
√xtdúoff
, 
tif
->
tif_ba£
+
off
,  (
uöt32
));

189 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

190 
	`TIFFSwabL⁄g
(&
√xtdúoff
);

199 
td
 = &
tif
->
tif_dú
;

201 
fù
 = 
fõld_öfo
, 
dp
 = 
dú
, 
n
 = 
dúcou¡
;

202 
n
 > 0;Ç--, 
dp
++) {

203 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
) {

204 
	`TIFFSwabAºayOfSh‹t
(&
dp
->
tdú_èg
, 2);

205 
	`TIFFSwabAºayOfL⁄g
(&
dp
->
tdú_cou¡
, 2);

215 i‡(
dp
->
tdú_èg
 < 
fù
->
fõld_èg
) {

216 i‡(!
dúoutof‹dîw¨nög
) {

217 
	`TIFFW¨nög
(
tif
->
tif_«me
,

219 
dúoutof‹dîw¨nög
 = 1;

221 
fù
 = 
fõld_öfo
;

224 
fù
->
fõld_èg
 && fù->fõld_èg < 
dp
->
tdú_èg
)

225 
fù
++;

226 i‡(!
fù
->
fõld_èg
 || fù->fõld_èg !
dp
->
tdú_èg
) {

227 
	`TIFFW¨nög
(
tif
->
tif_«me
,

229 
dp
->
tdú_èg
, dp->tdir_tag);

230 
dp
->
tdú_èg
 = 
IGNORE
;

231 
fù
 = 
fõld_öfo
;

241 
ign‹e
:

242 
dp
->
tdú_èg
 = 
IGNORE
;

250 
dp
->
tdú_ty≥
 !(
u_sh‹t
)
fù
->
fõld_ty≥
) {

251 i‡(
fù
->
fõld_ty≥
 =
TIFF_ANY
)

253 
fù
++;

254 i‡(!
fù
->
fõld_èg
 || fù->fõld_èg !
dp
->
tdú_èg
) {

255 
	`TIFFW¨nög
(
tif
->
tif_«me
,

257 
dp
->
tdú_ty≥
, 
fù
[-1].
fõld_«me
);

258 
ign‹e
;

264 i‡(
fù
->
fõld_ªadcou¡
 !
TIFF_VARIABLE
) {

265 
uöt32
 
ex≥˘ed
 = (
fù
->
fõld_ªadcou¡
 =
TIFF_SPP
) ?

266 (
uöt32
Ë
td
->
td_ßm∂e•îpixñ
 :

267 (
uöt32
Ë
fù
->
fõld_ªadcou¡
;

268 i‡(!
	`CheckDúCou¡
(
tif
, 
dp
, 
ex≥˘ed
))

269 
ign‹e
;

273 i‡(!
	`TIFFFëchN‹mÆSubTag
(
tif
, 
dp
, 
fù
, 
£tFõldFn
))

274 
bad
;

278 i‡(
dú
)

279 
	`_TIFF‰ì
(
dú
);

281 
bad
:

282 i‡(
dú
)

283 
	`_TIFF‰ì
(
dú
);

285 
	}
}

288 
	$E°im©eSåùByãCou¡s
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
dúcou¡
)

290 
TIFFDúE¡ry
 *
dp
;

291 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

292 
uöt16
 
i
;

294 i‡(
td
->
td_°rùbyãcou¡
)

295 
	`_TIFF‰ì
(
td
->
td_°rùbyãcou¡
);

296 
td
->
td_°rùbyãcou¡
 = (
uöt32
*)

297 
	`CheckMÆloc
(
tif
, 
td
->
td_n°rùs
 *  (
uöt32
),

299 i‡(
td
->
td_com¥essi⁄
 !
COMPRESSION_NONE
) {

300 
uöt32
 
•a˚
 = (uöt32)( (
TIFFHódî
)

301 +  (
uöt16
)

302 + (
dúcou¡
 *  (
TIFFDúE¡ry
))

303 +  (
uöt32
));

304 
toff_t
 
fûesize
 = 
	`TIFFGëFûeSize
(
tif
);

305 
uöt16
 
n
;

308 
dp
 = 
dú
, 
n
 = 
dúcou¡
;Ç > 0;Ç--, dp++) {

309 
uöt32
 
cc
 = 
dp
->
tdú_cou¡
*
	`TIFFD©aWidth
(dp->
tdú_ty≥
);

310 i‡(
cc
 >  (
uöt32
))

311 
•a˚
 +
cc
;

313 
•a˚
 = (
fûesize
 - s∑˚Ë/ 
td
->
td_ßm∂e•îpixñ
;

314 
i
 = 0; i < 
td
->
td_n°rùs
; i++)

315 
td
->
td_°rùbyãcou¡
[
i
] = 
•a˚
;

323 
i
--;

324 i‡(
td
->
td_°rùoff£t
[
i
] +Åd->
td_°rùbyãcou¡
[i] > 
fûesize
)

325 
td
->
td_°rùbyãcou¡
[
i
] =

326 
fûesize
 - 
td
->
td_°rùoff£t
[
i
];

328 
uöt32
 
rowbyãs
 = 
	`TIFFSˇ∆öeSize
(
tif
);

329 
uöt32
 
row•î°rù
 = 
td
->
td_imagñígth
 /Åd->
td_n°rùs
;

330 
i
 = 0; i < 
td
->
td_n°rùs
; i++)

331 
td
->
td_°rùbyãcou¡
[
i
] = 
rowbyãs
*
row•î°rù
;

333 
	`TIFFSëFõldBô
(
tif
, 
FIELD_STRIPBYTECOUNTS
);

334 i‡(!
	`TIFFFõldSë
(
tif
, 
FIELD_ROWSPERSTRIP
))

335 
td
->
td_row•î°rù
 =Åd->
td_imagñígth
;

336 
	}
}

339 
	$MissögRequúed
(
TIFF
* 
tif
, c⁄° * 
èg«me
)

341 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

342 "TIFF dúe˘‹y i†missögÑequúed \"%s\" fõld", 
èg«me
);

343 
	}
}

352 
	$CheckDúCou¡
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
cou¡
)

354 i‡(
cou¡
 !
dú
->
tdú_cou¡
) {

355 
	`TIFFW¨nög
(
tif
->
tif_«me
,

357 
	`_TIFFFõldWôhTag
(
tif
, 
dú
->
tdú_èg
)->
fõld_«me
,

358 
dú
->
tdú_cou¡
, 
cou¡
);

362 
	}
}

367 
tsize_t


368 
	$TIFFFëchD©a
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, * 
˝
)

370 
w
 = 
	`TIFFD©aWidth
(
dú
->
tdú_ty≥
);

371 
tsize_t
 
cc
 = 
dú
->
tdú_cou¡
 * 
w
;

373 i‡(!
	`isM≠≥d
(
tif
)) {

374 i‡(!
	`SìkOK
(
tif
, 
dú
->
tdú_off£t
))

375 
bad
;

376 i‡(!
	`RódOK
(
tif
, 
˝
, 
cc
))

377 
bad
;

379 i‡(
dú
->
tdú_off£t
 + 
cc
 > 
tif
->
tif_size
)

380 
bad
;

381 
	`_TIFFmem˝y
(
˝
, 
tif
->
tif_ba£
 + 
dú
->
tdú_off£t
, 
cc
);

383 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
) {

384 
dú
->
tdú_ty≥
) {

385 
TIFF_SHORT
:

386 
TIFF_SSHORT
:

387 
	`TIFFSwabAºayOfSh‹t
((
uöt16
*Ë
˝
, 
dú
->
tdú_cou¡
);

389 
TIFF_LONG
:

390 
TIFF_SLONG
:

391 
TIFF_FLOAT
:

392 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*Ë
˝
, 
dú
->
tdú_cou¡
);

394 
TIFF_RATIONAL
:

395 
TIFF_SRATIONAL
:

396 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*Ë
˝
, 2*
dú
->
tdú_cou¡
);

398 
TIFF_DOUBLE
:

399 
	`TIFFSwabAºayOfDoubÀ
((*Ë
˝
, 
dú
->
tdú_cou¡
);

403  (
cc
);

404 
bad
:

405 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "Error fetching data for field \"%s\"",

406 
	`_TIFFFõldWôhTag
(
tif
, 
dú
->
tdú_èg
)->
fõld_«me
);

407  ((
tsize_t
) 0);

408 
	}
}

413 
tsize_t


414 
	$TIFFFëchSåög
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, * 
˝
)

416 i‡(
dú
->
tdú_cou¡
 <= 4) {

417 
uöt32
 
l
 = 
dú
->
tdú_off£t
;

418 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

419 
	`TIFFSwabL⁄g
(&
l
);

420 
	`_TIFFmem˝y
(
˝
, &
l
, 
dú
->
tdú_cou¡
);

423  (
	`TIFFFëchD©a
(
tif
, 
dú
, 
˝
));

424 
	}
}

430 
	$cvtR©i⁄Æ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
num
, uöt32 
díom
, * 
rv
)

432 i‡(
díom
 == 0) {

433 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

435 
	`_TIFFFõldWôhTag
(
tif
, 
dú
->
tdú_èg
)->
fõld_«me
, 
num
);

438 i‡(
dú
->
tdú_ty≥
 =
TIFF_RATIONAL
)

439 *
rv
 = (()
num
 / ()
díom
);

441 *
rv
 = (()(
öt32
)
num
 / ()(öt32)
díom
);

444 
	}
}

452 
	$TIFFFëchR©i⁄Æ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
)

454 
uöt32
 
l
[2];

455 
v
;

457  (!
	`TIFFFëchD©a
(
tif
, 
dú
, (*)
l
) ||

458 !
	`cvtR©i⁄Æ
(
tif
, 
dú
, 
l
[0],Ü[1], &
v
) ? 1.0f : v);

459 
	}
}

467 
	$TIFFFëchFlﬂt
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
)

473 
v
 = ()

474 
	`TIFFExåa˘D©a
(
tif
, 
dú
->
tdú_ty≥
, dú->
tdú_off£t
);

475 
	`TIFFCvtIEEEFlﬂtToN©ive
(
tif
, 1, &
v
);

477 
v
;

483 
uöt32
 
l
 = (uint32)

484 
	`TIFFExåa˘D©a
(
tif
, 
dú
->
tdú_ty≥
, dú->
tdú_off£t
);

485 
v
 = * (*Ë&
l
;

486 
	`TIFFCvtIEEEFlﬂtToN©ive
(
tif
, 1, &
v
);

488  (
v
);

490 
	}
}

496 
	$TIFFFëchByãAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
* 
v
)

498 i‡(
dú
->
tdú_cou¡
 <= 4) {

502 i‡(
tif
->
tif_hódî
.
tiff_magic
 =
TIFF_BIGENDIAN
) {

503 
dú
->
tdú_cou¡
) {

504 4: 
v
[3] = 
dú
->
tdú_off£t
 & 0xff;

505 3: 
v
[2] = (
dú
->
tdú_off£t
 >> 8) & 0xff;

506 2: 
v
[1] = (
dú
->
tdú_off£t
 >> 16) & 0xff;

507 1: 
v
[0] = 
dú
->
tdú_off£t
 >> 24;

510 
dú
->
tdú_cou¡
) {

511 4: 
v
[3] = 
dú
->
tdú_off£t
 >> 24;

512 3: 
v
[2] = (
dú
->
tdú_off£t
 >> 16) & 0xff;

513 2: 
v
[1] = (
dú
->
tdú_off£t
 >> 8) & 0xff;

514 1: 
v
[0] = 
dú
->
tdú_off£t
 & 0xff;

519  (
	`TIFFFëchD©a
(
tif
, 
dú
, (*Ë
v
) != 0);

520 
	}
}

526 
	$TIFFFëchSh‹tAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
* 
v
)

528 i‡(
dú
->
tdú_cou¡
 <= 2) {

529 i‡(
tif
->
tif_hódî
.
tiff_magic
 =
TIFF_BIGENDIAN
) {

530 
dú
->
tdú_cou¡
) {

531 2: 
v
[1] = 
dú
->
tdú_off£t
 & 0xffff;

532 1: 
v
[0] = 
dú
->
tdú_off£t
 >> 16;

535 
dú
->
tdú_cou¡
) {

536 2: 
v
[1] = 
dú
->
tdú_off£t
 >> 16;

537 1: 
v
[0] = 
dú
->
tdú_off£t
 & 0xffff;

542  (
	`TIFFFëchD©a
(
tif
, 
dú
, (*)
v
) != 0);

543 
	}
}

549 
	$TIFFFëchSh‹tPaú
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
)

551 
uöt16
 
v
[2];

552 
ok
 = 0;

554 
dú
->
tdú_ty≥
) {

555 
TIFF_SHORT
:

556 
TIFF_SSHORT
:

557 
ok
 = 
	`TIFFFëchSh‹tAºay
(
tif
, 
dú
, 
v
);

559 
TIFF_BYTE
:

560 
TIFF_SBYTE
:

561 
ok
 = 
	`TIFFFëchByãAºay
(
tif
, 
dú
, 
v
);

564 i‡(
ok
)

565 
	`TIFFSëFõld
(
tif
, 
dú
->
tdú_èg
, 
v
[0], v[1]);

566  (
ok
);

567 
	}
}

573 
	$TIFFFëchL⁄gAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
* 
v
)

575 i‡(
dú
->
tdú_cou¡
 == 1) {

576 
v
[0] = 
dú
->
tdú_off£t
;

579  (
	`TIFFFëchD©a
(
tif
, 
dú
, (*Ë
v
) != 0);

580 
	}
}

586 
	$TIFFFëchR©i⁄ÆAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, * 
v
)

588 
ok
 = 0;

589 
uöt32
* 
l
;

591 
l
 = (
uöt32
*)
	`CheckMÆloc
(
tif
,

592 
dú
->
tdú_cou¡
*
	`TIFFD©aWidth
(dú->
tdú_ty≥
),

594 i‡(
l
) {

595 i‡(
	`TIFFFëchD©a
(
tif
, 
dú
, (*)
l
)) {

596 
uöt32
 
i
;

597 
i
 = 0; i < 
dú
->
tdú_cou¡
; i++) {

598 
ok
 = 
	`cvtR©i⁄Æ
(
tif
, 
dú
,

599 
l
[2*
i
+0],Ü[2*i+1], &
v
[i]);

600 i‡(!
ok
)

604 
	`_TIFF‰ì
((*)
l
);

606  (
ok
);

607 
	}
}

613 
	$TIFFFëchFlﬂtAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, * 
v
)

616 i‡(
dú
->
tdú_cou¡
 == 1) {

617 
v
[0] = *(*Ë&
dú
->
tdú_off£t
;

618 
	`TIFFCvtIEEEFlﬂtToN©ive
(
tif
, 
dú
->
tdú_cou¡
, 
v
);

620 } i‡(
	`TIFFFëchD©a
(
tif
, 
dú
, (*Ë
v
)) {

621 
	`TIFFCvtIEEEFlﬂtToN©ive
(
tif
, 
dú
->
tdú_cou¡
, 
v
);

625 
	}
}

631 
	$TIFFFëchDoubÀAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, * 
v
)

633 i‡(
	`TIFFFëchD©a
(
tif
, 
dú
, (*Ë
v
)) {

634 
	`TIFFCvtIEEEDoubÀToN©ive
(
tif
, 
dú
->
tdú_cou¡
, 
v
);

638 
	}
}

652 
	$TIFFFëchAnyAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, * 
v
)

654 
i
;

656 
dú
->
tdú_ty≥
) {

657 
TIFF_BYTE
:

658 
TIFF_SBYTE
:

659 i‡(!
	`TIFFFëchByãAºay
(
tif
, 
dú
, (
uöt16
*Ë
v
))

661 i‡(
dú
->
tdú_ty≥
 =
TIFF_BYTE
) {

662 
uöt16
* 
vp
 = (uöt16*Ë
v
;

663 
i
 = 
dú
->
tdú_cou¡
-1; i >= 0; i--)

664 
v
[
i
] = 
vp
[i];

666 
öt16
* 
vp
 = (öt16*Ë
v
;

667 
i
 = 
dú
->
tdú_cou¡
-1; i >= 0; i--)

668 
v
[
i
] = 
vp
[i];

671 
TIFF_SHORT
:

672 
TIFF_SSHORT
:

673 i‡(!
	`TIFFFëchSh‹tAºay
(
tif
, 
dú
, (
uöt16
*Ë
v
))

675 i‡(
dú
->
tdú_ty≥
 =
TIFF_SHORT
) {

676 
uöt16
* 
vp
 = (uöt16*Ë
v
;

677 
i
 = 
dú
->
tdú_cou¡
-1; i >= 0; i--)

678 
v
[
i
] = 
vp
[i];

680 
öt16
* 
vp
 = (öt16*Ë
v
;

681 
i
 = 
dú
->
tdú_cou¡
-1; i >= 0; i--)

682 
v
[
i
] = 
vp
[i];

685 
TIFF_LONG
:

686 
TIFF_SLONG
:

687 i‡(!
	`TIFFFëchL⁄gAºay
(
tif
, 
dú
, (
uöt32
*Ë
v
))

689 i‡(
dú
->
tdú_ty≥
 =
TIFF_LONG
) {

690 
uöt32
* 
vp
 = (uöt32*Ë
v
;

691 
i
 = 
dú
->
tdú_cou¡
-1; i >= 0; i--)

692 
v
[
i
] = 
vp
[i];

694 
öt32
* 
vp
 = (öt32*Ë
v
;

695 
i
 = 
dú
->
tdú_cou¡
-1; i >= 0; i--)

696 
v
[
i
] = 
vp
[i];

699 
TIFF_RATIONAL
:

700 
TIFF_SRATIONAL
:

701 i‡(!
	`TIFFFëchR©i⁄ÆAºay
(
tif
, 
dú
, (*Ë
v
))

703 { * 
vp
 = (*Ë
v
;

704 
i
 = 
dú
->
tdú_cou¡
-1; i >= 0; i--)

705 
v
[
i
] = 
vp
[i];

708 
TIFF_FLOAT
:

709 i‡(!
	`TIFFFëchFlﬂtAºay
(
tif
, 
dú
, (*Ë
v
))

711 { * 
vp
 = (*Ë
v
;

712 
i
 = 
dú
->
tdú_cou¡
-1; i >= 0; i--)

713 
v
[
i
] = 
vp
[i];

716 
TIFF_DOUBLE
:

717  (
	`TIFFFëchDoubÀAºay
(
tif
, 
dú
, (*Ë
v
));

722 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

724 
	`_TIFFFõldWôhTag
(
tif
, 
dú
->
tdú_èg
)->
fõld_«me
);

728 
	}
}

738 
	$TIFFFëchN‹mÆSubTag
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dp
, c⁄° 
TIFFFõldInfo
* 
fù
,

739 (*
£tFõldFn
)(
TIFF
 *
tif
, 
âag_t
 
èg
, ...))

741 
mesg
[] = "to fetchÅag value";

742 
ok
 = 0;

744 i‡(
dp
->
tdú_cou¡
 > 1) {

745 * 
˝
 = 
NULL
;

747 
dp
->
tdú_ty≥
) {

748 
TIFF_BYTE
:

749 
TIFF_SBYTE
:

751 
˝
 = 
	`CheckMÆloc
(
tif
,

752 
dp
->
tdú_cou¡
 *  (
uöt16
), 
mesg
);

753 
ok
 = 
˝
 && 
	`TIFFFëchByãAºay
(
tif
, 
dp
, (
uöt16
*) cp);

755 
TIFF_SHORT
:

756 
TIFF_SSHORT
:

757 
˝
 = 
	`CheckMÆloc
(
tif
,

758 
dp
->
tdú_cou¡
 *  (
uöt16
), 
mesg
);

759 
ok
 = 
˝
 && 
	`TIFFFëchSh‹tAºay
(
tif
, 
dp
, (
uöt16
*) cp);

761 
TIFF_LONG
:

762 
TIFF_SLONG
:

763 
˝
 = 
	`CheckMÆloc
(
tif
,

764 
dp
->
tdú_cou¡
 *  (
uöt32
), 
mesg
);

765 
ok
 = 
˝
 && 
	`TIFFFëchL⁄gAºay
(
tif
, 
dp
, (
uöt32
*) cp);

767 
TIFF_RATIONAL
:

768 
TIFF_SRATIONAL
:

769 
˝
 = 
	`CheckMÆloc
(
tif
,

770 
dp
->
tdú_cou¡
 *  (), 
mesg
);

771 
ok
 = 
˝
 && 
	`TIFFFëchR©i⁄ÆAºay
(
tif
, 
dp
, (*) cp);

773 
TIFF_FLOAT
:

774 
˝
 = 
	`CheckMÆloc
(
tif
,

775 
dp
->
tdú_cou¡
 *  (), 
mesg
);

776 
ok
 = 
˝
 && 
	`TIFFFëchFlﬂtAºay
(
tif
, 
dp
, (*) cp);

778 
TIFF_DOUBLE
:

779 
˝
 = 
	`CheckMÆloc
(
tif
,

780 
dp
->
tdú_cou¡
 *  (), 
mesg
);

781 
ok
 = 
˝
 && 
	`TIFFFëchDoubÀAºay
(
tif
, 
dp
, (*) cp);

783 
TIFF_ASCII
:

784 
TIFF_UNDEFINED
:

789 
˝
 = 
	`CheckMÆloc
(
tif
, 
dp
->
tdú_cou¡
+1, 
mesg
);

790 i‡(
ok
 = (
˝
 && 
	`TIFFFëchSåög
(
tif
, 
dp
, cp)))

791 
˝
[
dp
->
tdú_cou¡
] = '\0';

794 i‡(
ok
) {

795 
ok
 = (
fù
->
fõld_∑sscou¡
 ?

796 (*
£tFõldFn
)(
tif
, 
dp
->
tdú_èg
, dp->
tdú_cou¡
, 
˝
)

797 : (*
£tFõldFn
)(
tif
, 
dp
->
tdú_èg
, 
˝
));

799 i‡(
˝
 !
NULL
)

800 
	`_TIFF‰ì
(
˝
);

801 } i‡(
	`CheckDúCou¡
(
tif
, 
dp
, 1)) {

802 
dp
->
tdú_ty≥
) {

803 
TIFF_BYTE
:

804 
TIFF_SBYTE
:

805 
TIFF_SHORT
:

806 
TIFF_SSHORT
:

820 { 
TIFFD©aTy≥
 
ty≥
 = 
fù
->
fõld_ty≥
;

821 i‡(
ty≥
 !
TIFF_LONG
 &&Åy≥ !
TIFF_SLONG
) {

822 
uöt16
 
v
 = (uint16)

823 
	`TIFFExåa˘D©a
(
tif
, 
dp
->
tdú_ty≥
, dp->
tdú_off£t
);

824 
ok
 = (
fù
->
fõld_∑sscou¡
 ?

825 (*
£tFõldFn
)(
tif
, 
dp
->
tdú_èg
, 1, &
v
)

826 : (*
£tFõldFn
)(
tif
, 
dp
->
tdú_èg
, 
v
));

831 
TIFF_LONG
:

832 
TIFF_SLONG
:

833 { 
uöt32
 
v32
 =

834 
	`TIFFExåa˘D©a
(
tif
, 
dp
->
tdú_ty≥
, dp->
tdú_off£t
);

835 
ok
 = (
fù
->
fõld_∑sscou¡
 ?

836 (*
£tFõldFn
)(
tif
, 
dp
->
tdú_èg
, 1, &
v32
)

837 : (*
£tFõldFn
)(
tif
, 
dp
->
tdú_èg
, 
v32
));

840 
TIFF_RATIONAL
:

841 
TIFF_SRATIONAL
:

842 
TIFF_FLOAT
:

843 { 
v
 = (
dp
->
tdú_ty≥
 =
TIFF_FLOAT
 ?

844 
	`TIFFFëchFlﬂt
(
tif
, 
dp
)

845 : 
	`TIFFFëchR©i⁄Æ
(
tif
, 
dp
));

846 
ok
 = (
fù
->
fõld_∑sscou¡
 ?

847 (*
£tFõldFn
)(
tif
, 
dp
->
tdú_èg
, 1, &
v
)

848 : (*
£tFõldFn
)(
tif
, 
dp
->
tdú_èg
, 
v
));

851 
TIFF_DOUBLE
:

852 { 
v
;

853 
ok
 = (
	`TIFFFëchDoubÀAºay
(
tif
, 
dp
, &
v
) &&

854 (
fù
->
fõld_∑sscou¡
 ?

855 (*
£tFõldFn
)(
tif
, 
dp
->
tdú_èg
, 1, &
v
)

856 : (*
£tFõldFn
)(
tif
, 
dp
->
tdú_èg
, 
v
))

860 
TIFF_ASCII
:

861 
TIFF_UNDEFINED
:

862 { 
c
[2];

863 i‡(
ok
 = (
	`TIFFFëchSåög
(
tif
, 
dp
, 
c
) != 0)) {

864 
c
[1] = '\0';

865 
ok
 = (*
£tFõldFn
)(
tif
, 
dp
->
tdú_èg
, 
c
);

871  (
ok
);

872 
	}
}

878 
	#NITEMS
(
x
Ë( (xË/  (x[0]))

	)

885 
	$TIFFFëchPîSam∂eSh‹ts
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, * 
∂
)

887 
ßm∂es
 = 
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;

888 
°©us
 = 0;

890 i‡(
	`CheckDúCou¡
(
tif
, 
dú
, (
uöt32
Ë
ßm∂es
)) {

891 
uöt16
 
buf
[10];

892 
uöt16
* 
v
 = 
buf
;

894 i‡(
ßm∂es
 > 
	`NITEMS
(
buf
))

895 
v
 = (
uöt16
*Ë
	`_TIFFmÆloc
(
ßm∂es
 *  (uint16));

896 i‡(
	`TIFFFëchSh‹tAºay
(
tif
, 
dú
, 
v
)) {

897 
i
;

898 
i
 = 1; i < 
ßm∂es
; i++)

899 i‡(
v
[
i
] != v[0]) {

900 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

902 
	`_TIFFFõldWôhTag
(
tif
, 
dú
->
tdú_èg
)->
fõld_«me
);

903 
bad
;

905 *
∂
 = 
v
[0];

906 
°©us
 = 1;

908 
bad
:

909 i‡(
v
 !
buf
)

910 
	`_TIFF‰ì
((*Ë
v
);

912  (
°©us
);

913 
	}
}

921 
	$TIFFFëchPîSam∂eAnys
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, * 
∂
)

923 
ßm∂es
 = (Ë
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;

924 
°©us
 = 0;

926 i‡(
	`CheckDúCou¡
(
tif
, 
dú
, (
uöt32
Ë
ßm∂es
)) {

927 
buf
[10];

928 * 
v
 = 
buf
;

930 i‡(
ßm∂es
 > 
	`NITEMS
(
buf
))

931 
v
 = (*Ë
	`_TIFFmÆloc
(
ßm∂es
 *  ());

932 i‡(
	`TIFFFëchAnyAºay
(
tif
, 
dú
, 
v
)) {

933 
i
;

934 
i
 = 1; i < 
ßm∂es
; i++)

935 i‡(
v
[
i
] != v[0]) {

936 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

938 
	`_TIFFFõldWôhTag
(
tif
, 
dú
->
tdú_èg
)->
fõld_«me
);

939 
bad
;

941 *
∂
 = 
v
[0];

942 
°©us
 = 1;

944 
bad
:

945 i‡(
v
 !
buf
)

946 
	`_TIFF‰ì
(
v
);

948  (
°©us
);

949 
	}
}

950 #unde‡
NITEMS


958 
	$TIFFFëchSåùThög
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
n°rùs
, 
uöt32
** 
Õp
)

960 
uöt32
* 
Õ
;

961 
°©us
;

963 i‡(!
	`CheckDúCou¡
(
tif
, 
dú
, (
uöt32
Ë
n°rùs
))

968 i‡(*
Õp
 =
NULL
 &&

969 (*
Õp
 = (
uöt32
 *)
	`CheckMÆloc
(
tif
,

970 
n°rùs
 *  (
uöt32
), "f‹ såùáºay")Ë=
NULL
)

972 
Õ
 = *
Õp
;

973 i‡(
dú
->
tdú_ty≥
 =()
TIFF_SHORT
) {

977 
uöt16
* 
dp
 = (uöt16*Ë
	`CheckMÆloc
(
tif
,

978 
dú
->
tdú_cou¡
*  (
uöt16
), "to fetch stripÅag");

979 i‡(
dp
 =
NULL
)

981 i‡(
°©us
 = 
	`TIFFFëchSh‹tAºay
(
tif
, 
dú
, 
dp
)) {

982 
uöt16
* 
wp
 = 
dp
;

983 
n°rùs
-- > 0)

984 *
Õ
++ = *
wp
++;

986 
	`_TIFF‰ì
((*Ë
dp
);

988 
°©us
 = 
	`TIFFFëchL⁄gAºay
(
tif
, 
dú
, 
Õ
);

989  (
°©us
);

990 
	}
}

992 
	#NITEMS
(
x
Ë( (xË/  (x[0]))

	)

997 
	$TIFFFëchExåaSam∂es
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
)

999 
uöt16
 
buf
[10];

1000 
uöt16
* 
v
 = 
buf
;

1001 
°©us
;

1003 i‡(
dú
->
tdú_cou¡
 > 
	`NITEMS
(
buf
))

1004 
v
 = (
uöt16
*Ë
	`_TIFFmÆloc
(
dú
->
tdú_cou¡
 *  (uint16));

1005 i‡(
dú
->
tdú_ty≥
 =
TIFF_BYTE
)

1006 
°©us
 = 
	`TIFFFëchByãAºay
(
tif
, 
dú
, 
v
);

1008 
°©us
 = 
	`TIFFFëchSh‹tAºay
(
tif
, 
dú
, 
v
);

1009 i‡(
°©us
)

1010 
°©us
 = 
	`TIFFSëFõld
(
tif
, 
dú
->
tdú_èg
, dú->
tdú_cou¡
, 
v
);

1011 i‡(
v
 !
buf
)

1012 
	`_TIFF‰ì
((*Ë
v
);

1013  (
°©us
);

1014 
	}
}

1015 #unde‡
NITEMS


1017 #ifde‡
COLORIMETRY_SUPPORT


1022 
	$TIFFFëchRefBœckWhôe
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
)

1024 
mesg
[] = "for \"ReferenceBlackWhite\"árray";

1025 * 
˝
;

1026 
ok
;

1028 i‡(
dú
->
tdú_ty≥
 =
TIFF_RATIONAL
)

1033 
˝
 = 
	`CheckMÆloc
(
tif
, 
dú
->
tdú_cou¡
 *  (
uöt32
), 
mesg
);

1034 i‡(
ok
 = (
˝
 && 
	`TIFFFëchL⁄gAºay
(
tif
, 
dú
, (
uöt32
*) cp))) {

1035 * 
Â
 = (*)

1036 
	`CheckMÆloc
(
tif
, 
dú
->
tdú_cou¡
 *  (), 
mesg
);

1037 i‡(
ok
 = (
Â
 !
NULL
)) {

1038 
uöt32
 
i
;

1039 
i
 = 0; i < 
dú
->
tdú_cou¡
; i++)

1040 
Â
[
i
] = ()((
uöt32
*Ë
˝
)[i];

1041 
ok
 = 
	`TIFFSëFõld
(
tif
, 
dú
->
tdú_èg
, 
Â
);

1042 
	`_TIFF‰ì
((*Ë
Â
);

1045 i‡(
˝
)

1046 
	`_TIFF‰ì
(
˝
);

1047  (
ok
);

1048 
	}
}

1051 #i‡
STRIPCHOP_SUPPORT


1060 
	$Ch›UpSögÀUncom¥es£dSåù
(
TIFF
* 
tif
)

1062 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

1063 
uöt32
 
byãcou¡
 = 
td
->
td_°rùbyãcou¡
[0];

1064 
uöt32
 
off£t
 = 
td
->
td_°rùoff£t
[0];

1065 
tsize_t
 
rowbyãs
 = 
	`TIFFVTûeSize
(
tif
, 1), 
°rùbyãs
;

1066 
t°rù_t
 
°rù
, 
n°rùs
, 
row•î°rù
;

1067 
uöt32
* 
√wcou¡s
;

1068 
uöt32
* 
√woff£ts
;

1074 i‡(
rowbyãs
 > 8192) {

1075 
°rùbyãs
 = 
rowbyãs
;

1076 
row•î°rù
 = 1;

1078 
row•î°rù
 = 8192 / 
rowbyãs
;

1079 
°rùbyãs
 = 
rowbyãs
 * 
row•î°rù
;

1082 i‡(
row•î°rù
 >
td
->
td_row•î°rù
)

1084 
n°rùs
 = (
t°rù_t
Ë
	`TIFFhowm™y
(
byãcou¡
, 
°rùbyãs
);

1085 
√wcou¡s
 = (
uöt32
*Ë
	`CheckMÆloc
(
tif
, 
n°rùs
 *  (uint32),

1087 
√woff£ts
 = (
uöt32
*Ë
	`CheckMÆloc
(
tif
, 
n°rùs
 *  (uint32),

1089 i‡(
√wcou¡s
 =
NULL
 || 
√woff£ts
 == NULL) {

1094 i‡(
√wcou¡s
 !
NULL
)

1095 
	`_TIFF‰ì
(
√wcou¡s
);

1096 i‡(
√woff£ts
 !
NULL
)

1097 
	`_TIFF‰ì
(
√woff£ts
);

1105 
°rù
 = 0; såù < 
n°rùs
; strip++) {

1106 i‡(
°rùbyãs
 > 
byãcou¡
)

1107 
°rùbyãs
 = 
byãcou¡
;

1108 
√wcou¡s
[
°rù
] = 
°rùbyãs
;

1109 
√woff£ts
[
°rù
] = 
off£t
;

1110 
off£t
 +
°rùbyãs
;

1111 
byãcou¡
 -
°rùbyãs
;

1116 
td
->
td_°rù•îimage
 =Åd->
td_n°rùs
 = 
n°rùs
;

1117 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

1119 
	`_TIFF‰ì
(
td
->
td_°rùbyãcou¡
);

1120 
	`_TIFF‰ì
(
td
->
td_°rùoff£t
);

1121 
td
->
td_°rùbyãcou¡
 = 
√wcou¡s
;

1122 
td
->
td_°rùoff£t
 = 
√woff£ts
;

1123 
	}
}

	@contrib/pds/tif_pdsdirwrite.c

62 
	~"tiffi›.h
"

64 #i‡
HAVE_IEEEFP


65 
	#TIFFCvtN©iveToIEEEFlﬂt
(
tif
, 
n
, 
Â
)

	)

66 
	#TIFFCvtN©iveToIEEEDoubÀ
(
tif
, 
n
, 
dp
)

	)

68 
TIFFCvtN©iveToIEEEFlﬂt
(
TIFF
*, 
uöt32
, *);

69 
TIFFCvtN©iveToIEEEDoubÀ
(
TIFF
*, 
uöt32
, *);

72 
TIFFWrôeN‹mÆTag
(
TIFF
*, 
TIFFDúE¡ry
*, c⁄° 
TIFFFõldInfo
*);

73 
TIFFWrôeN‹mÆSubTag
(
TIFF
*, 
TIFFDúE¡ry
*, c⁄° 
TIFFFõldInfo
*,

74 (*
gëFõldFn
)(
TIFF
 *
tif
,
âag_t
 
èg
,...));

75 
	`TIFFSëupSh‹tL⁄g
(
TIFF
*, 
âag_t
, 
TIFFDúE¡ry
*, 
uöt32
);

76 
	`TIFFSëupSh‹tPaú
(
TIFF
*, 
âag_t
, 
TIFFDúE¡ry
*);

77 
	`TIFFWrôePîSam∂eSh‹ts
(
TIFF
*, 
âag_t
, 
TIFFDúE¡ry
*);

78 
	`TIFFWrôePîSam∂eAnys
(
TIFF
*, 
TIFFD©aTy≥
, 
âag_t
, 
TIFFDúE¡ry
*);

79 
	`TIFFWrôeSh‹tTabÀ
(
TIFF
*, 
âag_t
, 
TIFFDúE¡ry
*, 
uöt32
, 
uöt16
**);

80 
	`TIFFWrôeSh‹tAºay
(
TIFF
*,

81 
TIFFD©aTy≥
, 
âag_t
, 
TIFFDúE¡ry
*, 
uöt32
, 
uöt16
*);

82 
	`TIFFWrôeL⁄gAºay
(
TIFF
 *,

83 
TIFFD©aTy≥
, 
âag_t
, 
TIFFDúE¡ry
*, 
uöt32
, uint32*);

84 
	`TIFFWrôeR©i⁄ÆAºay
(
TIFF
 *,

85 
TIFFD©aTy≥
, 
âag_t
, 
TIFFDúE¡ry
*, 
uöt32
, *);

86 
	`TIFFWrôeFlﬂtAºay
(
TIFF
 *,

87 
TIFFD©aTy≥
, 
âag_t
, 
TIFFDúE¡ry
*, 
uöt32
, *);

88 
	`TIFFWrôeDoubÀAºay
(
TIFF
 *,

89 
TIFFD©aTy≥
, 
âag_t
, 
TIFFDúE¡ry
*, 
uöt32
, *);

90 
	`TIFFWrôeByãAºay
(
TIFF
*, 
TIFFDúE¡ry
*, *);

91 
	`TIFFWrôeAnyAºay
(
TIFF
*,

92 
TIFFD©aTy≥
, 
âag_t
, 
TIFFDúE¡ry
*, 
uöt32
, *);

93 #ifde‡
COLORIMETRY_SUPPORT


94 
	`TIFFWrôeTøns„rFun˘i⁄
(
TIFF
*, 
TIFFDúE¡ry
*);

96 
	`TIFFWrôeD©a
(
TIFF
*, 
TIFFDúE¡ry
*, *);

97 
	`TIFFLökDúe˘‹y
(
TIFF
*);

99 
	#WrôeR©i⁄ÆPaú
(
ty≥
, 
èg1
, 
v1
, 
èg2
, 
v2
) { \

100 i‡(!
	`TIFFWrôeR©i⁄Æ
(
tif
, 
ty≥
, 
èg1
, 
dú
, 
v1
)) \

101 
bad
; \

102 i‡(!
	`TIFFWrôeR©i⁄Æ
(
tif
, 
ty≥
, 
èg2
, 
dú
+1, 
v2
)) \

103 
bad
; \

104 
dú
++; \

105 
	}

	)
}

106 
	#TIFFWrôeR©i⁄Æ
(
tif
, 
ty≥
, 
èg
, 
dú
, 
v
) \

107 
	`TIFFWrôeR©i⁄ÆAºay
((
tif
), (
ty≥
), (
èg
), (
dú
), 1, &(
v
))

	)

108 #i‚de‡
TIFFWrôeR©i⁄Æ


109 
TIFFWrôeR©i⁄Æ
(
TIFF
*,

110 
TIFFD©aTy≥
, 
âag_t
, 
TIFFDúE¡ry
*, );

141 
toff_t


142 
	$TIFFWrôePriv©eD©aSubDúe˘‹y
(
TIFF
* 
tif
,

143 
uöt32
 
pdú_fõlds£t
[], 
pdú_fõlds_œ°
,

144 
TIFFFõldInfo
 *
fõld_öfo
,

145 (*
gëFõldFn
)(
TIFF
 *
tif
, 
âag_t
 
èg
, ...))

147 
uöt16
 
dúcou¡
;

148 
uöt32
 
dúoff
, 
√xtdúoff
;

149 
âag_t
 
èg
;

150 
uöt32
 
nfõlds
;

151 
tsize_t
 
dúsize
;

152 * 
d©a
;

153 
TIFFDúE¡ry
* 
dú
;

154 
u_l⁄g
 
b
, *
fõlds
, 
fõlds_size
;

155 
toff_t
 
dúe˘‹y_off£t
;

156 
TIFFFõldInfo
* 
fù
;

164 
	`TIFFFlushD©a
(
tif
);

171 
nfõlds
 = 0;

172 
b
 = 0; b <
pdú_fõlds_œ°
; b++)

173 i‡(
	`FõldSë
(
pdú_fõlds£t
, 
b
))

176 
nfõlds
 += 1;

177 
dúsize
 = 
nfõlds
 *  (
TIFFDúE¡ry
);

178 
d©a
 = (*Ë
	`_TIFFmÆloc
(
dúsize
);

179 i‡(
d©a
 =
NULL
) {

180 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

189 i‡(
tif
->
tif_d©aoff
 == 0)

190 
tif
->
tif_d©aoff
 =(
	`TIFFSìkFûe
—if, (
toff_t
Ë0, 
SEEK_END
)+1) &~ 1;

191 
dúoff
 = 
tif
->
tif_d©aoff
;

192 
tif
->
tif_d©aoff
 = (
toff_t
)(

193 
dúoff
 +  (
uöt16
Ë+ 
dúsize
 +  (
toff_t
));

194 i‡(
tif
->
tif_d©aoff
 & 1)

195 
tif
->
tif_d©aoff
++;

196 (Ë
	`TIFFSìkFûe
(
tif
,Åif->
tif_d©aoff
, 
SEEK_SET
);

198 
dú
 = (
TIFFDúE¡ry
*Ë
d©a
;

219 
fõlds_size
 = 
pdú_fõlds_œ°
 / (8*(
uöt32
)) + 1;

220 
fõlds
 = 
	`_TIFFmÆloc
(
fõlds_size
*(
uöt32
));

221 
	`_TIFFmem˝y
(
fõlds
, 
pdú_fõlds£t
, 
fõlds_size
 * (
uöt32
));

229 
fù
 = 
fõld_öfo
; fù->
fõld_èg
; fip++) {

232 !
	`FõldSë
(
fõlds
, 
fù
->
fõld_bô
))

234 i‡(!
	`TIFFWrôeN‹mÆSubTag
(
tif
, 
dú
, 
fù
, 
gëFõldFn
))

235 
bad
;

236 
dú
++;

237 
	`Re£tFõldBô
(
fõlds
, 
fù
->
fõld_bô
);

243 
dúe˘‹y_off£t
 = 
tif
->
tif_d©aoff
;

248 
dúcou¡
 = (
uöt16
Ë
nfõlds
;

250 
√xtdúoff
 = 0;

251 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
) {

262 
dú
 = (
TIFFDúE¡ry
*Ë
d©a
; 
dúcou¡
; dir++, dircount--) {

263 
	`TIFFSwabAºayOfSh‹t
(&
dú
->
tdú_èg
, 2);

264 
	`TIFFSwabAºayOfL⁄g
(&
dú
->
tdú_cou¡
, 2);

266 
dúcou¡
 = (
uöt16
Ë
nfõlds
;

267 
	`TIFFSwabSh‹t
(&
dúcou¡
);

268 
	`TIFFSwabL⁄g
(&
√xtdúoff
);

271 (Ë
	`TIFFSìkFûe
(
tif
,Åif->
tif_d©aoff
, 
SEEK_SET
);

272 i‡(!
	`WrôeOK
(
tif
, &
dúcou¡
,  (dircount))) {

273 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "Error writingÖrivate subdirectory count");

274 
bad
;

276 i‡(!
	`WrôeOK
(
tif
, 
d©a
, 
dúsize
)) {

277 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "Error writingÖrivate subdirectory contents");

278 
bad
;

280 i‡(!
	`WrôeOK
(
tif
, &
√xtdúoff
,  (nextdiroff))) {

281 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "Error writingÖrivate subdirectoryÜink");

282 
bad
;

284 
tif
->
tif_d©aoff
 +(
dúcou¡
Ë+ 
dúsize
 + (
√xtdúoff
);

286 
	`_TIFF‰ì
(
d©a
);

287 
	`_TIFF‰ì
(
fõlds
);

288 
tif
->
tif_Êags
 &~
TIFF_DIRTYDIRECT
;

293 (*
tif
->
tif_˛ónup
)(tif);

299 
	`TIFFDeÁu…Dúe˘‹y
(
tif
);

300 
tif
->
tif_curoff
 = 0;

301 
tif
->
tif_row
 = (
uöt32
) -1;

302 
tif
->
tif_cur°rù
 = (
t°rù_t
) -1;

305  (
dúe˘‹y_off£t
);

306 
bad
:

307 
	`_TIFF‰ì
(
d©a
);

308 
	`_TIFF‰ì
(
fõlds
);

310 
	}
}

311 #unde‡
WrôeR©i⁄ÆPaú


320 
	$TIFFWrôeN‹mÆSubTag
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, c⁄° 
TIFFFõldInfo
* 
fù
,

321 (*
gëFõldFn
)(
TIFF
 *
tif
, 
âag_t
 
èg
, ...))

323 
u_sh‹t
 
wc
 = (u_sh‹tË
fù
->
fõld_wrôecou¡
;

325 
dú
->
tdú_èg
 = 
fù
->
fõld_èg
;

326 
dú
->
tdú_ty≥
 = (
u_sh‹t
Ë
fù
->
fõld_ty≥
;

327 
dú
->
tdú_cou¡
 = 
wc
;

328 
	#WRITEF
(
x
,
y
Ë
	`x
(
tif
, 
fù
->
fõld_ty≥
, fù->
fõld_èg
, 
dú
, 
wc
, y)

	)

329 
fù
->
fõld_ty≥
) {

330 
TIFF_SHORT
:

331 
TIFF_SSHORT
:

332 i‡(
wc
 > 1) {

333 
uöt16
* 
wp
;

334 i‡(
wc
 =(
u_sh‹t
Ë
TIFF_VARIABLE
) {

335 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
wc
, &
wp
);

336 
dú
->
tdú_cou¡
 = 
wc
;

338 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
wp
);

339 i‡(!
	`WRITEF
(
TIFFWrôeSh‹tAºay
, 
wp
))

342 
uöt16
 
sv
;

343 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
sv
);

344 
dú
->
tdú_off£t
 =

345 
	`TIFFIn£πD©a
(
tif
, 
dú
->
tdú_ty≥
, 
sv
);

348 
TIFF_LONG
:

349 
TIFF_SLONG
:

350 i‡(
wc
 > 1) {

351 
uöt32
* 
Õ
;

352 i‡(
wc
 =(
u_sh‹t
Ë
TIFF_VARIABLE
) {

353 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
wc
, &
Õ
);

354 
dú
->
tdú_cou¡
 = 
wc
;

356 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
Õ
);

357 i‡(!
	`WRITEF
(
TIFFWrôeL⁄gAºay
, 
Õ
))

361 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
dú
->
tdú_off£t
);

364 
TIFF_RATIONAL
:

365 
TIFF_SRATIONAL
:

366 i‡(
wc
 > 1) {

367 * 
Â
;

368 i‡(
wc
 =(
u_sh‹t
Ë
TIFF_VARIABLE
) {

369 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
wc
, &
Â
);

370 
dú
->
tdú_cou¡
 = 
wc
;

372 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
Â
);

373 i‡(!
	`WRITEF
(
TIFFWrôeR©i⁄ÆAºay
, 
Â
))

376 
fv
;

377 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
fv
);

378 i‡(!
	`WRITEF
(
TIFFWrôeR©i⁄ÆAºay
, &
fv
))

382 
TIFF_FLOAT
:

383 i‡(
wc
 > 1) {

384 * 
Â
;

385 i‡(
wc
 =(
u_sh‹t
Ë
TIFF_VARIABLE
) {

386 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
wc
, &
Â
);

387 
dú
->
tdú_cou¡
 = 
wc
;

389 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
Â
);

390 i‡(!
	`WRITEF
(
TIFFWrôeFlﬂtAºay
, 
Â
))

393 
fv
;

394 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
fv
);

395 i‡(!
	`WRITEF
(
TIFFWrôeFlﬂtAºay
, &
fv
))

399 
TIFF_DOUBLE
:

419 { * 
dp
;

420 i‡(
wc
 =(
u_sh‹t
Ë
TIFF_VARIABLE
) {

421 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
wc
, &
dp
);

422 
dú
->
tdú_cou¡
 = 
wc
;

424 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
dp
);

425 
	`TIFFCvtN©iveToIEEEDoubÀ
(
tif
, 
wc
, 
dp
);

426 i‡(!
	`TIFFWrôeD©a
(
tif
, 
dú
, (*Ë
dp
))

430 i‡(
wc
 > 1) {

431 * 
dp
;

432 i‡(
wc
 =(
u_sh‹t
Ë
TIFF_VARIABLE
) {

433 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
wc
, &
dp
);

434 
dú
->
tdú_cou¡
 = 
wc
;

436 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
dp
);

437 i‡(!
	`WRITEF
(
TIFFWrôeDoubÀAºay
, 
dp
))

440 
dv
;

441 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
dv
);

442 i‡(!
	`WRITEF
(
TIFFWrôeDoubÀAºay
, &
dv
))

447 
TIFF_ASCII
:

448 { * 
˝
;

449 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
˝
);

450 
dú
->
tdú_cou¡
 = (
uöt32
Ë(
	`°æí
(
˝
) + 1);

451 i‡(!
	`TIFFWrôeByãAºay
(
tif
, 
dú
, 
˝
))

455 
TIFF_UNDEFINED
:

456 { * 
˝
;

457 i‡(
wc
 =(
u_sh‹t
Ë
TIFF_VARIABLE
) {

458 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
wc
, &
˝
);

459 
dú
->
tdú_cou¡
 = 
wc
;

461 (*
gëFõldFn
)(
tif
, 
fù
->
fõld_èg
, &
˝
);

462 i‡(!
	`TIFFWrôeByãAºay
(
tif
, 
dú
, 
˝
))

468 
	}
}

469 #unde‡
WRITEF


480 
	$TIFFSëupSh‹tL⁄g
(
TIFF
* 
tif
, 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
v
)

482 
dú
->
tdú_èg
 = 
èg
;

483 
dú
->
tdú_cou¡
 = 1;

484 i‡(
v
 > 0xffffL) {

485 
dú
->
tdú_ty≥
 = (Ë
TIFF_LONG
;

486 
dú
->
tdú_off£t
 = 
v
;

488 
dú
->
tdú_ty≥
 = (Ë
TIFF_SHORT
;

489 
dú
->
tdú_off£t
 = 
	`TIFFIn£πD©a
(
tif
, (Ë
TIFF_SHORT
, 
v
);

491 
	}
}

492 #unde‡
MakeSh‹tDúít


494 #i‚de‡
TIFFWrôeR©i⁄Æ


500 
	$TIFFWrôeR©i⁄Æ
(
TIFF
* 
tif
,

501 
TIFFD©aTy≥
 
ty≥
, 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
, 
v
)

503  (
	`TIFFWrôeR©i⁄ÆAºay
(
tif
, 
ty≥
, 
èg
, 
dú
, 1, &
v
));

504 
	}
}

507 
	#NITEMS
(
x
Ë( (xË/  (x[0]))

	)

515 
	$TIFFWrôePîSam∂eSh‹ts
(
TIFF
* 
tif
, 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
)

517 
uöt16
 
buf
[10], 
v
;

518 
uöt16
* 
w
 = 
buf
;

519 
i
, 
°©us
, 
ßm∂es
 = 
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;

521 i‡(
ßm∂es
 > 
	`NITEMS
(
buf
))

522 
w
 = (
uöt16
*Ë
	`_TIFFmÆloc
(
ßm∂es
 *  (uint16));

523 
	`TIFFGëFõld
(
tif
, 
èg
, &
v
);

524 
i
 = 0; i < 
ßm∂es
; i++)

525 
w
[
i
] = 
v
;

526 
°©us
 = 
	`TIFFWrôeSh‹tAºay
(
tif
, 
TIFF_SHORT
, 
èg
, 
dú
, 
ßm∂es
, 
w
);

527 i‡(
w
 !
buf
)

528 
	`_TIFF‰ì
((*Ë
w
);

529  (
°©us
);

530 
	}
}

538 
	$TIFFWrôePîSam∂eAnys
(
TIFF
* 
tif
,

539 
TIFFD©aTy≥
 
ty≥
, 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
)

541 
buf
[10], 
v
;

542 * 
w
 = 
buf
;

543 
i
, 
°©us
;

544 
ßm∂es
 = (Ë
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;

546 i‡(
ßm∂es
 > 
	`NITEMS
(
buf
))

547 
w
 = (*Ë
	`_TIFFmÆloc
(
ßm∂es
 *  ());

548 
	`TIFFGëFõld
(
tif
, 
èg
, &
v
);

549 
i
 = 0; i < 
ßm∂es
; i++)

550 
w
[
i
] = 
v
;

551 
°©us
 = 
	`TIFFWrôeAnyAºay
(
tif
, 
ty≥
, 
èg
, 
dú
, 
ßm∂es
, 
w
);

552 i‡(
w
 !
buf
)

553 
	`_TIFF‰ì
(
w
);

554  (
°©us
);

555 
	}
}

556 #unde‡
NITEMS


563 
	$TIFFSëupSh‹tPaú
(
TIFF
* 
tif
, 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
)

565 
uöt16
 
v
[2];

567 
	`TIFFGëFõld
(
tif
, 
èg
, &
v
[0], &v[1]);

568  (
	`TIFFWrôeSh‹tAºay
(
tif
, 
TIFF_SHORT
, 
èg
, 
dú
, 2, 
v
));

569 
	}
}

577 
	$TIFFWrôeSh‹tTabÀ
(
TIFF
* 
tif
,

578 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
n
, 
uöt16
** 
èbÀ
)

580 
uöt32
 
i
, 
off
;

582 
dú
->
tdú_èg
 = 
èg
;

583 
dú
->
tdú_ty≥
 = (Ë
TIFF_SHORT
;

585 
dú
->
tdú_cou¡
 = (
uöt32
Ë(1L<<
tif
->
tif_dú
.
td_bô•îßm∂e
);

586 
off
 = 
tif
->
tif_d©aoff
;

587 
i
 = 0; i < 
n
; i++)

588 i‡(!
	`TIFFWrôeD©a
(
tif
, 
dú
, (*)
èbÀ
[
i
]))

590 
dú
->
tdú_cou¡
 *
n
;

591 
dú
->
tdú_off£t
 = 
off
;

593 
	}
}

599 
	$TIFFWrôeByãAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, * 
˝
)

601 i‡(
dú
->
tdú_cou¡
 > 4) {

602 i‡(!
	`TIFFWrôeD©a
(
tif
, 
dú
, 
˝
))

605 
	`_TIFFmem˝y
(&
dú
->
tdú_off£t
, 
˝
, dú->
tdú_cou¡
);

607 
	}
}

614 
	$TIFFWrôeSh‹tAºay
(
TIFF
* 
tif
,

615 
TIFFD©aTy≥
 
ty≥
, 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
n
, 
uöt16
* 
v
)

617 
dú
->
tdú_èg
 = 
èg
;

618 
dú
->
tdú_ty≥
 = (Ë
ty≥
;

619 
dú
->
tdú_cou¡
 = 
n
;

620 i‡(
n
 <= 2) {

621 i‡(
tif
->
tif_hódî
.
tiff_magic
 =
TIFF_BIGENDIAN
) {

622 
dú
->
tdú_off£t
 = (
uöt32
Ë((Ë
v
[0] << 16);

623 i‡(
n
 == 2)

624 
dú
->
tdú_off£t
 |
v
[1] & 0xffff;

626 
dú
->
tdú_off£t
 = 
v
[0] & 0xffff;

627 i‡(
n
 == 2)

628 
dú
->
tdú_off£t
 |(Ë
v
[1] << 16;

632  (
	`TIFFWrôeD©a
(
tif
, 
dú
, (*Ë
v
));

633 
	}
}

640 
	$TIFFWrôeL⁄gAºay
(
TIFF
* 
tif
,

641 
TIFFD©aTy≥
 
ty≥
, 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
n
, uöt32* 
v
)

643 
dú
->
tdú_èg
 = 
èg
;

644 
dú
->
tdú_ty≥
 = (Ë
ty≥
;

645 
dú
->
tdú_cou¡
 = 
n
;

646 i‡(
n
 == 1) {

647 
dú
->
tdú_off£t
 = 
v
[0];

650  (
	`TIFFWrôeD©a
(
tif
, 
dú
, (*Ë
v
));

651 
	}
}

658 
	$TIFFWrôeR©i⁄ÆAºay
(
TIFF
* 
tif
,

659 
TIFFD©aTy≥
 
ty≥
, 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
n
, * 
v
)

661 
uöt32
 
i
;

662 
uöt32
* 
t
;

663 
°©us
;

665 
dú
->
tdú_èg
 = 
èg
;

666 
dú
->
tdú_ty≥
 = (Ë
ty≥
;

667 
dú
->
tdú_cou¡
 = 
n
;

668 
t
 = (
uöt32
*Ë
	`_TIFFmÆloc
(2*
n
 *  (uint32));

669 
i
 = 0; i < 
n
; i++) {

670 
fv
 = 
v
[
i
];

671 
sign
 = 1;

672 
uöt32
 
dí
;

674 i‡(
fv
 < 0) {

675 i‡(
ty≥
 =
TIFF_RATIONAL
) {

676 
	`TIFFW¨nög
(
tif
->
tif_«me
,

678 
	`_TIFFFõldWôhTag
(
tif
,
èg
)->
fõld_«me
, 
v
);

679 
fv
 = 0;

681 
fv
 = -fv, 
sign
 = -1;

683 
dí
 = 1L;

684 i‡(
fv
 > 0) {

685 
fv
 < 1L<<(31-3Ë&& 
dí
 < 1L<<(31-3))

686 
fv
 *1<<3, 
dí
 *= 1L<<3;

688 
t
[2*
i
+0] = 
sign
 * (
fv
 + 0.5);

689 
t
[2*
i
+1] = 
dí
;

691 
°©us
 = 
	`TIFFWrôeD©a
(
tif
, 
dú
, (*)
t
);

692 
	`_TIFF‰ì
((*Ë
t
);

693  (
°©us
);

694 
	}
}

697 
	$TIFFWrôeFlﬂtAºay
(
TIFF
* 
tif
,

698 
TIFFD©aTy≥
 
ty≥
, 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
n
, * 
v
)

700 
dú
->
tdú_èg
 = 
èg
;

701 
dú
->
tdú_ty≥
 = (Ë
ty≥
;

702 
dú
->
tdú_cou¡
 = 
n
;

703 
	`TIFFCvtN©iveToIEEEFlﬂt
(
tif
, 
n
, 
v
);

704 i‡(
n
 == 1) {

705 
dú
->
tdú_off£t
 = *(
uöt32
*Ë&
v
[0];

708  (
	`TIFFWrôeD©a
(
tif
, 
dú
, (*Ë
v
));

709 
	}
}

712 
	$TIFFWrôeDoubÀAºay
(
TIFF
* 
tif
,

713 
TIFFD©aTy≥
 
ty≥
, 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
n
, * 
v
)

715 
dú
->
tdú_èg
 = 
èg
;

716 
dú
->
tdú_ty≥
 = (Ë
ty≥
;

717 
dú
->
tdú_cou¡
 = 
n
;

718 
	`TIFFCvtN©iveToIEEEDoubÀ
(
tif
, 
n
, 
v
);

719  (
	`TIFFWrôeD©a
(
tif
, 
dú
, (*Ë
v
));

720 
	}
}

732 
	$TIFFWrôeAnyAºay
(
TIFF
* 
tif
,

733 
TIFFD©aTy≥
 
ty≥
, 
âag_t
 
èg
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
n
, * 
v
)

735 
buf
[10 * ()];

736 * 
w
 = 
buf
;

737 
i
, 
°©us
 = 0;

739 i‡(
n
 * 
	`TIFFD©aWidth
(
ty≥
Ë>  
buf
)

740 
w
 = (*Ë
	`_TIFFmÆloc
(
n
 * 
	`TIFFD©aWidth
(
ty≥
));

741 
ty≥
) {

742 
TIFF_BYTE
:

743 { * 
bp
 = (*Ë
w
;

744 
i
 = 0; i < 
n
; i++)

745 
bp
[
i
] = (Ë
v
[i];

746 
dú
->
tdú_èg
 = 
èg
;

747 
dú
->
tdú_ty≥
 = (Ë
ty≥
;

748 
dú
->
tdú_cou¡
 = 
n
;

749 i‡(!
	`TIFFWrôeByãAºay
(
tif
, 
dú
, (*Ë
bp
))

750 
out
;

753 
TIFF_SBYTE
:

754 { sig√d * 
bp
 = (sig√d *Ë
w
;

755 
i
 = 0; i < 
n
; i++)

756 
bp
[
i
] = (sig√d Ë
v
[i];

757 
dú
->
tdú_èg
 = 
èg
;

758 
dú
->
tdú_ty≥
 = (Ë
ty≥
;

759 
dú
->
tdú_cou¡
 = 
n
;

760 i‡(!
	`TIFFWrôeByãAºay
(
tif
, 
dú
, (*Ë
bp
))

761 
out
;

764 
TIFF_SHORT
:

765 { 
uöt16
* 
bp
 = (uöt16*Ë
w
;

766 
i
 = 0; i < 
n
; i++)

767 
bp
[
i
] = (
uöt16
Ë
v
[i];

768 i‡(!
	`TIFFWrôeSh‹tAºay
(
tif
, 
ty≥
, 
èg
, 
dú
, 
n
, (
uöt16
*)
bp
))

769 
out
;

772 
TIFF_SSHORT
:

773 { 
öt16
* 
bp
 = (öt16*Ë
w
;

774 
i
 = 0; i < 
n
; i++)

775 
bp
[
i
] = (
öt16
Ë
v
[i];

776 i‡(!
	`TIFFWrôeSh‹tAºay
(
tif
, 
ty≥
, 
èg
, 
dú
, 
n
, (
uöt16
*)
bp
))

777 
out
;

780 
TIFF_LONG
:

781 { 
uöt32
* 
bp
 = (uöt32*Ë
w
;

782 
i
 = 0; i < 
n
; i++)

783 
bp
[
i
] = (
uöt32
Ë
v
[i];

784 i‡(!
	`TIFFWrôeL⁄gAºay
(
tif
, 
ty≥
, 
èg
, 
dú
, 
n
, 
bp
))

785 
out
;

788 
TIFF_SLONG
:

789 { 
öt32
* 
bp
 = (öt32*Ë
w
;

790 
i
 = 0; i < 
n
; i++)

791 
bp
[
i
] = (
öt32
Ë
v
[i];

792 i‡(!
	`TIFFWrôeL⁄gAºay
(
tif
, 
ty≥
, 
èg
, 
dú
, 
n
, (
uöt32
*Ë
bp
))

793 
out
;

796 
TIFF_FLOAT
:

797 { * 
bp
 = (*Ë
w
;

798 
i
 = 0; i < 
n
; i++)

799 
bp
[
i
] = (Ë
v
[i];

800 i‡(!
	`TIFFWrôeFlﬂtAºay
(
tif
, 
ty≥
, 
èg
, 
dú
, 
n
, 
bp
))

801 
out
;

804 
TIFF_DOUBLE
:

805  (
	`TIFFWrôeDoubÀAºay
(
tif
, 
ty≥
, 
èg
, 
dú
, 
n
, 
v
));

812 
out
;

814 
°©us
 = 1;

815 
out
:

816 i‡(
w
 !
buf
)

817 
	`_TIFF‰ì
(
w
);

818  (
°©us
);

819 
	}
}

821 #ifde‡
COLORIMETRY_SUPPORT


823 
	$TIFFWrôeTøns„rFun˘i⁄
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
)

825 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

826 
tsize_t
 
n
 = (1L<<
td
->
td_bô•îßm∂e
Ë*  (
uöt16
);

827 
uöt16
** 
tf
 = 
td
->
td_å™s„rfun˘i⁄
;

828 
ncﬁs
;

836 
td
->
td_ßm∂e•îpixñ
 -Åd->
td_exåaßm∂es
) {

837 : i‡(
	`_TIFFmemcmp
(
tf
[0],Åf[2], 
n
)Ë{ 
ncﬁs
 = 3; ; }

838 2: i‡(
	`_TIFFmemcmp
(
tf
[0],Åf[1], 
n
)Ë{ 
ncﬁs
 = 3; ; }

839 1: 0: 
ncﬁs
 = 1;

841  (
	`TIFFWrôeSh‹tTabÀ
(
tif
,

842 
TIFFTAG_TRANSFERFUNCTION
, 
dú
, 
ncﬁs
, 
tf
));

843 
	}
}

850 
	$TIFFWrôeD©a
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, * 
˝
)

852 
tsize_t
 
cc
;

854 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
) {

855 
dú
->
tdú_ty≥
) {

856 
TIFF_SHORT
:

857 
TIFF_SSHORT
:

858 
	`TIFFSwabAºayOfSh‹t
((
uöt16
*Ë
˝
, 
dú
->
tdú_cou¡
);

860 
TIFF_LONG
:

861 
TIFF_SLONG
:

862 
TIFF_FLOAT
:

863 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*Ë
˝
, 
dú
->
tdú_cou¡
);

865 
TIFF_RATIONAL
:

866 
TIFF_SRATIONAL
:

867 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*Ë
˝
, 2*
dú
->
tdú_cou¡
);

869 
TIFF_DOUBLE
:

870 
	`TIFFSwabAºayOfDoubÀ
((*Ë
˝
, 
dú
->
tdú_cou¡
);

874 
dú
->
tdú_off£t
 = 
tif
->
tif_d©aoff
;

875 
cc
 = 
dú
->
tdú_cou¡
 * 
	`TIFFD©aWidth
(dú->
tdú_ty≥
);

876 i‡(
	`SìkOK
(
tif
, 
dú
->
tdú_off£t
) &&

877 
	`WrôeOK
(
tif
, 
˝
, 
cc
)) {

878 
tif
->
tif_d©aoff
 +(
cc
 + 1) & ~1;

881 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "Error writing data for field \"%s\"",

882 
	`_TIFFFõldWôhTag
(
tif
, 
dú
->
tdú_èg
)->
fõld_«me
);

884 
	}
}

891 
	$TIFFLökDúe˘‹y
(
TIFF
* 
tif
)

893 c⁄° 
moduÀ
[] = "TIFFLinkDirectory";

894 
uöt32
 
√xtdú
;

895 
uöt32
 
dúoff
;

897 
tif
->
tif_dúoff
 = (
	`TIFFSìkFûe
—if, (
toff_t
Ë0, 
SEEK_END
)+1) &~ 1;

898 
dúoff
 = (
uöt32
Ë
tif
->
tif_dúoff
;

899 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

900 
	`TIFFSwabL⁄g
(&
dúoff
);

901 #i‡
SUBIFD_SUPPORT


902 i‡(
tif
->
tif_Êags
 & 
TIFF_INSUBIFD
) {

903 (Ë
	`TIFFSìkFûe
(
tif
,Åif->
tif_subifdoff
, 
SEEK_SET
);

904 i‡(!
	`WrôeOK
(
tif
, &
dúoff
,  (diroff))) {

905 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

907 
tif
->
tif_«me
);

915 i‡(--
tif
->
tif_nsubifd
)

916 
tif
->
tif_subifdoff
 + (
dúoff
);

918 
tif
->
tif_Êags
 &~
TIFF_INSUBIFD
;

922 i‡(
tif
->
tif_hódî
.
tiff_dúoff
 == 0) {

926 
tif
->
tif_hódî
.
tiff_dúoff
 = (
uöt32
Ëtif->
tif_dúoff
;

927 
	#HDROFF
(
f
Ë((
toff_t
Ë&(((
TIFFHódî
*Ë0)->f))

	)

928 (Ë
	`TIFFSìkFûe
(
tif
, 
	`HDROFF
(
tiff_dúoff
), 
SEEK_SET
);

929 i‡(!
	`WrôeOK
(
tif
, &
dúoff
,  (diroff))) {

930 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "Error writing TIFF header");

938 
√xtdú
 = 
tif
->
tif_hódî
.
tiff_dúoff
;

940 
uöt16
 
dúcou¡
;

942 i‡(!
	`SìkOK
(
tif
, 
√xtdú
) ||

943 !
	`RódOK
(
tif
, &
dúcou¡
,  (dircount))) {

944 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Error fetching directory count");

947 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

948 
	`TIFFSwabSh‹t
(&
dúcou¡
);

949 (Ë
	`TIFFSìkFûe
(
tif
,

950 
dúcou¡
 *  (
TIFFDúE¡ry
), 
SEEK_CUR
);

951 i‡(!
	`RódOK
(
tif
, &
√xtdú
,  (nextdir))) {

952 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Error fetching directoryÜink");

955 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

956 
	`TIFFSwabL⁄g
(&
√xtdú
);

957 } 
√xtdú
 != 0);

958 (Ë
	`TIFFSìkFûe
(
tif
, -(
toff_t
Ë (
√xtdú
), 
SEEK_CUR
);

959 i‡(!
	`WrôeOK
(
tif
, &
dúoff
,  (diroff))) {

960 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Error writing directoryÜink");

964 
	}
}

	@contrib/ras/ras2tif.c

1 #i‚de‡
löt


2 
	gsccsid
[] = "@(#)ras2tif.c 1.2 90/03/06";

46 
	~<°dio.h
>

47 
	~<sys/time.h
>

48 
	~<pixª˘/pixª˘_hs.h
>

49 
	~"tiffio.h
"

51 
	tboﬁón
;

52 
	#True
 (1)

	)

53 
	#FÆ£
 (0)

	)

54 
	#SCALE
(
x
Ë(((x)*((1L<<16)-1))/255)

	)

56 
boﬁón
 
	gVîbo£
 = 
FÆ£
;

57 
boﬁón
 
	gdummyöput
 = 
FÆ£
;

58 *
	g≤ame
;

61 
	$îr‹
(
s1
, 
s2
)

62 *
s1
,

63 *
s2
;

65 
	`Ârötf
(
°dîr
, 
s1
, 
≤ame
, 
s2
);

66 
	`exô
(1);

67 
	}
}

70 
	$ußge
()

72 
	`îr‹
("ußge: %†-[vq] [-|ø°îfûe] TIFFfûe\n", 
NULL
);

73 
	}
}

76 
	$maö
(
¨gc
, 
¨gv
)

77 
¨gc
;

78 *
¨gv
[];

80 *
öf
 = 
NULL
;

81 *
outf
 = 
NULL
;

82 
FILE
 *
Â
;

83 
dïth
,

84 
i
;

85 
row
;

86 
TIFF
 *
tif
;

87 
Pixª˘
 *
pix
;

88 
cﬁ‹m≠_t
 
Cﬁ‹m≠
;

89 
u_sh‹t
 
ªd
[256],

90 
gªí
[256],

91 
blue
[256];

92 
tm
 *
˘
;

93 
timevÆ
 
tv
;

94 
width
,

95 
height
;

96 
row•î°rù
;

97 
yór
;

98 
phŸomëric
;

99 
ßm∂e•îpixñ
;

100 
bô•îßm∂e
;

101 
bp¶
;

102 *
vîsi⁄
 = "ras2tif 1.0";

103 *
d©ëime
 = "1990:01:01 12:00:00";

105 
	`gëtimeofday
(&
tv
, (
timez⁄e
 *Ë
NULL
);

106 
˘
 = 
	`loˇ…ime
(&
tv
.
tv_£c
);

107 
yór
=1900 + 
˘
->
tm_yór
;

108 
	`•rötf
(
d©ëime
, "%04d:%02d:%02d %02d:%02d:%02d",

109 
yór
, 
˘
->
tm_m⁄
 + 1, ct->
tm_mday
,

110 
˘
->
tm_hour
, ct->
tm_mö
, ct->
tm_£c
);

112 
	`£tbuf
(
°dîr
, 
NULL
);

113 
≤ame
 = 
¨gv
[0];

115 --
¨gc
) {

116 i‡((++
¨gv
)[0][0] == '-') {

117 
¨gv
[0][1]) {

119 
Vîbo£
 = 
True
;

122 
	`ußge
();

125 i‡(
öf
 =
NULL
)

126 
dummyöput
 = 
True
;

128 
	`ußge
();

131 
	`Ârötf
(
°dîr
, "%s: iŒegÆ o±i⁄ -%c.\n", 
≤ame
,

132 
¨gv
[0][1]);

133 
	`exô
(1);

135 } i‡(
öf
 =
NULL
 && !
dummyöput
) {

136 
öf
 = 
¨gv
[0];

137 } i‡(
outf
 =
NULL
)

138 
outf
 = 
¨gv
[0];

140 
	`ußge
();

143 i‡(
outf
 =
NULL
)

144 
	`îr‹
("%s: c™'àwrôêouçuàfûêtÿ®°ªam.\n", 
NULL
);

146 i‡(
dummyöput
 || 
öf
 =
NULL
) {

147 
öf
 = "Standard Input";

148 
Â
 = 
°dö
;

149 } i‡((
Â
 = 
	`f›í
(
öf
, "r")Ë=
NULL
)

150 
	`îr‹
("%s: %†couldn'àbê›íed.\n", 
öf
);

152 i‡(
Vîbo£
)

153 
	`Ârötf
(
°dîr
, "RódögÑa°îfûê‰om %s...", 
öf
);

155 
pix
 = 
	`¥_lﬂd
(
Â
, &
Cﬁ‹m≠
);

156 i‡(
pix
 =
NULL
)

157 
	`îr‹
("%s: %†i†nŸáÑa°î fûe.\n", 
öf
);

159 i‡(
Vîbo£
)

160 
	`Ârötf
(
°dîr
, "done.\n");

162 i‡(
Vîbo£
)

163 
	`Ârötf
(
°dîr
, "Wrôög %s...", 
outf
);

165 
tif
 = 
	`TIFFO≥n
(
outf
, "w");

167 i‡(
tif
 =
NULL
)

168 
	`îr‹
("%s:Éº‹ o≥nög TIFF fûê%s", 
outf
);

170 
width
 = 
pix
->
¥_width
;

171 
height
 = 
pix
->
¥_height
;

172 
dïth
 = 
pix
->
¥_dïth
;

174 
dïth
) {

176 
ßm∂e•îpixñ
 = 1;

177 
bô•îßm∂e
 = 1;

178 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

181 
ßm∂e•îpixñ
 = 1;

182 
bô•îßm∂e
 = 8;

183 
phŸomëric
 = 
PHOTOMETRIC_PALETTE
;

186 
ßm∂e•îpixñ
 = 3;

187 
bô•îßm∂e
 = 8;

188 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

191 
ßm∂e•îpixñ
 = 4;

192 
bô•îßm∂e
 = 8;

193 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

196 
	`îr‹
("%s: bogu†dïth: %d\n", 
dïth
);

199 
bp¶
 = ((
dïth
 * 
width
 + 15) >> 3) & ~1;

200 
row•î°rù
 = (8 * 1024Ë/ 
bp¶
;

202 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
width
);

203 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
height
);

204 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 
bô•îßm∂e
);

205 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_TOPLEFT
);

206 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_LZW
);

207 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric
);

208 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_DOCUMENTNAME
, 
öf
);

209 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEDESCRIPTION
, "converted SunÑasterfile");

210 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 
ßm∂e•îpixñ
);

211 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

212 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_STRIPBYTECOUNTS
, 
height
 / 
row•î°rù
);

213 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

214 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SOFTWARE
, 
vîsi⁄
);

215 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_DATETIME
, 
d©ëime
);

217 
	`mem£t
(
ªd
, 0, (red));

218 
	`mem£t
(
gªí
, 0, (green));

219 
	`mem£t
(
blue
, 0, (blue));

220 i‡(
dïth
 == 8) {

221 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COLORMAP
, 
ªd
, 
gªí
, 
blue
);

222 
i
 = 0; i < 
Cﬁ‹m≠
.
Àngth
; i++) {

223 
ªd
[
i
] = 
	`SCALE
(
Cﬁ‹m≠
.
m≠
[0][i]);

224 
gªí
[
i
] = 
	`SCALE
(
Cﬁ‹m≠
.
m≠
[1][i]);

225 
blue
[
i
] = 
	`SCALE
(
Cﬁ‹m≠
.
m≠
[2][i]);

228 i‡(
Vîbo£
)

229 
	`Ârötf
(
°dîr
, "%dx%dx%d image, ", 
width
, 
height
, 
dïth
);

231 
row
 = 0;Ñow < 
height
;Ñow++)

232 i‡(
	`TIFFWrôeSˇ∆öe
(
tif
,

233 (
u_ch¨
 *Ë
	`m¥d_addr
(
	`m¥_d
(
pix
), 0, 
row
),

234 
row
, 0) < 0) {

235 
	`Ârötf
("Áûedá sˇ∆öêwrôê(%d)\n", 
row
);

238 
	`TIFFFlushD©a
(
tif
);

239 
	`TIFFClo£
(
tif
);

241 i‡(
Vîbo£
)

242 
	`Ârötf
(
°dîr
, "done.\n");

244 
	`¥_de°roy
(
pix
);

246 
	`exô
(0);

247 
	}
}

	@contrib/ras/tif2ras.c

1 #i‚de‡
löt


2 
	gid
[] = "$Id:Åif2ras.c,v 1.3 2010-06-08 18:55:15 bfriesen Exp $";

46 
	~<°dio.h
>

47 
	~<pixª˘/pixª˘_hs.h
>

48 
	~"tiffio.h
"

50 
	tboﬁón
;

51 
	#True
 (1)

	)

52 
	#FÆ£
 (0)

	)

53 
	#CVT
(
x
Ë(((xË* 255Ë/ ((1L<<16)-1))

	)

55 
boﬁón
 
	gVîbo£
 = 
FÆ£
;

56 *
	g≤ame
;

59 
	$îr‹
(
s1
, 
s2
)

60 *
s1
,

61 *
s2
;

63 
	`Ârötf
(
°dîr
, 
s1
, 
≤ame
, 
s2
);

64 
	`exô
(1);

65 
	}
}

68 
	$ußge
()

70 
	`îr‹
("ußge: %†-[vq] TIFFfûê[ø°îfûe]\n", 
NULL
);

71 
	}
}

74 
	$maö
(
¨gc
, 
¨gv
)

75 
¨gc
;

76 *
¨gv
[];

78 *
öf
 = 
NULL
;

79 *
outf
 = 
NULL
;

80 
FILE
 *
Â
;

81 
width
,

82 
height
;

83 
dïth
,

84 
numcﬁ‹s
;

85 
TIFF
 *
tif
;

86 
TIFFDúe˘‹y
 *
td
;

87 
u_ch¨
 *
öp
,

88 *
ouç
;

89 
cﬁ
,

90 
i
;

91 
row
;

92 
u_ch¨
 *
M≠
 = 
NULL
;

93 
u_ch¨
 *
buf
;

94 
bô•îßm∂e
;

95 
ßm∂e•îpixñ
;

96 
phŸomëric
;

97 
u_sh‹t
 *
ªdcﬁ‹m≠
,

98 *
bluecﬁ‹m≠
,

99 *
gªícﬁ‹m≠
;

101 
Pixª˘
 *
pix
;

102 
cﬁ‹m≠_t
 
Cﬁ‹m≠
;

103 
u_ch¨
 
ªd
[256],

104 
gªí
[256],

105 
blue
[256];

107 
	`£tbuf
(
°dîr
, 
NULL
);

108 
≤ame
 = 
¨gv
[0];

110 --
¨gc
) {

111 i‡((++
¨gv
)[0][0] == '-')

112 
¨gv
[0][1]) {

114 
Vîbo£
 = 
True
;

117 
	`ußge
();

120 
	`Ârötf
(
°dîr
, "%s: iŒegÆ o±i⁄ -%c.\n", 
≤ame
,

121 
¨gv
[0][1]);

122 
	`exô
(1);

124 i‡(
öf
 =
NULL
)

125 
öf
 = 
¨gv
[0];

126 i‡(
outf
 =
NULL
)

127 
outf
 = 
¨gv
[0];

129 
	`ußge
();

133 i‡(
öf
 =
NULL
)

134 
	`îr‹
("%s: c™'àªad i≈uàfûê‰omá såóm.\n", 
NULL
);

136 i‡(
Vîbo£
)

137 
	`Ârötf
(
°dîr
, "Ródög %s...", 
öf
);

139 
tif
 = 
	`TIFFO≥n
(
öf
, "r");

141 i‡(
tif
 =
NULL
)

142 
	`îr‹
("%s:Éº‹ o≥nög TIFF fûê%s", 
öf
);

144 i‡(
Vîbo£
)

145 
	`TIFFPrötDúe˘‹y
(
tif
, 
°dîr
, 
True
, 
FÆ£
, False);

146 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, &
bô•îßm∂e
);

147 i‡(
bô•îßm∂e
 > 8)

148 
	`îr‹
("%s: c™'àh™dÀ m‹êth™ 8-bô†≥∏ßm∂e\n", 
NULL
);

150 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, &
ßm∂e•îpixñ
);

151 
ßm∂e•îpixñ
) {

153 i‡(
bô•îßm∂e
 == 1)

154 
dïth
 = 1;

156 
dïth
 = 8;

160 
dïth
 = 24;

163 
	`îr‹
("%s: only handle 1-channel gray scale or 3-channel color\n");

166 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, &
width
);

167 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
height
);

169 i‡(
Vîbo£
)

170 
	`Ârötf
(
°dîr
, "%dx%dx%d image, ", 
width
, 
height
, 
dïth
);

171 i‡(
Vîbo£
)

172 
	`Ârötf
(
°dîr
, "%d bits/sample, %d samples/pixel, ",

173 
bô•îßm∂e
, 
ßm∂e•îpixñ
);

175 
pix
 = 
	`mem_¸óã
(
width
, 
height
, 
dïth
);

176 i‡(
pix
 =(
Pixª˘
 *Ë
NULL
)

177 
	`îr‹
("%s: c™'àÆloˇã mem‹y f‹ ouçuàpixª˘...\n", 
NULL
);

179 
numcﬁ‹s
 = (1 << 
bô•îßm∂e
);

181 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, &
phŸomëric
);

182 i‡(
numcﬁ‹s
 == 2) {

183 i‡(
Vîbo£
)

184 
	`Ârötf
(
°dîr
, "monochrome ");

185 
Cﬁ‹m≠
.
ty≥
 = 
RMT_NONE
;

186 
Cﬁ‹m≠
.
Àngth
 = 0;

187 
Cﬁ‹m≠
.
m≠
[0] = Cﬁ‹m≠.m≠[1] = Cﬁ‹m≠.m≠[2] = 
NULL
;

189 
phŸomëric
) {

190 
PHOTOMETRIC_MINISBLACK
:

191 i‡(
Vîbo£
)

192 
	`Ârötf
(
°dîr
, "%d gøyÀvñ†(mö=bœck), ", 
numcﬁ‹s
);

193 
M≠
 = (
u_ch¨
 *Ë
	`mÆloc
(
numcﬁ‹s
 * (u_char));

194 
i
 = 0; i < 
numcﬁ‹s
; i++)

195 
M≠
[
i
] = (255 * iË/ 
numcﬁ‹s
;

196 
Cﬁ‹m≠
.
ty≥
 = 
RMT_EQUAL_RGB
;

197 
Cﬁ‹m≠
.
Àngth
 = 
numcﬁ‹s
;

198 
Cﬁ‹m≠
.
m≠
[0] = Cﬁ‹m≠.m≠[1] = Cﬁ‹m≠.m≠[2] = 
M≠
;

200 
PHOTOMETRIC_MINISWHITE
:

201 i‡(
Vîbo£
)

202 
	`Ârötf
(
°dîr
, "%d gøyÀvñ†(mö=whôe), ", 
numcﬁ‹s
);

203 
M≠
 = (
u_ch¨
 *Ë
	`mÆloc
(
numcﬁ‹s
 * (u_char));

204 
i
 = 0; i < 
numcﬁ‹s
; i++)

205 
M≠
[
i
] = 255 - ((255 * iË/ 
numcﬁ‹s
);

206 
Cﬁ‹m≠
.
ty≥
 = 
RMT_EQUAL_RGB
;

207 
Cﬁ‹m≠
.
Àngth
 = 
numcﬁ‹s
;

208 
Cﬁ‹m≠
.
m≠
[0] = Cﬁ‹m≠.m≠[1] = Cﬁ‹m≠.m≠[2] = 
M≠
;

210 
PHOTOMETRIC_RGB
:

211 i‡(
Vîbo£
)

212 
	`Ârötf
(
°dîr
, "truecolor ");

213 
Cﬁ‹m≠
.
ty≥
 = 
RMT_NONE
;

214 
Cﬁ‹m≠
.
Àngth
 = 0;

215 
Cﬁ‹m≠
.
m≠
[0] = Cﬁ‹m≠.m≠[1] = Cﬁ‹m≠.m≠[2] = 
NULL
;

217 
PHOTOMETRIC_PALETTE
:

218 i‡(
Vîbo£
)

219 
	`Ârötf
(
°dîr
, "colormapped ");

220 
Cﬁ‹m≠
.
ty≥
 = 
RMT_EQUAL_RGB
;

221 
Cﬁ‹m≠
.
Àngth
 = 
numcﬁ‹s
;

222 
	`mem£t
(
ªd
, 0, (red));

223 
	`mem£t
(
gªí
, 0, (green));

224 
	`mem£t
(
blue
, 0, (blue));

225 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COLORMAP
,

226 &
ªdcﬁ‹m≠
, &
gªícﬁ‹m≠
, &
bluecﬁ‹m≠
);

227 
i
 = 0; i < 
numcﬁ‹s
; i++) {

228 
ªd
[
i
] = (
u_ch¨
Ë
	`CVT
(
ªdcﬁ‹m≠
[i]);

229 
gªí
[
i
] = (
u_ch¨
Ë
	`CVT
(
gªícﬁ‹m≠
[i]);

230 
blue
[
i
] = (
u_ch¨
Ë
	`CVT
(
bluecﬁ‹m≠
[i]);

232 
Cﬁ‹m≠
.
m≠
[0] = 
ªd
;

233 
Cﬁ‹m≠
.
m≠
[1] = 
gªí
;

234 
Cﬁ‹m≠
.
m≠
[2] = 
blue
;

236 
PHOTOMETRIC_MASK
:

237 
	`îr‹
("%s: Don't know howÅo handle PHOTOMETRIC_MASK\n");

239 
PHOTOMETRIC_DEPTH
:

240 
	`îr‹
("%s: Don't know howÅo handle PHOTOMETRIC_DEPTH\n");

243 
	`îr‹
("%s: unknow¿phŸomëri¯(cm≠): %d\n", 
phŸomëric
);

247 
buf
 = (
u_ch¨
 *Ë
	`mÆloc
(
	`TIFFSˇ∆öeSize
(
tif
));

248 i‡(
buf
 =
NULL
)

249 
	`îr‹
("%s: c™'àÆloˇã mem‹y f‹ sˇ∆öêbuf„r...\n", 
NULL
);

251 
row
 = 0;Ñow < 
height
;Ñow++) {

252 i‡(
	`TIFFRódSˇ∆öe
(
tif
, 
buf
, 
row
, 0) < 0)

253 
	`îr‹
("%s: bad d©®ªad o¿löe: %d\n", 
row
);

254 
öp
 = 
buf
;

255 
ouç
 = (
u_ch¨
 *Ë
	`m¥d_addr
(
	`m¥_d
(
pix
), 0, 
row
);

256 
phŸomëric
) {

257 
PHOTOMETRIC_RGB
:

258 i‡(
ßm∂e•îpixñ
 == 4)

259 
cﬁ
 = 0; cﬁ < 
width
; col++) {

260 *
ouç
++ = *
öp
++;

261 *
ouç
++ = *
öp
++;

262 *
ouç
++ = *
öp
++;

263 
öp
++;

266 
cﬁ
 = 0; cﬁ < 
width
; col++) {

267 *
ouç
++ = *
öp
++;

268 *
ouç
++ = *
öp
++;

269 *
ouç
++ = *
öp
++;

272 
PHOTOMETRIC_MINISWHITE
:

273 
PHOTOMETRIC_MINISBLACK
:

274 
bô•îßm∂e
) {

276 
cﬁ
 = 0; cﬁ < ((
width
 + 7) / 8); col++)

277 *
ouç
++ = *
öp
++;

280 
cﬁ
 = 0; cﬁ < ((
width
 + 3) / 4); col++) {

281 *
ouç
++ = (*
öp
 >> 6) & 3;

282 *
ouç
++ = (*
öp
 >> 4) & 3;

283 *
ouç
++ = (*
öp
 >> 2) & 3;

284 *
ouç
++ = *
öp
++ & 3;

288 
cﬁ
 = 0; cﬁ < 
width
 / 2; col++) {

289 *
ouç
++ = *
öp
 >> 4;

290 *
ouç
++ = *
öp
++ & 0xf;

294 
cﬁ
 = 0; cﬁ < 
width
; col++)

295 *
ouç
++ = *
öp
++;

298 
	`îr‹
("%s: bad bôs/ßm∂e: %d\n", 
bô•îßm∂e
);

301 
PHOTOMETRIC_PALETTE
:

302 
	`mem˝y
(
ouç
, 
öp
, 
width
);

305 
	`îr‹
("%s: unknow¿phŸomëri¯(wrôe): %d\n", 
phŸomëric
);

309 
	`‰ì
((*Ë
buf
);

311 i‡(
Vîbo£
)

312 
	`Ârötf
(
°dîr
, "done.\n");

314 i‡(
outf
 =
NULL
 || 
	`°rcmp
(outf, "Standard Output") == 0) {

315 
outf
 = "Standard Output";

316 
Â
 = 
°dout
;

318 i‡(!(
Â
 = 
	`f›í
(
outf
, "w")))

319 
	`îr‹
("%s: %†couldn'àbê›íed f‹ wrôög.\n", 
outf
);

322 i‡(
Vîbo£
)

323 
	`Ârötf
(
°dîr
, "WrôögÑa°îfûêö %s...", 
outf
);

325 i‡(
	`¥_dump
(
pix
, 
Â
, &
Cﬁ‹m≠
, 
RT_BYTE_ENCODED
, 0Ë=
PIX_ERR
)

326 
	`îr‹
("%s:Éº‹ wrôög Su¿Ra°îfûe: %s\n", 
outf
);

328 i‡(
Vîbo£
)

329 
	`Ârötf
(
°dîr
, "done.\n");

331 
	`¥_de°roy
(
pix
);

333 i‡(
Â
 !
°dout
)

334 
	`f˛o£
(
Â
);

336 
	`exô
(0);

337 
	}
}

	@contrib/stream/tiffstream.cpp

3 
	~"tiff°ªam.h
"

5 c⁄° * 
	gTiffSåóm
::
m_«me
 = "TiffStream";

7 
	gTiffSåóm
::
	$TiffSåóm
()

9 
m_tif
 = 
NULL
;

12 
m_öSåóm
 = 
NULL
;

13 
m_outSåóm
 = 
NULL
;

14 
m_ioSåóm
 = 
NULL
;

16 
m_°ªamLígth
 = 0;

18 
m_this
 = 
ªöãΩªt_ˇ°
<
th™dÀ_t
>(
this
);

19 
	}
};

21 
	gTiffSåóm
::~
	$TiffSåóm
()

23 if(
m_tif
 !
NULL
Ë
	`TIFFClo£
(m_tif);

24 
	}
}

26 
TIFF
*

27 
	gTiffSåóm
::
	$makeFûeSåóm
(
i°ªam
* 
°r
)

29 
m_öSåóm
 = 
°r
;

30 
m_outSåóm
 = 
NULL
;

31 
m_ioSåóm
 = 
NULL
;

32 
m_°ªamLígth
 = 
	`gëSize
(
m_this
);

34 
m_tif
 = 
	`TIFFClõ¡O≥n
(
m_«me
,

36 
m_this
,

37 
ªad
,

38 
wrôe
,

39 
£ek
,

40 
˛o£
,

41 
size
,

42 
m≠
,

43 
unm≠
);

44  
m_tif
;

45 
	}
}

47 
TIFF
*

48 
	gTiffSåóm
::
	$makeFûeSåóm
(
o°ªam
* 
°r
)

50 
m_öSåóm
 = 
NULL
;

51 
m_outSåóm
 = 
°r
;

52 
m_ioSåóm
 = 
NULL
;

53 
m_°ªamLígth
 = 
	`gëSize
(
m_this
);

55 
m_tif
 = 
	`TIFFClõ¡O≥n
(
m_«me
,

57 
m_this
,

58 
ªad
,

59 
wrôe
,

60 
£ek
,

61 
˛o£
,

62 
size
,

63 
m≠
,

64 
unm≠
);

65  
m_tif
;

66 
	}
}

68 
TIFF
*

69 
	gTiffSåóm
::
	$makeFûeSåóm
(
io°ªam
* 
°r
)

71 
m_öSåóm
 = 
NULL
;

72 
m_outSåóm
 = 
NULL
;

73 
m_ioSåóm
 = 
°r
;

74 
m_°ªamLígth
 = 
	`gëSize
(
m_this
);

76 
m_tif
 = 
	`TIFFClõ¡O≥n
(
m_«me
,

78 
m_this
,

79 
ªad
,

80 
wrôe
,

81 
£ek
,

82 
˛o£
,

83 
size
,

84 
m≠
,

85 
unm≠
);

86  
m_tif
;

87 
	}
}

89 
tsize_t


90 
	gTiffSåóm
::
	$ªad
(
th™dÀ_t
 
fd
, 
td©a_t
 
buf
, 
tsize_t
 
size
)

92 
i°ªam
* 
i°r
;

93 
TiffSåóm
* 
ts
 = 
ªöãΩªt_ˇ°
<TiffSåóm*>(
fd
);

94 if(
ts
->
m_öSåóm
 !
NULL
) {

95 
i°r
 = 
ts
->
m_öSåóm
;

96 } if(
ts
->
m_ioSåóm
 !
NULL
) {

97 
i°r
 = 
ts
->
m_ioSåóm
;

100 
ªmaö
 = 
ts
->
m_°ªamLígth
 -Ås->
	`ãŒ
(
fd
);

101 
a˘uÆ
 = 
ªmaö
 < 
size
 ?Ñemain : size;

102 
i°r
->
	`ªad
(
ªöãΩªt_ˇ°
<*>(
buf
), 
a˘uÆ
);

103  
i°r
->
	`gcou¡
();

104 
	}
}

106 
tsize_t


107 
	gTiffSåóm
::
	$wrôe
(
th™dÀ_t
 
fd
, 
td©a_t
 
buf
, 
tsize_t
 
size
)

109 
TiffSåóm
* 
ts
 = 
ªöãΩªt_ˇ°
<TiffSåóm*>(
fd
);

110 
o°ªam
* 
o°r
;

111 if(
ts
->
m_outSåóm
 !
NULL
) {

112 
o°r
 = 
ts
->
m_outSåóm
;

113 } if(
ts
->
m_ioSåóm
 !
NULL
) {

114 
o°r
 = 
ts
->
m_ioSåóm
;

117 
°ªampos
 
°¨t
 = 
o°r
->
	`ãŒp
();

118 
o°r
->
	`wrôe
(
ªöãΩªt_ˇ°
<c⁄° *>(
buf
), 
size
);

119  
o°r
->
	`ãŒp
(Ë- 
°¨t
;

120 
	}
}

122 
toff_t


123 
	gTiffSåóm
::
	$£ek
(
th™dÀ_t
 
fd
, 
toff_t
 
off£t
, 
‹igö
)

125 
TiffSåóm
* 
ts
 = 
ªöãΩªt_ˇ°
<TiffSåóm*>(
fd
);

126 if(
ts
->
	`£ekI¡
(
fd
, 
off£t
, 
‹igö
Ë=
åue
)  offset;

128 
	}
}

131 
	gTiffSåóm
::
	$˛o£
(
th™dÀ_t
 
fd
)

133 
TiffSåóm
* 
ts
 = 
ªöãΩªt_ˇ°
<TiffSåóm*>(
fd
);

134 if(
ts
->
m_öSåóm
 !
NULL
) {

135 
ts
->
m_öSåóm
 = 
NULL
;

137 } if(
ts
->
m_outSåóm
 !
NULL
) {

138 
ts
->
m_outSåóm
 = 
NULL
;

140 } if(
ts
->
m_ioSåóm
 !
NULL
) {

141 
ts
->
m_ioSåóm
 = 
NULL
;

145 
	}
}

147 
toff_t


148 
	gTiffSåóm
::
	$size
(
th™dÀ_t
 
fd
)

150 
TiffSåóm
* 
ts
 = 
ªöãΩªt_ˇ°
<TiffSåóm*>(
fd
);

151  
ts
->
	`gëSize
(
fd
);

152 
	}
}

155 
	gTiffSåóm
::
	$m≠
(
th™dÀ_t
 
fd
, 
td©a_t
* 
pha£
, 
toff_t
* 
psize
)

158 
	}
}

161 
	gTiffSåóm
::
	$unm≠
(
th™dÀ_t
 
fd
, 
td©a_t
 
ba£
, 
tsize_t
 
size
)

163 
	}
}

166 
	gTiffSåóm
::
	$gëSize
(
th™dÀ_t
 
fd
)

168 if(!
	`isO≥n
(
fd
))  0;

170 
pos
 = 
	`ãŒ
(
fd
);

171 
	`£ekI¡
(
fd
, 0, 
íd
);

172 
size
 = 
	`ãŒ
(
fd
);

173 
	`£ekI¡
(
fd
, 
pos
, 
beg
);

175  
size
;

176 
	}
}

179 
	gTiffSåóm
::
	$ãŒ
(
th™dÀ_t
 
fd
)

181 
TiffSåóm
* 
ts
 = 
ªöãΩªt_ˇ°
<TiffSåóm*>(
fd
);

182 if(
ts
->
m_öSåóm
 !
NULL
) {

183  
ts
->
m_öSåóm
->
	`ãŒg
();

184 } if(
ts
->
m_outSåóm
 !
NULL
) {

185  
ts
->
m_outSåóm
->
	`ãŒp
();

186 } if(
ts
->
m_ioSåóm
 !
NULL
) {

187  
ts
->
m_ioSåóm
->
	`ãŒg
();

190 
	}
}

192 
boﬁ


193 
	gTiffSåóm
::
	$£ekI¡
(
th™dÀ_t
 
fd
, 
off£t
, 
‹igö
)

195 if(!
	`isO≥n
(
fd
)Ë 
Ál£
;

197 
ios
::
£ek_dú
 
‹g
;

198 
‹igö
) {

199 
beg
:

200 
‹g
 = 
ios
::
beg
;

202 
cur
:

203 
‹g
 = 
ios
::
cur
;

205 
íd
:

206 
‹g
 = 
ios
::
íd
;

210 
TiffSåóm
* 
ts
 = 
ªöãΩªt_ˇ°
<TiffSåóm*>(
fd
);

211 if(
ts
->
m_öSåóm
 !
NULL
) {

212 
ts
->
m_öSåóm
->
	`£ekg
(
off£t
, 
‹g
);

213  
åue
;

214 } if(
ts
->
m_outSåóm
 !
NULL
) {

215 
ts
->
m_outSåóm
->
	`£ekp
(
off£t
, 
‹g
);

216  
åue
;

217 } if(
ts
->
m_ioSåóm
 !
NULL
) {

218 
ts
->
m_ioSåóm
->
	`£ekg
(
off£t
, 
‹g
);

219 
ts
->
m_ioSåóm
->
	`£ekp
(
off£t
, 
‹g
);

220  
åue
;

222  
Ál£
;

223 
	}
}

225 
boﬁ


226 
	gTiffSåóm
::
	$isO≥n
(
th™dÀ_t
 
fd
)

228 
TiffSåóm
* 
ts
 = 
ªöãΩªt_ˇ°
<TiffSåóm*>(
fd
);

229  (
ts
->
m_öSåóm
 !
NULL
 ||

230 
ts
->
m_outSåóm
 !
NULL
 ||

231 
ts
->
m_ioSåóm
 !
NULL
);

232 
	}
}

	@contrib/stream/tiffstream.h

3 #i‚de‡
_TIFF_STREAM_H_


4 
	#_TIFF_STREAM_H_


	)

6 
	~<io°ªam.h
>

8 
	~"tiffio.h
"

10 ˛as†
	cTiffSåóm
 {

12 
	mpublic
:

14 
TiffSåóm
();

15 ~
TiffSåóm
();

17 
	mpublic
:

18 
	eSìkDú
 {

19 
beg
,

20 
	mcur
,

21 
	míd
,

24 
	gpublic
:

26 
TIFF
* 
makeFûeSåóm
(
io°ªam
* 
°r
);

27 
TIFF
* 
makeFûeSåóm
(
i°ªam
* 
°r
);

28 
TIFF
* 
makeFûeSåóm
(
o°ªam
* 
°r
);

30 
	gpublic
:

32 
tsize_t
 
ªad
(
th™dÀ_t
 
fd
, 
td©a_t
 
buf
,Åsize_à
size
);

33 
tsize_t
 
wrôe
(
th™dÀ_t
 
fd
, 
td©a_t
 
buf
,Åsize_à
size
);

34 
toff_t
 
£ek
(
th™dÀ_t
 
fd
,Åoff_à
off£t
, 
‹igö
);

35 
toff_t
 
size
(
th™dÀ_t
 
fd
);

36 
˛o£
(
th™dÀ_t
 
fd
);

37 
m≠
(
th™dÀ_t
 
fd
, 
td©a_t
* 
pha£
, 
toff_t
* 
psize
);

38 
unm≠
(
th™dÀ_t
 
fd
, 
td©a_t
 
ba£
, 
tsize_t
 
size
);

40 
	gpublic
:

42 
TIFF
* 
	$gëTiffH™dÀ
(Ëc⁄° {  
m_tif
; 
	}
}

43 
	$gëSåómLígth
(Ë{  
m_°ªamLígth
; 
	}
}

45 
	g¥iv©e
:

47 
gëSize
(
th™dÀ_t
 
fd
);

48 
ãŒ
(
th™dÀ_t
 
fd
);

49 
boﬁ
 
£ekI¡
(
th™dÀ_t
 
fd
, 
off£t
, 
‹igö
);

50 
boﬁ
 
isO≥n
(
th™dÀ_t
 
fd
);

52 
	g¥iv©e
:

53 
th™dÀ_t
 
m_this
;

54 
TIFF
* 
	gm_tif
;

55 c⁄° * 
	gm_«me
;

56 
i°ªam
* 
	gm_öSåóm
;

57 
o°ªam
* 
	gm_outSåóm
;

58 
io°ªam
* 
	gm_ioSåóm
;

59 
	gm_°ªamLígth
;

	@contrib/tags/listtif.c

5 
	~"xtiffio.h
"

6 
	~<°dlib.h
>

8 
	$maö
(
¨gc
,*
¨gv
[])

10 *
‚ame
="newtif.tif";

11 
Êags
;

13 
TIFF
 *
tif
=(TIFF*)0;

15 i‡(
¨gc
>1Ë
‚ame
=
¨gv
[1];

17 
tif
=
	`XTIFFO≥n
(
‚ame
,"r");

18 i‡(!
tif
Ë
Áûuª
;

21 
Êags
 = 
TIFFPRINT_MYMULTIDOUBLES
;

23 
	`TIFFPrötDúe˘‹y
(
tif
,
°dout
,
Êags
);

24 
	`XTIFFClo£
(
tif
);

25 
	`exô
 (0);

27 
Áûuª
:

28 
	`¥ötf
("failure inÜisttif\n");

29 i‡(
tif
Ë
	`XTIFFClo£
(tif);

30 
	`exô
 (-1);

31 
	}
}

	@contrib/tags/maketif.c

6 
	~<°dlib.h
>

7 
	~"xtiffio.h
"

10 
SëUpTIFFDúe˘‹y
(
TIFF
 *
tif
);

11 
WrôeImage
(
TIFF
 *
tif
);

13 
	#WIDTH
 20

	)

14 
	#HEIGHT
 20

	)

16 
	$maö
()

18 
TIFF
 *
tif
=(TIFF*)0;

20 
tif
=
	`XTIFFO≥n
("newtif.tif","w");

21 i‡(!
tif
Ë
Áûuª
;

23 
	`SëUpTIFFDúe˘‹y
(
tif
);

24 
	`WrôeImage
(
tif
);

26 
	`XTIFFClo£
(
tif
);

27 
	`exô
 (0);

29 
Áûuª
:

30 
	`¥ötf
("failure in maketif\n");

31 i‡(
tif
Ë
	`XTIFFClo£
(tif);

32 
	`exô
 (-1);

33 
	}
}

36 
	$SëUpTIFFDúe˘‹y
(
TIFF
 *
tif
)

38 
mymu…i
[6]={0.0,1.0,2.0, 3.1415926, 5.0,1.0};

39 
uöt32
 
mysögÀ
=3456;

40 *
ascii
="This file wasÖroduced by Steven Spielberg. NOT";

42 
	`TIFFSëFõld
(
tif
,
TIFFTAG_IMAGEWIDTH
,
WIDTH
);

43 
	`TIFFSëFõld
(
tif
,
TIFFTAG_IMAGELENGTH
,
HEIGHT
);

44 
	`TIFFSëFõld
(
tif
,
TIFFTAG_COMPRESSION
,
COMPRESSION_NONE
);

45 
	`TIFFSëFõld
(
tif
,
TIFFTAG_PHOTOMETRIC
,
PHOTOMETRIC_MINISBLACK
);

46 
	`TIFFSëFõld
(
tif
,
TIFFTAG_PLANARCONFIG
,
PLANARCONFIG_CONTIG
);

47 
	`TIFFSëFõld
(
tif
,
TIFFTAG_BITSPERSAMPLE
,8);

48 
	`TIFFSëFõld
(
tif
,
TIFFTAG_ROWSPERSTRIP
,20);

51 
	`TIFFSëFõld
(
tif
,
TIFFTAG_EXAMPLE_MULTI
,6,
mymu…i
);

52 
	`TIFFSëFõld
(
tif
,
TIFFTAG_EXAMPLE_SINGLE
,
mysögÀ
);

53 
	`TIFFSëFõld
(
tif
,
TIFFTAG_EXAMPLE_ASCII
,
ascii
);

54 
	}
}

57 
	$WrôeImage
(
TIFF
 *
tif
)

59 
i
;

60 
buf„r
[
WIDTH
];

62 
	`mem£t
(
buf„r
,0,(buffer));

63 
i
=0;i<
HEIGHT
;i++)

64 i‡(!
	`TIFFWrôeSˇ∆öe
(
tif
, 
buf„r
, 
i
, 0))

65 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "WriteImage","failure in WriteScanline\n");

66 
	}
}

	@contrib/tags/xtif_dir.c

14 
	~"xtiffi›.h
"

15 
	~<°dio.h
>

27 c⁄° 
TIFFFõldInfo
 
	gxtiffFõldInfo
[] = {

30 { 
TIFFTAG_EXAMPLE_MULTI
, -1,-1, 
TIFF_DOUBLE
, 
FIELD_EXAMPLE_MULTI
,

31 
TRUE
, TRUE, "MyMultivaluedTag" },

32 { 
TIFFTAG_EXAMPLE_SINGLE
, 1, 1, 
TIFF_LONG
, 
FIELD_EXAMPLE_SINGLE
,

33 
TRUE
, 
FALSE
, "MySingleLongTag" },

34 { 
TIFFTAG_EXAMPLE_ASCII
, -1,-1, 
TIFF_ASCII
, 
FIELD_EXAMPLE_ASCII
,

35 
TRUE
, 
FALSE
, "MyAsciiTag" },

37 
	#N
(
a
Ë( (aË/  (a[0]))

	)

41 
	$_XTIFFPrötDúe˘‹y
(
TIFF
* 
tif
, 
FILE
* 
fd
, 
Êags
)

43 
xtiff
 *
xt
 = 
	`XTIFFDIR
(
tif
);

44 
XTIFFDúe˘‹y
 *
xd
 = &
xt
->
xtif_dú
;

45 
i
,
num
;

48 i‡(
	`PARENT
(
xt
,
¥ötdú
))

49 (
	`PARENT
(
xt
,
¥ötdú
))(
tif
,
fd
,
Êags
);

55 
	`Ârötf
(
fd
,"--My Example Tags--\n");

61 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_EXAMPLE_MULTI
))

63 
	`Ârötf
(
fd
, " My Multi-Valued Doubles:");

64 i‡(
Êags
 & 
TIFFPRINT_MYMULTIDOUBLES
)

66 *
vÆue
 = 
xd
->
xd_exam∂e_mu…i
;

68 
num
 = 
xd
->
xd_num_mu…i
;

69 
	`Ârötf
(
fd
,"(");

70 
i
=0;i<
num
;i++Ë
	`Ârötf
(
fd
, " %lg", *
vÆue
++);

71 
	`Ârötf
(
fd
,")\n");

73 
	`Ârötf
(
fd
, "(present)\n");

76 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_EXAMPLE_SINGLE
))

78 
	`Ârötf
(
fd
, " My SögÀ L⁄g Tag: %lu\n", 
xd
->
xd_exam∂e_sögÀ
);

81 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_EXAMPLE_ASCII
))

83 
	`_TIFF¥ötAsciiTag
(
fd
,"My ASCII Tag",

84 
xd
->
xd_exam∂e_ascii
);

86 
	}
}

89 
	$_XTIFFVSëFõld
(
TIFF
* 
tif
, 
âag_t
 
èg
, 
va_li°
 
≠
)

91 
xtiff
 *
xt
 = 
	`XTIFFDIR
(
tif
);

92 
XTIFFDúe˘‹y
* 
xd
 = &
xt
->
xtif_dú
;

93 
°©us
 = 1;

94 
uöt32
 
v32
=0;

95 
i
=0, 
v
=0;

96 
va_li°
 
≠1
 = 
≠
;

100 
èg
) {

105 
TIFFTAG_EXAMPLE_MULTI
:

107 
xd
->
xd_num_mu…i
 = (
uöt16
Ë
	`va_¨g
(
≠
, );

108 
	`_TIFF£tDoubÀAºay
(&
xd
->
xd_exam∂e_mu…i
, 
	`va_¨g
(
≠
, *),

109 (Ë
xd
->
xd_num_mu…i
);

111 
TIFFTAG_EXAMPLE_SINGLE
:

112 
xd
->
xd_exam∂e_sögÀ
 = 
	`va_¨g
(
≠
, 
uöt32
);

114 
TIFFTAG_EXAMPLE_ASCII
:

115 
	`_TIFF£tSåög
(&
xd
->
xd_exam∂e_ascii
, 
	`va_¨g
(
≠
, *));

119  (
	`PARENT
(
xt
,
v£tfõld
))(
tif
,
èg
,
≠
);

122 i‡(
°©us
) {

129 i‡(!(
xt
->
xtif_Êags
 & 
XTIFFP_PRINT
))

131 
	`PARENT
(
xt
,
¥ötdú
Ë
	`TIFFMEMBER
(
tif
,printdir);

132 
	`TIFFMEMBER
(
tif
,
¥ötdú
Ë
_XTIFFPrötDúe˘‹y
;

133 
xt
->
xtif_Êags
 |
XTIFFP_PRINT
;

135 
	`TIFFSëFõldBô
(
tif
, 
	`_TIFFFõldWôhTag
—if, 
èg
)->
fõld_bô
);

136 
tif
->
tif_Êags
 |
TIFF_DIRTYDIRECT
;

138 
	`va_íd
(
≠
);

139  (
°©us
);

140 
badvÆue
:

141 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "%d: Bad vÆuêf‹ \"%s\"", 
v
,

142 
	`_TIFFFõldWôhTag
(
tif
, 
èg
)->
fõld_«me
);

143 
	`va_íd
(
≠
);

145 
badvÆue32
:

146 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "%ld: Bad vÆuêf‹ \"%s\"", 
v32
,

147 
	`_TIFFFõldWôhTag
(
tif
, 
èg
)->
fõld_«me
);

148 
	`va_íd
(
≠
);

150 
	}
}

154 
	$_XTIFFVGëFõld
(
TIFF
* 
tif
, 
âag_t
 
èg
, 
va_li°
 
≠
)

156 
xtiff
 *
xt
 = 
	`XTIFFDIR
(
tif
);

157 
XTIFFDúe˘‹y
* 
xd
 = &
xt
->
xtif_dú
;

159 
èg
) {

164 
TIFFTAG_EXAMPLE_MULTI
:

165 *
	`va_¨g
(
≠
, 
uöt16
*Ë
xd
->
xd_num_mu…i
;

166 *
	`va_¨g
(
≠
, **Ë
xd
->
xd_exam∂e_mu…i
;

168 
TIFFTAG_EXAMPLE_ASCII
:

169 *
	`va_¨g
(
≠
, **Ë
xd
->
xd_exam∂e_ascii
;

171 
TIFFTAG_EXAMPLE_SINGLE
:

172 *
	`va_¨g
(
≠
, 
uöt32
*Ë
xd
->
xd_exam∂e_sögÀ
;

176  (
	`PARENT
(
xt
,
vgëfõld
))(
tif
,
èg
,
≠
);

180 
	}
}

182 
	#CÀ™upFõld
(
membî
) { \

183 i‡(
xd
->
membî
) { \

184 
	`_TIFF‰ì
(
xd
->
membî
); \

185 
xd
->
membî
 = 0; \

187 }

	)

192 
	$_XTIFFFªeDúe˘‹y
(
xtiff
* 
xt
)

194 
XTIFFDúe˘‹y
* 
xd
 = &
xt
->
xtif_dú
;

203 
	`CÀ™upFõld
(
xd_exam∂e_mu…i
);

204 
	`CÀ™upFõld
(
xd_exam∂e_ascii
);

206 
	}
}

207 #unde‡
CÀ™upFõld


209 
	$_XTIFFLoˇlDeÁu…Dúe˘‹y
(
TIFF
 *
tif
)

211 
xtiff
 *
xt
 = 
	`XTIFFDIR
(
tif
);

212 
XTIFFDúe˘‹y
* 
xd
 = &
xt
->
xtif_dú
;

215 
	`_TIFFMîgeFõldInfo
(
tif
, 
xtiffFõldInfo
, 
	`N
(xtiffFieldInfo));

222 
	`_XTIFFFªeDúe˘‹y
(
xt
);

223 
	`_TIFFmem£t
(
xt
,0,(
xtiff
));

227 
	`PARENT
(
xt
,
v£tfõld
Ë
	`TIFFMEMBER
(
tif
,vsetfield);

228 
	`TIFFMEMBER
(
tif
,
v£tfõld
Ë
_XTIFFVSëFõld
;

229 
	`PARENT
(
xt
,
vgëfõld
Ë
	`TIFFMEMBER
(
tif
,vgetfield);

230 
	`TIFFMEMBER
(
tif
,
vgëfõld
Ë
_XTIFFVGëFõld
;

236 
xd
->
xd_exam∂e_sögÀ
 = 234;

237 
	}
}

245 
TIFFExãndProc
 
	g_P¨ítExãndî
;

254 
	$_XTIFFDeÁu…Dúe˘‹y
(
TIFF
 *
tif
)

256 
xtiff
 *
xt
;

259 i‡(!(
tif
->
tif_Êags
 & 
XTIFF_INITIALIZED
))

261 
xt
 = 
	`_TIFFmÆloc
((
xtiff
));

262 i‡(!
xt
)

267 
	`_TIFFmem£t
(
xt
,0,(
xtiff
));

271 
	`TIFFMEMBER
(
tif
,
˛õ¡dú
Ë(
tid©a_t
)
xt
;

272 
tif
->
tif_Êags
 |
XTIFF_INITIALIZED
;

276 
	`_XTIFFLoˇlDeÁu…Dúe˘‹y
(
tif
);

283 i‡(
_P¨ítExãndî
)

284 (*
_P¨ítExãndî
)(
tif
);

286 
	}
}

294 
	$_XTIFFInôülize
()

296 
fú°_time
=1;

298 i‡(! 
fú°_time
) ;

299 
fú°_time
 = 0;

302 
_P¨ítExãndî
 = 
	`TIFFSëTagExãndî
(
_XTIFFDeÁu…Dúe˘‹y
);

303 
	}
}

309 
TIFF
*

310 
	$XTIFFO≥n
(c⁄° * 
«me
, c⁄° * 
mode
)

313 
	`_XTIFFInôülize
();

317  
	`TIFFO≥n
(
«me
, 
mode
);

318 
	}
}

320 
TIFF
*

321 
	$XTIFFFdO≥n
(
fd
, c⁄° * 
«me
, c⁄° * 
mode
)

324 
	`_XTIFFInôülize
();

328  
	`TIFFFdO≥n
(
fd
, 
«me
, 
mode
);

329 
	}
}

333 
	$XTIFFClo£
(
TIFF
 *
tif
)

335 
xtiff
 *
xt
 = 
	`XTIFFDIR
(
tif
);

338 
	`TIFFClo£
(
tif
);

341 
	`_XTIFFFªeDúe˘‹y
(
xt
);

342 
	`_TIFF‰ì
(
xt
);

343 
	}
}

	@contrib/tags/xtiffio.h

12 #i‚de‡
__xtiffio_h


13 
	#__xtiffio_h


	)

15 
	~"tiffio.h
"

22 
	#TIFFTAG_EXAMPLE_MULTI
 61234

	)

23 
	#TIFFTAG_EXAMPLE_SINGLE
 61235

	)

24 
	#TIFFTAG_EXAMPLE_ASCII
 61236

	)

33 
	#TIFFPRINT_MYMULTIDOUBLES
 0x80000000

	)

39 #i‡
deföed
(
__˝lu•lus
)

43 
TIFF
* 
XTIFFO≥n
(c⁄° * 
«me
, c⁄° * 
mode
);

44 
TIFF
* 
XTIFFFdO≥n
(
fd
, c⁄° * 
«me
, c⁄° * 
mode
);

45 
XTIFFClo£
(
TIFF
 *
tif
);

47 #i‡
deföed
(
__˝lu•lus
)

	@contrib/tags/xtiffiop.h

13 #i‚de‡
__xtiffi›_h


14 
	#__xtiffi›_h


	)

16 
	~"tiffi›.h
"

17 
	~"xtiffio.h
"

24 
	#NUM_XFIELD
 3

	)

25 
	#XFIELD_BASE
 (
FIELD_LAST
-
NUM_XFIELD
)

	)

28 
	#FIELD_EXAMPLE_MULTI
 (
XFIELD_BASE
+0)

	)

29 
	#FIELD_EXAMPLE_SINGLE
 (
XFIELD_BASE
+1)

	)

30 
	#FIELD_EXAMPLE_ASCII
 (
XFIELD_BASE
+2)

	)

34 
	sXTIFFDúe˘‹y
 {

35 
uöt16
 
	mxd_num_mu…i
;

36 * 
	mxd_exam∂e_mu…i
;

37 
uöt32
 
	mxd_exam∂e_sögÀ
;

38 * 
	mxd_exam∂e_ascii
;

40 
XTIFFDúe˘‹y
 
	tXTIFFDúe˘‹y
;

46 
	sxtiff
 {

47 
TIFF
 *
	mxtif_tif
;

48 
uöt32
 
	mxtif_Êags
;

49 
	#XTIFFP_PRINT
 0x00000001

	)

50 
XTIFFDúe˘‹y
 
	mxtif_dú
;

51 
TIFFVSëMëhod
 
	mxtif_v£tfõld
;

52 
TIFFVGëMëhod
 
	mxtif_vgëfõld
;

53 
TIFFPrötMëhod
 
	mxtif_¥ötdú
;

55 
xtiff
 
	txtiff
;

58 
	#PARENT
(
xt
,
pmembî
Ë((xt)->
xtif_
 ##Ömembî)

	)

59 
	#TIFFMEMBER
(
tf
,
pmembî
Ë(—f)->
tif_
 ##Ömembî)

	)

60 
	#XTIFFDIR
(
tif
Ë((
xtiff
 *)
	`TIFFMEMBER
—if,
˛õ¡dú
))

	)

63 
	#XTIFF_INITIALIZED
 0x80000000

	)

	@contrib/win_dib/Tiffile.cpp

1 
	~"StdAfx.h
"

4 
	~<wödows.h
>

5 
	~<wödowsx.h
>

6 
	~<commdlg.h
>

7 
	~<°dlib.h
>

8 
	~"diblib.h
"

29 
	~"TiffLib/tiff.h
"

30 
	~"TiffLib/tiffio.h
"

31 
	~<as£π.h
>

32 
	~<°dio.h
>

36 
	sTIFFDibImage
 {

37 
TIFFRGBAImage
 
	mtif
;

38 
	mdibö°ÆÀd
;

42 
HANDLE
 
LﬂdTIFFöDIB
(
LPCTSTR
 
ÕFûeName
);

43 
HANDLE
 
TIFFRGBA2DIB
(
TIFFDibImage
* 
dib
, 
uöt32
* 
ø°î
) ;

46 
	$MyW¨nögH™dÀr
(c⁄° * 
moduÀ
, c⁄° * 
fmt
, 
va_li°
 
≠
)

50 
	}
}

53 
	$MyEº‹H™dÀr
(c⁄° * 
moduÀ
, c⁄° * 
fmt
, 
va_li°
 
≠
)

56 
	}
}

60 
	$ChkTIFF
 ( 
LPCTSTR
 
ÕszP©h
 )

62 
πn
 = 0;

64 
TIFFEº‹H™dÀr
 
eh
;

65 
TIFFEº‹H™dÀr
 
wh
;

67 
eh
 = 
	`TIFFSëEº‹H™dÀr
(
NULL
);

68 
wh
 = 
	`TIFFSëW¨nögH™dÀr
(
NULL
);

70 
TIFF
* 
tif
 = 
	`TIFFO≥n
(
ÕszP©h
, "r");

71 i‡(
tif
) {

72 
πn
 = 1;

73 
	`TIFFClo£
(
tif
);

76 
	`TIFFSëEº‹H™dÀr
(
eh
);

77 
	`TIFFSëW¨nögH™dÀr
(
wh
);

79  
πn
;

80 
	}
}

82 
DibIn°ÆlHack
(
TIFFDibImage
* 
img
) ;

84 
PVOID
 
	$RódTIFF
 ( 
LPCTSTR
 
ÕszP©h
 )

86 * 
pDIB
 = 0;

87 
TIFFEº‹H™dÀr
 
wh
;

89 
wh
 = 
	`TIFFSëW¨nögH™dÀr
(
MyW¨nögH™dÀr
);

91 i‡(
	`ChkTIFF
(
ÕszP©h
)) {

92 
TIFF
* 
tif
 = 
	`TIFFO≥n
(
ÕszP©h
, "r");

93 i‡(
tif
) {

94 
emsg
[1024];

96 i‡(
	`TIFFRGBAImageOK
(
tif
, 
emsg
)) {

97 
TIFFDibImage
 
img
;

98 
emsg
[1024];

100 i‡(
	`TIFFRGBAImageBegö
(&
img
.
tif
,Åif, -1, 
emsg
)) {

101 
size_t
 
≈ixñs
;

102 
uöt32
* 
ø°î
;

104 
	`DibIn°ÆlHack
(&
img
);

106 
≈ixñs
 = 
img
.
tif
.
width
 * img.tif.
height
;

107 
ø°î
 = (
uöt32
*Ë
	`_TIFFmÆloc
(
≈ixñs
 *  (uint32));

108 i‡(
ø°î
 !
NULL
) {

109 i‡(
	`TIFFRGBAImageGë
(&
img
.
tif
, 
ø°î
, img.tif.
width
, img.tif.
height
)) {

110 
pDIB
 = 
	`TIFFRGBA2DIB
(&
img
, 
ø°î
);

113 
	`_TIFF‰ì
(
ø°î
);

115 
	`TIFFRGBAImageEnd
(&
img
.
tif
);

118 
	`TRACE
("U«bÀÅÿ›í image(%s): %s\n", 
ÕszP©h
, 
emsg
 );

120 
	`TIFFClo£
(
tif
);

124 
	`TIFFSëW¨nögH™dÀr
(
wh
);

126  
pDIB
;

127 
	}
}

131 
HANDLE
 
	$TIFFRGBA2DIB
(
TIFFDibImage
* 
dib
, 
uöt32
* 
ø°î
)

133 * 
pDIB
 = 0;

134 
TIFFRGBAImage
* 
img
 = &
dib
->
tif
;

136 
uöt32
 
imageLígth
;

137 
uöt32
 
imageWidth
;

138 
uöt16
 
BôsPîSam∂e
;

139 
uöt16
 
Sam∂ePîPixñ
;

140 
uöt32
 
RowsPîSåù
;

141 
uöt16
 
PhŸomëricI¡î¥ë©i⁄
;

143 
BITMAPINFOHEADER
 
bi
;

144 
dwDIBSize
 ;

146 
	`TIFFGëFõld
(
img
->
tif
, 
TIFFTAG_IMAGEWIDTH
, &
imageWidth
);

147 
	`TIFFGëFõld
(
img
->
tif
, 
TIFFTAG_IMAGELENGTH
, &
imageLígth
);

148 
	`TIFFGëFõld
(
img
->
tif
, 
TIFFTAG_BITSPERSAMPLE
, &
BôsPîSam∂e
);

149 
	`TIFFGëFõld
(
img
->
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
RowsPîSåù
);

150 
	`TIFFGëFõld
(
img
->
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, &
Sam∂ePîPixñ
);

151 
	`TIFFGëFõld
(
img
->
tif
, 
TIFFTAG_PHOTOMETRIC
, &
PhŸomëricI¡î¥ë©i⁄
);

153 i‡–
BôsPîSam∂e
 =1 && 
Sam∂ePîPixñ
 =1 && 
dib
->
dibö°ÆÀd
 ) {

154 
bi
.
biSize
 = (
BITMAPINFOHEADER
);

155 
bi
.
biWidth
 = 
imageWidth
;

156 
bi
.
biHeight
 = 
imageLígth
;

157 
bi
.
biPœ√s
 = 1;

158 
bi
.
biBôCou¡
 = 1;

159 
bi
.
biCom¥essi⁄
 = 
BI_RGB
;

160 
bi
.
biSizeImage
 = 
	`WIDTHBYTES
(bi.
biWidth
 * bi.
biBôCou¡
Ë* bi.
biHeight
;

161 
bi
.
biXPñsPîMëî
 = 0;

162 
bi
.
biYPñsPîMëî
 = 0;

163 
bi
.
biCÃU£d
 = 0;

164 
bi
.
biCÃImp‹è¡
 = 0;

167 
dwDIBSize
 = 
	`GëDIBSize
–&
bi
 );

170 
pDIB
 = 
	`GlobÆAŒocPå
–
GHND
, 
dwDIBSize
 );

171 i‡(
pDIB
 == 0) {

172 –
NULL
 );

176 *((
BITMAPINFOHEADER
*)
pDIB
Ë
bi
;

179 
RGBQUAD
 *
pRgbq
 = (RGBQUAD *)((
LPSTR
)
pDIB
 + (
BITMAPINFOHEADER
));

181 
pRgbq
[0].
rgbRed
 = 0;

182 
pRgbq
[0].
rgbBlue
 = 0;

183 
pRgbq
[0].
rgbGªí
 = 0;

184 
pRgbq
[0].
rgbRe£rved
 = 0;

185 
pRgbq
[1].
rgbRed
 = 255;

186 
pRgbq
[1].
rgbBlue
 = 255;

187 
pRgbq
[1].
rgbGªí
 = 255;

188 
pRgbq
[1].
rgbRe£rved
 = 255;

197 
PVOID
 
pbiBôs
 = 
	`GëDIBImagePå
((
BITMAPINFOHEADER
*)
pDIB
);

199 
sizeW‹ds
 = 
bi
.
biSizeImage
/4;

200 
RGBQUAD
* 
rgbDib
 = (RGBQUAD*)
pbiBôs
;

201 * 
rgbTif
 = (*)
ø°î
;

203 
	`_TIFFmem˝y
(
pbiBôs
, 
ø°î
, 
bi
.
biSizeImage
);

207 i‡–
åue
 ) {

209 
bi
.
biSize
 = (
BITMAPINFOHEADER
);

210 
bi
.
biWidth
 = 
imageWidth
;

211 
bi
.
biHeight
 = 
imageLígth
;

212 
bi
.
biPœ√s
 = 1;

213 
bi
.
biBôCou¡
 = 32;

214 
bi
.
biCom¥essi⁄
 = 
BI_RGB
;

215 
bi
.
biSizeImage
 = 
	`WIDTHBYTES
(bi.
biWidth
 * bi.
biBôCou¡
Ë* bi.
biHeight
;

216 
bi
.
biXPñsPîMëî
 = 0;

217 
bi
.
biYPñsPîMëî
 = 0;

218 
bi
.
biCÃU£d
 = 0;

219 
bi
.
biCÃImp‹è¡
 = 0;

222 
dwDIBSize
 = 
	`GëDIBSize
–&
bi
 );

225 
pDIB
 = 
	`GlobÆAŒocPå
–
GHND
, 
dwDIBSize
 );

226 i‡(
pDIB
 == 0) {

227 –
NULL
 );

231 *((
BITMAPINFOHEADER
*)
pDIB
Ë
bi
;

234 
RGBQUAD
 *
pRgbq
 = (RGBQUAD *)((
LPSTR
)
pDIB
 + (
BITMAPINFOHEADER
));

243 
PVOID
 
pbiBôs
 = (
LPSTR
)
pRgbq
 + 3 * (
RGBQUAD
);

245 
sizeW‹ds
 = 
bi
.
biSizeImage
/4;

246 
RGBQUAD
* 
rgbDib
 = (RGBQUAD*)
pbiBôs
;

247 * 
rgbTif
 = (*)
ø°î
;

250  
i
 = 0 ; i < 
sizeW‹ds
 ; ++i )

252 
rgbDib
[
i
].
rgbRed
 = 
	`TIFFGëR
(
rgbTif
[i]);

253 
rgbDib
[
i
].
rgbBlue
 = 
	`TIFFGëB
(
rgbTif
[i]);

254 
rgbDib
[
i
].
rgbGªí
 = 
	`TIFFGëG
(
rgbTif
[i]);

255 
rgbDib
[
i
].
rgbRe£rved
 = 0;

259  
pDIB
;

260 
	}
}

270 
	tu_ch¨
;

273 
	#DECLAREC⁄tigPutFunc
(
«me
) \

274 
	`«me
(\

275 
TIFFRGBAImage
* 
img
, \

276 
uöt32
* 
˝
, \

277 
uöt32
 
x
, uöt32 
y
, \

278 
uöt32
 
w
, uöt32 
h
, \

279 
öt32
 
‰omskew
, i¡32 
toskew
, \

280 
u_ch¨
* 
µ
 \

281 )

	)

283 
	#DECLARESïPutFunc
(
«me
) \

284 
	`«me
(\

285 
TIFFRGBAImage
* 
img
,\

286 
uöt32
* 
˝
,\

287 
uöt32
 
x
, uöt32 
y
, \

288 
uöt32
 
w
, uöt32 
h
,\

289 
öt32
 
‰omskew
, i¡32 
toskew
,\

290 
u_ch¨
* 
r
, u_ch¨* 
g
, u_ch¨* 
b
, u_ch¨* 
a
\

291 )

	)

293 
DECLAREC⁄tigPutFunc
(
putC⁄tig1bôTûe
);

294 
gëSåùC⁄tig1Bô
(
TIFFRGBAImage
* 
img
, 
uöt32
* 
uø°î
, uöt32 
w
, uöt32 
h
);

301 
	$DibIn°ÆlHack
(
TIFFDibImage
* 
dib
) {

302 
TIFFRGBAImage
* 
img
 = &
dib
->
tif
;

303 
dib
->
dibö°ÆÀd
 = 
Ál£
;

304 
img
->
phŸomëric
) {

305 
PHOTOMETRIC_MINISWHITE
:

306 
PHOTOMETRIC_MINISBLACK
:

307 
img
->
bô•îßm∂e
) {

309 
img
->
put
.
c⁄tig
 = 
putC⁄tig1bôTûe
;

310 
img
->
gë
 = 
gëSåùC⁄tig1Bô
;

311 
dib
->
dibö°ÆÀd
 = 
åue
;

316 
	}
}

323 
	$DECLAREC⁄tigPutFunc
(
putC⁄tig1bôTûe
)

325 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

327 (Ë
y
;

328 
‰omskew
 *
ßm∂e•îpixñ
;

329 
wb
 = 
	`WIDTHBYTES
(
w
);

330 
u_ch¨
* 
u˝
 = (u_ch¨*)
˝
;

333 
w
 = (w+7)/8;

335 
h
-- > 0) {

336 
	`_TIFFmem˝y
(
u˝
, 
µ
, 
w
);

343 
u˝
 +(
wb
 + 
toskew
);

344 
µ
 +(
w
 + 
‰omskew
);

346 
	}
}

351 
uöt32


352 
	$£t‹õ¡©i⁄
(
TIFFRGBAImage
* 
img
, 
uöt32
 
h
)

354 
TIFF
* 
tif
 = 
img
->tif;

355 
uöt32
 
y
;

357 
img
->
‹õ¡©i⁄
) {

358 
ORIENTATION_BOTRIGHT
:

359 
ORIENTATION_RIGHTBOT
:

360 
ORIENTATION_LEFTBOT
:

361 
	`TIFFW¨nög
(
	`TIFFFûeName
(
tif
), "using bottom-left orientation");

362 
img
->
‹õ¡©i⁄
 = 
ORIENTATION_BOTLEFT
;

364 
ORIENTATION_BOTLEFT
:

365 
y
 = 0;

367 
ORIENTATION_TOPRIGHT
:

368 
ORIENTATION_RIGHTTOP
:

369 
ORIENTATION_LEFTTOP
:

371 
	`TIFFW¨nög
(
	`TIFFFûeName
(
tif
), "usingÅop-left orientation");

372 
img
->
‹õ¡©i⁄
 = 
ORIENTATION_TOPLEFT
;

374 
ORIENTATION_TOPLEFT
:

375 
y
 = 
h
-1;

378  (
y
);

379 
	}
}

393 
	$gëSåùC⁄tig1Bô
(
TIFFRGBAImage
* 
img
, 
uöt32
* 
ø°î
, uöt32 
w
, uöt32 
h
)

395 
TIFF
* 
tif
 = 
img
->tif;

396 
tûeC⁄tigRoutöe
 
put
 = 
img
->put.
c⁄tig
;

397 
uöt16
 
‹õ¡©i⁄
;

398 
uöt32
 
row
, 
y
, 
ƒow
, 
row°‹ód
;

399 
uöt32
 
pos
;

400 
u_ch¨
* 
buf
;

401 
uöt32
 
row•î°rù
;

402 
uöt32
 
imagewidth
 = 
img
->
width
;

403 
tsize_t
 
sˇ∆öe
;

404 
öt32
 
‰omskew
, 
toskew
;

405 
t°rù_t
 
°rù
;

406 
tsize_t
 
°rùsize
;

407 
u_ch¨
* 
bø°î
 = (u_ch¨*)
ø°î
;

408 
uöt32
 
wb
 = 
	`WIDTHBYTES
(
w
);

409 
ªt
 = 1;

411 
buf
 = (
u_ch¨
*Ë
	`_TIFFmÆloc
(
	`TIFFSåùSize
(
tif
));

412 i‡(
buf
 == 0) {

413 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif), "No space for strip buffer");

416 
y
 = 
	`£t‹õ¡©i⁄
(
img
, 
h
);

417 
‹õ¡©i⁄
 = 
img
->orientation;

418 
toskew
 = -(
öt32
Ë(
‹õ¡©i⁄
 =
ORIENTATION_TOPLEFT
 ? 
wb
+wb : wb-wb);

419 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

420 
sˇ∆öe
 = 
	`TIFFSˇ∆öeSize
(
tif
);

421 
‰omskew
 = (
w
 < 
imagewidth
 ? imagewidth - w : 0)/8;

422 
row
 = 0;Ñow < 
h
;Ñow +
ƒow
)

424 
row°‹ód
 = 
row•î°rù
 - (
row
 + 
img
->
row_off£t
) %Ñowsperstrip;

425 
ƒow
 = (
row
 + 
row°‹ód
 > 
h
 ? h -Ñow :Ñowstoread);

426 
°rù
 = 
	`TIFFCompuãSåù
(
tif
,
row
+
img
->
row_off£t
, 0);

427 
°rùsize
 = ((
row
 + 
img
->
row_off£t
)%
row•î°rù
 + 
ƒow
Ë* 
sˇ∆öe
;

428 i‡(
	`TIFFRódEncodedSåù
(
tif
, 
°rù
, 
buf
, 
°rùsize
 ) < 0

429 && 
img
->
°›⁄îr
)

431 
ªt
 = 0;

435 
pos
 = ((
row
 + 
img
->
row_off£t
Ë% 
row•î°rù
Ë* 
sˇ∆öe
;

436 (*
put
)(
img
, (
uöt32
*)(
bø°î
+
y
*
wb
), 0, y, 
w
, 
ƒow
, 
‰omskew
, 
toskew
, 
buf
 + 
pos
);

437 
y
 +(
‹õ¡©i⁄
 =
ORIENTATION_TOPLEFT
 ?-(
öt32
Ë
ƒow
 : (int32)Çrow);

439 
	`_TIFF‰ì
(
buf
);

440  (
ªt
);

441 
	}
}

	@contrib/win_dib/tiff2dib.c

23 
	~"tiffio.h
"

25 
	#HDIB
 
HANDLE


	)

26 
	#IS_WIN30_DIB
(
Õbi
Ë((*(
LPDWORD
)÷pbi)Ë=(
BITMAPINFOHEADER
))

	)

27 
	#CVT
(
x
Ë(((xË* 255LË/ ((1L<<16)-1))

	)

29 
HDIB
 
Cª©eDIB
(
DWORD
 
dwWidth
, DWORD 
dwHeight
, 
WORD
 
wBôCou¡
);

30 
LPSTR
 
FödDIBBôs
(LPSTR 
ÕDIB
);

31 
WORD
 
PÆëãSize
(
LPSTR
 
ÕDIB
);

32 
WORD
 
DIBNumCﬁ‹s
(
LPSTR
 
ÕDIB
);

33 
checkcm≠
(
n
, 
uöt16
* 
r
, uöt16* 
g
, uöt16* 
b
);

59 
HDIB
 
	$LﬂdTIFFöDIB
(
LPSTR
 
ÕFûeName
)

61 
TIFF
 *
tif
;

62 
imageLígth
;

63 
imageWidth
;

64 
BôsPîSam∂e
;

65 
LöeSize
;

66 
Sam∂ePîPixñ
;

67 
RowsPîSåù
;

68 
PhŸomëricI¡î¥ë©i⁄
;

69 
ƒow
;

70 
row
;

71 *
buf
;

72 
LPBITMAPINFOHEADER
 
ÕDIB
;

73 
HDIB
 
hDIB
;

74 *
ÕBôs
;

75 
HGLOBAL
 
hSåù
;

76 
i
,
l
;

77 
Align
;

79 
tif
 = 
	`TIFFO≥n
(
ÕFûeName
, "r");

81 i‡(!
tif
)

82 
TiffO≥nEº‹
;

84 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, &
imageWidth
);

85 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
imageLígth
);

86 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, &
BôsPîSam∂e
);

87 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
RowsPîSåù
);

88 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
RowsPîSåù
);

89 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, &
PhŸomëricI¡î¥ë©i⁄
);

91 
LöeSize
 = 
	`TIFFSˇ∆öeSize
(
tif
);

93 
Sam∂ePîPixñ
 = (Ë(
LöeSize
/
imageWidth
);

96 
Align
 = 4 - (
LöeSize
 % 4);

97 i‡(
Align
 == 4) Align = 0;

101 
hDIB
 = 
	`Cª©eDIB
((
DWORD
Ë
imageWidth
, (DWORDË
imageLígth
, (
WORD
)

102 (
BôsPîSam∂e
*
Sam∂ePîPixñ
));

103 
ÕDIB
 = (
LPBITMAPINFOHEADER
Ë
	`GlobÆLock
(
hDIB
);

104 i‡(!
ÕDIB
)

105 
OutOfDIBMem‹y
;

107 i‡(
ÕDIB
)

108 
ÕBôs
 = 
	`FödDIBBôs
((
LPSTR
Ë
ÕDIB
);

112 i‡(
ÕBôs
)

114 
ÕBôs
 = 
	`FödDIBBôs
((
LPSTR
Ë
ÕDIB
);

115 
ÕBôs
+=((
imageWidth
*
Sam∂ePîPixñ
)+
Align
)*(
imageLígth
-1);

118 
hSåù
 = 
	`GlobÆAŒoc
(
GHND
,
	`TIFFSåùSize
(
tif
));

119 
buf
 = 
	`GlobÆLock
(
hSåù
);

121 i‡(!
buf
)

122 
OutOfBufMem‹y
;

126 i‡(
PhŸomëricI¡î¥ë©i⁄
 == 3)

128 
uöt16
* 
ªd
;

129 
uöt16
* 
gªí
;

130 
uöt16
* 
blue
;

131 
öt16
 
i
;

132 
LPBITMAPINFO
 
Õbmi
;

133 
PÆëã16Bôs
;

135 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COLORMAP
, &
ªd
, &
gªí
, &
blue
);

138 i‡(
	`checkcm≠
(1<<
BôsPîSam∂e
, 
ªd
, 
gªí
, 
blue
) == 16)

139 
PÆëã16Bôs
 = 
TRUE
;

141 
PÆëã16Bôs
 = 
FALSE
;

143 
Õbmi
 = (
LPBITMAPINFO
)
ÕDIB
;

146 
i
 = (1<<
BôsPîSam∂e
)-1; i >= 0; i--)

148 i‡(
PÆëã16Bôs
)

150 
Õbmi
->
bmiCﬁ‹s
[
i
].
rgbRed
 =(
BYTE
Ë
	`CVT
(
ªd
[i]);

151 
Õbmi
->
bmiCﬁ‹s
[
i
].
rgbGªí
 = (
BYTE
Ë
	`CVT
(
gªí
[i]);

152 
Õbmi
->
bmiCﬁ‹s
[
i
].
rgbBlue
 = (
BYTE
Ë
	`CVT
(
blue
[i]);

156 
Õbmi
->
bmiCﬁ‹s
[
i
].
rgbRed
 = (
BYTE
Ë
ªd
[i];

157 
Õbmi
->
bmiCﬁ‹s
[
i
].
rgbGªí
 = (
BYTE
Ë
gªí
[i];

158 
Õbmi
->
bmiCﬁ‹s
[
i
].
rgbBlue
 = (
BYTE
Ë
blue
[i];

166 <=> 
BGR


167 
row
 = 0;Ñow < 
imageLígth
;Ñow +
RowsPîSåù
)

169 
ƒow
 = (
row
 + 
RowsPîSåù
 > 
imageLígth
 ? imageLength -Ñow :

170 
RowsPîSåù
);

171 i‡(
	`TIFFRódEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if, 
row
, 0),

172 
buf
, 
ƒow
*
LöeSize
)==-1)

174 
TiffRódEº‹
;

178 
l
 = 0;Ü < 
ƒow
;Ü++)

180 i‡(
Sam∂ePîPixñ
 == 3)

181 
i
=0;i< (Ë(
imageWidth
);i++)

183 
ÕBôs
[
i
*
Sam∂ePîPixñ
+0]=
buf
[
l
*
LöeSize
+i*
Sam∂e


184 
PîPixñ
+2];

185 
ÕBôs
[
i
*
Sam∂ePîPixñ
+1]=
buf
[
l
*
LöeSize
+i*
Sam∂e


186 
PîPixñ
+1];

187 
ÕBôs
[
i
*
Sam∂ePîPixñ
+2]=
buf
[
l
*
LöeSize
+i*
Sam∂e


188 
PîPixñ
+0];

191 
	`mem˝y
(
ÕBôs
, &
buf
[(Ë(
l
*
LöeSize
)], ()

192 
imageWidth
*
Sam∂ePîPixñ
);

194 
ÕBôs
-=
imageWidth
*
Sam∂ePîPixñ
+
Align
;

199 
	`GlobÆU∆ock
(
hSåù
);

200 
	`GlobÆFªe
(
hSåù
);

201 
	`GlobÆU∆ock
(
hDIB
);

202 
	`TIFFClo£
(
tif
);

205  
hDIB
;

207 
OutOfBufMem‹y
:

209 
TiffRódEº‹
:

210 
	`GlobÆU∆ock
(
hDIB
);

211 
	`GlobÆFªe
(
hSåù
);

212 
OutOfDIBMem‹y
:

213 
	`TIFFClo£
(
tif
);

214 
TiffO≥nEº‹
:

215  (
HANDLE
) 0;

218 
	}
}

221 
	$checkcm≠
(
n
, 
uöt16
* 
r
, uöt16* 
g
, uöt16* 
b
)

223 
n
-- > 0)

224 i‡(*
r
++ >256 || *
g
++ >256 || *
b
++ >= 256)

228 
	}
}

246 
HDIB
 
	$Cª©eDIB
(
DWORD
 
dwWidth
, DWORD 
dwHeight
, 
WORD
 
wBôCou¡
)

248 
BITMAPINFOHEADER
 
bi
;

249 
LPBITMAPINFOHEADER
 
Õbi
;

250 
DWORD
 
dwLí
;

251 
HDIB
 
hDIB
;

252 
DWORD
 
dwByãsPîLöe
;

256 i‡(
wBôCou¡
 <= 1)

257 
wBôCou¡
 = 1;

258 i‡(
wBôCou¡
 <= 4)

259 
wBôCou¡
 = 4;

260 i‡(
wBôCou¡
 <= 8)

261 
wBôCou¡
 = 8;

262 i‡(
wBôCou¡
 <= 24)

263 
wBôCou¡
 = 24;

265 
wBôCou¡
 = 4;

268 
bi
.
biSize
 = (
BITMAPINFOHEADER
);

269 
bi
.
biWidth
 = 
dwWidth
;

270 
bi
.
biHeight
 = 
dwHeight
;

271 
bi
.
biPœ√s
 = 1;

272 
bi
.
biBôCou¡
 = 
wBôCou¡
;

273 
bi
.
biCom¥essi⁄
 = 
BI_RGB
;

274 
bi
.
biSizeImage
 = (
dwWidth
*
dwHeight
*
wBôCou¡
)/8;

275 
món
 "default"

276 
bi
.
biXPñsPîMëî
 = 2834;

277 
bi
.
biYPñsPîMëî
 = 2834;

278 
bi
.
biCÃU£d
 = 0;

279 
bi
.
biCÃImp‹è¡
 = 0;

285 
dwByãsPîLöe
 = (((
wBôCou¡
 * 
dwWidth
) + 31) / 32 * 4);

286 
dwLí
 = 
bi
.
biSize
 + 
	`PÆëãSize
((
LPSTR
)&biË+ (
dwByãsPîLöe
 * 
dwHeight
);

289 
hDIB
 = 
	`GlobÆAŒoc
(
GHND
, 
dwLí
);

292 i‡(!
hDIB
)

294  
NULL
;

298 
Õbi
 = (
VOID
 
FAR
 *)
	`GlobÆLock
(
hDIB
);

302 *
Õbi
 = 
bi
;

307 
	`GlobÆU∆ock
(
hDIB
);

310  
hDIB
;

311 
	}
}

314 
LPSTR
 
FAR
 
	$FödDIBBôs
(
LPSTR
 
ÕDIB
)

316  (
ÕDIB
 + *(
LPDWORD
ÓpDIB + 
	`PÆëãSize
(lpDIB));

317 
	}
}

320 
WORD
 
FAR
 
	$PÆëãSize
(
LPSTR
 
ÕDIB
)

323 i‡(
	`IS_WIN30_DIB
 (
ÕDIB
))

324  (
	`DIBNumCﬁ‹s
(
ÕDIB
Ë* (
RGBQUAD
));

326  (
	`DIBNumCﬁ‹s
(
ÕDIB
Ë* (
RGBTRIPLE
));

327 
	}
}

330 
WORD
 
	$DIBNumCﬁ‹s
(
LPSTR
 
ÕDIB
)

332 
WORD
 
wBôCou¡
;

340 i‡(
	`IS_WIN30_DIB
(
ÕDIB
))

342 
DWORD
 
dwCÃU£d
;

344 
dwCÃU£d
 = ((
LPBITMAPINFOHEADER
)
ÕDIB
)->
biCÃU£d
;

345 i‡(
dwCÃU£d
)

346  (
WORD
)
dwCÃU£d
;

352 i‡(
	`IS_WIN30_DIB
(
ÕDIB
))

353 
wBôCou¡
 = ((
LPBITMAPINFOHEADER
)
ÕDIB
)->
biBôCou¡
;

355 
wBôCou¡
 = ((
LPBITMAPCOREHEADER
)
ÕDIB
)->
bcBôCou¡
;

358 
wBôCou¡
)

372 
	}
}

	@libtiff/mkg3states.c

32 
	~"tif_c⁄fig.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

38 #ifde‡
HAVE_UNISTD_H


39 
	~<uni°d.h
>

42 
	~"tif_Áx3.h
"

44 #i‚de‡
HAVE_GETOPT


45 
gë›t
(, **, *);

48 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

51 
TIFFFaxTabE¡
 
	gMaöTabÀ
[128];

52 
TIFFFaxTabE¡
 
	gWhôeTabÀ
[4096];

53 
TIFFFaxTabE¡
 
	gBœckTabÀ
[8192];

55 
	s¥Ÿo
 {

56 
uöt16
 
	mcode
;

57 
uöt16
 
	mvÆ
;

60 
¥Ÿo
 
	gPass
[] = {

65 
¥Ÿo
 
	gH‹iz
[] = {

70 
¥Ÿo
 
	gV0
[] = {

75 
¥Ÿo
 
	gVR
[] = {

82 
¥Ÿo
 
	gVL
[] = {

89 
¥Ÿo
 
	gExt
[] = {

94 
¥Ÿo
 
	gEOLV
[] = {

99 
¥Ÿo
 
	gMakeUpW
[] = {

130 
¥Ÿo
 
	gMakeUpB
[] = {

161 
¥Ÿo
 
	gMakeUp
[] = {

178 
¥Ÿo
 
	gTîmW
[] = {

246 
¥Ÿo
 
	gTîmB
[] = {

314 
¥Ÿo
 
	gEOLH
[] = {

320 
	$FûlTabÀ
(
TIFFFaxTabE¡
 *
T
, 
Size
, 
¥Ÿo
 *
P
, 
Sèã
)

322 
limô
 = 1 << 
Size
;

324 
P
->
vÆ
) {

325 
width
 = 
P
->
vÆ
 & 15;

326 
∑øm
 = 
P
->
vÆ
 >> 4;

327 
ö¸
 = 1 << 
width
;

328 
code
;

329 
code
 = 
P
->code; codê< 
limô
; codê+
ö¸
) {

330 
TIFFFaxTabE¡
 *
E
 = 
T
+
code
;

331 
E
->
Sèã
 = State;

332 
E
->
Width
 = 
width
;

333 
E
->
P¨am
 = 
∑øm
;

335 
P
++;

337 
	}
}

339 * 
	g°‹age_˛ass
 = "";

340 * 
	gc⁄°_˛ass
 = "";

341 
	g∑ckouçut
 = 1;

342 * 
	g¥ebø˚
 = "";

343 * 
	gpo°bø˚
 = "";

346 
	$WrôeTabÀ
(
FILE
* 
fd
, c⁄° 
TIFFFaxTabE¡
* 
T
, 
Size
, c⁄° * 
«me
)

348 
i
;

349 * 
£p
;

351 
	`Ârötf
(
fd
, "%s %s TIFFFaxTabEnt %s[%d] = {",

352 
°‹age_˛ass
, 
c⁄°_˛ass
, 
«me
, 
Size
);

353 i‡(
∑ckouçut
) {

354 
£p
 = "\n";

355 
i
 = 0; i < 
Size
; i++) {

356 
	`Ârötf
(
fd
, "%s%s%d,%d,%d%s",

357 
£p
, 
¥ebø˚
, 
T
->
Sèã
, T->
Width
, (ËT->
P¨am
, 
po°bø˚
);

358 i‡(((
i
+1) % 10) == 0)

359 
£p
 = ",\n";

361 
£p
 = ",";

362 
T
++;

365 
£p
 = "\n ";

366 
i
 = 0; i < 
Size
; i++) {

367 
	`Ârötf
(
fd
, "%s%s%3d,%3d,%4d%s",

368 
£p
, 
¥ebø˚
, 
T
->
Sèã
, T->
Width
, (ËT->
P¨am
, 
po°bø˚
);

369 i‡(((
i
+1) % 6) == 0)

370 
£p
 = ",\n ";

372 
£p
 = ",";

373 
T
++;

376 
	`Ârötf
(
fd
, "\n};\n");

377 
	}
}

381 
	$maö
(
¨gc
, * 
¨gv
[])

383 
FILE
* 
fd
;

384 * 
ouçutfûe
;

385 
c
;

386 
›töd
;

387 * 
›èrg
;

389 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:s:bp")) != -1)

390 
c
) {

392 
c⁄°_˛ass
 = 
›èrg
;

395 
°‹age_˛ass
 = 
›èrg
;

398 
∑ckouçut
 = 0;

401 
¥ebø˚
 = "{";

402 
po°bø˚
 = "}";

405 
	`Ârötf
(
°dîr
,

407 
¨gv
[0]);

410 
ouçutfûe
 = 
›töd
 < 
¨gc
 ? 
¨gv
[optind] : "g3states.h";

411 
fd
 = 
	`f›í
(
ouçutfûe
, "w");

412 i‡(
fd
 =
NULL
) {

413 
	`Ârötf
(
°dîr
, "%s: %s: Cannot create output file.\n",

414 
¨gv
[0], 
ouçutfûe
);

417 
	`FûlTabÀ
(
MaöTabÀ
, 7, 
Pass
, 
S_Pass
);

418 
	`FûlTabÀ
(
MaöTabÀ
, 7, 
H‹iz
, 
S_H‹iz
);

419 
	`FûlTabÀ
(
MaöTabÀ
, 7, 
V0
, 
S_V0
);

420 
	`FûlTabÀ
(
MaöTabÀ
, 7, 
VR
, 
S_VR
);

421 
	`FûlTabÀ
(
MaöTabÀ
, 7, 
VL
, 
S_VL
);

422 
	`FûlTabÀ
(
MaöTabÀ
, 7, 
Ext
, 
S_Ext
);

423 
	`FûlTabÀ
(
MaöTabÀ
, 7, 
EOLV
, 
S_EOL
);

424 
	`FûlTabÀ
(
WhôeTabÀ
, 12, 
MakeUpW
, 
S_MakeUpW
);

425 
	`FûlTabÀ
(
WhôeTabÀ
, 12, 
MakeUp
, 
S_MakeUp
);

426 
	`FûlTabÀ
(
WhôeTabÀ
, 12, 
TîmW
, 
S_TîmW
);

427 
	`FûlTabÀ
(
WhôeTabÀ
, 12, 
EOLH
, 
S_EOL
);

428 
	`FûlTabÀ
(
BœckTabÀ
, 13, 
MakeUpB
, 
S_MakeUpB
);

429 
	`FûlTabÀ
(
BœckTabÀ
, 13, 
MakeUp
, 
S_MakeUp
);

430 
	`FûlTabÀ
(
BœckTabÀ
, 13, 
TîmB
, 
S_TîmB
);

431 
	`FûlTabÀ
(
BœckTabÀ
, 13, 
EOLH
, 
S_EOL
);

433 
	`Ârötf
(
fd
, "/* WARNING,Åhis file wasáutomatically generated byÅhe\n");

434 
	`Ârötf
(
fd
, " mkg3statesÖrogram */\n");

435 
	`Ârötf
(
fd
, "#include \"tiff.h\"\n");

436 
	`Ârötf
(
fd
, "#include \"tif_fax3.h\"\n");

437 
	`WrôeTabÀ
(
fd
, 
MaöTabÀ
, 128, "TIFFFaxMainTable");

438 
	`WrôeTabÀ
(
fd
, 
WhôeTabÀ
, 4096, "TIFFFaxWhiteTable");

439 
	`WrôeTabÀ
(
fd
, 
BœckTabÀ
, 8192, "TIFFFaxBlackTable");

440 
	`f˛o£
(
fd
);

442 
	}
}

	@libtiff/t4.h

27 #i‚de‡
_T4_


28 
	#_T4_


	)

35 
	sèbÀíåy
 {

36 
	mÀngth
;

37 
	mcode
;

38 
	mru∆í
;

39 } 
	tèbÀíåy
;

41 
	#EOL
 0x001

	)

44 
	#G3CODE_EOL
 -1

	)

45 
	#G3CODE_INVALID
 -2

	)

46 
	#G3CODE_EOF
 -3

	)

47 
	#G3CODE_INCOMP
 -4

	)

57 #ifde‡
G3CODES


58 c⁄° 
èbÀíåy
 
	gTIFFFaxWhôeCodes
[] = {

163 { 12, 0x1, 
G3CODE_EOL
 },

164 { 9, 0x1, 
G3CODE_INVALID
 },

165 { 10, 0x1, 
G3CODE_INVALID
 },

166 { 11, 0x1, 
G3CODE_INVALID
 },

167 { 12, 0x0, 
G3CODE_INVALID
 },

170 c⁄° 
èbÀíåy
 
	gTIFFFaxBœckCodes
[] = {

275 { 12, 0x1, 
G3CODE_EOL
 },

276 { 9, 0x1, 
G3CODE_INVALID
 },

277 { 10, 0x1, 
G3CODE_INVALID
 },

278 { 11, 0x1, 
G3CODE_INVALID
 },

279 { 12, 0x0, 
G3CODE_INVALID
 },

282 c⁄° 
èbÀíåy
 
TIFFFaxWhôeCodes
[];

283 c⁄° 
èbÀíåy
 
TIFFFaxBœckCodes
[];

	@libtiff/tif_aux.c

32 
	~"tiffi›.h
"

33 
	~"tif_¥edi˘.h
"

34 
	~<m©h.h
>

36 
uöt32


37 
	$_TIFFMu…ùly32
(
TIFF
* 
tif
, 
uöt32
 
fú°
, uöt32 
£c⁄d
, c⁄° * 
whîe
)

39 
uöt32
 
byãs
 = 
fú°
 * 
£c⁄d
;

41 i‡(
£c⁄d
 && 
byãs
 / sec⁄d !
fú°
) {

42 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
whîe
, "Integer overflow in %s", where);

43 
byãs
 = 0;

46  
byãs
;

47 
	}
}

49 
uöt64


50 
	$_TIFFMu…ùly64
(
TIFF
* 
tif
, 
uöt64
 
fú°
, uöt64 
£c⁄d
, c⁄° * 
whîe
)

52 
uöt64
 
byãs
 = 
fú°
 * 
£c⁄d
;

54 i‡(
£c⁄d
 && 
byãs
 / sec⁄d !
fú°
) {

55 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
whîe
, "Integer overflow in %s", where);

56 
byãs
 = 0;

59  
byãs
;

60 
	}
}

63 
	$_TIFFCheckRóŒoc
(
TIFF
* 
tif
, * 
buf„r
,

64 
tmsize_t
 
nmemb
,Åmsize_à
ñem_size
, c⁄° * 
wh©
)

66 * 
˝
 = 
NULL
;

67 
tmsize_t
 
byãs
 = 
nmemb
 * 
ñem_size
;

72 i‡(
nmemb
 && 
ñem_size
 && 
byãs
 /Élem_size ==Çmemb)

73 
˝
 = 
	`_TIFFªÆloc
(
buf„r
, 
byãs
);

75 i‡(
˝
 =
NULL
) {

76 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

79 
wh©
,(Ë
nmemb
, (Ë
ñem_size
);

82  
˝
;

83 
	}
}

86 
	$_TIFFCheckMÆloc
(
TIFF
* 
tif
, 
tmsize_t
 
nmemb
,Åmsize_à
ñem_size
, c⁄° * 
wh©
)

88  
	`_TIFFCheckRóŒoc
(
tif
, 
NULL
, 
nmemb
, 
ñem_size
, 
wh©
);

89 
	}
}

92 
	$TIFFDeÁu…Tøns„rFun˘i⁄
(
TIFFDúe˘‹y
* 
td
)

94 
uöt16
 **
tf
 = 
td
->
td_å™s„rfun˘i⁄
;

95 
tmsize_t
 
i
, 
n
, 
nbyãs
;

97 
tf
[0] =Åf[1] =Åf[2] = 0;

98 i‡(
td
->
td_bô•îßm∂e
 >(
tmsize_t
) * 8 - 2)

101 
n
 = ((
tmsize_t
)1)<<
td
->
td_bô•îßm∂e
;

102 
nbyãs
 = 
n
 *  (
uöt16
);

103 i‡(!(
tf
[0] = (
uöt16
 *)
	`_TIFFmÆloc
(
nbyãs
)))

105 
tf
[0][0] = 0;

106 
i
 = 1; i < 
n
; i++) {

107 
t
 = ()
i
/((Ë
n
-1.);

108 
tf
[0][
i
] = (
uöt16
)
	`Êo‹
(65535.*
	`pow
(
t
, 2.2) + .5);

111 i‡(
td
->
td_ßm∂e•îpixñ
 -Åd->
td_exåaßm∂es
 > 1) {

112 i‡(!(
tf
[1] = (
uöt16
 *)
	`_TIFFmÆloc
(
nbyãs
)))

113 
bad
;

114 
	`_TIFFmem˝y
(
tf
[1],Åf[0], 
nbyãs
);

115 i‡(!(
tf
[2] = (
uöt16
 *)
	`_TIFFmÆloc
(
nbyãs
)))

116 
bad
;

117 
	`_TIFFmem˝y
(
tf
[2],Åf[0], 
nbyãs
);

121 
bad
:

122 i‡(
tf
[0])

123 
	`_TIFF‰ì
(
tf
[0]);

124 i‡(
tf
[1])

125 
	`_TIFF‰ì
(
tf
[1]);

126 i‡(
tf
[2])

127 
	`_TIFF‰ì
(
tf
[2]);

128 
tf
[0] =Åf[1] =Åf[2] = 0;

130 
	}
}

133 
	$TIFFDeÁu…RefBœckWhôe
(
TIFFDúe˘‹y
* 
td
)

135 
i
;

137 i‡(!(
td
->
td_ªfbœckwhôe
 = (*)
	`_TIFFmÆloc
(6* ())))

139 i‡(
td
->
td_phŸomëric
 =
PHOTOMETRIC_YCBCR
) {

144 
td
->
td_ªfbœckwhôe
[0] = 0.0F;

145 
td
->
td_ªfbœckwhôe
[1] =Åd->td_refblackwhite[3] =

146 
td
->
td_ªfbœckwhôe
[5] = 255.0F;

147 
td
->
td_ªfbœckwhôe
[2] =Åd->td_refblackwhite[4] = 128.0F;

152 
i
 = 0; i < 3; i++) {

153 
td
->
td_ªfbœckwhôe
[2*
i
+0] = 0;

154 
td
->
td_ªfbœckwhôe
[2*
i
+1] =

155 ()((1L<<
td
->
td_bô•îßm∂e
)-1L);

159 
	}
}

170 
	$TIFFVGëFõldDeÁu…ed
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

172 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

174 i‡(
	`TIFFVGëFõld
(
tif
, 
èg
, 
≠
))

176 
èg
) {

177 
TIFFTAG_SUBFILETYPE
:

178 *
	`va_¨g
(
≠
, 
uöt32
 *Ë
td
->
td_subfûëy≥
;

180 
TIFFTAG_BITSPERSAMPLE
:

181 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_bô•îßm∂e
;

183 
TIFFTAG_THRESHHOLDING
:

184 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_thªshhﬁdög
;

186 
TIFFTAG_FILLORDER
:

187 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_fûl‹dî
;

189 
TIFFTAG_ORIENTATION
:

190 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_‹õ¡©i⁄
;

192 
TIFFTAG_SAMPLESPERPIXEL
:

193 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_ßm∂e•îpixñ
;

195 
TIFFTAG_ROWSPERSTRIP
:

196 *
	`va_¨g
(
≠
, 
uöt32
 *Ë
td
->
td_row•î°rù
;

198 
TIFFTAG_MINSAMPLEVALUE
:

199 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_mößm∂evÆue
;

201 
TIFFTAG_MAXSAMPLEVALUE
:

202 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_maxßm∂evÆue
;

204 
TIFFTAG_PLANARCONFIG
:

205 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_∂™¨c⁄fig
;

207 
TIFFTAG_RESOLUTIONUNIT
:

208 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_ªsﬁuti⁄unô
;

210 
TIFFTAG_PREDICTOR
:

212 
TIFFPªdi˘‹Sèã
* 
•
 = (TIFFPªdi˘‹Sèã*Ë
tif
->
tif_d©a
;

213 *
	`va_¨g
(
≠
, 
uöt16
*Ë(uöt16Ë
•
->
¥edi˘‹
;

216 
TIFFTAG_DOTRANGE
:

217 *
	`va_¨g
(
≠
, 
uöt16
 *) = 0;

218 *
	`va_¨g
(
≠
, 
uöt16
 *Ë(1<<
td
->
td_bô•îßm∂e
)-1;

220 
TIFFTAG_INKSET
:

221 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
INKSET_CMYK
;

223 
TIFFTAG_NUMBEROFINKS
:

224 *
	`va_¨g
(
≠
, 
uöt16
 *) = 4;

226 
TIFFTAG_EXTRASAMPLES
:

227 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_exåaßm∂es
;

228 *
	`va_¨g
(
≠
, 
uöt16
 **Ë
td
->
td_ßm∂eöfo
;

230 
TIFFTAG_MATTEING
:

231 *
	`va_¨g
(
≠
, 
uöt16
 *) =

232 (
td
->
td_exåaßm∂es
 == 1 &&

233 
td
->
td_ßm∂eöfo
[0] =
EXTRASAMPLE_ASSOCALPHA
);

235 
TIFFTAG_TILEDEPTH
:

236 *
	`va_¨g
(
≠
, 
uöt32
 *Ë
td
->
td_tûedïth
;

238 
TIFFTAG_DATATYPE
:

239 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_ßm∂ef‹m©
-1;

241 
TIFFTAG_SAMPLEFORMAT
:

242 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_ßm∂ef‹m©
;

244 
TIFFTAG_IMAGEDEPTH
:

245 *
	`va_¨g
(
≠
, 
uöt32
 *Ë
td
->
td_imagedïth
;

247 
TIFFTAG_YCBCRCOEFFICIENTS
:

250 
ycb¸c€ffs
[] = { 0.299f, 0.587f, 0.114f };

251 *
	`va_¨g
(
≠
, **Ë
ycb¸c€ffs
;

254 
TIFFTAG_YCBCRSUBSAMPLING
:

255 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_ycb¸subßm∂ög
[0];

256 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_ycb¸subßm∂ög
[1];

258 
TIFFTAG_YCBCRPOSITIONING
:

259 *
	`va_¨g
(
≠
, 
uöt16
 *Ë
td
->
td_ycb¸posôi⁄ög
;

261 
TIFFTAG_WHITEPOINT
:

263 
whôïoöt
[2];

268 
whôïoöt
[0] = 
D50_X0
 / (D50_X0 + 
D50_Y0
 + 
D50_Z0
);

269 
whôïoöt
[1] = 
D50_Y0
 / (
D50_X0
 + D50_Y0 + 
D50_Z0
);

270 *
	`va_¨g
(
≠
, **Ë
whôïoöt
;

273 
TIFFTAG_TRANSFERFUNCTION
:

274 i‡(!
td
->
td_å™s„rfun˘i⁄
[0] &&

275 !
	`TIFFDeÁu…Tøns„rFun˘i⁄
(
td
)) {

276 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "No space for \"TransferFunction\"Åag");

279 *
	`va_¨g
(
≠
, 
uöt16
 **Ë
td
->
td_å™s„rfun˘i⁄
[0];

280 i‡(
td
->
td_ßm∂e•îpixñ
 -Åd->
td_exåaßm∂es
 > 1) {

281 *
	`va_¨g
(
≠
, 
uöt16
 **Ë
td
->
td_å™s„rfun˘i⁄
[1];

282 *
	`va_¨g
(
≠
, 
uöt16
 **Ë
td
->
td_å™s„rfun˘i⁄
[2];

285 
TIFFTAG_REFERENCEBLACKWHITE
:

286 i‡(!
td
->
td_ªfbœckwhôe
 && !
	`TIFFDeÁu…RefBœckWhôe
(td))

288 *
	`va_¨g
(
≠
, **Ë
td
->
td_ªfbœckwhôe
;

292 
	}
}

299 
	$TIFFGëFõldDeÁu…ed
(
TIFF
* 
tif
, 
uöt32
 
èg
, ...)

301 
ok
;

302 
va_li°
 
≠
;

304 
	`va_°¨t
(
≠
, 
èg
);

305 
ok
 = 
	`TIFFVGëFõldDeÁu…ed
(
tif
, 
èg
, 
≠
);

306 
	`va_íd
(
≠
);

307  (
ok
);

308 
	}
}

310 
	s_I¡64P¨ts
 {

311 
öt32
 
	mlow
, 
	mhigh
;

315 
_I¡64P¨ts
 
	m∑π
;

316 
öt64
 
	mvÆue
;

317 } 
	t_I¡64
;

320 
	$_TIFFUI¡64ToFlﬂt
(
uöt64
 
ui64
)

322 
_I¡64
 
i
;

324 
i
.
vÆue
 = 
ui64
;

325 i‡(
i
.
∑π
.
high
 >= 0) {

326  ()
i
.
vÆue
;

328 
df
;

329 
df
 = ()
i
.
vÆue
;

330 
df
 += 18446744073709551616.0;

331  ()
df
;

333 
	}
}

336 
	$_TIFFUI¡64ToDoubÀ
(
uöt64
 
ui64
)

338 
_I¡64
 
i
;

340 
i
.
vÆue
 = 
ui64
;

341 i‡(
i
.
∑π
.
high
 >= 0) {

342  ()
i
.
vÆue
;

344 
df
;

345 
df
 = ()
i
.
vÆue
;

346 
df
 += 18446744073709551616.0;

347  ()
df
;

349 
	}
}

	@libtiff/tif_close.c

30 
	~"tiffi›.h
"

31 
	~<°rög.h
>

47 
	$TIFFCÀ™up
(
TIFF
* 
tif
)

52 i‡(
tif
->
tif_mode
 !
O_RDONLY
)

53 
	`TIFFFlush
(
tif
);

54 (*
tif
->
tif_˛ónup
)(tif);

55 
	`TIFFFªeDúe˘‹y
(
tif
);

57 i‡(
tif
->
tif_dúli°
)

58 
	`_TIFF‰ì
(
tif
->
tif_dúli°
);

63  
tif
->
tif_˛õ¡öfo
 )

65 
TIFFClõ¡InfoLök
 *
lök
 = 
tif
->
tif_˛õ¡öfo
;

67 
tif
->
tif_˛õ¡öfo
 = 
lök
->
√xt
;

68 
	`_TIFF‰ì
–
lök
->
«me
 );

69 
	`_TIFF‰ì
–
lök
 );

72 i‡(
tif
->
tif_øwd©a
 && (tif->
tif_Êags
&
TIFF_MYBUFFER
))

73 
	`_TIFF‰ì
(
tif
->
tif_øwd©a
);

74 i‡(
	`isM≠≥d
(
tif
))

75 
	`TIFFUnm≠FûeC⁄ã¡s
(
tif
,Åif->
tif_ba£
, (
toff_t
Èif->
tif_size
);

80 i‡(
tif
->
tif_fõlds
 &&Åif->
tif_nfõlds
 > 0) {

81 
uöt32
 
i
;

83 
i
 = 0; i < 
tif
->
tif_nfõlds
; i++) {

84 
TIFFFõld
 *
Êd
 = 
tif
->
tif_fõlds
[
i
];

85 i‡(
Êd
->
fõld_bô
 =
FIELD_CUSTOM
 &&

86 
	`°∫cmp
("Tag ", 
Êd
->
fõld_«me
, 4) == 0) {

87 
	`_TIFF‰ì
(
Êd
->
fõld_«me
);

88 
	`_TIFF‰ì
(
Êd
);

92 
	`_TIFF‰ì
(
tif
->
tif_fõlds
);

95 i‡(
tif
->
tif_nfõldscom∑t
 > 0) {

96 
uöt32
 
i
;

98 
i
 = 0; i < 
tif
->
tif_nfõldscom∑t
; i++) {

99 i‡(
tif
->
tif_fõldscom∑t
[
i
].
Æloˇãd_size
)

100 
	`_TIFF‰ì
(
tif
->
tif_fõldscom∑t
[
i
].
fõlds
);

102 
	`_TIFF‰ì
(
tif
->
tif_fõldscom∑t
);

105 
	`_TIFF‰ì
(
tif
);

106 
	}
}

123 
	$TIFFClo£
(
TIFF
* 
tif
)

125 
TIFFClo£Proc
 
˛o£¥oc
 = 
tif
->
tif_˛o£¥oc
;

126 
th™dÀ_t
 
fd
 = 
tif
->
tif_˛õ¡d©a
;

128 
	`TIFFCÀ™up
(
tif
);

129 (Ë(*
˛o£¥oc
)(
fd
);

130 
	}
}

	@libtiff/tif_codec.c

32 
	~"tiffi›.h
"

34 
NŸC⁄figuªd
(
TIFF
*, );

36 #i‚de‡
LZW_SUPPORT


37 
	#TIFFInôLZW
 
NŸC⁄figuªd


	)

39 #i‚de‡
PACKBITS_SUPPORT


40 
	#TIFFInôPackBôs
 
NŸC⁄figuªd


	)

42 #i‚de‡
THUNDER_SUPPORT


43 
	#TIFFInôThundîSˇn
 
NŸC⁄figuªd


	)

45 #i‚de‡
NEXT_SUPPORT


46 
	#TIFFInôNeXT
 
NŸC⁄figuªd


	)

48 #i‚de‡
JPEG_SUPPORT


49 
	#TIFFInôJPEG
 
NŸC⁄figuªd


	)

51 #i‚de‡
OJPEG_SUPPORT


52 
	#TIFFInôOJPEG
 
NŸC⁄figuªd


	)

54 #i‚de‡
CCITT_SUPPORT


55 
	#TIFFInôCCITTRLE
 
NŸC⁄figuªd


	)

56 
	#TIFFInôCCITTRLEW
 
NŸC⁄figuªd


	)

57 
	#TIFFInôCCITTFax3
 
NŸC⁄figuªd


	)

58 
	#TIFFInôCCITTFax4
 
NŸC⁄figuªd


	)

60 #i‚de‡
JBIG_SUPPORT


61 
	#TIFFInôJBIG
 
NŸC⁄figuªd


	)

63 #i‚de‡
ZIP_SUPPORT


64 
	#TIFFInôZIP
 
NŸC⁄figuªd


	)

66 #i‚de‡
PIXARLOG_SUPPORT


67 
	#TIFFInôPix¨Log
 
NŸC⁄figuªd


	)

69 #i‚de‡
LOGLUV_SUPPORT


70 
	#TIFFInôSGILog
 
NŸC⁄figuªd


	)

72 #i‚de‡
LZMA_SUPPORT


73 
	#TIFFInôLZMA
 
NŸC⁄figuªd


	)

79 #ifde‡
VMS


80 c⁄° 
TIFFCodec
 
	g_TIFFBuûtöCODECS
[] = {

82 
TIFFCodec
 
_TIFFBuûtöCODECS
[] = {

84 { "N⁄e", 
COMPRESSION_NONE
, 
TIFFInôDumpMode
 },

85 { "LZW", 
COMPRESSION_LZW
, 
TIFFInôLZW
 },

86 { "PackBôs", 
COMPRESSION_PACKBITS
, 
TIFFInôPackBôs
 },

87 { "ThundîSˇn", 
COMPRESSION_THUNDERSCAN
,
TIFFInôThundîSˇn
 },

88 { "NeXT", 
COMPRESSION_NEXT
, 
TIFFInôNeXT
 },

89 { "JPEG", 
COMPRESSION_JPEG
, 
TIFFInôJPEG
 },

90 { "Old-°yÀ JPEG", 
COMPRESSION_OJPEG
, 
TIFFInôOJPEG
 },

91 { "CCITT RLE", 
COMPRESSION_CCITTRLE
, 
TIFFInôCCITTRLE
 },

92 { "CCITT RLE/W", 
COMPRESSION_CCITTRLEW
, 
TIFFInôCCITTRLEW
 },

93 { "CCITT Grou∞3", 
COMPRESSION_CCITTFAX3
, 
TIFFInôCCITTFax3
 },

94 { "CCITT Grou∞4", 
COMPRESSION_CCITTFAX4
, 
TIFFInôCCITTFax4
 },

95 { "ISO JBIG", 
COMPRESSION_JBIG
, 
TIFFInôJBIG
 },

96 { "DeÊ©e", 
COMPRESSION_DEFLATE
, 
TIFFInôZIP
 },

97 { "AdobeDeÊ©e", 
COMPRESSION_ADOBE_DEFLATE
 , 
TIFFInôZIP
 },

98 { "Pix¨Log", 
COMPRESSION_PIXARLOG
, 
TIFFInôPix¨Log
 },

99 { "SGILog", 
COMPRESSION_SGILOG
, 
TIFFInôSGILog
 },

100 { "SGILog24", 
COMPRESSION_SGILOG24
, 
TIFFInôSGILog
 },

101 { "LZMA", 
COMPRESSION_LZMA
, 
TIFFInôLZMA
 },

102 { 
NULL
, 0, NULL }

106 
	$_nŸC⁄figuªd
(
TIFF
* 
tif
)

108 c⁄° 
TIFFCodec
* 
c
 = 
	`TIFFFödCODEC
(
tif
->
tif_dú
.
td_com¥essi⁄
);

109 
com¥essi⁄_code
[20];

111 
	`•rötf
–
com¥essi⁄_code
, "%d", 
tif
->
tif_dú
.
td_com¥essi⁄
 );

112 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

114 
c
 ? c->
«me
 : 
com¥essi⁄_code
 );

116 
	}
}

119 
	$NŸC⁄figuªd
(
TIFF
* 
tif
, 
scheme
)

121 (Ë
scheme
;

123 
tif
->
tif_fixu±ags
 = 
_nŸC⁄figuªd
;

124 
tif
->
tif_decode°©us
 = 
FALSE
;

125 
tif
->
tif_£tupdecode
 = 
_nŸC⁄figuªd
;

126 
tif
->
tif_ícode°©us
 = 
FALSE
;

127 
tif
->
tif_£tu≥ncode
 = 
_nŸC⁄figuªd
;

129 
	}
}

143 
	$TIFFIsCODECC⁄figuªd
(
uöt16
 
scheme
)

145 c⁄° 
TIFFCodec
* 
codec
 = 
	`TIFFFödCODEC
(
scheme
);

147 if(
codec
 =
NULL
) {

150 if(
codec
->
öô
 =
NULL
) {

153 if(
codec
->
öô
 !
NŸC⁄figuªd
){

157 
	}
}

	@libtiff/tif_color.c

39 
	~"tiffi›.h
"

40 
	~<m©h.h
>

46 
	$TIFFCIELabToXYZ
(
TIFFCIELabToRGB
 *
cõœb
, 
uöt32
 
l
, 
öt32
 
a
, i¡32 
b
,

47 *
X
, *
Y
, *
Z
)

49 
L
 = ()
l
 * 100.0F / 255.0F;

50 
cby
, 
tmp
;

52 if–
L
 < 8.856F ) {

53 *
Y
 = (
L
 * 
cõœb
->
Y0
) / 903.292F;

54 
cby
 = 7.787F * (*
Y
 / 
cõœb
->
Y0
) + 16.0F / 116.0F;

56 
cby
 = (
L
 + 16.0F) / 116.0F;

57 *
Y
 = 
cõœb
->
Y0
 * 
cby
 * cby * cby;

60 
tmp
 = ()
a
 / 500.0F + 
cby
;

61 if–
tmp
 < 0.2069F )

62 *
X
 = 
cõœb
->
X0
 * (
tmp
 - 0.13793F) / 7.787F;

64 *
X
 = 
cõœb
->
X0
 * 
tmp
 *Åmp *Åmp;

66 
tmp
 = 
cby
 - ()
b
 / 200.0F;

67 if–
tmp
 < 0.2069F )

68 *
Z
 = 
cõœb
->
Z0
 * (
tmp
 - 0.13793F) / 7.787F;

70 *
Z
 = 
cõœb
->
Z0
 * 
tmp
 *Åmp *Åmp;

71 
	}
}

73 
	#RINT
(
R
Ë((
uöt32
)((R)>0?((R)+0.5):((R)-0.5)))

	)

78 
	$TIFFXYZToRGB
(
TIFFCIELabToRGB
 *
cõœb
, 
X
, 
Y
, 
Z
,

79 
uöt32
 *
r
, uöt32 *
g
, uöt32 *
b
)

81 
i
;

82 
Yr
, 
Yg
, 
Yb
;

83 *
m©rix
 = &
cõœb
->
di•œy
.
d_m©
[0][0];

86 
Yr
 = 
m©rix
[0] * 
X
 + m©rix[1] * 
Y
 + m©rix[2] * 
Z
;

87 
Yg
 = 
m©rix
[3] * 
X
 + m©rix[4] * 
Y
 + m©rix[5] * 
Z
;

88 
Yb
 = 
m©rix
[6] * 
X
 + m©rix[7] * 
Y
 + m©rix[8] * 
Z
;

91 
Yr
 = 
	`TIFFmax
(Yr, 
cõœb
->
di•œy
.
d_Y0R
);

92 
Yg
 = 
	`TIFFmax
(Yg, 
cõœb
->
di•œy
.
d_Y0G
);

93 
Yb
 = 
	`TIFFmax
(Yb, 
cõœb
->
di•œy
.
d_Y0B
);

96 
Yr
 = 
	`TIFFmö
(Yr, 
cõœb
->
di•œy
.
d_YCR
);

97 
Yg
 = 
	`TIFFmö
(Yg, 
cõœb
->
di•œy
.
d_YCG
);

98 
Yb
 = 
	`TIFFmö
(Yb, 
cõœb
->
di•œy
.
d_YCB
);

101 
i
 = ()((
Yr
 - 
cõœb
->
di•œy
.
d_Y0R
Ë/ cõœb->
r°ï
);

102 
i
 = 
	`TIFFmö
(
cõœb
->
ønge
, i);

103 *
r
 = 
	`RINT
(
cõœb
->
Yr2r
[
i
]);

105 
i
 = ()((
Yg
 - 
cõœb
->
di•œy
.
d_Y0G
Ë/ cõœb->
g°ï
);

106 
i
 = 
	`TIFFmö
(
cõœb
->
ønge
, i);

107 *
g
 = 
	`RINT
(
cõœb
->
Yg2g
[
i
]);

109 
i
 = ()((
Yb
 - 
cõœb
->
di•œy
.
d_Y0B
Ë/ cõœb->
b°ï
);

110 
i
 = 
	`TIFFmö
(
cõœb
->
ønge
, i);

111 *
b
 = 
	`RINT
(
cõœb
->
Yb2b
[
i
]);

114 *
r
 = 
	`TIFFmö
(*r, 
cõœb
->
di•œy
.
d_Vrwr
);

115 *
g
 = 
	`TIFFmö
(*g, 
cõœb
->
di•œy
.
d_Vrwg
);

116 *
b
 = 
	`TIFFmö
(*b, 
cõœb
->
di•œy
.
d_Vrwb
);

117 
	}
}

118 #unde‡
RINT


125 
	$TIFFCIELabToRGBInô
(
TIFFCIELabToRGB
* 
cõœb
,

126 c⁄° 
TIFFDi•œy
 *
di•œy
, *
ªfWhôe
)

128 
i
;

129 
gamma
;

131 
cõœb
->
ønge
 = 
CIELABTORGB_TABLE_RANGE
;

133 
	`_TIFFmem˝y
(&
cõœb
->
di•œy
, di•œy, (
TIFFDi•œy
));

136 
gamma
 = 1.0 / 
cõœb
->
di•œy
.
d_gammaR
 ;

137 
cõœb
->
r°ï
 =

138 (
cõœb
->
di•œy
.
d_YCR
 - cõœb->di•œy.
d_Y0R
Ë/ cõœb->
ønge
;

139 
i
 = 0; i <
cõœb
->
ønge
; i++) {

140 
cõœb
->
Yr2r
[
i
] = cõœb->
di•œy
.
d_Vrwr


141 * (()
	`pow
(()
i
 / 
cõœb
->
ønge
, 
gamma
));

145 
gamma
 = 1.0 / 
cõœb
->
di•œy
.
d_gammaG
 ;

146 
cõœb
->
g°ï
 =

147 (
cõœb
->
di•œy
.
d_YCR
 - cõœb->di•œy.
d_Y0R
Ë/ cõœb->
ønge
;

148 
i
 = 0; i <
cõœb
->
ønge
; i++) {

149 
cõœb
->
Yg2g
[
i
] = cõœb->
di•œy
.
d_Vrwg


150 * (()
	`pow
(()
i
 / 
cõœb
->
ønge
, 
gamma
));

154 
gamma
 = 1.0 / 
cõœb
->
di•œy
.
d_gammaB
 ;

155 
cõœb
->
b°ï
 =

156 (
cõœb
->
di•œy
.
d_YCR
 - cõœb->di•œy.
d_Y0R
Ë/ cõœb->
ønge
;

157 
i
 = 0; i <
cõœb
->
ønge
; i++) {

158 
cõœb
->
Yb2b
[
i
] = cõœb->
di•œy
.
d_Vrwb


159 * (()
	`pow
(()
i
 / 
cõœb
->
ønge
, 
gamma
));

163 
cõœb
->
X0
 = 
ªfWhôe
[0];

164 
cõœb
->
Y0
 = 
ªfWhôe
[1];

165 
cõœb
->
Z0
 = 
ªfWhôe
[2];

168 
	}
}

175 
	#SHIFT
 16

	)

176 
	#FIX
(
x
Ë((
öt32
)((xË* (1L<<
SHIFT
Ë+ 0.5))

	)

177 
	#ONE_HALF
 ((
öt32
)(1<<(
SHIFT
-1)))

	)

178 
	#Code2V
(
c
, 
RB
, 
RW
, 
CR
Ë((((c)-(
öt32
)(RB))*()(CR))/()(((RW)-(RB)Ë? ((RW)-(RB)Ë: 1))

	)

179 
	#CLAMP
(
f
,
mö
,
max
Ë((f)<(mö)?(mö):(f)>(max)?(max):(f))

	)

180 
	#HICLAMP
(
f
,
max
Ë((f)>(max)?(max):(f))

	)

183 
	$TIFFYCbCπoRGB
(
TIFFYCbCrToRGB
 *
ycb¸
, 
uöt32
 
Y
, 
öt32
 
Cb
, i¡32 
Cr
,

184 
uöt32
 *
r
, uöt32 *
g
, uöt32 *
b
)

186 
öt32
 
i
;

189 
Y
 = 
	`HICLAMP
(Y, 255), 
Cb
 = 
	`CLAMP
(Cb, 0, 255), 
Cr
 = CLAMP(Cr, 0, 255);

191 
i
 = 
ycb¸
->
Y_èb
[
Y
] + ycb¸->
Cr_r_èb
[
Cr
];

192 *
r
 = 
	`CLAMP
(
i
, 0, 255);

193 
i
 = 
ycb¸
->
Y_èb
[
Y
]

194 + ()((
ycb¸
->
Cb_g_èb
[
Cb
] + ycb¸->
Cr_g_èb
[
Cr
]Ë>> 
SHIFT
);

195 *
g
 = 
	`CLAMP
(
i
, 0, 255);

196 
i
 = 
ycb¸
->
Y_èb
[
Y
] + ycb¸->
Cb_b_èb
[
Cb
];

197 *
b
 = 
	`CLAMP
(
i
, 0, 255);

198 
	}
}

217 
	$TIFFYCbCrToRGBInô
(
TIFFYCbCrToRGB
* 
ycb¸
, *
luma
, *
ªfBœckWhôe
)

219 
TIFFRGBVÆue
* 
˛am±ab
;

220 
i
;

222 
	#LumaRed
 
luma
[0]

	)

223 
	#LumaGªí
 
luma
[1]

	)

224 
	#LumaBlue
 
luma
[2]

	)

226 
˛am±ab
 = (
TIFFRGBVÆue
*)(

227 (
uöt8
*Ë
ycb¸
+
	`TIFFroundup_32
( (
TIFFYCbCrToRGB
),  ()));

228 
	`_TIFFmem£t
(
˛am±ab
, 0, 256);

229 
ycb¸
->
˛am±ab
 = (clamptab += 256);

230 
i
 = 0; i < 256; i++)

231 
˛am±ab
[
i
] = (
TIFFRGBVÆue
) i;

232 
	`_TIFFmem£t
(
˛am±ab
+256, 255, 2*256);

233 
ycb¸
->
Cr_r_èb
 = (*Ë(
˛am±ab
 + 3*256);

234 
ycb¸
->
Cb_b_èb
 = ycb¸->
Cr_r_èb
 + 256;

235 
ycb¸
->
Cr_g_èb
 = (
öt32
*Ë(ycb¸->
Cb_b_èb
 + 256);

236 
ycb¸
->
Cb_g_èb
 = ycb¸->
Cr_g_èb
 + 256;

237 
ycb¸
->
Y_èb
 = ycb¸->
Cb_g_èb
 + 256;

239 { 
f1
 = 2-2*
LumaRed
; 
öt32
 
D1
 = 
	`FIX
(f1);

240 
f2
 = 
LumaRed
*
f1
/
LumaGªí
; 
öt32
 
D2
 = -
	`FIX
(f2);

241 
f3
 = 2-2*
LumaBlue
; 
öt32
 
D3
 = 
	`FIX
(f3);

242 
f4
 = 
LumaBlue
*
f3
/
LumaGªí
; 
öt32
 
D4
 = -
	`FIX
(f4);

243 
x
;

245 #unde‡
LumaBlue


246 #unde‡
LumaGªí


247 #unde‡
LumaRed


256 
i
 = 0, 
x
 = -128; i < 256; i++, x++) {

257 
öt32
 
Cr
 = (öt32)
	`Code2V
(
x
, 
ªfBœckWhôe
[4] - 128.0F,

258 
ªfBœckWhôe
[5] - 128.0F, 127);

259 
öt32
 
Cb
 = (öt32)
	`Code2V
(
x
, 
ªfBœckWhôe
[2] - 128.0F,

260 
ªfBœckWhôe
[3] - 128.0F, 127);

262 
ycb¸
->
Cr_r_èb
[
i
] = (
öt32
)((
D1
*
Cr
 + 
ONE_HALF
)>>
SHIFT
);

263 
ycb¸
->
Cb_b_èb
[
i
] = (
öt32
)((
D3
*
Cb
 + 
ONE_HALF
)>>
SHIFT
);

264 
ycb¸
->
Cr_g_èb
[
i
] = 
D2
*
Cr
;

265 
ycb¸
->
Cb_g_èb
[
i
] = 
D4
*
Cb
 + 
ONE_HALF
;

266 
ycb¸
->
Y_èb
[
i
] =

267 (
öt32
)
	`Code2V
(
x
 + 128, 
ªfBœckWhôe
[0],ÑefBlackWhite[1], 255);

272 
	}
}

273 #unde‡
HICLAMP


274 #unde‡
CLAMP


275 #unde‡
Code2V


276 #unde‡
SHIFT


277 #unde‡
ONE_HALF


278 #unde‡
FIX


	@libtiff/tif_compress.c

32 
	~"tiffi›.h
"

35 
	$TIFFNoEncode
(
TIFF
* 
tif
, c⁄° * 
mëhod
)

37 c⁄° 
TIFFCodec
* 
c
 = 
	`TIFFFödCODEC
(
tif
->
tif_dú
.
td_com¥essi⁄
);

39 i‡(
c
) {

40 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

42 
c
->
«me
, 
mëhod
);

44 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

46 
tif
->
tif_dú
.
td_com¥essi⁄
, 
mëhod
);

49 
	}
}

52 
	$_TIFFNoRowEncode
(
TIFF
* 
tif
, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

54 (Ë
µ
; (Ë
cc
; (Ë
s
;

55  (
	`TIFFNoEncode
(
tif
, "scanline"));

56 
	}
}

59 
	$_TIFFNoSåùEncode
(
TIFF
* 
tif
, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

61 (Ë
µ
; (Ë
cc
; (Ë
s
;

62  (
	`TIFFNoEncode
(
tif
, "strip"));

63 
	}
}

66 
	$_TIFFNoTûeEncode
(
TIFF
* 
tif
, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

68 (Ë
µ
; (Ë
cc
; (Ë
s
;

69  (
	`TIFFNoEncode
(
tif
, "tile"));

70 
	}
}

73 
	$TIFFNoDecode
(
TIFF
* 
tif
, c⁄° * 
mëhod
)

75 c⁄° 
TIFFCodec
* 
c
 = 
	`TIFFFödCODEC
(
tif
->
tif_dú
.
td_com¥essi⁄
);

77 i‡(
c
)

78 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

80 
c
->
«me
, 
mëhod
);

82 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

84 
tif
->
tif_dú
.
td_com¥essi⁄
, 
mëhod
);

86 
	}
}

89 
	$_TIFFNoFixupTags
(
TIFF
* 
tif
)

91 (Ë
tif
;

93 
	}
}

96 
	$_TIFFNoRowDecode
(
TIFF
* 
tif
, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

98 (Ë
µ
; (Ë
cc
; (Ë
s
;

99  (
	`TIFFNoDecode
(
tif
, "scanline"));

100 
	}
}

103 
	$_TIFFNoSåùDecode
(
TIFF
* 
tif
, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

105 (Ë
µ
; (Ë
cc
; (Ë
s
;

106  (
	`TIFFNoDecode
(
tif
, "strip"));

107 
	}
}

110 
	$_TIFFNoTûeDecode
(
TIFF
* 
tif
, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

112 (Ë
µ
; (Ë
cc
; (Ë
s
;

113  (
	`TIFFNoDecode
(
tif
, "tile"));

114 
	}
}

117 
	$_TIFFNoSìk
(
TIFF
* 
tif
, 
uöt32
 
off
)

119 (Ë
off
;

120 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

123 
	}
}

126 
	$_TIFFNoPªCode
(
TIFF
* 
tif
, 
uöt16
 
s
)

128 (Ë
tif
; (Ë
s
;

130 
	}
}

132 
	$_TIFFåue
(
TIFF
* 
tif
Ë{ (Ëtif;  (1); 
	}
}

133 
	$_TIFFvoid
(
TIFF
* 
tif
Ë{ (Ëtif; 
	}
}

136 
	$_TIFFSëDeÁu…Com¥essi⁄Sèã
(
TIFF
* 
tif
)

138 
tif
->
tif_fixu±ags
 = 
_TIFFNoFixupTags
;

139 
tif
->
tif_decode°©us
 = 
TRUE
;

140 
tif
->
tif_£tupdecode
 = 
_TIFFåue
;

141 
tif
->
tif_¥edecode
 = 
_TIFFNoPªCode
;

142 
tif
->
tif_decodîow
 = 
_TIFFNoRowDecode
;

143 
tif
->
tif_decode°rù
 = 
_TIFFNoSåùDecode
;

144 
tif
->
tif_decodëûe
 = 
_TIFFNoTûeDecode
;

145 
tif
->
tif_ícode°©us
 = 
TRUE
;

146 
tif
->
tif_£tu≥ncode
 = 
_TIFFåue
;

147 
tif
->
tif_¥ìncode
 = 
_TIFFNoPªCode
;

148 
tif
->
tif_po°ícode
 = 
_TIFFåue
;

149 
tif
->
tif_ícodîow
 = 
_TIFFNoRowEncode
;

150 
tif
->
tif_ícode°rù
 = 
_TIFFNoSåùEncode
;

151 
tif
->
tif_ícodëûe
 = 
_TIFFNoTûeEncode
;

152 
tif
->
tif_˛o£
 = 
_TIFFvoid
;

153 
tif
->
tif_£ek
 = 
_TIFFNoSìk
;

154 
tif
->
tif_˛ónup
 = 
_TIFFvoid
;

155 
tif
->
tif_def°rùsize
 = 
_TIFFDeÁu…SåùSize
;

156 
tif
->
tif_de·ûesize
 = 
_TIFFDeÁu…TûeSize
;

157 
tif
->
tif_Êags
 &~(
TIFF_NOBITREV
|
TIFF_NOREADRAW
);

158 
	}
}

161 
	$TIFFSëCom¥essi⁄Scheme
(
TIFF
* 
tif
, 
scheme
)

163 c⁄° 
TIFFCodec
 *
c
 = 
	`TIFFFödCODEC
((
uöt16
Ë
scheme
);

165 
	`_TIFFSëDeÁu…Com¥essi⁄Sèã
(
tif
);

172  (
c
 ? (*c->
öô
)(
tif
, 
scheme
) : 1);

173 
	}
}

180 
	s_codec
 {

181 
_codec
* 
	m√xt
;

182 
TIFFCodec
* 
	möfo
;

183 } 
	tcodec_t
;

184 
codec_t
* 
	gªgi°îedCODECS
 = 
NULL
;

186 c⁄° 
TIFFCodec
*

187 
	$TIFFFödCODEC
(
uöt16
 
scheme
)

189 c⁄° 
TIFFCodec
* 
c
;

190 
codec_t
* 
cd
;

192 
cd
 = 
ªgi°îedCODECS
; cd; cd = cd->
√xt
)

193 i‡(
cd
->
öfo
->
scheme
 == scheme)

194  ((c⁄° 
TIFFCodec
*Ë
cd
->
öfo
);

195 
c
 = 
_TIFFBuûtöCODECS
; c->
«me
; c++)

196 i‡(
c
->
scheme
 == scheme)

197  (
c
);

198  ((c⁄° 
TIFFCodec
*) 0);

199 
	}
}

201 
TIFFCodec
*

202 
	$TIFFRegi°îCODEC
(
uöt16
 
scheme
, c⁄° * 
«me
, 
TIFFInôMëhod
 
öô
)

204 
codec_t
* 
cd
 = (codec_t*)

205 
	`_TIFFmÆloc
((
tmsize_t
)( (
codec_t
Ë+  (
TIFFCodec
Ë+ 
	`°æí
(
«me
)+1));

207 i‡(
cd
 !
NULL
) {

208 
cd
->
öfo
 = (
TIFFCodec
*Ë((
uöt8
*Ëcd +  (
codec_t
));

209 
cd
->
öfo
->
«me
 = (*)

210 ((
uöt8
*Ë
cd
->
öfo
 +  (
TIFFCodec
));

211 
	`°r˝y
(
cd
->
öfo
->
«me
,Çame);

212 
cd
->
öfo
->
scheme
 = scheme;

213 
cd
->
öfo
->
öô
 = init;

214 
cd
->
√xt
 = 
ªgi°îedCODECS
;

215 
ªgi°îedCODECS
 = 
cd
;

217 
	`TIFFEº‹Ext
(0, "TIFFRegisterCODEC",

218 "Nÿ•a˚Åÿªgi°î com¥essi⁄ schemê%s", 
«me
);

219  
NULL
;

221  (
cd
->
öfo
);

222 
	}
}

225 
	$TIFFUnRegi°îCODEC
(
TIFFCodec
* 
c
)

227 
codec_t
* 
cd
;

228 
codec_t
** 
pcd
;

230 
pcd
 = &
ªgi°îedCODECS
; (
cd
 = *pcd);Öcd = &cd->
√xt
)

231 i‡(
cd
->
öfo
 =
c
) {

232 *
pcd
 = 
cd
->
√xt
;

233 
	`_TIFF‰ì
(
cd
);

236 
	`TIFFEº‹Ext
(0, "TIFFUnRegisterCODEC",

237 "C™nŸÑemovêcom¥essi⁄ schemê%s;ÇŸÑegi°îed", 
c
->
«me
);

238 
	}
}

252 
TIFFCodec
*

253 
	$TIFFGëC⁄figuªdCODECs
()

255 
i
 = 1;

256 
codec_t
 *
cd
;

257 c⁄° 
TIFFCodec
* 
c
;

258 
TIFFCodec
* 
codecs
 = 
NULL
;

259 
TIFFCodec
* 
√w_codecs
;

261 
cd
 = 
ªgi°îedCODECS
; cd; cd = cd->
√xt
) {

262 
√w_codecs
 = (
TIFFCodec
 *)

263 
	`_TIFFªÆloc
(
codecs
, 
i
 * (
TIFFCodec
));

264 i‡(!
√w_codecs
) {

265 
	`_TIFF‰ì
 (
codecs
);

266  
NULL
;

268 
codecs
 = 
√w_codecs
;

269 
	`_TIFFmem˝y
(
codecs
 + 
i
 - 1, 
cd
, (
TIFFCodec
));

270 
i
++;

272 
c
 = 
_TIFFBuûtöCODECS
; c->
«me
; c++) {

273 i‡(
	`TIFFIsCODECC⁄figuªd
(
c
->
scheme
)) {

274 
√w_codecs
 = (
TIFFCodec
 *)

275 
	`_TIFFªÆloc
(
codecs
, 
i
 * (
TIFFCodec
));

276 i‡(!
√w_codecs
) {

277 
	`_TIFF‰ì
 (
codecs
);

278  
NULL
;

280 
codecs
 = 
√w_codecs
;

281 
	`_TIFFmem˝y
(
codecs
 + 
i
 - 1, (c⁄° *)
c
, (
TIFFCodec
));

282 
i
++;

286 
√w_codecs
 = (
TIFFCodec
 *Ë
	`_TIFFªÆloc
(
codecs
, 
i
 * (TIFFCodec));

287 i‡(!
√w_codecs
) {

288 
	`_TIFF‰ì
 (
codecs
);

289  
NULL
;

291 
codecs
 = 
√w_codecs
;

292 
	`_TIFFmem£t
(
codecs
 + 
i
 - 1, 0, (
TIFFCodec
));

294  
codecs
;

295 
	}
}

	@libtiff/tif_config.h

8 
	#CCITT_SUPPORT
 1

	)

12 
	#CHECK_JPEG_YCBCR_SUBSAMPLING
 1

	)

18 
	#CXX_SUPPORT
 1

	)

23 
	#DEFAULT_EXTRASAMPLE_AS_ALPHA
 1

	)

29 
	#HAVE_ASSERT_H
 1

	)

32 
	#HAVE_DLFCN_H
 1

	)

35 
	#HAVE_FCNTL_H
 1

	)

38 
	#HAVE_FLOOR
 1

	)

41 
	#HAVE_GETOPT
 1

	)

57 
	#HAVE_IEEEFP
 1

	)

69 
	#HAVE_INTTYPES_H
 1

	)

75 
	#HAVE_ISASCII
 1

	)

81 
	#HAVE_LFIND
 1

	)

84 
	#HAVE_LIBC
 1

	)

87 
	#HAVE_LIBM
 1

	)

90 
	#HAVE_LIMITS_H
 1

	)

93 
	#HAVE_MALLOC_H
 1

	)

96 
	#HAVE_MEMMOVE
 1

	)

99 
	#HAVE_MEMORY_H
 1

	)

102 
	#HAVE_MEMSET
 1

	)

105 
	#HAVE_MMAP
 1

	)

114 
	#HAVE_POW
 1

	)

117 
	#HAVE_PTHREAD
 1

	)

120 
	#HAVE_SEARCH_H
 1

	)

126 
	#HAVE_SQRT
 1

	)

129 
	#HAVE_STDINT_H
 1

	)

132 
	#HAVE_STDLIB_H
 1

	)

135 
	#HAVE_STRCASECMP
 1

	)

138 
	#HAVE_STRCHR
 1

	)

141 
	#HAVE_STRINGS_H
 1

	)

144 
	#HAVE_STRING_H
 1

	)

147 
	#HAVE_STRRCHR
 1

	)

150 
	#HAVE_STRSTR
 1

	)

153 
	#HAVE_STRTOL
 1

	)

156 
	#HAVE_STRTOUL
 1

	)

159 
	#HAVE_STRTOULL
 1

	)

162 
	#HAVE_SYS_STAT_H
 1

	)

165 
	#HAVE_SYS_TIME_H
 1

	)

168 
	#HAVE_SYS_TYPES_H
 1

	)

171 
	#HAVE_UNISTD_H
 1

	)

181 
	#HOST_BIGENDIAN
 0

	)

184 
	#HOST_FILLORDER
 
FILLORDER_LSB2MSB


	)

193 
	#JPEG_SUPPORT
 1

	)

199 
	#LOGLUV_SUPPORT
 1

	)

203 
	#LT_OBJDIR
 ".libs/"

	)

206 
	#LZMA_SUPPORT
 1

	)

209 
	#LZW_SUPPORT
 1

	)

212 
	#MDI_SUPPORT
 1

	)

215 
	#NEXT_SUPPORT
 1

	)

221 
	#OJPEG_SUPPORT
 1

	)

224 
	#PACKAGE
 "tiff"

	)

227 
	#PACKAGE_BUGREPORT
 "tiff@li°s.m≠toﬁs.‹g"

	)

230 
	#PACKAGE_NAME
 "LibTIFF So·w¨e"

	)

233 
	#PACKAGE_STRING
 "LibTIFF So·w¨ê4.0.1"

	)

236 
	#PACKAGE_TARNAME
 "tiff"

	)

239 
	#PACKAGE_URL
 ""

	)

242 
	#PACKAGE_VERSION
 "4.0.1"

	)

245 
	#PACKBITS_SUPPORT
 1

	)

248 
	#PIXARLOG_SUPPORT
 1

	)

255 
	#SIZEOF_SIGNED_INT
 4

	)

258 
	#SIZEOF_SIGNED_LONG
 8

	)

261 
	#SIZEOF_SIGNED_LONG_LONG
 8

	)

264 
	#SIZEOF_SIGNED_SHORT
 2

	)

267 
	#SIZEOF_UNSIGNED_CHAR_P
 8

	)

270 
	#SIZEOF_UNSIGNED_INT
 4

	)

273 
	#SIZEOF_UNSIGNED_LONG
 8

	)

276 
	#SIZEOF_UNSIGNED_LONG_LONG
 8

	)

279 
	#SIZEOF_UNSIGNED_SHORT
 2

	)

282 
	#STDC_HEADERS
 1

	)

286 
	#STRIPCHOP_DEFAULT
 
TIFF_STRIPCHOP


	)

289 
	#STRIP_SIZE_DEFAULT
 8192

	)

292 
	#SUBIFD_SUPPORT
 1

	)

295 
	#THUNDER_SUPPORT
 1

	)

298 
	#TIFF_INT16_T
 sig√d 

	)

301 
	#TIFF_INT32_FORMAT
 "%d"

	)

304 
	#TIFF_INT32_T
 sig√d 

	)

307 
	#TIFF_INT64_FORMAT
 "%ld"

	)

310 
	#TIFF_INT64_T
 sig√d 

	)

313 
	#TIFF_INT8_T
 sig√d 

	)

316 
	#TIFF_PTRDIFF_FORMAT
 "%ld"

	)

319 
	#TIFF_PTRDIFF_T
 
±rdiff_t


	)

322 
	#TIFF_SSIZE_FORMAT
 "%ld"

	)

325 
	#TIFF_SSIZE_T
 sig√d 

	)

328 
	#TIFF_UINT16_T
 

	)

331 
	#TIFF_UINT32_FORMAT
 "%u"

	)

334 
	#TIFF_UINT32_T
 

	)

337 
	#TIFF_UINT64_FORMAT
 "%lu"

	)

340 
	#TIFF_UINT64_T
 

	)

343 
	#TIFF_UINT8_T
 

	)

346 
	#TIME_WITH_SYS_TIME
 1

	)

355 
	#VERSION
 "4.0.1"

	)

359 #i‡
deföed
 
AC_APPLE_UNIVERSAL_BUILD


360 #i‡
deföed
 
__BIG_ENDIAN__


361 
	#WORDS_BIGENDIAN
 1

	)

364 #i‚de‡
WORDS_BIGENDIAN


370 
	#X_DISPLAY_MISSING
 1

	)

373 
	#ZIP_SUPPORT
 1

	)

386 #i‚de‡
__˝lu•lus


	@libtiff/tif_config.vc.h

2 
	#HAVE_ASSERT_H
 1

	)

5 
	#HAVE_FCNTL_H
 1

	)

9 
	#HAVE_IEEEFP
 1

	)

12 
	#HAVE_JBG_NEWLEN
 1

	)

15 
	#HAVE_STRING_H
 1

	)

18 
	#HAVE_SYS_TYPES_H
 1

	)

21 
	#HAVE_IO_H
 1

	)

24 
	#HAVE_SEARCH_H
 1

	)

27 
	#HAVE_SETMODE
 1

	)

30 
	#SIZEOF_INT
 4

	)

33 
	#SIZEOF_LONG
 4

	)

36 
	#TIFF_INT64_FORMAT
 "%I64d"

	)

39 
	#TIFF_INT64_T
 sig√d 
__öt64


	)

42 
	#TIFF_UINT64_FORMAT
 "%I64u"

	)

45 
	#TIFF_UINT64_T
 
__öt64


	)

48 
	#HOST_FILLORDER
 
FILLORDER_LSB2MSB


	)

50 
	#¢¥ötf
 
_¢¥ötf


	)

58 #i‚de‡
__˝lu•lus


59 #i‚de‡
ölöe


60 
	#ölöe
 
__ölöe


	)

64 
	#lföd
 
_lföd


	)

	@libtiff/tif_config.wince.h

6 #i‚de‡
_WIN32_WCE


7 #îr‹ 
This
 
vîsi⁄
 
of
 
tif_c⁄fig
.
h
 
hódî
 
is
 
dediˇãd
 
Wödows
 
CE
 
∂©f‹m
!

11 
	#HAVE_ASSERT_H
 1

	)

14 
	#HAVE_FCNTL_H
 1

	)

18 
	#HAVE_IEEEFP
 1

	)

21 
	#HAVE_JBG_NEWLEN
 1

	)

24 
	#HAVE_STRING_H
 1

	)

27 #unde‡
HAVE_SYS_TYPES_H


30 
	#HAVE_IO_H
 1

	)

33 
	#HAVE_SEARCH_H
 1

	)

36 
	#HAVE_SETMODE
 1

	)

39 
	#HAVE_BSEARCH
 1

	)

40 
	#b£¨ch
 
w˚ex_b£¨ch


	)

43 
	#HAVE_LFIND
 1

	)

44 
	#lföd
 
w˚ex_lföd


	)

47 
	#SIZEOF_INT
 4

	)

50 
	#HOST_FILLORDER
 
FILLORDER_LSB2MSB


	)

58 #i‚de‡
__˝lu•lus


59 #i‚de‡
ölöe


60 
	#ölöe
 
__ölöe


	)

	@libtiff/tif_dir.c

33 
	~"tiffi›.h
"

38 
	#DATATYPE_VOID
 0

	)

39 
	#DATATYPE_INT
 1

	)

40 
	#DATATYPE_UINT
 2

	)

41 
	#DATATYPE_IEEEFP
 3

	)

44 
	$£tByãAºay
(** 
vµ
, * 
vp
, 
size_t
 
nmemb
, size_à
ñem_size
)

46 i‡(*
vµ
)

47 
	`_TIFF‰ì
(*
vµ
), *vpp = 0;

48 i‡(
vp
) {

49 
tmsize_t
 
byãs
 = (tmsize_t)(
nmemb
 * 
ñem_size
);

50 i‡(
ñem_size
 && 
byãs
 /ÉÀm_sizê=
nmemb
)

51 *
vµ
 = (*Ë
	`_TIFFmÆloc
(
byãs
);

52 i‡(*
vµ
)

53 
	`_TIFFmem˝y
(*
vµ
, 
vp
, 
byãs
);

55 
	}
}

56 
	$_TIFF£tByãAºay
(** 
vµ
, * 
vp
, 
uöt32
 
n
)

57 { 
	`£tByãAºay
(
vµ
, 
vp
, 
n
, 1); 
	}
}

58 
	$_TIFF£tSåög
(** 
˝p
, * 
˝
)

59 { 
	`£tByãAºay
((**Ë
˝p
, (*Ë
˝
, 
	`°æí
(˝)+1, 1); 
	}
}

60 
	$_TIFF£tNSåög
(** 
˝p
, * 
˝
, 
uöt32
 
n
)

61 { 
	`£tByãAºay
((**Ë
˝p
, (*Ë
˝
, 
n
, 1); 
	}
}

62 
	$_TIFF£tSh‹tAºay
(
uöt16
** 
wµ
, uöt16* 
wp
, 
uöt32
 
n
)

63 { 
	`£tByãAºay
((**Ë
wµ
, (*Ë
wp
, 
n
,  (
uöt16
)); 
	}
}

64 
	$_TIFF£tL⁄gAºay
(
uöt32
** 
Õp
, uöt32* 
Õ
, uöt32 
n
)

65 { 
	`£tByãAºay
((**Ë
Õp
, (*Ë
Õ
, 
n
,  (
uöt32
)); 
	}
}

66 
	$_TIFF£tL⁄g8Aºay
(
uöt64
** 
Õp
, uöt64* 
Õ
, 
uöt32
 
n
)

67 { 
	`£tByãAºay
((**Ë
Õp
, (*Ë
Õ
, 
n
,  (
uöt64
)); 
	}
}

68 
	$_TIFF£tFlﬂtAºay
(** 
Âp
, * 
Â
, 
uöt32
 
n
)

69 { 
	`£tByãAºay
((**Ë
Âp
, (*Ë
Â
, 
n
,  ()); 
	}
}

70 
	$_TIFF£tDoubÀAºay
(** 
dµ
, * 
dp
, 
uöt32
 
n
)

71 { 
	`£tByãAºay
((**Ë
dµ
, (*Ë
dp
, 
n
,  ()); 
	}
}

74 
	$£tDoubÀAºayO√VÆue
(** 
vµ
, 
vÆue
, 
size_t
 
nmemb
)

76 i‡(*
vµ
)

77 
	`_TIFF‰ì
(*
vµ
);

78 *
vµ
 = 
	`_TIFFmÆloc
(
nmemb
*());

79 i‡(*
vµ
)

81 
nmemb
--)

82 ((*)*
vµ
)[
nmemb
] = 
vÆue
;

84 
	}
}

90 
	$£tExåaSam∂es
(
TIFFDúe˘‹y
* 
td
, 
va_li°
 
≠
, 
uöt32
* 
v
)

93 
	#EXTRASAMPLE_COREL_UNASSALPHA
 999

	)

95 
uöt16
* 
va
;

96 
uöt32
 
i
;

98 *
v
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

99 i‡((
uöt16
Ë*
v
 > 
td
->
td_ßm∂e•îpixñ
)

101 
va
 = 
	`va_¨g
(
≠
, 
uöt16
*);

102 i‡(*
v
 > 0 && 
va
 =
NULL
)

104 
i
 = 0; i < *
v
; i++) {

105 i‡(
va
[
i
] > 
EXTRASAMPLE_UNASSALPHA
) {

112 i‡(
va
[
i
] =
EXTRASAMPLE_COREL_UNASSALPHA
)

113 
va
[
i
] = 
EXTRASAMPLE_UNASSALPHA
;

118 
td
->
td_exåaßm∂es
 = (
uöt16
Ë*
v
;

119 
	`_TIFF£tSh‹tAºay
(&
td
->
td_ßm∂eöfo
, 
va
,Åd->
td_exåaßm∂es
);

122 #unde‡
EXTRASAMPLE_COREL_UNASSALPHA


123 
	}
}

125 
uöt32


126 
	$checkInkNamesSåög
(
TIFF
* 
tif
, 
uöt32
 
¶í
, c⁄° * 
s
)

128 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

129 
uöt16
 
i
 = 
td
->
td_ßm∂e•îpixñ
;

131 i‡(
¶í
 > 0) {

132 c⁄° * 
ï
 = 
s
+
¶í
;

133 c⁄° * 
˝
 = 
s
;

134 ; 
i
 > 0; i--) {

135 ; *
˝
 != '\0'; cp++)

136 i‡(
˝
 >
ï
)

137 
bad
;

138 
˝
++;

140  ((
uöt32
)(
˝
-
s
));

142 
bad
:

143 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "TIFFSetField",

145 
tif
->
tif_«me
,

146 
td
->
td_ßm∂e•îpixñ
,

147 
td
->
td_ßm∂e•îpixñ
-
i
);

149 
	}
}

152 
	$_TIFFVSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

154 c⁄° 
moduÀ
[] = "_TIFFVSetField";

156 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

157 
°©us
 = 1;

158 
uöt32
 
v32
, 
i
, 
v
;

159 * 
s
;

161 
èg
) {

162 
TIFFTAG_SUBFILETYPE
:

163 
td
->
td_subfûëy≥
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

165 
TIFFTAG_IMAGEWIDTH
:

166 
td
->
td_imagewidth
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

168 
TIFFTAG_IMAGELENGTH
:

169 
td
->
td_imagñígth
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

171 
TIFFTAG_BITSPERSAMPLE
:

172 
td
->
td_bô•îßm∂e
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

180 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
) {

181 i‡(
td
->
td_bô•îßm∂e
 == 8)

182 
tif
->
tif_po°decode
 = 
_TIFFNoPo°Decode
;

183 i‡(
td
->
td_bô•îßm∂e
 == 16)

184 
tif
->
tif_po°decode
 = 
_TIFFSwab16BôD©a
;

185 i‡(
td
->
td_bô•îßm∂e
 == 24)

186 
tif
->
tif_po°decode
 = 
_TIFFSwab24BôD©a
;

187 i‡(
td
->
td_bô•îßm∂e
 == 32)

188 
tif
->
tif_po°decode
 = 
_TIFFSwab32BôD©a
;

189 i‡(
td
->
td_bô•îßm∂e
 == 64)

190 
tif
->
tif_po°decode
 = 
_TIFFSwab64BôD©a
;

191 i‡(
td
->
td_bô•îßm∂e
 == 128)

192 
tif
->
tif_po°decode
 = 
_TIFFSwab64BôD©a
;

195 
TIFFTAG_COMPRESSION
:

196 
v
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

202 i‡(
	`TIFFFõldSë
(
tif
, 
FIELD_COMPRESSION
)) {

203 i‡((
uöt32
)
td
->
td_com¥essi⁄
 =
v
)

205 (*
tif
->
tif_˛ónup
)(tif);

206 
tif
->
tif_Êags
 &~
TIFF_CODERSETUP
;

211 if–(
°©us
 = 
	`TIFFSëCom¥essi⁄Scheme
(
tif
, 
v
)) != 0 )

212 
td
->
td_com¥essi⁄
 = (
uöt16
Ë
v
;

214 
°©us
 = 0;

216 
TIFFTAG_PHOTOMETRIC
:

217 
td
->
td_phŸomëric
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

219 
TIFFTAG_THRESHHOLDING
:

220 
td
->
td_thªshhﬁdög
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

222 
TIFFTAG_FILLORDER
:

223 
v
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

224 i‡(
v
 !
FILLORDER_LSB2MSB
 && v !
FILLORDER_MSB2LSB
)

225 
badvÆue
;

226 
td
->
td_fûl‹dî
 = (
uöt16
Ë
v
;

228 
TIFFTAG_ORIENTATION
:

229 
v
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

230 i‡(
v
 < 
ORIENTATION_TOPLEFT
 || 
ORIENTATION_LEFTBOT
 < v)

231 
badvÆue
;

233 
td
->
td_‹õ¡©i⁄
 = (
uöt16
Ë
v
;

235 
TIFFTAG_SAMPLESPERPIXEL
:

236 
v
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

237 i‡(
v
 == 0)

238 
badvÆue
;

239 
td
->
td_ßm∂e•îpixñ
 = (
uöt16
Ë
v
;

241 
TIFFTAG_ROWSPERSTRIP
:

242 
v32
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

243 i‡(
v32
 == 0)

244 
badvÆue32
;

245 
td
->
td_row•î°rù
 = 
v32
;

246 i‡(!
	`TIFFFõldSë
(
tif
, 
FIELD_TILEDIMENSIONS
)) {

247 
td
->
td_tûñígth
 = 
v32
;

248 
td
->
td_tûewidth
 =Åd->
td_imagewidth
;

251 
TIFFTAG_MINSAMPLEVALUE
:

252 
td
->
td_mößm∂evÆue
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

254 
TIFFTAG_MAXSAMPLEVALUE
:

255 
td
->
td_maxßm∂evÆue
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

257 
TIFFTAG_SMINSAMPLEVALUE
:

258 i‡(
tif
->
tif_Êags
 & 
TIFF_PERSAMPLE
)

259 
	`_TIFF£tDoubÀAºay
(&
td
->
td_smößm∂evÆue
, 
	`va_¨g
(
≠
, *),Åd->
td_ßm∂e•îpixñ
);

261 
	`£tDoubÀAºayO√VÆue
(&
td
->
td_smößm∂evÆue
, 
	`va_¨g
(
≠
, ),Åd->
td_ßm∂e•îpixñ
);

263 
TIFFTAG_SMAXSAMPLEVALUE
:

264 i‡(
tif
->
tif_Êags
 & 
TIFF_PERSAMPLE
)

265 
	`_TIFF£tDoubÀAºay
(&
td
->
td_smaxßm∂evÆue
, 
	`va_¨g
(
≠
, *),Åd->
td_ßm∂e•îpixñ
);

267 
	`£tDoubÀAºayO√VÆue
(&
td
->
td_smaxßm∂evÆue
, 
	`va_¨g
(
≠
, ),Åd->
td_ßm∂e•îpixñ
);

269 
TIFFTAG_XRESOLUTION
:

270 
td
->
td_xªsﬁuti⁄
 = (Ë
	`va_¨g
(
≠
, );

272 
TIFFTAG_YRESOLUTION
:

273 
td
->
td_yªsﬁuti⁄
 = (Ë
	`va_¨g
(
≠
, );

275 
TIFFTAG_PLANARCONFIG
:

276 
v
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

277 i‡(
v
 !
PLANARCONFIG_CONTIG
 && v !
PLANARCONFIG_SEPARATE
)

278 
badvÆue
;

279 
td
->
td_∂™¨c⁄fig
 = (
uöt16
Ë
v
;

281 
TIFFTAG_XPOSITION
:

282 
td
->
td_xposôi⁄
 = (Ë
	`va_¨g
(
≠
, );

284 
TIFFTAG_YPOSITION
:

285 
td
->
td_yposôi⁄
 = (Ë
	`va_¨g
(
≠
, );

287 
TIFFTAG_RESOLUTIONUNIT
:

288 
v
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

289 i‡(
v
 < 
RESUNIT_NONE
 || 
RESUNIT_CENTIMETER
 < v)

290 
badvÆue
;

291 
td
->
td_ªsﬁuti⁄unô
 = (
uöt16
Ë
v
;

293 
TIFFTAG_PAGENUMBER
:

294 
td
->
td_∑gíumbî
[0] = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

295 
td
->
td_∑gíumbî
[1] = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

297 
TIFFTAG_HALFTONEHINTS
:

298 
td
->
td_hÆ·⁄ehöts
[0] = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

299 
td
->
td_hÆ·⁄ehöts
[1] = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

301 
TIFFTAG_COLORMAP
:

302 
v32
 = (
uöt32
)(1L<<
td
->
td_bô•îßm∂e
);

303 
	`_TIFF£tSh‹tAºay
(&
td
->
td_cﬁ‹m≠
[0], 
	`va_¨g
(
≠
, 
uöt16
*), 
v32
);

304 
	`_TIFF£tSh‹tAºay
(&
td
->
td_cﬁ‹m≠
[1], 
	`va_¨g
(
≠
, 
uöt16
*), 
v32
);

305 
	`_TIFF£tSh‹tAºay
(&
td
->
td_cﬁ‹m≠
[2], 
	`va_¨g
(
≠
, 
uöt16
*), 
v32
);

307 
TIFFTAG_EXTRASAMPLES
:

308 i‡(!
	`£tExåaSam∂es
(
td
, 
≠
, &
v
))

309 
badvÆue
;

311 
TIFFTAG_MATTEING
:

312 
td
->
td_exåaßm∂es
 = (((
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
)) != 0);

313 i‡(
td
->
td_exåaßm∂es
) {

314 
uöt16
 
sv
 = 
EXTRASAMPLE_ASSOCALPHA
;

315 
	`_TIFF£tSh‹tAºay
(&
td
->
td_ßm∂eöfo
, &
sv
, 1);

318 
TIFFTAG_TILEWIDTH
:

319 
v32
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

320 i‡(
v32
 % 16) {

321 i‡(
tif
->
tif_mode
 !
O_RDONLY
)

322 
badvÆue32
;

323 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

324 "N⁄°™d¨dÅûêwidth %d, c⁄vîàfûe", 
v32
);

326 
td
->
td_tûewidth
 = 
v32
;

327 
tif
->
tif_Êags
 |
TIFF_ISTILED
;

329 
TIFFTAG_TILELENGTH
:

330 
v32
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

331 i‡(
v32
 % 16) {

332 i‡(
tif
->
tif_mode
 !
O_RDONLY
)

333 
badvÆue32
;

334 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

335 "N⁄°™d¨dÅûêÀngth %d, c⁄vîàfûe", 
v32
);

337 
td
->
td_tûñígth
 = 
v32
;

338 
tif
->
tif_Êags
 |
TIFF_ISTILED
;

340 
TIFFTAG_TILEDEPTH
:

341 
v32
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

342 i‡(
v32
 == 0)

343 
badvÆue32
;

344 
td
->
td_tûedïth
 = 
v32
;

346 
TIFFTAG_DATATYPE
:

347 
v
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

348 
v
) {

349 
DATATYPE_VOID
: 
v
 = 
SAMPLEFORMAT_VOID
; ;

350 
DATATYPE_INT
: 
v
 = 
SAMPLEFORMAT_INT
; ;

351 
DATATYPE_UINT
: 
v
 = 
SAMPLEFORMAT_UINT
; ;

352 
DATATYPE_IEEEFP
: 
v
 = 
SAMPLEFORMAT_IEEEFP
;;

353 : 
badvÆue
;

355 
td
->
td_ßm∂ef‹m©
 = (
uöt16
Ë
v
;

357 
TIFFTAG_SAMPLEFORMAT
:

358 
v
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

359 i‡(
v
 < 
SAMPLEFORMAT_UINT
 || 
SAMPLEFORMAT_COMPLEXIEEEFP
 < v)

360 
badvÆue
;

361 
td
->
td_ßm∂ef‹m©
 = (
uöt16
Ë
v
;

364 if–
td
->
td_ßm∂ef‹m©
 =
SAMPLEFORMAT_COMPLEXINT


365 && 
td
->
td_bô•îßm∂e
 == 32

366 && 
tif
->
tif_po°decode
 =
_TIFFSwab32BôD©a
 )

367 
tif
->
tif_po°decode
 = 
_TIFFSwab16BôD©a
;

368 if–(
td
->
td_ßm∂ef‹m©
 =
SAMPLEFORMAT_COMPLEXINT


369 || 
td
->
td_ßm∂ef‹m©
 =
SAMPLEFORMAT_COMPLEXIEEEFP
)

370 && 
td
->
td_bô•îßm∂e
 == 64

371 && 
tif
->
tif_po°decode
 =
_TIFFSwab64BôD©a
 )

372 
tif
->
tif_po°decode
 = 
_TIFFSwab32BôD©a
;

374 
TIFFTAG_IMAGEDEPTH
:

375 
td
->
td_imagedïth
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

377 
TIFFTAG_SUBIFD
:

378 i‡((
tif
->
tif_Êags
 & 
TIFF_INSUBIFD
) == 0) {

379 
td
->
td_nsubifd
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

380 
	`_TIFF£tL⁄g8Aºay
(&
td
->
td_subifd
, (
uöt64
*Ë
	`va_¨g
(
≠
, uint64*),

381 (Ë
td
->
td_nsubifd
);

383 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

385 
tif
->
tif_«me
);

386 
°©us
 = 0;

389 
TIFFTAG_YCBCRPOSITIONING
:

390 
td
->
td_ycb¸posôi⁄ög
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

392 
TIFFTAG_YCBCRSUBSAMPLING
:

393 
td
->
td_ycb¸subßm∂ög
[0] = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

394 
td
->
td_ycb¸subßm∂ög
[1] = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

396 
TIFFTAG_TRANSFERFUNCTION
:

397 
v
 = (
td
->
td_ßm∂e•îpixñ
 -Åd->
td_exåaßm∂es
) > 1 ? 3 : 1;

398 
i
 = 0; i < 
v
; i++)

399 
	`_TIFF£tSh‹tAºay
(&
td
->
td_å™s„rfun˘i⁄
[
i
],

400 
	`va_¨g
(
≠
, 
uöt16
*), 1L<<
td
->
td_bô•îßm∂e
);

402 
TIFFTAG_REFERENCEBLACKWHITE
:

404 
	`_TIFF£tFlﬂtAºay
(&
td
->
td_ªfbœckwhôe
, 
	`va_¨g
(
≠
, *), 6);

406 
TIFFTAG_INKNAMES
:

407 
v
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

408 
s
 = 
	`va_¨g
(
≠
, *);

409 
v
 = 
	`checkInkNamesSåög
(
tif
, v, 
s
);

410 
°©us
 = 
v
 > 0;

411 if–
v
 > 0 ) {

412 
	`_TIFF£tNSåög
(&
td
->
td_ök«mes
, 
s
, 
v
);

413 
td
->
td_ök«me¶í
 = 
v
;

416 
TIFFTAG_PERSAMPLE
:

417 
v
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

418 if–
v
 =
PERSAMPLE_MULTI
 )

419 
tif
->
tif_Êags
 |
TIFF_PERSAMPLE
;

421 
tif
->
tif_Êags
 &~
TIFF_PERSAMPLE
;

424 
TIFFTagVÆue
 *
tv
;

425 
tv_size
, 
iCu°om
;

426 c⁄° 
TIFFFõld
 *
fù
 = 
	`TIFFFödFõld
(
tif
, 
èg
, 
TIFF_ANY
);

437 if(
fù
 =
NULL
 || fù->
fõld_bô
 !
FIELD_CUSTOM
) {

438 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

440 
tif
->
tif_«me
, 
	`isP£udoTag
(
èg
) ? "pseudo-" : "",

441 
fù
 ? fù->
fõld_«me
 : "Unknown");

442 
°©us
 = 0;

449 
tv
 = 
NULL
;

450 
iCu°om
 = 0; iCu°om < 
td
->
td_cu°omVÆueCou¡
; iCustom++) {

451 i‡(
td
->
td_cu°omVÆues
[
iCu°om
].
öfo
->
fõld_èg
 =
èg
) {

452 
tv
 = 
td
->
td_cu°omVÆues
 + 
iCu°om
;

453 i‡(
tv
->
vÆue
 !
NULL
) {

454 
	`_TIFF‰ì
(
tv
->
vÆue
);

455 
tv
->
vÆue
 = 
NULL
;

464 if(
tv
 =
NULL
) {

465 
TIFFTagVÆue
 *
√w_cu°omVÆues
;

467 
td
->
td_cu°omVÆueCou¡
++;

468 
√w_cu°omVÆues
 = (
TIFFTagVÆue
 *)

469 
	`_TIFFªÆloc
(
td
->
td_cu°omVÆues
,

470 (
TIFFTagVÆue
Ë* 
td
->
td_cu°omVÆueCou¡
);

471 i‡(!
√w_cu°omVÆues
) {

472 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

474 
tif
->
tif_«me
);

475 
°©us
 = 0;

476 
íd
;

479 
td
->
td_cu°omVÆues
 = 
√w_cu°omVÆues
;

481 
tv
 = 
td
->
td_cu°omVÆues
 + (td->
td_cu°omVÆueCou¡
 - 1);

482 
tv
->
öfo
 = 
fù
;

483 
tv
->
vÆue
 = 
NULL
;

484 
tv
->
cou¡
 = 0;

490 
tv_size
 = 
	`_TIFFD©aSize
(
fù
->
fõld_ty≥
);

491 i‡(
tv_size
 == 0) {

492 
°©us
 = 0;

493 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

495 
tif
->
tif_«me
, 
fù
->
fõld_ty≥
,

496 
fù
->
fõld_«me
);

497 
íd
;

500 i‡(
fù
->
fõld_ty≥
 =
TIFF_ASCII
)

502 
uöt32
 
ma
;

503 * 
mb
;

504 i‡(
fù
->
fõld_∑sscou¡
)

506 
	`as£π
(
fù
->
fõld_wrôecou¡
==
TIFF_VARIABLE2
);

507 
ma
=(
uöt32
)
	`va_¨g
(
≠
,uint32);

508 
mb
=(*)
	`va_¨g
(
≠
,*);

512 
mb
=(*)
	`va_¨g
(
≠
,*);

513 
ma
=(
uöt32
)(
	`°æí
(
mb
)+1);

515 
tv
->
cou¡
=
ma
;

516 
	`£tByãAºay
(&
tv
->
vÆue
,
mb
,
ma
,1);

520 i‡(
fù
->
fõld_∑sscou¡
) {

521 i‡(
fù
->
fõld_wrôecou¡
 =
TIFF_VARIABLE2
)

522 
tv
->
cou¡
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

524 
tv
->
cou¡
 = (Ë
	`va_¨g
(
≠
, );

525 } i‡(
fù
->
fõld_wrôecou¡
 =
TIFF_VARIABLE


526 || 
fù
->
fõld_wrôecou¡
 =
TIFF_VARIABLE2
)

527 
tv
->
cou¡
 = 1;

528 i‡(
fù
->
fõld_wrôecou¡
 =
TIFF_SPP
)

529 
tv
->
cou¡
 = 
td
->
td_ßm∂e•îpixñ
;

531 
tv
->
cou¡
 = 
fù
->
fõld_wrôecou¡
;

533 i‡(
tv
->
cou¡
 == 0) {

534 
°©us
 = 0;

535 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

538 
tif
->
tif_«me
,

539 
fù
->
fõld_«me
,

540 
fù
->
fõld_ty≥
,

541 
fù
->
fõld_wrôecou¡
,

542 
fù
->
fõld_∑sscou¡
);

543 
íd
;

546 
tv
->
vÆue
 = 
	`_TIFFCheckMÆloc
(
tif
,Åv->
cou¡
, 
tv_size
,

548 i‡(!
tv
->
vÆue
) {

549 
°©us
 = 0;

550 
íd
;

553 i‡((
fù
->
fõld_∑sscou¡


554 || 
fù
->
fõld_wrôecou¡
 =
TIFF_VARIABLE


555 || 
fù
->
fõld_wrôecou¡
 =
TIFF_VARIABLE2


556 || 
fù
->
fõld_wrôecou¡
 =
TIFF_SPP


557 || 
tv
->
cou¡
 > 1)

558 && 
fù
->
fõld_èg
 !
TIFFTAG_PAGENUMBER


559 && 
fù
->
fõld_èg
 !
TIFFTAG_HALFTONEHINTS


560 && 
fù
->
fõld_èg
 !
TIFFTAG_YCBCRSUBSAMPLING


561 && 
fù
->
fõld_èg
 !
TIFFTAG_DOTRANGE
) {

562 
	`_TIFFmem˝y
(
tv
->
vÆue
, 
	`va_¨g
(
≠
, *),

563 
tv
->
cou¡
 * 
tv_size
);

574 
i
;

575 *
vÆ
 = (*)
tv
->
vÆue
;

577 
i
 = 0; i < 
tv
->
cou¡
; i++, 
vÆ
 +
tv_size
) {

578 
fù
->
fõld_ty≥
) {

579 
TIFF_BYTE
:

580 
TIFF_UNDEFINED
:

582 
uöt8
 
v
 = (uöt8)
	`va_¨g
(
≠
, );

583 
	`_TIFFmem˝y
(
vÆ
, &
v
, 
tv_size
);

586 
TIFF_SBYTE
:

588 
öt8
 
v
 = (öt8)
	`va_¨g
(
≠
, );

589 
	`_TIFFmem˝y
(
vÆ
, &
v
, 
tv_size
);

592 
TIFF_SHORT
:

594 
uöt16
 
v
 = (uöt16)
	`va_¨g
(
≠
, );

595 
	`_TIFFmem˝y
(
vÆ
, &
v
, 
tv_size
);

598 
TIFF_SSHORT
:

600 
öt16
 
v
 = (öt16)
	`va_¨g
(
≠
, );

601 
	`_TIFFmem˝y
(
vÆ
, &
v
, 
tv_size
);

604 
TIFF_LONG
:

605 
TIFF_IFD
:

607 
uöt32
 
v
 = 
	`va_¨g
(
≠
, uint32);

608 
	`_TIFFmem˝y
(
vÆ
, &
v
, 
tv_size
);

611 
TIFF_SLONG
:

613 
öt32
 
v
 = 
	`va_¨g
(
≠
, int32);

614 
	`_TIFFmem˝y
(
vÆ
, &
v
, 
tv_size
);

617 
TIFF_LONG8
:

618 
TIFF_IFD8
:

620 
uöt64
 
v
 = 
	`va_¨g
(
≠
, uint64);

621 
	`_TIFFmem˝y
(
vÆ
, &
v
, 
tv_size
);

624 
TIFF_SLONG8
:

626 
öt64
 
v
 = 
	`va_¨g
(
≠
, int64);

627 
	`_TIFFmem˝y
(
vÆ
, &
v
, 
tv_size
);

630 
TIFF_RATIONAL
:

631 
TIFF_SRATIONAL
:

632 
TIFF_FLOAT
:

634 
v
 = ()
	`va_¨g
(
≠
, );

635 
	`_TIFFmem˝y
(
vÆ
, &
v
, 
tv_size
);

638 
TIFF_DOUBLE
:

640 
v
 = 
	`va_¨g
(
≠
, );

641 
	`_TIFFmem˝y
(
vÆ
, &
v
, 
tv_size
);

645 
	`_TIFFmem£t
(
vÆ
, 0, 
tv_size
);

646 
°©us
 = 0;

654 i‡(
°©us
) {

655 c⁄° 
TIFFFõld
* 
fù
=
	`TIFFFõldWôhTag
(
tif
,
èg
);

656 i‡(
fù
)

657 
	`TIFFSëFõldBô
(
tif
, 
fù
->
fõld_bô
);

658 
tif
->
tif_Êags
 |
TIFF_DIRTYDIRECT
;

661 
íd
:

662 
	`va_íd
(
≠
);

663  (
°©us
);

664 
badvÆue
:

666 c⁄° 
TIFFFõld
* 
fù
=
	`TIFFFõldWôhTag
(
tif
,
èg
);

667 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

669 
tif
->
tif_«me
, 
v
,

670 
fù
 ? fù->
fõld_«me
 : "Unknown");

671 
	`va_íd
(
≠
);

674 
badvÆue32
:

676 c⁄° 
TIFFFõld
* 
fù
=
	`TIFFFõldWôhTag
(
tif
,
èg
);

677 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

679 
tif
->
tif_«me
, 
v32
,

680 
fù
 ? fù->
fõld_«me
 : "Unknown");

681 
	`va_íd
(
≠
);

684 
	}
}

696 
	$OkToCh™geTag
(
TIFF
* 
tif
, 
uöt32
 
èg
)

698 c⁄° 
TIFFFõld
* 
fù
 = 
	`TIFFFödFõld
(
tif
, 
èg
, 
TIFF_ANY
);

699 i‡(!
fù
) {

700 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "TIFFSetField", "%s: Unknown %stag %u",

701 
tif
->
tif_«me
, 
	`isP£udoTag
(
èg
) ? "pseudo-" : "",Åag);

704 i‡(
èg
 !
TIFFTAG_IMAGELENGTH
 && (
tif
->
tif_Êags
 & 
TIFF_BEENWRITING
) &&

705 !
fù
->
fõld_oktoch™ge
) {

712 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "TIFFSetField",

714 
tif
->
tif_«me
, 
fù
->
fõld_«me
);

718 
	}
}

728 
	$TIFFSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, ...)

730 
va_li°
 
≠
;

731 
°©us
;

733 
	`va_°¨t
(
≠
, 
èg
);

734 
°©us
 = 
	`TIFFVSëFõld
(
tif
, 
èg
, 
≠
);

735 
	`va_íd
(
≠
);

736  (
°©us
);

737 
	}
}

743 
	$TIFFUn£tFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
)

745 c⁄° 
TIFFFõld
 *
fù
 = 
	`TIFFFõldWôhTag
(
tif
, 
èg
);

746 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

748 if–!
fù
 )

751 if–
fù
->
fõld_bô
 !
FIELD_CUSTOM
 )

752 
	`TIFFCÃFõldBô
(
tif
, 
fù
->
fõld_bô
);

755 
TIFFTagVÆue
 *
tv
 = 
NULL
;

756 
i
;

758 
i
 = 0; i < 
td
->
td_cu°omVÆueCou¡
; i++) {

760 
tv
 = 
td
->
td_cu°omVÆues
 + 
i
;

761 if–
tv
->
öfo
->
fõld_èg
 =
èg
 )

765 if–
i
 < 
td
->
td_cu°omVÆueCou¡
 )

767 
	`_TIFF‰ì
(
tv
->
vÆue
);

768  ; 
i
 < 
td
->
td_cu°omVÆueCou¡
-1; i++) {

769 
td
->
td_cu°omVÆues
[
i
] =Åd->td_customValues[i+1];

771 
td
->
td_cu°omVÆueCou¡
--;

775 
tif
->
tif_Êags
 |
TIFF_DIRTYDIRECT
;

778 
	}
}

787 
	$TIFFVSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

789  
	`OkToCh™geTag
(
tif
, 
èg
) ?

790 (*
tif
->
tif_ègmëhods
.
v£tfõld
)—if, 
èg
, 
≠
) : 0;

791 
	}
}

794 
	$_TIFFVGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

796 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

797 
ªt_vÆ
 = 1;

799 
èg
) {

800 
TIFFTAG_SUBFILETYPE
:

801 *
	`va_¨g
(
≠
, 
uöt32
*Ë
td
->
td_subfûëy≥
;

803 
TIFFTAG_IMAGEWIDTH
:

804 *
	`va_¨g
(
≠
, 
uöt32
*Ë
td
->
td_imagewidth
;

806 
TIFFTAG_IMAGELENGTH
:

807 *
	`va_¨g
(
≠
, 
uöt32
*Ë
td
->
td_imagñígth
;

809 
TIFFTAG_BITSPERSAMPLE
:

810 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_bô•îßm∂e
;

812 
TIFFTAG_COMPRESSION
:

813 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_com¥essi⁄
;

815 
TIFFTAG_PHOTOMETRIC
:

816 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_phŸomëric
;

818 
TIFFTAG_THRESHHOLDING
:

819 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_thªshhﬁdög
;

821 
TIFFTAG_FILLORDER
:

822 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_fûl‹dî
;

824 
TIFFTAG_ORIENTATION
:

825 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_‹õ¡©i⁄
;

827 
TIFFTAG_SAMPLESPERPIXEL
:

828 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_ßm∂e•îpixñ
;

830 
TIFFTAG_ROWSPERSTRIP
:

831 *
	`va_¨g
(
≠
, 
uöt32
*Ë
td
->
td_row•î°rù
;

833 
TIFFTAG_MINSAMPLEVALUE
:

834 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_mößm∂evÆue
;

836 
TIFFTAG_MAXSAMPLEVALUE
:

837 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_maxßm∂evÆue
;

839 
TIFFTAG_SMINSAMPLEVALUE
:

840 i‡(
tif
->
tif_Êags
 & 
TIFF_PERSAMPLE
)

841 *
	`va_¨g
(
≠
, **Ë
td
->
td_smößm∂evÆue
;

845 
uöt16
 
i
;

846 
v
 = 
td
->
td_smößm∂evÆue
[0];

847 
i
=1; i < 
td
->
td_ßm∂e•îpixñ
; ++i)

848 if–
td
->
td_smößm∂evÆue
[
i
] < 
v
 )

849 
v
 = 
td
->
td_smößm∂evÆue
[
i
];

850 *
	`va_¨g
(
≠
, *Ë
v
;

853 
TIFFTAG_SMAXSAMPLEVALUE
:

854 i‡(
tif
->
tif_Êags
 & 
TIFF_PERSAMPLE
)

855 *
	`va_¨g
(
≠
, **Ë
td
->
td_smaxßm∂evÆue
;

859 
uöt16
 
i
;

860 
v
 = 
td
->
td_smaxßm∂evÆue
[0];

861 
i
=1; i < 
td
->
td_ßm∂e•îpixñ
; ++i)

862 if–
td
->
td_smaxßm∂evÆue
[
i
] > 
v
 )

863 
v
 = 
td
->
td_smaxßm∂evÆue
[
i
];

864 *
	`va_¨g
(
≠
, *Ë
v
;

867 
TIFFTAG_XRESOLUTION
:

868 *
	`va_¨g
(
≠
, *Ë
td
->
td_xªsﬁuti⁄
;

870 
TIFFTAG_YRESOLUTION
:

871 *
	`va_¨g
(
≠
, *Ë
td
->
td_yªsﬁuti⁄
;

873 
TIFFTAG_PLANARCONFIG
:

874 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_∂™¨c⁄fig
;

876 
TIFFTAG_XPOSITION
:

877 *
	`va_¨g
(
≠
, *Ë
td
->
td_xposôi⁄
;

879 
TIFFTAG_YPOSITION
:

880 *
	`va_¨g
(
≠
, *Ë
td
->
td_yposôi⁄
;

882 
TIFFTAG_RESOLUTIONUNIT
:

883 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_ªsﬁuti⁄unô
;

885 
TIFFTAG_PAGENUMBER
:

886 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_∑gíumbî
[0];

887 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_∑gíumbî
[1];

889 
TIFFTAG_HALFTONEHINTS
:

890 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_hÆ·⁄ehöts
[0];

891 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_hÆ·⁄ehöts
[1];

893 
TIFFTAG_COLORMAP
:

894 *
	`va_¨g
(
≠
, 
uöt16
**Ë
td
->
td_cﬁ‹m≠
[0];

895 *
	`va_¨g
(
≠
, 
uöt16
**Ë
td
->
td_cﬁ‹m≠
[1];

896 *
	`va_¨g
(
≠
, 
uöt16
**Ë
td
->
td_cﬁ‹m≠
[2];

898 
TIFFTAG_STRIPOFFSETS
:

899 
TIFFTAG_TILEOFFSETS
:

900 
	`_TIFFFûlSåûes
–
tif
 );

901 *
	`va_¨g
(
≠
, 
uöt64
**Ë
td
->
td_°rùoff£t
;

903 
TIFFTAG_STRIPBYTECOUNTS
:

904 
TIFFTAG_TILEBYTECOUNTS
:

905 
	`_TIFFFûlSåûes
–
tif
 );

906 *
	`va_¨g
(
≠
, 
uöt64
**Ë
td
->
td_°rùbyãcou¡
;

908 
TIFFTAG_MATTEING
:

909 *
	`va_¨g
(
≠
, 
uöt16
*) =

910 (
td
->
td_exåaßm∂es
 == 1 &&

911 
td
->
td_ßm∂eöfo
[0] =
EXTRASAMPLE_ASSOCALPHA
);

913 
TIFFTAG_EXTRASAMPLES
:

914 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_exåaßm∂es
;

915 *
	`va_¨g
(
≠
, 
uöt16
**Ë
td
->
td_ßm∂eöfo
;

917 
TIFFTAG_TILEWIDTH
:

918 *
	`va_¨g
(
≠
, 
uöt32
*Ë
td
->
td_tûewidth
;

920 
TIFFTAG_TILELENGTH
:

921 *
	`va_¨g
(
≠
, 
uöt32
*Ë
td
->
td_tûñígth
;

923 
TIFFTAG_TILEDEPTH
:

924 *
	`va_¨g
(
≠
, 
uöt32
*Ë
td
->
td_tûedïth
;

926 
TIFFTAG_DATATYPE
:

927 
td
->
td_ßm∂ef‹m©
) {

928 
SAMPLEFORMAT_UINT
:

929 *
	`va_¨g
(
≠
, 
uöt16
*Ë
DATATYPE_UINT
;

931 
SAMPLEFORMAT_INT
:

932 *
	`va_¨g
(
≠
, 
uöt16
*Ë
DATATYPE_INT
;

934 
SAMPLEFORMAT_IEEEFP
:

935 *
	`va_¨g
(
≠
, 
uöt16
*Ë
DATATYPE_IEEEFP
;

937 
SAMPLEFORMAT_VOID
:

938 *
	`va_¨g
(
≠
, 
uöt16
*Ë
DATATYPE_VOID
;

942 
TIFFTAG_SAMPLEFORMAT
:

943 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_ßm∂ef‹m©
;

945 
TIFFTAG_IMAGEDEPTH
:

946 *
	`va_¨g
(
≠
, 
uöt32
*Ë
td
->
td_imagedïth
;

948 
TIFFTAG_SUBIFD
:

949 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_nsubifd
;

950 *
	`va_¨g
(
≠
, 
uöt64
**Ë
td
->
td_subifd
;

952 
TIFFTAG_YCBCRPOSITIONING
:

953 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_ycb¸posôi⁄ög
;

955 
TIFFTAG_YCBCRSUBSAMPLING
:

956 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_ycb¸subßm∂ög
[0];

957 *
	`va_¨g
(
≠
, 
uöt16
*Ë
td
->
td_ycb¸subßm∂ög
[1];

959 
TIFFTAG_TRANSFERFUNCTION
:

960 *
	`va_¨g
(
≠
, 
uöt16
**Ë
td
->
td_å™s„rfun˘i⁄
[0];

961 i‡(
td
->
td_ßm∂e•îpixñ
 -Åd->
td_exåaßm∂es
 > 1) {

962 *
	`va_¨g
(
≠
, 
uöt16
**Ë
td
->
td_å™s„rfun˘i⁄
[1];

963 *
	`va_¨g
(
≠
, 
uöt16
**Ë
td
->
td_å™s„rfun˘i⁄
[2];

966 
TIFFTAG_REFERENCEBLACKWHITE
:

967 *
	`va_¨g
(
≠
, **Ë
td
->
td_ªfbœckwhôe
;

969 
TIFFTAG_INKNAMES
:

970 *
	`va_¨g
(
≠
, **Ë
td
->
td_ök«mes
;

974 c⁄° 
TIFFFõld
* 
fù
 =

975 
	`TIFFFödFõld
(
tif
, 
èg
, 
TIFF_ANY
);

976 
i
;

987 if–
fù
 =
NULL
 || fù->
fõld_bô
 !
FIELD_CUSTOM
 )

989 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "_TIFFVGetField",

992 
tif
->
tif_«me
,

993 
	`isP£udoTag
(
èg
) ? "pseudo-" : "",

994 
fù
 ? fù->
fõld_«me
 : "Unknown");

995 
ªt_vÆ
 = 0;

1002 
ªt_vÆ
 = 0;

1003 
i
 = 0; i < 
td
->
td_cu°omVÆueCou¡
; i++) {

1004 
TIFFTagVÆue
 *
tv
 = 
td
->
td_cu°omVÆues
 + 
i
;

1006 i‡(
tv
->
öfo
->
fõld_èg
 !
èg
)

1009 i‡(
fù
->
fõld_∑sscou¡
) {

1010 i‡(
fù
->
fõld_ªadcou¡
 =
TIFF_VARIABLE2
)

1011 *
	`va_¨g
(
≠
, 
uöt32
*Ë(uöt32)
tv
->
cou¡
;

1013 *
	`va_¨g
(
≠
, 
uöt16
*Ë(uöt16)
tv
->
cou¡
;

1014 *
	`va_¨g
(
≠
, **Ë
tv
->
vÆue
;

1015 
ªt_vÆ
 = 1;

1017 i‡((
fù
->
fõld_ty≥
 =
TIFF_ASCII


1018 || 
fù
->
fõld_ªadcou¡
 =
TIFF_VARIABLE


1019 || 
fù
->
fõld_ªadcou¡
 =
TIFF_VARIABLE2


1020 || 
fù
->
fõld_ªadcou¡
 =
TIFF_SPP


1021 || 
tv
->
cou¡
 > 1)

1022 && 
fù
->
fõld_èg
 !
TIFFTAG_PAGENUMBER


1023 && 
fù
->
fõld_èg
 !
TIFFTAG_HALFTONEHINTS


1024 && 
fù
->
fõld_èg
 !
TIFFTAG_YCBCRSUBSAMPLING


1025 && 
fù
->
fõld_èg
 !
TIFFTAG_DOTRANGE
) {

1026 *
	`va_¨g
(
≠
, **Ë
tv
->
vÆue
;

1027 
ªt_vÆ
 = 1;

1029 
j
;

1030 *
vÆ
 = (*)
tv
->
vÆue
;

1032 
j
 = 0; j < 
tv
->
cou¡
;

1033 
j
++, 
vÆ
 +
	`_TIFFD©aSize
(
tv
->
öfo
->
fõld_ty≥
)) {

1034 
fù
->
fõld_ty≥
) {

1035 
TIFF_BYTE
:

1036 
TIFF_UNDEFINED
:

1037 *
	`va_¨g
(
≠
, 
uöt8
*) =

1038 *(
uöt8
 *)
vÆ
;

1039 
ªt_vÆ
 = 1;

1041 
TIFF_SBYTE
:

1042 *
	`va_¨g
(
≠
, 
öt8
*) =

1043 *(
öt8
 *)
vÆ
;

1044 
ªt_vÆ
 = 1;

1046 
TIFF_SHORT
:

1047 *
	`va_¨g
(
≠
, 
uöt16
*) =

1048 *(
uöt16
 *)
vÆ
;

1049 
ªt_vÆ
 = 1;

1051 
TIFF_SSHORT
:

1052 *
	`va_¨g
(
≠
, 
öt16
*) =

1053 *(
öt16
 *)
vÆ
;

1054 
ªt_vÆ
 = 1;

1056 
TIFF_LONG
:

1057 
TIFF_IFD
:

1058 *
	`va_¨g
(
≠
, 
uöt32
*) =

1059 *(
uöt32
 *)
vÆ
;

1060 
ªt_vÆ
 = 1;

1062 
TIFF_SLONG
:

1063 *
	`va_¨g
(
≠
, 
öt32
*) =

1064 *(
öt32
 *)
vÆ
;

1065 
ªt_vÆ
 = 1;

1067 
TIFF_LONG8
:

1068 
TIFF_IFD8
:

1069 *
	`va_¨g
(
≠
, 
uöt64
*) =

1070 *(
uöt64
 *)
vÆ
;

1071 
ªt_vÆ
 = 1;

1073 
TIFF_SLONG8
:

1074 *
	`va_¨g
(
≠
, 
öt64
*) =

1075 *(
öt64
 *)
vÆ
;

1076 
ªt_vÆ
 = 1;

1078 
TIFF_RATIONAL
:

1079 
TIFF_SRATIONAL
:

1080 
TIFF_FLOAT
:

1081 *
	`va_¨g
(
≠
, *) =

1082 *(*)
vÆ
;

1083 
ªt_vÆ
 = 1;

1085 
TIFF_DOUBLE
:

1086 *
	`va_¨g
(
≠
, *) =

1087 *(*)
vÆ
;

1088 
ªt_vÆ
 = 1;

1091 
ªt_vÆ
 = 0;

1101 (
ªt_vÆ
);

1102 
	}
}

1109 
	$TIFFGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, ...)

1111 
°©us
;

1112 
va_li°
 
≠
;

1114 
	`va_°¨t
(
≠
, 
èg
);

1115 
°©us
 = 
	`TIFFVGëFõld
(
tif
, 
èg
, 
≠
);

1116 
	`va_íd
(
≠
);

1117  (
°©us
);

1118 
	}
}

1127 
	$TIFFVGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

1129 c⁄° 
TIFFFõld
* 
fù
 = 
	`TIFFFödFõld
(
tif
, 
èg
, 
TIFF_ANY
);

1130  (
fù
 && (
	`isP£udoTag
(
èg
Ë|| 
	`TIFFFõldSë
(
tif
, fù->
fõld_bô
)) ?

1131 (*
tif
->
tif_ègmëhods
.
vgëfõld
)—if, 
èg
, 
≠
) : 0);

1132 
	}
}

1134 
	#CÀ™upFõld
(
membî
) { \

1135 i‡(
td
->
membî
) { \

1136 
	`_TIFF‰ì
(
td
->
membî
); \

1137 
td
->
membî
 = 0; \

1139 }

	)

1145 
	$TIFFFªeDúe˘‹y
(
TIFF
* 
tif
)

1147 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

1148 
i
;

1150 
	`_TIFFmem£t
(
td
->
td_fõlds£t
, 0, 
FIELD_SETLONGS
);

1151 
	`CÀ™upFõld
(
td_smößm∂evÆue
);

1152 
	`CÀ™upFõld
(
td_smaxßm∂evÆue
);

1153 
	`CÀ™upFõld
(
td_cﬁ‹m≠
[0]);

1154 
	`CÀ™upFõld
(
td_cﬁ‹m≠
[1]);

1155 
	`CÀ™upFõld
(
td_cﬁ‹m≠
[2]);

1156 
	`CÀ™upFõld
(
td_ßm∂eöfo
);

1157 
	`CÀ™upFõld
(
td_subifd
);

1158 
	`CÀ™upFõld
(
td_ök«mes
);

1159 
	`CÀ™upFõld
(
td_ªfbœckwhôe
);

1160 
	`CÀ™upFõld
(
td_å™s„rfun˘i⁄
[0]);

1161 
	`CÀ™upFõld
(
td_å™s„rfun˘i⁄
[1]);

1162 
	`CÀ™upFõld
(
td_å™s„rfun˘i⁄
[2]);

1163 
	`CÀ™upFõld
(
td_°rùoff£t
);

1164 
	`CÀ™upFõld
(
td_°rùbyãcou¡
);

1165 
	`TIFFCÃFõldBô
(
tif
, 
FIELD_YCBCRSUBSAMPLING
);

1166 
	`TIFFCÃFõldBô
(
tif
, 
FIELD_YCBCRPOSITIONING
);

1169  
i
 = 0; i < 
td
->
td_cu°omVÆueCou¡
; i++ ) {

1170 i‡(
td
->
td_cu°omVÆues
[
i
].
vÆue
)

1171 
	`_TIFF‰ì
(
td
->
td_cu°omVÆues
[
i
].
vÆue
);

1174 
td
->
td_cu°omVÆueCou¡
 = 0;

1175 
	`CÀ™upFõld
(
td_cu°omVÆues
);

1177 #i‡
	`deföed
(
DEFER_STRILE_LOAD
)

1178 
	`_TIFFmem£t
–&(
td
->
td_°rùoff£t_íåy
), 0, (
TIFFDúE¡ry
));

1179 
	`_TIFFmem£t
–&(
td
->
td_°rùbyãcou¡_íåy
), 0, (
TIFFDúE¡ry
));

1181 
	}
}

1182 #unde‡
CÀ™upFõld


1187 
TIFFExãndProc
 
	g_TIFFexãndî
 = (TIFFExãndProcË
NULL
;

1189 
TIFFExãndProc


1190 
	$TIFFSëTagExãndî
(
TIFFExãndProc
 
exãndî
)

1192 
TIFFExãndProc
 
¥ev
 = 
_TIFFexãndî
;

1193 
_TIFFexãndî
 = 
exãndî
;

1194  (
¥ev
);

1195 
	}
}

1205 
	$TIFFCª©eDúe˘‹y
(
TIFF
* 
tif
)

1207 
	`TIFFDeÁu…Dúe˘‹y
(
tif
);

1208 
tif
->
tif_dúoff
 = 0;

1209 
tif
->
tif_√xtdúoff
 = 0;

1210 
tif
->
tif_curoff
 = 0;

1211 
tif
->
tif_row
 = (
uöt32
) -1;

1212 
tif
->
tif_cur°rù
 = (
uöt32
) -1;

1215 
	}
}

1221 
	$TIFFDeÁu…Dúe˘‹y
(
TIFF
* 
tif
)

1223 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

1224 c⁄° 
TIFFFõldAºay
* 
tiffFõldAºay
;

1226 
tiffFõldAºay
 = 
	`_TIFFGëFõlds
();

1227 
	`_TIFFSëupFõlds
(
tif
, 
tiffFõldAºay
);

1229 
	`_TIFFmem£t
(
td
, 0,  (*td));

1230 
td
->
td_fûl‹dî
 = 
FILLORDER_MSB2LSB
;

1231 
td
->
td_bô•îßm∂e
 = 1;

1232 
td
->
td_thªshhﬁdög
 = 
THRESHHOLD_BILEVEL
;

1233 
td
->
td_‹õ¡©i⁄
 = 
ORIENTATION_TOPLEFT
;

1234 
td
->
td_ßm∂e•îpixñ
 = 1;

1235 
td
->
td_row•î°rù
 = (
uöt32
) -1;

1236 
td
->
td_tûewidth
 = 0;

1237 
td
->
td_tûñígth
 = 0;

1238 
td
->
td_tûedïth
 = 1;

1239 
td
->
td_°rùbyãcou¡s‹ãd
 = 1;

1240 
td
->
td_ªsﬁuti⁄unô
 = 
RESUNIT_INCH
;

1241 
td
->
td_ßm∂ef‹m©
 = 
SAMPLEFORMAT_UINT
;

1242 
td
->
td_imagedïth
 = 1;

1243 
td
->
td_ycb¸subßm∂ög
[0] = 2;

1244 
td
->
td_ycb¸subßm∂ög
[1] = 2;

1245 
td
->
td_ycb¸posôi⁄ög
 = 
YCBCRPOSITION_CENTERED
;

1246 
tif
->
tif_po°decode
 = 
_TIFFNoPo°Decode
;

1247 
tif
->
tif_foundfõld
 = 
NULL
;

1248 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
_TIFFVSëFõld
;

1249 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
_TIFFVGëFõld
;

1250 
tif
->
tif_ègmëhods
.
¥ötdú
 = 
NULL
;

1255 i‡(
_TIFFexãndî
)

1256 (*
_TIFFexãndî
)(
tif
);

1257 (Ë
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_NONE
);

1266 
tif
->
tif_Êags
 &~
TIFF_DIRTYDIRECT
;

1273 
tif
->
tif_Êags
 &~
TIFF_ISTILED
;

1276 
	}
}

1279 
	$TIFFAdv™˚Dúe˘‹y
(
TIFF
* 
tif
, 
uöt64
* 
√xtdú
, uöt64* 
off
)

1281 c⁄° 
moduÀ
[] = "TIFFAdvanceDirectory";

1282 i‡(
	`isM≠≥d
(
tif
))

1284 
uöt64
 
poff
=*
√xtdú
;

1285 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

1287 
tmsize_t
 
pofÁ
,
poffb
,
poffc
,
poffd
;

1288 
uöt16
 
dúcou¡
;

1289 
uöt32
 
√xtdú32
;

1290 
pofÁ
=(
tmsize_t
)
poff
;

1291 
poffb
=
pofÁ
+(
uöt16
);

1292 i‡(((
uöt64
)
pofÁ
!=
poff
)||(
poffb
<pofÁ)||’offb<(
tmsize_t
)(
uöt16
))||’offb>
tif
->
tif_size
))

1294 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Error fetching directory count");

1297 
	`_TIFFmem˝y
(&
dúcou¡
,
tif
->
tif_ba£
+
pofÁ
,(
uöt16
));

1298 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1299 
	`TIFFSwabSh‹t
(&
dúcou¡
);

1300 
poffc
=
poffb
+
dúcou¡
*12;

1301 
poffd
=
poffc
+(
uöt32
);

1302 i‡((
poffc
<
poffb
)||’offc<
dúcou¡
*12)||(
poffd
<poffc)||’offd<(
tmsize_t
)(
uöt32
))||’offd>
tif
->
tif_size
))

1304 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Error fetching directoryÜink");

1307 i‡(
off
!=
NULL
)

1308 *
off
=(
uöt64
)
poffc
;

1309 
	`_TIFFmem˝y
(&
√xtdú32
,
tif
->
tif_ba£
+
poffc
,(
uöt32
));

1310 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1311 
	`TIFFSwabL⁄g
(&
√xtdú32
);

1312 *
√xtdú
=
√xtdú32
;

1316 
tmsize_t
 
pofÁ
,
poffb
,
poffc
,
poffd
;

1317 
uöt64
 
dúcou¡64
;

1318 
uöt16
 
dúcou¡16
;

1319 
pofÁ
=(
tmsize_t
)
poff
;

1320 
poffb
=
pofÁ
+(
uöt64
);

1321 i‡(((
uöt64
)
pofÁ
!=
poff
)||(
poffb
<pofÁ)||’offb<(
tmsize_t
)(uöt64))||’offb>
tif
->
tif_size
))

1323 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Error fetching directory count");

1326 
	`_TIFFmem˝y
(&
dúcou¡64
,
tif
->
tif_ba£
+
pofÁ
,(
uöt64
));

1327 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1328 
	`TIFFSwabL⁄g8
(&
dúcou¡64
);

1329 i‡(
dúcou¡64
>0xFFFF)

1331 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Sanity check on directory count failed");

1334 
dúcou¡16
=(
uöt16
)
dúcou¡64
;

1335 
poffc
=
poffb
+
dúcou¡16
*20;

1336 
poffd
=
poffc
+(
uöt64
);

1337 i‡((
poffc
<
poffb
)||’offc<
dúcou¡16
*20)||(
poffd
<poffc)||’offd<(
tmsize_t
)(
uöt64
))||’offd>
tif
->
tif_size
))

1339 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Error fetching directoryÜink");

1342 i‡(
off
!=
NULL
)

1343 *
off
=(
uöt64
)
poffc
;

1344 
	`_TIFFmem˝y
(
√xtdú
,
tif
->
tif_ba£
+
poffc
,(
uöt64
));

1345 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1346 
	`TIFFSwabL⁄g8
(
√xtdú
);

1352 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

1354 
uöt16
 
dúcou¡
;

1355 
uöt32
 
√xtdú32
;

1356 i‡(!
	`SìkOK
(
tif
, *
√xtdú
) ||

1357 !
	`RódOK
(
tif
, &
dúcou¡
,  (
uöt16
))) {

1358 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "%s: Error fetching directory count",

1359 
tif
->
tif_«me
);

1362 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

1363 
	`TIFFSwabSh‹t
(&
dúcou¡
);

1364 i‡(
off
 !
NULL
)

1365 *
off
 = 
	`TIFFSìkFûe
(
tif
,

1366 
dúcou¡
*12, 
SEEK_CUR
);

1368 (Ë
	`TIFFSìkFûe
(
tif
,

1369 
dúcou¡
*12, 
SEEK_CUR
);

1370 i‡(!
	`RódOK
(
tif
, &
√xtdú32
,  (
uöt32
))) {

1371 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "%s: Error fetching directoryÜink",

1372 
tif
->
tif_«me
);

1375 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

1376 
	`TIFFSwabL⁄g
(&
√xtdú32
);

1377 *
√xtdú
=
√xtdú32
;

1381 
uöt64
 
dúcou¡64
;

1382 
uöt16
 
dúcou¡16
;

1383 i‡(!
	`SìkOK
(
tif
, *
√xtdú
) ||

1384 !
	`RódOK
(
tif
, &
dúcou¡64
,  (
uöt64
))) {

1385 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "%s: Error fetching directory count",

1386 
tif
->
tif_«me
);

1389 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

1390 
	`TIFFSwabL⁄g8
(&
dúcou¡64
);

1391 i‡(
dúcou¡64
>0xFFFF)

1393 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Error fetching directory count");

1396 
dúcou¡16
 = (
uöt16
)
dúcou¡64
;

1397 i‡(
off
 !
NULL
)

1398 *
off
 = 
	`TIFFSìkFûe
(
tif
,

1399 
dúcou¡16
*20, 
SEEK_CUR
);

1401 (Ë
	`TIFFSìkFûe
(
tif
,

1402 
dúcou¡16
*20, 
SEEK_CUR
);

1403 i‡(!
	`RódOK
(
tif
, 
√xtdú
,  (
uöt64
))) {

1404 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "%s: Error fetching directoryÜink",

1405 
tif
->
tif_«me
);

1408 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

1409 
	`TIFFSwabL⁄g8
(
√xtdú
);

1413 
	}
}

1418 
uöt16


1419 
	$TIFFNumbîOfDúe˘‹õs
(
TIFF
* 
tif
)

1421 
uöt64
 
√xtdú
;

1422 
uöt16
 
n
;

1423 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

1424 
√xtdú
 = 
tif
->
tif_hódî
.
˛assic
.
tiff_dúoff
;

1426 
√xtdú
 = 
tif
->
tif_hódî
.
big
.
tiff_dúoff
;

1427 
n
 = 0;

1428 
√xtdú
 !0 && 
	`TIFFAdv™˚Dúe˘‹y
(
tif
, &√xtdú, 
NULL
))

1429 
n
++;

1430  (
n
);

1431 
	}
}

1438 
	$TIFFSëDúe˘‹y
(
TIFF
* 
tif
, 
uöt16
 
dún
)

1440 
uöt64
 
√xtdú
;

1441 
uöt16
 
n
;

1443 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

1444 
√xtdú
 = 
tif
->
tif_hódî
.
˛assic
.
tiff_dúoff
;

1446 
√xtdú
 = 
tif
->
tif_hódî
.
big
.
tiff_dúoff
;

1447 
n
 = 
dún
;Ç > 0 && 
√xtdú
 != 0;Ç--)

1448 i‡(!
	`TIFFAdv™˚Dúe˘‹y
(
tif
, &
√xtdú
, 
NULL
))

1450 
tif
->
tif_√xtdúoff
 = 
√xtdú
;

1456 
tif
->
tif_curdú
 = (
dún
 - 
n
) - 1;

1461 
tif
->
tif_dúnumbî
 = 0;

1462  (
	`TIFFRódDúe˘‹y
(
tif
));

1463 
	}
}

1472 
	$TIFFSëSubDúe˘‹y
(
TIFF
* 
tif
, 
uöt64
 
dúoff
)

1474 
tif
->
tif_√xtdúoff
 = 
dúoff
;

1479 
tif
->
tif_dúnumbî
 = 0;

1480  (
	`TIFFRódDúe˘‹y
(
tif
));

1481 
	}
}

1486 
uöt64


1487 
	$TIFFCuºítDúOff£t
(
TIFF
* 
tif
)

1489  (
tif
->
tif_dúoff
);

1490 
	}
}

1497 
	$TIFFLa°Dúe˘‹y
(
TIFF
* 
tif
)

1499  (
tif
->
tif_√xtdúoff
 == 0);

1500 
	}
}

1506 
	$TIFFU∆ökDúe˘‹y
(
TIFF
* 
tif
, 
uöt16
 
dún
)

1508 c⁄° 
moduÀ
[] = "TIFFUnlinkDirectory";

1509 
uöt64
 
√xtdú
;

1510 
uöt64
 
off
;

1511 
uöt16
 
n
;

1513 i‡(
tif
->
tif_mode
 =
O_RDONLY
) {

1514 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1523 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

1525 
√xtdú
 = 
tif
->
tif_hódî
.
˛assic
.
tiff_dúoff
;

1526 
off
 = 4;

1530 
√xtdú
 = 
tif
->
tif_hódî
.
big
.
tiff_dúoff
;

1531 
off
 = 8;

1533 
n
 = 
dún
-1;Ç > 0;Ç--) {

1534 i‡(
√xtdú
 == 0) {

1535 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Dúe˘‹y %d d€†nŸÉxi°", 
dún
);

1538 i‡(!
	`TIFFAdv™˚Dúe˘‹y
(
tif
, &
√xtdú
, &
off
))

1545 i‡(!
	`TIFFAdv™˚Dúe˘‹y
(
tif
, &
√xtdú
, 
NULL
))

1552 (Ë
	`TIFFSìkFûe
(
tif
, 
off
, 
SEEK_SET
);

1553 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

1555 
uöt32
 
√xtdú32
;

1556 
√xtdú32
=(
uöt32
)
√xtdú
;

1557 
	`as£π
((
uöt64
)
√xtdú32
==
√xtdú
);

1558 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

1559 
	`TIFFSwabL⁄g
(&
√xtdú32
);

1560 i‡(!
	`WrôeOK
(
tif
, &
√xtdú32
,  (
uöt32
))) {

1561 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Error writing directoryÜink");

1567 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

1568 
	`TIFFSwabL⁄g8
(&
√xtdú
);

1569 i‡(!
	`WrôeOK
(
tif
, &
√xtdú
,  (
uöt64
))) {

1570 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Error writing directoryÜink");

1581 (*
tif
->
tif_˛ónup
)(tif);

1582 i‡((
tif
->
tif_Êags
 & 
TIFF_MYBUFFER
Ë&&Åif->
tif_øwd©a
) {

1583 
	`_TIFF‰ì
(
tif
->
tif_øwd©a
);

1584 
tif
->
tif_øwd©a
 = 
NULL
;

1585 
tif
->
tif_øwcc
 = 0;

1586 
tif
->
tif_øwd©aoff
 = 0;

1587 
tif
->
tif_øwd©Æﬂded
 = 0;

1589 
tif
->
tif_Êags
 &~(
TIFF_BEENWRITING
|
TIFF_BUFFERSETUP
|
TIFF_POSTENCODE
|
TIFF_BUF4WRITE
);

1590 
	`TIFFFªeDúe˘‹y
(
tif
);

1591 
	`TIFFDeÁu…Dúe˘‹y
(
tif
);

1592 
tif
->
tif_dúoff
 = 0;

1593 
tif
->
tif_√xtdúoff
 = 0;

1594 
tif
->
tif_curoff
 = 0;

1595 
tif
->
tif_row
 = (
uöt32
) -1;

1596 
tif
->
tif_cur°rù
 = (
uöt32
) -1;

1598 
	}
}

	@libtiff/tif_dir.h

27 #i‚de‡
_TIFFDIR_


28 
	#_TIFFDIR_


	)

34 c⁄° 
TIFFFõld
 *
	möfo
;

35 
	mcou¡
;

36 *
	mvÆue
;

37 } 
	tTIFFTagVÆue
;

51 
uöt16
 
	mtdú_èg
;

52 
uöt16
 
	mtdú_ty≥
;

53 
uöt64
 
	mtdú_cou¡
;

55 
uöt16
 
	mtoff_sh‹t
;

56 
uöt32
 
	mtoff_l⁄g
;

57 
uöt64
 
	mtoff_l⁄g8
;

58 } 
	mtdú_off£t
;

59 } 
	tTIFFDúE¡ry
;

65 
	#FIELD_SETLONGS
 4

	)

67 
	mtd_fõlds£t
[
FIELD_SETLONGS
];

69 
uöt32
 
	mtd_imagewidth
, 
	mtd_imagñígth
, 
	mtd_imagedïth
;

70 
uöt32
 
	mtd_tûewidth
, 
	mtd_tûñígth
, 
	mtd_tûedïth
;

71 
uöt32
 
	mtd_subfûëy≥
;

72 
uöt16
 
	mtd_bô•îßm∂e
;

73 
uöt16
 
	mtd_ßm∂ef‹m©
;

74 
uöt16
 
	mtd_com¥essi⁄
;

75 
uöt16
 
	mtd_phŸomëric
;

76 
uöt16
 
	mtd_thªshhﬁdög
;

77 
uöt16
 
	mtd_fûl‹dî
;

78 
uöt16
 
	mtd_‹õ¡©i⁄
;

79 
uöt16
 
	mtd_ßm∂e•îpixñ
;

80 
uöt32
 
	mtd_row•î°rù
;

81 
uöt16
 
	mtd_mößm∂evÆue
, 
	mtd_maxßm∂evÆue
;

82 * 
	mtd_smößm∂evÆue
;

83 * 
	mtd_smaxßm∂evÆue
;

84 
	mtd_xªsﬁuti⁄
, 
	mtd_yªsﬁuti⁄
;

85 
uöt16
 
	mtd_ªsﬁuti⁄unô
;

86 
uöt16
 
	mtd_∂™¨c⁄fig
;

87 
	mtd_xposôi⁄
, 
	mtd_yposôi⁄
;

88 
uöt16
 
	mtd_∑gíumbî
[2];

89 
uöt16
* 
	mtd_cﬁ‹m≠
[3];

90 
uöt16
 
	mtd_hÆ·⁄ehöts
[2];

91 
uöt16
 
	mtd_exåaßm∂es
;

92 
uöt16
* 
	mtd_ßm∂eöfo
;

96 
uöt32
 
	mtd_°rù•îimage
;

97 
uöt32
 
	mtd_n°rùs
;

98 
uöt64
* 
	mtd_°rùoff£t
;

99 
uöt64
* 
	mtd_°rùbyãcou¡
;

100 
	mtd_°rùbyãcou¡s‹ãd
;

101 #i‡
deföed
(
DEFER_STRILE_LOAD
)

102 
TIFFDúE¡ry
 
	mtd_°rùoff£t_íåy
;

103 
TIFFDúE¡ry
 
	mtd_°rùbyãcou¡_íåy
;

105 
uöt16
 
	mtd_nsubifd
;

106 
uöt64
* 
	mtd_subifd
;

108 
uöt16
 
	mtd_ycb¸subßm∂ög
[2];

109 
uöt16
 
	mtd_ycb¸posôi⁄ög
;

111 
uöt16
* 
	mtd_å™s„rfun˘i⁄
[3];

112 * 
	mtd_ªfbœckwhôe
;

114 
	mtd_ök«me¶í
;

115 * 
	mtd_ök«mes
;

117 
	mtd_cu°omVÆueCou¡
;

118 
TIFFTagVÆue
 *
	mtd_cu°omVÆues
;

119 } 
	tTIFFDúe˘‹y
;

132 
	#FIELD_IGNORE
 0

	)

135 
	#FIELD_IMAGEDIMENSIONS
 1

	)

136 
	#FIELD_TILEDIMENSIONS
 2

	)

137 
	#FIELD_RESOLUTION
 3

	)

138 
	#FIELD_POSITION
 4

	)

141 
	#FIELD_SUBFILETYPE
 5

	)

142 
	#FIELD_BITSPERSAMPLE
 6

	)

143 
	#FIELD_COMPRESSION
 7

	)

144 
	#FIELD_PHOTOMETRIC
 8

	)

145 
	#FIELD_THRESHHOLDING
 9

	)

146 
	#FIELD_FILLORDER
 10

	)

147 
	#FIELD_ORIENTATION
 15

	)

148 
	#FIELD_SAMPLESPERPIXEL
 16

	)

149 
	#FIELD_ROWSPERSTRIP
 17

	)

150 
	#FIELD_MINSAMPLEVALUE
 18

	)

151 
	#FIELD_MAXSAMPLEVALUE
 19

	)

152 
	#FIELD_PLANARCONFIG
 20

	)

153 
	#FIELD_RESOLUTIONUNIT
 22

	)

154 
	#FIELD_PAGENUMBER
 23

	)

155 
	#FIELD_STRIPBYTECOUNTS
 24

	)

156 
	#FIELD_STRIPOFFSETS
 25

	)

157 
	#FIELD_COLORMAP
 26

	)

158 
	#FIELD_EXTRASAMPLES
 31

	)

159 
	#FIELD_SAMPLEFORMAT
 32

	)

160 
	#FIELD_SMINSAMPLEVALUE
 33

	)

161 
	#FIELD_SMAXSAMPLEVALUE
 34

	)

162 
	#FIELD_IMAGEDEPTH
 35

	)

163 
	#FIELD_TILEDEPTH
 36

	)

164 
	#FIELD_HALFTONEHINTS
 37

	)

165 
	#FIELD_YCBCRSUBSAMPLING
 39

	)

166 
	#FIELD_YCBCRPOSITIONING
 40

	)

167 
	#FIELD_REFBLACKWHITE
 41

	)

168 
	#FIELD_TRANSFERFUNCTION
 44

	)

169 
	#FIELD_INKNAMES
 46

	)

170 
	#FIELD_SUBIFD
 49

	)

173 
	#FIELD_CODEC
 66

	)

184 
	#FIELD_PSEUDO
 0

	)

186 
	#FIELD_LAST
 (32*
FIELD_SETLONGS
-1)

	)

188 
	#BITn
(
n
Ë((()1L)<<(“)&0x1f))

	)

189 
	#BITFIELDn
(
tif
, 
n
Ë(—if)->
tif_dú
.
td_fõlds£t
[“)/32])

	)

190 
	#TIFFFõldSë
(
tif
, 
fõld
Ë(
	`BITFIELDn
—if, fõldË& 
	`BITn
(fõld))

	)

191 
	#TIFFSëFõldBô
(
tif
, 
fõld
Ë(
	`BITFIELDn
—if, fõldË|
	`BITn
(fõld))

	)

192 
	#TIFFCÃFõldBô
(
tif
, 
fõld
Ë(
	`BITFIELDn
—if, fõldË&~
	`BITn
(fõld))

	)

194 
	#FõldSë
(
fõlds
, 
f
Ë(fõlds[(f)/32] & 
	`BITn
(f))

	)

195 
	#Re£tFõldBô
(
fõlds
, 
f
Ë(fõlds[(f)/32] &~
	`BITn
(f))

	)

198 
	mTIFF_SETGET_UNDEFINED
 = 0,

199 
	mTIFF_SETGET_ASCII
 = 1,

200 
	mTIFF_SETGET_UINT8
 = 2,

201 
	mTIFF_SETGET_SINT8
 = 3,

202 
	mTIFF_SETGET_UINT16
 = 4,

203 
	mTIFF_SETGET_SINT16
 = 5,

204 
	mTIFF_SETGET_UINT32
 = 6,

205 
	mTIFF_SETGET_SINT32
 = 7,

206 
	mTIFF_SETGET_UINT64
 = 8,

207 
	mTIFF_SETGET_SINT64
 = 9,

208 
	mTIFF_SETGET_FLOAT
 = 10,

209 
	mTIFF_SETGET_DOUBLE
 = 11,

210 
	mTIFF_SETGET_IFD8
 = 12,

211 
	mTIFF_SETGET_INT
 = 13,

212 
	mTIFF_SETGET_UINT16_PAIR
 = 14,

213 
	mTIFF_SETGET_C0_ASCII
 = 15,

214 
	mTIFF_SETGET_C0_UINT8
 = 16,

215 
	mTIFF_SETGET_C0_SINT8
 = 17,

216 
	mTIFF_SETGET_C0_UINT16
 = 18,

217 
	mTIFF_SETGET_C0_SINT16
 = 19,

218 
	mTIFF_SETGET_C0_UINT32
 = 20,

219 
	mTIFF_SETGET_C0_SINT32
 = 21,

220 
	mTIFF_SETGET_C0_UINT64
 = 22,

221 
	mTIFF_SETGET_C0_SINT64
 = 23,

222 
	mTIFF_SETGET_C0_FLOAT
 = 24,

223 
	mTIFF_SETGET_C0_DOUBLE
 = 25,

224 
	mTIFF_SETGET_C0_IFD8
 = 26,

225 
	mTIFF_SETGET_C16_ASCII
 = 27,

226 
	mTIFF_SETGET_C16_UINT8
 = 28,

227 
	mTIFF_SETGET_C16_SINT8
 = 29,

228 
	mTIFF_SETGET_C16_UINT16
 = 30,

229 
	mTIFF_SETGET_C16_SINT16
 = 31,

230 
	mTIFF_SETGET_C16_UINT32
 = 32,

231 
	mTIFF_SETGET_C16_SINT32
 = 33,

232 
	mTIFF_SETGET_C16_UINT64
 = 34,

233 
	mTIFF_SETGET_C16_SINT64
 = 35,

234 
	mTIFF_SETGET_C16_FLOAT
 = 36,

235 
	mTIFF_SETGET_C16_DOUBLE
 = 37,

236 
	mTIFF_SETGET_C16_IFD8
 = 38,

237 
	mTIFF_SETGET_C32_ASCII
 = 39,

238 
	mTIFF_SETGET_C32_UINT8
 = 40,

239 
	mTIFF_SETGET_C32_SINT8
 = 41,

240 
	mTIFF_SETGET_C32_UINT16
 = 42,

241 
	mTIFF_SETGET_C32_SINT16
 = 43,

242 
	mTIFF_SETGET_C32_UINT32
 = 44,

243 
	mTIFF_SETGET_C32_SINT32
 = 45,

244 
	mTIFF_SETGET_C32_UINT64
 = 46,

245 
	mTIFF_SETGET_C32_SINT64
 = 47,

246 
	mTIFF_SETGET_C32_FLOAT
 = 48,

247 
	mTIFF_SETGET_C32_DOUBLE
 = 49,

248 
	mTIFF_SETGET_C32_IFD8
 = 50,

249 
	mTIFF_SETGET_OTHER
 = 51

250 } 
	tTIFFSëGëFõldTy≥
;

252 #i‡
deföed
(
__˝lu•lus
)

256 c⁄° 
TIFFFõldAºay
* 
_TIFFGëFõlds
();

257 c⁄° 
TIFFFõldAºay
* 
_TIFFGëExifFõlds
();

258 
_TIFFSëupFõlds
(
TIFF
* 
tif
, c⁄° 
TIFFFõldAºay
* 
öfﬂºay
);

259 
_TIFFPrötFõldInfo
(
TIFF
*, 
FILE
*);

261 
_TIFFFûlSåûes
(
TIFF
*);

264 
	gtfütImage
,

265 
	gtfütExif
,

266 
	gtfütOthî


267 } 
	tTIFFFõldAºayTy≥
;

269 
	s_TIFFFõldAºay
 {

270 
TIFFFõldAºayTy≥
 
	gty≥
;

271 
uöt32
 
	gÆloˇãd_size
;

272 
uöt32
 
	gcou¡
;

273 
TIFFFõld
* 
	gfõlds
;

276 
	s_TIFFFõld
 {

277 
uöt32
 
	gfõld_èg
;

278 
	gfõld_ªadcou¡
;

279 
	gfõld_wrôecou¡
;

280 
TIFFD©aTy≥
 
	gfõld_ty≥
;

281 
uöt32
 
	gª£rved
;

282 
TIFFSëGëFõldTy≥
 
	g£t_fõld_ty≥
;

283 
TIFFSëGëFõldTy≥
 
	ggë_fõld_ty≥
;

284 
	gfõld_bô
;

285 
	gfõld_oktoch™ge
;

286 
	gfõld_∑sscou¡
;

287 * 
	gfõld_«me
;

288 
TIFFFõldAºay
* 
	gfõld_subfõlds
;

291 
_TIFFMîgeFõlds
(
TIFF
*, c⁄° 
TIFFFõld
[], 
uöt32
);

292 c⁄° 
TIFFFõld
* 
_TIFFFödOrRegi°îFõld
(
TIFF
 *, 
uöt32
, 
TIFFD©aTy≥
);

293 
TIFFFõld
* 
_TIFFCª©eAn⁄Fõld
(
TIFF
 *, 
uöt32
, 
TIFFD©aTy≥
);

295 #i‡
deföed
(
__˝lu•lus
)

	@libtiff/tif_dirinfo.c

32 
	~"tiffi›.h
"

33 
	~<°dlib.h
>

45 
TIFFFõldAºay
 
	gtiffFõldAºay
;

46 
TIFFFõldAºay
 
	gexifFõldAºay
;

48 
TIFFFõld


49 
	gtiffFõlds
[] = {

50 { 
TIFFTAG_SUBFILETYPE
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_SUBFILETYPE
, 1, 0, "SubfûeTy≥", 
NULL
 },

51 { 
TIFFTAG_OSUBFILETYPE
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_SUBFILETYPE
, 1, 0, "OldSubfûeTy≥", 
NULL
 },

52 { 
TIFFTAG_IMAGEWIDTH
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_IMAGEDIMENSIONS
, 0, 0, "ImageWidth", 
NULL
 },

53 { 
TIFFTAG_IMAGELENGTH
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_IMAGEDIMENSIONS
, 1, 0, "ImageLígth", 
NULL
 },

54 { 
TIFFTAG_BITSPERSAMPLE
, -1, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_BITSPERSAMPLE
, 0, 0, "BôsPîSam∂e", 
NULL
 },

55 { 
TIFFTAG_COMPRESSION
, -1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_COMPRESSION
, 0, 0, "Com¥essi⁄", 
NULL
 },

56 { 
TIFFTAG_PHOTOMETRIC
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PHOTOMETRIC
, 0, 0, "PhŸomëricI¡î¥ë©i⁄", 
NULL
 },

57 { 
TIFFTAG_THRESHHOLDING
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_THRESHHOLDING
, 1, 0, "Thªshhﬁdög", 
NULL
 },

58 { 
TIFFTAG_CELLWIDTH
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_IGNORE
, 1, 0, "CñlWidth", 
NULL
 },

59 { 
TIFFTAG_CELLLENGTH
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_IGNORE
, 1, 0, "CñlLígth", 
NULL
 },

60 { 
TIFFTAG_FILLORDER
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_FILLORDER
, 0, 0, "FûlOrdî", 
NULL
 },

61 { 
TIFFTAG_DOCUMENTNAME
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "DocumítName", 
NULL
 },

62 { 
TIFFTAG_IMAGEDESCRIPTION
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "ImageDes¸ùti⁄", 
NULL
 },

63 { 
TIFFTAG_MAKE
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Make", 
NULL
 },

64 { 
TIFFTAG_MODEL
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Modñ", 
NULL
 },

65 { 
TIFFTAG_STRIPOFFSETS
, -1, -1, 
TIFF_LONG8
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_STRIPOFFSETS
, 0, 0, "SåùOff£ts", 
NULL
 },

66 { 
TIFFTAG_ORIENTATION
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_ORIENTATION
, 0, 0, "Orõ¡©i⁄", 
NULL
 },

67 { 
TIFFTAG_SAMPLESPERPIXEL
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_SAMPLESPERPIXEL
, 0, 0, "Sam∂esPîPixñ", 
NULL
 },

68 { 
TIFFTAG_ROWSPERSTRIP
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_ROWSPERSTRIP
, 0, 0, "RowsPîSåù", 
NULL
 },

69 { 
TIFFTAG_STRIPBYTECOUNTS
, -1, -1, 
TIFF_LONG8
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_STRIPBYTECOUNTS
, 0, 0, "SåùByãCou¡s", 
NULL
 },

70 { 
TIFFTAG_MINSAMPLEVALUE
, -2, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_MINSAMPLEVALUE
, 1, 0, "MöSam∂eVÆue", 
NULL
 },

71 { 
TIFFTAG_MAXSAMPLEVALUE
, -2, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_MAXSAMPLEVALUE
, 1, 0, "MaxSam∂eVÆue", 
NULL
 },

72 { 
TIFFTAG_XRESOLUTION
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_RESOLUTION
, 1, 0, "XResﬁuti⁄", 
NULL
 },

73 { 
TIFFTAG_YRESOLUTION
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_RESOLUTION
, 1, 0, "YResﬁuti⁄", 
NULL
 },

74 { 
TIFFTAG_PLANARCONFIG
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PLANARCONFIG
, 0, 0, "Pœ«rC⁄figuøti⁄", 
NULL
 },

75 { 
TIFFTAG_PAGENAME
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "PageName", 
NULL
 },

76 { 
TIFFTAG_XPOSITION
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_POSITION
, 1, 0, "XPosôi⁄", 
NULL
 },

77 { 
TIFFTAG_YPOSITION
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_POSITION
, 1, 0, "YPosôi⁄", 
NULL
 },

78 { 
TIFFTAG_FREEOFFSETS
, -1, -1, 
TIFF_LONG8
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_IGNORE
, 0, 0, "FªeOff£ts", 
NULL
 },

79 { 
TIFFTAG_FREEBYTECOUNTS
, -1, -1, 
TIFF_LONG8
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_IGNORE
, 0, 0, "FªeByãCou¡s", 
NULL
 },

80 { 
TIFFTAG_GRAYRESPONSEUNIT
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_IGNORE
, 1, 0, "GøyRe•⁄£Unô", 
NULL
 },

81 { 
TIFFTAG_GRAYRESPONSECURVE
, -1, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_IGNORE
, 1, 0, "GøyRe•⁄£Curve", 
NULL
 },

82 { 
TIFFTAG_RESOLUTIONUNIT
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_RESOLUTIONUNIT
, 1, 0, "Resﬁuti⁄Unô", 
NULL
 },

83 { 
TIFFTAG_PAGENUMBER
, 2, 2, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16_PAIR
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PAGENUMBER
, 1, 0, "PageNumbî", 
NULL
 },

84 { 
TIFFTAG_COLORRESPONSEUNIT
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_IGNORE
, 1, 0, "Cﬁ‹Re•⁄£Unô", 
NULL
 },

85 { 
TIFFTAG_TRANSFERFUNCTION
, -1, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_OTHER
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_TRANSFERFUNCTION
, 1, 0, "Tøns„rFun˘i⁄", 
NULL
 },

86 { 
TIFFTAG_SOFTWARE
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "So·w¨e", 
NULL
 },

87 { 
TIFFTAG_DATETIME
, 20, 20, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "D©eTime", 
NULL
 },

88 { 
TIFFTAG_ARTIST
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Aπi°", 
NULL
 },

89 { 
TIFFTAG_HOSTCOMPUTER
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Ho°Compuãr", 
NULL
 },

90 { 
TIFFTAG_WHITEPOINT
, 2, 2, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C0_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "WhôePoöt", 
NULL
 },

91 { 
TIFFTAG_PRIMARYCHROMATICITIES
, 6, 6, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C0_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Prim¨yChrom©icôõs", 
NULL
 },

92 { 
TIFFTAG_COLORMAP
, -1, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_OTHER
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_COLORMAP
, 1, 0, "Cﬁ‹M≠", 
NULL
 },

93 { 
TIFFTAG_HALFTONEHINTS
, 2, 2, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16_PAIR
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_HALFTONEHINTS
, 1, 0, "HÆ·⁄eHöts", 
NULL
 },

94 { 
TIFFTAG_TILEWIDTH
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_TILEDIMENSIONS
, 0, 0, "TûeWidth", 
NULL
 },

95 { 
TIFFTAG_TILELENGTH
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_TILEDIMENSIONS
, 0, 0, "TûeLígth", 
NULL
 },

96 { 
TIFFTAG_TILEOFFSETS
, -1, 1, 
TIFF_LONG8
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_STRIPOFFSETS
, 0, 0, "TûeOff£ts", 
NULL
 },

97 { 
TIFFTAG_TILEBYTECOUNTS
, -1, 1, 
TIFF_LONG8
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_STRIPBYTECOUNTS
, 0, 0, "TûeByãCou¡s", 
NULL
 },

98 { 
TIFFTAG_SUBIFD
, -1, -1, 
TIFF_IFD8
, 0, 
TIFF_SETGET_C16_IFD8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_SUBIFD
, 1, 1, "SubIFD", &
tiffFõldAºay
 },

99 { 
TIFFTAG_INKSET
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "InkSë", 
NULL
 },

100 { 
TIFFTAG_INKNAMES
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_C16_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_INKNAMES
, 1, 1, "InkNames", 
NULL
 },

101 { 
TIFFTAG_NUMBEROFINKS
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "NumbîOfInks", 
NULL
 },

102 { 
TIFFTAG_DOTRANGE
, 2, 2, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16_PAIR
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "DŸR™ge", 
NULL
 },

103 { 
TIFFTAG_TARGETPRINTER
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "T¨gëPröãr", 
NULL
 },

104 { 
TIFFTAG_EXTRASAMPLES
, -1, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_C16_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_EXTRASAMPLES
, 0, 1, "ExåaSam∂es", 
NULL
 },

105 { 
TIFFTAG_SAMPLEFORMAT
, -1, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_SAMPLEFORMAT
, 0, 0, "Sam∂eF‹m©", 
NULL
 },

106 { 
TIFFTAG_SMINSAMPLEVALUE
, -2, -1, 
TIFF_ANY
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_SMINSAMPLEVALUE
, 1, 0, "SMöSam∂eVÆue", 
NULL
 },

107 { 
TIFFTAG_SMAXSAMPLEVALUE
, -2, -1, 
TIFF_ANY
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_SMAXSAMPLEVALUE
, 1, 0, "SMaxSam∂eVÆue", 
NULL
 },

108 { 
TIFFTAG_CLIPPATH
, -1, -3, 
TIFF_BYTE
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_CUSTOM
, 0, 1, "ClùP©h", 
NULL
 },

109 { 
TIFFTAG_XCLIPPATHUNITS
, 1, 1, 
TIFF_SLONG
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_CUSTOM
, 0, 0, "XClùP©hUnôs", 
NULL
 },

110 { 
TIFFTAG_XCLIPPATHUNITS
, 1, 1, 
TIFF_SBYTE
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_CUSTOM
, 0, 0, "XClùP©hUnôs", 
NULL
 },

111 { 
TIFFTAG_YCLIPPATHUNITS
, 1, 1, 
TIFF_SLONG
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_CUSTOM
, 0, 0, "YClùP©hUnôs", 
NULL
 },

112 { 
TIFFTAG_YCBCRCOEFFICIENTS
, 3, 3, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C0_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "YCbCrC€fficõ¡s", 
NULL
 },

113 { 
TIFFTAG_YCBCRSUBSAMPLING
, 2, 2, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16_PAIR
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_YCBCRSUBSAMPLING
, 0, 0, "YCbCrSubßm∂ög", 
NULL
 },

114 { 
TIFFTAG_YCBCRPOSITIONING
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_YCBCRPOSITIONING
, 0, 0, "YCbCrPosôi⁄ög", 
NULL
 },

115 { 
TIFFTAG_REFERENCEBLACKWHITE
, 6, 6, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C0_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_REFBLACKWHITE
, 1, 0, "Re„ªn˚BœckWhôe", 
NULL
 },

116 { 
TIFFTAG_XMLPACKET
, -3, -3, 
TIFF_BYTE
, 0, 
TIFF_SETGET_C32_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "XMLPackë", 
NULL
 },

118 { 
TIFFTAG_MATTEING
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_EXTRASAMPLES
, 0, 0, "M©ãög", 
NULL
 },

119 { 
TIFFTAG_DATATYPE
, -2, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_SAMPLEFORMAT
, 0, 0, "D©aTy≥", 
NULL
 },

120 { 
TIFFTAG_IMAGEDEPTH
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_IMAGEDEPTH
, 0, 0, "ImageDïth", 
NULL
 },

121 { 
TIFFTAG_TILEDEPTH
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_TILEDEPTH
, 0, 0, "TûeDïth", 
NULL
 },

124 { 
TIFFTAG_PIXAR_IMAGEFULLWIDTH
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "ImageFuŒWidth", 
NULL
 },

125 { 
TIFFTAG_PIXAR_IMAGEFULLLENGTH
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "ImageFuŒLígth", 
NULL
 },

126 { 
TIFFTAG_PIXAR_TEXTUREFORMAT
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "TextuªF‹m©", 
NULL
 },

127 { 
TIFFTAG_PIXAR_WRAPMODES
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "TextuªWøpModes", 
NULL
 },

128 { 
TIFFTAG_PIXAR_FOVCOT
, 1, 1, 
TIFF_FLOAT
, 0, 
TIFF_SETGET_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "FõldOfVõwCŸ™gít", 
NULL
 },

129 { 
TIFFTAG_PIXAR_MATRIX_WORLDTOSCREEN
, 16, 16, 
TIFF_FLOAT
, 0, 
TIFF_SETGET_C0_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "M©rixW‹ldToS¸ìn", 
NULL
 },

130 { 
TIFFTAG_PIXAR_MATRIX_WORLDTOCAMERA
, 16, 16, 
TIFF_FLOAT
, 0, 
TIFF_SETGET_C0_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "M©rixW‹ldToCamîa", 
NULL
 },

131 { 
TIFFTAG_COPYRIGHT
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "C›yright", 
NULL
 },

133 { 
TIFFTAG_RICHTIFFIPTC
, -3, -3, 
TIFF_LONG
, 0, 
TIFF_SETGET_C32_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "RichTIFFIPTC", 
NULL
 },

134 { 
TIFFTAG_PHOTOSHOP
, -3, -3, 
TIFF_BYTE
, 0, 
TIFF_SETGET_C32_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "PhŸosh›", 
NULL
 },

135 { 
TIFFTAG_EXIFIFD
, 1, 1, 
TIFF_IFD8
, 0, 
TIFF_SETGET_IFD8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "EXIFIFDOff£t", &
exifFõldAºay
 },

136 { 
TIFFTAG_ICCPROFILE
, -3, -3, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C32_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "ICC Profûe", 
NULL
 },

137 { 
TIFFTAG_GPSIFD
, 1, 1, 
TIFF_IFD8
, 0, 
TIFF_SETGET_IFD8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "GPSIFDOff£t", 
NULL
 },

138 { 
TIFFTAG_FAXRECVPARAMS
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, TIFF_SETGET_UINT32, 
FIELD_CUSTOM
, 
TRUE
, 
FALSE
, "FaxRecvP¨ams", 
NULL
 },

139 { 
TIFFTAG_FAXSUBADDRESS
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, TIFF_SETGET_ASCII, 
FIELD_CUSTOM
, 
TRUE
, 
FALSE
, "FaxSubAddªss", 
NULL
 },

140 { 
TIFFTAG_FAXRECVTIME
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, TIFF_SETGET_UINT32, 
FIELD_CUSTOM
, 
TRUE
, 
FALSE
, "FaxRecvTime", 
NULL
 },

141 { 
TIFFTAG_FAXDCS
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, TIFF_SETGET_ASCII, 
FIELD_CUSTOM
, 
TRUE
, 
FALSE
, "FaxDcs", 
NULL
 },

142 { 
TIFFTAG_STONITS
, 1, 1, 
TIFF_DOUBLE
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "StoNôs", 
NULL
 },

143 { 
TIFFTAG_INTEROPERABILITYIFD
, 1, 1, 
TIFF_IFD8
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_CUSTOM
, 0, 0, "I¡î›îabûôyIFDOff£t", 
NULL
 },

145 { 
TIFFTAG_DNGVERSION
, 4, 4, 
TIFF_BYTE
, 0, 
TIFF_SETGET_C0_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "DNGVîsi⁄", 
NULL
 },

146 { 
TIFFTAG_DNGBACKWARDVERSION
, 4, 4, 
TIFF_BYTE
, 0, 
TIFF_SETGET_C0_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "DNGBackw¨dVîsi⁄", 
NULL
 },

147 { 
TIFFTAG_UNIQUECAMERAMODEL
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "UniqueCamîaModñ", 
NULL
 },

148 { 
TIFFTAG_LOCALIZEDCAMERAMODEL
, -1, -1, 
TIFF_BYTE
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 1, "LoˇlizedCamîaModñ", 
NULL
 },

149 { 
TIFFTAG_CFAPLANECOLOR
, -1, -1, 
TIFF_BYTE
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "CFAPœ√Cﬁ‹", 
NULL
 },

150 { 
TIFFTAG_CFALAYOUT
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "CFALayout", 
NULL
 },

151 { 
TIFFTAG_LINEARIZATIONTABLE
, -1, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_C16_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "Löóriz©i⁄TabÀ", 
NULL
 },

152 { 
TIFFTAG_BLACKLEVELREPEATDIM
, 2, 2, 
TIFF_SHORT
, 0, 
TIFF_SETGET_C0_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "BœckLevñRïótDim", 
NULL
 },

153 { 
TIFFTAG_BLACKLEVEL
, -1, -1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "BœckLevñ", 
NULL
 },

154 { 
TIFFTAG_BLACKLEVELDELTAH
, -1, -1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "BœckLevñDñèH", 
NULL
 },

155 { 
TIFFTAG_BLACKLEVELDELTAV
, -1, -1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "BœckLevñDñèV", 
NULL
 },

156 { 
TIFFTAG_WHITELEVEL
, -1, -1, 
TIFF_LONG
, 0, 
TIFF_SETGET_C16_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "WhôeLevñ", 
NULL
 },

157 { 
TIFFTAG_DEFAULTSCALE
, 2, 2, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C0_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "DeÁu…SˇÀ", 
NULL
 },

158 { 
TIFFTAG_BESTQUALITYSCALE
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "Be°QuÆôySˇÀ", 
NULL
 },

159 { 
TIFFTAG_DEFAULTCROPORIGIN
, 2, 2, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C0_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "DeÁu…Cr›Origö", 
NULL
 },

160 { 
TIFFTAG_DEFAULTCROPSIZE
, 2, 2, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C0_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "DeÁu…Cr›Size", 
NULL
 },

161 { 
TIFFTAG_COLORMATRIX1
, -1, -1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "Cﬁ‹M©rix1", 
NULL
 },

162 { 
TIFFTAG_COLORMATRIX2
, -1, -1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "Cﬁ‹M©rix2", 
NULL
 },

163 { 
TIFFTAG_CAMERACALIBRATION1
, -1, -1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "CamîaCÆibøti⁄1", 
NULL
 },

164 { 
TIFFTAG_CAMERACALIBRATION2
, -1, -1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "CamîaCÆibøti⁄2", 
NULL
 },

165 { 
TIFFTAG_REDUCTIONMATRIX1
, -1, -1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "Redu˘i⁄M©rix1", 
NULL
 },

166 { 
TIFFTAG_REDUCTIONMATRIX2
, -1, -1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "Redu˘i⁄M©rix2", 
NULL
 },

167 { 
TIFFTAG_ANALOGBALANCE
, -1, -1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "A«logBÆ™˚", 
NULL
 },

168 { 
TIFFTAG_ASSHOTNEUTRAL
, -1, -1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "AsShŸNeuåÆ", 
NULL
 },

169 { 
TIFFTAG_ASSHOTWHITEXY
, 2, 2, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C0_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "AsShŸWhôeXY", 
NULL
 },

170 { 
TIFFTAG_BASELINEEXPOSURE
, 1, 1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "Ba£löeExposuª", 
NULL
 },

171 { 
TIFFTAG_BASELINENOISE
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "Ba£löeNoi£", 
NULL
 },

172 { 
TIFFTAG_BASELINESHARPNESS
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "Ba£löeSh¨≤ess", 
NULL
 },

173 { 
TIFFTAG_BAYERGREENSPLIT
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "BayîGªíS∂ô", 
NULL
 },

174 { 
TIFFTAG_LINEARRESPONSELIMIT
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "LöórRe•⁄£Limô", 
NULL
 },

175 { 
TIFFTAG_CAMERASERIALNUMBER
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "CamîaSîülNumbî", 
NULL
 },

176 { 
TIFFTAG_LENSINFO
, 4, 4, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_C0_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "LísInfo", 
NULL
 },

177 { 
TIFFTAG_CHROMABLURRADIUS
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "ChromaBlurRadius", 
NULL
 },

178 { 
TIFFTAG_ANTIALIASSTRENGTH
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "A¡iAlüsSåígth", 
NULL
 },

179 { 
TIFFTAG_SHADOWSCALE
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "ShadowSˇÀ", 
NULL
 },

180 { 
TIFFTAG_DNGPRIVATEDATA
, -1, -1, 
TIFF_BYTE
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "DNGPriv©eD©a", 
NULL
 },

181 { 
TIFFTAG_MAKERNOTESAFETY
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "MakîNŸeSa„ty", 
NULL
 },

182 { 
TIFFTAG_CALIBRATIONILLUMINANT1
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "CÆibøti⁄IŒumö™t1", 
NULL
 },

183 { 
TIFFTAG_CALIBRATIONILLUMINANT2
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "CÆibøti⁄IŒumö™t2", 
NULL
 },

184 { 
TIFFTAG_RAWDATAUNIQUEID
, 16, 16, 
TIFF_BYTE
, 0, 
TIFF_SETGET_C0_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "RawD©aUniqueID", 
NULL
 },

185 { 
TIFFTAG_ORIGINALRAWFILENAME
, -1, -1, 
TIFF_BYTE
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 1, "OrigöÆRawFûeName", 
NULL
 },

186 { 
TIFFTAG_ORIGINALRAWFILEDATA
, -1, -1, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "OrigöÆRawFûeD©a", 
NULL
 },

187 { 
TIFFTAG_ACTIVEAREA
, 4, 4, 
TIFF_LONG
, 0, 
TIFF_SETGET_C0_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 0, "A˘iveAªa", 
NULL
 },

188 { 
TIFFTAG_MASKEDAREAS
, -1, -1, 
TIFF_LONG
, 0, 
TIFF_SETGET_C16_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "MaskedAªas", 
NULL
 },

189 { 
TIFFTAG_ASSHOTICCPROFILE
, -1, -1, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "AsShŸICCProfûe", 
NULL
 },

190 { 
TIFFTAG_ASSHOTPREPROFILEMATRIX
, -1, -1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "AsShŸPªProfûeM©rix", 
NULL
 },

191 { 
TIFFTAG_CURRENTICCPROFILE
, -1, -1, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "CuºítICCProfûe", 
NULL
 },

192 { 
TIFFTAG_CURRENTPREPROFILEMATRIX
, -1, -1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_C16_FLOAT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 0, 1, "CuºítPªProfûeM©rix", 
NULL
 },

195 { 
TIFFTAG_PERSAMPLE
, 0, 0, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UNDEFINED
, TIFF_SETGET_UNDEFINED, 
FIELD_PSEUDO
, 
TRUE
, 
FALSE
, "PîSam∂e", 
NULL
},

198 
TIFFFõld


199 
	gexifFõlds
[] = {

200 { 
EXIFTAG_EXPOSURETIME
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "ExposuªTime", 
NULL
 },

201 { 
EXIFTAG_FNUMBER
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "FNumbî", 
NULL
 },

202 { 
EXIFTAG_EXPOSUREPROGRAM
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "ExposuªProgøm", 
NULL
 },

203 { 
EXIFTAG_SPECTRALSENSITIVITY
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "S≥˘ølSísôivôy", 
NULL
 },

204 { 
EXIFTAG_ISOSPEEDRATINGS
, -1, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_C16_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 1, "ISOS≥edR©ögs", 
NULL
 },

205 { 
EXIFTAG_OECF
, -1, -1, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 1, "O±€À˘ricC⁄vîsi⁄Fa˘‹", 
NULL
 },

206 { 
EXIFTAG_EXIFVERSION
, 4, 4, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C0_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "ExifVîsi⁄", 
NULL
 },

207 { 
EXIFTAG_DATETIMEORIGINAL
, 20, 20, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "D©eTimeOrigöÆ", 
NULL
 },

208 { 
EXIFTAG_DATETIMEDIGITIZED
, 20, 20, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "D©eTimeDigôized", 
NULL
 },

209 { 
EXIFTAG_COMPONENTSCONFIGURATION
, 4, 4, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C0_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Comp⁄ítsC⁄figuøti⁄", 
NULL
 },

210 { 
EXIFTAG_COMPRESSEDBITSPERPIXEL
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Com¥es£dBôsPîPixñ", 
NULL
 },

211 { 
EXIFTAG_SHUTTERSPEEDVALUE
, 1, 1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "ShuâîS≥edVÆue", 
NULL
 },

212 { 
EXIFTAG_APERTUREVALUE
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "A≥πuªVÆue", 
NULL
 },

213 { 
EXIFTAG_BRIGHTNESSVALUE
, 1, 1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "BrighäessVÆue", 
NULL
 },

214 { 
EXIFTAG_EXPOSUREBIASVALUE
, 1, 1, 
TIFF_SRATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "ExposuªBüsVÆue", 
NULL
 },

215 { 
EXIFTAG_MAXAPERTUREVALUE
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "MaxA≥πuªVÆue", 
NULL
 },

216 { 
EXIFTAG_SUBJECTDISTANCE
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Subje˘Di°™˚", 
NULL
 },

217 { 
EXIFTAG_METERINGMODE
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "MëîögMode", 
NULL
 },

218 { 
EXIFTAG_LIGHTSOURCE
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "LightSour˚", 
NULL
 },

219 { 
EXIFTAG_FLASH
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Fœsh", 
NULL
 },

220 { 
EXIFTAG_FOCALLENGTH
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "FoˇlLígth", 
NULL
 },

221 { 
EXIFTAG_SUBJECTAREA
, -1, -1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_C16_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 1, "Subje˘Aªa", 
NULL
 },

222 { 
EXIFTAG_MAKERNOTE
, -1, -1, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 1, "MakîNŸe", 
NULL
 },

223 { 
EXIFTAG_USERCOMMENT
, -1, -1, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 1, "U£rCommít", 
NULL
 },

224 { 
EXIFTAG_SUBSECTIME
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "SubSecTime", 
NULL
 },

225 { 
EXIFTAG_SUBSECTIMEORIGINAL
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "SubSecTimeOrigöÆ", 
NULL
 },

226 { 
EXIFTAG_SUBSECTIMEDIGITIZED
, -1, -1, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "SubSecTimeDigôized", 
NULL
 },

227 { 
EXIFTAG_FLASHPIXVERSION
, 4, 4, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C0_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "FœshpixVîsi⁄", 
NULL
 },

228 { 
EXIFTAG_COLORSPACE
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Cﬁ‹S∑˚", 
NULL
 },

229 { 
EXIFTAG_PIXELXDIMENSION
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "PixñXDimísi⁄", 
NULL
 },

230 { 
EXIFTAG_PIXELYDIMENSION
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "PixñYDimísi⁄", 
NULL
 },

231 { 
EXIFTAG_RELATEDSOUNDFILE
, 13, 13, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Rñ©edSoundFûe", 
NULL
 },

232 { 
EXIFTAG_FLASHENERGY
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "FœshE√rgy", 
NULL
 },

233 { 
EXIFTAG_SPATIALFREQUENCYRESPONSE
, -1, -1, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 1, "S∑tülFªquícyRe•⁄£", 
NULL
 },

234 { 
EXIFTAG_FOCALPLANEXRESOLUTION
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "FoˇlPœ√XResﬁuti⁄", 
NULL
 },

235 { 
EXIFTAG_FOCALPLANEYRESOLUTION
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "FoˇlPœ√YResﬁuti⁄", 
NULL
 },

236 { 
EXIFTAG_FOCALPLANERESOLUTIONUNIT
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "FoˇlPœ√Resﬁuti⁄Unô", 
NULL
 },

237 { 
EXIFTAG_SUBJECTLOCATION
, 2, 2, 
TIFF_SHORT
, 0, 
TIFF_SETGET_C0_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Subje˘Loˇti⁄", 
NULL
 },

238 { 
EXIFTAG_EXPOSUREINDEX
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "ExposuªIndex", 
NULL
 },

239 { 
EXIFTAG_SENSINGMETHOD
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "SísögMëhod", 
NULL
 },

240 { 
EXIFTAG_FILESOURCE
, 1, 1, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "FûeSour˚", 
NULL
 },

241 { 
EXIFTAG_SCENETYPE
, 1, 1, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "S˚√Ty≥", 
NULL
 },

242 { 
EXIFTAG_CFAPATTERN
, -1, -1, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 1, "CFAP©ã∫", 
NULL
 },

243 { 
EXIFTAG_CUSTOMRENDERED
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Cu°omRídîed", 
NULL
 },

244 { 
EXIFTAG_EXPOSUREMODE
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "ExposuªMode", 
NULL
 },

245 { 
EXIFTAG_WHITEBALANCE
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "WhôeBÆ™˚", 
NULL
 },

246 { 
EXIFTAG_DIGITALZOOMRATIO
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "DigôÆZoomR©io", 
NULL
 },

247 { 
EXIFTAG_FOCALLENGTHIN35MMFILM
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "FoˇlLígthIn35mmFûm", 
NULL
 },

248 { 
EXIFTAG_SCENECAPTURETYPE
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "S˚√C≠tuªTy≥", 
NULL
 },

249 { 
EXIFTAG_GAINCONTROL
, 1, 1, 
TIFF_RATIONAL
, 0, 
TIFF_SETGET_DOUBLE
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "GaöC⁄åﬁ", 
NULL
 },

250 { 
EXIFTAG_CONTRAST
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "C⁄åa°", 
NULL
 },

251 { 
EXIFTAG_SATURATION
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "S©uøti⁄", 
NULL
 },

252 { 
EXIFTAG_SHARPNESS
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Sh¨≤ess", 
NULL
 },

253 { 
EXIFTAG_DEVICESETTINGDESCRIPTION
, -1, -1, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C16_UINT8
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 1, "Devi˚SëtögDes¸ùti⁄", 
NULL
 },

254 { 
EXIFTAG_SUBJECTDISTANCERANGE
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "Subje˘Di°™˚R™ge", 
NULL
 },

255 { 
EXIFTAG_IMAGEUNIQUEID
, 33, 33, 
TIFF_ASCII
, 0, 
TIFF_SETGET_ASCII
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_CUSTOM
, 1, 0, "ImageUniqueID", 
NULL
 }

258 
TIFFFõldAºay


259 
	gtiffFõldAºay
 = { 
tfütImage
, 0, 
TIFFAºayCou¡
(
tiffFõlds
),ÅiffFields };

260 
TIFFFõldAºay


261 
	gexifFõldAºay
 = { 
tfütExif
, 0, 
TIFFAºayCou¡
(
exifFõlds
),ÉxifFields };

269 
	$td_lföd
(c⁄° *
key
, c⁄° *
ba£
, 
size_t
 *
nmemb
, size_à
size
,

270 (*
com∑r
)(const *, const *))

272 *
ñemít
, *
íd
;

274 
íd
 = (*)
ba£
 + *
nmemb
 * 
size
;

275 
ñemít
 = (*)
ba£
;ÉÀmíà< 
íd
;ÉÀmíà+
size
)

276 i‡(!
	`com∑r
(
key
, 
ñemít
))

277  
ñemít
;

279  
NULL
;

280 
	}
}

282 c⁄° 
TIFFFõldAºay
*

283 
	$_TIFFGëFõlds
()

285 (&
tiffFõldAºay
);

286 
	}
}

288 c⁄° 
TIFFFõldAºay
*

289 
	$_TIFFGëExifFõlds
()

291 (&
exifFõldAºay
);

292 
	}
}

295 
	$_TIFFSëupFõlds
(
TIFF
* 
tif
, c⁄° 
TIFFFõldAºay
* 
fõld¨øy
)

297 i‡(
tif
->
tif_fõlds
 &&Åif->
tif_nfõlds
 > 0) {

298 
uöt32
 
i
;

300 
i
 = 0; i < 
tif
->
tif_nfõlds
; i++) {

301 
TIFFFõld
 *
Êd
 = 
tif
->
tif_fõlds
[
i
];

302 i‡(
Êd
->
fõld_bô
 =
FIELD_CUSTOM
 &&

303 
	`°∫cmp
("Tag ", 
Êd
->
fõld_«me
, 4) == 0) {

304 
	`_TIFF‰ì
(
Êd
->
fõld_«me
);

305 
	`_TIFF‰ì
(
Êd
);

309 
	`_TIFF‰ì
(
tif
->
tif_fõlds
);

310 
tif
->
tif_fõlds
 = 
NULL
;

311 
tif
->
tif_nfõlds
 = 0;

313 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
fõld¨øy
->
fõlds
, fõld¨øy->
cou¡
)) {

314 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "_TIFFSetupFields",

317 
	}
}

320 
	$ègCom∑ª
(c⁄° * 
a
, c⁄° * 
b
)

322 c⁄° 
TIFFFõld
* 
è
 = *(c⁄° TIFFFõld**Ë
a
;

323 c⁄° 
TIFFFõld
* 
tb
 = *(c⁄° TIFFFõld**Ë
b
;

325 i‡(
è
->
fõld_èg
 !
tb
->field_tag)

326  ()
è
->
fõld_èg
 - ()
tb
->field_tag;

328  (
è
->
fõld_ty≥
 =
TIFF_ANY
) ?

329 0 : (()
tb
->
fõld_ty≥
 - ()
è
->field_type);

330 
	}
}

333 
	$ègNameCom∑ª
(c⁄° * 
a
, c⁄° * 
b
)

335 c⁄° 
TIFFFõld
* 
è
 = *(c⁄° TIFFFõld**Ë
a
;

336 c⁄° 
TIFFFõld
* 
tb
 = *(c⁄° TIFFFõld**Ë
b
;

337 
ªt
 = 
	`°rcmp
(
è
->
fõld_«me
, 
tb
->field_name);

339 i‡(
ªt
)

340  
ªt
;

342  (
è
->
fõld_ty≥
 =
TIFF_ANY
) ?

343 0 : (()
tb
->
fõld_ty≥
 - ()
è
->field_type);

344 
	}
}

347 
	$_TIFFMîgeFõlds
(
TIFF
* 
tif
, c⁄° 
TIFFFõld
 
öfo
[], 
uöt32
 
n
)

349 c⁄° 
moduÀ
[] = "_TIFFMergeFields";

350 c⁄° 
ªas⁄
[] = "for fieldsárray";

351 
TIFFFõld
** 
ç
;

352 
uöt32
 
i
;

354 
tif
->
tif_foundfõld
 = 
NULL
;

356 i‡(
tif
->
tif_fõlds
 &&Åif->
tif_nfõlds
 > 0) {

357 
tif
->
tif_fõlds
 = (
TIFFFõld
**)

358 
	`_TIFFCheckRóŒoc
(
tif
,Åif->
tif_fõlds
,

359 (
tif
->
tif_nfõlds
 + 
n
),

360 (
TIFFFõld
 *), 
ªas⁄
);

362 
tif
->
tif_fõlds
 = (
TIFFFõld
 **)

363 
	`_TIFFCheckMÆloc
(
tif
, 
n
, (
TIFFFõld
 *),

364 
ªas⁄
);

366 i‡(!
tif
->
tif_fõlds
) {

367 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

372 
ç
 = 
tif
->
tif_fõlds
 +Åif->
tif_nfõlds
;

373 
i
 = 0; i < 
n
; i++) {

374 c⁄° 
TIFFFõld
 *
fù
 =

375 
	`TIFFFödFõld
(
tif
, 
öfo
[
i
].
fõld_èg
, 
TIFF_ANY
);

378 i‡(!
fù
) {

379 
tif
->
tif_fõlds
[tif->
tif_nfõlds
] = (
TIFFFõld
 *Ë(
öfo
+
i
);

380 
tif
->
tif_nfõlds
++;

385 
	`qs‹t
(
tif
->
tif_fõlds
,Åif->
tif_nfõlds
,

386 (
TIFFFõld
 *), 
ègCom∑ª
);

388  
n
;

389 
	}
}

392 
	$_TIFFPrötFõldInfo
(
TIFF
* 
tif
, 
FILE
* 
fd
)

394 
uöt32
 
i
;

396 
	`Ârötf
(
fd
, "%s: \n", 
tif
->
tif_«me
);

397 
i
 = 0; i < 
tif
->
tif_nfõlds
; i++) {

398 c⁄° 
TIFFFõld
* 
fù
 = 
tif
->
tif_fõlds
[
i
];

399 
	`Ârötf
(
fd
, "field[%2d] %5lu, %2d, %2d, %d, %2d, %5s, %5s, %s\n"

400 , ()
i


401 , (Ë
fù
->
fõld_èg


402 , 
fù
->
fõld_ªadcou¡
, fù->
fõld_wrôecou¡


403 , 
fù
->
fõld_ty≥


404 , 
fù
->
fõld_bô


405 , 
fù
->
fõld_oktoch™ge
 ? "TRUE" : "FALSE"

406 , 
fù
->
fõld_∑sscou¡
 ? "TRUE" : "FALSE"

407 , 
fù
->
fõld_«me


410 
	}
}

416 
	$TIFFD©aWidth
(
TIFFD©aTy≥
 
ty≥
)

418 
ty≥
)

421 
TIFF_BYTE
:

422 
TIFF_ASCII
:

423 
TIFF_SBYTE
:

424 
TIFF_UNDEFINED
:

426 
TIFF_SHORT
:

427 
TIFF_SSHORT
:

429 
TIFF_LONG
:

430 
TIFF_SLONG
:

431 
TIFF_FLOAT
:

432 
TIFF_IFD
:

434 
TIFF_RATIONAL
:

435 
TIFF_SRATIONAL
:

436 
TIFF_DOUBLE
:

437 
TIFF_LONG8
:

438 
TIFF_SLONG8
:

439 
TIFF_IFD8
:

444 
	}
}

454 
	$_TIFFD©aSize
(
TIFFD©aTy≥
 
ty≥
)

456 
ty≥
)

458 
TIFF_BYTE
:

459 
TIFF_SBYTE
:

460 
TIFF_ASCII
:

461 
TIFF_UNDEFINED
:

463 
TIFF_SHORT
:

464 
TIFF_SSHORT
:

466 
TIFF_LONG
:

467 
TIFF_SLONG
:

468 
TIFF_FLOAT
:

469 
TIFF_IFD
:

470 
TIFF_RATIONAL
:

471 
TIFF_SRATIONAL
:

473 
TIFF_DOUBLE
:

474 
TIFF_LONG8
:

475 
TIFF_SLONG8
:

476 
TIFF_IFD8
:

481 
	}
}

483 c⁄° 
TIFFFõld
*

484 
	$TIFFFödFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
TIFFD©aTy≥
 
dt
)

486 
TIFFFõld
 
key
 = {0, 0, 0, 
TIFF_NOTYPE
, 0, 0, 0, 0, 0, 0, 
NULL
, NULL};

487 
TIFFFõld
* 
pkey
 = &
key
;

488 c⁄° 
TIFFFõld
 **
ªt
;

489 i‡(
tif
->
tif_foundfõld
 &&Åif->tif_foundfõld->
fõld_èg
 =
èg
 &&

490 (
dt
 =
TIFF_ANY
 || dà=
tif
->
tif_foundfõld
->
fõld_ty≥
))

491  
tif
->
tif_foundfõld
;

494 i‡(!
tif
->
tif_fõlds
)

495  
NULL
;

499 
key
.
fõld_èg
 = 
èg
;

500 
key
.
fõld_ty≥
 = 
dt
;

502 
ªt
 = (c⁄° 
TIFFFõld
 **Ë
	`b£¨ch
(&
pkey
, 
tif
->
tif_fõlds
,

503 
tif
->
tif_nfõlds
,

504 (
TIFFFõld
 *), 
ègCom∑ª
);

505  
tif
->
tif_foundfõld
 = (
ªt
 ? *ªà: 
NULL
);

506 
	}
}

508 c⁄° 
TIFFFõld
*

509 
	$_TIFFFödFõldByName
(
TIFF
* 
tif
, c⁄° *
fõld_«me
, 
TIFFD©aTy≥
 
dt
)

511 
TIFFFõld
 
key
 = {0, 0, 0, 
TIFF_NOTYPE
, 0, 0, 0, 0, 0, 0, 
NULL
, NULL};

512 
TIFFFõld
* 
pkey
 = &
key
;

513 c⁄° 
TIFFFõld
 **
ªt
;

514 i‡(
tif
->
tif_foundfõld


515 && 
	`°ªq
(
tif
->
tif_foundfõld
->
fõld_«me
, field_name)

516 && (
dt
 =
TIFF_ANY
 || dà=
tif
->
tif_foundfõld
->
fõld_ty≥
))

517  (
tif
->
tif_foundfõld
);

520 i‡(!
tif
->
tif_fõlds
)

521  
NULL
;

525 
key
.
fõld_«me
 = (*)field_name;

526 
key
.
fõld_ty≥
 = 
dt
;

528 
ªt
 = (c⁄° 
TIFFFõld
 **)

529 
	`td_lföd
(&
pkey
, 
tif
->
tif_fõlds
, &tif->
tif_nfõlds
,

530 (
TIFFFõld
 *), 
ègNameCom∑ª
);

532  
tif
->
tif_foundfõld
 = (
ªt
 ? *ªà: 
NULL
);

533 
	}
}

535 c⁄° 
TIFFFõld
*

536 
	$TIFFFõldWôhTag
(
TIFF
* 
tif
, 
uöt32
 
èg
)

538 c⁄° 
TIFFFõld
* 
fù
 = 
	`TIFFFödFõld
(
tif
, 
èg
, 
TIFF_ANY
);

539 i‡(!
fù
) {

540 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "TIFFFieldWithTag",

542 (Ë
èg
);

544  (
fù
);

545 
	}
}

547 c⁄° 
TIFFFõld
*

548 
	$TIFFFõldWôhName
(
TIFF
* 
tif
, c⁄° *
fõld_«me
)

550 c⁄° 
TIFFFõld
* 
fù
 =

551 
	`_TIFFFödFõldByName
(
tif
, 
fõld_«me
, 
TIFF_ANY
);

552 i‡(!
fù
) {

553 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "TIFFFieldWithName",

554 "I¡î«»îr‹, unknow¿èg %s", 
fõld_«me
);

556  (
fù
);

557 
	}
}

559 c⁄° 
TIFFFõld
*

560 
	$_TIFFFödOrRegi°îFõld
(
TIFF
 *
tif
, 
uöt32
 
èg
, 
TIFFD©aTy≥
 
dt
)

563 c⁄° 
TIFFFõld
 *
Êd
;

565 
Êd
 = 
	`TIFFFödFõld
(
tif
, 
èg
, 
dt
);

566 i‡(
Êd
 =
NULL
) {

567 
Êd
 = 
	`_TIFFCª©eAn⁄Fõld
(
tif
, 
èg
, 
dt
);

568 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
Êd
, 1))

569  
NULL
;

572  
Êd
;

573 
	}
}

575 
TIFFFõld
*

576 
	$_TIFFCª©eAn⁄Fõld
(
TIFF
 *
tif
, 
uöt32
 
èg
, 
TIFFD©aTy≥
 
fõld_ty≥
)

578 
TIFFFõld
 *
Êd
;

579 (Ë
tif
;

581 
Êd
 = (
TIFFFõld
 *Ë
	`_TIFFmÆloc
( (TIFFField));

582 i‡(
Êd
 =
NULL
)

583  
NULL
;

584 
	`_TIFFmem£t
(
Êd
, 0, (
TIFFFõld
));

586 
Êd
->
fõld_èg
 = 
èg
;

587 
Êd
->
fõld_ªadcou¡
 = 
TIFF_VARIABLE2
;

588 
Êd
->
fõld_wrôecou¡
 = 
TIFF_VARIABLE2
;

589 
Êd
->
fõld_ty≥
 = field_type;

590 
Êd
->
ª£rved
 = 0;

591 
fõld_ty≥
)

593 
TIFF_BYTE
:

594 
TIFF_UNDEFINED
:

595 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_UINT8
;

596 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_UINT8
;

598 
TIFF_ASCII
:

599 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_ASCII
;

600 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_ASCII
;

602 
TIFF_SHORT
:

603 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_UINT16
;

604 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_UINT16
;

606 
TIFF_LONG
:

607 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_UINT32
;

608 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_UINT32
;

610 
TIFF_RATIONAL
:

611 
TIFF_SRATIONAL
:

612 
TIFF_FLOAT
:

613 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_FLOAT
;

614 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_FLOAT
;

616 
TIFF_SBYTE
:

617 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_SINT8
;

618 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_SINT8
;

620 
TIFF_SSHORT
:

621 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_SINT16
;

622 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_SINT16
;

624 
TIFF_SLONG
:

625 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_SINT32
;

626 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_SINT32
;

628 
TIFF_DOUBLE
:

629 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_DOUBLE
;

630 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_DOUBLE
;

632 
TIFF_IFD
:

633 
TIFF_IFD8
:

634 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_IFD8
;

635 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_IFD8
;

637 
TIFF_LONG8
:

638 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_UINT64
;

639 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_UINT64
;

641 
TIFF_SLONG8
:

642 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_C32_SINT64
;

643 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_C32_SINT64
;

646 
Êd
->
£t_fõld_ty≥
 = 
TIFF_SETGET_UNDEFINED
;

647 
Êd
->
gë_fõld_ty≥
 = 
TIFF_SETGET_UNDEFINED
;

650 
Êd
->
fõld_bô
 = 
FIELD_CUSTOM
;

651 
Êd
->
fõld_oktoch™ge
 = 
TRUE
;

652 
Êd
->
fõld_∑sscou¡
 = 
TRUE
;

653 
Êd
->
fõld_«me
 = (*Ë
	`_TIFFmÆloc
(32);

654 i‡(
Êd
->
fõld_«me
 =
NULL
) {

655 
	`_TIFF‰ì
(
Êd
);

656  
NULL
;

658 
Êd
->
fõld_subfõlds
 = 
NULL
;

664 
	`•rötf
(
Êd
->
fõld_«me
, "Tag %d", (Ë
èg
);

666  
Êd
;

667 
	}
}

676 
TIFFSëGëFõldTy≥


677 
	$_TIFFSëGëTy≥
(
TIFFD©aTy≥
 
ty≥
, 
cou¡
, 
∑sscou¡
)

679 i‡(
ty≥
 =
TIFF_ASCII
 && 
cou¡
 =
TIFF_VARIABLE
 && 
∑sscou¡
 == 0)

680  
TIFF_SETGET_ASCII
;

682 i‡(
cou¡
 =1 && 
∑sscou¡
 == 0) {

683 
ty≥
)

685 
TIFF_BYTE
:

686 
TIFF_UNDEFINED
:

687  
TIFF_SETGET_UINT8
;

688 
TIFF_ASCII
:

689  
TIFF_SETGET_ASCII
;

690 
TIFF_SHORT
:

691  
TIFF_SETGET_UINT16
;

692 
TIFF_LONG
:

693  
TIFF_SETGET_UINT32
;

694 
TIFF_RATIONAL
:

695 
TIFF_SRATIONAL
:

696 
TIFF_FLOAT
:

697  
TIFF_SETGET_FLOAT
;

698 
TIFF_SBYTE
:

699  
TIFF_SETGET_SINT8
;

700 
TIFF_SSHORT
:

701  
TIFF_SETGET_SINT16
;

702 
TIFF_SLONG
:

703  
TIFF_SETGET_SINT32
;

704 
TIFF_DOUBLE
:

705  
TIFF_SETGET_DOUBLE
;

706 
TIFF_IFD
:

707 
TIFF_IFD8
:

708  
TIFF_SETGET_IFD8
;

709 
TIFF_LONG8
:

710  
TIFF_SETGET_UINT64
;

711 
TIFF_SLONG8
:

712  
TIFF_SETGET_SINT64
;

714  
TIFF_SETGET_UNDEFINED
;

718 i‡(
cou¡
 >1 && 
∑sscou¡
 == 0) {

719 
ty≥
)

721 
TIFF_BYTE
:

722 
TIFF_UNDEFINED
:

723  
TIFF_SETGET_C0_UINT8
;

724 
TIFF_ASCII
:

725  
TIFF_SETGET_C0_ASCII
;

726 
TIFF_SHORT
:

727  
TIFF_SETGET_C0_UINT16
;

728 
TIFF_LONG
:

729  
TIFF_SETGET_C0_UINT32
;

730 
TIFF_RATIONAL
:

731 
TIFF_SRATIONAL
:

732 
TIFF_FLOAT
:

733  
TIFF_SETGET_C0_FLOAT
;

734 
TIFF_SBYTE
:

735  
TIFF_SETGET_C0_SINT8
;

736 
TIFF_SSHORT
:

737  
TIFF_SETGET_C0_SINT16
;

738 
TIFF_SLONG
:

739  
TIFF_SETGET_C0_SINT32
;

740 
TIFF_DOUBLE
:

741  
TIFF_SETGET_C0_DOUBLE
;

742 
TIFF_IFD
:

743 
TIFF_IFD8
:

744  
TIFF_SETGET_C0_IFD8
;

745 
TIFF_LONG8
:

746  
TIFF_SETGET_C0_UINT64
;

747 
TIFF_SLONG8
:

748  
TIFF_SETGET_C0_SINT64
;

750  
TIFF_SETGET_UNDEFINED
;

754 i‡(
cou¡
 =
TIFF_VARIABLE
 && 
∑sscou¡
 == 1) {

755 
ty≥
)

757 
TIFF_BYTE
:

758 
TIFF_UNDEFINED
:

759  
TIFF_SETGET_C16_UINT8
;

760 
TIFF_ASCII
:

761  
TIFF_SETGET_C16_ASCII
;

762 
TIFF_SHORT
:

763  
TIFF_SETGET_C16_UINT16
;

764 
TIFF_LONG
:

765  
TIFF_SETGET_C16_UINT32
;

766 
TIFF_RATIONAL
:

767 
TIFF_SRATIONAL
:

768 
TIFF_FLOAT
:

769  
TIFF_SETGET_C16_FLOAT
;

770 
TIFF_SBYTE
:

771  
TIFF_SETGET_C16_SINT8
;

772 
TIFF_SSHORT
:

773  
TIFF_SETGET_C16_SINT16
;

774 
TIFF_SLONG
:

775  
TIFF_SETGET_C16_SINT32
;

776 
TIFF_DOUBLE
:

777  
TIFF_SETGET_C16_DOUBLE
;

778 
TIFF_IFD
:

779 
TIFF_IFD8
:

780  
TIFF_SETGET_C16_IFD8
;

781 
TIFF_LONG8
:

782  
TIFF_SETGET_C16_UINT64
;

783 
TIFF_SLONG8
:

784  
TIFF_SETGET_C16_SINT64
;

786  
TIFF_SETGET_UNDEFINED
;

790 i‡(
cou¡
 =
TIFF_VARIABLE2
 && 
∑sscou¡
 == 1) {

791 
ty≥
)

793 
TIFF_BYTE
:

794 
TIFF_UNDEFINED
:

795  
TIFF_SETGET_C32_UINT8
;

796 
TIFF_ASCII
:

797  
TIFF_SETGET_C32_ASCII
;

798 
TIFF_SHORT
:

799  
TIFF_SETGET_C32_UINT16
;

800 
TIFF_LONG
:

801  
TIFF_SETGET_C32_UINT32
;

802 
TIFF_RATIONAL
:

803 
TIFF_SRATIONAL
:

804 
TIFF_FLOAT
:

805  
TIFF_SETGET_C32_FLOAT
;

806 
TIFF_SBYTE
:

807  
TIFF_SETGET_C32_SINT8
;

808 
TIFF_SSHORT
:

809  
TIFF_SETGET_C32_SINT16
;

810 
TIFF_SLONG
:

811  
TIFF_SETGET_C32_SINT32
;

812 
TIFF_DOUBLE
:

813  
TIFF_SETGET_C32_DOUBLE
;

814 
TIFF_IFD
:

815 
TIFF_IFD8
:

816  
TIFF_SETGET_C32_IFD8
;

817 
TIFF_LONG8
:

818  
TIFF_SETGET_C32_UINT64
;

819 
TIFF_SLONG8
:

820  
TIFF_SETGET_C32_SINT64
;

822  
TIFF_SETGET_UNDEFINED
;

826  
TIFF_SETGET_UNDEFINED
;

827 
	}
}

830 
	$TIFFMîgeFõldInfo
(
TIFF
* 
tif
, c⁄° 
TIFFFõldInfo
 
öfo
[], 
uöt32
 
n
)

832 c⁄° 
moduÀ
[] = "TIFFMergeFieldInfo";

833 c⁄° 
ªas⁄
[] = "for fieldsárray";

834 
TIFFFõld
 *
ç
;

835 
size_t
 
nfõlds
;

836 
uöt32
 
i
;

838 i‡(
tif
->
tif_nfõldscom∑t
 > 0) {

839 
tif
->
tif_fõldscom∑t
 = (
TIFFFõldAºay
 *)

840 
	`_TIFFCheckRóŒoc
(
tif
,Åif->
tif_fõldscom∑t
,

841 
tif
->
tif_nfõldscom∑t
 + 1,

842 (
TIFFFõldAºay
), 
ªas⁄
);

844 
tif
->
tif_fõldscom∑t
 = (
TIFFFõldAºay
 *)

845 
	`_TIFFCheckMÆloc
(
tif
, 1, (
TIFFFõldAºay
),

846 
ªas⁄
);

848 i‡(!
tif
->
tif_fõldscom∑t
) {

849 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

853 
nfõlds
 = 
tif
->
tif_nfõldscom∑t
++;

855 
tif
->
tif_fõldscom∑t
[
nfõlds
].
ty≥
 = 
tfütOthî
;

856 
tif
->
tif_fõldscom∑t
[
nfõlds
].
Æloˇãd_size
 = 
n
;

857 
tif
->
tif_fõldscom∑t
[
nfõlds
].
cou¡
 = 
n
;

858 
tif
->
tif_fõldscom∑t
[
nfõlds
].
fõlds
 =

859 (
TIFFFõld
 *)
	`_TIFFCheckMÆloc
(
tif
, 
n
, (TIFFField),

860 
ªas⁄
);

861 i‡(!
tif
->
tif_fõldscom∑t
[
nfõlds
].
fõlds
) {

862 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

867 
ç
 = 
tif
->
tif_fõldscom∑t
[
nfõlds
].
fõlds
;

868 
i
 = 0; i < 
n
; i++) {

869 
ç
->
fõld_èg
 = 
öfo
[
i
].field_tag;

870 
ç
->
fõld_ªadcou¡
 = 
öfo
[
i
].field_readcount;

871 
ç
->
fõld_wrôecou¡
 = 
öfo
[
i
].field_writecount;

872 
ç
->
fõld_ty≥
 = 
öfo
[
i
].field_type;

873 
ç
->
ª£rved
 = 0;

874 
ç
->
£t_fõld_ty≥
 =

875 
	`_TIFFSëGëTy≥
(
öfo
[
i
].
fõld_ty≥
,

876 
öfo
[
i
].
fõld_ªadcou¡
,

877 
öfo
[
i
].
fõld_∑sscou¡
);

878 
ç
->
gë_fõld_ty≥
 =

879 
	`_TIFFSëGëTy≥
(
öfo
[
i
].
fõld_ty≥
,

880 
öfo
[
i
].
fõld_ªadcou¡
,

881 
öfo
[
i
].
fõld_∑sscou¡
);

882 
ç
->
fõld_bô
 = 
öfo
[
i
].field_bit;

883 
ç
->
fõld_oktoch™ge
 = 
öfo
[
i
].field_oktochange;

884 
ç
->
fõld_∑sscou¡
 = 
öfo
[
i
].field_passcount;

885 
ç
->
fõld_«me
 = 
öfo
[
i
].field_name;

886 
ç
->
fõld_subfõlds
 = 
NULL
;

887 
ç
++;

890 i‡(!
	`_TIFFMîgeFõlds
(
tif
,Åif->
tif_fõldscom∑t
[
nfõlds
].
fõlds
, 
n
)) {

891 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

897 
	}
}

	@libtiff/tif_dirread.c

42 
	~"tiffi›.h
"

44 
	#IGNORE
 0

	)

45 
	#FAILED_FII
 ((
uöt32
Ë-1)

	)

47 #ifde‡
HAVE_IEEEFP


48 
	#TIFFCvtIEEEFlﬂtToN©ive
(
tif
, 
n
, 
Â
)

	)

49 
	#TIFFCvtIEEEDoubÀToN©ive
(
tif
, 
n
, 
dp
)

	)

51 
TIFFCvtIEEEFlﬂtToN©ive
(
TIFF
*, 
uöt32
, *);

52 
TIFFCvtIEEEDoubÀToN©ive
(
TIFF
*, 
uöt32
, *);

55 
	eTIFFRódDúE¡ryEº
 {

56 
	mTIFFRódDúE¡ryEºOk
 = 0,

57 
	mTIFFRódDúE¡ryEºCou¡
 = 1,

58 
	mTIFFRódDúE¡ryEºTy≥
 = 2,

59 
	mTIFFRódDúE¡ryEºIo
 = 3,

60 
	mTIFFRódDúE¡ryEºR™ge
 = 4,

61 
	mTIFFRódDúE¡ryEºPsdif
 = 5,

62 
	mTIFFRódDúE¡ryEºSizeßn
 = 6,

63 
	mTIFFRódDúE¡ryEºAŒoc
 = 7,

66 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryByã
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt8
* 
vÆue
);

67 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡rySh‹t
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt16
* 
vÆue
);

68 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryL⁄g
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt32
* 
vÆue
);

69 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryL⁄g8
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt64
* 
vÆue
);

70 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryFlﬂt
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
);

71 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryDoubÀ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
);

72 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryIfd8
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt64
* 
vÆue
);

74 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt32
* 
cou¡
, uöt32 
de°ty≥size
, ** 
vÆue
);

75 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryByãAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt8
** 
vÆue
);

76 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡rySbyãAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt8
** 
vÆue
);

77 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡rySh‹tAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt16
** 
vÆue
);

78 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡rySsh‹tAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt16
** 
vÆue
);

79 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryL⁄gAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt32
** 
vÆue
);

80 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡rySl⁄gAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt32
** 
vÆue
);

81 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryL⁄g8Aºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt64
** 
vÆue
);

82 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡rySl⁄g8Aºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt64
** 
vÆue
);

83 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryFlﬂtAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, ** 
vÆue
);

84 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryDoubÀAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, ** 
vÆue
);

85 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryIfd8Aºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt64
** 
vÆue
);

87 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryPîßm∂eSh‹t
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt16
* 
vÆue
);

89 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryPîßm∂eDoubÀ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
);

92 
TIFFRódDúE¡ryCheckedByã
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt8
* 
vÆue
);

93 
TIFFRódDúE¡ryCheckedSbyã
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt8
* 
vÆue
);

94 
TIFFRódDúE¡ryCheckedSh‹t
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt16
* 
vÆue
);

95 
TIFFRódDúE¡ryCheckedSsh‹t
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt16
* 
vÆue
);

96 
TIFFRódDúE¡ryCheckedL⁄g
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt32
* 
vÆue
);

97 
TIFFRódDúE¡ryCheckedSl⁄g
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt32
* 
vÆue
);

98 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckedL⁄g8
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt64
* 
vÆue
);

99 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckedSl⁄g8
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt64
* 
vÆue
);

100 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckedR©i⁄Æ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
);

101 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckedSøti⁄Æ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
);

102 
TIFFRódDúE¡ryCheckedFlﬂt
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
);

103 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckedDoubÀ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
);

105 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geByãSbyã
(
öt8
 
vÆue
);

106 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geByãSh‹t
(
uöt16
 
vÆue
);

107 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geByãSsh‹t
(
öt16
 
vÆue
);

108 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geByãL⁄g
(
uöt32
 
vÆue
);

109 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geByãSl⁄g
(
öt32
 
vÆue
);

110 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geByãL⁄g8
(
uöt64
 
vÆue
);

111 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geByãSl⁄g8
(
öt64
 
vÆue
);

113 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSbyãByã
(
uöt8
 
vÆue
);

114 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSbyãSh‹t
(
uöt16
 
vÆue
);

115 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSbyãSsh‹t
(
öt16
 
vÆue
);

116 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSbyãL⁄g
(
uöt32
 
vÆue
);

117 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSbyãSl⁄g
(
öt32
 
vÆue
);

118 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSbyãL⁄g8
(
uöt64
 
vÆue
);

119 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSbyãSl⁄g8
(
öt64
 
vÆue
);

121 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSh‹tSbyã
(
öt8
 
vÆue
);

122 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSh‹tSsh‹t
(
öt16
 
vÆue
);

123 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSh‹tL⁄g
(
uöt32
 
vÆue
);

124 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSh‹tSl⁄g
(
öt32
 
vÆue
);

125 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSh‹tL⁄g8
(
uöt64
 
vÆue
);

126 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSh‹tSl⁄g8
(
öt64
 
vÆue
);

128 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSsh‹tSh‹t
(
uöt16
 
vÆue
);

129 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSsh‹tL⁄g
(
uöt32
 
vÆue
);

130 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSsh‹tSl⁄g
(
öt32
 
vÆue
);

131 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSsh‹tL⁄g8
(
uöt64
 
vÆue
);

132 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSsh‹tSl⁄g8
(
öt64
 
vÆue
);

134 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geL⁄gSbyã
(
öt8
 
vÆue
);

135 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geL⁄gSsh‹t
(
öt16
 
vÆue
);

136 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geL⁄gSl⁄g
(
öt32
 
vÆue
);

137 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geL⁄gL⁄g8
(
uöt64
 
vÆue
);

138 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geL⁄gSl⁄g8
(
öt64
 
vÆue
);

140 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSl⁄gL⁄g
(
uöt32
 
vÆue
);

141 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSl⁄gL⁄g8
(
uöt64
 
vÆue
);

142 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSl⁄gSl⁄g8
(
öt64
 
vÆue
);

144 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geL⁄g8Sbyã
(
öt8
 
vÆue
);

145 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geL⁄g8Ssh‹t
(
öt16
 
vÆue
);

146 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geL⁄g8Sl⁄g
(
öt32
 
vÆue
);

147 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geL⁄g8Sl⁄g8
(
öt64
 
vÆue
);

149 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryCheckR™geSl⁄g8L⁄g8
(
uöt64
 
vÆue
);

151 
TIFFRódDúE¡ryEº
 
TIFFRódDúE¡ryD©a
(
TIFF
* 
tif
, 
uöt64
 
off£t
, 
tmsize_t
 
size
, * 
de°
);

152 
TIFFRódDúE¡ryOuçutEº
(
TIFF
* 
tif
, 
TIFFRódDúE¡ryEº
 
îr
, c⁄° * 
moduÀ
, c⁄° * 
èg«me
, 
ªcovî
);

154 
TIFFRódDúe˘‹yCheckOrdî
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
dúcou¡
);

155 
TIFFDúE¡ry
* 
TIFFRódDúe˘‹yFödE¡ry
(
TIFF
* 
tif
, TIFFDúE¡ry* 
dú
, 
uöt16
 
dúcou¡
, uöt16 
ègid
);

156 
TIFFRódDúe˘‹yFödFõldInfo
(
TIFF
* 
tif
, 
uöt16
 
ègid
, 
uöt32
* 
fii
);

158 
E°im©eSåùByãCou¡s
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
dúcou¡
);

159 
MissögRequúed
(
TIFF
*, const *);

160 
TIFFCheckDúOff£t
(
TIFF
* 
tif
, 
uöt64
 
dúoff
);

161 
CheckDúCou¡
(
TIFF
*, 
TIFFDúE¡ry
*, 
uöt32
);

162 
uöt16
 
TIFFFëchDúe˘‹y
(
TIFF
* 
tif
, 
uöt64
 
dúoff
, 
TIFFDúE¡ry
** 
pdú
, uöt64* 
√xtdúoff
);

163 
TIFFFëchN‹mÆTag
(
TIFF
*, 
TIFFDúE¡ry
*, 
ªcovî
);

164 
TIFFFëchSåùThög
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
n°rùs
, 
uöt64
** 
Õp
);

165 
TIFFFëchSubje˘Di°™˚
(
TIFF
*, 
TIFFDúE¡ry
*);

166 
Ch›UpSögÀUncom¥es£dSåù
(
TIFF
*);

167 
uöt64
 
TIFFRódUI¡64
(c⁄° 
uöt8
 *
vÆue
);

169 
	u_UI¡64Alig√d_t


171 
	md
;

172 
uöt64
 
	ml
;

173 
uöt32
 
	mi
[2];

174 
uöt16
 
	ms
[4];

175 
uöt8
 
	mc
[8];

176 } 
	tUI¡64Alig√d_t
;

181 
uöt64
 
	$TIFFRódUI¡64
(c⁄° 
uöt8
 *
vÆue
)

183 
UI¡64Alig√d_t
 
ªsu…
;

185 
ªsu…
.
c
[0]=
vÆue
[0];

186 
ªsu…
.
c
[1]=
vÆue
[1];

187 
ªsu…
.
c
[2]=
vÆue
[2];

188 
ªsu…
.
c
[3]=
vÆue
[3];

189 
ªsu…
.
c
[4]=
vÆue
[4];

190 
ªsu…
.
c
[5]=
vÆue
[5];

191 
ªsu…
.
c
[6]=
vÆue
[6];

192 
ªsu…
.
c
[7]=
vÆue
[7];

194  
ªsu…
.
l
;

195 
	}
}

197 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryByã
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt8
* 
vÆue
)

199 
TIFFRódDúE¡ryEº
 
îr
;

200 i‡(
dúíåy
->
tdú_cou¡
!=1)

201 (
TIFFRódDúE¡ryEºCou¡
);

202 
dúíåy
->
tdú_ty≥
)

204 
TIFF_BYTE
:

205 
	`TIFFRódDúE¡ryCheckedByã
(
tif
,
dúíåy
,
vÆue
);

206 (
TIFFRódDúE¡ryEºOk
);

207 
TIFF_SBYTE
:

209 
öt8
 
m
;

210 
	`TIFFRódDúE¡ryCheckedSbyã
(
tif
,
dúíåy
,&
m
);

211 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãSbyã
(
m
);

212 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

213 (
îr
);

214 *
vÆue
=(
uöt8
)
m
;

215 (
TIFFRódDúE¡ryEºOk
);

217 
TIFF_SHORT
:

219 
uöt16
 
m
;

220 
	`TIFFRódDúE¡ryCheckedSh‹t
(
tif
,
dúíåy
,&
m
);

221 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãSh‹t
(
m
);

222 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

223 (
îr
);

224 *
vÆue
=(
uöt8
)
m
;

225 (
TIFFRódDúE¡ryEºOk
);

227 
TIFF_SSHORT
:

229 
öt16
 
m
;

230 
	`TIFFRódDúE¡ryCheckedSsh‹t
(
tif
,
dúíåy
,&
m
);

231 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãSsh‹t
(
m
);

232 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

233 (
îr
);

234 *
vÆue
=(
uöt8
)
m
;

235 (
TIFFRódDúE¡ryEºOk
);

237 
TIFF_LONG
:

239 
uöt32
 
m
;

240 
	`TIFFRódDúE¡ryCheckedL⁄g
(
tif
,
dúíåy
,&
m
);

241 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãL⁄g
(
m
);

242 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

243 (
îr
);

244 *
vÆue
=(
uöt8
)
m
;

245 (
TIFFRódDúE¡ryEºOk
);

247 
TIFF_SLONG
:

249 
öt32
 
m
;

250 
	`TIFFRódDúE¡ryCheckedSl⁄g
(
tif
,
dúíåy
,&
m
);

251 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãSl⁄g
(
m
);

252 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

253 (
îr
);

254 *
vÆue
=(
uöt8
)
m
;

255 (
TIFFRódDúE¡ryEºOk
);

257 
TIFF_LONG8
:

259 
uöt64
 
m
;

260 
îr
=
	`TIFFRódDúE¡ryCheckedL⁄g8
(
tif
,
dúíåy
,&
m
);

261 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

262 (
îr
);

263 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãL⁄g8
(
m
);

264 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

265 (
îr
);

266 *
vÆue
=(
uöt8
)
m
;

267 (
TIFFRódDúE¡ryEºOk
);

269 
TIFF_SLONG8
:

271 
öt64
 
m
;

272 
îr
=
	`TIFFRódDúE¡ryCheckedSl⁄g8
(
tif
,
dúíåy
,&
m
);

273 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

274 (
îr
);

275 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãSl⁄g8
(
m
);

276 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

277 (
îr
);

278 *
vÆue
=(
uöt8
)
m
;

279 (
TIFFRódDúE¡ryEºOk
);

282 (
TIFFRódDúE¡ryEºTy≥
);

284 
	}
}

286 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡rySh‹t
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt16
* 
vÆue
)

288 
TIFFRódDúE¡ryEº
 
îr
;

289 i‡(
dúíåy
->
tdú_cou¡
!=1)

290 (
TIFFRódDúE¡ryEºCou¡
);

291 
dúíåy
->
tdú_ty≥
)

293 
TIFF_BYTE
:

295 
uöt8
 
m
;

296 
	`TIFFRódDúE¡ryCheckedByã
(
tif
,
dúíåy
,&
m
);

297 *
vÆue
=(
uöt16
)
m
;

298 (
TIFFRódDúE¡ryEºOk
);

300 
TIFF_SBYTE
:

302 
öt8
 
m
;

303 
	`TIFFRódDúE¡ryCheckedSbyã
(
tif
,
dúíåy
,&
m
);

304 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tSbyã
(
m
);

305 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

306 (
îr
);

307 *
vÆue
=(
uöt16
)
m
;

308 (
TIFFRódDúE¡ryEºOk
);

310 
TIFF_SHORT
:

311 
	`TIFFRódDúE¡ryCheckedSh‹t
(
tif
,
dúíåy
,
vÆue
);

312 (
TIFFRódDúE¡ryEºOk
);

313 
TIFF_SSHORT
:

315 
öt16
 
m
;

316 
	`TIFFRódDúE¡ryCheckedSsh‹t
(
tif
,
dúíåy
,&
m
);

317 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tSsh‹t
(
m
);

318 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

319 (
îr
);

320 *
vÆue
=(
uöt16
)
m
;

321 (
TIFFRódDúE¡ryEºOk
);

323 
TIFF_LONG
:

325 
uöt32
 
m
;

326 
	`TIFFRódDúE¡ryCheckedL⁄g
(
tif
,
dúíåy
,&
m
);

327 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tL⁄g
(
m
);

328 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

329 (
îr
);

330 *
vÆue
=(
uöt16
)
m
;

331 (
TIFFRódDúE¡ryEºOk
);

333 
TIFF_SLONG
:

335 
öt32
 
m
;

336 
	`TIFFRódDúE¡ryCheckedSl⁄g
(
tif
,
dúíåy
,&
m
);

337 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tSl⁄g
(
m
);

338 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

339 (
îr
);

340 *
vÆue
=(
uöt16
)
m
;

341 (
TIFFRódDúE¡ryEºOk
);

343 
TIFF_LONG8
:

345 
uöt64
 
m
;

346 
îr
=
	`TIFFRódDúE¡ryCheckedL⁄g8
(
tif
,
dúíåy
,&
m
);

347 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

348 (
îr
);

349 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tL⁄g8
(
m
);

350 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

351 (
îr
);

352 *
vÆue
=(
uöt16
)
m
;

353 (
TIFFRódDúE¡ryEºOk
);

355 
TIFF_SLONG8
:

357 
öt64
 
m
;

358 
îr
=
	`TIFFRódDúE¡ryCheckedSl⁄g8
(
tif
,
dúíåy
,&
m
);

359 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

360 (
îr
);

361 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tSl⁄g8
(
m
);

362 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

363 (
îr
);

364 *
vÆue
=(
uöt16
)
m
;

365 (
TIFFRódDúE¡ryEºOk
);

368 (
TIFFRódDúE¡ryEºTy≥
);

370 
	}
}

372 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryL⁄g
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt32
* 
vÆue
)

374 
TIFFRódDúE¡ryEº
 
îr
;

375 i‡(
dúíåy
->
tdú_cou¡
!=1)

376 (
TIFFRódDúE¡ryEºCou¡
);

377 
dúíåy
->
tdú_ty≥
)

379 
TIFF_BYTE
:

381 
uöt8
 
m
;

382 
	`TIFFRódDúE¡ryCheckedByã
(
tif
,
dúíåy
,&
m
);

383 *
vÆue
=(
uöt32
)
m
;

384 (
TIFFRódDúE¡ryEºOk
);

386 
TIFF_SBYTE
:

388 
öt8
 
m
;

389 
	`TIFFRódDúE¡ryCheckedSbyã
(
tif
,
dúíåy
,&
m
);

390 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄gSbyã
(
m
);

391 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

392 (
îr
);

393 *
vÆue
=(
uöt32
)
m
;

394 (
TIFFRódDúE¡ryEºOk
);

396 
TIFF_SHORT
:

398 
uöt16
 
m
;

399 
	`TIFFRódDúE¡ryCheckedSh‹t
(
tif
,
dúíåy
,&
m
);

400 *
vÆue
=(
uöt32
)
m
;

401 (
TIFFRódDúE¡ryEºOk
);

403 
TIFF_SSHORT
:

405 
öt16
 
m
;

406 
	`TIFFRódDúE¡ryCheckedSsh‹t
(
tif
,
dúíåy
,&
m
);

407 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄gSsh‹t
(
m
);

408 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

409 (
îr
);

410 *
vÆue
=(
uöt32
)
m
;

411 (
TIFFRódDúE¡ryEºOk
);

413 
TIFF_LONG
:

414 
	`TIFFRódDúE¡ryCheckedL⁄g
(
tif
,
dúíåy
,
vÆue
);

415 (
TIFFRódDúE¡ryEºOk
);

416 
TIFF_SLONG
:

418 
öt32
 
m
;

419 
	`TIFFRódDúE¡ryCheckedSl⁄g
(
tif
,
dúíåy
,&
m
);

420 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄gSl⁄g
(
m
);

421 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

422 (
îr
);

423 *
vÆue
=(
uöt32
)
m
;

424 (
TIFFRódDúE¡ryEºOk
);

426 
TIFF_LONG8
:

428 
uöt64
 
m
;

429 
îr
=
	`TIFFRódDúE¡ryCheckedL⁄g8
(
tif
,
dúíåy
,&
m
);

430 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

431 (
îr
);

432 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄gL⁄g8
(
m
);

433 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

434 (
îr
);

435 *
vÆue
=(
uöt32
)
m
;

436 (
TIFFRódDúE¡ryEºOk
);

438 
TIFF_SLONG8
:

440 
öt64
 
m
;

441 
îr
=
	`TIFFRódDúE¡ryCheckedSl⁄g8
(
tif
,
dúíåy
,&
m
);

442 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

443 (
îr
);

444 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄gSl⁄g8
(
m
);

445 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

446 (
îr
);

447 *
vÆue
=(
uöt32
)
m
;

448 (
TIFFRódDúE¡ryEºOk
);

451 (
TIFFRódDúE¡ryEºTy≥
);

453 
	}
}

455 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryL⁄g8
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt64
* 
vÆue
)

457 
TIFFRódDúE¡ryEº
 
îr
;

458 i‡(
dúíåy
->
tdú_cou¡
!=1)

459 (
TIFFRódDúE¡ryEºCou¡
);

460 
dúíåy
->
tdú_ty≥
)

462 
TIFF_BYTE
:

464 
uöt8
 
m
;

465 
	`TIFFRódDúE¡ryCheckedByã
(
tif
,
dúíåy
,&
m
);

466 *
vÆue
=(
uöt64
)
m
;

467 (
TIFFRódDúE¡ryEºOk
);

469 
TIFF_SBYTE
:

471 
öt8
 
m
;

472 
	`TIFFRódDúE¡ryCheckedSbyã
(
tif
,
dúíåy
,&
m
);

473 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄g8Sbyã
(
m
);

474 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

475 (
îr
);

476 *
vÆue
=(
uöt64
)
m
;

477 (
TIFFRódDúE¡ryEºOk
);

479 
TIFF_SHORT
:

481 
uöt16
 
m
;

482 
	`TIFFRódDúE¡ryCheckedSh‹t
(
tif
,
dúíåy
,&
m
);

483 *
vÆue
=(
uöt64
)
m
;

484 (
TIFFRódDúE¡ryEºOk
);

486 
TIFF_SSHORT
:

488 
öt16
 
m
;

489 
	`TIFFRódDúE¡ryCheckedSsh‹t
(
tif
,
dúíåy
,&
m
);

490 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄g8Ssh‹t
(
m
);

491 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

492 (
îr
);

493 *
vÆue
=(
uöt64
)
m
;

494 (
TIFFRódDúE¡ryEºOk
);

496 
TIFF_LONG
:

498 
uöt32
 
m
;

499 
	`TIFFRódDúE¡ryCheckedL⁄g
(
tif
,
dúíåy
,&
m
);

500 *
vÆue
=(
uöt64
)
m
;

501 (
TIFFRódDúE¡ryEºOk
);

503 
TIFF_SLONG
:

505 
öt32
 
m
;

506 
	`TIFFRódDúE¡ryCheckedSl⁄g
(
tif
,
dúíåy
,&
m
);

507 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄g8Sl⁄g
(
m
);

508 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

509 (
îr
);

510 *
vÆue
=(
uöt64
)
m
;

511 (
TIFFRódDúE¡ryEºOk
);

513 
TIFF_LONG8
:

514 
îr
=
	`TIFFRódDúE¡ryCheckedL⁄g8
(
tif
,
dúíåy
,
vÆue
);

515 (
îr
);

516 
TIFF_SLONG8
:

518 
öt64
 
m
;

519 
îr
=
	`TIFFRódDúE¡ryCheckedSl⁄g8
(
tif
,
dúíåy
,&
m
);

520 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

521 (
îr
);

522 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄g8Sl⁄g8
(
m
);

523 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

524 (
îr
);

525 *
vÆue
=(
uöt64
)
m
;

526 (
TIFFRódDúE¡ryEºOk
);

529 (
TIFFRódDúE¡ryEºTy≥
);

531 
	}
}

533 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryFlﬂt
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
)

535 
TIFFRódDúE¡ryEº
 
îr
;

536 i‡(
dúíåy
->
tdú_cou¡
!=1)

537 (
TIFFRódDúE¡ryEºCou¡
);

538 
dúíåy
->
tdú_ty≥
)

540 
TIFF_BYTE
:

542 
uöt8
 
m
;

543 
	`TIFFRódDúE¡ryCheckedByã
(
tif
,
dúíåy
,&
m
);

544 *
vÆue
=()
m
;

545 (
TIFFRódDúE¡ryEºOk
);

547 
TIFF_SBYTE
:

549 
öt8
 
m
;

550 
	`TIFFRódDúE¡ryCheckedSbyã
(
tif
,
dúíåy
,&
m
);

551 *
vÆue
=()
m
;

552 (
TIFFRódDúE¡ryEºOk
);

554 
TIFF_SHORT
:

556 
uöt16
 
m
;

557 
	`TIFFRódDúE¡ryCheckedSh‹t
(
tif
,
dúíåy
,&
m
);

558 *
vÆue
=()
m
;

559 (
TIFFRódDúE¡ryEºOk
);

561 
TIFF_SSHORT
:

563 
öt16
 
m
;

564 
	`TIFFRódDúE¡ryCheckedSsh‹t
(
tif
,
dúíåy
,&
m
);

565 *
vÆue
=()
m
;

566 (
TIFFRódDúE¡ryEºOk
);

568 
TIFF_LONG
:

570 
uöt32
 
m
;

571 
	`TIFFRódDúE¡ryCheckedL⁄g
(
tif
,
dúíåy
,&
m
);

572 *
vÆue
=()
m
;

573 (
TIFFRódDúE¡ryEºOk
);

575 
TIFF_SLONG
:

577 
öt32
 
m
;

578 
	`TIFFRódDúE¡ryCheckedSl⁄g
(
tif
,
dúíåy
,&
m
);

579 *
vÆue
=()
m
;

580 (
TIFFRódDúE¡ryEºOk
);

582 
TIFF_LONG8
:

584 
uöt64
 
m
;

585 
îr
=
	`TIFFRódDúE¡ryCheckedL⁄g8
(
tif
,
dúíåy
,&
m
);

586 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

587 (
îr
);

588 #i‡
	`deföed
(
__WIN32__
Ë&& (
_MSC_VER
 < 1500)

594 *
vÆue
 = 
	`_TIFFUI¡64ToFlﬂt
(
m
);

596 *
vÆue
=()
m
;

598 (
TIFFRódDúE¡ryEºOk
);

600 
TIFF_SLONG8
:

602 
öt64
 
m
;

603 
îr
=
	`TIFFRódDúE¡ryCheckedSl⁄g8
(
tif
,
dúíåy
,&
m
);

604 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

605 (
îr
);

606 *
vÆue
=()
m
;

607 (
TIFFRódDúE¡ryEºOk
);

609 
TIFF_RATIONAL
:

611 
m
;

612 
îr
=
	`TIFFRódDúE¡ryCheckedR©i⁄Æ
(
tif
,
dúíåy
,&
m
);

613 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

614 (
îr
);

615 *
vÆue
=()
m
;

616 (
TIFFRódDúE¡ryEºOk
);

618 
TIFF_SRATIONAL
:

620 
m
;

621 
îr
=
	`TIFFRódDúE¡ryCheckedSøti⁄Æ
(
tif
,
dúíåy
,&
m
);

622 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

623 (
îr
);

624 *
vÆue
=()
m
;

625 (
TIFFRódDúE¡ryEºOk
);

627 
TIFF_FLOAT
:

628 
	`TIFFRódDúE¡ryCheckedFlﬂt
(
tif
,
dúíåy
,
vÆue
);

629 (
TIFFRódDúE¡ryEºOk
);

630 
TIFF_DOUBLE
:

632 
m
;

633 
îr
=
	`TIFFRódDúE¡ryCheckedDoubÀ
(
tif
,
dúíåy
,&
m
);

634 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

635 (
îr
);

636 *
vÆue
=()
m
;

637 (
TIFFRódDúE¡ryEºOk
);

640 (
TIFFRódDúE¡ryEºTy≥
);

642 
	}
}

644 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryDoubÀ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
)

646 
TIFFRódDúE¡ryEº
 
îr
;

647 i‡(
dúíåy
->
tdú_cou¡
!=1)

648 (
TIFFRódDúE¡ryEºCou¡
);

649 
dúíåy
->
tdú_ty≥
)

651 
TIFF_BYTE
:

653 
uöt8
 
m
;

654 
	`TIFFRódDúE¡ryCheckedByã
(
tif
,
dúíåy
,&
m
);

655 *
vÆue
=()
m
;

656 (
TIFFRódDúE¡ryEºOk
);

658 
TIFF_SBYTE
:

660 
öt8
 
m
;

661 
	`TIFFRódDúE¡ryCheckedSbyã
(
tif
,
dúíåy
,&
m
);

662 *
vÆue
=()
m
;

663 (
TIFFRódDúE¡ryEºOk
);

665 
TIFF_SHORT
:

667 
uöt16
 
m
;

668 
	`TIFFRódDúE¡ryCheckedSh‹t
(
tif
,
dúíåy
,&
m
);

669 *
vÆue
=()
m
;

670 (
TIFFRódDúE¡ryEºOk
);

672 
TIFF_SSHORT
:

674 
öt16
 
m
;

675 
	`TIFFRódDúE¡ryCheckedSsh‹t
(
tif
,
dúíåy
,&
m
);

676 *
vÆue
=()
m
;

677 (
TIFFRódDúE¡ryEºOk
);

679 
TIFF_LONG
:

681 
uöt32
 
m
;

682 
	`TIFFRódDúE¡ryCheckedL⁄g
(
tif
,
dúíåy
,&
m
);

683 *
vÆue
=()
m
;

684 (
TIFFRódDúE¡ryEºOk
);

686 
TIFF_SLONG
:

688 
öt32
 
m
;

689 
	`TIFFRódDúE¡ryCheckedSl⁄g
(
tif
,
dúíåy
,&
m
);

690 *
vÆue
=()
m
;

691 (
TIFFRódDúE¡ryEºOk
);

693 
TIFF_LONG8
:

695 
uöt64
 
m
;

696 
îr
=
	`TIFFRódDúE¡ryCheckedL⁄g8
(
tif
,
dúíåy
,&
m
);

697 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

698 (
îr
);

699 #i‡
	`deföed
(
__WIN32__
Ë&& (
_MSC_VER
 < 1500)

705 *
vÆue
 = 
	`_TIFFUI¡64ToDoubÀ
(
m
);

707 *
vÆue
 = ()
m
;

709 (
TIFFRódDúE¡ryEºOk
);

711 
TIFF_SLONG8
:

713 
öt64
 
m
;

714 
îr
=
	`TIFFRódDúE¡ryCheckedSl⁄g8
(
tif
,
dúíåy
,&
m
);

715 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

716 (
îr
);

717 *
vÆue
=()
m
;

718 (
TIFFRódDúE¡ryEºOk
);

720 
TIFF_RATIONAL
:

721 
îr
=
	`TIFFRódDúE¡ryCheckedR©i⁄Æ
(
tif
,
dúíåy
,
vÆue
);

722 (
îr
);

723 
TIFF_SRATIONAL
:

724 
îr
=
	`TIFFRódDúE¡ryCheckedSøti⁄Æ
(
tif
,
dúíåy
,
vÆue
);

725 (
îr
);

726 
TIFF_FLOAT
:

728 
m
;

729 
	`TIFFRódDúE¡ryCheckedFlﬂt
(
tif
,
dúíåy
,&
m
);

730 *
vÆue
=()
m
;

731 (
TIFFRódDúE¡ryEºOk
);

733 
TIFF_DOUBLE
:

734 
îr
=
	`TIFFRódDúE¡ryCheckedDoubÀ
(
tif
,
dúíåy
,
vÆue
);

735 (
îr
);

737 (
TIFFRódDúE¡ryEºTy≥
);

739 
	}
}

741 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryIfd8
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt64
* 
vÆue
)

743 
TIFFRódDúE¡ryEº
 
îr
;

744 i‡(
dúíåy
->
tdú_cou¡
!=1)

745 (
TIFFRódDúE¡ryEºCou¡
);

746 
dúíåy
->
tdú_ty≥
)

748 
TIFF_LONG
:

749 
TIFF_IFD
:

751 
uöt32
 
m
;

752 
	`TIFFRódDúE¡ryCheckedL⁄g
(
tif
,
dúíåy
,&
m
);

753 *
vÆue
=(
uöt64
)
m
;

754 (
TIFFRódDúE¡ryEºOk
);

756 
TIFF_LONG8
:

757 
TIFF_IFD8
:

758 
îr
=
	`TIFFRódDúE¡ryCheckedL⁄g8
(
tif
,
dúíåy
,
vÆue
);

759 (
îr
);

761 (
TIFFRódDúE¡ryEºTy≥
);

763 
	}
}

765 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt32
* 
cou¡
, uöt32 
de°ty≥size
, ** 
vÆue
)

767 
ty≥size
;

768 
uöt32
 
d©asize
;

769 * 
d©a
;

770 
ty≥size
=
	`TIFFD©aWidth
(
dúíåy
->
tdú_ty≥
);

771 i‡((
dúíåy
->
tdú_cou¡
==0)||(
ty≥size
==0))

773 *
vÆue
=0;

774 (
TIFFRódDúE¡ryEºOk
);

776 (Ë
de°ty≥size
;

783 i‡((
uöt64
)(2147483647/
ty≥size
)<
dúíåy
->
tdú_cou¡
)

784 (
TIFFRódDúE¡ryEºSizeßn
);

785 i‡((
uöt64
)(2147483647/
de°ty≥size
)<
dúíåy
->
tdú_cou¡
)

786 (
TIFFRódDúE¡ryEºSizeßn
);

788 *
cou¡
=(
uöt32
)
dúíåy
->
tdú_cou¡
;

789 
d©asize
=(*
cou¡
)*
ty≥size
;

790 
	`as£π
((
tmsize_t
)
d©asize
>0);

791 
d©a
=
	`_TIFFCheckMÆloc
(
tif
, *
cou¡
, 
ty≥size
, "ReadDirEntryArray");

792 i‡(
d©a
==0)

793 (
TIFFRódDúE¡ryEºAŒoc
);

794 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

796 i‡(
d©asize
<=4)

797 
	`_TIFFmem˝y
(
d©a
,&
dúíåy
->
tdú_off£t
,
d©asize
);

800 
TIFFRódDúE¡ryEº
 
îr
;

801 
uöt32
 
off£t
 = 
dúíåy
->
tdú_off£t
.
toff_l⁄g
;

802 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

803 
	`TIFFSwabL⁄g
(&
off£t
);

804 
îr
=
	`TIFFRódDúE¡ryD©a
(
tif
,(
uöt64
)
off£t
,(
tmsize_t
)
d©asize
,
d©a
);

805 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

807 
	`_TIFF‰ì
(
d©a
);

808 (
îr
);

814 i‡(
d©asize
<=8)

815 
	`_TIFFmem˝y
(
d©a
,&
dúíåy
->
tdú_off£t
,
d©asize
);

818 
TIFFRódDúE¡ryEº
 
îr
;

819 
uöt64
 
off£t
 = 
dúíåy
->
tdú_off£t
.
toff_l⁄g8
;

820 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

821 
	`TIFFSwabL⁄g8
(&
off£t
);

822 
îr
=
	`TIFFRódDúE¡ryD©a
(
tif
,
off£t
,(
tmsize_t
)
d©asize
,
d©a
);

823 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

825 
	`_TIFF‰ì
(
d©a
);

826 (
îr
);

830 *
vÆue
=
d©a
;

831 (
TIFFRódDúE¡ryEºOk
);

832 
	}
}

834 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryByãAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt8
** 
vÆue
)

836 
TIFFRódDúE¡ryEº
 
îr
;

837 
uöt32
 
cou¡
;

838 * 
‹igd©a
;

839 
uöt8
* 
d©a
;

840 
dúíåy
->
tdú_ty≥
)

842 
TIFF_ASCII
:

843 
TIFF_UNDEFINED
:

844 
TIFF_BYTE
:

845 
TIFF_SBYTE
:

846 
TIFF_SHORT
:

847 
TIFF_SSHORT
:

848 
TIFF_LONG
:

849 
TIFF_SLONG
:

850 
TIFF_LONG8
:

851 
TIFF_SLONG8
:

854 (
TIFFRódDúE¡ryEºTy≥
);

856 
îr
=
	`TIFFRódDúE¡ryAºay
(
tif
,
dúíåy
,&
cou¡
,1,&
‹igd©a
);

857 i‡((
îr
!=
TIFFRódDúE¡ryEºOk
)||(
‹igd©a
==0))

859 *
vÆue
=0;

860 (
îr
);

862 
dúíåy
->
tdú_ty≥
)

864 
TIFF_ASCII
:

865 
TIFF_UNDEFINED
:

866 
TIFF_BYTE
:

867 *
vÆue
=(
uöt8
*)
‹igd©a
;

868 (
TIFFRódDúE¡ryEºOk
);

869 
TIFF_SBYTE
:

871 
öt8
* 
m
;

872 
uöt32
 
n
;

873 
m
=(
öt8
*)
‹igd©a
;

874 
n
=0;Ç<
cou¡
;Ç++)

876 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãSbyã
(*
m
);

877 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

879 
	`_TIFF‰ì
(
‹igd©a
);

880 (
îr
);

882 
m
++;

884 *
vÆue
=(
uöt8
*)
‹igd©a
;

885 (
TIFFRódDúE¡ryEºOk
);

888 
d©a
=(
uöt8
*)
	`_TIFFmÆloc
(
cou¡
);

889 i‡(
d©a
==0)

891 
	`_TIFF‰ì
(
‹igd©a
);

892 (
TIFFRódDúE¡ryEºAŒoc
);

894 
dúíåy
->
tdú_ty≥
)

896 
TIFF_SHORT
:

898 
uöt16
* 
ma
;

899 
uöt8
* 
mb
;

900 
uöt32
 
n
;

901 
ma
=(
uöt16
*)
‹igd©a
;

902 
mb
=
d©a
;

903 
n
=0;Ç<
cou¡
;Ç++)

905 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

906 
	`TIFFSwabSh‹t
(
ma
);

907 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãSh‹t
(*
ma
);

908 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

910 *
mb
++=(
uöt8
)(*
ma
++);

914 
TIFF_SSHORT
:

916 
öt16
* 
ma
;

917 
uöt8
* 
mb
;

918 
uöt32
 
n
;

919 
ma
=(
öt16
*)
‹igd©a
;

920 
mb
=
d©a
;

921 
n
=0;Ç<
cou¡
;Ç++)

923 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

924 
	`TIFFSwabSh‹t
((
uöt16
*)
ma
);

925 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãSsh‹t
(*
ma
);

926 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

928 *
mb
++=(
uöt8
)(*
ma
++);

932 
TIFF_LONG
:

934 
uöt32
* 
ma
;

935 
uöt8
* 
mb
;

936 
uöt32
 
n
;

937 
ma
=(
uöt32
*)
‹igd©a
;

938 
mb
=
d©a
;

939 
n
=0;Ç<
cou¡
;Ç++)

941 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

942 
	`TIFFSwabL⁄g
(
ma
);

943 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãL⁄g
(*
ma
);

944 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

946 *
mb
++=(
uöt8
)(*
ma
++);

950 
TIFF_SLONG
:

952 
öt32
* 
ma
;

953 
uöt8
* 
mb
;

954 
uöt32
 
n
;

955 
ma
=(
öt32
*)
‹igd©a
;

956 
mb
=
d©a
;

957 
n
=0;Ç<
cou¡
;Ç++)

959 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

960 
	`TIFFSwabL⁄g
((
uöt32
*)
ma
);

961 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãSl⁄g
(*
ma
);

962 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

964 *
mb
++=(
uöt8
)(*
ma
++);

968 
TIFF_LONG8
:

970 
uöt64
* 
ma
;

971 
uöt8
* 
mb
;

972 
uöt32
 
n
;

973 
ma
=(
uöt64
*)
‹igd©a
;

974 
mb
=
d©a
;

975 
n
=0;Ç<
cou¡
;Ç++)

977 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

978 
	`TIFFSwabL⁄g8
(
ma
);

979 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãL⁄g8
(*
ma
);

980 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

982 *
mb
++=(
uöt8
)(*
ma
++);

986 
TIFF_SLONG8
:

988 
öt64
* 
ma
;

989 
uöt8
* 
mb
;

990 
uöt32
 
n
;

991 
ma
=(
öt64
*)
‹igd©a
;

992 
mb
=
d©a
;

993 
n
=0;Ç<
cou¡
;Ç++)

995 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

996 
	`TIFFSwabL⁄g8
((
uöt64
*)
ma
);

997 
îr
=
	`TIFFRódDúE¡ryCheckR™geByãSl⁄g8
(*
ma
);

998 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1000 *
mb
++=(
uöt8
)(*
ma
++);

1005 
	`_TIFF‰ì
(
‹igd©a
);

1006 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1008 
	`_TIFF‰ì
(
d©a
);

1009 (
îr
);

1011 *
vÆue
=
d©a
;

1012 (
TIFFRódDúE¡ryEºOk
);

1013 
	}
}

1015 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡rySbyãAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt8
** 
vÆue
)

1017 
TIFFRódDúE¡ryEº
 
îr
;

1018 
uöt32
 
cou¡
;

1019 * 
‹igd©a
;

1020 
öt8
* 
d©a
;

1021 
dúíåy
->
tdú_ty≥
)

1023 
TIFF_UNDEFINED
:

1024 
TIFF_BYTE
:

1025 
TIFF_SBYTE
:

1026 
TIFF_SHORT
:

1027 
TIFF_SSHORT
:

1028 
TIFF_LONG
:

1029 
TIFF_SLONG
:

1030 
TIFF_LONG8
:

1031 
TIFF_SLONG8
:

1034 (
TIFFRódDúE¡ryEºTy≥
);

1036 
îr
=
	`TIFFRódDúE¡ryAºay
(
tif
,
dúíåy
,&
cou¡
,1,&
‹igd©a
);

1037 i‡((
îr
!=
TIFFRódDúE¡ryEºOk
)||(
‹igd©a
==0))

1039 *
vÆue
=0;

1040 (
îr
);

1042 
dúíåy
->
tdú_ty≥
)

1044 
TIFF_UNDEFINED
:

1045 
TIFF_BYTE
:

1047 
uöt8
* 
m
;

1048 
uöt32
 
n
;

1049 
m
=(
uöt8
*)
‹igd©a
;

1050 
n
=0;Ç<
cou¡
;Ç++)

1052 
îr
=
	`TIFFRódDúE¡ryCheckR™geSbyãByã
(*
m
);

1053 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1055 
	`_TIFF‰ì
(
‹igd©a
);

1056 (
îr
);

1058 
m
++;

1060 *
vÆue
=(
öt8
*)
‹igd©a
;

1061 (
TIFFRódDúE¡ryEºOk
);

1063 
TIFF_SBYTE
:

1064 *
vÆue
=(
öt8
*)
‹igd©a
;

1065 (
TIFFRódDúE¡ryEºOk
);

1067 
d©a
=(
öt8
*)
	`_TIFFmÆloc
(
cou¡
);

1068 i‡(
d©a
==0)

1070 
	`_TIFF‰ì
(
‹igd©a
);

1071 (
TIFFRódDúE¡ryEºAŒoc
);

1073 
dúíåy
->
tdú_ty≥
)

1075 
TIFF_SHORT
:

1077 
uöt16
* 
ma
;

1078 
öt8
* 
mb
;

1079 
uöt32
 
n
;

1080 
ma
=(
uöt16
*)
‹igd©a
;

1081 
mb
=
d©a
;

1082 
n
=0;Ç<
cou¡
;Ç++)

1084 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1085 
	`TIFFSwabSh‹t
(
ma
);

1086 
îr
=
	`TIFFRódDúE¡ryCheckR™geSbyãSh‹t
(*
ma
);

1087 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1089 *
mb
++=(
öt8
)(*
ma
++);

1093 
TIFF_SSHORT
:

1095 
öt16
* 
ma
;

1096 
öt8
* 
mb
;

1097 
uöt32
 
n
;

1098 
ma
=(
öt16
*)
‹igd©a
;

1099 
mb
=
d©a
;

1100 
n
=0;Ç<
cou¡
;Ç++)

1102 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1103 
	`TIFFSwabSh‹t
((
uöt16
*)
ma
);

1104 
îr
=
	`TIFFRódDúE¡ryCheckR™geSbyãSsh‹t
(*
ma
);

1105 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1107 *
mb
++=(
öt8
)(*
ma
++);

1111 
TIFF_LONG
:

1113 
uöt32
* 
ma
;

1114 
öt8
* 
mb
;

1115 
uöt32
 
n
;

1116 
ma
=(
uöt32
*)
‹igd©a
;

1117 
mb
=
d©a
;

1118 
n
=0;Ç<
cou¡
;Ç++)

1120 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1121 
	`TIFFSwabL⁄g
(
ma
);

1122 
îr
=
	`TIFFRódDúE¡ryCheckR™geSbyãL⁄g
(*
ma
);

1123 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1125 *
mb
++=(
öt8
)(*
ma
++);

1129 
TIFF_SLONG
:

1131 
öt32
* 
ma
;

1132 
öt8
* 
mb
;

1133 
uöt32
 
n
;

1134 
ma
=(
öt32
*)
‹igd©a
;

1135 
mb
=
d©a
;

1136 
n
=0;Ç<
cou¡
;Ç++)

1138 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1139 
	`TIFFSwabL⁄g
((
uöt32
*)
ma
);

1140 
îr
=
	`TIFFRódDúE¡ryCheckR™geSbyãSl⁄g
(*
ma
);

1141 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1143 *
mb
++=(
öt8
)(*
ma
++);

1147 
TIFF_LONG8
:

1149 
uöt64
* 
ma
;

1150 
öt8
* 
mb
;

1151 
uöt32
 
n
;

1152 
ma
=(
uöt64
*)
‹igd©a
;

1153 
mb
=
d©a
;

1154 
n
=0;Ç<
cou¡
;Ç++)

1156 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1157 
	`TIFFSwabL⁄g8
(
ma
);

1158 
îr
=
	`TIFFRódDúE¡ryCheckR™geSbyãL⁄g8
(*
ma
);

1159 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1161 *
mb
++=(
öt8
)(*
ma
++);

1165 
TIFF_SLONG8
:

1167 
öt64
* 
ma
;

1168 
öt8
* 
mb
;

1169 
uöt32
 
n
;

1170 
ma
=(
öt64
*)
‹igd©a
;

1171 
mb
=
d©a
;

1172 
n
=0;Ç<
cou¡
;Ç++)

1174 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1175 
	`TIFFSwabL⁄g8
((
uöt64
*)
ma
);

1176 
îr
=
	`TIFFRódDúE¡ryCheckR™geSbyãSl⁄g8
(*
ma
);

1177 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1179 *
mb
++=(
öt8
)(*
ma
++);

1184 
	`_TIFF‰ì
(
‹igd©a
);

1185 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1187 
	`_TIFF‰ì
(
d©a
);

1188 (
îr
);

1190 *
vÆue
=
d©a
;

1191 (
TIFFRódDúE¡ryEºOk
);

1192 
	}
}

1194 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡rySh‹tAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt16
** 
vÆue
)

1196 
TIFFRódDúE¡ryEº
 
îr
;

1197 
uöt32
 
cou¡
;

1198 * 
‹igd©a
;

1199 
uöt16
* 
d©a
;

1200 
dúíåy
->
tdú_ty≥
)

1202 
TIFF_BYTE
:

1203 
TIFF_SBYTE
:

1204 
TIFF_SHORT
:

1205 
TIFF_SSHORT
:

1206 
TIFF_LONG
:

1207 
TIFF_SLONG
:

1208 
TIFF_LONG8
:

1209 
TIFF_SLONG8
:

1212 (
TIFFRódDúE¡ryEºTy≥
);

1214 
îr
=
	`TIFFRódDúE¡ryAºay
(
tif
,
dúíåy
,&
cou¡
,2,&
‹igd©a
);

1215 i‡((
îr
!=
TIFFRódDúE¡ryEºOk
)||(
‹igd©a
==0))

1217 *
vÆue
=0;

1218 (
îr
);

1220 
dúíåy
->
tdú_ty≥
)

1222 
TIFF_SHORT
:

1223 *
vÆue
=(
uöt16
*)
‹igd©a
;

1224 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1225 
	`TIFFSwabAºayOfSh‹t
(*
vÆue
,
cou¡
);

1226 (
TIFFRódDúE¡ryEºOk
);

1227 
TIFF_SSHORT
:

1229 
öt16
* 
m
;

1230 
uöt32
 
n
;

1231 
m
=(
öt16
*)
‹igd©a
;

1232 
n
=0;Ç<
cou¡
;Ç++)

1234 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1235 
	`TIFFSwabSh‹t
((
uöt16
*)
m
);

1236 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tSsh‹t
(*
m
);

1237 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1239 
	`_TIFF‰ì
(
‹igd©a
);

1240 (
îr
);

1242 
m
++;

1244 *
vÆue
=(
uöt16
*)
‹igd©a
;

1245 (
TIFFRódDúE¡ryEºOk
);

1248 
d©a
=(
uöt16
*)
	`_TIFFmÆloc
(
cou¡
*2);

1249 i‡(
d©a
==0)

1251 
	`_TIFF‰ì
(
‹igd©a
);

1252 (
TIFFRódDúE¡ryEºAŒoc
);

1254 
dúíåy
->
tdú_ty≥
)

1256 
TIFF_BYTE
:

1258 
uöt8
* 
ma
;

1259 
uöt16
* 
mb
;

1260 
uöt32
 
n
;

1261 
ma
=(
uöt8
*)
‹igd©a
;

1262 
mb
=
d©a
;

1263 
n
=0;Ç<
cou¡
;Ç++)

1264 *
mb
++=(
uöt16
)(*
ma
++);

1267 
TIFF_SBYTE
:

1269 
öt8
* 
ma
;

1270 
uöt16
* 
mb
;

1271 
uöt32
 
n
;

1272 
ma
=(
öt8
*)
‹igd©a
;

1273 
mb
=
d©a
;

1274 
n
=0;Ç<
cou¡
;Ç++)

1276 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tSbyã
(*
ma
);

1277 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1279 *
mb
++=(
uöt16
)(*
ma
++);

1283 
TIFF_LONG
:

1285 
uöt32
* 
ma
;

1286 
uöt16
* 
mb
;

1287 
uöt32
 
n
;

1288 
ma
=(
uöt32
*)
‹igd©a
;

1289 
mb
=
d©a
;

1290 
n
=0;Ç<
cou¡
;Ç++)

1292 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1293 
	`TIFFSwabL⁄g
(
ma
);

1294 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tL⁄g
(*
ma
);

1295 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1297 *
mb
++=(
uöt16
)(*
ma
++);

1301 
TIFF_SLONG
:

1303 
öt32
* 
ma
;

1304 
uöt16
* 
mb
;

1305 
uöt32
 
n
;

1306 
ma
=(
öt32
*)
‹igd©a
;

1307 
mb
=
d©a
;

1308 
n
=0;Ç<
cou¡
;Ç++)

1310 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1311 
	`TIFFSwabL⁄g
((
uöt32
*)
ma
);

1312 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tSl⁄g
(*
ma
);

1313 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1315 *
mb
++=(
uöt16
)(*
ma
++);

1319 
TIFF_LONG8
:

1321 
uöt64
* 
ma
;

1322 
uöt16
* 
mb
;

1323 
uöt32
 
n
;

1324 
ma
=(
uöt64
*)
‹igd©a
;

1325 
mb
=
d©a
;

1326 
n
=0;Ç<
cou¡
;Ç++)

1328 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1329 
	`TIFFSwabL⁄g8
(
ma
);

1330 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tL⁄g8
(*
ma
);

1331 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1333 *
mb
++=(
uöt16
)(*
ma
++);

1337 
TIFF_SLONG8
:

1339 
öt64
* 
ma
;

1340 
uöt16
* 
mb
;

1341 
uöt32
 
n
;

1342 
ma
=(
öt64
*)
‹igd©a
;

1343 
mb
=
d©a
;

1344 
n
=0;Ç<
cou¡
;Ç++)

1346 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1347 
	`TIFFSwabL⁄g8
((
uöt64
*)
ma
);

1348 
îr
=
	`TIFFRódDúE¡ryCheckR™geSh‹tSl⁄g8
(*
ma
);

1349 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1351 *
mb
++=(
uöt16
)(*
ma
++);

1356 
	`_TIFF‰ì
(
‹igd©a
);

1357 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1359 
	`_TIFF‰ì
(
d©a
);

1360 (
îr
);

1362 *
vÆue
=
d©a
;

1363 (
TIFFRódDúE¡ryEºOk
);

1364 
	}
}

1366 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡rySsh‹tAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt16
** 
vÆue
)

1368 
TIFFRódDúE¡ryEº
 
îr
;

1369 
uöt32
 
cou¡
;

1370 * 
‹igd©a
;

1371 
öt16
* 
d©a
;

1372 
dúíåy
->
tdú_ty≥
)

1374 
TIFF_BYTE
:

1375 
TIFF_SBYTE
:

1376 
TIFF_SHORT
:

1377 
TIFF_SSHORT
:

1378 
TIFF_LONG
:

1379 
TIFF_SLONG
:

1380 
TIFF_LONG8
:

1381 
TIFF_SLONG8
:

1384 (
TIFFRódDúE¡ryEºTy≥
);

1386 
îr
=
	`TIFFRódDúE¡ryAºay
(
tif
,
dúíåy
,&
cou¡
,2,&
‹igd©a
);

1387 i‡((
îr
!=
TIFFRódDúE¡ryEºOk
)||(
‹igd©a
==0))

1389 *
vÆue
=0;

1390 (
îr
);

1392 
dúíåy
->
tdú_ty≥
)

1394 
TIFF_SHORT
:

1396 
uöt16
* 
m
;

1397 
uöt32
 
n
;

1398 
m
=(
uöt16
*)
‹igd©a
;

1399 
n
=0;Ç<
cou¡
;Ç++)

1401 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1402 
	`TIFFSwabSh‹t
(
m
);

1403 
îr
=
	`TIFFRódDúE¡ryCheckR™geSsh‹tSh‹t
(*
m
);

1404 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1406 
	`_TIFF‰ì
(
‹igd©a
);

1407 (
îr
);

1409 
m
++;

1411 *
vÆue
=(
öt16
*)
‹igd©a
;

1412 (
TIFFRódDúE¡ryEºOk
);

1414 
TIFF_SSHORT
:

1415 *
vÆue
=(
öt16
*)
‹igd©a
;

1416 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1417 
	`TIFFSwabAºayOfSh‹t
((
uöt16
*)(*
vÆue
),
cou¡
);

1418 (
TIFFRódDúE¡ryEºOk
);

1420 
d©a
=(
öt16
*)
	`_TIFFmÆloc
(
cou¡
*2);

1421 i‡(
d©a
==0)

1423 
	`_TIFF‰ì
(
‹igd©a
);

1424 (
TIFFRódDúE¡ryEºAŒoc
);

1426 
dúíåy
->
tdú_ty≥
)

1428 
TIFF_BYTE
:

1430 
uöt8
* 
ma
;

1431 
öt16
* 
mb
;

1432 
uöt32
 
n
;

1433 
ma
=(
uöt8
*)
‹igd©a
;

1434 
mb
=
d©a
;

1435 
n
=0;Ç<
cou¡
;Ç++)

1436 *
mb
++=(
öt16
)(*
ma
++);

1439 
TIFF_SBYTE
:

1441 
öt8
* 
ma
;

1442 
öt16
* 
mb
;

1443 
uöt32
 
n
;

1444 
ma
=(
öt8
*)
‹igd©a
;

1445 
mb
=
d©a
;

1446 
n
=0;Ç<
cou¡
;Ç++)

1447 *
mb
++=(
öt16
)(*
ma
++);

1450 
TIFF_LONG
:

1452 
uöt32
* 
ma
;

1453 
öt16
* 
mb
;

1454 
uöt32
 
n
;

1455 
ma
=(
uöt32
*)
‹igd©a
;

1456 
mb
=
d©a
;

1457 
n
=0;Ç<
cou¡
;Ç++)

1459 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1460 
	`TIFFSwabL⁄g
(
ma
);

1461 
îr
=
	`TIFFRódDúE¡ryCheckR™geSsh‹tL⁄g
(*
ma
);

1462 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1464 *
mb
++=(
öt16
)(*
ma
++);

1468 
TIFF_SLONG
:

1470 
öt32
* 
ma
;

1471 
öt16
* 
mb
;

1472 
uöt32
 
n
;

1473 
ma
=(
öt32
*)
‹igd©a
;

1474 
mb
=
d©a
;

1475 
n
=0;Ç<
cou¡
;Ç++)

1477 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1478 
	`TIFFSwabL⁄g
((
uöt32
*)
ma
);

1479 
îr
=
	`TIFFRódDúE¡ryCheckR™geSsh‹tSl⁄g
(*
ma
);

1480 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1482 *
mb
++=(
öt16
)(*
ma
++);

1486 
TIFF_LONG8
:

1488 
uöt64
* 
ma
;

1489 
öt16
* 
mb
;

1490 
uöt32
 
n
;

1491 
ma
=(
uöt64
*)
‹igd©a
;

1492 
mb
=
d©a
;

1493 
n
=0;Ç<
cou¡
;Ç++)

1495 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1496 
	`TIFFSwabL⁄g8
(
ma
);

1497 
îr
=
	`TIFFRódDúE¡ryCheckR™geSsh‹tL⁄g8
(*
ma
);

1498 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1500 *
mb
++=(
öt16
)(*
ma
++);

1504 
TIFF_SLONG8
:

1506 
öt64
* 
ma
;

1507 
öt16
* 
mb
;

1508 
uöt32
 
n
;

1509 
ma
=(
öt64
*)
‹igd©a
;

1510 
mb
=
d©a
;

1511 
n
=0;Ç<
cou¡
;Ç++)

1513 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1514 
	`TIFFSwabL⁄g8
((
uöt64
*)
ma
);

1515 
îr
=
	`TIFFRódDúE¡ryCheckR™geSsh‹tSl⁄g8
(*
ma
);

1516 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1518 *
mb
++=(
öt16
)(*
ma
++);

1523 
	`_TIFF‰ì
(
‹igd©a
);

1524 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1526 
	`_TIFF‰ì
(
d©a
);

1527 (
îr
);

1529 *
vÆue
=
d©a
;

1530 (
TIFFRódDúE¡ryEºOk
);

1531 
	}
}

1533 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryL⁄gAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt32
** 
vÆue
)

1535 
TIFFRódDúE¡ryEº
 
îr
;

1536 
uöt32
 
cou¡
;

1537 * 
‹igd©a
;

1538 
uöt32
* 
d©a
;

1539 
dúíåy
->
tdú_ty≥
)

1541 
TIFF_BYTE
:

1542 
TIFF_SBYTE
:

1543 
TIFF_SHORT
:

1544 
TIFF_SSHORT
:

1545 
TIFF_LONG
:

1546 
TIFF_SLONG
:

1547 
TIFF_LONG8
:

1548 
TIFF_SLONG8
:

1551 (
TIFFRódDúE¡ryEºTy≥
);

1553 
îr
=
	`TIFFRódDúE¡ryAºay
(
tif
,
dúíåy
,&
cou¡
,4,&
‹igd©a
);

1554 i‡((
îr
!=
TIFFRódDúE¡ryEºOk
)||(
‹igd©a
==0))

1556 *
vÆue
=0;

1557 (
îr
);

1559 
dúíåy
->
tdú_ty≥
)

1561 
TIFF_LONG
:

1562 *
vÆue
=(
uöt32
*)
‹igd©a
;

1563 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1564 
	`TIFFSwabAºayOfL⁄g
(*
vÆue
,
cou¡
);

1565 (
TIFFRódDúE¡ryEºOk
);

1566 
TIFF_SLONG
:

1568 
öt32
* 
m
;

1569 
uöt32
 
n
;

1570 
m
=(
öt32
*)
‹igd©a
;

1571 
n
=0;Ç<
cou¡
;Ç++)

1573 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1574 
	`TIFFSwabL⁄g
((
uöt32
*)
m
);

1575 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄gSl⁄g
(*
m
);

1576 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1578 
	`_TIFF‰ì
(
‹igd©a
);

1579 (
îr
);

1581 
m
++;

1583 *
vÆue
=(
uöt32
*)
‹igd©a
;

1584 (
TIFFRódDúE¡ryEºOk
);

1587 
d©a
=(
uöt32
*)
	`_TIFFmÆloc
(
cou¡
*4);

1588 i‡(
d©a
==0)

1590 
	`_TIFF‰ì
(
‹igd©a
);

1591 (
TIFFRódDúE¡ryEºAŒoc
);

1593 
dúíåy
->
tdú_ty≥
)

1595 
TIFF_BYTE
:

1597 
uöt8
* 
ma
;

1598 
uöt32
* 
mb
;

1599 
uöt32
 
n
;

1600 
ma
=(
uöt8
*)
‹igd©a
;

1601 
mb
=
d©a
;

1602 
n
=0;Ç<
cou¡
;Ç++)

1603 *
mb
++=(
uöt32
)(*
ma
++);

1606 
TIFF_SBYTE
:

1608 
öt8
* 
ma
;

1609 
uöt32
* 
mb
;

1610 
uöt32
 
n
;

1611 
ma
=(
öt8
*)
‹igd©a
;

1612 
mb
=
d©a
;

1613 
n
=0;Ç<
cou¡
;Ç++)

1615 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄gSbyã
(*
ma
);

1616 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1618 *
mb
++=(
uöt32
)(*
ma
++);

1622 
TIFF_SHORT
:

1624 
uöt16
* 
ma
;

1625 
uöt32
* 
mb
;

1626 
uöt32
 
n
;

1627 
ma
=(
uöt16
*)
‹igd©a
;

1628 
mb
=
d©a
;

1629 
n
=0;Ç<
cou¡
;Ç++)

1631 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1632 
	`TIFFSwabSh‹t
(
ma
);

1633 *
mb
++=(
uöt32
)(*
ma
++);

1637 
TIFF_SSHORT
:

1639 
öt16
* 
ma
;

1640 
uöt32
* 
mb
;

1641 
uöt32
 
n
;

1642 
ma
=(
öt16
*)
‹igd©a
;

1643 
mb
=
d©a
;

1644 
n
=0;Ç<
cou¡
;Ç++)

1646 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1647 
	`TIFFSwabSh‹t
((
uöt16
*)
ma
);

1648 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄gSsh‹t
(*
ma
);

1649 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1651 *
mb
++=(
uöt32
)(*
ma
++);

1655 
TIFF_LONG8
:

1657 
uöt64
* 
ma
;

1658 
uöt32
* 
mb
;

1659 
uöt32
 
n
;

1660 
ma
=(
uöt64
*)
‹igd©a
;

1661 
mb
=
d©a
;

1662 
n
=0;Ç<
cou¡
;Ç++)

1664 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1665 
	`TIFFSwabL⁄g8
(
ma
);

1666 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄gL⁄g8
(*
ma
);

1667 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1669 *
mb
++=(
uöt32
)(*
ma
++);

1673 
TIFF_SLONG8
:

1675 
öt64
* 
ma
;

1676 
uöt32
* 
mb
;

1677 
uöt32
 
n
;

1678 
ma
=(
öt64
*)
‹igd©a
;

1679 
mb
=
d©a
;

1680 
n
=0;Ç<
cou¡
;Ç++)

1682 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1683 
	`TIFFSwabL⁄g8
((
uöt64
*)
ma
);

1684 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄gSl⁄g8
(*
ma
);

1685 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1687 *
mb
++=(
uöt32
)(*
ma
++);

1692 
	`_TIFF‰ì
(
‹igd©a
);

1693 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1695 
	`_TIFF‰ì
(
d©a
);

1696 (
îr
);

1698 *
vÆue
=
d©a
;

1699 (
TIFFRódDúE¡ryEºOk
);

1700 
	}
}

1702 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡rySl⁄gAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt32
** 
vÆue
)

1704 
TIFFRódDúE¡ryEº
 
îr
;

1705 
uöt32
 
cou¡
;

1706 * 
‹igd©a
;

1707 
öt32
* 
d©a
;

1708 
dúíåy
->
tdú_ty≥
)

1710 
TIFF_BYTE
:

1711 
TIFF_SBYTE
:

1712 
TIFF_SHORT
:

1713 
TIFF_SSHORT
:

1714 
TIFF_LONG
:

1715 
TIFF_SLONG
:

1716 
TIFF_LONG8
:

1717 
TIFF_SLONG8
:

1720 (
TIFFRódDúE¡ryEºTy≥
);

1722 
îr
=
	`TIFFRódDúE¡ryAºay
(
tif
,
dúíåy
,&
cou¡
,4,&
‹igd©a
);

1723 i‡((
îr
!=
TIFFRódDúE¡ryEºOk
)||(
‹igd©a
==0))

1725 *
vÆue
=0;

1726 (
îr
);

1728 
dúíåy
->
tdú_ty≥
)

1730 
TIFF_LONG
:

1732 
uöt32
* 
m
;

1733 
uöt32
 
n
;

1734 
m
=(
uöt32
*)
‹igd©a
;

1735 
n
=0;Ç<
cou¡
;Ç++)

1737 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1738 
	`TIFFSwabL⁄g
((
uöt32
*)
m
);

1739 
îr
=
	`TIFFRódDúE¡ryCheckR™geSl⁄gL⁄g
(*
m
);

1740 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1742 
	`_TIFF‰ì
(
‹igd©a
);

1743 (
îr
);

1745 
m
++;

1747 *
vÆue
=(
öt32
*)
‹igd©a
;

1748 (
TIFFRódDúE¡ryEºOk
);

1750 
TIFF_SLONG
:

1751 *
vÆue
=(
öt32
*)
‹igd©a
;

1752 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1753 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*)(*
vÆue
),
cou¡
);

1754 (
TIFFRódDúE¡ryEºOk
);

1756 
d©a
=(
öt32
*)
	`_TIFFmÆloc
(
cou¡
*4);

1757 i‡(
d©a
==0)

1759 
	`_TIFF‰ì
(
‹igd©a
);

1760 (
TIFFRódDúE¡ryEºAŒoc
);

1762 
dúíåy
->
tdú_ty≥
)

1764 
TIFF_BYTE
:

1766 
uöt8
* 
ma
;

1767 
öt32
* 
mb
;

1768 
uöt32
 
n
;

1769 
ma
=(
uöt8
*)
‹igd©a
;

1770 
mb
=
d©a
;

1771 
n
=0;Ç<
cou¡
;Ç++)

1772 *
mb
++=(
öt32
)(*
ma
++);

1775 
TIFF_SBYTE
:

1777 
öt8
* 
ma
;

1778 
öt32
* 
mb
;

1779 
uöt32
 
n
;

1780 
ma
=(
öt8
*)
‹igd©a
;

1781 
mb
=
d©a
;

1782 
n
=0;Ç<
cou¡
;Ç++)

1783 *
mb
++=(
öt32
)(*
ma
++);

1786 
TIFF_SHORT
:

1788 
uöt16
* 
ma
;

1789 
öt32
* 
mb
;

1790 
uöt32
 
n
;

1791 
ma
=(
uöt16
*)
‹igd©a
;

1792 
mb
=
d©a
;

1793 
n
=0;Ç<
cou¡
;Ç++)

1795 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1796 
	`TIFFSwabSh‹t
(
ma
);

1797 *
mb
++=(
öt32
)(*
ma
++);

1801 
TIFF_SSHORT
:

1803 
öt16
* 
ma
;

1804 
öt32
* 
mb
;

1805 
uöt32
 
n
;

1806 
ma
=(
öt16
*)
‹igd©a
;

1807 
mb
=
d©a
;

1808 
n
=0;Ç<
cou¡
;Ç++)

1810 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1811 
	`TIFFSwabSh‹t
((
uöt16
*)
ma
);

1812 *
mb
++=(
öt32
)(*
ma
++);

1816 
TIFF_LONG8
:

1818 
uöt64
* 
ma
;

1819 
öt32
* 
mb
;

1820 
uöt32
 
n
;

1821 
ma
=(
uöt64
*)
‹igd©a
;

1822 
mb
=
d©a
;

1823 
n
=0;Ç<
cou¡
;Ç++)

1825 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1826 
	`TIFFSwabL⁄g8
(
ma
);

1827 
îr
=
	`TIFFRódDúE¡ryCheckR™geSl⁄gL⁄g8
(*
ma
);

1828 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1830 *
mb
++=(
öt32
)(*
ma
++);

1834 
TIFF_SLONG8
:

1836 
öt64
* 
ma
;

1837 
öt32
* 
mb
;

1838 
uöt32
 
n
;

1839 
ma
=(
öt64
*)
‹igd©a
;

1840 
mb
=
d©a
;

1841 
n
=0;Ç<
cou¡
;Ç++)

1843 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1844 
	`TIFFSwabL⁄g8
((
uöt64
*)
ma
);

1845 
îr
=
	`TIFFRódDúE¡ryCheckR™geSl⁄gSl⁄g8
(*
ma
);

1846 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1848 *
mb
++=(
öt32
)(*
ma
++);

1853 
	`_TIFF‰ì
(
‹igd©a
);

1854 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1856 
	`_TIFF‰ì
(
d©a
);

1857 (
îr
);

1859 *
vÆue
=
d©a
;

1860 (
TIFFRódDúE¡ryEºOk
);

1861 
	}
}

1863 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryL⁄g8Aºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt64
** 
vÆue
)

1865 
TIFFRódDúE¡ryEº
 
îr
;

1866 
uöt32
 
cou¡
;

1867 * 
‹igd©a
;

1868 
uöt64
* 
d©a
;

1869 
dúíåy
->
tdú_ty≥
)

1871 
TIFF_BYTE
:

1872 
TIFF_SBYTE
:

1873 
TIFF_SHORT
:

1874 
TIFF_SSHORT
:

1875 
TIFF_LONG
:

1876 
TIFF_SLONG
:

1877 
TIFF_LONG8
:

1878 
TIFF_SLONG8
:

1881 (
TIFFRódDúE¡ryEºTy≥
);

1883 
îr
=
	`TIFFRódDúE¡ryAºay
(
tif
,
dúíåy
,&
cou¡
,8,&
‹igd©a
);

1884 i‡((
îr
!=
TIFFRódDúE¡ryEºOk
)||(
‹igd©a
==0))

1886 *
vÆue
=0;

1887 (
îr
);

1889 
dúíåy
->
tdú_ty≥
)

1891 
TIFF_LONG8
:

1892 *
vÆue
=(
uöt64
*)
‹igd©a
;

1893 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1894 
	`TIFFSwabAºayOfL⁄g8
(*
vÆue
,
cou¡
);

1895 (
TIFFRódDúE¡ryEºOk
);

1896 
TIFF_SLONG8
:

1898 
öt64
* 
m
;

1899 
uöt32
 
n
;

1900 
m
=(
öt64
*)
‹igd©a
;

1901 
n
=0;Ç<
cou¡
;Ç++)

1903 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1904 
	`TIFFSwabL⁄g8
((
uöt64
*)
m
);

1905 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄g8Sl⁄g8
(*
m
);

1906 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1908 
	`_TIFF‰ì
(
‹igd©a
);

1909 (
îr
);

1911 
m
++;

1913 *
vÆue
=(
uöt64
*)
‹igd©a
;

1914 (
TIFFRódDúE¡ryEºOk
);

1917 
d©a
=(
uöt64
*)
	`_TIFFmÆloc
(
cou¡
*8);

1918 i‡(
d©a
==0)

1920 
	`_TIFF‰ì
(
‹igd©a
);

1921 (
TIFFRódDúE¡ryEºAŒoc
);

1923 
dúíåy
->
tdú_ty≥
)

1925 
TIFF_BYTE
:

1927 
uöt8
* 
ma
;

1928 
uöt64
* 
mb
;

1929 
uöt32
 
n
;

1930 
ma
=(
uöt8
*)
‹igd©a
;

1931 
mb
=
d©a
;

1932 
n
=0;Ç<
cou¡
;Ç++)

1933 *
mb
++=(
uöt64
)(*
ma
++);

1936 
TIFF_SBYTE
:

1938 
öt8
* 
ma
;

1939 
uöt64
* 
mb
;

1940 
uöt32
 
n
;

1941 
ma
=(
öt8
*)
‹igd©a
;

1942 
mb
=
d©a
;

1943 
n
=0;Ç<
cou¡
;Ç++)

1945 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄g8Sbyã
(*
ma
);

1946 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1948 *
mb
++=(
uöt64
)(*
ma
++);

1952 
TIFF_SHORT
:

1954 
uöt16
* 
ma
;

1955 
uöt64
* 
mb
;

1956 
uöt32
 
n
;

1957 
ma
=(
uöt16
*)
‹igd©a
;

1958 
mb
=
d©a
;

1959 
n
=0;Ç<
cou¡
;Ç++)

1961 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1962 
	`TIFFSwabSh‹t
(
ma
);

1963 *
mb
++=(
uöt64
)(*
ma
++);

1967 
TIFF_SSHORT
:

1969 
öt16
* 
ma
;

1970 
uöt64
* 
mb
;

1971 
uöt32
 
n
;

1972 
ma
=(
öt16
*)
‹igd©a
;

1973 
mb
=
d©a
;

1974 
n
=0;Ç<
cou¡
;Ç++)

1976 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1977 
	`TIFFSwabSh‹t
((
uöt16
*)
ma
);

1978 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄g8Ssh‹t
(*
ma
);

1979 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

1981 *
mb
++=(
uöt64
)(*
ma
++);

1985 
TIFF_LONG
:

1987 
uöt32
* 
ma
;

1988 
uöt64
* 
mb
;

1989 
uöt32
 
n
;

1990 
ma
=(
uöt32
*)
‹igd©a
;

1991 
mb
=
d©a
;

1992 
n
=0;Ç<
cou¡
;Ç++)

1994 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1995 
	`TIFFSwabL⁄g
(
ma
);

1996 *
mb
++=(
uöt64
)(*
ma
++);

2000 
TIFF_SLONG
:

2002 
öt32
* 
ma
;

2003 
uöt64
* 
mb
;

2004 
uöt32
 
n
;

2005 
ma
=(
öt32
*)
‹igd©a
;

2006 
mb
=
d©a
;

2007 
n
=0;Ç<
cou¡
;Ç++)

2009 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2010 
	`TIFFSwabL⁄g
((
uöt32
*)
ma
);

2011 
îr
=
	`TIFFRódDúE¡ryCheckR™geL⁄g8Sl⁄g
(*
ma
);

2012 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2014 *
mb
++=(
uöt64
)(*
ma
++);

2019 
	`_TIFF‰ì
(
‹igd©a
);

2020 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2022 
	`_TIFF‰ì
(
d©a
);

2023 (
îr
);

2025 *
vÆue
=
d©a
;

2026 (
TIFFRódDúE¡ryEºOk
);

2027 
	}
}

2029 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡rySl⁄g8Aºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt64
** 
vÆue
)

2031 
TIFFRódDúE¡ryEº
 
îr
;

2032 
uöt32
 
cou¡
;

2033 * 
‹igd©a
;

2034 
öt64
* 
d©a
;

2035 
dúíåy
->
tdú_ty≥
)

2037 
TIFF_BYTE
:

2038 
TIFF_SBYTE
:

2039 
TIFF_SHORT
:

2040 
TIFF_SSHORT
:

2041 
TIFF_LONG
:

2042 
TIFF_SLONG
:

2043 
TIFF_LONG8
:

2044 
TIFF_SLONG8
:

2047 (
TIFFRódDúE¡ryEºTy≥
);

2049 
îr
=
	`TIFFRódDúE¡ryAºay
(
tif
,
dúíåy
,&
cou¡
,8,&
‹igd©a
);

2050 i‡((
îr
!=
TIFFRódDúE¡ryEºOk
)||(
‹igd©a
==0))

2052 *
vÆue
=0;

2053 (
îr
);

2055 
dúíåy
->
tdú_ty≥
)

2057 
TIFF_LONG8
:

2059 
uöt64
* 
m
;

2060 
uöt32
 
n
;

2061 
m
=(
uöt64
*)
‹igd©a
;

2062 
n
=0;Ç<
cou¡
;Ç++)

2064 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2065 
	`TIFFSwabL⁄g8
(
m
);

2066 
îr
=
	`TIFFRódDúE¡ryCheckR™geSl⁄g8L⁄g8
(*
m
);

2067 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2069 
	`_TIFF‰ì
(
‹igd©a
);

2070 (
îr
);

2072 
m
++;

2074 *
vÆue
=(
öt64
*)
‹igd©a
;

2075 (
TIFFRódDúE¡ryEºOk
);

2077 
TIFF_SLONG8
:

2078 *
vÆue
=(
öt64
*)
‹igd©a
;

2079 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2080 
	`TIFFSwabAºayOfL⁄g8
((
uöt64
*)(*
vÆue
),
cou¡
);

2081 (
TIFFRódDúE¡ryEºOk
);

2083 
d©a
=(
öt64
*)
	`_TIFFmÆloc
(
cou¡
*8);

2084 i‡(
d©a
==0)

2086 
	`_TIFF‰ì
(
‹igd©a
);

2087 (
TIFFRódDúE¡ryEºAŒoc
);

2089 
dúíåy
->
tdú_ty≥
)

2091 
TIFF_BYTE
:

2093 
uöt8
* 
ma
;

2094 
öt64
* 
mb
;

2095 
uöt32
 
n
;

2096 
ma
=(
uöt8
*)
‹igd©a
;

2097 
mb
=
d©a
;

2098 
n
=0;Ç<
cou¡
;Ç++)

2099 *
mb
++=(
öt64
)(*
ma
++);

2102 
TIFF_SBYTE
:

2104 
öt8
* 
ma
;

2105 
öt64
* 
mb
;

2106 
uöt32
 
n
;

2107 
ma
=(
öt8
*)
‹igd©a
;

2108 
mb
=
d©a
;

2109 
n
=0;Ç<
cou¡
;Ç++)

2110 *
mb
++=(
öt64
)(*
ma
++);

2113 
TIFF_SHORT
:

2115 
uöt16
* 
ma
;

2116 
öt64
* 
mb
;

2117 
uöt32
 
n
;

2118 
ma
=(
uöt16
*)
‹igd©a
;

2119 
mb
=
d©a
;

2120 
n
=0;Ç<
cou¡
;Ç++)

2122 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2123 
	`TIFFSwabSh‹t
(
ma
);

2124 *
mb
++=(
öt64
)(*
ma
++);

2128 
TIFF_SSHORT
:

2130 
öt16
* 
ma
;

2131 
öt64
* 
mb
;

2132 
uöt32
 
n
;

2133 
ma
=(
öt16
*)
‹igd©a
;

2134 
mb
=
d©a
;

2135 
n
=0;Ç<
cou¡
;Ç++)

2137 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2138 
	`TIFFSwabSh‹t
((
uöt16
*)
ma
);

2139 *
mb
++=(
öt64
)(*
ma
++);

2143 
TIFF_LONG
:

2145 
uöt32
* 
ma
;

2146 
öt64
* 
mb
;

2147 
uöt32
 
n
;

2148 
ma
=(
uöt32
*)
‹igd©a
;

2149 
mb
=
d©a
;

2150 
n
=0;Ç<
cou¡
;Ç++)

2152 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2153 
	`TIFFSwabL⁄g
(
ma
);

2154 *
mb
++=(
öt64
)(*
ma
++);

2158 
TIFF_SLONG
:

2160 
öt32
* 
ma
;

2161 
öt64
* 
mb
;

2162 
uöt32
 
n
;

2163 
ma
=(
öt32
*)
‹igd©a
;

2164 
mb
=
d©a
;

2165 
n
=0;Ç<
cou¡
;Ç++)

2167 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2168 
	`TIFFSwabL⁄g
((
uöt32
*)
ma
);

2169 *
mb
++=(
öt64
)(*
ma
++);

2174 
	`_TIFF‰ì
(
‹igd©a
);

2175 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2177 
	`_TIFF‰ì
(
d©a
);

2178 (
îr
);

2180 *
vÆue
=
d©a
;

2181 (
TIFFRódDúE¡ryEºOk
);

2182 
	}
}

2184 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryFlﬂtAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, ** 
vÆue
)

2186 
TIFFRódDúE¡ryEº
 
îr
;

2187 
uöt32
 
cou¡
;

2188 * 
‹igd©a
;

2189 * 
d©a
;

2190 
dúíåy
->
tdú_ty≥
)

2192 
TIFF_BYTE
:

2193 
TIFF_SBYTE
:

2194 
TIFF_SHORT
:

2195 
TIFF_SSHORT
:

2196 
TIFF_LONG
:

2197 
TIFF_SLONG
:

2198 
TIFF_LONG8
:

2199 
TIFF_SLONG8
:

2200 
TIFF_RATIONAL
:

2201 
TIFF_SRATIONAL
:

2202 
TIFF_FLOAT
:

2203 
TIFF_DOUBLE
:

2206 (
TIFFRódDúE¡ryEºTy≥
);

2208 
îr
=
	`TIFFRódDúE¡ryAºay
(
tif
,
dúíåy
,&
cou¡
,4,&
‹igd©a
);

2209 i‡((
îr
!=
TIFFRódDúE¡ryEºOk
)||(
‹igd©a
==0))

2211 *
vÆue
=0;

2212 (
îr
);

2214 
dúíåy
->
tdú_ty≥
)

2216 
TIFF_FLOAT
:

2217 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2218 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*)
‹igd©a
,
cou¡
);

2219 
	`TIFFCvtIEEEDoubÀToN©ive
(
tif
,
cou¡
,(*)
‹igd©a
);

2220 *
vÆue
=(*)
‹igd©a
;

2221 (
TIFFRódDúE¡ryEºOk
);

2223 
d©a
=(*)
	`_TIFFmÆloc
(
cou¡
*());

2224 i‡(
d©a
==0)

2226 
	`_TIFF‰ì
(
‹igd©a
);

2227 (
TIFFRódDúE¡ryEºAŒoc
);

2229 
dúíåy
->
tdú_ty≥
)

2231 
TIFF_BYTE
:

2233 
uöt8
* 
ma
;

2234 * 
mb
;

2235 
uöt32
 
n
;

2236 
ma
=(
uöt8
*)
‹igd©a
;

2237 
mb
=
d©a
;

2238 
n
=0;Ç<
cou¡
;Ç++)

2239 *
mb
++=()(*
ma
++);

2242 
TIFF_SBYTE
:

2244 
öt8
* 
ma
;

2245 * 
mb
;

2246 
uöt32
 
n
;

2247 
ma
=(
öt8
*)
‹igd©a
;

2248 
mb
=
d©a
;

2249 
n
=0;Ç<
cou¡
;Ç++)

2250 *
mb
++=()(*
ma
++);

2253 
TIFF_SHORT
:

2255 
uöt16
* 
ma
;

2256 * 
mb
;

2257 
uöt32
 
n
;

2258 
ma
=(
uöt16
*)
‹igd©a
;

2259 
mb
=
d©a
;

2260 
n
=0;Ç<
cou¡
;Ç++)

2262 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2263 
	`TIFFSwabSh‹t
(
ma
);

2264 *
mb
++=()(*
ma
++);

2268 
TIFF_SSHORT
:

2270 
öt16
* 
ma
;

2271 * 
mb
;

2272 
uöt32
 
n
;

2273 
ma
=(
öt16
*)
‹igd©a
;

2274 
mb
=
d©a
;

2275 
n
=0;Ç<
cou¡
;Ç++)

2277 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2278 
	`TIFFSwabSh‹t
((
uöt16
*)
ma
);

2279 *
mb
++=()(*
ma
++);

2283 
TIFF_LONG
:

2285 
uöt32
* 
ma
;

2286 * 
mb
;

2287 
uöt32
 
n
;

2288 
ma
=(
uöt32
*)
‹igd©a
;

2289 
mb
=
d©a
;

2290 
n
=0;Ç<
cou¡
;Ç++)

2292 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2293 
	`TIFFSwabL⁄g
(
ma
);

2294 *
mb
++=()(*
ma
++);

2298 
TIFF_SLONG
:

2300 
öt32
* 
ma
;

2301 * 
mb
;

2302 
uöt32
 
n
;

2303 
ma
=(
öt32
*)
‹igd©a
;

2304 
mb
=
d©a
;

2305 
n
=0;Ç<
cou¡
;Ç++)

2307 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2308 
	`TIFFSwabL⁄g
((
uöt32
*)
ma
);

2309 *
mb
++=()(*
ma
++);

2313 
TIFF_LONG8
:

2315 
uöt64
* 
ma
;

2316 * 
mb
;

2317 
uöt32
 
n
;

2318 
ma
=(
uöt64
*)
‹igd©a
;

2319 
mb
=
d©a
;

2320 
n
=0;Ç<
cou¡
;Ç++)

2322 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2323 
	`TIFFSwabL⁄g8
(
ma
);

2324 #i‡
	`deföed
(
__WIN32__
Ë&& (
_MSC_VER
 < 1500)

2330 *
mb
++ = 
	`_TIFFUI¡64ToFlﬂt
(*
ma
++);

2332 *
mb
++ = ()(*
ma
++);

2337 
TIFF_SLONG8
:

2339 
öt64
* 
ma
;

2340 * 
mb
;

2341 
uöt32
 
n
;

2342 
ma
=(
öt64
*)
‹igd©a
;

2343 
mb
=
d©a
;

2344 
n
=0;Ç<
cou¡
;Ç++)

2346 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2347 
	`TIFFSwabL⁄g8
((
uöt64
*)
ma
);

2348 *
mb
++=()(*
ma
++);

2352 
TIFF_RATIONAL
:

2354 
uöt32
* 
ma
;

2355 
uöt32
 
mØ
;

2356 
uöt32
 
mab
;

2357 * 
mb
;

2358 
uöt32
 
n
;

2359 
ma
=(
uöt32
*)
‹igd©a
;

2360 
mb
=
d©a
;

2361 
n
=0;Ç<
cou¡
;Ç++)

2363 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2364 
	`TIFFSwabL⁄g
(
ma
);

2365 
mØ
=*
ma
++;

2366 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2367 
	`TIFFSwabL⁄g
(
ma
);

2368 
mab
=*
ma
++;

2369 i‡(
mab
==0)

2370 *
mb
++=0.0;

2372 *
mb
++=()
mØ
/()
mab
;

2376 
TIFF_SRATIONAL
:

2378 
uöt32
* 
ma
;

2379 
öt32
 
mØ
;

2380 
uöt32
 
mab
;

2381 * 
mb
;

2382 
uöt32
 
n
;

2383 
ma
=(
uöt32
*)
‹igd©a
;

2384 
mb
=
d©a
;

2385 
n
=0;Ç<
cou¡
;Ç++)

2387 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2388 
	`TIFFSwabL⁄g
(
ma
);

2389 
mØ
=*(
öt32
*)
ma
;

2390 
ma
++;

2391 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2392 
	`TIFFSwabL⁄g
(
ma
);

2393 
mab
=*
ma
++;

2394 i‡(
mab
==0)

2395 *
mb
++=0.0;

2397 *
mb
++=()
mØ
/()
mab
;

2401 
TIFF_DOUBLE
:

2403 * 
ma
;

2404 * 
mb
;

2405 
uöt32
 
n
;

2406 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2407 
	`TIFFSwabAºayOfL⁄g8
((
uöt64
*)
‹igd©a
,
cou¡
);

2408 
	`TIFFCvtIEEEDoubÀToN©ive
(
tif
,
cou¡
,(*)
‹igd©a
);

2409 
ma
=(*)
‹igd©a
;

2410 
mb
=
d©a
;

2411 
n
=0;Ç<
cou¡
;Ç++)

2412 *
mb
++=()(*
ma
++);

2416 
	`_TIFF‰ì
(
‹igd©a
);

2417 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2419 
	`_TIFF‰ì
(
d©a
);

2420 (
îr
);

2422 *
vÆue
=
d©a
;

2423 (
TIFFRódDúE¡ryEºOk
);

2424 
	}
}

2426 
TIFFRódDúE¡ryEº


2427 
	$TIFFRódDúE¡ryDoubÀAºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, ** 
vÆue
)

2429 
TIFFRódDúE¡ryEº
 
îr
;

2430 
uöt32
 
cou¡
;

2431 * 
‹igd©a
;

2432 * 
d©a
;

2433 
dúíåy
->
tdú_ty≥
)

2435 
TIFF_BYTE
:

2436 
TIFF_SBYTE
:

2437 
TIFF_SHORT
:

2438 
TIFF_SSHORT
:

2439 
TIFF_LONG
:

2440 
TIFF_SLONG
:

2441 
TIFF_LONG8
:

2442 
TIFF_SLONG8
:

2443 
TIFF_RATIONAL
:

2444 
TIFF_SRATIONAL
:

2445 
TIFF_FLOAT
:

2446 
TIFF_DOUBLE
:

2449 (
TIFFRódDúE¡ryEºTy≥
);

2451 
îr
=
	`TIFFRódDúE¡ryAºay
(
tif
,
dúíåy
,&
cou¡
,8,&
‹igd©a
);

2452 i‡((
îr
!=
TIFFRódDúE¡ryEºOk
)||(
‹igd©a
==0))

2454 *
vÆue
=0;

2455 (
îr
);

2457 
dúíåy
->
tdú_ty≥
)

2459 
TIFF_DOUBLE
:

2460 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2461 
	`TIFFSwabAºayOfL⁄g8
((
uöt64
*)
‹igd©a
,
cou¡
);

2462 
	`TIFFCvtIEEEDoubÀToN©ive
(
tif
,
cou¡
,(*)
‹igd©a
);

2463 *
vÆue
=(*)
‹igd©a
;

2464 (
TIFFRódDúE¡ryEºOk
);

2466 
d©a
=(*)
	`_TIFFmÆloc
(
cou¡
*());

2467 i‡(
d©a
==0)

2469 
	`_TIFF‰ì
(
‹igd©a
);

2470 (
TIFFRódDúE¡ryEºAŒoc
);

2472 
dúíåy
->
tdú_ty≥
)

2474 
TIFF_BYTE
:

2476 
uöt8
* 
ma
;

2477 * 
mb
;

2478 
uöt32
 
n
;

2479 
ma
=(
uöt8
*)
‹igd©a
;

2480 
mb
=
d©a
;

2481 
n
=0;Ç<
cou¡
;Ç++)

2482 *
mb
++=()(*
ma
++);

2485 
TIFF_SBYTE
:

2487 
öt8
* 
ma
;

2488 * 
mb
;

2489 
uöt32
 
n
;

2490 
ma
=(
öt8
*)
‹igd©a
;

2491 
mb
=
d©a
;

2492 
n
=0;Ç<
cou¡
;Ç++)

2493 *
mb
++=()(*
ma
++);

2496 
TIFF_SHORT
:

2498 
uöt16
* 
ma
;

2499 * 
mb
;

2500 
uöt32
 
n
;

2501 
ma
=(
uöt16
*)
‹igd©a
;

2502 
mb
=
d©a
;

2503 
n
=0;Ç<
cou¡
;Ç++)

2505 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2506 
	`TIFFSwabSh‹t
(
ma
);

2507 *
mb
++=()(*
ma
++);

2511 
TIFF_SSHORT
:

2513 
öt16
* 
ma
;

2514 * 
mb
;

2515 
uöt32
 
n
;

2516 
ma
=(
öt16
*)
‹igd©a
;

2517 
mb
=
d©a
;

2518 
n
=0;Ç<
cou¡
;Ç++)

2520 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2521 
	`TIFFSwabSh‹t
((
uöt16
*)
ma
);

2522 *
mb
++=()(*
ma
++);

2526 
TIFF_LONG
:

2528 
uöt32
* 
ma
;

2529 * 
mb
;

2530 
uöt32
 
n
;

2531 
ma
=(
uöt32
*)
‹igd©a
;

2532 
mb
=
d©a
;

2533 
n
=0;Ç<
cou¡
;Ç++)

2535 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2536 
	`TIFFSwabL⁄g
(
ma
);

2537 *
mb
++=()(*
ma
++);

2541 
TIFF_SLONG
:

2543 
öt32
* 
ma
;

2544 * 
mb
;

2545 
uöt32
 
n
;

2546 
ma
=(
öt32
*)
‹igd©a
;

2547 
mb
=
d©a
;

2548 
n
=0;Ç<
cou¡
;Ç++)

2550 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2551 
	`TIFFSwabL⁄g
((
uöt32
*)
ma
);

2552 *
mb
++=()(*
ma
++);

2556 
TIFF_LONG8
:

2558 
uöt64
* 
ma
;

2559 * 
mb
;

2560 
uöt32
 
n
;

2561 
ma
=(
uöt64
*)
‹igd©a
;

2562 
mb
=
d©a
;

2563 
n
=0;Ç<
cou¡
;Ç++)

2565 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2566 
	`TIFFSwabL⁄g8
(
ma
);

2567 #i‡
	`deföed
(
__WIN32__
Ë&& (
_MSC_VER
 < 1500)

2573 *
mb
++ = 
	`_TIFFUI¡64ToDoubÀ
(*
ma
++);

2575 *
mb
++ = ()(*
ma
++);

2580 
TIFF_SLONG8
:

2582 
öt64
* 
ma
;

2583 * 
mb
;

2584 
uöt32
 
n
;

2585 
ma
=(
öt64
*)
‹igd©a
;

2586 
mb
=
d©a
;

2587 
n
=0;Ç<
cou¡
;Ç++)

2589 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2590 
	`TIFFSwabL⁄g8
((
uöt64
*)
ma
);

2591 *
mb
++=()(*
ma
++);

2595 
TIFF_RATIONAL
:

2597 
uöt32
* 
ma
;

2598 
uöt32
 
mØ
;

2599 
uöt32
 
mab
;

2600 * 
mb
;

2601 
uöt32
 
n
;

2602 
ma
=(
uöt32
*)
‹igd©a
;

2603 
mb
=
d©a
;

2604 
n
=0;Ç<
cou¡
;Ç++)

2606 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2607 
	`TIFFSwabL⁄g
(
ma
);

2608 
mØ
=*
ma
++;

2609 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2610 
	`TIFFSwabL⁄g
(
ma
);

2611 
mab
=*
ma
++;

2612 i‡(
mab
==0)

2613 *
mb
++=0.0;

2615 *
mb
++=()
mØ
/()
mab
;

2619 
TIFF_SRATIONAL
:

2621 
uöt32
* 
ma
;

2622 
öt32
 
mØ
;

2623 
uöt32
 
mab
;

2624 * 
mb
;

2625 
uöt32
 
n
;

2626 
ma
=(
uöt32
*)
‹igd©a
;

2627 
mb
=
d©a
;

2628 
n
=0;Ç<
cou¡
;Ç++)

2630 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2631 
	`TIFFSwabL⁄g
(
ma
);

2632 
mØ
=*(
öt32
*)
ma
;

2633 
ma
++;

2634 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2635 
	`TIFFSwabL⁄g
(
ma
);

2636 
mab
=*
ma
++;

2637 i‡(
mab
==0)

2638 *
mb
++=0.0;

2640 *
mb
++=()
mØ
/()
mab
;

2644 
TIFF_FLOAT
:

2646 * 
ma
;

2647 * 
mb
;

2648 
uöt32
 
n
;

2649 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2650 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*)
‹igd©a
,
cou¡
);

2651 
	`TIFFCvtIEEEFlﬂtToN©ive
(
tif
,
cou¡
,(*)
‹igd©a
);

2652 
ma
=(*)
‹igd©a
;

2653 
mb
=
d©a
;

2654 
n
=0;Ç<
cou¡
;Ç++)

2655 *
mb
++=()(*
ma
++);

2659 
	`_TIFF‰ì
(
‹igd©a
);

2660 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2662 
	`_TIFF‰ì
(
d©a
);

2663 (
îr
);

2665 *
vÆue
=
d©a
;

2666 (
TIFFRódDúE¡ryEºOk
);

2667 
	}
}

2669 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryIfd8Aºay
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt64
** 
vÆue
)

2671 
TIFFRódDúE¡ryEº
 
îr
;

2672 
uöt32
 
cou¡
;

2673 * 
‹igd©a
;

2674 
uöt64
* 
d©a
;

2675 
dúíåy
->
tdú_ty≥
)

2677 
TIFF_LONG
:

2678 
TIFF_LONG8
:

2679 
TIFF_IFD
:

2680 
TIFF_IFD8
:

2683 (
TIFFRódDúE¡ryEºTy≥
);

2685 
îr
=
	`TIFFRódDúE¡ryAºay
(
tif
,
dúíåy
,&
cou¡
,8,&
‹igd©a
);

2686 i‡((
îr
!=
TIFFRódDúE¡ryEºOk
)||(
‹igd©a
==0))

2688 *
vÆue
=0;

2689 (
îr
);

2691 
dúíåy
->
tdú_ty≥
)

2693 
TIFF_LONG8
:

2694 
TIFF_IFD8
:

2695 *
vÆue
=(
uöt64
*)
‹igd©a
;

2696 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2697 
	`TIFFSwabAºayOfL⁄g8
(*
vÆue
,
cou¡
);

2698 (
TIFFRódDúE¡ryEºOk
);

2700 
d©a
=(
uöt64
*)
	`_TIFFmÆloc
(
cou¡
*8);

2701 i‡(
d©a
==0)

2703 
	`_TIFF‰ì
(
‹igd©a
);

2704 (
TIFFRódDúE¡ryEºAŒoc
);

2706 
dúíåy
->
tdú_ty≥
)

2708 
TIFF_LONG
:

2709 
TIFF_IFD
:

2711 
uöt32
* 
ma
;

2712 
uöt64
* 
mb
;

2713 
uöt32
 
n
;

2714 
ma
=(
uöt32
*)
‹igd©a
;

2715 
mb
=
d©a
;

2716 
n
=0;Ç<
cou¡
;Ç++)

2718 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2719 
	`TIFFSwabL⁄g
(
ma
);

2720 *
mb
++=(
uöt64
)(*
ma
++);

2725 
	`_TIFF‰ì
(
‹igd©a
);

2726 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2728 
	`_TIFF‰ì
(
d©a
);

2729 (
îr
);

2731 *
vÆue
=
d©a
;

2732 (
TIFFRódDúE¡ryEºOk
);

2733 
	}
}

2735 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryPîßm∂eSh‹t
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt16
* 
vÆue
)

2737 
TIFFRódDúE¡ryEº
 
îr
;

2738 
uöt16
* 
m
;

2739 
uöt16
* 
«
;

2740 
uöt16
 
nb
;

2741 i‡(
dúíåy
->
tdú_cou¡
<(
uöt64
)
tif
->
tif_dú
.
td_ßm∂e•îpixñ
)

2742 (
TIFFRódDúE¡ryEºCou¡
);

2743 
îr
=
	`TIFFRódDúE¡rySh‹tAºay
(
tif
,
dúíåy
,&
m
);

2744 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2745 (
îr
);

2746 
«
=
m
;

2747 
nb
=
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;

2748 *
vÆue
=*
«
++;

2749 
nb
--;

2750 
nb
>0)

2752 i‡(*
«
++!=*
vÆue
)

2754 
îr
=
TIFFRódDúE¡ryEºPsdif
;

2757 
nb
--;

2759 
	`_TIFF‰ì
(
m
);

2760 (
îr
);

2761 
	}
}

2764 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryPîßm∂eDoubÀ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
)

2766 
TIFFRódDúE¡ryEº
 
îr
;

2767 * 
m
;

2768 * 
«
;

2769 
uöt16
 
nb
;

2770 i‡(
dúíåy
->
tdú_cou¡
<(
uöt64
)
tif
->
tif_dú
.
td_ßm∂e•îpixñ
)

2771 (
TIFFRódDúE¡ryEºCou¡
);

2772 
îr
=
	`TIFFRódDúE¡ryDoubÀAºay
(
tif
,
dúíåy
,&
m
);

2773 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2774 (
îr
);

2775 
«
=
m
;

2776 
nb
=
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;

2777 *
vÆue
=*
«
++;

2778 
nb
--;

2779 
nb
>0)

2781 i‡(*
«
++!=*
vÆue
)

2783 
îr
=
TIFFRódDúE¡ryEºPsdif
;

2786 
nb
--;

2788 
	`_TIFF‰ì
(
m
);

2789 (
îr
);

2790 
	}
}

2793 
	$TIFFRódDúE¡ryCheckedByã
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt8
* 
vÆue
)

2795 (Ë
tif
;

2796 *
vÆue
=*(
uöt8
*)(&
dúíåy
->
tdú_off£t
);

2797 
	}
}

2799 
	$TIFFRódDúE¡ryCheckedSbyã
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt8
* 
vÆue
)

2801 (Ë
tif
;

2802 *
vÆue
=*(
öt8
*)(&
dúíåy
->
tdú_off£t
);

2803 
	}
}

2805 
	$TIFFRódDúE¡ryCheckedSh‹t
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt16
* 
vÆue
)

2807 *
vÆue
 = 
dúíåy
->
tdú_off£t
.
toff_sh‹t
;

2809 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2810 
	`TIFFSwabSh‹t
(
vÆue
);

2811 
	}
}

2813 
	$TIFFRódDúE¡ryCheckedSsh‹t
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt16
* 
vÆue
)

2815 *
vÆue
=*(
öt16
*)(&
dúíåy
->
tdú_off£t
);

2816 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2817 
	`TIFFSwabSh‹t
((
uöt16
*)
vÆue
);

2818 
	}
}

2820 
	$TIFFRódDúE¡ryCheckedL⁄g
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt32
* 
vÆue
)

2822 *
vÆue
=*(
uöt32
*)(&
dúíåy
->
tdú_off£t
);

2823 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2824 
	`TIFFSwabL⁄g
(
vÆue
);

2825 
	}
}

2827 
	$TIFFRódDúE¡ryCheckedSl⁄g
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt32
* 
vÆue
)

2829 *
vÆue
=*(
öt32
*)(&
dúíåy
->
tdú_off£t
);

2830 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2831 
	`TIFFSwabL⁄g
((
uöt32
*)
vÆue
);

2832 
	}
}

2834 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckedL⁄g8
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
uöt64
* 
vÆue
)

2836 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2838 
TIFFRódDúE¡ryEº
 
îr
;

2839 
uöt32
 
off£t
 = 
dúíåy
->
tdú_off£t
.
toff_l⁄g
;

2840 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2841 
	`TIFFSwabL⁄g
(&
off£t
);

2842 
îr
=
	`TIFFRódDúE¡ryD©a
(
tif
,
off£t
,8,
vÆue
);

2843 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2844 (
îr
);

2847 *
vÆue
 = 
dúíåy
->
tdú_off£t
.
toff_l⁄g8
;

2848 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2849 
	`TIFFSwabL⁄g8
(
vÆue
);

2850 (
TIFFRódDúE¡ryEºOk
);

2851 
	}
}

2853 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckedSl⁄g8
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, 
öt64
* 
vÆue
)

2855 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2857 
TIFFRódDúE¡ryEº
 
îr
;

2858 
uöt32
 
off£t
 = 
dúíåy
->
tdú_off£t
.
toff_l⁄g
;

2859 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2860 
	`TIFFSwabL⁄g
(&
off£t
);

2861 
îr
=
	`TIFFRódDúE¡ryD©a
(
tif
,
off£t
,8,
vÆue
);

2862 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2863 (
îr
);

2866 *
vÆue
=*(
öt64
*)(&
dúíåy
->
tdú_off£t
);

2867 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2868 
	`TIFFSwabL⁄g8
((
uöt64
*)
vÆue
);

2869 (
TIFFRódDúE¡ryEºOk
);

2870 
	}
}

2872 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckedR©i⁄Æ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
)

2874 
UI¡64Alig√d_t
 
m
;

2876 
	`as£π
(()==8);

2877 
	`as£π
((
uöt64
)==8);

2878 
	`as£π
((
uöt32
)==4);

2879 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2881 
TIFFRódDúE¡ryEº
 
îr
;

2882 
uöt32
 
off£t
 = 
dúíåy
->
tdú_off£t
.
toff_l⁄g
;

2883 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2884 
	`TIFFSwabL⁄g
(&
off£t
);

2885 
îr
=
	`TIFFRódDúE¡ryD©a
(
tif
,
off£t
,8,
m
.
i
);

2886 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2887 (
îr
);

2890 
m
.
l
 = 
dúíåy
->
tdú_off£t
.
toff_l⁄g8
;

2891 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2892 
	`TIFFSwabAºayOfL⁄g
(
m
.
i
,2);

2893 i‡(
m
.
i
[0]==0)

2894 *
vÆue
=0.0;

2896 *
vÆue
=()
m
.
i
[0]/()m.i[1];

2897 (
TIFFRódDúE¡ryEºOk
);

2898 
	}
}

2900 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckedSøti⁄Æ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
)

2902 
UI¡64Alig√d_t
 
m
;

2903 
	`as£π
(()==8);

2904 
	`as£π
((
uöt64
)==8);

2905 
	`as£π
((
öt32
)==4);

2906 
	`as£π
((
uöt32
)==4);

2907 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2909 
TIFFRódDúE¡ryEº
 
îr
;

2910 
uöt32
 
off£t
 = 
dúíåy
->
tdú_off£t
.
toff_l⁄g
;

2911 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2912 
	`TIFFSwabL⁄g
(&
off£t
);

2913 
îr
=
	`TIFFRódDúE¡ryD©a
(
tif
,
off£t
,8,
m
.
i
);

2914 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2915 (
îr
);

2918 
m
.
l
=
dúíåy
->
tdú_off£t
.
toff_l⁄g8
;

2919 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2920 
	`TIFFSwabAºayOfL⁄g
(
m
.
i
,2);

2921 i‡((
öt32
)
m
.
i
[0]==0)

2922 *
vÆue
=0.0;

2924 *
vÆue
=()((
öt32
)
m
.
i
[0])/()m.i[1];

2925 (
TIFFRódDúE¡ryEºOk
);

2926 
	}
}

2928 
	$TIFFRódDúE¡ryCheckedFlﬂt
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
)

2932 
f
;

2933 
uöt32
 
i
;

2934 } 
Êﬂt_uni⁄
;

2935 
	`as£π
(()==4);

2936 
	`as£π
((
uöt32
)==4);

2937 
	`as£π
((
Êﬂt_uni⁄
)==4);

2938 
Êﬂt_uni⁄
.
i
=*(
uöt32
*)(&
dúíåy
->
tdú_off£t
);

2939 *
vÆue
=
Êﬂt_uni⁄
.
f
;

2940 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2941 
	`TIFFSwabL⁄g
((
uöt32
*)
vÆue
);

2942 
	}
}

2944 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckedDoubÀ
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dúíåy
, * 
vÆue
)

2946 
	`as£π
(()==8);

2947 
	`as£π
((
uöt64
)==8);

2948 
	`as£π
((
UI¡64Alig√d_t
)==8);

2949 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2951 
TIFFRódDúE¡ryEº
 
îr
;

2952 
uöt32
 
off£t
 = 
dúíåy
->
tdú_off£t
.
toff_l⁄g
;

2953 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2954 
	`TIFFSwabL⁄g
(&
off£t
);

2955 
îr
=
	`TIFFRódDúE¡ryD©a
(
tif
,
off£t
,8,
vÆue
);

2956 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

2957 (
îr
);

2961 
UI¡64Alig√d_t
 
uöt64_uni⁄
;

2962 
uöt64_uni⁄
.
l
=
dúíåy
->
tdú_off£t
.
toff_l⁄g8
;

2963 *
vÆue
=
uöt64_uni⁄
.
d
;

2965 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2966 
	`TIFFSwabL⁄g8
((
uöt64
*)
vÆue
);

2967 (
TIFFRódDúE¡ryEºOk
);

2968 
	}
}

2970 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geByãSbyã
(
öt8
 
vÆue
)

2972 i‡(
vÆue
<0)

2973 (
TIFFRódDúE¡ryEºR™ge
);

2975 (
TIFFRódDúE¡ryEºOk
);

2976 
	}
}

2978 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geByãSh‹t
(
uöt16
 
vÆue
)

2980 i‡(
vÆue
>0xFF)

2981 (
TIFFRódDúE¡ryEºR™ge
);

2983 (
TIFFRódDúE¡ryEºOk
);

2984 
	}
}

2986 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geByãSsh‹t
(
öt16
 
vÆue
)

2988 i‡((
vÆue
<0)||(value>0xFF))

2989 (
TIFFRódDúE¡ryEºR™ge
);

2991 (
TIFFRódDúE¡ryEºOk
);

2992 
	}
}

2994 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geByãL⁄g
(
uöt32
 
vÆue
)

2996 i‡(
vÆue
>0xFF)

2997 (
TIFFRódDúE¡ryEºR™ge
);

2999 (
TIFFRódDúE¡ryEºOk
);

3000 
	}
}

3002 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geByãSl⁄g
(
öt32
 
vÆue
)

3004 i‡((
vÆue
<0)||(value>0xFF))

3005 (
TIFFRódDúE¡ryEºR™ge
);

3007 (
TIFFRódDúE¡ryEºOk
);

3008 
	}
}

3010 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geByãL⁄g8
(
uöt64
 
vÆue
)

3012 i‡(
vÆue
>0xFF)

3013 (
TIFFRódDúE¡ryEºR™ge
);

3015 (
TIFFRódDúE¡ryEºOk
);

3016 
	}
}

3018 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geByãSl⁄g8
(
öt64
 
vÆue
)

3020 i‡((
vÆue
<0)||(value>0xFF))

3021 (
TIFFRódDúE¡ryEºR™ge
);

3023 (
TIFFRódDúE¡ryEºOk
);

3024 
	}
}

3026 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSbyãByã
(
uöt8
 
vÆue
)

3028 i‡(
vÆue
>0x7F)

3029 (
TIFFRódDúE¡ryEºR™ge
);

3031 (
TIFFRódDúE¡ryEºOk
);

3032 
	}
}

3034 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSbyãSh‹t
(
uöt16
 
vÆue
)

3036 i‡(
vÆue
>0x7F)

3037 (
TIFFRódDúE¡ryEºR™ge
);

3039 (
TIFFRódDúE¡ryEºOk
);

3040 
	}
}

3042 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSbyãSsh‹t
(
öt16
 
vÆue
)

3044 i‡((
vÆue
<-0x80)||(value>0x7F))

3045 (
TIFFRódDúE¡ryEºR™ge
);

3047 (
TIFFRódDúE¡ryEºOk
);

3048 
	}
}

3050 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSbyãL⁄g
(
uöt32
 
vÆue
)

3052 i‡(
vÆue
>0x7F)

3053 (
TIFFRódDúE¡ryEºR™ge
);

3055 (
TIFFRódDúE¡ryEºOk
);

3056 
	}
}

3058 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSbyãSl⁄g
(
öt32
 
vÆue
)

3060 i‡((
vÆue
<-0x80)||(value>0x7F))

3061 (
TIFFRódDúE¡ryEºR™ge
);

3063 (
TIFFRódDúE¡ryEºOk
);

3064 
	}
}

3066 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSbyãL⁄g8
(
uöt64
 
vÆue
)

3068 i‡(
vÆue
>0x7F)

3069 (
TIFFRódDúE¡ryEºR™ge
);

3071 (
TIFFRódDúE¡ryEºOk
);

3072 
	}
}

3074 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSbyãSl⁄g8
(
öt64
 
vÆue
)

3076 i‡((
vÆue
<-0x80)||(value>0x7F))

3077 (
TIFFRódDúE¡ryEºR™ge
);

3079 (
TIFFRódDúE¡ryEºOk
);

3080 
	}
}

3082 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSh‹tSbyã
(
öt8
 
vÆue
)

3084 i‡(
vÆue
<0)

3085 (
TIFFRódDúE¡ryEºR™ge
);

3087 (
TIFFRódDúE¡ryEºOk
);

3088 
	}
}

3090 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSh‹tSsh‹t
(
öt16
 
vÆue
)

3092 i‡(
vÆue
<0)

3093 (
TIFFRódDúE¡ryEºR™ge
);

3095 (
TIFFRódDúE¡ryEºOk
);

3096 
	}
}

3098 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSh‹tL⁄g
(
uöt32
 
vÆue
)

3100 i‡(
vÆue
>0xFFFF)

3101 (
TIFFRódDúE¡ryEºR™ge
);

3103 (
TIFFRódDúE¡ryEºOk
);

3104 
	}
}

3106 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSh‹tSl⁄g
(
öt32
 
vÆue
)

3108 i‡((
vÆue
<0)||(value>0xFFFF))

3109 (
TIFFRódDúE¡ryEºR™ge
);

3111 (
TIFFRódDúE¡ryEºOk
);

3112 
	}
}

3114 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSh‹tL⁄g8
(
uöt64
 
vÆue
)

3116 i‡(
vÆue
>0xFFFF)

3117 (
TIFFRódDúE¡ryEºR™ge
);

3119 (
TIFFRódDúE¡ryEºOk
);

3120 
	}
}

3122 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSh‹tSl⁄g8
(
öt64
 
vÆue
)

3124 i‡((
vÆue
<0)||(value>0xFFFF))

3125 (
TIFFRódDúE¡ryEºR™ge
);

3127 (
TIFFRódDúE¡ryEºOk
);

3128 
	}
}

3130 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSsh‹tSh‹t
(
uöt16
 
vÆue
)

3132 i‡(
vÆue
>0x7FFF)

3133 (
TIFFRódDúE¡ryEºR™ge
);

3135 (
TIFFRódDúE¡ryEºOk
);

3136 
	}
}

3138 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSsh‹tL⁄g
(
uöt32
 
vÆue
)

3140 i‡(
vÆue
>0x7FFF)

3141 (
TIFFRódDúE¡ryEºR™ge
);

3143 (
TIFFRódDúE¡ryEºOk
);

3144 
	}
}

3146 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSsh‹tSl⁄g
(
öt32
 
vÆue
)

3148 i‡((
vÆue
<-0x8000)||(value>0x7FFF))

3149 (
TIFFRódDúE¡ryEºR™ge
);

3151 (
TIFFRódDúE¡ryEºOk
);

3152 
	}
}

3154 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSsh‹tL⁄g8
(
uöt64
 
vÆue
)

3156 i‡(
vÆue
>0x7FFF)

3157 (
TIFFRódDúE¡ryEºR™ge
);

3159 (
TIFFRódDúE¡ryEºOk
);

3160 
	}
}

3162 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geSsh‹tSl⁄g8
(
öt64
 
vÆue
)

3164 i‡((
vÆue
<-0x8000)||(value>0x7FFF))

3165 (
TIFFRódDúE¡ryEºR™ge
);

3167 (
TIFFRódDúE¡ryEºOk
);

3168 
	}
}

3170 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geL⁄gSbyã
(
öt8
 
vÆue
)

3172 i‡(
vÆue
<0)

3173 (
TIFFRódDúE¡ryEºR™ge
);

3175 (
TIFFRódDúE¡ryEºOk
);

3176 
	}
}

3178 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geL⁄gSsh‹t
(
öt16
 
vÆue
)

3180 i‡(
vÆue
<0)

3181 (
TIFFRódDúE¡ryEºR™ge
);

3183 (
TIFFRódDúE¡ryEºOk
);

3184 
	}
}

3186 
TIFFRódDúE¡ryEº
 
	$TIFFRódDúE¡ryCheckR™geL⁄gSl⁄g
(
öt32
 
vÆue
)

3188 i‡(
vÆue
<0)

3189 (
TIFFRódDúE¡ryEºR™ge
);

3191 (
TIFFRódDúE¡ryEºOk
);

3192 
	}
}

3197 #i‡
deföed
(
__WIN32__
Ë&& deföed(
_MSC_VER
)

3198 
	#TIFF_UINT32_MAX
 0xFFFFFFFF
I64


	)

3200 
	#TIFF_UINT32_MAX
 0xFFFFFFFFLL

	)

3203 
TIFFRódDúE¡ryEº


3204 
	$TIFFRódDúE¡ryCheckR™geL⁄gL⁄g8
(
uöt64
 
vÆue
)

3206 i‡(
vÆue
 > 
TIFF_UINT32_MAX
)

3207 (
TIFFRódDúE¡ryEºR™ge
);

3209 (
TIFFRódDúE¡ryEºOk
);

3210 
	}
}

3212 
TIFFRódDúE¡ryEº


3213 
	$TIFFRódDúE¡ryCheckR™geL⁄gSl⁄g8
(
öt64
 
vÆue
)

3215 i‡((
vÆue
<0Ë|| (vÆuê> 
TIFF_UINT32_MAX
))

3216 (
TIFFRódDúE¡ryEºR™ge
);

3218 (
TIFFRódDúE¡ryEºOk
);

3219 
	}
}

3221 #unde‡
TIFF_UINT32_MAX


3223 
TIFFRódDúE¡ryEº


3224 
	$TIFFRódDúE¡ryCheckR™geSl⁄gL⁄g
(
uöt32
 
vÆue
)

3226 i‡(
vÆue
 > 0x7FFFFFFFUL)

3227 (
TIFFRódDúE¡ryEºR™ge
);

3229 (
TIFFRódDúE¡ryEºOk
);

3230 
	}
}

3232 
TIFFRódDúE¡ryEº


3233 
	$TIFFRódDúE¡ryCheckR™geSl⁄gL⁄g8
(
uöt64
 
vÆue
)

3235 i‡(
vÆue
 > 0x7FFFFFFFUL)

3236 (
TIFFRódDúE¡ryEºR™ge
);

3238 (
TIFFRódDúE¡ryEºOk
);

3239 
	}
}

3241 
TIFFRódDúE¡ryEº


3242 
	$TIFFRódDúE¡ryCheckR™geSl⁄gSl⁄g8
(
öt64
 
vÆue
)

3244 i‡((
vÆue
 < 0L-0x80000000L) || (value > 0x7FFFFFFFL))

3245 (
TIFFRódDúE¡ryEºR™ge
);

3247 (
TIFFRódDúE¡ryEºOk
);

3248 
	}
}

3250 
TIFFRódDúE¡ryEº


3251 
	$TIFFRódDúE¡ryCheckR™geL⁄g8Sbyã
(
öt8
 
vÆue
)

3253 i‡(
vÆue
 < 0)

3254 (
TIFFRódDúE¡ryEºR™ge
);

3256 (
TIFFRódDúE¡ryEºOk
);

3257 
	}
}

3259 
TIFFRódDúE¡ryEº


3260 
	$TIFFRódDúE¡ryCheckR™geL⁄g8Ssh‹t
(
öt16
 
vÆue
)

3262 i‡(
vÆue
 < 0)

3263 (
TIFFRódDúE¡ryEºR™ge
);

3265 (
TIFFRódDúE¡ryEºOk
);

3266 
	}
}

3268 
TIFFRódDúE¡ryEº


3269 
	$TIFFRódDúE¡ryCheckR™geL⁄g8Sl⁄g
(
öt32
 
vÆue
)

3271 i‡(
vÆue
 < 0)

3272 (
TIFFRódDúE¡ryEºR™ge
);

3274 (
TIFFRódDúE¡ryEºOk
);

3275 
	}
}

3277 
TIFFRódDúE¡ryEº


3278 
	$TIFFRódDúE¡ryCheckR™geL⁄g8Sl⁄g8
(
öt64
 
vÆue
)

3280 i‡(
vÆue
 < 0)

3281 (
TIFFRódDúE¡ryEºR™ge
);

3283 (
TIFFRódDúE¡ryEºOk
);

3284 
	}
}

3289 #i‡
deföed
(
__WIN32__
Ë&& deföed(
_MSC_VER
)

3290 
	#TIFF_INT64_MAX
 0x7FFFFFFFFFFFFFFF
I64


	)

3292 
	#TIFF_INT64_MAX
 0x7FFFFFFFFFFFFFFFLL

	)

3295 
TIFFRódDúE¡ryEº


3296 
	$TIFFRódDúE¡ryCheckR™geSl⁄g8L⁄g8
(
uöt64
 
vÆue
)

3298 i‡(
vÆue
 > 
TIFF_INT64_MAX
)

3299 (
TIFFRódDúE¡ryEºR™ge
);

3301 (
TIFFRódDúE¡ryEºOk
);

3302 
	}
}

3304 #unde‡
TIFF_INT64_MAX


3306 
TIFFRódDúE¡ryEº


3307 
	$TIFFRódDúE¡ryD©a
(
TIFF
* 
tif
, 
uöt64
 
off£t
, 
tmsize_t
 
size
, * 
de°
)

3309 
	`as£π
(
size
>0);

3310 i‡(!
	`isM≠≥d
(
tif
)) {

3311 i‡(!
	`SìkOK
(
tif
,
off£t
))

3312 (
TIFFRódDúE¡ryEºIo
);

3313 i‡(!
	`RódOK
(
tif
,
de°
,
size
))

3314 (
TIFFRódDúE¡ryEºIo
);

3316 
tmsize_t
 
ma
,
mb
;

3317 
ma
=(
tmsize_t
)
off£t
;

3318 
mb
=
ma
+
size
;

3319 i‡(((
uöt64
)
ma
!=
off£t
)||(
mb
<ma)||(mb<
size
)||(mb>
tif
->
tif_size
))

3320 (
TIFFRódDúE¡ryEºIo
);

3321 
	`_TIFFmem˝y
(
de°
,
tif
->
tif_ba£
+
ma
,
size
);

3323 (
TIFFRódDúE¡ryEºOk
);

3324 
	}
}

3326 
	$TIFFRódDúE¡ryOuçutEº
(
TIFF
* 
tif
, 
TIFFRódDúE¡ryEº
 
îr
, c⁄° * 
moduÀ
, c⁄° * 
èg«me
, 
ªcovî
)

3328 i‡(!
ªcovî
) {

3329 
îr
) {

3330 
TIFFRódDúE¡ryEºCou¡
:

3331 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3333 
èg«me
);

3335 
TIFFRódDúE¡ryEºTy≥
:

3336 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3338 
èg«me
);

3340 
TIFFRódDúE¡ryEºIo
:

3341 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3343 
èg«me
);

3345 
TIFFRódDúE¡ryEºR™ge
:

3346 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3348 
èg«me
);

3350 
TIFFRódDúE¡ryEºPsdif
:

3351 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3353 
èg«me
);

3355 
TIFFRódDúE¡ryEºSizeßn
:

3356 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3358 
èg«me
);

3360 
TIFFRódDúE¡ryEºAŒoc
:

3361 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3363 
èg«me
);

3366 
	`as£π
(0);

3370 
îr
) {

3371 
TIFFRódDúE¡ryEºCou¡
:

3372 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3374 
èg«me
);

3376 
TIFFRódDúE¡ryEºTy≥
:

3377 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3379 
èg«me
);

3381 
TIFFRódDúE¡ryEºIo
:

3382 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3384 
èg«me
);

3386 
TIFFRódDúE¡ryEºR™ge
:

3387 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3389 
èg«me
);

3391 
TIFFRódDúE¡ryEºPsdif
:

3392 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3394 
èg«me
);

3396 
TIFFRódDúE¡ryEºSizeßn
:

3397 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3399 
èg«me
);

3401 
TIFFRódDúE¡ryEºAŒoc
:

3402 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3404 
èg«me
);

3407 
	`as£π
(0);

3411 
	}
}

3418 
	$TIFFRódDúe˘‹y
(
TIFF
* 
tif
)

3420 c⁄° 
moduÀ
[] = "TIFFReadDirectory";

3421 
TIFFDúE¡ry
* 
dú
;

3422 
uöt16
 
dúcou¡
;

3423 
TIFFDúE¡ry
* 
dp
;

3424 
uöt16
 
di
;

3425 c⁄° 
TIFFFõld
* 
fù
;

3426 
uöt32
 
fii
=
FAILED_FII
;

3427 
toff_t
 
√xtdúoff
;

3428 
tif
->
tif_dúoff
Òif->
tif_√xtdúoff
;

3429 i‡(!
	`TIFFCheckDúOff£t
(
tif
,tif->
tif_√xtdúoff
))

3431 (*
tif
->
tif_˛ónup
)(tif);

3432 
tif
->
tif_curdú
++;

3433 
√xtdúoff
 = 
tif
->
tif_√xtdúoff
;

3434 
dúcou¡
=
	`TIFFFëchDúe˘‹y
(
tif
,
√xtdúoff
,&
dú
,&tif->
tif_√xtdúoff
);

3435 i‡(!
dúcou¡
)

3437 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

3438 "FaûedÅÿªad dúe˘‹yáàoff£à" 
TIFF_UINT64_FORMAT
,
√xtdúoff
);

3441 
	`TIFFRódDúe˘‹yCheckOrdî
(
tif
,
dú
,
dúcou¡
);

3448 
TIFFDúE¡ry
* 
ma
;

3449 
uöt16
 
mb
;

3450 
ma
=
dú
, 
mb
=0; mb<
dúcou¡
; ma++, mb++)

3452 
TIFFDúE¡ry
* 
«
;

3453 
uöt16
 
nb
;

3454 
«
=
ma
+1, 
nb
=
mb
+1;Çb<
dúcou¡
;Ça++,Çb++)

3456 i‡(
ma
->
tdú_èg
==
«
->tdir_tag)

3457 
«
->
tdú_èg
=
IGNORE
;

3462 
tif
->
tif_Êags
 &~
TIFF_BEENWRITING
;

3463 
tif
->
tif_Êags
 &~
TIFF_BUF4WRITE
;

3465 
	`TIFFFªeDúe˘‹y
(
tif
);

3466 
	`TIFFDeÁu…Dúe˘‹y
(
tif
);

3473 
	`TIFFSëFõld
(
tif
,
TIFFTAG_PLANARCONFIG
,
PLANARCONFIG_CONTIG
);

3491 
dp
=
	`TIFFRódDúe˘‹yFödE¡ry
(
tif
,
dú
,
dúcou¡
,
TIFFTAG_SAMPLESPERPIXEL
);

3492 i‡(
dp
)

3494 i‡(!
	`TIFFFëchN‹mÆTag
(
tif
,
dp
,0))

3495 
bad
;

3496 
dp
->
tdú_èg
=
IGNORE
;

3498 
dp
=
	`TIFFRódDúe˘‹yFödE¡ry
(
tif
,
dú
,
dúcou¡
,
TIFFTAG_COMPRESSION
);

3499 i‡(
dp
)

3507 
uöt16
 
vÆue
;

3508 
TIFFRódDúE¡ryEº
 
îr
;

3509 
îr
=
	`TIFFRódDúE¡rySh‹t
(
tif
,
dp
,&
vÆue
);

3510 i‡(
îr
==
TIFFRódDúE¡ryEºCou¡
)

3511 
îr
=
	`TIFFRódDúE¡ryPîßm∂eSh‹t
(
tif
,
dp
,&
vÆue
);

3512 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

3514 
	`TIFFRódDúE¡ryOuçutEº
(
tif
,
îr
,
moduÀ
,"Compression",0);

3515 
bad
;

3517 i‡(!
	`TIFFSëFõld
(
tif
,
TIFFTAG_COMPRESSION
,
vÆue
))

3518 
bad
;

3519 
dp
->
tdú_èg
=
IGNORE
;

3523 i‡(!
	`TIFFSëFõld
(
tif
,
TIFFTAG_COMPRESSION
,
COMPRESSION_NONE
))

3524 
bad
;

3529 
di
=0, 
dp
=
dú
; di<
dúcou¡
; di++, dp++)

3531 i‡(
dp
->
tdú_èg
!=
IGNORE
)

3533 
	`TIFFRódDúe˘‹yFödFõldInfo
(
tif
,
dp
->
tdú_èg
,&
fii
);

3534 i‡(
fii
 =
FAILED_FII
)

3536 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3538 
dp
->
tdú_èg
,dp->tdir_tag);

3541 i‡(!
	`_TIFFMîgeFõlds
(
tif
,

3542 
	`_TIFFCª©eAn⁄Fõld
(
tif
,

3543 
dp
->
tdú_èg
,

3544 (
TIFFD©aTy≥
Ë
dp
->
tdú_ty≥
),

3546 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,

3547 
moduÀ
,

3549 
dp
->
tdú_èg
,

3550 
dp
->
tdú_èg
);

3551 
dp
->
tdú_èg
=
IGNORE
;

3553 
	`TIFFRódDúe˘‹yFödFõldInfo
(
tif
,
dp
->
tdú_èg
,&
fii
);

3554 
	`as£π
(
fii
 !
FAILED_FII
);

3558 i‡(
dp
->
tdú_èg
!=
IGNORE
)

3560 
fù
=
tif
->
tif_fõlds
[
fii
];

3561 i‡(
fù
->
fõld_bô
==
FIELD_IGNORE
)

3562 
dp
->
tdú_èg
=
IGNORE
;

3565 
dp
->
tdú_èg
)

3567 
TIFFTAG_STRIPOFFSETS
:

3568 
TIFFTAG_STRIPBYTECOUNTS
:

3569 
TIFFTAG_TILEOFFSETS
:

3570 
TIFFTAG_TILEBYTECOUNTS
:

3571 
	`TIFFSëFõldBô
(
tif
,
fù
->
fõld_bô
);

3573 
TIFFTAG_IMAGEWIDTH
:

3574 
TIFFTAG_IMAGELENGTH
:

3575 
TIFFTAG_IMAGEDEPTH
:

3576 
TIFFTAG_TILELENGTH
:

3577 
TIFFTAG_TILEWIDTH
:

3578 
TIFFTAG_TILEDEPTH
:

3579 
TIFFTAG_PLANARCONFIG
:

3580 
TIFFTAG_ROWSPERSTRIP
:

3581 
TIFFTAG_EXTRASAMPLES
:

3582 i‡(!
	`TIFFFëchN‹mÆTag
(
tif
,
dp
,0))

3583 
bad
;

3584 
dp
->
tdú_èg
=
IGNORE
;

3598 i‡((
tif
->
tif_dú
.
td_com¥essi⁄
==
COMPRESSION_OJPEG
)&&

3599 (
tif
->
tif_dú
.
td_∂™¨c⁄fig
==
PLANARCONFIG_SEPARATE
))

3601 i‡(!
	`_TIFFFûlSåûes
(
tif
))

3602 
bad
;

3603 
dp
=
	`TIFFRódDúe˘‹yFödE¡ry
(
tif
,
dú
,
dúcou¡
,
TIFFTAG_STRIPOFFSETS
);

3604 i‡((
dp
!=0)&&(dp->
tdú_cou¡
==1))

3606 
dp
=
	`TIFFRódDúe˘‹yFödE¡ry
(
tif
,
dú
,
dúcou¡
,

3607 
TIFFTAG_STRIPBYTECOUNTS
);

3608 i‡((
dp
!=0)&&(dp->
tdú_cou¡
==1))

3610 
tif
->
tif_dú
.
td_∂™¨c⁄fig
=
PLANARCONFIG_CONTIG
;

3611 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

3620 i‡(!
	`TIFFFõldSë
(
tif
,
FIELD_IMAGEDIMENSIONS
))

3622 
	`MissögRequúed
(
tif
,"ImageLength");

3623 
bad
;

3628 i‡(!
	`TIFFFõldSë
(
tif
, 
FIELD_TILEDIMENSIONS
)) {

3629 
tif
->
tif_dú
.
td_n°rùs
 = 
	`TIFFNumbîOfSåùs
(tif);

3630 
tif
->
tif_dú
.
td_tûewidth
 =Åif->tif_dú.
td_imagewidth
;

3631 
tif
->
tif_dú
.
td_tûñígth
 =Åif->tif_dú.
td_row•î°rù
;

3632 
tif
->
tif_dú
.
td_tûedïth
 =Åif->tif_dú.
td_imagedïth
;

3633 
tif
->
tif_Êags
 &~
TIFF_ISTILED
;

3635 
tif
->
tif_dú
.
td_n°rùs
 = 
	`TIFFNumbîOfTûes
(tif);

3636 
tif
->
tif_Êags
 |
TIFF_ISTILED
;

3638 i‡(!
tif
->
tif_dú
.
td_n°rùs
) {

3639 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3641 
	`isTûed
(
tif
) ? "tiles" : "strips");

3642 
bad
;

3644 
tif
->
tif_dú
.
td_°rù•îimage
 =Åif->tif_dú.
td_n°rùs
;

3645 i‡(
tif
->
tif_dú
.
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
)

3646 
tif
->
tif_dú
.
td_°rù•îimage
 /tif->tif_dú.
td_ßm∂e•îpixñ
;

3647 i‡(!
	`TIFFFõldSë
(
tif
, 
FIELD_STRIPOFFSETS
)) {

3648 i‡((
tif
->
tif_dú
.
td_com¥essi⁄
==
COMPRESSION_OJPEG
) &&

3649 (
	`isTûed
(
tif
)==0) &&

3650 (
tif
->
tif_dú
.
td_n°rùs
==1)) {

3659 
	`TIFFSëFõldBô
(
tif
, 
FIELD_STRIPOFFSETS
);

3661 
	`MissögRequúed
(
tif
,

3662 
	`isTûed
(
tif
) ? "TileOffsets" : "StripOffsets");

3663 
bad
;

3669 
di
=0, 
dp
=
dú
; di<
dúcou¡
; di++, dp++)

3671 
dp
->
tdú_èg
)

3673 
IGNORE
:

3675 
TIFFTAG_MINSAMPLEVALUE
:

3676 
TIFFTAG_MAXSAMPLEVALUE
:

3677 
TIFFTAG_BITSPERSAMPLE
:

3678 
TIFFTAG_DATATYPE
:

3679 
TIFFTAG_SAMPLEFORMAT
:

3691 
uöt16
 
vÆue
;

3692 
TIFFRódDúE¡ryEº
 
îr
;

3693 
îr
=
	`TIFFRódDúE¡rySh‹t
(
tif
,
dp
,&
vÆue
);

3694 i‡(
îr
==
TIFFRódDúE¡ryEºCou¡
)

3695 
îr
=
	`TIFFRódDúE¡ryPîßm∂eSh‹t
(
tif
,
dp
,&
vÆue
);

3696 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

3698 
fù
 = 
	`TIFFFõldWôhTag
(
tif
,
dp
->
tdú_èg
);

3699 
	`TIFFRódDúE¡ryOuçutEº
(
tif
,
îr
,
moduÀ
,
fù
 ? fù->
fõld_«me
 : "unknownÅagname",0);

3700 
bad
;

3702 i‡(!
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
vÆue
))

3703 
bad
;

3706 
TIFFTAG_SMINSAMPLEVALUE
:

3707 
TIFFTAG_SMAXSAMPLEVALUE
:

3710 *
d©a
;

3711 
TIFFRódDúE¡ryEº
 
îr
;

3712 
uöt32
 
ßved_Êags
;

3713 
m
;

3714 i‡(
dp
->
tdú_cou¡
 !(
uöt64
)
tif
->
tif_dú
.
td_ßm∂e•îpixñ
)

3715 
îr
 = 
TIFFRódDúE¡ryEºCou¡
;

3717 
îr
 = 
	`TIFFRódDúE¡ryDoubÀAºay
(
tif
, 
dp
, &
d©a
);

3718 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

3720 
fù
 = 
	`TIFFFõldWôhTag
(
tif
,
dp
->
tdú_èg
);

3721 
	`TIFFRódDúE¡ryOuçutEº
(
tif
,
îr
,
moduÀ
,
fù
 ? fù->
fõld_«me
 : "unknownÅagname",0);

3722 
bad
;

3724 
ßved_Êags
 = 
tif
->
tif_Êags
;

3725 
tif
->
tif_Êags
 |
TIFF_PERSAMPLE
;

3726 
m
 = 
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
);

3727 
tif
->
tif_Êags
 = 
ßved_Êags
;

3728 
	`_TIFF‰ì
(
d©a
);

3729 i‡(!
m
)

3730 
bad
;

3733 
TIFFTAG_STRIPOFFSETS
:

3734 
TIFFTAG_TILEOFFSETS
:

3735 #i‡
	`deföed
(
DEFER_STRILE_LOAD
)

3736 
	`_TIFFmem˝y
–&(
tif
->
tif_dú
.
td_°rùoff£t_íåy
),

3737 
dp
, (
TIFFDúE¡ry
) );

3739 i‡(!
	`TIFFFëchSåùThög
(
tif
,
dp
,tif->
tif_dú
.
td_n°rùs
,&tif->tif_dú.
td_°rùoff£t
))

3740 
bad
;

3743 
TIFFTAG_STRIPBYTECOUNTS
:

3744 
TIFFTAG_TILEBYTECOUNTS
:

3745 #i‡
	`deföed
(
DEFER_STRILE_LOAD
)

3746 
	`_TIFFmem˝y
–&(
tif
->
tif_dú
.
td_°rùbyãcou¡_íåy
),

3747 
dp
, (
TIFFDúE¡ry
) );

3749 i‡(!
	`TIFFFëchSåùThög
(
tif
,
dp
,tif->
tif_dú
.
td_n°rùs
,&tif->tif_dú.
td_°rùbyãcou¡
))

3750 
bad
;

3753 
TIFFTAG_COLORMAP
:

3754 
TIFFTAG_TRANSFERFUNCTION
:

3756 
TIFFRódDúE¡ryEº
 
îr
;

3757 
uöt32
 
cou¡≥rßm∂e
;

3758 
uöt32
 
cou¡ªquúed
;

3759 
uöt32
 
ö¸emíçîßm∂e
;

3760 
uöt16
* 
vÆue
=
NULL
;

3761 
cou¡≥rßm∂e
=(1L<<
tif
->
tif_dú
.
td_bô•îßm∂e
);

3762 i‡((
dp
->
tdú_èg
==
TIFFTAG_TRANSFERFUNCTION
)&&(dp->
tdú_cou¡
==(
uöt64
)
cou¡≥rßm∂e
))

3764 
cou¡ªquúed
=
cou¡≥rßm∂e
;

3765 
ö¸emíçîßm∂e
=0;

3769 
cou¡ªquúed
=3*
cou¡≥rßm∂e
;

3770 
ö¸emíçîßm∂e
=
cou¡≥rßm∂e
;

3772 i‡(
dp
->
tdú_cou¡
!=(
uöt64
)
cou¡ªquúed
)

3773 
îr
=
TIFFRódDúE¡ryEºCou¡
;

3775 
îr
=
	`TIFFRódDúE¡rySh‹tAºay
(
tif
,
dp
,&
vÆue
);

3776 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

3778 
fù
 = 
	`TIFFFõldWôhTag
(
tif
,
dp
->
tdú_èg
);

3779 
	`TIFFRódDúE¡ryOuçutEº
(
tif
,
îr
,
moduÀ
,
fù
 ? fù->
fõld_«me
 : "unknownÅagname",1);

3783 
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
vÆue
,vÆue+
ö¸emíçîßm∂e
,value+2*incrementpersample);

3784 
	`_TIFF‰ì
(
vÆue
);

3789 
TIFFTAG_OSUBFILETYPE
:

3791 
uöt16
 
vÆueo
;

3792 
uöt32
 
vÆue
;

3793 i‡(
	`TIFFRódDúE¡rySh‹t
(
tif
,
dp
,&
vÆueo
)==
TIFFRódDúE¡ryEºOk
)

3795 
vÆueo
)

3797 
OFILETYPE_REDUCEDIMAGE
: 
vÆue
=
FILETYPE_REDUCEDIMAGE
; ;

3798 
OFILETYPE_PAGE
: 
vÆue
=
FILETYPE_PAGE
; ;

3799 : 
vÆue
=0; ;

3801 i‡(
vÆue
!=0)

3802 
	`TIFFSëFõld
(
tif
,
TIFFTAG_SUBFILETYPE
,
vÆue
);

3808 (Ë
	`TIFFFëchN‹mÆTag
(
tif
, 
dp
, 
TRUE
);

3828 i‡(
tif
->
tif_dú
.
td_com¥essi⁄
==
COMPRESSION_OJPEG
)

3830 i‡(!
	`TIFFFõldSë
(
tif
,
FIELD_PHOTOMETRIC
))

3832 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3834 i‡(!
	`TIFFSëFõld
(
tif
,
TIFFTAG_PHOTOMETRIC
,
PHOTOMETRIC_YCBCR
))

3835 
bad
;

3837 i‡(
tif
->
tif_dú
.
td_phŸomëric
==
PHOTOMETRIC_RGB
)

3839 
tif
->
tif_dú
.
td_phŸomëric
=
PHOTOMETRIC_YCBCR
;

3840 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3844 i‡(!
	`TIFFFõldSë
(
tif
,
FIELD_BITSPERSAMPLE
))

3846 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

3848 i‡(!
	`TIFFSëFõld
(
tif
,
TIFFTAG_BITSPERSAMPLE
,8))

3849 
bad
;

3851 i‡(!
	`TIFFFõldSë
(
tif
,
FIELD_SAMPLESPERPIXEL
))

3853 i‡(
tif
->
tif_dú
.
td_phŸomëric
==
PHOTOMETRIC_RGB
)

3855 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

3858 i‡(!
	`TIFFSëFõld
(
tif
,
TIFFTAG_SAMPLESPERPIXEL
,3))

3859 
bad
;

3861 i‡(
tif
->
tif_dú
.
td_phŸomëric
==
PHOTOMETRIC_YCBCR
)

3863 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

3866 i‡(!
	`TIFFSëFõld
(
tif
,
TIFFTAG_SAMPLESPERPIXEL
,3))

3867 
bad
;

3869 i‡((
tif
->
tif_dú
.
td_phŸomëric
==
PHOTOMETRIC_MINISWHITE
)

3870 || (
tif
->
tif_dú
.
td_phŸomëric
==
PHOTOMETRIC_MINISBLACK
))

3876 i‡(!
	`TIFFSëFõld
(
tif
,
TIFFTAG_SAMPLESPERPIXEL
,1))

3877 
bad
;

3884 i‡(
tif
->
tif_dú
.
td_phŸomëric
 =
PHOTOMETRIC_PALETTE
 &&

3885 !
	`TIFFFõldSë
(
tif
, 
FIELD_COLORMAP
)) {

3886 i‡–
tif
->
tif_dú
.
td_bô•îßm∂e
>=8 &&Åif->tif_dú.
td_ßm∂e•îpixñ
==3)

3887 
tif
->
tif_dú
.
td_phŸomëric
 = 
PHOTOMETRIC_RGB
;

3888 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
>=8)

3889 
tif
->
tif_dú
.
td_phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

3891 
	`MissögRequúed
(
tif
, "Colormap");

3892 
bad
;

3900 i‡(
tif
->
tif_dú
.
td_com¥essi⁄
!=
COMPRESSION_OJPEG
)

3905 i‡(!
	`TIFFFõldSë
(
tif
, 
FIELD_STRIPBYTECOUNTS
)) {

3911 i‡((
tif
->
tif_dú
.
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
 &&

3912 
tif
->
tif_dú
.
td_n°rùs
 > 1) ||

3913 (
tif
->
tif_dú
.
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
 &&

3914 
tif
->
tif_dú
.
td_n°rùs
 !(
uöt32
Èif->tif_dú.
td_ßm∂e•îpixñ
)) {

3915 
	`MissögRequúed
(
tif
, "StripByteCounts");

3916 
bad
;

3918 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3921 i‡(
	`E°im©eSåùByãCou¡s
(
tif
, 
dú
, 
dúcou¡
) < 0)

3922 
bad
;

3936 
	#BYTECOUNTLOOKSBAD
 \

3937 –(
tif
->
tif_dú
.
td_°rùbyãcou¡
[0] =0 &&Åif->tif_dú.
td_°rùoff£t
[0] != 0) || \

3938 (
tif
->
tif_dú
.
td_com¥essi⁄
 =
COMPRESSION_NONE
 && \

3939 
tif
->
tif_dú
.
td_°rùbyãcou¡
[0] > 
	`TIFFGëFûeSize
—ifË-Åif->tif_dú.
td_°rùoff£t
[0]) || \

3940 (
tif
->
tif_mode
 =
O_RDONLY
 && \

3941 
tif
->
tif_dú
.
td_com¥essi⁄
 =
COMPRESSION_NONE
 && \

3942 
tif
->
tif_dú
.
td_°rùbyãcou¡
[0] < 
	`TIFFSˇ∆öeSize64
—ifË*Åif->tif_dú.
td_imagñígth
Ë)

	)

3944 } i‡(
tif
->
tif_dú
.
td_n°rùs
 == 1

3945 && 
	`_TIFFFûlSåûes
(
tif
)

3946 && 
tif
->
tif_dú
.
td_°rùoff£t
[0] != 0

3947 && 
BYTECOUNTLOOKSBAD
) {

3954 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3956 if(
	`E°im©eSåùByãCou¡s
(
tif
, 
dú
, 
dúcou¡
) < 0)

3957 
bad
;

3959 #i‡!
	`deföed
(
DEFER_STRILE_LOAD
)

3960 } i‡(
tif
->
tif_dú
.
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG


3961 && 
tif
->
tif_dú
.
td_n°rùs
 > 2

3962 && 
tif
->
tif_dú
.
td_com¥essi⁄
 =
COMPRESSION_NONE


3963 && 
tif
->
tif_dú
.
td_°rùbyãcou¡
[0] !=Åif->tif_dir.td_stripbytecount[1]

3964 && 
tif
->
tif_dú
.
td_°rùbyãcou¡
[0] != 0

3965 && 
tif
->
tif_dú
.
td_°rùbyãcou¡
[1] != 0 ) {

3976 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

3978 i‡(
	`E°im©eSåùByãCou¡s
(
tif
, 
dú
, 
dúcou¡
) < 0)

3979 
bad
;

3983 i‡(
dú
)

3985 
	`_TIFF‰ì
(
dú
);

3986 
dú
=
NULL
;

3988 i‡(!
	`TIFFFõldSë
(
tif
, 
FIELD_MAXSAMPLEVALUE
))

3990 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
>=16)

3991 
tif
->
tif_dú
.
td_maxßm∂evÆue
=0xFFFF;

3993 
tif
->
tif_dú
.
td_maxßm∂evÆue
 = (
uöt16
)((1L<<tif->tif_dú.
td_bô•îßm∂e
)-1);

4000 #i‡!
	`deföed
(
DEFER_STRILE_LOAD
)

4001 i‡(
tif
->
tif_dú
.
td_n°rùs
 > 1) {

4002 
uöt32
 
°rù
;

4004 
tif
->
tif_dú
.
td_°rùbyãcou¡s‹ãd
 = 1;

4005 
°rù
 = 1; såù < 
tif
->
tif_dú
.
td_n°rùs
; strip++) {

4006 i‡(
tif
->
tif_dú
.
td_°rùoff£t
[
°rù
 - 1] >

4007 
tif
->
tif_dú
.
td_°rùoff£t
[
°rù
]) {

4008 
tif
->
tif_dú
.
td_°rùbyãcou¡s‹ãd
 = 0;

4018 (*
tif
->
tif_fixu±ags
)(tif);

4029 i‡((
tif
->
tif_dú
.
td_∂™¨c⁄fig
==
PLANARCONFIG_CONTIG
)&&

4030 (
tif
->
tif_dú
.
td_n°rùs
==1)&&

4031 (
tif
->
tif_dú
.
td_com¥essi⁄
==
COMPRESSION_NONE
)&&

4032 ((
tif
->
tif_Êags
&(
TIFF_STRIPCHOP
|
TIFF_ISTILED
))==TIFF_STRIPCHOP))

4034 i‡–!
	`_TIFFFûlSåûes
(
tif
Ë|| !tif->
tif_dú
.
td_°rùbyãcou¡
 )

4036 
	`Ch›UpSögÀUncom¥es£dSåù
(
tif
);

4042 
tif
->
tif_Êags
 &~
TIFF_DIRTYDIRECT
;

4043 
tif
->
tif_Êags
 &~
TIFF_DIRTYSTRIP
;

4048 
tif
->
tif_row
 = (
uöt32
) -1;

4049 
tif
->
tif_cur°rù
 = (
uöt32
) -1;

4050 
tif
->
tif_cﬁ
 = (
uöt32
) -1;

4051 
tif
->
tif_cuπûe
 = (
uöt32
) -1;

4052 
tif
->
tif_tûesize
 = (
tmsize_t
) -1;

4054 
tif
->
tif_sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(tif);

4055 i‡(!
tif
->
tif_sˇ∆öesize
) {

4056 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4061 i‡(
	`isTûed
(
tif
)) {

4062 
tif
->
tif_tûesize
 = 
	`TIFFTûeSize
(tif);

4063 i‡(!
tif
->
tif_tûesize
) {

4064 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4069 i‡(!
	`TIFFSåùSize
(
tif
)) {

4070 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4076 
bad
:

4077 i‡(
dú
)

4078 
	`_TIFF‰ì
(
dú
);

4080 
	}
}

4083 
	$TIFFRódDúe˘‹yCheckOrdî
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
dúcou¡
)

4085 c⁄° 
moduÀ
[] = "TIFFReadDirectoryCheckOrder";

4086 
uöt16
 
m
;

4087 
uöt16
 
n
;

4088 
TIFFDúE¡ry
* 
o
;

4089 
m
=0;

4090 
n
=0, 
o
=
dú
;Ç<
dúcou¡
;Ç++, o++)

4092 i‡(
o
->
tdú_èg
<
m
)

4094 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

4098 
m
=
o
->
tdú_èg
+1;

4100 
	}
}

4102 
TIFFDúE¡ry
*

4103 
	$TIFFRódDúe˘‹yFödE¡ry
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
dúcou¡
, uöt16 
ègid
)

4105 
TIFFDúE¡ry
* 
m
;

4106 
uöt16
 
n
;

4107 (Ë
tif
;

4108 
m
=
dú
, 
n
=0;Ç<
dúcou¡
; m++,Ç++)

4110 i‡(
m
->
tdú_èg
==
ègid
)

4111 (
m
);

4114 
	}
}

4117 
	$TIFFRódDúe˘‹yFödFõldInfo
(
TIFF
* 
tif
, 
uöt16
 
ègid
, 
uöt32
* 
fii
)

4119 
öt32
 
ma
,
mb
,
mc
;

4120 
ma
=-1;

4121 
mc
=(
öt32
)
tif
->
tif_nfõlds
;

4124 i‡(
ma
+1==
mc
)

4126 *
fii
 = 
FAILED_FII
;

4129 
mb
=(
ma
+
mc
)/2;

4130 i‡(
tif
->
tif_fõlds
[
mb
]->
fõld_èg
==(
uöt32
)
ègid
)

4132 i‡(
tif
->
tif_fõlds
[
mb
]->
fõld_èg
<(
uöt32
)
ègid
)

4133 
ma
=
mb
;

4135 
mc
=
mb
;

4139 i‡(
mb
==0)

4141 i‡(
tif
->
tif_fõlds
[
mb
-1]->
fõld_èg
!=(
uöt32
)
ègid
)

4143 
mb
--;

4145 *
fii
=
mb
;

4146 
	}
}

4153 
	$TIFFRódCu°omDúe˘‹y
(
TIFF
* 
tif
, 
toff_t
 
dúoff
,

4154 c⁄° 
TIFFFõldAºay
* 
öfﬂºay
)

4156 c⁄° 
moduÀ
[] = "TIFFReadCustomDirectory";

4157 
TIFFDúE¡ry
* 
dú
;

4158 
uöt16
 
dúcou¡
;

4159 
TIFFDúE¡ry
* 
dp
;

4160 
uöt16
 
di
;

4161 c⁄° 
TIFFFõld
* 
fù
;

4162 
uöt32
 
fii
;

4163 
	`_TIFFSëupFõlds
(
tif
, 
öfﬂºay
);

4164 
dúcou¡
=
	`TIFFFëchDúe˘‹y
(
tif
,
dúoff
,&
dú
,
NULL
);

4165 i‡(!
dúcou¡
)

4167 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

4168 "FaûedÅÿªad cu°om dúe˘‹yáàoff£à" 
TIFF_UINT64_FORMAT
,
dúoff
);

4171 
	`TIFFFªeDúe˘‹y
(
tif
);

4172 
	`_TIFFmem£t
(&
tif
->
tif_dú
, 0, (
TIFFDúe˘‹y
));

4173 
	`TIFFRódDúe˘‹yCheckOrdî
(
tif
,
dú
,
dúcou¡
);

4174 
di
=0, 
dp
=
dú
; di<
dúcou¡
; di++, dp++)

4176 
	`TIFFRódDúe˘‹yFödFõldInfo
(
tif
,
dp
->
tdú_èg
,&
fii
);

4177 i‡(
fii
 =
FAILED_FII
)

4179 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4181 
dp
->
tdú_èg
, dp->tdir_tag);

4182 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
	`_TIFFCª©eAn⁄Fõld
(tif,

4183 
dp
->
tdú_èg
,

4184 (
TIFFD©aTy≥
Ë
dp
->
tdú_ty≥
),

4186 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4188 
dp
->
tdú_èg
, dp->tdir_tag);

4189 
dp
->
tdú_èg
=
IGNORE
;

4191 
	`TIFFRódDúe˘‹yFödFõldInfo
(
tif
,
dp
->
tdú_èg
,&
fii
);

4192 
	`as£π
–
fii
 !
FAILED_FII
 );

4195 i‡(
dp
->
tdú_èg
!=
IGNORE
)

4197 
fù
=
tif
->
tif_fõlds
[
fii
];

4198 i‡(
fù
->
fõld_bô
==
FIELD_IGNORE
)

4199 
dp
->
tdú_èg
=
IGNORE
;

4203 (
fù
->
fõld_ty≥
!=
TIFF_ANY
)&&(fù->fõld_ty≥!=
dp
->
tdú_ty≥
))

4205 
fii
++;

4206 i‡((
fii
==
tif
->
tif_nfõlds
)||

4207 (
tif
->
tif_fõlds
[
fii
]->
fõld_èg
!=(
uöt32
)
dp
->
tdú_èg
))

4209 
fii
=0xFFFF;

4212 
fù
=
tif
->
tif_fõlds
[
fii
];

4214 i‡(
fii
==0xFFFF)

4216 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4218 
dp
->
tdú_ty≥
,
fù
->
fõld_«me
);

4219 
dp
->
tdú_èg
=
IGNORE
;

4224 i‡((
fù
->
fõld_ªadcou¡
!=
TIFF_VARIABLE
)&&

4225 (
fù
->
fõld_ªadcou¡
!=
TIFF_VARIABLE2
))

4227 
uöt32
 
ex≥˘ed
;

4228 i‡(
fù
->
fõld_ªadcou¡
==
TIFF_SPP
)

4229 
ex≥˘ed
=(
uöt32
)
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;

4231 
ex≥˘ed
=(
uöt32
)
fù
->
fõld_ªadcou¡
;

4232 i‡(!
	`CheckDúCou¡
(
tif
,
dp
,
ex≥˘ed
))

4233 
dp
->
tdú_èg
=
IGNORE
;

4237 
dp
->
tdú_èg
)

4239 
IGNORE
:

4241 
EXIFTAG_SUBJECTDISTANCE
:

4242 (Ë
	`TIFFFëchSubje˘Di°™˚
(
tif
,
dp
);

4245 (Ë
	`TIFFFëchN‹mÆTag
(
tif
, 
dp
, 
TRUE
);

4250 i‡(
dú
)

4251 
	`_TIFF‰ì
(
dú
);

4253 
	}
}

4260 
	$TIFFRódEXIFDúe˘‹y
(
TIFF
* 
tif
, 
toff_t
 
dúoff
)

4262 c⁄° 
TIFFFõldAºay
* 
exifFõldAºay
;

4263 
exifFõldAºay
 = 
	`_TIFFGëExifFõlds
();

4264  
	`TIFFRódCu°omDúe˘‹y
(
tif
, 
dúoff
, 
exifFõldAºay
);

4265 
	}
}

4268 
	$E°im©eSåùByãCou¡s
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
dúcou¡
)

4270 c⁄° 
moduÀ
[] = "EstimateStripByteCounts";

4272 
TIFFDúE¡ry
 *
dp
;

4273 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

4274 
uöt32
 
°rù
;

4276 
	`_TIFFFûlSåûes
–
tif
 );

4278 i‡(
td
->
td_°rùbyãcou¡
)

4279 
	`_TIFF‰ì
(
td
->
td_°rùbyãcou¡
);

4280 
td
->
td_°rùbyãcou¡
 = (
uöt64
*)

4281 
	`_TIFFCheckMÆloc
(
tif
, 
td
->
td_n°rùs
,  (
uöt64
),

4283 if–
td
->
td_°rùbyãcou¡
 =
NULL
 )

4286 i‡(
td
->
td_com¥essi⁄
 !
COMPRESSION_NONE
) {

4287 
uöt64
 
•a˚
;

4288 
uöt64
 
fûesize
;

4289 
uöt16
 
n
;

4290 
fûesize
 = 
	`TIFFGëFûeSize
(
tif
);

4291 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

4292 
•a˚
=(
TIFFHódîCœssic
)+2+
dúcou¡
*12+4;

4294 
•a˚
=(
TIFFHódîBig
)+8+
dúcou¡
*20+8;

4296 
dp
 = 
dú
, 
n
 = 
dúcou¡
;Ç > 0;Ç--, dp++)

4298 
uöt32
 
ty≥width
 = 
	`TIFFD©aWidth
((
TIFFD©aTy≥
Ë
dp
->
tdú_ty≥
);

4299 
uöt64
 
d©asize
;

4300 
ty≥width
 = 
	`TIFFD©aWidth
((
TIFFD©aTy≥
Ë
dp
->
tdú_ty≥
);

4301 i‡(
ty≥width
 == 0) {

4302 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4304 
dp
->
tdú_ty≥
);

4307 
d©asize
=(
uöt64
)
ty≥width
*
dp
->
tdú_cou¡
;

4308 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

4310 i‡(
d©asize
<=4)

4311 
d©asize
=0;

4315 i‡(
d©asize
<=8)

4316 
d©asize
=0;

4318 
•a˚
+=
d©asize
;

4320 
•a˚
 = 
fûesize
 - space;

4321 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
)

4322 
•a˚
 /
td
->
td_ßm∂e•îpixñ
;

4323 
°rù
 = 0; såù < 
td
->
td_n°rùs
; strip++)

4324 
td
->
td_°rùbyãcou¡
[
°rù
] = 
•a˚
;

4332 
°rù
--;

4333 i‡(
td
->
td_°rùoff£t
[
°rù
]+td->
td_°rùbyãcou¡
[°rù] > 
fûesize
)

4334 
td
->
td_°rùbyãcou¡
[
°rù
] = 
fûesize
 -Åd->
td_°rùoff£t
[strip];

4335 } i‡(
	`isTûed
(
tif
)) {

4336 
uöt64
 
byã•îtûe
 = 
	`TIFFTûeSize64
(
tif
);

4338 
°rù
 = 0; såù < 
td
->
td_n°rùs
; strip++)

4339 
td
->
td_°rùbyãcou¡
[
°rù
] = 
byã•îtûe
;

4341 
uöt64
 
rowbyãs
 = 
	`TIFFSˇ∆öeSize64
(
tif
);

4342 
uöt32
 
row•î°rù
 = 
td
->
td_imagñígth
/td->
td_°rù•îimage
;

4343 
°rù
 = 0; såù < 
td
->
td_n°rùs
; strip++)

4344 
td
->
td_°rùbyãcou¡
[
°rù
] = 
rowbyãs
 * 
row•î°rù
;

4346 
	`TIFFSëFõldBô
(
tif
, 
FIELD_STRIPBYTECOUNTS
);

4347 i‡(!
	`TIFFFõldSë
(
tif
, 
FIELD_ROWSPERSTRIP
))

4348 
td
->
td_row•î°rù
 =Åd->
td_imagñígth
;

4350 
	}
}

4353 
	$MissögRequúed
(
TIFF
* 
tif
, c⁄° * 
èg«me
)

4355 c⁄° 
moduÀ
[] = "MissingRequired";

4357 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4359 
èg«me
);

4360 
	}
}

4369 
	$TIFFCheckDúOff£t
(
TIFF
* 
tif
, 
uöt64
 
dúoff
)

4371 
uöt16
 
n
;

4373 i‡(
dúoff
 == 0)

4376 
n
 = 0;Ç < 
tif
->
tif_dúnumbî
 &&Åif->
tif_dúli°
;Ç++) {

4377 i‡(
tif
->
tif_dúli°
[
n
] =
dúoff
)

4381 
tif
->
tif_dúnumbî
++;

4383 i‡(
tif
->
tif_dúnumbî
 >Åif->
tif_dúli°size
) {

4384 
uöt64
* 
√w_dúli°
;

4390 
√w_dúli°
 = (
uöt64
*)
	`_TIFFCheckRóŒoc
(
tif
,Åif->
tif_dúli°
,

4391 
tif
->
tif_dúnumbî
, 2 * (
uöt64
), "for IFDÜist");

4392 i‡(!
√w_dúli°
)

4394 
tif
->
tif_dúli°size
 = 2 *Åif->
tif_dúnumbî
;

4395 
tif
->
tif_dúli°
 = 
√w_dúli°
;

4398 
tif
->
tif_dúli°
[tif->
tif_dúnumbî
 - 1] = 
dúoff
;

4401 
	}
}

4408 
	$CheckDúCou¡
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
cou¡
)

4410 i‡((
uöt64
)
cou¡
 > 
dú
->
tdú_cou¡
) {

4411 c⁄° 
TIFFFõld
* 
fù
 = 
	`TIFFFõldWôhTag
(
tif
, 
dú
->
tdú_èg
);

4412 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

4413 "öc‹ª˘ cou¡ f‹ fõld \"%s\" (" 
TIFF_UINT64_FORMAT
 ",Éxpecting %u);Åag ignored",

4414 
fù
 ? fù->
fõld_«me
 : "unknownÅagname",

4415 
dú
->
tdú_cou¡
, 
cou¡
);

4417 } i‡((
uöt64
)
cou¡
 < 
dú
->
tdú_cou¡
) {

4418 c⁄° 
TIFFFõld
* 
fù
 = 
	`TIFFFõldWôhTag
(
tif
, 
dú
->
tdú_èg
);

4419 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

4420 "öc‹ª˘ cou¡ f‹ fõld \"%s\" (" 
TIFF_UINT64_FORMAT
 ",Éxpecting %u);ÅagÅrimmed",

4421 
fù
 ? fù->
fõld_«me
 : "unknownÅagname",

4422 
dú
->
tdú_cou¡
, 
cou¡
);

4423 
dú
->
tdú_cou¡
 = 
cou¡
;

4427 
	}
}

4434 
uöt16


4435 
	$TIFFFëchDúe˘‹y
(
TIFF
* 
tif
, 
uöt64
 
dúoff
, 
TIFFDúE¡ry
** 
pdú
,

4436 
uöt64
 *
√xtdúoff
)

4438 c⁄° 
moduÀ
[] = "TIFFFetchDirectory";

4440 * 
‹igdú
;

4441 
uöt16
 
dúcou¡16
;

4442 
uöt32
 
dúsize
;

4443 
TIFFDúE¡ry
* 
dú
;

4444 
uöt8
* 
ma
;

4445 
TIFFDúE¡ry
* 
mb
;

4446 
uöt16
 
n
;

4448 
	`as£π
(
pdú
);

4450 
tif
->
tif_dúoff
 = 
dúoff
;

4451 i‡(
√xtdúoff
)

4452 *
√xtdúoff
 = 0;

4453 i‡(!
	`isM≠≥d
(
tif
)) {

4454 i‡(!
	`SìkOK
(
tif
,Åif->
tif_dúoff
)) {

4455 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4457 
tif
->
tif_«me
);

4460 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

4462 i‡(!
	`RódOK
(
tif
, &
dúcou¡16
,  (
uöt16
))) {

4463 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4465 
tif
->
tif_«me
);

4468 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

4469 
	`TIFFSwabSh‹t
(&
dúcou¡16
);

4470 i‡(
dúcou¡16
>4096)

4472 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4476 
dúsize
 = 12;

4478 
uöt64
 
dúcou¡64
;

4479 i‡(!
	`RódOK
(
tif
, &
dúcou¡64
,  (
uöt64
))) {

4480 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4482 
tif
->
tif_«me
);

4485 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

4486 
	`TIFFSwabL⁄g8
(&
dúcou¡64
);

4487 i‡(
dúcou¡64
>4096)

4489 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4493 
dúcou¡16
 = (
uöt16
)
dúcou¡64
;

4494 
dúsize
 = 20;

4496 
‹igdú
 = 
	`_TIFFCheckMÆloc
(
tif
, 
dúcou¡16
,

4497 
dúsize
, "toÑead TIFF directory");

4498 i‡(
‹igdú
 =
NULL
)

4500 i‡(!
	`RódOK
(
tif
, 
‹igdú
, (
tmsize_t
)(
dúcou¡16
*
dúsize
))) {

4501 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4503 
tif
->
tif_«me
);

4504 
	`_TIFF‰ì
(
‹igdú
);

4511 i‡(
√xtdúoff
)

4513 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

4515 
uöt32
 
√xtdúoff32
;

4516 i‡(!
	`RódOK
(
tif
, &
√xtdúoff32
, (
uöt32
)))

4517 
√xtdúoff32
 = 0;

4518 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

4519 
	`TIFFSwabL⁄g
(&
√xtdúoff32
);

4520 *
√xtdúoff
=
√xtdúoff32
;

4522 i‡(!
	`RódOK
(
tif
, 
√xtdúoff
, (
uöt64
)))

4523 *
√xtdúoff
 = 0;

4524 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

4525 
	`TIFFSwabL⁄g8
(
√xtdúoff
);

4529 
tmsize_t
 
m
;

4530 
tmsize_t
 
off
 = (tmsize_tË
tif
->
tif_dúoff
;

4531 i‡((
uöt64
)
off
!=
tif
->
tif_dúoff
)

4533 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"CanÇotÑead TIFF directory count");

4546 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

4548 
m
=
off
+(
uöt16
);

4549 i‡((
m
<
off
)||(m<(
tmsize_t
)(
uöt16
))||(m>
tif
->
tif_size
)) {

4550 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4554 
	`_TIFFmem˝y
(&
dúcou¡16
, 
tif
->
tif_ba£
 + 
off
,

4555 (
uöt16
));

4557 
off
 + (
uöt16
);

4558 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

4559 
	`TIFFSwabSh‹t
(&
dúcou¡16
);

4560 i‡(
dúcou¡16
>4096)

4562 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4566 
dúsize
 = 12;

4570 
tmsize_t
 
m
;

4571 
uöt64
 
dúcou¡64
;

4572 
m
=
off
+(
uöt64
);

4573 i‡((
m
<
off
)||(m<(
tmsize_t
)(
uöt64
))||(m>
tif
->
tif_size
)) {

4574 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4578 
	`_TIFFmem˝y
(&
dúcou¡64
, 
tif
->
tif_ba£
 + 
off
,

4579 (
uöt64
));

4581 
off
 + (
uöt64
);

4582 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

4583 
	`TIFFSwabL⁄g8
(&
dúcou¡64
);

4584 i‡(
dúcou¡64
>4096)

4586 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4590 
dúcou¡16
 = (
uöt16
)
dúcou¡64
;

4591 
dúsize
 = 20;

4593 i‡(
dúcou¡16
 == 0 )

4595 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4599 
‹igdú
 = 
	`_TIFFCheckMÆloc
(
tif
, 
dúcou¡16
,

4600 
dúsize
,

4602 i‡(
‹igdú
 =
NULL
)

4604 
m
=
off
+
dúcou¡16
*
dúsize
;

4605 i‡((
m
<
off
)||(m<(
tmsize_t
)(
dúcou¡16
*
dúsize
))||(m>
tif
->
tif_size
)) {

4606 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

4608 
	`_TIFF‰ì
(
‹igdú
);

4611 
	`_TIFFmem˝y
(
‹igdú
, 
tif
->
tif_ba£
 + 
off
,

4612 
dúcou¡16
 * 
dúsize
);

4614 i‡(
√xtdúoff
) {

4615 
off
 +
dúcou¡16
 * 
dúsize
;

4616 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

4618 
uöt32
 
√xtdúoff32
;

4619 
m
=
off
+(
uöt32
);

4620 i‡((
m
<
off
)||(m<(
tmsize_t
)(
uöt32
))||(m>
tif
->
tif_size
))

4621 
√xtdúoff32
 = 0;

4623 
	`_TIFFmem˝y
(&
√xtdúoff32
, 
tif
->
tif_ba£
 + 
off
,

4624  (
uöt32
));

4625 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

4626 
	`TIFFSwabL⁄g
(&
√xtdúoff32
);

4627 *
√xtdúoff
 = 
√xtdúoff32
;

4631 
m
=
off
+(
uöt64
);

4632 i‡((
m
<
off
)||(m<(
tmsize_t
)(
uöt64
))||(m>
tif
->
tif_size
))

4633 *
√xtdúoff
 = 0;

4635 
	`_TIFFmem˝y
(
√xtdúoff
, 
tif
->
tif_ba£
 + 
off
,

4636  (
uöt64
));

4637 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

4638 
	`TIFFSwabL⁄g8
(
√xtdúoff
);

4642 
dú
 = (
TIFFDúE¡ry
*)
	`_TIFFCheckMÆloc
(
tif
, 
dúcou¡16
,

4643 (
TIFFDúE¡ry
),

4645 i‡(
dú
==0)

4647 
	`_TIFF‰ì
(
‹igdú
);

4650 
ma
=(
uöt8
*)
‹igdú
;

4651 
mb
=
dú
;

4652 
n
=0;Ç<
dúcou¡16
;Ç++)

4654 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

4655 
	`TIFFSwabSh‹t
((
uöt16
*)
ma
);

4656 
mb
->
tdú_èg
=*(
uöt16
*)
ma
;

4657 
ma
+=(
uöt16
);

4658 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

4659 
	`TIFFSwabSh‹t
((
uöt16
*)
ma
);

4660 
mb
->
tdú_ty≥
=*(
uöt16
*)
ma
;

4661 
ma
+=(
uöt16
);

4662 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

4664 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

4665 
	`TIFFSwabL⁄g
((
uöt32
*)
ma
);

4666 
mb
->
tdú_cou¡
=(
uöt64
)(*(
uöt32
*)
ma
);

4667 
ma
+=(
uöt32
);

4668 *(
uöt32
*)(&
mb
->
tdú_off£t
)=*(uöt32*)
ma
;

4669 
ma
+=(
uöt32
);

4673 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

4674 
	`TIFFSwabL⁄g8
((
uöt64
*)
ma
);

4675 
mb
->
tdú_cou¡
=
	`TIFFRódUI¡64
(
ma
);

4676 
ma
+=(
uöt64
);

4677 
mb
->
tdú_off£t
.
toff_l⁄g8
=
	`TIFFRódUI¡64
(
ma
);

4678 
ma
+=(
uöt64
);

4680 
mb
++;

4682 
	`_TIFF‰ì
(
‹igdú
);

4683 *
pdú
 = 
dú
;

4684  
dúcou¡16
;

4685 
	}
}

4691 
	$TIFFFëchN‹mÆTag
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dp
, 
ªcovî
)

4693 c⁄° 
moduÀ
[] = "TIFFFetchNormalTag";

4694 
TIFFRódDúE¡ryEº
 
îr
;

4695 
uöt32
 
fii
;

4696 c⁄° 
TIFFFõld
* 
fù
 = 
NULL
;

4697 
	`TIFFRódDúe˘‹yFödFõldInfo
(
tif
,
dp
->
tdú_èg
,&
fii
);

4698 if–
fii
 =
FAILED_FII
 )

4700 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "TIFFFetchNormalTag",

4702 
dp
->
tdú_èg
);

4705 
fù
=
tif
->
tif_fõlds
[
fii
];

4706 
	`as£π
(
fù
->
£t_fõld_ty≥
!=
TIFF_SETGET_OTHER
);

4707 
	`as£π
(
fù
->
£t_fõld_ty≥
!=
TIFF_SETGET_INT
);

4708 
îr
=
TIFFRódDúE¡ryEºOk
;

4709 
fù
->
£t_fõld_ty≥
)

4711 
TIFF_SETGET_UNDEFINED
:

4713 
TIFF_SETGET_ASCII
:

4715 
uöt8
* 
d©a
;

4716 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4717 
îr
=
	`TIFFRódDúE¡ryByãAºay
(
tif
,
dp
,&
d©a
);

4718 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4720 
uöt8
* 
ma
;

4721 
uöt32
 
mb
;

4722 
n
;

4723 
ma
=
d©a
;

4724 
mb
=0;

4725 
mb
<(
uöt32
)
dp
->
tdú_cou¡
)

4727 i‡(*
ma
==0)

4729 
ma
++;

4730 
mb
++;

4732 i‡(
mb
+1<(
uöt32
)
dp
->
tdú_cou¡
)

4733 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"ASCII vÆuêf‹Åag \"%s\" c⁄èö†nuŒ byã i¿vÆue; vÆuêöc‹ª˘lyÅrunˇãd durögÑódög duêtÿim∂emíèti⁄Üimô©i⁄s",
fù
->
fõld_«me
);

4734 i‡(
mb
+1>(
uöt32
)
dp
->
tdú_cou¡
)

4736 
uöt8
* 
o
;

4737 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"ASCII vÆuêf‹Åag \"%s\" d€†nŸÉnd i¿nuŒ byã",
fù
->
fõld_«me
);

4738 i‡((
uöt32
)
dp
->
tdú_cou¡
+1!=dp->tdir_count+1)

4739 
o
=
NULL
;

4741 
o
=
	`_TIFFmÆloc
((
uöt32
)
dp
->
tdú_cou¡
+1);

4742 i‡(
o
==
NULL
)

4744 i‡(
d©a
!=
NULL
)

4745 
	`_TIFF‰ì
(
d©a
);

4748 
	`_TIFFmem˝y
(
o
,
d©a
,(
uöt32
)
dp
->
tdú_cou¡
);

4749 
o
[(
uöt32
)
dp
->
tdú_cou¡
]=0;

4750 i‡(
d©a
!=0)

4751 
	`_TIFF‰ì
(
d©a
);

4752 
d©a
=
o
;

4754 
n
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
);

4755 i‡(
d©a
!=0)

4756 
	`_TIFF‰ì
(
d©a
);

4757 i‡(!
n
)

4762 
TIFF_SETGET_UINT8
:

4764 
uöt8
 
d©a
;

4765 
	`as£π
(
fù
->
fõld_ªadcou¡
==1);

4766 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4767 
îr
=
	`TIFFRódDúE¡ryByã
(
tif
,
dp
,&
d©a
);

4768 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4770 i‡(!
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
))

4775 
TIFF_SETGET_UINT16
:

4777 
uöt16
 
d©a
;

4778 
	`as£π
(
fù
->
fõld_ªadcou¡
==1);

4779 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4780 
îr
=
	`TIFFRódDúE¡rySh‹t
(
tif
,
dp
,&
d©a
);

4781 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4783 i‡(!
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
))

4788 
TIFF_SETGET_UINT32
:

4790 
uöt32
 
d©a
;

4791 
	`as£π
(
fù
->
fõld_ªadcou¡
==1);

4792 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4793 
îr
=
	`TIFFRódDúE¡ryL⁄g
(
tif
,
dp
,&
d©a
);

4794 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4796 i‡(!
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
))

4801 
TIFF_SETGET_UINT64
:

4803 
uöt64
 
d©a
;

4804 
	`as£π
(
fù
->
fõld_ªadcou¡
==1);

4805 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4806 
îr
=
	`TIFFRódDúE¡ryL⁄g8
(
tif
,
dp
,&
d©a
);

4807 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4809 i‡(!
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
))

4814 
TIFF_SETGET_FLOAT
:

4816 
d©a
;

4817 
	`as£π
(
fù
->
fõld_ªadcou¡
==1);

4818 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4819 
îr
=
	`TIFFRódDúE¡ryFlﬂt
(
tif
,
dp
,&
d©a
);

4820 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4822 i‡(!
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
))

4827 
TIFF_SETGET_DOUBLE
:

4829 
d©a
;

4830 
	`as£π
(
fù
->
fõld_ªadcou¡
==1);

4831 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4832 
îr
=
	`TIFFRódDúE¡ryDoubÀ
(
tif
,
dp
,&
d©a
);

4833 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4835 i‡(!
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
))

4840 
TIFF_SETGET_IFD8
:

4842 
uöt64
 
d©a
;

4843 
	`as£π
(
fù
->
fõld_ªadcou¡
==1);

4844 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4845 
îr
=
	`TIFFRódDúE¡ryIfd8
(
tif
,
dp
,&
d©a
);

4846 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4848 i‡(!
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
))

4853 
TIFF_SETGET_UINT16_PAIR
:

4855 
uöt16
* 
d©a
;

4856 
	`as£π
(
fù
->
fõld_ªadcou¡
==2);

4857 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4858 i‡(
dp
->
tdú_cou¡
!=2)

4860 
îr
=
	`TIFFRódDúE¡rySh‹tAºay
(
tif
,
dp
,&
d©a
);

4861 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4863 
m
;

4864 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
[0],data[1]);

4865 
	`_TIFF‰ì
(
d©a
);

4866 i‡(!
m
)

4871 
TIFF_SETGET_C0_UINT8
:

4873 
uöt8
* 
d©a
;

4874 
	`as£π
(
fù
->
fõld_ªadcou¡
>=1);

4875 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4876 i‡(
dp
->
tdú_cou¡
!=(
uöt64
)
fù
->
fõld_ªadcou¡
)

4880 
îr
=
	`TIFFRódDúE¡ryByãAºay
(
tif
,
dp
,&
d©a
);

4881 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4883 
m
;

4884 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
);

4885 i‡(
d©a
!=0)

4886 
	`_TIFF‰ì
(
d©a
);

4887 i‡(!
m
)

4893 
TIFF_SETGET_C0_UINT16
:

4895 
uöt16
* 
d©a
;

4896 
	`as£π
(
fù
->
fõld_ªadcou¡
>=1);

4897 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4898 i‡(
dp
->
tdú_cou¡
!=(
uöt64
)
fù
->
fõld_ªadcou¡
)

4902 
îr
=
	`TIFFRódDúE¡rySh‹tAºay
(
tif
,
dp
,&
d©a
);

4903 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4905 
m
;

4906 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
);

4907 i‡(
d©a
!=0)

4908 
	`_TIFF‰ì
(
d©a
);

4909 i‡(!
m
)

4915 
TIFF_SETGET_C0_UINT32
:

4917 
uöt32
* 
d©a
;

4918 
	`as£π
(
fù
->
fõld_ªadcou¡
>=1);

4919 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4920 i‡(
dp
->
tdú_cou¡
!=(
uöt64
)
fù
->
fõld_ªadcou¡
)

4924 
îr
=
	`TIFFRódDúE¡ryL⁄gAºay
(
tif
,
dp
,&
d©a
);

4925 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4927 
m
;

4928 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
);

4929 i‡(
d©a
!=0)

4930 
	`_TIFF‰ì
(
d©a
);

4931 i‡(!
m
)

4937 
TIFF_SETGET_C0_FLOAT
:

4939 * 
d©a
;

4940 
	`as£π
(
fù
->
fõld_ªadcou¡
>=1);

4941 
	`as£π
(
fù
->
fõld_∑sscou¡
==0);

4942 i‡(
dp
->
tdú_cou¡
!=(
uöt64
)
fù
->
fõld_ªadcou¡
)

4946 
îr
=
	`TIFFRódDúE¡ryFlﬂtAºay
(
tif
,
dp
,&
d©a
);

4947 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4949 
m
;

4950 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,
d©a
);

4951 i‡(
d©a
!=0)

4952 
	`_TIFF‰ì
(
d©a
);

4953 i‡(!
m
)

4959 
TIFF_SETGET_C16_ASCII
:

4961 
uöt8
* 
d©a
;

4962 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE
);

4963 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

4964 i‡(
dp
->
tdú_cou¡
>0xFFFF)

4965 
îr
=
TIFFRódDúE¡ryEºCou¡
;

4968 
îr
=
	`TIFFRódDúE¡ryByãAºay
(
tif
,
dp
,&
d©a
);

4969 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4971 
m
;

4972 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt16
)(dp->
tdú_cou¡
),
d©a
);

4973 i‡(
d©a
!=0)

4974 
	`_TIFF‰ì
(
d©a
);

4975 i‡(!
m
)

4981 
TIFF_SETGET_C16_UINT8
:

4983 
uöt8
* 
d©a
;

4984 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE
);

4985 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

4986 i‡(
dp
->
tdú_cou¡
>0xFFFF)

4987 
îr
=
TIFFRódDúE¡ryEºCou¡
;

4990 
îr
=
	`TIFFRódDúE¡ryByãAºay
(
tif
,
dp
,&
d©a
);

4991 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

4993 
m
;

4994 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt16
)(dp->
tdú_cou¡
),
d©a
);

4995 i‡(
d©a
!=0)

4996 
	`_TIFF‰ì
(
d©a
);

4997 i‡(!
m
)

5003 
TIFF_SETGET_C16_UINT16
:

5005 
uöt16
* 
d©a
;

5006 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE
);

5007 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5008 i‡(
dp
->
tdú_cou¡
>0xFFFF)

5009 
îr
=
TIFFRódDúE¡ryEºCou¡
;

5012 
îr
=
	`TIFFRódDúE¡rySh‹tAºay
(
tif
,
dp
,&
d©a
);

5013 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5015 
m
;

5016 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt16
)(dp->
tdú_cou¡
),
d©a
);

5017 i‡(
d©a
!=0)

5018 
	`_TIFF‰ì
(
d©a
);

5019 i‡(!
m
)

5025 
TIFF_SETGET_C16_UINT32
:

5027 
uöt32
* 
d©a
;

5028 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE
);

5029 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5030 i‡(
dp
->
tdú_cou¡
>0xFFFF)

5031 
îr
=
TIFFRódDúE¡ryEºCou¡
;

5034 
îr
=
	`TIFFRódDúE¡ryL⁄gAºay
(
tif
,
dp
,&
d©a
);

5035 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5037 
m
;

5038 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt16
)(dp->
tdú_cou¡
),
d©a
);

5039 i‡(
d©a
!=0)

5040 
	`_TIFF‰ì
(
d©a
);

5041 i‡(!
m
)

5047 
TIFF_SETGET_C16_UINT64
:

5049 
uöt64
* 
d©a
;

5050 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE
);

5051 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5052 i‡(
dp
->
tdú_cou¡
>0xFFFF)

5053 
îr
=
TIFFRódDúE¡ryEºCou¡
;

5056 
îr
=
	`TIFFRódDúE¡ryL⁄g8Aºay
(
tif
,
dp
,&
d©a
);

5057 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5059 
m
;

5060 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt16
)(dp->
tdú_cou¡
),
d©a
);

5061 i‡(
d©a
!=0)

5062 
	`_TIFF‰ì
(
d©a
);

5063 i‡(!
m
)

5069 
TIFF_SETGET_C16_FLOAT
:

5071 * 
d©a
;

5072 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE
);

5073 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5074 i‡(
dp
->
tdú_cou¡
>0xFFFF)

5075 
îr
=
TIFFRódDúE¡ryEºCou¡
;

5078 
îr
=
	`TIFFRódDúE¡ryFlﬂtAºay
(
tif
,
dp
,&
d©a
);

5079 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5081 
m
;

5082 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt16
)(dp->
tdú_cou¡
),
d©a
);

5083 i‡(
d©a
!=0)

5084 
	`_TIFF‰ì
(
d©a
);

5085 i‡(!
m
)

5091 
TIFF_SETGET_C16_DOUBLE
:

5093 * 
d©a
;

5094 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE
);

5095 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5096 i‡(
dp
->
tdú_cou¡
>0xFFFF)

5097 
îr
=
TIFFRódDúE¡ryEºCou¡
;

5100 
îr
=
	`TIFFRódDúE¡ryDoubÀAºay
(
tif
,
dp
,&
d©a
);

5101 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5103 
m
;

5104 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt16
)(dp->
tdú_cou¡
),
d©a
);

5105 i‡(
d©a
!=0)

5106 
	`_TIFF‰ì
(
d©a
);

5107 i‡(!
m
)

5113 
TIFF_SETGET_C16_IFD8
:

5115 
uöt64
* 
d©a
;

5116 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE
);

5117 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5118 i‡(
dp
->
tdú_cou¡
>0xFFFF)

5119 
îr
=
TIFFRódDúE¡ryEºCou¡
;

5122 
îr
=
	`TIFFRódDúE¡ryIfd8Aºay
(
tif
,
dp
,&
d©a
);

5123 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5125 
m
;

5126 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt16
)(dp->
tdú_cou¡
),
d©a
);

5127 i‡(
d©a
!=0)

5128 
	`_TIFF‰ì
(
d©a
);

5129 i‡(!
m
)

5135 
TIFF_SETGET_C32_ASCII
:

5137 
uöt8
* 
d©a
;

5138 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5139 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5140 
îr
=
	`TIFFRódDúE¡ryByãAºay
(
tif
,
dp
,&
d©a
);

5141 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5143 
m
;

5144 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5145 i‡(
d©a
!=0)

5146 
	`_TIFF‰ì
(
d©a
);

5147 i‡(!
m
)

5152 
TIFF_SETGET_C32_UINT8
:

5154 
uöt8
* 
d©a
;

5155 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5156 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5157 
îr
=
	`TIFFRódDúE¡ryByãAºay
(
tif
,
dp
,&
d©a
);

5158 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5160 
m
;

5161 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5162 i‡(
d©a
!=0)

5163 
	`_TIFF‰ì
(
d©a
);

5164 i‡(!
m
)

5169 
TIFF_SETGET_C32_SINT8
:

5171 
öt8
* 
d©a
 = 
NULL
;

5172 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5173 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5174 
îr
=
	`TIFFRódDúE¡rySbyãAºay
(
tif
,
dp
,&
d©a
);

5175 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5177 
m
;

5178 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5179 i‡(
d©a
!=0)

5180 
	`_TIFF‰ì
(
d©a
);

5181 i‡(!
m
)

5186 
TIFF_SETGET_C32_UINT16
:

5188 
uöt16
* 
d©a
;

5189 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5190 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5191 
îr
=
	`TIFFRódDúE¡rySh‹tAºay
(
tif
,
dp
,&
d©a
);

5192 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5194 
m
;

5195 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5196 i‡(
d©a
!=0)

5197 
	`_TIFF‰ì
(
d©a
);

5198 i‡(!
m
)

5203 
TIFF_SETGET_C32_SINT16
:

5205 
öt16
* 
d©a
 = 
NULL
;

5206 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5207 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5208 
îr
=
	`TIFFRódDúE¡rySsh‹tAºay
(
tif
,
dp
,&
d©a
);

5209 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5211 
m
;

5212 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5213 i‡(
d©a
!=0)

5214 
	`_TIFF‰ì
(
d©a
);

5215 i‡(!
m
)

5220 
TIFF_SETGET_C32_UINT32
:

5222 
uöt32
* 
d©a
;

5223 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5224 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5225 
îr
=
	`TIFFRódDúE¡ryL⁄gAºay
(
tif
,
dp
,&
d©a
);

5226 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5228 
m
;

5229 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5230 i‡(
d©a
!=0)

5231 
	`_TIFF‰ì
(
d©a
);

5232 i‡(!
m
)

5237 
TIFF_SETGET_C32_SINT32
:

5239 
öt32
* 
d©a
 = 
NULL
;

5240 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5241 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5242 
îr
=
	`TIFFRódDúE¡rySl⁄gAºay
(
tif
,
dp
,&
d©a
);

5243 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5245 
m
;

5246 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5247 i‡(
d©a
!=0)

5248 
	`_TIFF‰ì
(
d©a
);

5249 i‡(!
m
)

5254 
TIFF_SETGET_C32_UINT64
:

5256 
uöt64
* 
d©a
;

5257 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5258 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5259 
îr
=
	`TIFFRódDúE¡ryL⁄g8Aºay
(
tif
,
dp
,&
d©a
);

5260 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5262 
m
;

5263 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5264 i‡(
d©a
!=0)

5265 
	`_TIFF‰ì
(
d©a
);

5266 i‡(!
m
)

5271 
TIFF_SETGET_C32_SINT64
:

5273 
öt64
* 
d©a
 = 
NULL
;

5274 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5275 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5276 
îr
=
	`TIFFRódDúE¡rySl⁄g8Aºay
(
tif
,
dp
,&
d©a
);

5277 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5279 
m
;

5280 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5281 i‡(
d©a
!=0)

5282 
	`_TIFF‰ì
(
d©a
);

5283 i‡(!
m
)

5288 
TIFF_SETGET_C32_FLOAT
:

5290 * 
d©a
;

5291 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5292 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5293 
îr
=
	`TIFFRódDúE¡ryFlﬂtAºay
(
tif
,
dp
,&
d©a
);

5294 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5296 
m
;

5297 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5298 i‡(
d©a
!=0)

5299 
	`_TIFF‰ì
(
d©a
);

5300 i‡(!
m
)

5305 
TIFF_SETGET_C32_DOUBLE
:

5307 * 
d©a
;

5308 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5309 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5310 
îr
=
	`TIFFRódDúE¡ryDoubÀAºay
(
tif
,
dp
,&
d©a
);

5311 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5313 
m
;

5314 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5315 i‡(
d©a
!=0)

5316 
	`_TIFF‰ì
(
d©a
);

5317 i‡(!
m
)

5322 
TIFF_SETGET_C32_IFD8
:

5324 
uöt64
* 
d©a
;

5325 
	`as£π
(
fù
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

5326 
	`as£π
(
fù
->
fõld_∑sscou¡
==1);

5327 
îr
=
	`TIFFRódDúE¡ryIfd8Aºay
(
tif
,
dp
,&
d©a
);

5328 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5330 
m
;

5331 
m
=
	`TIFFSëFõld
(
tif
,
dp
->
tdú_èg
,(
uöt32
)(dp->
tdú_cou¡
),
d©a
);

5332 i‡(
d©a
!=0)

5333 
	`_TIFF‰ì
(
d©a
);

5334 i‡(!
m
)

5340 
	`as£π
(0);

5343 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

5345 
	`TIFFRódDúE¡ryOuçutEº
(
tif
,
îr
,
moduÀ
,
fù
 ? fù->
fõld_«me
 : "unknow¿èg«me",
ªcovî
);

5349 
	}
}

5356 
	$TIFFFëchSåùThög
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
, 
uöt32
 
n°rùs
, 
uöt64
** 
Õp
)

5358 c⁄° 
moduÀ
[] = "TIFFFetchStripThing";

5359 
TIFFRódDúE¡ryEº
 
îr
;

5360 
uöt64
* 
d©a
;

5361 
îr
=
	`TIFFRódDúE¡ryL⁄g8Aºay
(
tif
,
dú
,&
d©a
);

5362 i‡(
îr
!=
TIFFRódDúE¡ryEºOk
)

5364 c⁄° 
TIFFFõld
* 
fù
 = 
	`TIFFFõldWôhTag
(
tif
,
dú
->
tdú_èg
);

5365 
	`TIFFRódDúE¡ryOuçutEº
(
tif
,
îr
,
moduÀ
,
fù
 ? fù->
fõld_«me
 : "unknownÅagname",0);

5368 i‡(
dú
->
tdú_cou¡
!=(
uöt64
)
n°rùs
)

5370 
uöt64
* 
ªsizedd©a
;

5371 
ªsizedd©a
=(
uöt64
*)
	`_TIFFCheckMÆloc
(
tif
,
n°rùs
,(uint64),"for stripárray");

5372 i‡(
ªsizedd©a
==0) {

5373 
	`_TIFF‰ì
(
d©a
);

5376 i‡(
dú
->
tdú_cou¡
<(
uöt64
)
n°rùs
)

5378 
	`_TIFFmem˝y
(
ªsizedd©a
,
d©a
,(
uöt32
)
dú
->
tdú_cou¡
*(
uöt64
));

5379 
	`_TIFFmem£t
(
ªsizedd©a
+(
uöt32
)
dú
->
tdú_cou¡
,0,(
n°rùs
-(uöt32)dú->tdú_cou¡)*(
uöt64
));

5382 
	`_TIFFmem˝y
(
ªsizedd©a
,
d©a
,
n°rùs
*(
uöt64
));

5383 
	`_TIFF‰ì
(
d©a
);

5384 
d©a
=
ªsizedd©a
;

5386 *
Õp
=
d©a
;

5388 
	}
}

5394 
	$TIFFFëchSubje˘Di°™˚
(
TIFF
* 
tif
, 
TIFFDúE¡ry
* 
dú
)

5396 c⁄° 
moduÀ
[] = "TIFFFetchSubjectDistance";

5397 
TIFFRódDúE¡ryEº
 
îr
;

5398 
UI¡64Alig√d_t
 
m
;

5399 
m
.
l
=0;

5400 
	`as£π
(()==8);

5401 
	`as£π
((
uöt64
)==8);

5402 
	`as£π
((
uöt32
)==4);

5403 i‡(
dú
->
tdú_cou¡
!=1)

5404 
îr
=
TIFFRódDúE¡ryEºCou¡
;

5405 i‡(
dú
->
tdú_ty≥
!=
TIFF_RATIONAL
)

5406 
îr
=
TIFFRódDúE¡ryEºTy≥
;

5409 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

5411 
uöt32
 
off£t
;

5412 
off£t
=*(
uöt32
*)(&
dú
->
tdú_off£t
);

5413 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

5414 
	`TIFFSwabL⁄g
(&
off£t
);

5415 
îr
=
	`TIFFRódDúE¡ryD©a
(
tif
,
off£t
,8,
m
.
i
);

5419 
m
.
l
=
dú
->
tdú_off£t
.
toff_l⁄g8
;

5420 
îr
=
TIFFRódDúE¡ryEºOk
;

5423 i‡(
îr
==
TIFFRódDúE¡ryEºOk
)

5425 
n
;

5426 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

5427 
	`TIFFSwabAºayOfL⁄g
(
m
.
i
,2);

5428 i‡(
m
.
i
[0]==0)

5429 
n
=0.0;

5430 i‡(
m
.
i
[0]==0xFFFFFFFF)

5436 
n
=-1.0;

5438 
n
=()
m
.
i
[0]/()m.i[1];

5439 (
	`TIFFSëFõld
(
tif
,
dú
->
tdú_èg
,
n
));

5443 
	`TIFFRódDúE¡ryOuçutEº
(
tif
,
îr
,
moduÀ
,"Subje˘Di°™˚",
TRUE
);

5446 
	}
}

5455 
	$Ch›UpSögÀUncom¥es£dSåù
(
TIFF
* 
tif
)

5457 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

5458 
uöt64
 
byãcou¡
;

5459 
uöt64
 
off£t
;

5460 
uöt32
 
rowblock
;

5461 
uöt64
 
rowblockbyãs
;

5462 
uöt64
 
°rùbyãs
;

5463 
uöt32
 
°rù
;

5464 
uöt64
 
n°rùs64
;

5465 
uöt32
 
n°rùs32
;

5466 
uöt32
 
row•î°rù
;

5467 
uöt64
* 
√wcou¡s
;

5468 
uöt64
* 
√woff£ts
;

5470 
byãcou¡
 = 
td
->
td_°rùbyãcou¡
[0];

5471 
off£t
 = 
td
->
td_°rùoff£t
[0];

5472 
	`as£π
(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
);

5473 i‡((
td
->
td_phŸomëric
 =
PHOTOMETRIC_YCBCR
)&&

5474 (!
	`isUpSam∂ed
(
tif
)))

5475 
rowblock
 = 
td
->
td_ycb¸subßm∂ög
[1];

5477 
rowblock
 = 1;

5478 
rowblockbyãs
 = 
	`TIFFVTûeSize64
(
tif
, 
rowblock
);

5483 i‡(
rowblockbyãs
 > 
STRIP_SIZE_DEFAULT
) {

5484 
°rùbyãs
 = 
rowblockbyãs
;

5485 
row•î°rù
 = 
rowblock
;

5486 } i‡(
rowblockbyãs
 > 0 ) {

5487 
uöt32
 
rowblock•î°rù
;

5488 
rowblock•î°rù
 = (
uöt32
Ë(
STRIP_SIZE_DEFAULT
 / 
rowblockbyãs
);

5489 
row•î°rù
 = 
rowblock•î°rù
 * 
rowblock
;

5490 
°rùbyãs
 = 
rowblock•î°rù
 * 
rowblockbyãs
;

5498 i‡(
row•î°rù
 >
td
->
td_row•î°rù
)

5500 
n°rùs64
 = 
	`TIFFhowm™y_64
(
byãcou¡
, 
°rùbyãs
);

5501 i‡((
n°rùs64
==0)||(nstrips64>0xFFFFFFFF))

5503 
n°rùs32
 = (
uöt32
)
n°rùs64
;

5505 
√wcou¡s
 = (
uöt64
*Ë
	`_TIFFCheckMÆloc
(
tif
, 
n°rùs32
,  (uint64),

5507 
√woff£ts
 = (
uöt64
*Ë
	`_TIFFCheckMÆloc
(
tif
, 
n°rùs32
,  (uint64),

5509 i‡(
√wcou¡s
 =
NULL
 || 
√woff£ts
 == NULL) {

5514 i‡(
√wcou¡s
 !
NULL
)

5515 
	`_TIFF‰ì
(
√wcou¡s
);

5516 i‡(
√woff£ts
 !
NULL
)

5517 
	`_TIFF‰ì
(
√woff£ts
);

5524 
°rù
 = 0; såù < 
n°rùs32
; strip++) {

5525 i‡(
°rùbyãs
 > 
byãcou¡
)

5526 
°rùbyãs
 = 
byãcou¡
;

5527 
√wcou¡s
[
°rù
] = 
°rùbyãs
;

5528 
√woff£ts
[
°rù
] = 
off£t
;

5529 
off£t
 +
°rùbyãs
;

5530 
byãcou¡
 -
°rùbyãs
;

5535 
td
->
td_°rù•îimage
 =Åd->
td_n°rùs
 = 
n°rùs32
;

5536 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

5538 
	`_TIFF‰ì
(
td
->
td_°rùbyãcou¡
);

5539 
	`_TIFF‰ì
(
td
->
td_°rùoff£t
);

5540 
td
->
td_°rùbyãcou¡
 = 
√wcou¡s
;

5541 
td
->
td_°rùoff£t
 = 
√woff£ts
;

5542 
td
->
td_°rùbyãcou¡s‹ãd
 = 1;

5543 
	}
}

5545 
	$_TIFFFûlSåûes
–
TIFF
 *
tif
 )

5547 #i‡
	`deföed
(
DEFER_STRILE_LOAD
)

5548 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

5549 
ªtu∫_vÆue
 = 1;

5551 if–
td
->
td_°rùoff£t
 !
NULL
 )

5554 if–
td
->
td_°rùoff£t_íåy
.
tdú_cou¡
 == 0 )

5557 i‡(!
	`TIFFFëchSåùThög
(
tif
,&(
td
->
td_°rùoff£t_íåy
),

5558 
td
->
td_n°rùs
,&td->
td_°rùoff£t
))

5560 
ªtu∫_vÆue
 = 0;

5563 i‡(!
	`TIFFFëchSåùThög
(
tif
,&(
td
->
td_°rùbyãcou¡_íåy
),

5564 
td
->
td_n°rùs
,&td->
td_°rùbyãcou¡
))

5566 
ªtu∫_vÆue
 = 0;

5569 
	`_TIFFmem£t
–&(
td
->
td_°rùoff£t_íåy
), 0, (
TIFFDúE¡ry
));

5570 
	`_TIFFmem£t
–&(
td
->
td_°rùbyãcou¡_íåy
), 0, (
TIFFDúE¡ry
));

5572 i‡(
tif
->
tif_dú
.
td_n°rùs
 > 1 && 
ªtu∫_vÆue
 == 1 ) {

5573 
uöt32
 
°rù
;

5575 
tif
->
tif_dú
.
td_°rùbyãcou¡s‹ãd
 = 1;

5576 
°rù
 = 1; såù < 
tif
->
tif_dú
.
td_n°rùs
; strip++) {

5577 i‡(
tif
->
tif_dú
.
td_°rùoff£t
[
°rù
 - 1] >

5578 
tif
->
tif_dú
.
td_°rùoff£t
[
°rù
]) {

5579 
tif
->
tif_dú
.
td_°rùbyãcou¡s‹ãd
 = 0;

5585  
ªtu∫_vÆue
;

5587 (Ë
tif
;

5590 
	}
}

	@libtiff/tif_dirwrite.c

32 
	~"tiffi›.h
"

34 #ifde‡
HAVE_IEEEFP


35 
	#TIFFCvtN©iveToIEEEFlﬂt
(
tif
, 
n
, 
Â
)

	)

36 
	#TIFFCvtN©iveToIEEEDoubÀ
(
tif
, 
n
, 
dp
)

	)

38 
TIFFCvtN©iveToIEEEFlﬂt
(
TIFF
* 
tif
, 
uöt32
 
n
, * 
Â
);

39 
TIFFCvtN©iveToIEEEDoubÀ
(
TIFF
* 
tif
, 
uöt32
 
n
, * 
dp
);

42 
TIFFWrôeDúe˘‹ySec
(
TIFF
* 
tif
, 
isimage
, 
imaged⁄e
, 
uöt64
* 
pdúoff
);

44 
TIFFWrôeDúe˘‹yTagSam∂ef‹m©Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
);

46 
TIFFWrôeDúe˘‹yTagSam∂ef‹m©PîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
);

49 
TIFFWrôeDúe˘‹yTagAscii
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
);

50 
TIFFWrôeDúe˘‹yTagUndeföedAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt8
* 
vÆue
);

51 #ifde‡
nŸdef


52 
TIFFWrôeDúe˘‹yTagByã
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
uöt8
 
vÆue
);

54 
TIFFWrôeDúe˘‹yTagByãAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt8
* 
vÆue
);

56 
TIFFWrôeDúe˘‹yTagByãPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
uöt8
 
vÆue
);

58 #ifde‡
nŸdef


59 
TIFFWrôeDúe˘‹yTagSbyã
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt8
 
vÆue
);

61 
TIFFWrôeDúe˘‹yTagSbyãAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt8
* 
vÆue
);

63 
TIFFWrôeDúe˘‹yTagSbyãPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt8
 
vÆue
);

65 
TIFFWrôeDúe˘‹yTagSh‹t
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt16 
vÆue
);

66 
TIFFWrôeDúe˘‹yTagSh‹tAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt16* 
vÆue
);

67 
TIFFWrôeDúe˘‹yTagSh‹tPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt16 
vÆue
);

68 #ifde‡
nŸdef


69 
TIFFWrôeDúe˘‹yTagSsh‹t
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt16
 
vÆue
);

71 
TIFFWrôeDúe˘‹yTagSsh‹tAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt16
* 
vÆue
);

73 
TIFFWrôeDúe˘‹yTagSsh‹tPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt16
 
vÆue
);

75 
TIFFWrôeDúe˘‹yTagL⁄g
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
vÆue
);

76 
TIFFWrôeDúe˘‹yTagL⁄gAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt32* 
vÆue
);

78 
TIFFWrôeDúe˘‹yTagL⁄gPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
vÆue
);

80 #ifde‡
nŸdef


81 
TIFFWrôeDúe˘‹yTagSl⁄g
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt32
 
vÆue
);

83 
TIFFWrôeDúe˘‹yTagSl⁄gAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt32
* 
vÆue
);

85 
TIFFWrôeDúe˘‹yTagSl⁄gPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt32
 
vÆue
);

87 #ifde‡
nŸdef


88 
TIFFWrôeDúe˘‹yTagL⁄g8
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
uöt64
 
vÆue
);

90 
TIFFWrôeDúe˘‹yTagL⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
);

91 #ifde‡
nŸdef


92 
TIFFWrôeDúe˘‹yTagSl⁄g8
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt64
 
vÆue
);

94 
TIFFWrôeDúe˘‹yTagSl⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt64
* 
vÆue
);

95 
TIFFWrôeDúe˘‹yTagR©i⁄Æ
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
);

96 
TIFFWrôeDúe˘‹yTagR©i⁄ÆAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
);

97 
TIFFWrôeDúe˘‹yTagSøti⁄ÆAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
);

98 #ifde‡
nŸdef


99 
TIFFWrôeDúe˘‹yTagFlﬂt
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
);

101 
TIFFWrôeDúe˘‹yTagFlﬂtAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
);

103 
TIFFWrôeDúe˘‹yTagFlﬂtPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
);

105 #ifde‡
nŸdef


106 
TIFFWrôeDúe˘‹yTagDoubÀ
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
);

108 
TIFFWrôeDúe˘‹yTagDoubÀAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
);

110 
TIFFWrôeDúe˘‹yTagDoubÀPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
);

112 
TIFFWrôeDúe˘‹yTagIfdAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt32* 
vÆue
);

113 #ifde‡
nŸdef


114 
TIFFWrôeDúe˘‹yTagIfd8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
);

116 
TIFFWrôeDúe˘‹yTagSh‹tL⁄g
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
vÆue
);

117 
TIFFWrôeDúe˘‹yTagL⁄gL⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
);

118 
TIFFWrôeDúe˘‹yTagIfdIfd8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
);

119 #ifde‡
nŸdef


120 
TIFFWrôeDúe˘‹yTagSh‹tL⁄gL⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
);

122 
TIFFWrôeDúe˘‹yTagCﬁ‹m≠
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
);

123 
TIFFWrôeDúe˘‹yTagTøns„rfun˘i⁄
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
);

124 
TIFFWrôeDúe˘‹yTagSubifd
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
);

126 
TIFFWrôeDúe˘‹yTagCheckedAscii
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
);

127 
TIFFWrôeDúe˘‹yTagCheckedUndeföedAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt8
* 
vÆue
);

128 #ifde‡
nŸdef


129 
TIFFWrôeDúe˘‹yTagCheckedByã
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
uöt8
 
vÆue
);

131 
TIFFWrôeDúe˘‹yTagCheckedByãAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt8
* 
vÆue
);

132 #ifde‡
nŸdef


133 
TIFFWrôeDúe˘‹yTagCheckedSbyã
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt8
 
vÆue
);

135 
TIFFWrôeDúe˘‹yTagCheckedSbyãAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt8
* 
vÆue
);

136 
TIFFWrôeDúe˘‹yTagCheckedSh‹t
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt16 
vÆue
);

137 
TIFFWrôeDúe˘‹yTagCheckedSh‹tAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt16* 
vÆue
);

138 #ifde‡
nŸdef


139 
TIFFWrôeDúe˘‹yTagCheckedSsh‹t
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt16
 
vÆue
);

141 
TIFFWrôeDúe˘‹yTagCheckedSsh‹tAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt16
* 
vÆue
);

142 
TIFFWrôeDúe˘‹yTagCheckedL⁄g
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
vÆue
);

143 
TIFFWrôeDúe˘‹yTagCheckedL⁄gAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt32* 
vÆue
);

144 #ifde‡
nŸdef


145 
TIFFWrôeDúe˘‹yTagCheckedSl⁄g
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt32
 
vÆue
);

147 
TIFFWrôeDúe˘‹yTagCheckedSl⁄gAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt32
* 
vÆue
);

148 #ifde‡
nŸdef


149 
TIFFWrôeDúe˘‹yTagCheckedL⁄g8
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
uöt64
 
vÆue
);

151 
TIFFWrôeDúe˘‹yTagCheckedL⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
);

152 #ifde‡
nŸdef


153 
TIFFWrôeDúe˘‹yTagCheckedSl⁄g8
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt64
 
vÆue
);

155 
TIFFWrôeDúe˘‹yTagCheckedSl⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt64
* 
vÆue
);

156 
TIFFWrôeDúe˘‹yTagCheckedR©i⁄Æ
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
);

157 
TIFFWrôeDúe˘‹yTagCheckedR©i⁄ÆAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
);

158 
TIFFWrôeDúe˘‹yTagCheckedSøti⁄ÆAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
);

159 #ifde‡
nŸdef


160 
TIFFWrôeDúe˘‹yTagCheckedFlﬂt
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
);

162 
TIFFWrôeDúe˘‹yTagCheckedFlﬂtAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
);

163 #ifde‡
nŸdef


164 
TIFFWrôeDúe˘‹yTagCheckedDoubÀ
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
);

166 
TIFFWrôeDúe˘‹yTagCheckedDoubÀAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
);

167 
TIFFWrôeDúe˘‹yTagCheckedIfdAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt32* 
vÆue
);

168 
TIFFWrôeDúe˘‹yTagCheckedIfd8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
);

170 
TIFFWrôeDúe˘‹yTagD©a
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt16 
d©©y≥
, uöt32 
cou¡
, uöt32 
d©Æígth
, * 
d©a
);

172 
TIFFLökDúe˘‹y
(
TIFF
*);

181 
	$TIFFWrôeDúe˘‹y
(
TIFF
* 
tif
)

183  
	`TIFFWrôeDúe˘‹ySec
(
tif
,
TRUE
,TRUE,
NULL
);

184 
	}
}

193 
	$TIFFCheckpoötDúe˘‹y
(
TIFF
* 
tif
)

195 
rc
;

197 i‡(
tif
->
tif_dú
.
td_°rùoff£t
 =
NULL
)

198 (Ë
	`TIFFSëupSåùs
(
tif
);

199 
rc
 = 
	`TIFFWrôeDúe˘‹ySec
(
tif
,
TRUE
,
FALSE
,
NULL
);

200 (Ë
	`TIFFSëWrôeOff£t
(
tif
, 
	`TIFFSìkFûe
—if, 0, 
SEEK_END
));

201  
rc
;

202 
	}
}

205 
	$TIFFWrôeCu°omDúe˘‹y
(
TIFF
* 
tif
, 
uöt64
* 
pdúoff
)

207  
	`TIFFWrôeDúe˘‹ySec
(
tif
,
FALSE
,FALSE,
pdúoff
);

208 
	}
}

217 
	$TIFFRewrôeDúe˘‹y
–
TIFF
 *
tif
 )

219 c⁄° 
moduÀ
[] = "TIFFRewriteDirectory";

222 if–
tif
->
tif_dúoff
 == 0 )

223  
	`TIFFWrôeDúe˘‹y
–
tif
 );

230 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

232 i‡(
tif
->
tif_hódî
.
˛assic
.
tiff_dúoff
 =tif->
tif_dúoff
)

234 
tif
->
tif_hódî
.
˛assic
.
tiff_dúoff
 = 0;

235 
tif
->
tif_dúoff
 = 0;

237 
	`TIFFSìkFûe
(
tif
,4,
SEEK_SET
);

238 i‡(!
	`WrôeOK
(
tif
, &—if->
tif_hódî
.
˛assic
.
tiff_dúoff
),4))

240 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

247 
uöt32
 
√xtdú
;

248 
√xtdú
 = 
tif
->
tif_hódî
.
˛assic
.
tiff_dúoff
;

250 
uöt16
 
dúcou¡
;

251 
uöt32
 
√xäextdú
;

253 i‡(!
	`SìkOK
(
tif
, 
√xtdú
) ||

254 !
	`RódOK
(
tif
, &
dúcou¡
, 2)) {

255 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

259 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

260 
	`TIFFSwabSh‹t
(&
dúcou¡
);

261 (Ë
	`TIFFSìkFûe
(
tif
,

262 
√xtdú
+2+
dúcou¡
*12, 
SEEK_SET
);

263 i‡(!
	`RódOK
(
tif
, &
√xäextdú
, 4)) {

264 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

268 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

269 
	`TIFFSwabL⁄g
(&
√xäextdú
);

270 i‡(
√xäextdú
==
tif
->
tif_dúoff
)

272 
uöt32
 
m
;

273 
m
=0;

274 (Ë
	`TIFFSìkFûe
(
tif
,

275 
√xtdú
+2+
dúcou¡
*12, 
SEEK_SET
);

276 i‡(!
	`WrôeOK
(
tif
, &
m
, 4)) {

277 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

281 
tif
->
tif_dúoff
=0;

284 
√xtdú
=
√xäextdú
;

290 i‡(
tif
->
tif_hódî
.
big
.
tiff_dúoff
 =tif->
tif_dúoff
)

292 
tif
->
tif_hódî
.
big
.
tiff_dúoff
 = 0;

293 
tif
->
tif_dúoff
 = 0;

295 
	`TIFFSìkFûe
(
tif
,8,
SEEK_SET
);

296 i‡(!
	`WrôeOK
(
tif
, &—if->
tif_hódî
.
big
.
tiff_dúoff
),8))

298 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

305 
uöt64
 
√xtdú
;

306 
√xtdú
 = 
tif
->
tif_hódî
.
big
.
tiff_dúoff
;

308 
uöt64
 
dúcou¡64
;

309 
uöt16
 
dúcou¡
;

310 
uöt64
 
√xäextdú
;

312 i‡(!
	`SìkOK
(
tif
, 
√xtdú
) ||

313 !
	`RódOK
(
tif
, &
dúcou¡64
, 8)) {

314 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

318 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

319 
	`TIFFSwabL⁄g8
(&
dúcou¡64
);

320 i‡(
dúcou¡64
>0xFFFF)

322 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

326 
dúcou¡
=(
uöt16
)
dúcou¡64
;

327 (Ë
	`TIFFSìkFûe
(
tif
,

328 
√xtdú
+8+
dúcou¡
*20, 
SEEK_SET
);

329 i‡(!
	`RódOK
(
tif
, &
√xäextdú
, 8)) {

330 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

334 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

335 
	`TIFFSwabL⁄g8
(&
√xäextdú
);

336 i‡(
√xäextdú
==
tif
->
tif_dúoff
)

338 
uöt64
 
m
;

339 
m
=0;

340 (Ë
	`TIFFSìkFûe
(
tif
,

341 
√xtdú
+8+
dúcou¡
*20, 
SEEK_SET
);

342 i‡(!
	`WrôeOK
(
tif
, &
m
, 8)) {

343 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

347 
tif
->
tif_dúoff
=0;

350 
√xtdú
=
√xäextdú
;

359  
	`TIFFWrôeDúe˘‹y
–
tif
 );

360 
	}
}

363 
	$TIFFWrôeDúe˘‹ySec
(
TIFF
* 
tif
, 
isimage
, 
imaged⁄e
, 
uöt64
* 
pdúoff
)

365 c⁄° 
moduÀ
[] = "TIFFWriteDirectorySec";

366 
uöt32
 
ndú
;

367 
TIFFDúE¡ry
* 
dú
;

368 
uöt32
 
dúsize
;

369 * 
dúmem
;

370 
uöt32
 
m
;

371 i‡(
tif
->
tif_mode
 =
O_RDONLY
)

374 
	`_TIFFFûlSåûes
–
tif
 );

381 i‡(
imaged⁄e
)

383 i‡(
tif
->
tif_Êags
 & 
TIFF_POSTENCODE
)

385 
tif
->
tif_Êags
 &~
TIFF_POSTENCODE
;

386 i‡(!(*
tif
->
tif_po°ícode
)(tif))

388 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

393 (*
tif
->
tif_˛o£
)(tif);

401 i‡(
tif
->
tif_øwcc
 > 0

402 && (
tif
->
tif_Êags
 & 
TIFF_BEENWRITING
) != 0 )

404 if–!
	`TIFFFlushD©a1
(
tif
) )

406 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

411 i‡((
tif
->
tif_Êags
 & 
TIFF_MYBUFFER
Ë&&Åif->
tif_øwd©a
)

413 
	`_TIFF‰ì
(
tif
->
tif_øwd©a
);

414 
tif
->
tif_øwd©a
 = 
NULL
;

415 
tif
->
tif_øwcc
 = 0;

416 
tif
->
tif_øwd©asize
 = 0;

417 
tif
->
tif_øwd©aoff
 = 0;

418 
tif
->
tif_øwd©Æﬂded
 = 0;

420 
tif
->
tif_Êags
 &~(
TIFF_BEENWRITING
|
TIFF_BUFFERSETUP
);

422 
dú
=
NULL
;

423 
dúmem
=
NULL
;

424 
dúsize
=0;

427 
ndú
=0;

428 i‡(
isimage
)

430 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_IMAGEDIMENSIONS
))

432 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tL⁄g
(
tif
,&
ndú
,
dú
,
TIFFTAG_IMAGEWIDTH
,tif->
tif_dú
.
td_imagewidth
))

433 
bad
;

434 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tL⁄g
(
tif
,&
ndú
,
dú
,
TIFFTAG_IMAGELENGTH
,tif->
tif_dú
.
td_imagñígth
))

435 
bad
;

437 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_TILEDIMENSIONS
))

439 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tL⁄g
(
tif
,&
ndú
,
dú
,
TIFFTAG_TILEWIDTH
,tif->
tif_dú
.
td_tûewidth
))

440 
bad
;

441 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tL⁄g
(
tif
,&
ndú
,
dú
,
TIFFTAG_TILELENGTH
,tif->
tif_dú
.
td_tûñígth
))

442 
bad
;

444 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_RESOLUTION
))

446 i‡(!
	`TIFFWrôeDúe˘‹yTagR©i⁄Æ
(
tif
,&
ndú
,
dú
,
TIFFTAG_XRESOLUTION
,tif->
tif_dú
.
td_xªsﬁuti⁄
))

447 
bad
;

448 i‡(!
	`TIFFWrôeDúe˘‹yTagR©i⁄Æ
(
tif
,&
ndú
,
dú
,
TIFFTAG_YRESOLUTION
,tif->
tif_dú
.
td_yªsﬁuti⁄
))

449 
bad
;

451 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_POSITION
))

453 i‡(!
	`TIFFWrôeDúe˘‹yTagR©i⁄Æ
(
tif
,&
ndú
,
dú
,
TIFFTAG_XPOSITION
,tif->
tif_dú
.
td_xposôi⁄
))

454 
bad
;

455 i‡(!
	`TIFFWrôeDúe˘‹yTagR©i⁄Æ
(
tif
,&
ndú
,
dú
,
TIFFTAG_YPOSITION
,tif->
tif_dú
.
td_yposôi⁄
))

456 
bad
;

458 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SUBFILETYPE
))

460 i‡(!
	`TIFFWrôeDúe˘‹yTagL⁄g
(
tif
,&
ndú
,
dú
,
TIFFTAG_SUBFILETYPE
,tif->
tif_dú
.
td_subfûëy≥
))

461 
bad
;

463 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_BITSPERSAMPLE
))

465 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tPîSam∂e
(
tif
,&
ndú
,
dú
,
TIFFTAG_BITSPERSAMPLE
,tif->
tif_dú
.
td_bô•îßm∂e
))

466 
bad
;

468 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_COMPRESSION
))

470 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹t
(
tif
,&
ndú
,
dú
,
TIFFTAG_COMPRESSION
,tif->
tif_dú
.
td_com¥essi⁄
))

471 
bad
;

473 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_PHOTOMETRIC
))

475 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹t
(
tif
,&
ndú
,
dú
,
TIFFTAG_PHOTOMETRIC
,tif->
tif_dú
.
td_phŸomëric
))

476 
bad
;

478 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_THRESHHOLDING
))

480 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹t
(
tif
,&
ndú
,
dú
,
TIFFTAG_THRESHHOLDING
,tif->
tif_dú
.
td_thªshhﬁdög
))

481 
bad
;

483 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_FILLORDER
))

485 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹t
(
tif
,&
ndú
,
dú
,
TIFFTAG_FILLORDER
,tif->
tif_dú
.
td_fûl‹dî
))

486 
bad
;

488 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_ORIENTATION
))

490 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹t
(
tif
,&
ndú
,
dú
,
TIFFTAG_ORIENTATION
,tif->
tif_dú
.
td_‹õ¡©i⁄
))

491 
bad
;

493 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SAMPLESPERPIXEL
))

495 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹t
(
tif
,&
ndú
,
dú
,
TIFFTAG_SAMPLESPERPIXEL
,tif->
tif_dú
.
td_ßm∂e•îpixñ
))

496 
bad
;

498 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_ROWSPERSTRIP
))

500 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tL⁄g
(
tif
,&
ndú
,
dú
,
TIFFTAG_ROWSPERSTRIP
,tif->
tif_dú
.
td_row•î°rù
))

501 
bad
;

503 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_MINSAMPLEVALUE
))

505 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tPîSam∂e
(
tif
,&
ndú
,
dú
,
TIFFTAG_MINSAMPLEVALUE
,tif->
tif_dú
.
td_mößm∂evÆue
))

506 
bad
;

508 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_MAXSAMPLEVALUE
))

510 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tPîSam∂e
(
tif
,&
ndú
,
dú
,
TIFFTAG_MAXSAMPLEVALUE
,tif->
tif_dú
.
td_maxßm∂evÆue
))

511 
bad
;

513 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_PLANARCONFIG
))

515 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹t
(
tif
,&
ndú
,
dú
,
TIFFTAG_PLANARCONFIG
,tif->
tif_dú
.
td_∂™¨c⁄fig
))

516 
bad
;

518 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_RESOLUTIONUNIT
))

520 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹t
(
tif
,&
ndú
,
dú
,
TIFFTAG_RESOLUTIONUNIT
,tif->
tif_dú
.
td_ªsﬁuti⁄unô
))

521 
bad
;

523 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_PAGENUMBER
))

525 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tAºay
(
tif
,&
ndú
,
dú
,
TIFFTAG_PAGENUMBER
,2,&tif->
tif_dú
.
td_∑gíumbî
[0]))

526 
bad
;

528 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_STRIPBYTECOUNTS
))

530 i‡(!
	`isTûed
(
tif
))

532 i‡(!
	`TIFFWrôeDúe˘‹yTagL⁄gL⁄g8Aºay
(
tif
,&
ndú
,
dú
,
TIFFTAG_STRIPBYTECOUNTS
,tif->
tif_dú
.
td_n°rùs
,tif->tif_dú.
td_°rùbyãcou¡
))

533 
bad
;

537 i‡(!
	`TIFFWrôeDúe˘‹yTagL⁄gL⁄g8Aºay
(
tif
,&
ndú
,
dú
,
TIFFTAG_TILEBYTECOUNTS
,tif->
tif_dú
.
td_n°rùs
,tif->tif_dú.
td_°rùbyãcou¡
))

538 
bad
;

541 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_STRIPOFFSETS
))

543 i‡(!
	`isTûed
(
tif
))

545 i‡(!
	`TIFFWrôeDúe˘‹yTagL⁄gL⁄g8Aºay
(
tif
,&
ndú
,
dú
,
TIFFTAG_STRIPOFFSETS
,tif->
tif_dú
.
td_n°rùs
,tif->tif_dú.
td_°rùoff£t
))

546 
bad
;

550 i‡(!
	`TIFFWrôeDúe˘‹yTagL⁄gL⁄g8Aºay
(
tif
,&
ndú
,
dú
,
TIFFTAG_TILEOFFSETS
,tif->
tif_dú
.
td_n°rùs
,tif->tif_dú.
td_°rùoff£t
))

551 
bad
;

554 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_COLORMAP
))

556 i‡(!
	`TIFFWrôeDúe˘‹yTagCﬁ‹m≠
(
tif
,&
ndú
,
dú
))

557 
bad
;

559 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_EXTRASAMPLES
))

561 i‡(
tif
->
tif_dú
.
td_exåaßm∂es
)

563 
uöt16
 
«
;

564 
uöt16
* 
nb
;

565 
	`TIFFGëFõldDeÁu…ed
(
tif
,
TIFFTAG_EXTRASAMPLES
,&
«
,&
nb
);

566 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tAºay
(
tif
,&
ndú
,
dú
,
TIFFTAG_EXTRASAMPLES
,
«
,
nb
))

567 
bad
;

570 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SAMPLEFORMAT
))

572 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tPîSam∂e
(
tif
,&
ndú
,
dú
,
TIFFTAG_SAMPLEFORMAT
,tif->
tif_dú
.
td_ßm∂ef‹m©
))

573 
bad
;

575 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SMINSAMPLEVALUE
))

577 i‡(!
	`TIFFWrôeDúe˘‹yTagSam∂ef‹m©Aºay
(
tif
,&
ndú
,
dú
,
TIFFTAG_SMINSAMPLEVALUE
,tif->
tif_dú
.
td_ßm∂e•îpixñ
,tif->tif_dú.
td_smößm∂evÆue
))

578 
bad
;

580 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SMAXSAMPLEVALUE
))

582 i‡(!
	`TIFFWrôeDúe˘‹yTagSam∂ef‹m©Aºay
(
tif
,&
ndú
,
dú
,
TIFFTAG_SMAXSAMPLEVALUE
,tif->
tif_dú
.
td_ßm∂e•îpixñ
,tif->tif_dú.
td_smaxßm∂evÆue
))

583 
bad
;

585 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_IMAGEDEPTH
))

587 i‡(!
	`TIFFWrôeDúe˘‹yTagL⁄g
(
tif
,&
ndú
,
dú
,
TIFFTAG_IMAGEDEPTH
,tif->
tif_dú
.
td_imagedïth
))

588 
bad
;

590 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_TILEDEPTH
))

592 i‡(!
	`TIFFWrôeDúe˘‹yTagL⁄g
(
tif
,&
ndú
,
dú
,
TIFFTAG_TILEDEPTH
,tif->
tif_dú
.
td_tûedïth
))

593 
bad
;

595 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_HALFTONEHINTS
))

597 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tAºay
(
tif
,&
ndú
,
dú
,
TIFFTAG_HALFTONEHINTS
,2,&tif->
tif_dú
.
td_hÆ·⁄ehöts
[0]))

598 
bad
;

600 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_YCBCRSUBSAMPLING
))

602 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tAºay
(
tif
,&
ndú
,
dú
,
TIFFTAG_YCBCRSUBSAMPLING
,2,&tif->
tif_dú
.
td_ycb¸subßm∂ög
[0]))

603 
bad
;

605 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_YCBCRPOSITIONING
))

607 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹t
(
tif
,&
ndú
,
dú
,
TIFFTAG_YCBCRPOSITIONING
,tif->
tif_dú
.
td_ycb¸posôi⁄ög
))

608 
bad
;

610 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_REFBLACKWHITE
))

612 i‡(!
	`TIFFWrôeDúe˘‹yTagR©i⁄ÆAºay
(
tif
,&
ndú
,
dú
,
TIFFTAG_REFERENCEBLACKWHITE
,6,tif->
tif_dú
.
td_ªfbœckwhôe
))

613 
bad
;

615 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_TRANSFERFUNCTION
))

617 i‡(!
	`TIFFWrôeDúe˘‹yTagTøns„rfun˘i⁄
(
tif
,&
ndú
,
dú
))

618 
bad
;

620 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_INKNAMES
))

622 i‡(!
	`TIFFWrôeDúe˘‹yTagAscii
(
tif
,&
ndú
,
dú
,
TIFFTAG_INKNAMES
,tif->
tif_dú
.
td_ök«me¶í
,tif->tif_dú.
td_ök«mes
))

623 
bad
;

625 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SUBIFD
))

627 i‡(!
	`TIFFWrôeDúe˘‹yTagSubifd
(
tif
,&
ndú
,
dú
))

628 
bad
;

631 
uöt32
 
n
;

632 
n
=0;Ç<
tif
->
tif_nfõlds
;Ç++) {

633 c⁄° 
TIFFFõld
* 
o
;

634 
o
 = 
tif
->
tif_fõlds
[
n
];

635 i‡((
o
->
fõld_bô
>=
FIELD_CODEC
)&&(
	`TIFFFõldSë
(
tif
,o->field_bit)))

637 
o
->
gë_fõld_ty≥
)

639 
TIFF_SETGET_ASCII
:

641 
uöt32
 
∑
;

642 * 
pb
;

643 
	`as£π
(
o
->
fõld_ty≥
==
TIFF_ASCII
);

644 
	`as£π
(
o
->
fõld_ªadcou¡
==
TIFF_VARIABLE
);

645 
	`as£π
(
o
->
fõld_∑sscou¡
==0);

646 
	`TIFFGëFõld
(
tif
,
o
->
fõld_èg
,&
pb
);

647 
∑
=(
uöt32
)(
	`°æí
(
pb
));

648 i‡(!
	`TIFFWrôeDúe˘‹yTagAscii
(
tif
,&
ndú
,
dú
,
o
->
fõld_èg
,
∑
,
pb
))

649 
bad
;

652 
TIFF_SETGET_UINT16
:

654 
uöt16
 
p
;

655 
	`as£π
(
o
->
fõld_ty≥
==
TIFF_SHORT
);

656 
	`as£π
(
o
->
fõld_ªadcou¡
==1);

657 
	`as£π
(
o
->
fõld_∑sscou¡
==0);

658 
	`TIFFGëFõld
(
tif
,
o
->
fõld_èg
,&
p
);

659 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹t
(
tif
,&
ndú
,
dú
,
o
->
fõld_èg
,
p
))

660 
bad
;

663 
TIFF_SETGET_UINT32
:

665 
uöt32
 
p
;

666 
	`as£π
(
o
->
fõld_ty≥
==
TIFF_LONG
);

667 
	`as£π
(
o
->
fõld_ªadcou¡
==1);

668 
	`as£π
(
o
->
fõld_∑sscou¡
==0);

669 
	`TIFFGëFõld
(
tif
,
o
->
fõld_èg
,&
p
);

670 i‡(!
	`TIFFWrôeDúe˘‹yTagL⁄g
(
tif
,&
ndú
,
dú
,
o
->
fõld_èg
,
p
))

671 
bad
;

674 
TIFF_SETGET_C32_UINT8
:

676 
uöt32
 
∑
;

677 * 
pb
;

678 
	`as£π
(
o
->
fõld_ty≥
==
TIFF_UNDEFINED
);

679 
	`as£π
(
o
->
fõld_ªadcou¡
==
TIFF_VARIABLE2
);

680 
	`as£π
(
o
->
fõld_∑sscou¡
==1);

681 
	`TIFFGëFõld
(
tif
,
o
->
fõld_èg
,&
∑
,&
pb
);

682 i‡(!
	`TIFFWrôeDúe˘‹yTagUndeföedAºay
(
tif
,&
ndú
,
dú
,
o
->
fõld_èg
,
∑
,
pb
))

683 
bad
;

687 
	`as£π
(0);

694 
m
=0; m<(
uöt32
)(
tif
->
tif_dú
.
td_cu°omVÆueCou¡
); m++)

696 
tif
->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_ty≥
)

698 
TIFF_ASCII
:

699 i‡(!
	`TIFFWrôeDúe˘‹yTagAscii
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

700 
bad
;

702 
TIFF_UNDEFINED
:

703 i‡(!
	`TIFFWrôeDúe˘‹yTagUndeföedAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

704 
bad
;

706 
TIFF_BYTE
:

707 i‡(!
	`TIFFWrôeDúe˘‹yTagByãAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

708 
bad
;

710 
TIFF_SBYTE
:

711 i‡(!
	`TIFFWrôeDúe˘‹yTagSbyãAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

712 
bad
;

714 
TIFF_SHORT
:

715 i‡(!
	`TIFFWrôeDúe˘‹yTagSh‹tAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

716 
bad
;

718 
TIFF_SSHORT
:

719 i‡(!
	`TIFFWrôeDúe˘‹yTagSsh‹tAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

720 
bad
;

722 
TIFF_LONG
:

723 i‡(!
	`TIFFWrôeDúe˘‹yTagL⁄gAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

724 
bad
;

726 
TIFF_SLONG
:

727 i‡(!
	`TIFFWrôeDúe˘‹yTagSl⁄gAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

728 
bad
;

730 
TIFF_LONG8
:

731 i‡(!
	`TIFFWrôeDúe˘‹yTagL⁄g8Aºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

732 
bad
;

734 
TIFF_SLONG8
:

735 i‡(!
	`TIFFWrôeDúe˘‹yTagSl⁄g8Aºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

736 
bad
;

738 
TIFF_RATIONAL
:

739 i‡(!
	`TIFFWrôeDúe˘‹yTagR©i⁄ÆAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

740 
bad
;

742 
TIFF_SRATIONAL
:

743 i‡(!
	`TIFFWrôeDúe˘‹yTagSøti⁄ÆAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

744 
bad
;

746 
TIFF_FLOAT
:

747 i‡(!
	`TIFFWrôeDúe˘‹yTagFlﬂtAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

748 
bad
;

750 
TIFF_DOUBLE
:

751 i‡(!
	`TIFFWrôeDúe˘‹yTagDoubÀAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

752 
bad
;

754 
TIFF_IFD
:

755 i‡(!
	`TIFFWrôeDúe˘‹yTagIfdAºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

756 
bad
;

758 
TIFF_IFD8
:

759 i‡(!
	`TIFFWrôeDúe˘‹yTagIfdIfd8Aºay
(
tif
,&
ndú
,
dú
,tif->
tif_dú
.
td_cu°omVÆues
[
m
].
öfo
->
fõld_èg
,tif->tif_dú.td_cu°omVÆues[m].
cou¡
,tif->tif_dú.td_cu°omVÆues[m].
vÆue
))

760 
bad
;

763 
	`as£π
(0);

767 i‡(
dú
!=
NULL
)

769 
dú
=
	`_TIFFmÆloc
(
ndú
*(
TIFFDúE¡ry
));

770 i‡(
dú
==
NULL
)

772 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

773 
bad
;

775 i‡(
isimage
)

777 i‡((
tif
->
tif_dúoff
==0)&&(!
	`TIFFLökDúe˘‹y
(tif)))

778 
bad
;

781 
tif
->
tif_dúoff
=(
	`TIFFSìkFûe
—if,0,
SEEK_END
)+1)&(~1);

782 i‡(
pdúoff
!=
NULL
)

783 *
pdúoff
=
tif
->
tif_dúoff
;

784 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

785 
dúsize
=2+
ndú
*12+4;

787 
dúsize
=8+
ndú
*20+8;

788 
tif
->
tif_d©aoff
Òif->
tif_dúoff
+
dúsize
;

789 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

790 
tif
->
tif_d©aoff
=(
uöt32
)tif->tif_dataoff;

791 i‡((
tif
->
tif_d©aoff
<tif->
tif_dúoff
)||—if->tif_d©aoff<(
uöt64
)
dúsize
))

793 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Maximum TIFF file sizeÉxceeded");

794 
bad
;

796 i‡(
tif
->
tif_d©aoff
&1)

797 
tif
->
tif_d©aoff
++;

798 i‡(
isimage
)

799 
tif
->
tif_curdú
++;

801 i‡(
isimage
)

803 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SUBIFD
)&&—if->
tif_subifdoff
==0))

805 
uöt32
 
«
;

806 
TIFFDúE¡ry
* 
nb
;

807 
«
=0, 
nb
=
dú
; ;Ça++,Çb++)

809 
	`as£π
(
«
<
ndú
);

810 i‡(
nb
->
tdú_èg
==
TIFFTAG_SUBIFD
)

813 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

814 
tif
->
tif_subifdoff
Òif->
tif_dúoff
+2+
«
*12+8;

816 
tif
->
tif_subifdoff
Òif->
tif_dúoff
+8+
«
*20+12;

819 
dúmem
=
	`_TIFFmÆloc
(
dúsize
);

820 i‡(
dúmem
==
NULL
)

822 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

823 
bad
;

825 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

827 
uöt8
* 
n
;

828 
uöt32
 
nTmp
;

829 
TIFFDúE¡ry
* 
o
;

830 
n
=
dúmem
;

831 *(
uöt16
*)
n
=
ndú
;

832 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

833 
	`TIFFSwabSh‹t
((
uöt16
*)
n
);

834 
n
+=2;

835 
o
=
dú
;

836 
m
=0; m<
ndú
; m++)

838 *(
uöt16
*)
n
=
o
->
tdú_èg
;

839 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

840 
	`TIFFSwabSh‹t
((
uöt16
*)
n
);

841 
n
+=2;

842 *(
uöt16
*)
n
=
o
->
tdú_ty≥
;

843 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

844 
	`TIFFSwabSh‹t
((
uöt16
*)
n
);

845 
n
+=2;

846 
nTmp
 = (
uöt32
)
o
->
tdú_cou¡
;

847 
	`_TIFFmem˝y
(
n
,&
nTmp
,4);

848 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

849 
	`TIFFSwabL⁄g
((
uöt32
*)
n
);

850 
n
+=4;

853 
	`_TIFFmem˝y
(
n
,&
o
->
tdú_off£t
,4);

854 
n
+=4;

855 
o
++;

857 
nTmp
 = (
uöt32
)
tif
->
tif_√xtdúoff
;

858 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

859 
	`TIFFSwabL⁄g
(&
nTmp
);

860 
	`_TIFFmem˝y
(
n
,&
nTmp
,4);

864 
uöt8
* 
n
;

865 
TIFFDúE¡ry
* 
o
;

866 
n
=
dúmem
;

867 *(
uöt64
*)
n
=
ndú
;

868 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

869 
	`TIFFSwabL⁄g8
((
uöt64
*)
n
);

870 
n
+=8;

871 
o
=
dú
;

872 
m
=0; m<
ndú
; m++)

874 *(
uöt16
*)
n
=
o
->
tdú_èg
;

875 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

876 
	`TIFFSwabSh‹t
((
uöt16
*)
n
);

877 
n
+=2;

878 *(
uöt16
*)
n
=
o
->
tdú_ty≥
;

879 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

880 
	`TIFFSwabSh‹t
((
uöt16
*)
n
);

881 
n
+=2;

882 
	`_TIFFmem˝y
(
n
,&
o
->
tdú_cou¡
,8);

883 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

884 
	`TIFFSwabL⁄g8
((
uöt64
*)
n
);

885 
n
+=8;

886 
	`_TIFFmem˝y
(
n
,&
o
->
tdú_off£t
,8);

887 
n
+=8;

888 
o
++;

890 
	`_TIFFmem˝y
(
n
,&
tif
->
tif_√xtdúoff
,8);

891 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

892 
	`TIFFSwabL⁄g8
((
uöt64
*)
n
);

894 
	`_TIFF‰ì
(
dú
);

895 
dú
=
NULL
;

896 i‡(!
	`SìkOK
(
tif
,tif->
tif_dúoff
))

898 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"IOÉrror writing directory");

899 
bad
;

901 i‡(!
	`WrôeOK
(
tif
,
dúmem
,(
tmsize_t
)
dúsize
))

903 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"IOÉrror writing directory");

904 
bad
;

906 
	`_TIFF‰ì
(
dúmem
);

907 i‡(
imaged⁄e
)

909 
	`TIFFFªeDúe˘‹y
(
tif
);

910 
tif
->
tif_Êags
 &~
TIFF_DIRTYDIRECT
;

911 
tif
->
tif_Êags
 &~
TIFF_DIRTYSTRIP
;

912 (*
tif
->
tif_˛ónup
)(tif);

917 
	`TIFFCª©eDúe˘‹y
(
tif
);

920 
bad
:

921 i‡(
dú
!=
NULL
)

922 
	`_TIFF‰ì
(
dú
);

923 i‡(
dúmem
!=
NULL
)

924 
	`_TIFF‰ì
(
dúmem
);

926 
	}
}

929 
	$TIFFWrôeDúe˘‹yTagSam∂ef‹m©Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
)

931 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagSampleformatArray";

932 * 
c⁄v
;

933 
uöt32
 
i
;

934 
ok
;

935 
c⁄v
 = 
	`_TIFFmÆloc
(
cou¡
*());

936 i‡(
c⁄v
 =
NULL
)

938 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Out of memory");

942 
tif
->
tif_dú
.
td_ßm∂ef‹m©
)

944 
SAMPLEFORMAT_IEEEFP
:

945 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
<=32)

947 
i
 = 0; i < 
cou¡
; ++i)

948 ((*)
c⁄v
)[
i
] = ()
vÆue
[i];

949 
ok
 = 
	`TIFFWrôeDúe˘‹yTagFlﬂtAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,(*)
c⁄v
);

953 
ok
 = 
	`TIFFWrôeDúe˘‹yTagDoubÀAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
);

956 
SAMPLEFORMAT_INT
:

957 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
<=8)

959 
i
 = 0; i < 
cou¡
; ++i)

960 ((
öt8
*)
c⁄v
)[
i
] = (öt8)
vÆue
[i];

961 
ok
 = 
	`TIFFWrôeDúe˘‹yTagSbyãAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,(
öt8
*)
c⁄v
);

963 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
<=16)

965 
i
 = 0; i < 
cou¡
; ++i)

966 ((
öt16
*)
c⁄v
)[
i
] = (öt16)
vÆue
[i];

967 
ok
 = 
	`TIFFWrôeDúe˘‹yTagSsh‹tAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,(
öt16
*)
c⁄v
);

971 
i
 = 0; i < 
cou¡
; ++i)

972 ((
öt32
*)
c⁄v
)[
i
] = (öt32)
vÆue
[i];

973 
ok
 = 
	`TIFFWrôeDúe˘‹yTagSl⁄gAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,(
öt32
*)
c⁄v
);

976 
SAMPLEFORMAT_UINT
:

977 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
<=8)

979 
i
 = 0; i < 
cou¡
; ++i)

980 ((
uöt8
*)
c⁄v
)[
i
] = (uöt8)
vÆue
[i];

981 
ok
 = 
	`TIFFWrôeDúe˘‹yTagByãAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,(
uöt8
*)
c⁄v
);

983 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
<=16)

985 
i
 = 0; i < 
cou¡
; ++i)

986 ((
uöt16
*)
c⁄v
)[
i
] = (uöt16)
vÆue
[i];

987 
ok
 = 
	`TIFFWrôeDúe˘‹yTagSh‹tAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,(
uöt16
*)
c⁄v
);

991 
i
 = 0; i < 
cou¡
; ++i)

992 ((
uöt32
*)
c⁄v
)[
i
] = (uöt32)
vÆue
[i];

993 
ok
 = 
	`TIFFWrôeDúe˘‹yTagL⁄gAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,(
uöt32
*)
c⁄v
);

997 
ok
 = 0;

1000 
	`_TIFF‰ì
(
c⁄v
);

1001  (
ok
);

1002 
	}
}

1006 
	$TIFFWrôeDúe˘‹yTagSam∂ef‹m©PîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
)

1008 
tif
->
tif_dú
.
td_ßm∂ef‹m©
)

1010 
SAMPLEFORMAT_IEEEFP
:

1011 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
<=32)

1012 (
	`TIFFWrôeDúe˘‹yTagFlﬂtPîSam∂e
(
tif
,
ndú
,
dú
,
èg
,()
vÆue
));

1014 (
	`TIFFWrôeDúe˘‹yTagDoubÀPîSam∂e
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1015 
SAMPLEFORMAT_INT
:

1016 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
<=8)

1017 (
	`TIFFWrôeDúe˘‹yTagSbyãPîSam∂e
(
tif
,
ndú
,
dú
,
èg
,(
öt8
)
vÆue
));

1018 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
<=16)

1019 (
	`TIFFWrôeDúe˘‹yTagSsh‹tPîSam∂e
(
tif
,
ndú
,
dú
,
èg
,(
öt16
)
vÆue
));

1021 (
	`TIFFWrôeDúe˘‹yTagSl⁄gPîSam∂e
(
tif
,
ndú
,
dú
,
èg
,(
öt32
)
vÆue
));

1022 
SAMPLEFORMAT_UINT
:

1023 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
<=8)

1024 (
	`TIFFWrôeDúe˘‹yTagByãPîSam∂e
(
tif
,
ndú
,
dú
,
èg
,(
uöt8
)
vÆue
));

1025 i‡(
tif
->
tif_dú
.
td_bô•îßm∂e
<=16)

1026 (
	`TIFFWrôeDúe˘‹yTagSh‹tPîSam∂e
(
tif
,
ndú
,
dú
,
èg
,(
uöt16
)
vÆue
));

1028 (
	`TIFFWrôeDúe˘‹yTagL⁄gPîSam∂e
(
tif
,
ndú
,
dú
,
èg
,(
uöt32
)
vÆue
));

1032 
	}
}

1036 
	$TIFFWrôeDúe˘‹yTagAscii
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
)

1038 i‡(
dú
==
NULL
)

1040 (*
ndú
)++;

1043 (
	`TIFFWrôeDúe˘‹yTagCheckedAscii
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1044 
	}
}

1047 
	$TIFFWrôeDúe˘‹yTagUndeföedAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt8
* 
vÆue
)

1049 i‡(
dú
==
NULL
)

1051 (*
ndú
)++;

1054 (
	`TIFFWrôeDúe˘‹yTagCheckedUndeföedAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1055 
	}
}

1057 #ifde‡
nŸdef


1059 
	$TIFFWrôeDúe˘‹yTagByã
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
uöt8
 
vÆue
)

1061 i‡(
dú
==
NULL
)

1063 (*
ndú
)++;

1066 (
	`TIFFWrôeDúe˘‹yTagCheckedByã
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1067 
	}
}

1071 
	$TIFFWrôeDúe˘‹yTagByãAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt8
* 
vÆue
)

1073 i‡(
dú
==
NULL
)

1075 (*
ndú
)++;

1078 (
	`TIFFWrôeDúe˘‹yTagCheckedByãAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1079 
	}
}

1083 
	$TIFFWrôeDúe˘‹yTagByãPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
uöt8
 
vÆue
)

1085 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagBytePerSample";

1086 
uöt8
* 
m
;

1087 
uöt8
* 
«
;

1088 
uöt16
 
nb
;

1089 
o
;

1090 i‡(
dú
==
NULL
)

1092 (*
ndú
)++;

1095 
m
=
	`_TIFFmÆloc
(
tif
->
tif_dú
.
td_ßm∂e•îpixñ
*(
uöt8
));

1096 i‡(
m
==
NULL
)

1098 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1101 
«
=
m
, 
nb
=0;Çb<
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;Ça++,Çb++)

1102 *
«
=
vÆue
;

1103 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedByãAºay
(
tif
,
ndú
,
dú
,
èg
,tif->
tif_dú
.
td_ßm∂e•îpixñ
,
m
);

1104 
	`_TIFF‰ì
(
m
);

1105 (
o
);

1106 
	}
}

1109 #ifde‡
nŸdef


1111 
	$TIFFWrôeDúe˘‹yTagSbyã
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt8
 
vÆue
)

1113 i‡(
dú
==
NULL
)

1115 (*
ndú
)++;

1118 (
	`TIFFWrôeDúe˘‹yTagCheckedSbyã
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1119 
	}
}

1123 
	$TIFFWrôeDúe˘‹yTagSbyãAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt8
* 
vÆue
)

1125 i‡(
dú
==
NULL
)

1127 (*
ndú
)++;

1130 (
	`TIFFWrôeDúe˘‹yTagCheckedSbyãAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1131 
	}
}

1135 
	$TIFFWrôeDúe˘‹yTagSbyãPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt8
 
vÆue
)

1137 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagSbytePerSample";

1138 
öt8
* 
m
;

1139 
öt8
* 
«
;

1140 
uöt16
 
nb
;

1141 
o
;

1142 i‡(
dú
==
NULL
)

1144 (*
ndú
)++;

1147 
m
=
	`_TIFFmÆloc
(
tif
->
tif_dú
.
td_ßm∂e•îpixñ
*(
öt8
));

1148 i‡(
m
==
NULL
)

1150 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1153 
«
=
m
, 
nb
=0;Çb<
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;Ça++,Çb++)

1154 *
«
=
vÆue
;

1155 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedSbyãAºay
(
tif
,
ndú
,
dú
,
èg
,tif->
tif_dú
.
td_ßm∂e•îpixñ
,
m
);

1156 
	`_TIFF‰ì
(
m
);

1157 (
o
);

1158 
	}
}

1162 
	$TIFFWrôeDúe˘‹yTagSh‹t
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt16 
vÆue
)

1164 i‡(
dú
==
NULL
)

1166 (*
ndú
)++;

1169 (
	`TIFFWrôeDúe˘‹yTagCheckedSh‹t
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1170 
	}
}

1173 
	$TIFFWrôeDúe˘‹yTagSh‹tAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt16* 
vÆue
)

1175 i‡(
dú
==
NULL
)

1177 (*
ndú
)++;

1180 (
	`TIFFWrôeDúe˘‹yTagCheckedSh‹tAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1181 
	}
}

1184 
	$TIFFWrôeDúe˘‹yTagSh‹tPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt16 
vÆue
)

1186 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagShortPerSample";

1187 
uöt16
* 
m
;

1188 
uöt16
* 
«
;

1189 
uöt16
 
nb
;

1190 
o
;

1191 i‡(
dú
==
NULL
)

1193 (*
ndú
)++;

1196 
m
=
	`_TIFFmÆloc
(
tif
->
tif_dú
.
td_ßm∂e•îpixñ
*(
uöt16
));

1197 i‡(
m
==
NULL
)

1199 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1202 
«
=
m
, 
nb
=0;Çb<
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;Ça++,Çb++)

1203 *
«
=
vÆue
;

1204 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedSh‹tAºay
(
tif
,
ndú
,
dú
,
èg
,tif->
tif_dú
.
td_ßm∂e•îpixñ
,
m
);

1205 
	`_TIFF‰ì
(
m
);

1206 (
o
);

1207 
	}
}

1209 #ifde‡
nŸdef


1211 
	$TIFFWrôeDúe˘‹yTagSsh‹t
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt16
 
vÆue
)

1213 i‡(
dú
==
NULL
)

1215 (*
ndú
)++;

1218 (
	`TIFFWrôeDúe˘‹yTagCheckedSsh‹t
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1219 
	}
}

1223 
	$TIFFWrôeDúe˘‹yTagSsh‹tAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt16
* 
vÆue
)

1225 i‡(
dú
==
NULL
)

1227 (*
ndú
)++;

1230 (
	`TIFFWrôeDúe˘‹yTagCheckedSsh‹tAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1231 
	}
}

1235 
	$TIFFWrôeDúe˘‹yTagSsh‹tPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt16
 
vÆue
)

1237 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagSshortPerSample";

1238 
öt16
* 
m
;

1239 
öt16
* 
«
;

1240 
uöt16
 
nb
;

1241 
o
;

1242 i‡(
dú
==
NULL
)

1244 (*
ndú
)++;

1247 
m
=
	`_TIFFmÆloc
(
tif
->
tif_dú
.
td_ßm∂e•îpixñ
*(
öt16
));

1248 i‡(
m
==
NULL
)

1250 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1253 
«
=
m
, 
nb
=0;Çb<
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;Ça++,Çb++)

1254 *
«
=
vÆue
;

1255 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedSsh‹tAºay
(
tif
,
ndú
,
dú
,
èg
,tif->
tif_dú
.
td_ßm∂e•îpixñ
,
m
);

1256 
	`_TIFF‰ì
(
m
);

1257 (
o
);

1258 
	}
}

1262 
	$TIFFWrôeDúe˘‹yTagL⁄g
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
vÆue
)

1264 i‡(
dú
==
NULL
)

1266 (*
ndú
)++;

1269 (
	`TIFFWrôeDúe˘‹yTagCheckedL⁄g
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1270 
	}
}

1273 
	$TIFFWrôeDúe˘‹yTagL⁄gAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt32* 
vÆue
)

1275 i‡(
dú
==
NULL
)

1277 (*
ndú
)++;

1280 (
	`TIFFWrôeDúe˘‹yTagCheckedL⁄gAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1281 
	}
}

1285 
	$TIFFWrôeDúe˘‹yTagL⁄gPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
vÆue
)

1287 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagLongPerSample";

1288 
uöt32
* 
m
;

1289 
uöt32
* 
«
;

1290 
uöt16
 
nb
;

1291 
o
;

1292 i‡(
dú
==
NULL
)

1294 (*
ndú
)++;

1297 
m
=
	`_TIFFmÆloc
(
tif
->
tif_dú
.
td_ßm∂e•îpixñ
*(
uöt32
));

1298 i‡(
m
==
NULL
)

1300 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1303 
«
=
m
, 
nb
=0;Çb<
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;Ça++,Çb++)

1304 *
«
=
vÆue
;

1305 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedL⁄gAºay
(
tif
,
ndú
,
dú
,
èg
,tif->
tif_dú
.
td_ßm∂e•îpixñ
,
m
);

1306 
	`_TIFF‰ì
(
m
);

1307 (
o
);

1308 
	}
}

1311 #ifde‡
nŸdef


1313 
	$TIFFWrôeDúe˘‹yTagSl⁄g
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt32
 
vÆue
)

1315 i‡(
dú
==
NULL
)

1317 (*
ndú
)++;

1320 (
	`TIFFWrôeDúe˘‹yTagCheckedSl⁄g
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1321 
	}
}

1325 
	$TIFFWrôeDúe˘‹yTagSl⁄gAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt32
* 
vÆue
)

1327 i‡(
dú
==
NULL
)

1329 (*
ndú
)++;

1332 (
	`TIFFWrôeDúe˘‹yTagCheckedSl⁄gAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1333 
	}
}

1337 
	$TIFFWrôeDúe˘‹yTagSl⁄gPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt32
 
vÆue
)

1339 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagSlongPerSample";

1340 
öt32
* 
m
;

1341 
öt32
* 
«
;

1342 
uöt16
 
nb
;

1343 
o
;

1344 i‡(
dú
==
NULL
)

1346 (*
ndú
)++;

1349 
m
=
	`_TIFFmÆloc
(
tif
->
tif_dú
.
td_ßm∂e•îpixñ
*(
öt32
));

1350 i‡(
m
==
NULL
)

1352 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1355 
«
=
m
, 
nb
=0;Çb<
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;Ça++,Çb++)

1356 *
«
=
vÆue
;

1357 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedSl⁄gAºay
(
tif
,
ndú
,
dú
,
èg
,tif->
tif_dú
.
td_ßm∂e•îpixñ
,
m
);

1358 
	`_TIFF‰ì
(
m
);

1359 (
o
);

1360 
	}
}

1363 #ifde‡
nŸdef


1365 
	$TIFFWrôeDúe˘‹yTagL⁄g8
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
uöt64
 
vÆue
)

1367 i‡(
dú
==
NULL
)

1369 (*
ndú
)++;

1372 (
	`TIFFWrôeDúe˘‹yTagCheckedL⁄g8
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1373 
	}
}

1377 
	$TIFFWrôeDúe˘‹yTagL⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
)

1379 i‡(
dú
==
NULL
)

1381 (*
ndú
)++;

1384 (
	`TIFFWrôeDúe˘‹yTagCheckedL⁄g8Aºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1385 
	}
}

1387 #ifde‡
nŸdef


1389 
	$TIFFWrôeDúe˘‹yTagSl⁄g8
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt64
 
vÆue
)

1391 i‡(
dú
==
NULL
)

1393 (*
ndú
)++;

1396 (
	`TIFFWrôeDúe˘‹yTagCheckedSl⁄g8
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1397 
	}
}

1401 
	$TIFFWrôeDúe˘‹yTagSl⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt64
* 
vÆue
)

1403 i‡(
dú
==
NULL
)

1405 (*
ndú
)++;

1408 (
	`TIFFWrôeDúe˘‹yTagCheckedSl⁄g8Aºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1409 
	}
}

1412 
	$TIFFWrôeDúe˘‹yTagR©i⁄Æ
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
)

1414 i‡(
dú
==
NULL
)

1416 (*
ndú
)++;

1419 (
	`TIFFWrôeDúe˘‹yTagCheckedR©i⁄Æ
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1420 
	}
}

1423 
	$TIFFWrôeDúe˘‹yTagR©i⁄ÆAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
)

1425 i‡(
dú
==
NULL
)

1427 (*
ndú
)++;

1430 (
	`TIFFWrôeDúe˘‹yTagCheckedR©i⁄ÆAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1431 
	}
}

1434 
	$TIFFWrôeDúe˘‹yTagSøti⁄ÆAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
)

1436 i‡(
dú
==
NULL
)

1438 (*
ndú
)++;

1441 (
	`TIFFWrôeDúe˘‹yTagCheckedSøti⁄ÆAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1442 
	}
}

1444 #ifde‡
nŸdef


1445 
	$TIFFWrôeDúe˘‹yTagFlﬂt
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
)

1447 i‡(
dú
==
NULL
)

1449 (*
ndú
)++;

1452 (
	`TIFFWrôeDúe˘‹yTagCheckedFlﬂt
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1453 
	}
}

1456 
	$TIFFWrôeDúe˘‹yTagFlﬂtAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
)

1458 i‡(
dú
==
NULL
)

1460 (*
ndú
)++;

1463 (
	`TIFFWrôeDúe˘‹yTagCheckedFlﬂtAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1464 
	}
}

1467 
	$TIFFWrôeDúe˘‹yTagFlﬂtPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
)

1469 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagFloatPerSample";

1470 * 
m
;

1471 * 
«
;

1472 
uöt16
 
nb
;

1473 
o
;

1474 i‡(
dú
==
NULL
)

1476 (*
ndú
)++;

1479 
m
=
	`_TIFFmÆloc
(
tif
->
tif_dú
.
td_ßm∂e•îpixñ
*());

1480 i‡(
m
==
NULL
)

1482 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1485 
«
=
m
, 
nb
=0;Çb<
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;Ça++,Çb++)

1486 *
«
=
vÆue
;

1487 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedFlﬂtAºay
(
tif
,
ndú
,
dú
,
èg
,tif->
tif_dú
.
td_ßm∂e•îpixñ
,
m
);

1488 
	`_TIFF‰ì
(
m
);

1489 (
o
);

1490 
	}
}

1493 #ifde‡
nŸdef


1494 
	$TIFFWrôeDúe˘‹yTagDoubÀ
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
)

1496 i‡(
dú
==
NULL
)

1498 (*
ndú
)++;

1501 (
	`TIFFWrôeDúe˘‹yTagCheckedDoubÀ
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1502 
	}
}

1505 
	$TIFFWrôeDúe˘‹yTagDoubÀAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
)

1507 i‡(
dú
==
NULL
)

1509 (*
ndú
)++;

1512 (
	`TIFFWrôeDúe˘‹yTagCheckedDoubÀAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1513 
	}
}

1516 
	$TIFFWrôeDúe˘‹yTagDoubÀPîSam∂e
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
)

1518 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagDoublePerSample";

1519 * 
m
;

1520 * 
«
;

1521 
uöt16
 
nb
;

1522 
o
;

1523 i‡(
dú
==
NULL
)

1525 (*
ndú
)++;

1528 
m
=
	`_TIFFmÆloc
(
tif
->
tif_dú
.
td_ßm∂e•îpixñ
*());

1529 i‡(
m
==
NULL
)

1531 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1534 
«
=
m
, 
nb
=0;Çb<
tif
->
tif_dú
.
td_ßm∂e•îpixñ
;Ça++,Çb++)

1535 *
«
=
vÆue
;

1536 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedDoubÀAºay
(
tif
,
ndú
,
dú
,
èg
,tif->
tif_dú
.
td_ßm∂e•îpixñ
,
m
);

1537 
	`_TIFF‰ì
(
m
);

1538 (
o
);

1539 
	}
}

1543 
	$TIFFWrôeDúe˘‹yTagIfdAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt32* 
vÆue
)

1545 i‡(
dú
==
NULL
)

1547 (*
ndú
)++;

1550 (
	`TIFFWrôeDúe˘‹yTagCheckedIfdAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1551 
	}
}

1553 #ifde‡
nŸdef


1555 
	$TIFFWrôeDúe˘‹yTagIfd8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
)

1557 i‡(
dú
==
NULL
)

1559 (*
ndú
)++;

1562 (
	`TIFFWrôeDúe˘‹yTagCheckedIfd8Aºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
));

1563 
	}
}

1567 
	$TIFFWrôeDúe˘‹yTagSh‹tL⁄g
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
vÆue
)

1569 i‡(
dú
==
NULL
)

1571 (*
ndú
)++;

1574 i‡(
vÆue
<=0xFFFF)

1575 (
	`TIFFWrôeDúe˘‹yTagCheckedSh‹t
(
tif
,
ndú
,
dú
,
èg
,(
uöt16
)
vÆue
));

1577 (
	`TIFFWrôeDúe˘‹yTagCheckedL⁄g
(
tif
,
ndú
,
dú
,
èg
,
vÆue
));

1578 
	}
}

1588 
	$TIFFWrôeDúe˘‹yTagL⁄gL⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
)

1590 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagLongLong8Array";

1591 
uöt64
* 
ma
;

1592 
uöt32
 
mb
;

1593 
uöt32
* 
p
;

1594 
uöt32
* 
q
;

1595 
o
;

1598 i‡(
dú
==
NULL
)

1600 (*
ndú
)++;

1605 if–
tif
->
tif_Êags
&
TIFF_BIGTIFF
 )

1606  
	`TIFFWrôeDúe˘‹yTagCheckedL⁄g8Aºay
(
tif
,
ndú
,
dú
,

1607 
èg
,
cou¡
,
vÆue
);

1614 
p
 = 
	`_TIFFmÆloc
(
cou¡
*(
uöt32
));

1615 i‡(
p
==
NULL
)

1617 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1621 
q
=
p
, 
ma
=
vÆue
, 
mb
=0; mb<
cou¡
; ma++, mb++, q++)

1623 i‡(*
ma
>0xFFFFFFFF)

1625 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

1627 
	`_TIFF‰ì
(
p
);

1630 *
q
(
uöt32
)(*
ma
);

1633 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedL⁄gAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
p
);

1634 
	`_TIFF‰ì
(
p
);

1636 (
o
);

1637 
	}
}

1646 
	$TIFFWrôeDúe˘‹yTagIfdIfd8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
)

1648 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagIfdIfd8Array";

1649 
uöt64
* 
ma
;

1650 
uöt32
 
mb
;

1651 
uöt32
* 
p
;

1652 
uöt32
* 
q
;

1653 
o
;

1656 i‡(
dú
==
NULL
)

1658 (*
ndú
)++;

1663 if–
tif
->
tif_Êags
&
TIFF_BIGTIFF
 )

1664  
	`TIFFWrôeDúe˘‹yTagCheckedIfd8Aºay
(
tif
,
ndú
,
dú
,

1665 
èg
,
cou¡
,
vÆue
);

1672 
p
 = 
	`_TIFFmÆloc
(
cou¡
*(
uöt32
));

1673 i‡(
p
==
NULL
)

1675 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1679 
q
=
p
, 
ma
=
vÆue
, 
mb
=0; mb<
cou¡
; ma++, mb++, q++)

1681 i‡(*
ma
>0xFFFFFFFF)

1683 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

1685 
	`_TIFF‰ì
(
p
);

1688 *
q
(
uöt32
)(*
ma
);

1691 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedIfdAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
p
);

1692 
	`_TIFF‰ì
(
p
);

1694 (
o
);

1695 
	}
}

1697 #ifde‡
nŸdef


1699 
	$TIFFWrôeDúe˘‹yTagSh‹tL⁄gL⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
)

1701 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagShortLongLong8Array";

1702 
uöt64
* 
ma
;

1703 
uöt32
 
mb
;

1704 
uöt8
 
n
;

1705 
o
;

1706 i‡(
dú
==
NULL
)

1708 (*
ndú
)++;

1711 
n
=0;

1712 
ma
=
vÆue
, 
mb
=0; mb<
cou¡
; ma++, mb++)

1714 i‡((
n
==0)&&(*
ma
>0xFFFF))

1715 
n
=1;

1716 i‡((
n
==1)&&(*
ma
>0xFFFFFFFF))

1718 
n
=2;

1722 i‡(
n
==0)

1724 
uöt16
* 
p
;

1725 
uöt16
* 
q
;

1726 
p
=
	`_TIFFmÆloc
(
cou¡
*(
uöt16
));

1727 i‡(
p
==
NULL
)

1729 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1732 
ma
=
vÆue
, 
mb
=0, 
q
=
p
; mb<
cou¡
; ma++, mb++, q++)

1733 *
q
=(
uöt16
)(*
ma
);

1734 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedSh‹tAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
p
);

1735 
	`_TIFF‰ì
(
p
);

1737 i‡(
n
==1)

1739 
uöt32
* 
p
;

1740 
uöt32
* 
q
;

1741 
p
=
	`_TIFFmÆloc
(
cou¡
*(
uöt32
));

1742 i‡(
p
==
NULL
)

1744 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1747 
ma
=
vÆue
, 
mb
=0, 
q
=
p
; mb<
cou¡
; ma++, mb++, q++)

1748 *
q
=(
uöt32
)(*
ma
);

1749 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedL⁄gAºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
p
);

1750 
	`_TIFF‰ì
(
p
);

1754 
	`as£π
(
n
==2);

1755 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedL⁄g8Aºay
(
tif
,
ndú
,
dú
,
èg
,
cou¡
,
vÆue
);

1757 (
o
);

1758 
	}
}

1761 
	$TIFFWrôeDúe˘‹yTagCﬁ‹m≠
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
)

1763 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagColormap";

1764 
uöt32
 
m
;

1765 
uöt16
* 
n
;

1766 
o
;

1767 i‡(
dú
==
NULL
)

1769 (*
ndú
)++;

1772 
m
=(1<<
tif
->
tif_dú
.
td_bô•îßm∂e
);

1773 
n
=
	`_TIFFmÆloc
(3*
m
*(
uöt16
));

1774 i‡(
n
==
NULL
)

1776 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1779 
	`_TIFFmem˝y
(&
n
[0],
tif
->
tif_dú
.
td_cﬁ‹m≠
[0],
m
*(
uöt16
));

1780 
	`_TIFFmem˝y
(&
n
[
m
],
tif
->
tif_dú
.
td_cﬁ‹m≠
[1],m*(
uöt16
));

1781 
	`_TIFFmem˝y
(&
n
[2*
m
],
tif
->
tif_dú
.
td_cﬁ‹m≠
[2],m*(
uöt16
));

1782 
o
=
	`TIFFWrôeDúe˘‹yTagCheckedSh‹tAºay
(
tif
,
ndú
,
dú
,
TIFFTAG_COLORMAP
,3*
m
,
n
);

1783 
	`_TIFF‰ì
(
n
);

1784 (
o
);

1785 
	}
}

1788 
	$TIFFWrôeDúe˘‹yTagTøns„rfun˘i⁄
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
)

1790 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagTransferfunction";

1791 
uöt32
 
m
;

1792 
uöt16
 
n
;

1793 
uöt16
* 
o
;

1794 
p
;

1795 i‡(
dú
==
NULL
)

1797 (*
ndú
)++;

1800 
m
=(1<<
tif
->
tif_dú
.
td_bô•îßm∂e
);

1801 
n
=
tif
->
tif_dú
.
td_ßm∂e•îpixñ
-tif->tif_dú.
td_exåaßm∂es
;

1808 i‡(
n
>3)

1809 
n
=3;

1810 i‡(
n
==3)

1812 i‡(!
	`_TIFFmemcmp
(
tif
->
tif_dú
.
td_å™s„rfun˘i⁄
[0],tif->tif_dú.td_å™s„rfun˘i⁄[2],
m
*(
uöt16
)))

1813 
n
=2;

1815 i‡(
n
==2)

1817 i‡(!
	`_TIFFmemcmp
(
tif
->
tif_dú
.
td_å™s„rfun˘i⁄
[0],tif->tif_dú.td_å™s„rfun˘i⁄[1],
m
*(
uöt16
)))

1818 
n
=1;

1820 i‡(
n
==0)

1821 
n
=1;

1822 
o
=
	`_TIFFmÆloc
(
n
*
m
*(
uöt16
));

1823 i‡(
o
==
NULL
)

1825 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1828 
	`_TIFFmem˝y
(&
o
[0],
tif
->
tif_dú
.
td_å™s„rfun˘i⁄
[0],
m
*(
uöt16
));

1829 i‡(
n
>1)

1830 
	`_TIFFmem˝y
(&
o
[
m
],
tif
->
tif_dú
.
td_å™s„rfun˘i⁄
[1],m*(
uöt16
));

1831 i‡(
n
>2)

1832 
	`_TIFFmem˝y
(&
o
[2*
m
],
tif
->
tif_dú
.
td_å™s„rfun˘i⁄
[2],m*(
uöt16
));

1833 
p
=
	`TIFFWrôeDúe˘‹yTagCheckedSh‹tAºay
(
tif
,
ndú
,
dú
,
TIFFTAG_TRANSFERFUNCTION
,
n
*
m
,
o
);

1834 
	`_TIFF‰ì
(
o
);

1835 (
p
);

1836 
	}
}

1839 
	$TIFFWrôeDúe˘‹yTagSubifd
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
)

1841 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagSubifd";

1842 
uöt64
 
m
;

1843 
n
;

1844 i‡(
tif
->
tif_dú
.
td_nsubifd
==0)

1846 i‡(
dú
==
NULL
)

1848 (*
ndú
)++;

1851 
m
=
tif
->
tif_d©aoff
;

1852 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

1854 
uöt32
* 
o
;

1855 
uöt64
* 
∑
;

1856 
uöt32
* 
pb
;

1857 
uöt16
 
p
;

1858 
o
=
	`_TIFFmÆloc
(
tif
->
tif_dú
.
td_nsubifd
*(
uöt32
));

1859 i‡(
o
==
NULL
)

1861 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1864 
∑
=
tif
->
tif_dú
.
td_subifd
;

1865 
pb
=
o
;

1866 
p
=0;Ö < 
tif
->
tif_dú
.
td_nsubifd
;Ö++)

1868 
	`as£π
(
∑
 != 0);

1869 
	`as£π
(*
∑
 <= 0xFFFFFFFFUL);

1870 *
pb
++=(
uöt32
)(*
∑
++);

1872 
n
=
	`TIFFWrôeDúe˘‹yTagCheckedIfdAºay
(
tif
,
ndú
,
dú
,
TIFFTAG_SUBIFD
,tif->
tif_dú
.
td_nsubifd
,
o
);

1873 
	`_TIFF‰ì
(
o
);

1876 
n
=
	`TIFFWrôeDúe˘‹yTagCheckedIfd8Aºay
(
tif
,
ndú
,
dú
,
TIFFTAG_SUBIFD
,tif->
tif_dú
.
td_nsubifd
,tif->tif_dú.
td_subifd
);

1877 i‡(!
n
)

1887 
tif
->
tif_Êags
|=
TIFF_INSUBIFD
;

1888 
tif
->
tif_nsubifd
Òif->
tif_dú
.
td_nsubifd
;

1889 i‡(
tif
->
tif_dú
.
td_nsubifd
==1)

1890 
tif
->
tif_subifdoff
=0;

1892 
tif
->
tif_subifdoff
=
m
;

1894 
	}
}

1897 
	$TIFFWrôeDúe˘‹yTagCheckedAscii
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
)

1899 
	`as£π
(()==1);

1900 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_ASCII
,
cou¡
,cou¡,
vÆue
));

1901 
	}
}

1904 
	$TIFFWrôeDúe˘‹yTagCheckedUndeföedAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt8
* 
vÆue
)

1906 
	`as£π
((
uöt8
)==1);

1907 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_UNDEFINED
,
cou¡
,cou¡,
vÆue
));

1908 
	}
}

1910 #ifde‡
nŸdef


1912 
	$TIFFWrôeDúe˘‹yTagCheckedByã
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
uöt8
 
vÆue
)

1914 
	`as£π
((
uöt8
)==1);

1915 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_BYTE
,1,1,&
vÆue
));

1916 
	}
}

1920 
	$TIFFWrôeDúe˘‹yTagCheckedByãAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt8
* 
vÆue
)

1922 
	`as£π
((
uöt8
)==1);

1923 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_BYTE
,
cou¡
,cou¡,
vÆue
));

1924 
	}
}

1926 #ifde‡
nŸdef


1928 
	$TIFFWrôeDúe˘‹yTagCheckedSbyã
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt8
 
vÆue
)

1930 
	`as£π
((
öt8
)==1);

1931 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_SBYTE
,1,1,&
vÆue
));

1932 
	}
}

1936 
	$TIFFWrôeDúe˘‹yTagCheckedSbyãAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt8
* 
vÆue
)

1938 
	`as£π
((
öt8
)==1);

1939 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_SBYTE
,
cou¡
,cou¡,
vÆue
));

1940 
	}
}

1943 
	$TIFFWrôeDúe˘‹yTagCheckedSh‹t
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt16 
vÆue
)

1945 
uöt16
 
m
;

1946 
	`as£π
((
uöt16
)==2);

1947 
m
=
vÆue
;

1948 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1949 
	`TIFFSwabSh‹t
(&
m
);

1950 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_SHORT
,1,2,&
m
));

1951 
	}
}

1954 
	$TIFFWrôeDúe˘‹yTagCheckedSh‹tAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt16* 
vÆue
)

1956 
	`as£π
(
cou¡
<0x80000000);

1957 
	`as£π
((
uöt16
)==2);

1958 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1959 
	`TIFFSwabAºayOfSh‹t
(
vÆue
,
cou¡
);

1960 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_SHORT
,
cou¡
,cou¡*2,
vÆue
));

1961 
	}
}

1963 #ifde‡
nŸdef


1965 
	$TIFFWrôeDúe˘‹yTagCheckedSsh‹t
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt16
 
vÆue
)

1967 
öt16
 
m
;

1968 
	`as£π
((
öt16
)==2);

1969 
m
=
vÆue
;

1970 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1971 
	`TIFFSwabSh‹t
((
uöt16
*)(&
m
));

1972 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_SSHORT
,1,2,&
m
));

1973 
	}
}

1977 
	$TIFFWrôeDúe˘‹yTagCheckedSsh‹tAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt16
* 
vÆue
)

1979 
	`as£π
(
cou¡
<0x80000000);

1980 
	`as£π
((
öt16
)==2);

1981 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1982 
	`TIFFSwabAºayOfSh‹t
((
uöt16
*)
vÆue
,
cou¡
);

1983 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_SSHORT
,
cou¡
,cou¡*2,
vÆue
));

1984 
	}
}

1987 
	$TIFFWrôeDúe˘‹yTagCheckedL⁄g
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
vÆue
)

1989 
uöt32
 
m
;

1990 
	`as£π
((
uöt32
)==4);

1991 
m
=
vÆue
;

1992 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

1993 
	`TIFFSwabL⁄g
(&
m
);

1994 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_LONG
,1,4,&
m
));

1995 
	}
}

1998 
	$TIFFWrôeDúe˘‹yTagCheckedL⁄gAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt32* 
vÆue
)

2000 
	`as£π
(
cou¡
<0x40000000);

2001 
	`as£π
((
uöt32
)==4);

2002 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2003 
	`TIFFSwabAºayOfL⁄g
(
vÆue
,
cou¡
);

2004 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_LONG
,
cou¡
,cou¡*4,
vÆue
));

2005 
	}
}

2007 #ifde‡
nŸdef


2009 
	$TIFFWrôeDúe˘‹yTagCheckedSl⁄g
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt32
 
vÆue
)

2011 
öt32
 
m
;

2012 
	`as£π
((
öt32
)==4);

2013 
m
=
vÆue
;

2014 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2015 
	`TIFFSwabL⁄g
((
uöt32
*)(&
m
));

2016 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_SLONG
,1,4,&
m
));

2017 
	}
}

2021 
	$TIFFWrôeDúe˘‹yTagCheckedSl⁄gAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt32
* 
vÆue
)

2023 
	`as£π
(
cou¡
<0x40000000);

2024 
	`as£π
((
öt32
)==4);

2025 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2026 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*)
vÆue
,
cou¡
);

2027 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_SLONG
,
cou¡
,cou¡*4,
vÆue
));

2028 
	}
}

2030 #ifde‡
nŸdef


2032 
	$TIFFWrôeDúe˘‹yTagCheckedL⁄g8
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
uöt64
 
vÆue
)

2034 
uöt64
 
m
;

2035 
	`as£π
((
uöt64
)==8);

2036 
	`as£π
(
tif
->
tif_Êags
&
TIFF_BIGTIFF
);

2037 
m
=
vÆue
;

2038 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2039 
	`TIFFSwabL⁄g8
(&
m
);

2040 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_LONG8
,1,8,&
m
));

2041 
	}
}

2045 
	$TIFFWrôeDúe˘‹yTagCheckedL⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
)

2047 
	`as£π
(
cou¡
<0x20000000);

2048 
	`as£π
((
uöt64
)==8);

2049 
	`as£π
(
tif
->
tif_Êags
&
TIFF_BIGTIFF
);

2050 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2051 
	`TIFFSwabAºayOfL⁄g8
(
vÆue
,
cou¡
);

2052 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_LONG8
,
cou¡
,cou¡*8,
vÆue
));

2053 
	}
}

2055 #ifde‡
nŸdef


2057 
	$TIFFWrôeDúe˘‹yTagCheckedSl⁄g8
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
öt64
 
vÆue
)

2059 
öt64
 
m
;

2060 
	`as£π
((
öt64
)==8);

2061 
	`as£π
(
tif
->
tif_Êags
&
TIFF_BIGTIFF
);

2062 
m
=
vÆue
;

2063 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2064 
	`TIFFSwabL⁄g8
((
uöt64
*)(&
m
));

2065 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_SLONG8
,1,8,&
m
));

2066 
	}
}

2070 
	$TIFFWrôeDúe˘‹yTagCheckedSl⁄g8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
öt64
* 
vÆue
)

2072 
	`as£π
(
cou¡
<0x20000000);

2073 
	`as£π
((
öt64
)==8);

2074 
	`as£π
(
tif
->
tif_Êags
&
TIFF_BIGTIFF
);

2075 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2076 
	`TIFFSwabAºayOfL⁄g8
((
uöt64
*)
vÆue
,
cou¡
);

2077 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_SLONG8
,
cou¡
,cou¡*8,
vÆue
));

2078 
	}
}

2081 
	$TIFFWrôeDúe˘‹yTagCheckedR©i⁄Æ
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
)

2083 
uöt32
 
m
[2];

2084 
	`as£π
(
vÆue
>=0.0);

2085 
	`as£π
((
uöt32
)==4);

2086 i‡(
vÆue
<=0.0)

2088 
m
[0]=0;

2089 
m
[1]=1;

2091 i‡(
vÆue
==()(
uöt32
)value)

2093 
m
[0]=(
uöt32
)
vÆue
;

2094 
m
[1]=1;

2096 i‡(
vÆue
<1.0)

2098 
m
[0]=(
uöt32
)(
vÆue
*0xFFFFFFFF);

2099 
m
[1]=0xFFFFFFFF;

2103 
m
[0]=0xFFFFFFFF;

2104 
m
[1]=(
uöt32
)(0xFFFFFFFF/
vÆue
);

2106 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2108 
	`TIFFSwabL⁄g
(&
m
[0]);

2109 
	`TIFFSwabL⁄g
(&
m
[1]);

2111 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_RATIONAL
,1,8,&
m
[0]));

2112 
	}
}

2115 
	$TIFFWrôeDúe˘‹yTagCheckedR©i⁄ÆAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
)

2117 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagCheckedRationalArray";

2118 
uöt32
* 
m
;

2119 * 
«
;

2120 
uöt32
* 
nb
;

2121 
uöt32
 
nc
;

2122 
o
;

2123 
	`as£π
((
uöt32
)==4);

2124 
m
=
	`_TIFFmÆloc
(
cou¡
*2*(
uöt32
));

2125 i‡(
m
==
NULL
)

2127 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

2130 
«
=
vÆue
, 
nb
=
m
, 
nc
=0;Çc<
cou¡
;Ça++,Çb+=2,Çc++)

2132 i‡(*
«
<=0.0)

2134 
nb
[0]=0;

2135 
nb
[1]=1;

2137 i‡(*
«
==()(
uöt32
)(*na))

2139 
nb
[0]=(
uöt32
)(*
«
);

2140 
nb
[1]=1;

2142 i‡(*
«
<1.0)

2144 
nb
[0]=(
uöt32
)((*
«
)*0xFFFFFFFF);

2145 
nb
[1]=0xFFFFFFFF;

2149 
nb
[0]=0xFFFFFFFF;

2150 
nb
[1]=(
uöt32
)(0xFFFFFFFF/(*
«
));

2153 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2154 
	`TIFFSwabAºayOfL⁄g
(
m
,
cou¡
*2);

2155 
o
=
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_RATIONAL
,
cou¡
,cou¡*8,&
m
[0]);

2156 
	`_TIFF‰ì
(
m
);

2157 (
o
);

2158 
	}
}

2161 
	$TIFFWrôeDúe˘‹yTagCheckedSøti⁄ÆAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
)

2163 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagCheckedSrationalArray";

2164 
öt32
* 
m
;

2165 * 
«
;

2166 
öt32
* 
nb
;

2167 
uöt32
 
nc
;

2168 
o
;

2169 
	`as£π
((
öt32
)==4);

2170 
m
=
	`_TIFFmÆloc
(
cou¡
*2*(
öt32
));

2171 i‡(
m
==
NULL
)

2173 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

2176 
«
=
vÆue
, 
nb
=
m
, 
nc
=0;Çc<
cou¡
;Ça++,Çb+=2,Çc++)

2178 i‡(*
«
<0.0)

2180 i‡(*
«
==(
öt32
)(*na))

2182 
nb
[0]=(
öt32
)(*
«
);

2183 
nb
[1]=1;

2185 i‡(*
«
>-1.0)

2187 
nb
[0]=-(
öt32
)((-*
«
)*0x7FFFFFFF);

2188 
nb
[1]=0x7FFFFFFF;

2192 
nb
[0]=-0x7FFFFFFF;

2193 
nb
[1]=(
öt32
)(0x7FFFFFFF/(-*
«
));

2198 i‡(*
«
==(
öt32
)(*na))

2200 
nb
[0]=(
öt32
)(*
«
);

2201 
nb
[1]=1;

2203 i‡(*
«
<1.0)

2205 
nb
[0]=(
öt32
)((*
«
)*0x7FFFFFFF);

2206 
nb
[1]=0x7FFFFFFF;

2210 
nb
[0]=0x7FFFFFFF;

2211 
nb
[1]=(
öt32
)(0x7FFFFFFF/(*
«
));

2215 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2216 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*)
m
,
cou¡
*2);

2217 
o
=
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_SRATIONAL
,
cou¡
,cou¡*8,&
m
[0]);

2218 
	`_TIFF‰ì
(
m
);

2219 (
o
);

2220 
	}
}

2222 #ifde‡
nŸdef


2224 
	$TIFFWrôeDúe˘‹yTagCheckedFlﬂt
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
)

2226 
m
;

2227 
	`as£π
(()==4);

2228 
m
=
vÆue
;

2229 
	`TIFFCvtN©iveToIEEEFlﬂt
(
tif
,1,&
m
);

2230 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2231 
	`TIFFSwabFlﬂt
(&
m
);

2232 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_FLOAT
,1,4,&
m
));

2233 
	}
}

2237 
	$TIFFWrôeDúe˘‹yTagCheckedFlﬂtAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
)

2239 
	`as£π
(
cou¡
<0x40000000);

2240 
	`as£π
(()==4);

2241 
	`TIFFCvtN©iveToIEEEFlﬂt
(
tif
,
cou¡
,&
vÆue
);

2242 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2243 
	`TIFFSwabAºayOfFlﬂt
(
vÆue
,
cou¡
);

2244 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_FLOAT
,
cou¡
,cou¡*4,
vÆue
));

2245 
	}
}

2247 #ifde‡
nŸdef


2249 
	$TIFFWrôeDúe˘‹yTagCheckedDoubÀ
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, 
vÆue
)

2251 
m
;

2252 
	`as£π
(()==8);

2253 
m
=
vÆue
;

2254 
	`TIFFCvtN©iveToIEEEDoubÀ
(
tif
,1,&
m
);

2255 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2256 
	`TIFFSwabDoubÀ
(&
m
);

2257 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_DOUBLE
,1,8,&
m
));

2258 
	}
}

2262 
	$TIFFWrôeDúe˘‹yTagCheckedDoubÀAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, * 
vÆue
)

2264 
	`as£π
(
cou¡
<0x20000000);

2265 
	`as£π
(()==8);

2266 
	`TIFFCvtN©iveToIEEEDoubÀ
(
tif
,
cou¡
,&
vÆue
);

2267 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2268 
	`TIFFSwabAºayOfDoubÀ
(
vÆue
,
cou¡
);

2269 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_DOUBLE
,
cou¡
,cou¡*8,
vÆue
));

2270 
	}
}

2273 
	$TIFFWrôeDúe˘‹yTagCheckedIfdAºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, uöt32* 
vÆue
)

2275 
	`as£π
(
cou¡
<0x40000000);

2276 
	`as£π
((
uöt32
)==4);

2277 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2278 
	`TIFFSwabAºayOfL⁄g
(
vÆue
,
cou¡
);

2279 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_IFD
,
cou¡
,cou¡*4,
vÆue
));

2280 
	}
}

2283 
	$TIFFWrôeDúe˘‹yTagCheckedIfd8Aºay
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt32 
cou¡
, 
uöt64
* 
vÆue
)

2285 
	`as£π
(
cou¡
<0x20000000);

2286 
	`as£π
((
uöt64
)==8);

2287 
	`as£π
(
tif
->
tif_Êags
&
TIFF_BIGTIFF
);

2288 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2289 
	`TIFFSwabAºayOfL⁄g8
(
vÆue
,
cou¡
);

2290 (
	`TIFFWrôeDúe˘‹yTagD©a
(
tif
,
ndú
,
dú
,
èg
,
TIFF_IFD8
,
cou¡
,cou¡*8,
vÆue
));

2291 
	}
}

2294 
	$TIFFWrôeDúe˘‹yTagD©a
(
TIFF
* 
tif
, 
uöt32
* 
ndú
, 
TIFFDúE¡ry
* 
dú
, 
uöt16
 
èg
, uöt16 
d©©y≥
, uöt32 
cou¡
, uöt32 
d©Æígth
, * 
d©a
)

2296 c⁄° 
moduÀ
[] = "TIFFWriteDirectoryTagData";

2297 
uöt32
 
m
;

2298 
m
=0;

2299 
m
<(*
ndú
))

2301 
	`as£π
(
dú
[
m
].
tdú_èg
!=
èg
);

2302 i‡(
dú
[
m
].
tdú_èg
>
èg
)

2304 
m
++;

2306 i‡(
m
<(*
ndú
))

2308 
uöt32
 
n
;

2309 
n
=*
ndú
;Ç>
m
;Ç--)

2310 
dú
[
n
]=dir[n-1];

2312 
dú
[
m
].
tdú_èg
=
èg
;

2313 
dú
[
m
].
tdú_ty≥
=
d©©y≥
;

2314 
dú
[
m
].
tdú_cou¡
=
cou¡
;

2315 
dú
[
m
].
tdú_off£t
.
toff_l⁄g8
 = 0;

2316 i‡(
d©Æígth
<=((
tif
->
tif_Êags
&
TIFF_BIGTIFF
)?0x8U:0x4U))

2317 
	`_TIFFmem˝y
(&
dú
[
m
].
tdú_off£t
,
d©a
,
d©Æígth
);

2320 
uöt64
 
«
,
nb
;

2321 
«
=
tif
->
tif_d©aoff
;

2322 
nb
=
«
+
d©Æígth
;

2323 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2324 
nb
=(
uöt32
)nb;

2325 i‡((
nb
<
«
)||“b<
d©Æígth
))

2327 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Maximum TIFF file sizeÉxceeded");

2330 i‡(!
	`SìkOK
(
tif
,
«
))

2332 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"IOÉrror writingÅag data");

2335 
	`as£π
(
d©Æígth
<0x80000000UL);

2336 i‡(!
	`WrôeOK
(
tif
,
d©a
,(
tmsize_t
)
d©Æígth
))

2338 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"IOÉrror writingÅag data");

2341 
tif
->
tif_d©aoff
=
nb
;

2342 i‡(
tif
->
tif_d©aoff
&1)

2343 
tif
->
tif_d©aoff
++;

2344 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2346 
uöt32
 
o
;

2347 
o
=(
uöt32
)
«
;

2348 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2349 
	`TIFFSwabL⁄g
(&
o
);

2350 
	`_TIFFmem˝y
(&
dú
[
m
].
tdú_off£t
,&
o
,4);

2354 
dú
[
m
].
tdú_off£t
.
toff_l⁄g8
 = 
«
;

2355 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2356 
	`TIFFSwabL⁄g8
(&
dú
[
m
].
tdú_off£t
.
toff_l⁄g8
);

2359 (*
ndú
)++;

2361 
	}
}

2367 
	$TIFFLökDúe˘‹y
(
TIFF
* 
tif
)

2369 c⁄° 
moduÀ
[] = "TIFFLinkDirectory";

2371 
tif
->
tif_dúoff
 = (
	`TIFFSìkFûe
—if,0,
SEEK_END
)+1) &~ 1;

2376 i‡(
tif
->
tif_Êags
 & 
TIFF_INSUBIFD
)

2378 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2380 
uöt32
 
m
;

2381 
m
 = (
uöt32
)
tif
->
tif_dúoff
;

2382 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

2383 
	`TIFFSwabL⁄g
(&
m
);

2384 (Ë
	`TIFFSìkFûe
(
tif
,Åif->
tif_subifdoff
, 
SEEK_SET
);

2385 i‡(!
	`WrôeOK
(
tif
, &
m
, 4)) {

2386 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2395 i‡(--
tif
->
tif_nsubifd
)

2396 
tif
->
tif_subifdoff
 += 4;

2398 
tif
->
tif_Êags
 &~
TIFF_INSUBIFD
;

2403 
uöt64
 
m
;

2404 
m
 = 
tif
->
tif_dúoff
;

2405 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

2406 
	`TIFFSwabL⁄g8
(&
m
);

2407 (Ë
	`TIFFSìkFûe
(
tif
,Åif->
tif_subifdoff
, 
SEEK_SET
);

2408 i‡(!
	`WrôeOK
(
tif
, &
m
, 8)) {

2409 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2418 i‡(--
tif
->
tif_nsubifd
)

2419 
tif
->
tif_subifdoff
 += 8;

2421 
tif
->
tif_Êags
 &~
TIFF_INSUBIFD
;

2426 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2428 
uöt32
 
m
;

2429 
uöt32
 
√xtdú
;

2430 
m
 = (
uöt32
)(
tif
->
tif_dúoff
);

2431 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

2432 
	`TIFFSwabL⁄g
(&
m
);

2433 i‡(
tif
->
tif_hódî
.
˛assic
.
tiff_dúoff
 == 0) {

2437 
tif
->
tif_hódî
.
˛assic
.
tiff_dúoff
 = (
uöt32
Ëtif->
tif_dúoff
;

2438 (Ë
	`TIFFSìkFûe
(
tif
,4, 
SEEK_SET
);

2439 i‡(!
	`WrôeOK
(
tif
, &
m
, 4)) {

2440 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

2449 
√xtdú
 = 
tif
->
tif_hódî
.
˛assic
.
tiff_dúoff
;

2451 
uöt16
 
dúcou¡
;

2452 
uöt32
 
√xäextdú
;

2454 i‡(!
	`SìkOK
(
tif
, 
√xtdú
) ||

2455 !
	`RódOK
(
tif
, &
dúcou¡
, 2)) {

2456 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2460 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

2461 
	`TIFFSwabSh‹t
(&
dúcou¡
);

2462 (Ë
	`TIFFSìkFûe
(
tif
,

2463 
√xtdú
+2+
dúcou¡
*12, 
SEEK_SET
);

2464 i‡(!
	`RódOK
(
tif
, &
√xäextdú
, 4)) {

2465 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2469 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

2470 
	`TIFFSwabL⁄g
(&
√xäextdú
);

2471 i‡(
√xäextdú
==0)

2473 (Ë
	`TIFFSìkFûe
(
tif
,

2474 
√xtdú
+2+
dúcou¡
*12, 
SEEK_SET
);

2475 i‡(!
	`WrôeOK
(
tif
, &
m
, 4)) {

2476 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2482 
√xtdú
=
√xäextdú
;

2487 
uöt64
 
m
;

2488 
uöt64
 
√xtdú
;

2489 
m
 = 
tif
->
tif_dúoff
;

2490 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

2491 
	`TIFFSwabL⁄g8
(&
m
);

2492 i‡(
tif
->
tif_hódî
.
big
.
tiff_dúoff
 == 0) {

2496 
tif
->
tif_hódî
.
big
.
tiff_dúoff
 =Åif->
tif_dúoff
;

2497 (Ë
	`TIFFSìkFûe
(
tif
,8, 
SEEK_SET
);

2498 i‡(!
	`WrôeOK
(
tif
, &
m
, 8)) {

2499 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

2508 
√xtdú
 = 
tif
->
tif_hódî
.
big
.
tiff_dúoff
;

2510 
uöt64
 
dúcou¡64
;

2511 
uöt16
 
dúcou¡
;

2512 
uöt64
 
√xäextdú
;

2514 i‡(!
	`SìkOK
(
tif
, 
√xtdú
) ||

2515 !
	`RódOK
(
tif
, &
dúcou¡64
, 8)) {

2516 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2520 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

2521 
	`TIFFSwabL⁄g8
(&
dúcou¡64
);

2522 i‡(
dúcou¡64
>0xFFFF)

2524 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2528 
dúcou¡
=(
uöt16
)
dúcou¡64
;

2529 (Ë
	`TIFFSìkFûe
(
tif
,

2530 
√xtdú
+8+
dúcou¡
*20, 
SEEK_SET
);

2531 i‡(!
	`RódOK
(
tif
, &
√xäextdú
, 8)) {

2532 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2536 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

2537 
	`TIFFSwabL⁄g8
(&
√xäextdú
);

2538 i‡(
√xäextdú
==0)

2540 (Ë
	`TIFFSìkFûe
(
tif
,

2541 
√xtdú
+8+
dúcou¡
*20, 
SEEK_SET
);

2542 i‡(!
	`WrôeOK
(
tif
, &
m
, 8)) {

2543 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2549 
√xtdú
=
√xäextdú
;

2553 
	}
}

2569 
	$_TIFFRewrôeFõld
(
TIFF
* 
tif
, 
uöt16
 
èg
, 
TIFFD©aTy≥
 
ö_d©©y≥
,

2570 
tmsize_t
 
cou¡
, * 
d©a
)

2572 c⁄° 
moduÀ
[] = "TIFFResetField";

2573 c⁄° 
TIFFFõld
* 
fù
 = 
NULL
;

2574 
uöt16
 
dúcou¡
;

2575 
tmsize_t
 
dúsize
;

2576 
uöt8
 
dúíåy_øw
[20];

2577 
uöt16
 
íåy_èg
 = 0;

2578 
uöt16
 
íåy_ty≥
 = 0;

2579 
uöt64
 
íåy_cou¡
 = 0;

2580 
uöt64
 
íåy_off£t
 = 0;

2581 
vÆue_ö_íåy
 = 0;

2582 
uöt64
 
ªad_off£t
;

2583 
uöt8
 *
buf_to_wrôe
 = 
NULL
;

2584 
TIFFD©aTy≥
 
d©©y≥
;

2589 
fù
 = 
	`TIFFFödFõld
(
tif
, 
èg
, 
TIFF_ANY
);

2594 if–
	`isM≠≥d
(
tif
) )

2596 
	`TIFFEº‹Ext
–
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2601 if–
tif
->
tif_dúoff
 == 0 )

2603 
	`TIFFEº‹Ext
–
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2611 i‡(!
	`SìkOK
(
tif
,Åif->
tif_dúoff
)) {

2612 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2614 
tif
->
tif_«me
);

2618 
ªad_off£t
 = 
tif
->
tif_dúoff
;

2620 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2622 i‡(!
	`RódOK
(
tif
, &
dúcou¡
,  (
uöt16
))) {

2623 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2625 
tif
->
tif_«me
);

2628 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

2629 
	`TIFFSwabSh‹t
(&
dúcou¡
);

2630 
dúsize
 = 12;

2631 
ªad_off£t
 += 2;

2633 
uöt64
 
dúcou¡64
;

2634 i‡(!
	`RódOK
(
tif
, &
dúcou¡64
,  (
uöt64
))) {

2635 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2637 
tif
->
tif_«me
);

2640 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

2641 
	`TIFFSwabL⁄g8
(&
dúcou¡64
);

2642 
dúcou¡
 = (
uöt16
)
dúcou¡64
;

2643 
dúsize
 = 20;

2644 
ªad_off£t
 += 8;

2650  
dúcou¡
 > 0 )

2652 i‡(!
	`RódOK
(
tif
, 
dúíåy_øw
, 
dúsize
)) {

2653 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2655 
tif
->
tif_«me
);

2659 
	`mem˝y
–&
íåy_èg
, 
dúíåy_øw
 + 0, (
uöt16
) );

2660 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2661 
	`TIFFSwabSh‹t
–&
íåy_èg
 );

2663 if–
íåy_èg
 =
èg
 )

2666 
ªad_off£t
 +
dúsize
;

2669 if–
íåy_èg
 !
èg
 )

2671 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2673 
tif
->
tif_«me
, 
èg
 );

2680 
	`mem˝y
–&
íåy_ty≥
, 
dúíåy_øw
 + 2, (
uöt16
) );

2681 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2682 
	`TIFFSwabSh‹t
–&
íåy_ty≥
 );

2684 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2686 
uöt32
 
vÆue
;

2688 
	`mem˝y
–&
vÆue
, 
dúíåy_øw
 + 4, (
uöt32
) );

2689 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2690 
	`TIFFSwabL⁄g
–&
vÆue
 );

2691 
íåy_cou¡
 = 
vÆue
;

2693 
	`mem˝y
–&
vÆue
, 
dúíåy_øw
 + 8, (
uöt32
) );

2694 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2695 
	`TIFFSwabL⁄g
–&
vÆue
 );

2696 
íåy_off£t
 = 
vÆue
;

2700 
	`mem˝y
–&
íåy_cou¡
, 
dúíåy_øw
 + 4, (
uöt64
) );

2701 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2702 
	`TIFFSwabL⁄g8
–&
íåy_cou¡
 );

2704 
	`mem˝y
–&
íåy_off£t
, 
dúíåy_øw
 + 12, (
uöt64
) );

2705 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2706 
	`TIFFSwabL⁄g8
–&
íåy_off£t
 );

2712 if–
	`TIFFD©aWidth
(
ö_d©©y≥
Ë=8 && !(
tif
->
tif_Êags
&
TIFF_BIGTIFF
) )

2714 if–
ö_d©©y≥
 =
TIFF_LONG8
 )

2715 
d©©y≥
 = 
TIFF_LONG
;

2716 if–
ö_d©©y≥
 =
TIFF_SLONG8
 )

2717 
d©©y≥
 = 
TIFF_SLONG
;

2718 if–
ö_d©©y≥
 =
TIFF_IFD8
 )

2719 
d©©y≥
 = 
TIFF_IFD
;

2721 
d©©y≥
 = 
ö_d©©y≥
;

2724 
d©©y≥
 = 
ö_d©©y≥
;

2730 
buf_to_wrôe
 =

2731 (
uöt8
 *)
	`_TIFFCheckMÆloc
(
tif
, 
cou¡
, 
	`TIFFD©aWidth
(
d©©y≥
),

2733 i‡(!
buf_to_wrôe
)

2736 if–
d©©y≥
 =
ö_d©©y≥
 )

2737 
	`mem˝y
–
buf_to_wrôe
, 
d©a
, 
cou¡
 * 
	`TIFFD©aWidth
(
d©©y≥
) );

2738 if–
d©©y≥
 =
TIFF_SLONG
 && 
ö_d©©y≥
 =
TIFF_SLONG8
 )

2740 
tmsize_t
 
i
;

2742  
i
 = 0; i < 
cou¡
; i++ )

2744 ((
öt32
 *Ë
buf_to_wrôe
)[
i
] =

2745 (
öt32
Ë((
öt64
 *Ë
d©a
)[
i
];

2746 if–(
öt64
Ë((
öt32
 *Ë
buf_to_wrôe
)[
i
] !((öt64 *Ë
d©a
)[i] )

2748 
	`_TIFF‰ì
–
buf_to_wrôe
 );

2749 
	`TIFFEº‹Ext
–
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2755 if–(
d©©y≥
 =
TIFF_LONG
 && 
ö_d©©y≥
 =
TIFF_LONG8
)

2756 || (
d©©y≥
 =
TIFF_IFD
 && 
ö_d©©y≥
 =
TIFF_IFD8
) )

2758 
tmsize_t
 
i
;

2760  
i
 = 0; i < 
cou¡
; i++ )

2762 ((
uöt32
 *Ë
buf_to_wrôe
)[
i
] =

2763 (
uöt32
Ë((
uöt64
 *Ë
d©a
)[
i
];

2764 if–(
uöt64
Ë((
uöt32
 *Ë
buf_to_wrôe
)[
i
] !((uöt64 *Ë
d©a
)[i] )

2766 
	`_TIFF‰ì
–
buf_to_wrôe
 );

2767 
	`TIFFEº‹Ext
–
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2774 if–
	`TIFFD©aWidth
(
d©©y≥
Ë> 1 && (
tif
->
tif_Êags
&
TIFF_SWAB
) )

2776 if–
	`TIFFD©aWidth
(
d©©y≥
) == 2 )

2777 
	`TIFFSwabAºayOfSh‹t
–(
uöt16
 *Ë
buf_to_wrôe
, 
cou¡
 );

2778 if–
	`TIFFD©aWidth
(
d©©y≥
) == 4 )

2779 
	`TIFFSwabAºayOfL⁄g
–(
uöt32
 *Ë
buf_to_wrôe
, 
cou¡
 );

2780 if–
	`TIFFD©aWidth
(
d©©y≥
) == 8 )

2781 
	`TIFFSwabAºayOfL⁄g8
–(
uöt64
 *Ë
buf_to_wrôe
, 
cou¡
 );

2787 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2789 if–
	`TIFFD©aWidth
(
d©©y≥
Ë* 
cou¡
 <= 4 )

2791 
íåy_off£t
 = 
ªad_off£t
 + 8;

2792 
vÆue_ö_íåy
 = 1;

2797 if–
	`TIFFD©aWidth
(
d©©y≥
Ë* 
cou¡
 <= 8 )

2799 
íåy_off£t
 = 
ªad_off£t
 + 12;

2800 
vÆue_ö_íåy
 = 1;

2809 if–
íåy_cou¡
 =(
uöt64
)
cou¡
 && 
íåy_ty≥
 =(
uöt16
Ë
d©©y≥
 )

2811 i‡(!
	`SìkOK
(
tif
, 
íåy_off£t
)) {

2812 
	`_TIFF‰ì
–
buf_to_wrôe
 );

2813 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2815 
tif
->
tif_«me
);

2818 i‡(!
	`WrôeOK
(
tif
, 
buf_to_wrôe
, 
cou¡
*
	`TIFFD©aWidth
(
d©©y≥
))) {

2819 
	`_TIFF‰ì
–
buf_to_wrôe
 );

2820 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2825 
	`_TIFF‰ì
–
buf_to_wrôe
 );

2832 if–!
vÆue_ö_íåy
 )

2834 
íåy_off£t
 = 
	`TIFFSìkFûe
(
tif
,0,
SEEK_END
);

2836 i‡(!
	`WrôeOK
(
tif
, 
buf_to_wrôe
, 
cou¡
*
	`TIFFD©aWidth
(
d©©y≥
))) {

2837 
	`_TIFF‰ì
–
buf_to_wrôe
 );

2838 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2843 
	`_TIFF‰ì
–
buf_to_wrôe
 );

2847 
	`mem˝y
–&
íåy_off£t
, 
buf_to_wrôe
, 
cou¡
*
	`TIFFD©aWidth
(
d©©y≥
));

2853 
íåy_ty≥
 = 
d©©y≥
;

2854 
	`mem˝y
–
dúíåy_øw
 + 2, &
íåy_ty≥
, (
uöt16
) );

2855 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2856 
	`TIFFSwabSh‹t
–(
uöt16
 *Ë(
dúíåy_øw
 + 2) );

2858 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

2860 
uöt32
 
vÆue
;

2862 
vÆue
 = (
uöt32
Ë
íåy_cou¡
;

2863 
	`mem˝y
–
dúíåy_øw
 + 4, &
vÆue
, (
uöt32
) );

2864 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2865 
	`TIFFSwabL⁄g
–(
uöt32
 *Ë(
dúíåy_øw
 + 4) );

2867 
vÆue
 = (
uöt32
Ë
íåy_off£t
;

2868 
	`mem˝y
–
dúíåy_øw
 + 8, &
vÆue
, (
uöt32
) );

2869 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2870 
	`TIFFSwabL⁄g
–(
uöt32
 *Ë(
dúíåy_øw
 + 8) );

2874 
	`mem˝y
–
dúíåy_øw
 + 4, &
íåy_cou¡
, (
uöt64
) );

2875 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2876 
	`TIFFSwabL⁄g8
–(
uöt64
 *Ë(
dúíåy_øw
 + 4) );

2878 
	`mem˝y
–
dúíåy_øw
 + 12, &
íåy_off£t
, (
uöt64
) );

2879 i‡(
tif
->
tif_Êags
&
TIFF_SWAB
)

2880 
	`TIFFSwabL⁄g8
–(
uöt64
 *Ë(
dúíåy_øw
 + 12) );

2886 i‡(!
	`SìkOK
(
tif
, 
ªad_off£t
 )) {

2887 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2889 
tif
->
tif_«me
);

2893 i‡(!
	`WrôeOK
(
tif
, 
dúíåy_øw
,
dúsize
))

2895 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2897 
tif
->
tif_«me
);

2902 
	}
}

	@libtiff/tif_dumpmode.c

32 
	~"tiffi›.h
"

35 
	$DumpFixupTags
(
TIFF
* 
tif
)

37 (Ë
tif
;

39 
	}
}

45 
	$DumpModeEncode
(
TIFF
* 
tif
, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

47 (Ë
s
;

48 
cc
 > 0) {

49 
tmsize_t
 
n
;

51 
n
 = 
cc
;

52 i‡(
tif
->
tif_øwcc
 + 
n
 >Åif->
tif_øwd©asize
)

53 
n
 = 
tif
->
tif_øwd©asize
 -Åif->
tif_øwcc
;

55 
	`as£π
–
n
 > 0 );

61 i‡(
tif
->
tif_øw˝
 !
µ
)

62 
	`_TIFFmem˝y
(
tif
->
tif_øw˝
, 
µ
, 
n
);

63 
tif
->
tif_øw˝
 +
n
;

64 
tif
->
tif_øwcc
 +
n
;

65 
µ
 +
n
;

66 
cc
 -
n
;

67 i‡(
tif
->
tif_øwcc
 >tif->
tif_øwd©asize
 &&

68 !
	`TIFFFlushD©a1
(
tif
))

72 
	}
}

78 
	$DumpModeDecode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

80 c⁄° 
moduÀ
[] = "DumpModeDecode";

81 (Ë
s
;

82 i‡(
tif
->
tif_øwcc
 < 
cc
) {

83 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

84 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

86 (Ë
tif
->
tif_row
,

87 (sig√d 
__öt64
Ë
tif
->
tif_øwcc
,

88 (sig√d 
__öt64
Ë
cc
);

90 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

92 (Ë
tif
->
tif_row
,

93 (sig√d Ë
tif
->
tif_øwcc
,

94 (sig√d Ë
cc
);

102 i‡(
tif
->
tif_øw˝
 !
buf
)

103 
	`_TIFFmem˝y
(
buf
, 
tif
->
tif_øw˝
, 
cc
);

104 
tif
->
tif_øw˝
 +
cc
;

105 
tif
->
tif_øwcc
 -
cc
;

107 
	}
}

113 
	$DumpModeSìk
(
TIFF
* 
tif
, 
uöt32
 
ƒows
)

115 
tif
->
tif_øw˝
 +
ƒows
 *Åif->
tif_sˇ∆öesize
;

116 
tif
->
tif_øwcc
 -
ƒows
 *Åif->
tif_sˇ∆öesize
;

118 
	}
}

124 
	$TIFFInôDumpMode
(
TIFF
* 
tif
, 
scheme
)

126 (Ë
scheme
;

127 
tif
->
tif_fixu±ags
 = 
DumpFixupTags
;

128 
tif
->
tif_decodîow
 = 
DumpModeDecode
;

129 
tif
->
tif_decode°rù
 = 
DumpModeDecode
;

130 
tif
->
tif_decodëûe
 = 
DumpModeDecode
;

131 
tif
->
tif_ícodîow
 = 
DumpModeEncode
;

132 
tif
->
tif_ícode°rù
 = 
DumpModeEncode
;

133 
tif
->
tif_ícodëûe
 = 
DumpModeEncode
;

134 
tif
->
tif_£ek
 = 
DumpModeSìk
;

136 
	}
}

	@libtiff/tif_error.c

30 
	~"tiffi›.h
"

32 
TIFFEº‹H™dÀrExt
 
	g_TIFFîr‹H™dÀrExt
 = 
NULL
;

34 
TIFFEº‹H™dÀr


35 
	$TIFFSëEº‹H™dÀr
(
TIFFEº‹H™dÀr
 
h™dÀr
)

37 
TIFFEº‹H™dÀr
 
¥ev
 = 
_TIFFîr‹H™dÀr
;

38 
_TIFFîr‹H™dÀr
 = 
h™dÀr
;

39  (
¥ev
);

40 
	}
}

42 
TIFFEº‹H™dÀrExt


43 
	$TIFFSëEº‹H™dÀrExt
(
TIFFEº‹H™dÀrExt
 
h™dÀr
)

45 
TIFFEº‹H™dÀrExt
 
¥ev
 = 
_TIFFîr‹H™dÀrExt
;

46 
_TIFFîr‹H™dÀrExt
 = 
h™dÀr
;

47  (
¥ev
);

48 
	}
}

51 
	$TIFFEº‹
(c⁄° * 
moduÀ
, c⁄° * 
fmt
, ...)

53 
va_li°
 
≠
;

54 
	`va_°¨t
(
≠
, 
fmt
);

55 i‡(
_TIFFîr‹H™dÀr
)

56 (*
_TIFFîr‹H™dÀr
)(
moduÀ
, 
fmt
, 
≠
);

57 i‡(
_TIFFîr‹H™dÀrExt
)

58 (*
_TIFFîr‹H™dÀrExt
)(0, 
moduÀ
, 
fmt
, 
≠
);

59 
	`va_íd
(
≠
);

60 
	}
}

63 
	$TIFFEº‹Ext
(
th™dÀ_t
 
fd
, c⁄° * 
moduÀ
, c⁄° * 
fmt
, ...)

65 
va_li°
 
≠
;

66 
	`va_°¨t
(
≠
, 
fmt
);

67 i‡(
_TIFFîr‹H™dÀr
)

68 (*
_TIFFîr‹H™dÀr
)(
moduÀ
, 
fmt
, 
≠
);

69 i‡(
_TIFFîr‹H™dÀrExt
)

70 (*
_TIFFîr‹H™dÀrExt
)(
fd
, 
moduÀ
, 
fmt
, 
≠
);

71 
	`va_íd
(
≠
);

72 
	}
}

	@libtiff/tif_extension.c

34 
	~"tiffi›.h
"

36 
	$TIFFGëTagLi°Cou¡
–
TIFF
 *
tif
 )

39 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

41  
td
->
td_cu°omVÆueCou¡
;

42 
	}
}

44 
uöt32
 
	$TIFFGëTagLi°E¡ry
–
TIFF
 *
tif
, 
èg_ödex
 )

47 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

49 if–
èg_ödex
 < 0 ||Åag_ödex >
td
->
td_cu°omVÆueCou¡
 )

50  (
uöt32
)(-1);

52  
td
->
td_cu°omVÆues
[
èg_ödex
].
öfo
->
fõld_èg
;

53 
	}
}

60 
TIFFTagMëhods
 *
	$TIFFAc˚ssTagMëhods
–
TIFF
 *
tif
 )

63  &(
tif
->
tif_ègmëhods
);

64 
	}
}

66 *
	$TIFFGëClõ¡Info
–
TIFF
 *
tif
, c⁄° *
«me
 )

69 
TIFFClõ¡InfoLök
 *
lök
 = 
tif
->
tif_˛õ¡öfo
;

71  
lök
 !
NULL
 && 
	`°rcmp
÷ök->
«me
,name) != 0 )

72 
lök
 =Üök->
√xt
;

74 if–
lök
 !
NULL
 )

75  
lök
->
d©a
;

77  
NULL
;

78 
	}
}

80 
	$TIFFSëClõ¡Info
–
TIFF
 *
tif
, *
d©a
, c⁄° *
«me
 )

83 
TIFFClõ¡InfoLök
 *
lök
 = 
tif
->
tif_˛õ¡öfo
;

89  
lök
 !
NULL
 && 
	`°rcmp
÷ök->
«me
,name) != 0 )

90 
lök
 =Üök->
√xt
;

92 if–
lök
 !
NULL
 )

94 
lök
->
d©a
 = data;

102 
lök
 = (
TIFFClõ¡InfoLök
 *Ë
	`_TIFFmÆloc
((TIFFClientInfoLink));

103 
	`as£π
 (
lök
 !
NULL
);

104 
lök
->
√xt
 = 
tif
->
tif_˛õ¡öfo
;

105 
lök
->
«me
 = (*Ë
	`_TIFFmÆloc
((
tmsize_t
)(
	`°æí
(name)+1));

106 
	`as£π
 (
lök
->
«me
 !
NULL
);

107 
	`°r˝y
(
lök
->
«me
,Çame);

108 
lök
->
d©a
 = data;

110 
tif
->
tif_˛õ¡öfo
 = 
lök
;

111 
	}
}

	@libtiff/tif_fax3.c

27 
	~"tiffi›.h
"

28 #ifde‡
CCITT_SUPPORT


41 
	~"tif_Áx3.h
"

42 
	#G3CODES


	)

43 
	~"t4.h
"

44 
	~<°dio.h
>

51 
	mrw_mode
;

52 
	mmode
;

53 
tmsize_t
 
	mrowbyãs
;

54 
uöt32
 
	mrowpixñs
;

56 
uöt16
 
	m˛ónÁxd©a
;

57 
uöt32
 
	mbadÁxrun
;

58 
uöt32
 
	mbadÁxlöes
;

59 
uöt32
 
	mgroup›ti⁄s
;

61 
TIFFVGëMëhod
 
	mvgë∑ª¡
;

62 
TIFFVSëMëhod
 
	mv£ç¨ít
;

63 
TIFFPrötMëhod
 
	m¥ötdú
;

64 } 
	tFax3Ba£Sèã
;

65 
	#Fax3Sèã
(
tif
Ë((
Fax3Ba£Sèã
*Ë—if)->
tif_d©a
)

	)

67 íum { 
	mG3_1D
, 
	mG3_2D
 } 
	tTèg
;

69 
Fax3Ba£Sèã
 
	mb
;

72 c⁄° * 
	mbôm≠
;

73 
uöt32
 
	md©a
;

74 
	mbô
;

75 
	mEOL˙t
;

76 
TIFFFaxFûlFunc
 
	mfûl
;

77 
uöt32
* 
	mruns
;

78 
uöt32
* 
	mª‰uns
;

79 
uöt32
* 
	mcuºuns
;

82 
Tèg
 
	mèg
;

83 * 
	mªÊöe
;

84 
	mk
;

85 
	mmaxk
;

87 
	mlöe
;

88 } 
	tFax3CodecSèã
;

89 
	#DecodîSèã
(
tif
Ë((
Fax3CodecSèã
*Ë
	`Fax3Sèã
—if))

	)

90 
	#EncodîSèã
(
tif
Ë((
Fax3CodecSèã
*Ë
	`Fax3Sèã
—if))

	)

92 
	#is2DEncodög
(
•
Ë(•->
b
.
group›ti⁄s
 & 
GROUP3OPT_2DENCODING
)

	)

93 
	#isAlig√d
(
p
,
t
Ë((((
size_t
)’)Ë& ( (t)-1)Ë=0)

	)

103 
	#DECLARE_STATE
(
tif
, 
•
, 
mod
) \

104 c⁄° 
moduÀ
[] = 
mod
; \

105 
Fax3CodecSèã
* 
•
 = 
	`DecodîSèã
(
tif
); \

106 
a0
; \

107 
œ°x
 = 
•
->
b
.
rowpixñs
; \

108 
uöt32
 
BôAcc
; \

109 
BôsAvaû
; \

110 
RunLígth
; \

111 * 
˝
; \

112 * 
ï
; \

113 
uöt32
* 
∑
; \

114 
uöt32
* 
thi§un
; \

115 
EOL˙t
; \

116 c⁄° * 
bôm≠
 = 
•
->bitmap; \

117 c⁄° 
TIFFFaxTabE¡
* 
TabE¡


	)

118 
	#DECLARE_STATE_2D
(
tif
, 
•
, 
mod
) \

119 
	`DECLARE_STATE
(
tif
, 
•
, 
mod
); \

120 
b1
; \

121 
uöt32
* 
pb
 \

122 

	)

125 
	#CACHE_STATE
(
tif
, 
•
) do { \

126 
BôAcc
 = 
•
->
d©a
; \

127 
BôsAvaû
 = 
•
->
bô
; \

128 
EOL˙t
 = 
•
->EOLcnt; \

129 
˝
 = (*Ë
tif
->
tif_øw˝
; \

130 
ï
 = 
˝
 + 
tif
->
tif_øwcc
; \

131 } 0)

	)

135 
	#UNCACHE_STATE
(
tif
, 
•
) do { \

136 
•
->
bô
 = 
BôsAvaû
; \

137 
•
->
d©a
 = 
BôAcc
; \

138 
•
->
EOL˙t
 = EOLcnt; \

139 
tif
->
tif_øwcc
 -(
tmsize_t
)((
uöt8
*Ë
˝
 -Åif->
tif_øw˝
); \

140 
tif
->
tif_øw˝
 = (
uöt8
*Ë
˝
; \

141 } 0)

	)

147 
	$Fax3PªDecode
(
TIFF
* 
tif
, 
uöt16
 
s
)

149 
Fax3CodecSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

151 (Ë
s
;

152 
	`as£π
(
•
 !
NULL
);

153 
•
->
bô
 = 0;

154 
•
->
d©a
 = 0;

155 
•
->
EOL˙t
 = 0;

163 
•
->
bôm≠
 =

164 
	`TIFFGëBôRevTabÀ
(
tif
->
tif_dú
.
td_fûl‹dî
 !
FILLORDER_LSB2MSB
);

165 i‡(
•
->
ª‰uns
) {

166 
•
->
ª‰uns
[0] = (
uöt32
Ë•->
b
.
rowpixñs
;

167 
•
->
ª‰uns
[1] = 0;

169 
•
->
löe
 = 0;

171 
	}
}

180 
	$Fax3U√x≥˘ed
(c⁄° * 
moduÀ
, 
TIFF
* 
tif
, 
uöt32
 
löe
, uöt32 
a0
)

182 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Bad code wordátÜine %u of %s %u (x %u)",

183 
löe
, 
	`isTûed
(
tif
) ? "tile" : "strip",

184 (
	`isTûed
(
tif
Ë?Åif->
tif_cuπûe
 :Åif->
tif_cur°rù
),

185 
a0
);

186 
	}
}

187 
	#u√x≥˘ed
(
èbÀ
, 
a0
Ë
	`Fax3U√x≥˘ed
(
moduÀ
, 
tif
, 
•
->
löe
,á0)

	)

190 
	$Fax3Exãnsi⁄
(c⁄° * 
moduÀ
, 
TIFF
* 
tif
, 
uöt32
 
löe
, uöt32 
a0
)

192 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

194 
löe
, 
	`isTûed
(
tif
) ? "tile" : "strip",

195 (
	`isTûed
(
tif
Ë?Åif->
tif_cuπûe
 :Åif->
tif_cur°rù
),

196 
a0
);

197 
	}
}

198 
	#exãnsi⁄
(
a0
Ë
	`Fax3Exãnsi⁄
(
moduÀ
, 
tif
, 
•
->
löe
,á0)

	)

201 
	$Fax3BadLígth
(c⁄° * 
moduÀ
, 
TIFF
* 
tif
, 
uöt32
 
löe
, uöt32 
a0
, uöt32 
œ°x
)

203 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "%sátÜine %u of %s %u (got %u,Éxpected %u)",

204 
a0
 < 
œ°x
 ? "Premature EOL" : "LineÜength mismatch",

205 
löe
, 
	`isTûed
(
tif
) ? "tile" : "strip",

206 (
	`isTûed
(
tif
Ë?Åif->
tif_cuπûe
 :Åif->
tif_cur°rù
),

207 
a0
, 
œ°x
);

208 
	}
}

209 
	#badÀngth
(
a0
,
œ°x
Ë
	`Fax3BadLígth
(
moduÀ
, 
tif
, 
•
->
löe
,á0,Üa°x)

	)

212 
	$Fax3Pªm©uªEOF
(c⁄° * 
moduÀ
, 
TIFF
* 
tif
, 
uöt32
 
löe
, uöt32 
a0
)

214 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Premature EOFátÜine %u of %s %u (x %u)",

215 
löe
, 
	`isTûed
(
tif
) ? "tile" : "strip",

216 (
	`isTûed
(
tif
Ë?Åif->
tif_cuπûe
 :Åif->
tif_cur°rù
),

217 
a0
);

218 
	}
}

219 
	#¥em©uªEOF
(
a0
Ë
	`Fax3Pªm©uªEOF
(
moduÀ
, 
tif
, 
•
->
löe
,á0)

	)

221 
	#N›


	)

227 
	$Fax3Decode1D
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

229 
	`DECLARE_STATE
(
tif
, 
•
, "Fax3Decode1D");

230 (Ë
s
;

231 i‡(
occ
 % 
•
->
b
.
rowbyãs
)

233 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Fractional scanlines cannot beÑead");

236 
	`CACHE_STATE
(
tif
, 
•
);

237 
thi§un
 = 
•
->
cuºuns
;

238 
occ
 > 0) {

239 
a0
 = 0;

240 
RunLígth
 = 0;

241 
∑
 = 
thi§un
;

242 #ifde‡
FAX3_DEBUG


243 
	`¥ötf
("\nBôAcc=%08X, BôsAvaû = %d\n", 
BôAcc
, 
BôsAvaû
);

244 
	`¥ötf
("-------------------- %d\n", 
tif
->
tif_row
);

245 
	`fÊush
(
°dout
);

247 
	`SYNC_EOL
(
EOF1D
);

248 
	`EXPAND1D
(
EOF1Da
);

249 (*
•
->
fûl
)(
buf
, 
thi§un
, 
∑
, 
œ°x
);

250 
buf
 +
•
->
b
.
rowbyãs
;

251 
occ
 -
•
->
b
.
rowbyãs
;

252 
•
->
löe
++;

254 
EOF1D
:

255 
	`CLEANUP_RUNS
();

256 
EOF1Da
:

257 (*
•
->
fûl
)(
buf
, 
thi§un
, 
∑
, 
œ°x
);

258 
	`UNCACHE_STATE
(
tif
, 
•
);

261 
	`UNCACHE_STATE
(
tif
, 
•
);

263 
	}
}

265 
	#SWAP
(
t
,
a
,
b
Ë{Å 
x
; x = (a); (aË(b); (bËx; }

	)

270 
	$Fax3Decode2D
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

272 
	`DECLARE_STATE_2D
(
tif
, 
•
, "Fax3Decode2D");

273 
is1D
;

274 (Ë
s
;

275 i‡(
occ
 % 
•
->
b
.
rowbyãs
)

277 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Fractional scanlines cannot beÑead");

280 
	`CACHE_STATE
(
tif
, 
•
);

281 
occ
 > 0) {

282 
a0
 = 0;

283 
RunLígth
 = 0;

284 
∑
 = 
thi§un
 = 
•
->
cuºuns
;

285 #ifde‡
FAX3_DEBUG


286 
	`¥ötf
("\nBitAcc=%08X, BitsAvail = %d EOLcnt = %d",

287 
BôAcc
, 
BôsAvaû
, 
EOL˙t
);

289 
	`SYNC_EOL
(
EOF2D
);

290 
	`NìdBôs8
(1, 
EOF2D
);

291 
is1D
 = 
	`GëBôs
(1);

292 
	`CÃBôs
(1);

293 #ifde‡
FAX3_DEBUG


294 
	`¥ötf
(" %s\n-------------------- %d\n",

295 
is1D
 ? "1D" : "2D", 
tif
->
tif_row
);

296 
	`fÊush
(
°dout
);

298 
pb
 = 
•
->
ª‰uns
;

299 
b1
 = *
pb
++;

300 i‡(
is1D
)

301 
	`EXPAND1D
(
EOF2Da
);

303 
	`EXPAND2D
(
EOF2Da
);

304 (*
•
->
fûl
)(
buf
, 
thi§un
, 
∑
, 
œ°x
);

305 
	`SETVALUE
(0);

306 
	`SWAP
(
uöt32
*, 
•
->
cuºuns
, sp->
ª‰uns
);

307 
buf
 +
•
->
b
.
rowbyãs
;

308 
occ
 -
•
->
b
.
rowbyãs
;

309 
•
->
löe
++;

311 
EOF2D
:

312 
	`CLEANUP_RUNS
();

313 
EOF2Da
:

314 (*
•
->
fûl
)(
buf
, 
thi§un
, 
∑
, 
œ°x
);

315 
	`UNCACHE_STATE
(
tif
, 
•
);

318 
	`UNCACHE_STATE
(
tif
, 
•
);

320 
	}
}

321 #unde‡
SWAP


329 #i‡
SIZEOF_UNSIGNED_LONG
 == 8

330 
	#FILL
(
n
, 
˝
) \

331 
n
) { \

332 15:(
˝
)[14] = 0xff; 14:(cp)[13] = 0xff; 13: (cp)[12] = 0xff;\

333 12:(
˝
)[11] = 0xff; 11:(cp)[10] = 0xff; 10: (cp)[9] = 0xff;\

334 9: (
˝
)[8] = 0xff; 8: (cp)[7] = 0xff; 7: (cp)[6] = 0xff;\

335 6: (
˝
)[5] = 0xff; 5: (cp)[4] = 0xff; 4: (cp)[3] = 0xff;\

336 3: (
˝
)[2] = 0xff; 2: (cp)[1] = 0xff; \

337 1: (
˝
)[0] = 0xff; (˝Ë+(
n
); 0: ; \

338 }

	)

339 
	#ZERO
(
n
, 
˝
) \

340 
n
) { \

341 15:(
˝
)[14] = 0; 14:(cp)[13] = 0; 13: (cp)[12] = 0; \

342 12:(
˝
)[11] = 0; 11:(cp)[10] = 0; 10: (cp)[9] = 0; \

343 9: (
˝
)[8] = 0; 8: (cp)[7] = 0; 7: (cp)[6] = 0; \

344 6: (
˝
)[5] = 0; 5: (cp)[4] = 0; 4: (cp)[3] = 0; \

345 3: (
˝
)[2] = 0; 2: (cp)[1] = 0; \

346 1: (
˝
)[0] = 0; (˝Ë+(
n
); 0: ; \

347 }

	)

349 
	#FILL
(
n
, 
˝
) \

350 
n
) { \

351 7: (
˝
)[6] = 0xff; 6: (cp)[5] = 0xff; 5: (cp)[4] = 0xff; \

352 4: (
˝
)[3] = 0xff; 3: (cp)[2] = 0xff; 2: (cp)[1] = 0xff; \

353 1: (
˝
)[0] = 0xff; (˝Ë+(
n
); 0: ; \

354 }

	)

355 
	#ZERO
(
n
, 
˝
) \

356 
n
) { \

357 7: (
˝
)[6] = 0; 6: (cp)[5] = 0; 5: (cp)[4] = 0; \

358 4: (
˝
)[3] = 0; 3: (cp)[2] = 0; 2: (cp)[1] = 0; \

359 1: (
˝
)[0] = 0; (˝Ë+(
n
); 0: ; \

360 }

	)

368 
	$_TIFFFax3fûÃuns
(* 
buf
, 
uöt32
* 
runs
, uöt32* 
îun
, uöt32 
œ°x
)

370 c⁄° 
_fûlmasks
[] =

372 * 
˝
;

373 
uöt32
 
x
, 
bx
, 
run
;

374 
öt32
 
n
, 
nw
;

375 * 
Õ
;

377 i‡((
îun
-
runs
)&1)

378 *
îun
++ = 0;

379 
x
 = 0;

380 ; 
runs
 < 
îun
;Ñuns += 2) {

381 
run
 = 
runs
[0];

382 i‡(
x
+
run
 > 
œ°x
 ||Ñun >Üastx )

383 
run
 = 
runs
[0] = (
uöt32
Ë(
œ°x
 - 
x
);

384 i‡(
run
) {

385 
˝
 = 
buf
 + (
x
>>3);

386 
bx
 = 
x
&7;

387 i‡(
run
 > 8-
bx
) {

388 i‡(
bx
) {

389 *
˝
++ &0xf‡<< (8-
bx
);

390 
run
 -8-
bx
;

392 if–(
n
 = 
run
 >> 3) != 0 ) {

393 i‡((
n
/ ()) > 1) {

397 ; 
n
 && !
	`isAlig√d
(
˝
, );Ç--)

398 *
˝
++ = 0x00;

399 
Õ
 = (*Ë
˝
;

400 
nw
 = (
öt32
)(
n
 /  ());

401 
n
 -
nw
 *  ();

403 *
Õ
++ = 0L;

404 } --
nw
);

405 
˝
 = (*Ë
Õ
;

407 
	`ZERO
(
n
, 
˝
);

408 
run
 &= 7;

410 i‡(
run
)

411 
˝
[0] &0xf‡>> 
run
;

413 
˝
[0] &~(
_fûlmasks
[
run
]>>
bx
);

414 
x
 +
runs
[0];

416 
run
 = 
runs
[1];

417 i‡(
x
+
run
 > 
œ°x
 ||Ñun >Üastx )

418 
run
 = 
runs
[1] = 
œ°x
 - 
x
;

419 i‡(
run
) {

420 
˝
 = 
buf
 + (
x
>>3);

421 
bx
 = 
x
&7;

422 i‡(
run
 > 8-
bx
) {

423 i‡(
bx
) {

424 *
˝
++ |0xf‡>> 
bx
;

425 
run
 -8-
bx
;

427 if–(
n
 = 
run
>>3) != 0 ) {

428 i‡((
n
/ ()) > 1) {

432 ; 
n
 && !
	`isAlig√d
(
˝
, );Ç--)

433 *
˝
++ = 0xff;

434 
Õ
 = (*Ë
˝
;

435 
nw
 = (
öt32
)(
n
 /  ());

436 
n
 -
nw
 *  ();

438 *
Õ
++ = -1L;

439 } --
nw
);

440 
˝
 = (*Ë
Õ
;

442 
	`FILL
(
n
, 
˝
);

443 
run
 &= 7;

445 i‡(
run
)

446 
˝
[0] |0xff00 >> 
run
;

448 
˝
[0] |
_fûlmasks
[
run
]>>
bx
;

449 
x
 +
runs
[1];

452 
	`as£π
(
x
 =
œ°x
);

453 
	}
}

454 #unde‡
ZERO


455 #unde‡
FILL


458 
	$Fax3FixupTags
(
TIFF
* 
tif
)

460 (Ë
tif
;

462 
	}
}

472 
	$Fax3SëupSèã
(
TIFF
* 
tif
)

474 c⁄° 
moduÀ
[] = "Fax3SetupState";

475 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

476 
Fax3Ba£Sèã
* 
•
 = 
	`Fax3Sèã
(
tif
);

477 
√edsRefLöe
;

478 
Fax3CodecSèã
* 
d•
 = (Fax3CodecSèã*Ë
	`Fax3Sèã
(
tif
);

479 
tmsize_t
 
rowbyãs
;

480 
uöt32
 
rowpixñs
, 
ƒuns
;

482 i‡(
td
->
td_bô•îßm∂e
 != 1) {

483 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

490 i‡(
	`isTûed
(
tif
)) {

491 
rowbyãs
 = 
	`TIFFTûeRowSize
(
tif
);

492 
rowpixñs
 = 
td
->
td_tûewidth
;

494 
rowbyãs
 = 
	`TIFFSˇ∆öeSize
(
tif
);

495 
rowpixñs
 = 
td
->
td_imagewidth
;

497 
•
->
rowbyãs
 =Ñowbytes;

498 
•
->
rowpixñs
 =Ñowpixels;

502 
√edsRefLöe
 = (

503 (
•
->
group›ti⁄s
 & 
GROUP3OPT_2DENCODING
) ||

504 
td
->
td_com¥essi⁄
 =
COMPRESSION_CCITTFAX4


512 
d•
->
runs
=(
uöt32
*Ë
NULL
;

513 
ƒuns
 = 
	`TIFFroundup_32
(
rowpixñs
,32);

514 i‡(
√edsRefLöe
) {

515 
ƒuns
 = 
	`TIFFSa„Mu…ùly
(
uöt32
,nruns,2);

517 i‡((
ƒuns
 =0Ë|| (
	`TIFFSa„Mu…ùly
(
uöt32
,nruns,2) == 0)) {

518 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

520 
rowpixñs
);

523 
d•
->
runs
 = (
uöt32
*Ë
	`_TIFFCheckMÆloc
(
tif
,

524 
	`TIFFSa„Mu…ùly
(
uöt32
,
ƒuns
,2),

525  (
uöt32
),

527 i‡(
d•
->
runs
 =
NULL
)

529 
d•
->
cuºuns
 = d•->
runs
;

530 i‡(
√edsRefLöe
)

531 
d•
->
ª‰uns
 = d•->
runs
 + 
ƒuns
;

533 
d•
->
ª‰uns
 = 
NULL
;

534 i‡(
td
->
td_com¥essi⁄
 =
COMPRESSION_CCITTFAX3


535 && 
	`is2DEncodög
(
d•
)) {

536 
tif
->
tif_decodîow
 = 
Fax3Decode2D
;

537 
tif
->
tif_decode°rù
 = 
Fax3Decode2D
;

538 
tif
->
tif_decodëûe
 = 
Fax3Decode2D
;

541 i‡(
√edsRefLöe
) {

542 
Fax3CodecSèã
* 
e•
 = 
	`EncodîSèã
(
tif
);

550 
e•
->
ªÊöe
 = (*Ë
	`_TIFFmÆloc
(
rowbyãs
);

551 i‡(
e•
->
ªÊöe
 =
NULL
) {

552 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

557 
	`EncodîSèã
(
tif
)->
ªÊöe
 = 
NULL
;

560 
	}
}

566 
	#Fax3FlushBôs
(
tif
, 
•
) { \

567 i‡((
tif
)->
tif_øwcc
 >—if)->
tif_øwd©asize
) \

568 (Ë
	`TIFFFlushD©a1
(
tif
); \

569 *(
tif
)->
tif_øw˝
++ = (
uöt8
Ë(
•
)->
d©a
; \

570 (
tif
)->
tif_øwcc
++; \

571 (
•
)->
d©a
 = 0, (•)->
bô
 = 8; \

572 }

	)

573 
	#_FlushBôs
(
tif
) { \

574 i‡((
tif
)->
tif_øwcc
 >—if)->
tif_øwd©asize
) \

575 (Ë
	`TIFFFlushD©a1
(
tif
); \

576 *(
tif
)->
tif_øw˝
++ = (
uöt8
Ë
d©a
; \

577 (
tif
)->
tif_øwcc
++; \

578 
d©a
 = 0, 
bô
 = 8; \

579 }

	)

580 c⁄° 
	g_msbmask
[9] =

582 
	#_PutBôs
(
tif
, 
bôs
, 
Àngth
) { \

583 
Àngth
 > 
bô
) { \

584 
d©a
 |
bôs
 >> (
Àngth
 - 
bô
); \

585 
Àngth
 -
bô
; \

586 
	`_FlushBôs
(
tif
); \

588 
	`as£π
–
Àngth
 < 9 ); \

589 
d©a
 |(
bôs
 & 
_msbmask
[
Àngth
]Ë<< (
bô
 -Üength); \

590 
bô
 -
Àngth
; \

591 i‡(
bô
 == 0) \

592 
	`_FlushBôs
(
tif
); \

593 }

	)

601 
	$Fax3PutBôs
(
TIFF
* 
tif
, 
bôs
, 
Àngth
)

603 
Fax3CodecSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

604 
bô
 = 
•
->bit;

605 
d©a
 = 
•
->data;

607 
	`_PutBôs
(
tif
, 
bôs
, 
Àngth
);

609 
•
->
d©a
 = data;

610 
•
->
bô
 = bit;

611 
	}
}

616 
	#putcode
(
tif
, 
ã
Ë
	`Fax3PutBôs
—if, (ã)->
code
, (ã)->
Àngth
)

	)

618 #ifde‡
FAX3_DEBUG


619 
	#DEBUG_COLOR
(
w
Ë(
èb
 =
TIFFFaxWhôeCodes
 ? w "W" : w "B")

	)

620 
	#DEBUG_PRINT
(
wh©
,
Àn
) { \

621 
t
; \

622 
	`¥ötf
("%08X/%-2d: %s%5d\t", 
d©a
, 
bô
, 
	`DEBUG_COLOR
(
wh©
), 
Àn
); \

623 
t
 = 
Àngth
-1;Å >= 0;Å--) \

624 
	`putch¨
(
code
 & (1<<
t
) ? '1' : '0'); \

625 
	`putch¨
('\n'); \

626 }

	)

636 
	$put•™
(
TIFF
* 
tif
, 
öt32
 
•™
, c⁄° 
èbÀíåy
* 
èb
)

638 
Fax3CodecSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

639 
bô
 = 
•
->bit;

640 
d©a
 = 
•
->data;

641 
code
, 
Àngth
;

643 
•™
 >= 2624) {

644 c⁄° 
èbÀíåy
* 
ã
 = &
èb
[63 + (2560>>6)];

645 
code
 = 
ã
->code, 
Àngth
 =Åe->length;

646 #ifde‡
FAX3_DEBUG


647 
	`DEBUG_PRINT
("MakeUp", 
ã
->
ru∆í
);

649 
	`_PutBôs
(
tif
, 
code
, 
Àngth
);

650 
•™
 -
ã
->
ru∆í
;

652 i‡(
•™
 >= 64) {

653 c⁄° 
èbÀíåy
* 
ã
 = &
èb
[63 + (
•™
>>6)];

654 
	`as£π
(
ã
->
ru∆í
 =64*(
•™
>>6));

655 
code
 = 
ã
->code, 
Àngth
 =Åe->length;

656 #ifde‡
FAX3_DEBUG


657 
	`DEBUG_PRINT
("MakeUp", 
ã
->
ru∆í
);

659 
	`_PutBôs
(
tif
, 
code
, 
Àngth
);

660 
•™
 -
ã
->
ru∆í
;

662 
code
 = 
èb
[
•™
].code, 
Àngth
 =Åab[span].length;

663 #ifde‡
FAX3_DEBUG


664 
	`DEBUG_PRINT
(" Tîm", 
èb
[
•™
].
ru∆í
);

666 
	`_PutBôs
(
tif
, 
code
, 
Àngth
);

668 
•
->
d©a
 = data;

669 
•
->
bô
 = bit;

670 
	}
}

679 
	$Fax3PutEOL
(
TIFF
* 
tif
)

681 
Fax3CodecSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

682 
bô
 = 
•
->bit;

683 
d©a
 = 
•
->data;

684 
code
, 
Àngth
, 
ç¨m
;

686 i‡(
•
->
b
.
group›ti⁄s
 & 
GROUP3OPT_FILLBITS
) {

692 
Æign
 = 8 - 4;

693 i‡(
Æign
 !
•
->
bô
) {

694 i‡(
Æign
 > 
•
->
bô
)

695 
Æign
 = 
•
->
bô
 + (8 -álign);

697 
Æign
 = 
•
->
bô
 -álign;

698 
code
 = 0;

699 
ç¨m
=
Æign
;

700 
	`_PutBôs
(
tif
, 0, 
ç¨m
);

703 
code
 = 
EOL
, 
Àngth
 = 12;

704 i‡(
	`is2DEncodög
(
•
))

705 
code
 = (code<<1Ë| (
•
->
èg
 =
G3_1D
), 
Àngth
++;

706 
	`_PutBôs
(
tif
, 
code
, 
Àngth
);

708 
•
->
d©a
 = data;

709 
•
->
bô
 = bit;

710 
	}
}

716 
	$Fax3PªEncode
(
TIFF
* 
tif
, 
uöt16
 
s
)

718 
Fax3CodecSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

720 (Ë
s
;

721 
	`as£π
(
•
 !
NULL
);

722 
•
->
bô
 = 8;

723 
•
->
d©a
 = 0;

724 
•
->
èg
 = 
G3_1D
;

730 i‡(
•
->
ªÊöe
)

731 
	`_TIFFmem£t
(
•
->
ªÊöe
, 0x00, sp->
b
.
rowbyãs
);

732 i‡(
	`is2DEncodög
(
•
)) {

733 
ªs
 = 
tif
->
tif_dú
.
td_yªsﬁuti⁄
;

744 i‡(
tif
->
tif_dú
.
td_ªsﬁuti⁄unô
 =
RESUNIT_CENTIMETER
)

745 
ªs
 *= 2.54f;

746 
•
->
maxk
 = (
ªs
 > 150 ? 4 : 2);

747 
•
->
k
 = sp->
maxk
-1;

749 
•
->
k
 = sp->
maxk
 = 0;

750 
•
->
löe
 = 0;

752 
	}
}

754 c⁄° 
	gzî‹uns
[256] = {

772 c⁄° 
	g⁄îuns
[256] = {

795 #ifde‡
VAXC


796 
öt32
 
föd0•™
(*, int32, int32);

797 
öt32
 
föd1•™
(*, int32, int32);

798 #¥agm®
ölöe
(
föd0•™
,
föd1•™
)

806 
ölöe
 
öt32


807 
	$föd0•™
(* 
bp
, 
öt32
 
bs
, i¡32 
be
)

809 
öt32
 
bôs
 = 
be
 - 
bs
;

810 
öt32
 
n
, 
•™
;

812 
bp
 +
bs
>>3;

816 i‡(
bôs
 > 0 && (
n
 = (
bs
 & 7))) {

817 
•™
 = 
zî‹uns
[(*
bp
 << 
n
) & 0xff];

818 i‡(
•™
 > 8-
n
)

819 
•™
 = 8-
n
;

820 i‡(
•™
 > 
bôs
)

821 
•™
 = 
bôs
;

822 i‡(
n
+
•™
 < 8)

823  (
•™
);

824 
bôs
 -
•™
;

825 
bp
++;

827 
•™
 = 0;

828 i‡(
bôs
 >(
öt32
)(2 * 8 * ())) {

829 * 
Õ
;

833 !
	`isAlig√d
(
bp
, )) {

834 i‡(*
bp
 != 0x00)

835  (
•™
 + 
zî‹uns
[*
bp
]);

836 
•™
 +8, 
bôs
 -= 8;

837 
bp
++;

839 
Õ
 = (*Ë
bp
;

840 (
bôs
 >(
öt32
)(8 * ())Ë&& (0 =*
Õ
)) {

841 
•™
 +8* (), 
bôs
 -= 8* ();

842 
Õ
++;

844 
bp
 = (*Ë
Õ
;

849 
bôs
 >= 8) {

850 i‡(*
bp
 != 0x00)

851  (
•™
 + 
zî‹uns
[*
bp
]);

852 
•™
 +8, 
bôs
 -= 8;

853 
bp
++;

858 i‡(
bôs
 > 0) {

859 
n
 = 
zî‹uns
[*
bp
];

860 
•™
 +(
n
 > 
bôs
 ? bits :Ç);

862  (
•™
);

863 
	}
}

865 
ölöe
 
öt32


866 
	$föd1•™
(* 
bp
, 
öt32
 
bs
, i¡32 
be
)

868 
öt32
 
bôs
 = 
be
 - 
bs
;

869 
öt32
 
n
, 
•™
;

871 
bp
 +
bs
>>3;

875 i‡(
bôs
 > 0 && (
n
 = (
bs
 & 7))) {

876 
•™
 = 
⁄îuns
[(*
bp
 << 
n
) & 0xff];

877 i‡(
•™
 > 8-
n
)

878 
•™
 = 8-
n
;

879 i‡(
•™
 > 
bôs
)

880 
•™
 = 
bôs
;

881 i‡(
n
+
•™
 < 8)

882  (
•™
);

883 
bôs
 -
•™
;

884 
bp
++;

886 
•™
 = 0;

887 i‡(
bôs
 >(
öt32
)(2 * 8 * ())) {

888 * 
Õ
;

892 !
	`isAlig√d
(
bp
, )) {

893 i‡(*
bp
 != 0xff)

894  (
•™
 + 
⁄îuns
[*
bp
]);

895 
•™
 +8, 
bôs
 -= 8;

896 
bp
++;

898 
Õ
 = (*Ë
bp
;

899 (
bôs
 >(
öt32
)(8 * ())Ë&& (~0 =*
Õ
)) {

900 
•™
 +8* (), 
bôs
 -= 8* ();

901 
Õ
++;

903 
bp
 = (*Ë
Õ
;

908 
bôs
 >= 8) {

909 i‡(*
bp
 != 0xff)

910  (
•™
 + 
⁄îuns
[*
bp
]);

911 
•™
 +8, 
bôs
 -= 8;

912 
bp
++;

917 i‡(
bôs
 > 0) {

918 
n
 = 
⁄îuns
[*
bp
];

919 
•™
 +(
n
 > 
bôs
 ? bits :Ç);

921  (
•™
);

922 
	}
}

930 
	#föddiff
(
_˝
, 
_bs
, 
_be
, 
_cﬁ‹
) \

931 (
_bs
 + (
_cﬁ‹
 ? 
	`föd1•™
(
_˝
,_bs,
_be
Ë: 
	`föd0•™
(_˝,_bs,_be)))

	)

936 
	#föddiff2
(
_˝
, 
_bs
, 
_be
, 
_cﬁ‹
) \

937 (
_bs
 < 
_be
 ? 
	`föddiff
(
_˝
,_bs,_be,
_cﬁ‹
Ë: _be)

	)

945 
	$Fax3Encode1DRow
(
TIFF
* 
tif
, * 
bp
, 
uöt32
 
bôs
)

947 
Fax3CodecSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

948 
öt32
 
•™
;

949 
uöt32
 
bs
 = 0;

952 
•™
 = 
	`föd0•™
(
bp
, 
bs
, 
bôs
);

953 
	`put•™
(
tif
, 
•™
, 
TIFFFaxWhôeCodes
);

954 
bs
 +
•™
;

955 i‡(
bs
 >
bôs
)

957 
•™
 = 
	`föd1•™
(
bp
, 
bs
, 
bôs
);

958 
	`put•™
(
tif
, 
•™
, 
TIFFFaxBœckCodes
);

959 
bs
 +
•™
;

960 i‡(
bs
 >
bôs
)

963 i‡(
•
->
b
.
mode
 & (
FAXMODE_BYTEALIGN
|
FAXMODE_WORDALIGN
)) {

964 i‡(
•
->
bô
 != 8)

965 
	`Fax3FlushBôs
(
tif
, 
•
);

966 i‡((
•
->
b
.
mode
&
FAXMODE_WORDALIGN
) &&

967 !
	`isAlig√d
(
tif
->
tif_øw˝
, 
uöt16
))

968 
	`Fax3FlushBôs
(
tif
, 
•
);

971 
	}
}

973 c⁄° 
èbÀíåy
 
	gh‹izcode
 =

975 c⁄° 
èbÀíåy
 
	g∑sscode
 =

977 c⁄° 
èbÀíåy
 
	gvcodes
[7] = {

992 
	$Fax3Encode2DRow
(
TIFF
* 
tif
, * 
bp
, * 
Ω
, 
uöt32
 
bôs
)

994 
	#PIXEL
(
buf
,
ix
Ë((((buf)[(ix)>>3]Ë>> (7-((ix)&7))Ë& 1)

	)

995 
uöt32
 
a0
 = 0;

996 
uöt32
 
a1
 = (
	`PIXEL
(
bp
, 0Ë!0 ? 0 : 
	`föddiff
(bp, 0, 
bôs
, 0));

997 
uöt32
 
b1
 = (
	`PIXEL
(
Ω
, 0Ë!0 ? 0 : 
	`föddiff
‘p, 0, 
bôs
, 0));

998 
uöt32
 
a2
, 
b2
;

1001 
b2
 = 
	`föddiff2
(
Ω
, 
b1
, 
bôs
, 
	`PIXEL
(rp,b1));

1002 i‡(
b2
 >
a1
) {

1003 
öt32
 
d
 = 
b1
 - 
a1
;

1004 i‡(!(-3 <
d
 && d <= 3)) {

1005 
a2
 = 
	`föddiff2
(
bp
, 
a1
, 
bôs
, 
	`PIXEL
(bp,a1));

1006 
	`putcode
(
tif
, &
h‹izcode
);

1007 i‡(
a0
+
a1
 =0 || 
	`PIXEL
(
bp
,á0) == 0) {

1008 
	`put•™
(
tif
, 
a1
-
a0
, 
TIFFFaxWhôeCodes
);

1009 
	`put•™
(
tif
, 
a2
-
a1
, 
TIFFFaxBœckCodes
);

1011 
	`put•™
(
tif
, 
a1
-
a0
, 
TIFFFaxBœckCodes
);

1012 
	`put•™
(
tif
, 
a2
-
a1
, 
TIFFFaxWhôeCodes
);

1014 
a0
 = 
a2
;

1016 
	`putcode
(
tif
, &
vcodes
[
d
+3]);

1017 
a0
 = 
a1
;

1020 
	`putcode
(
tif
, &
∑sscode
);

1021 
a0
 = 
b2
;

1023 i‡(
a0
 >
bôs
)

1025 
a1
 = 
	`föddiff
(
bp
, 
a0
, 
bôs
, 
	`PIXEL
(bp,a0));

1026 
b1
 = 
	`föddiff
(
Ω
, 
a0
, 
bôs
, !
	`PIXEL
(
bp
,a0));

1027 
b1
 = 
	`föddiff
(
Ω
, b1, 
bôs
, 
	`PIXEL
(
bp
,
a0
));

1030 #unde‡
PIXEL


1031 
	}
}

1037 
	$Fax3Encode
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

1039 c⁄° 
moduÀ
[] = "Fax3Encode";

1040 
Fax3CodecSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

1041 (Ë
s
;

1042 i‡(
cc
 % 
•
->
b
.
rowbyãs
)

1044 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Fractional scanlines cannot be written");

1047 
cc
 > 0) {

1048 i‡((
•
->
b
.
mode
 & 
FAXMODE_NOEOL
) == 0)

1049 
	`Fax3PutEOL
(
tif
);

1050 i‡(
	`is2DEncodög
(
•
)) {

1051 i‡(
•
->
èg
 =
G3_1D
) {

1052 i‡(!
	`Fax3Encode1DRow
(
tif
, 
bp
, 
•
->
b
.
rowpixñs
))

1054 
•
->
èg
 = 
G3_2D
;

1056 i‡(!
	`Fax3Encode2DRow
(
tif
, 
bp
, 
•
->
ªÊöe
,

1057 
•
->
b
.
rowpixñs
))

1059 
•
->
k
--;

1061 i‡(
•
->
k
 == 0) {

1062 
•
->
èg
 = 
G3_1D
;

1063 
•
->
k
 = sp->
maxk
-1;

1065 
	`_TIFFmem˝y
(
•
->
ªÊöe
, 
bp
, sp->
b
.
rowbyãs
);

1067 i‡(!
	`Fax3Encode1DRow
(
tif
, 
bp
, 
•
->
b
.
rowpixñs
))

1070 
bp
 +
•
->
b
.
rowbyãs
;

1071 
cc
 -
•
->
b
.
rowbyãs
;

1074 
	}
}

1077 
	$Fax3Po°Encode
(
TIFF
* 
tif
)

1079 
Fax3CodecSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

1081 i‡(
•
->
bô
 != 8)

1082 
	`Fax3FlushBôs
(
tif
, 
•
);

1084 
	}
}

1087 
	$Fax3Clo£
(
TIFF
* 
tif
)

1089 i‡((
	`Fax3Sèã
(
tif
)->
mode
 & 
FAXMODE_NORTC
) == 0) {

1090 
Fax3CodecSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

1091 
code
 = 
EOL
;

1092 
Àngth
 = 12;

1093 
i
;

1095 i‡(
	`is2DEncodög
(
•
))

1096 
code
 = (code<<1Ë| (
•
->
èg
 =
G3_1D
), 
Àngth
++;

1097 
i
 = 0; i < 6; i++)

1098 
	`Fax3PutBôs
(
tif
, 
code
, 
Àngth
);

1099 
	`Fax3FlushBôs
(
tif
, 
•
);

1101 
	}
}

1104 
	$Fax3CÀ™up
(
TIFF
* 
tif
)

1106 
Fax3CodecSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

1108 
	`as£π
(
•
 != 0);

1110 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
•
->
b
.
vgë∑ª¡
;

1111 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
•
->
b
.
v£ç¨ít
;

1112 
tif
->
tif_ègmëhods
.
¥ötdú
 = 
•
->
b
.printdir;

1114 i‡(
•
->
runs
)

1115 
	`_TIFF‰ì
(
•
->
runs
);

1116 i‡(
•
->
ªÊöe
)

1117 
	`_TIFF‰ì
(
•
->
ªÊöe
);

1119 
	`_TIFF‰ì
(
tif
->
tif_d©a
);

1120 
tif
->
tif_d©a
 = 
NULL
;

1122 
	`_TIFFSëDeÁu…Com¥essi⁄Sèã
(
tif
);

1123 
	}
}

1125 
	#FIELD_BADFAXLINES
 (
FIELD_CODEC
+0)

	)

1126 
	#FIELD_CLEANFAXDATA
 (
FIELD_CODEC
+1)

	)

1127 
	#FIELD_BADFAXRUN
 (
FIELD_CODEC
+2)

	)

1129 
	#FIELD_OPTIONS
 (
FIELD_CODEC
+7)

	)

1131 c⁄° 
TIFFFõld
 
	gÁxFõlds
[] = {

1132 { 
TIFFTAG_FAXMODE
, 0, 0, 
TIFF_ANY
, 0, 
TIFF_SETGET_INT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PSEUDO
, 
FALSE
, FALSE, "FaxMode", 
NULL
 },

1133 { 
TIFFTAG_FAXFILLFUNC
, 0, 0, 
TIFF_ANY
, 0, 
TIFF_SETGET_OTHER
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PSEUDO
, 
FALSE
, FALSE, "FaxFûlFunc", 
NULL
 },

1134 { 
TIFFTAG_BADFAXLINES
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, TIFF_SETGET_UINT32, 
FIELD_BADFAXLINES
, 
TRUE
, 
FALSE
, "BadFaxLöes", 
NULL
 },

1135 { 
TIFFTAG_CLEANFAXDATA
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, TIFF_SETGET_UINT16, 
FIELD_CLEANFAXDATA
, 
TRUE
, 
FALSE
, "CÀ™FaxD©a", 
NULL
 },

1136 { 
TIFFTAG_CONSECUTIVEBADFAXLINES
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, TIFF_SETGET_UINT32, 
FIELD_BADFAXRUN
, 
TRUE
, 
FALSE
, "C⁄£cutiveBadFaxLöes", 
NULL
 }};

1137 c⁄° 
TIFFFõld
 
	gÁx3Fõlds
[] = {

1138 { 
TIFFTAG_GROUP3OPTIONS
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, TIFF_SETGET_UINT32, 
FIELD_OPTIONS
, 
FALSE
, FALSE, "Group3O±i⁄s", 
NULL
 },

1140 c⁄° 
TIFFFõld
 
	gÁx4Fõlds
[] = {

1141 { 
TIFFTAG_GROUP4OPTIONS
, 1, 1, 
TIFF_LONG
, 0, 
TIFF_SETGET_UINT32
, TIFF_SETGET_UINT32, 
FIELD_OPTIONS
, 
FALSE
, FALSE, "Group4O±i⁄s", 
NULL
 },

1145 
	$Fax3VSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

1147 
Fax3Ba£Sèã
* 
•
 = 
	`Fax3Sèã
(
tif
);

1148 c⁄° 
TIFFFõld
* 
fù
;

1150 
	`as£π
(
•
 != 0);

1151 
	`as£π
(
•
->
v£ç¨ít
 != 0);

1153 
èg
) {

1154 
TIFFTAG_FAXMODE
:

1155 
•
->
mode
 = (Ë
	`va_¨g
(
≠
, );

1157 
TIFFTAG_FAXFILLFUNC
:

1158 
	`DecodîSèã
(
tif
)->
fûl
 = 
	`va_¨g
(
≠
, 
TIFFFaxFûlFunc
);

1160 
TIFFTAG_GROUP3OPTIONS
:

1162 i‡(
tif
->
tif_dú
.
td_com¥essi⁄
 =
COMPRESSION_CCITTFAX3
)

1163 
•
->
group›ti⁄s
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

1165 
TIFFTAG_GROUP4OPTIONS
:

1167 i‡(
tif
->
tif_dú
.
td_com¥essi⁄
 =
COMPRESSION_CCITTFAX4
)

1168 
•
->
group›ti⁄s
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

1170 
TIFFTAG_BADFAXLINES
:

1171 
•
->
badÁxlöes
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

1173 
TIFFTAG_CLEANFAXDATA
:

1174 
•
->
˛ónÁxd©a
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

1176 
TIFFTAG_CONSECUTIVEBADFAXLINES
:

1177 
•
->
badÁxrun
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

1180  (*
•
->
v£ç¨ít
)(
tif
, 
èg
, 
≠
);

1183 i‡((
fù
 = 
	`TIFFFõldWôhTag
(
tif
, 
èg
)))

1184 
	`TIFFSëFõldBô
(
tif
, 
fù
->
fõld_bô
);

1188 
tif
->
tif_Êags
 |
TIFF_DIRTYDIRECT
;

1190 
	}
}

1193 
	$Fax3VGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

1195 
Fax3Ba£Sèã
* 
•
 = 
	`Fax3Sèã
(
tif
);

1197 
	`as£π
(
•
 != 0);

1199 
èg
) {

1200 
TIFFTAG_FAXMODE
:

1201 *
	`va_¨g
(
≠
, *Ë
•
->
mode
;

1203 
TIFFTAG_FAXFILLFUNC
:

1204 *
	`va_¨g
(
≠
, 
TIFFFaxFûlFunc
*Ë
	`DecodîSèã
(
tif
)->
fûl
;

1206 
TIFFTAG_GROUP3OPTIONS
:

1207 
TIFFTAG_GROUP4OPTIONS
:

1208 *
	`va_¨g
(
≠
, 
uöt32
*Ë
•
->
group›ti⁄s
;

1210 
TIFFTAG_BADFAXLINES
:

1211 *
	`va_¨g
(
≠
, 
uöt32
*Ë
•
->
badÁxlöes
;

1213 
TIFFTAG_CLEANFAXDATA
:

1214 *
	`va_¨g
(
≠
, 
uöt16
*Ë
•
->
˛ónÁxd©a
;

1216 
TIFFTAG_CONSECUTIVEBADFAXLINES
:

1217 *
	`va_¨g
(
≠
, 
uöt32
*Ë
•
->
badÁxrun
;

1220  (*
•
->
vgë∑ª¡
)(
tif
, 
èg
, 
≠
);

1223 
	}
}

1226 
	$Fax3PrötDú
(
TIFF
* 
tif
, 
FILE
* 
fd
, 
Êags
)

1228 
Fax3Ba£Sèã
* 
•
 = 
	`Fax3Sèã
(
tif
);

1230 
	`as£π
(
•
 != 0);

1232 (Ë
Êags
;

1233 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_OPTIONS
)) {

1234 c⁄° * 
£p
 = " ";

1235 i‡(
tif
->
tif_dú
.
td_com¥essi⁄
 =
COMPRESSION_CCITTFAX4
) {

1236 
	`Ârötf
(
fd
, " Group 4 Options:");

1237 i‡(
•
->
group›ti⁄s
 & 
GROUP4OPT_UNCOMPRESSED
)

1238 
	`Ârötf
(
fd
, "%suncom¥es£d d©a", 
£p
);

1241 
	`Ârötf
(
fd
, " Group 3 Options:");

1242 i‡(
•
->
group›ti⁄s
 & 
GROUP3OPT_2DENCODING
)

1243 
	`Ârötf
(
fd
, "%s2-dÉncodög", 
£p
), sep = "+";

1244 i‡(
•
->
group›ti⁄s
 & 
GROUP3OPT_FILLBITS
)

1245 
	`Ârötf
(
fd
, "%sEOLÖaddög", 
£p
), sep = "+";

1246 i‡(
•
->
group›ti⁄s
 & 
GROUP3OPT_UNCOMPRESSED
)

1247 
	`Ârötf
(
fd
, "%suncom¥es£d d©a", 
£p
);

1249 
	`Ârötf
(
fd
, " (%lu = 0x%lx)\n",

1250 (Ë
•
->
group›ti⁄s
,

1251 (Ë
•
->
group›ti⁄s
);

1253 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_CLEANFAXDATA
)) {

1254 
	`Ârötf
(
fd
, " Fax Data:");

1255 
•
->
˛ónÁxd©a
) {

1256 
CLEANFAXDATA_CLEAN
:

1257 
	`Ârötf
(
fd
, " clean");

1259 
CLEANFAXDATA_REGENERATED
:

1260 
	`Ârötf
(
fd
, "ÑeceiverÑegenerated");

1262 
CLEANFAXDATA_UNCLEAN
:

1263 
	`Ârötf
(
fd
, " uncorrectedÉrrors");

1266 
	`Ârötf
(
fd
, " (%u = 0x%x)\n",

1267 
•
->
˛ónÁxd©a
, sp->cleanfaxdata);

1269 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_BADFAXLINES
))

1270 
	`Ârötf
(
fd
, " Bad Fax Lines: %lu\n",

1271 (Ë
•
->
badÁxlöes
);

1272 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_BADFAXRUN
))

1273 
	`Ârötf
(
fd
, " Consecutive Bad Fax Lines: %lu\n",

1274 (Ë
•
->
badÁxrun
);

1275 i‡(
•
->
¥ötdú
)

1276 (*
•
->
¥ötdú
)(
tif
, 
fd
, 
Êags
);

1277 
	}
}

1280 
	$InôCCITTFax3
(
TIFF
* 
tif
)

1282 c⁄° 
moduÀ
[] = "InitCCITTFax3";

1283 
Fax3Ba£Sèã
* 
•
;

1288 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
ÁxFõlds
, 
	`TIFFAºayCou¡
(faxFields))) {

1289 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "InitCCITTFax3",

1297 
tif
->
tif_d©a
 = (
uöt8
*)

1298 
	`_TIFFmÆloc
( (
Fax3CodecSèã
));

1300 i‡(
tif
->
tif_d©a
 =
NULL
) {

1301 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1306 
•
 = 
	`Fax3Sèã
(
tif
);

1307 
•
->
rw_mode
 = 
tif
->
tif_mode
;

1312 
•
->
vgë∑ª¡
 = 
tif
->
tif_ègmëhods
.
vgëfõld
;

1313 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
Fax3VGëFõld
;

1314 
•
->
v£ç¨ít
 = 
tif
->
tif_ègmëhods
.
v£tfõld
;

1315 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
Fax3VSëFõld
;

1316 
•
->
¥ötdú
 = 
tif
->
tif_ègmëhods
.printdir;

1317 
tif
->
tif_ègmëhods
.
¥ötdú
 = 
Fax3PrötDú
;

1318 
•
->
group›ti⁄s
 = 0;

1320 i‡(
•
->
rw_mode
 =
O_RDONLY
)

1321 
tif
->
tif_Êags
 |
TIFF_NOBITREV
;

1322 
	`DecodîSèã
(
tif
)->
runs
 = 
NULL
;

1323 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_FAXFILLFUNC
, 
_TIFFFax3fûÃuns
);

1324 
	`EncodîSèã
(
tif
)->
ªÊöe
 = 
NULL
;

1329 
tif
->
tif_fixu±ags
 = 
Fax3FixupTags
;

1330 
tif
->
tif_£tupdecode
 = 
Fax3SëupSèã
;

1331 
tif
->
tif_¥edecode
 = 
Fax3PªDecode
;

1332 
tif
->
tif_decodîow
 = 
Fax3Decode1D
;

1333 
tif
->
tif_decode°rù
 = 
Fax3Decode1D
;

1334 
tif
->
tif_decodëûe
 = 
Fax3Decode1D
;

1335 
tif
->
tif_£tu≥ncode
 = 
Fax3SëupSèã
;

1336 
tif
->
tif_¥ìncode
 = 
Fax3PªEncode
;

1337 
tif
->
tif_po°ícode
 = 
Fax3Po°Encode
;

1338 
tif
->
tif_ícodîow
 = 
Fax3Encode
;

1339 
tif
->
tif_ícode°rù
 = 
Fax3Encode
;

1340 
tif
->
tif_ícodëûe
 = 
Fax3Encode
;

1341 
tif
->
tif_˛o£
 = 
Fax3Clo£
;

1342 
tif
->
tif_˛ónup
 = 
Fax3CÀ™up
;

1345 
	}
}

1348 
	$TIFFInôCCITTFax3
(
TIFF
* 
tif
, 
scheme
)

1350 (Ë
scheme
;

1351 i‡(
	`InôCCITTFax3
(
tif
)) {

1355 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
Áx3Fõlds
,

1356 
	`TIFFAºayCou¡
(
Áx3Fõlds
))) {

1357 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "TIFFInitCCITTFax3",

1365  
	`TIFFSëFõld
(
tif
, 
TIFFTAG_FAXMODE
, 
FAXMODE_CLASSF
);

1368 
	}
}

1375 
	#SWAP
(
t
,
a
,
b
Ë{Å 
x
; x = (a); (aË(b); (bËx; }

	)

1380 
	$Fax4Decode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

1382 
	`DECLARE_STATE_2D
(
tif
, 
•
, "Fax4Decode");

1383 (Ë
s
;

1384 i‡(
occ
 % 
•
->
b
.
rowbyãs
)

1386 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Fractional scanlines cannot beÑead");

1389 
	`CACHE_STATE
(
tif
, 
•
);

1390 
occ
 > 0) {

1391 
a0
 = 0;

1392 
RunLígth
 = 0;

1393 
∑
 = 
thi§un
 = 
•
->
cuºuns
;

1394 
pb
 = 
•
->
ª‰uns
;

1395 
b1
 = *
pb
++;

1396 #ifde‡
FAX3_DEBUG


1397 
	`¥ötf
("\nBôAcc=%08X, BôsAvaû = %d\n", 
BôAcc
, 
BôsAvaû
);

1398 
	`¥ötf
("-------------------- %d\n", 
tif
->
tif_row
);

1399 
	`fÊush
(
°dout
);

1401 
	`EXPAND2D
(
EOFG4
);

1402 i‡(
EOL˙t
)

1403 
EOFG4
;

1404 (*
•
->
fûl
)(
buf
, 
thi§un
, 
∑
, 
œ°x
);

1405 
	`SETVALUE
(0);

1406 
	`SWAP
(
uöt32
*, 
•
->
cuºuns
, sp->
ª‰uns
);

1407 
buf
 +
•
->
b
.
rowbyãs
;

1408 
occ
 -
•
->
b
.
rowbyãs
;

1409 
•
->
löe
++;

1411 
EOFG4
:

1412 
	`NìdBôs16
–13, 
BADG4
 );

1413 
BADG4
:

1414 #ifde‡
FAX3_DEBUG


1415 if–
	`GëBôs
(13) != 0x1001 )

1416 
	`Âuts
–"Bad EOFB\n", 
°dîr
 );

1418 
	`CÃBôs
( 13 );

1419 (*
•
->
fûl
)(
buf
, 
thi§un
, 
∑
, 
œ°x
);

1420 
	`UNCACHE_STATE
(
tif
, 
•
);

1421  ( 
•
->
löe
 ? 1 : -1);

1423 
	`UNCACHE_STATE
(
tif
, 
•
);

1425 
	}
}

1426 #unde‡
SWAP


1432 
	$Fax4Encode
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

1434 c⁄° 
moduÀ
[] = "Fax4Encode";

1435 
Fax3CodecSèã
 *
•
 = 
	`EncodîSèã
(
tif
);

1436 (Ë
s
;

1437 i‡(
cc
 % 
•
->
b
.
rowbyãs
)

1439 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Fractional scanlines cannot be written");

1442 
cc
 > 0) {

1443 i‡(!
	`Fax3Encode2DRow
(
tif
, 
bp
, 
•
->
ªÊöe
, sp->
b
.
rowpixñs
))

1445 
	`_TIFFmem˝y
(
•
->
ªÊöe
, 
bp
, sp->
b
.
rowbyãs
);

1446 
bp
 +
•
->
b
.
rowbyãs
;

1447 
cc
 -
•
->
b
.
rowbyãs
;

1450 
	}
}

1453 
	$Fax4Po°Encode
(
TIFF
* 
tif
)

1455 
Fax3CodecSèã
 *
•
 = 
	`EncodîSèã
(
tif
);

1458 
	`Fax3PutBôs
(
tif
, 
EOL
, 12);

1459 
	`Fax3PutBôs
(
tif
, 
EOL
, 12);

1460 i‡(
•
->
bô
 != 8)

1461 
	`Fax3FlushBôs
(
tif
, 
•
);

1463 
	}
}

1466 
	$TIFFInôCCITTFax4
(
TIFF
* 
tif
, 
scheme
)

1468 (Ë
scheme
;

1469 i‡(
	`InôCCITTFax3
(
tif
)) {

1473 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
Áx4Fõlds
,

1474 
	`TIFFAºayCou¡
(
Áx4Fõlds
))) {

1475 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "TIFFInitCCITTFax4",

1480 
tif
->
tif_decodîow
 = 
Fax4Decode
;

1481 
tif
->
tif_decode°rù
 = 
Fax4Decode
;

1482 
tif
->
tif_decodëûe
 = 
Fax4Decode
;

1483 
tif
->
tif_ícodîow
 = 
Fax4Encode
;

1484 
tif
->
tif_ícode°rù
 = 
Fax4Encode
;

1485 
tif
->
tif_ícodëûe
 = 
Fax4Encode
;

1486 
tif
->
tif_po°ícode
 = 
Fax4Po°Encode
;

1490  
	`TIFFSëFõld
(
tif
, 
TIFFTAG_FAXMODE
, 
FAXMODE_NORTC
);

1493 
	}
}

1504 
	$Fax3DecodeRLE
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

1506 
	`DECLARE_STATE
(
tif
, 
•
, "Fax3DecodeRLE");

1507 
mode
 = 
•
->
b
.mode;

1508 (Ë
s
;

1509 i‡(
occ
 % 
•
->
b
.
rowbyãs
)

1511 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Fractional scanlines cannot beÑead");

1514 
	`CACHE_STATE
(
tif
, 
•
);

1515 
thi§un
 = 
•
->
cuºuns
;

1516 
occ
 > 0) {

1517 
a0
 = 0;

1518 
RunLígth
 = 0;

1519 
∑
 = 
thi§un
;

1520 #ifde‡
FAX3_DEBUG


1521 
	`¥ötf
("\nBôAcc=%08X, BôsAvaû = %d\n", 
BôAcc
, 
BôsAvaû
);

1522 
	`¥ötf
("-------------------- %d\n", 
tif
->
tif_row
);

1523 
	`fÊush
(
°dout
);

1525 
	`EXPAND1D
(
EOFRLE
);

1526 (*
•
->
fûl
)(
buf
, 
thi§un
, 
∑
, 
œ°x
);

1530 i‡(
mode
 & 
FAXMODE_BYTEALIGN
) {

1531 
n
 = 
BôsAvaû
 - (BitsAvail &~ 7);

1532 
	`CÃBôs
(
n
);

1533 } i‡(
mode
 & 
FAXMODE_WORDALIGN
) {

1534 
n
 = 
BôsAvaû
 - (BitsAvail &~ 15);

1535 
	`CÃBôs
(
n
);

1536 i‡(
BôsAvaû
 =0 && !
	`isAlig√d
(
˝
, 
uöt16
))

1537 
˝
++;

1539 
buf
 +
•
->
b
.
rowbyãs
;

1540 
occ
 -
•
->
b
.
rowbyãs
;

1541 
•
->
löe
++;

1543 
EOFRLE
:

1544 (*
•
->
fûl
)(
buf
, 
thi§un
, 
∑
, 
œ°x
);

1545 
	`UNCACHE_STATE
(
tif
, 
•
);

1548 
	`UNCACHE_STATE
(
tif
, 
•
);

1550 
	}
}

1553 
	$TIFFInôCCITTRLE
(
TIFF
* 
tif
, 
scheme
)

1555 (Ë
scheme
;

1556 i‡(
	`InôCCITTFax3
(
tif
)) {

1557 
tif
->
tif_decodîow
 = 
Fax3DecodeRLE
;

1558 
tif
->
tif_decode°rù
 = 
Fax3DecodeRLE
;

1559 
tif
->
tif_decodëûe
 = 
Fax3DecodeRLE
;

1563  
	`TIFFSëFõld
(
tif
, 
TIFFTAG_FAXMODE
,

1564 
FAXMODE_NORTC
|
FAXMODE_NOEOL
|
FAXMODE_BYTEALIGN
);

1567 
	}
}

1570 
	$TIFFInôCCITTRLEW
(
TIFF
* 
tif
, 
scheme
)

1572 (Ë
scheme
;

1573 i‡(
	`InôCCITTFax3
(
tif
)) {

1574 
tif
->
tif_decodîow
 = 
Fax3DecodeRLE
;

1575 
tif
->
tif_decode°rù
 = 
Fax3DecodeRLE
;

1576 
tif
->
tif_decodëûe
 = 
Fax3DecodeRLE
;

1580  
	`TIFFSëFõld
(
tif
, 
TIFFTAG_FAXMODE
,

1581 
FAXMODE_NORTC
|
FAXMODE_NOEOL
|
FAXMODE_WORDALIGN
);

1584 
	}
}

	@libtiff/tif_fax3.h

27 #i‚de‡
_FAX3_


28 
	#_FAX3_


	)

38 
	~"tiff.h
"

55 (*
	tTIFFFaxFûlFunc
)(*, 
	tuöt32
*, uint32*, uint32);

60 #i‡
	`deföed
(
__˝lu•lus
)

63 
	`_TIFFFax3fûÃuns
(*, 
uöt32
*, uint32*, uint32);

64 #i‡
	`deföed
(
__˝lu•lus
)

65 
	}
}

70 
	#S_NuŒ
 0

	)

71 
	#S_Pass
 1

	)

72 
	#S_H‹iz
 2

	)

73 
	#S_V0
 3

	)

74 
	#S_VR
 4

	)

75 
	#S_VL
 5

	)

76 
	#S_Ext
 6

	)

77 
	#S_TîmW
 7

	)

78 
	#S_TîmB
 8

	)

79 
	#S_MakeUpW
 9

	)

80 
	#S_MakeUpB
 10

	)

81 
	#S_MakeUp
 11

	)

82 
	#S_EOL
 12

	)

85 
	mSèã
;

86 
	mWidth
;

87 
uöt32
 
	mP¨am
;

88 } 
	tTIFFFaxTabE¡
;

90 c⁄° 
TIFFFaxTabE¡
 
TIFFFaxMaöTabÀ
[];

91 c⁄° 
TIFFFaxTabE¡
 
TIFFFaxWhôeTabÀ
[];

92 c⁄° 
TIFFFaxTabE¡
 
TIFFFaxBœckTabÀ
[];

110 #i‚de‡
EndOfD©a


111 
	#EndOfD©a
(Ë(
˝
 >
ï
)

	)

136 #i‚de‡
NìdBôs8


137 
	#NìdBôs8
(
n
,
eoÊab
) do { \

138 i‡(
BôsAvaû
 < (
n
)) { \

139 i‡(
	`EndOfD©a
()) { \

140 i‡(
BôsAvaû
 == 0) \

141 
eoÊab
; \

142 
BôsAvaû
 = (
n
); \

144 
BôAcc
 |((
uöt32
Ë
bôm≠
[*
˝
++])<<
BôsAvaû
; \

145 
BôsAvaû
 += 8; \

148 } 0)

	)

150 #i‚de‡
NìdBôs16


151 
	#NìdBôs16
(
n
,
eoÊab
) do { \

152 i‡(
BôsAvaû
 < (
n
)) { \

153 i‡(
	`EndOfD©a
()) { \

154 i‡(
BôsAvaû
 == 0) \

155 
eoÊab
; \

156 
BôsAvaû
 = (
n
); \

158 
BôAcc
 |((
uöt32
Ë
bôm≠
[*
˝
++])<<
BôsAvaû
; \

159 i‡((
BôsAvaû
 +8Ë< (
n
)) { \

160 i‡(
	`EndOfD©a
()) { \

162 
BôsAvaû
 = (
n
); \

164 
BôAcc
 |((
uöt32
Ë
bôm≠
[*
˝
++])<<
BôsAvaû
; \

165 
BôsAvaû
 += 8; \

170 } 0)

	)

172 
	#GëBôs
(
n
Ë(
BôAcc
 & ((1<<“))-1))

	)

173 
	#CÃBôs
(
n
) do { \

174 
BôsAvaû
 -(
n
); \

175 
BôAcc
 >>(
n
); \

176 } 0)

	)

178 #ifde‡
FAX3_DEBUG


179 c⁄° * 
	gSèãNames
[] = {

194 
	#DEBUG_SHOW
 
	`putch¨
(
BôAcc
 & (1 << 
t
Ë? '1' : '0')

	)

195 
	#LOOKUP8
(
wid
,
èb
,
eoÊab
) do { \

196 
t
; \

197 
	`NìdBôs8
(
wid
,
eoÊab
); \

198 
TabE¡
 = 
èb
 + 
	`GëBôs
(
wid
); \

199 
	`¥ötf
("%08lX/%d: %s%5d\t", (Ë
BôAcc
, 
BôsAvaû
, \

200 
SèãNames
[
TabE¡
->
Sèã
], TabE¡->
P¨am
); \

201 
t
 = 0;Å < 
TabE¡
->
Width
;Å++) \

202 
DEBUG_SHOW
; \

203 
	`putch¨
('\n'); \

204 
	`fÊush
(
°dout
); \

205 
	`CÃBôs
(
TabE¡
->
Width
); \

206 } 0)

	)

207 
	#LOOKUP16
(
wid
,
èb
,
eoÊab
) do { \

208 
t
; \

209 
	`NìdBôs16
(
wid
,
eoÊab
); \

210 
TabE¡
 = 
èb
 + 
	`GëBôs
(
wid
); \

211 
	`¥ötf
("%08lX/%d: %s%5d\t", (Ë
BôAcc
, 
BôsAvaû
, \

212 
SèãNames
[
TabE¡
->
Sèã
], TabE¡->
P¨am
); \

213 
t
 = 0;Å < 
TabE¡
->
Width
;Å++) \

214 
DEBUG_SHOW
; \

215 
	`putch¨
('\n'); \

216 
	`fÊush
(
°dout
); \

217 
	`CÃBôs
(
TabE¡
->
Width
); \

218 } 0)

	)

220 
	#SETVALUE
(
x
) do { \

221 *
∑
++ = 
RunLígth
 + (
x
); \

222 
	`¥ötf
("SETVALUE: %d\t%d\n", 
RunLígth
 + (
x
), 
a0
); \

223 
a0
 +
x
; \

224 
RunLígth
 = 0; \

225 } 0)

	)

227 
	#LOOKUP8
(
wid
,
èb
,
eoÊab
) do { \

228 
	`NìdBôs8
(
wid
,
eoÊab
); \

229 
TabE¡
 = 
èb
 + 
	`GëBôs
(
wid
); \

230 
	`CÃBôs
(
TabE¡
->
Width
); \

231 } 0)

	)

232 
	#LOOKUP16
(
wid
,
èb
,
eoÊab
) do { \

233 
	`NìdBôs16
(
wid
,
eoÊab
); \

234 
TabE¡
 = 
èb
 + 
	`GëBôs
(
wid
); \

235 
	`CÃBôs
(
TabE¡
->
Width
); \

236 } 0)

	)

242 
	#SETVALUE
(
x
) do { \

243 *
∑
++ = 
RunLígth
 + (
x
); \

244 
a0
 +(
x
); \

245 
RunLígth
 = 0; \

246 } 0)

	)

259 
	#SYNC_EOL
(
eoÊab
) do { \

260 i‡(
EOL˙t
 == 0) { \

262 
	`NìdBôs16
(11,
eoÊab
); \

263 i‡(
	`GëBôs
(11) == 0) \

265 
	`CÃBôs
(1); \

269 
	`NìdBôs8
(8,
eoÊab
); \

270 i‡(
	`GëBôs
(8)) \

272 
	`CÃBôs
(8); \

274 
	`GëBôs
(1) == 0) \

275 
	`CÃBôs
(1); \

276 
	`CÃBôs
(1); \

277 
EOL˙t
 = 0; \

278 } 0)

	)

285 
	#CLEANUP_RUNS
() do { \

286 i‡(
RunLígth
) \

287 
	`SETVALUE
(0); \

288 i‡(
a0
 !
œ°x
) { \

289 
	`badÀngth
(
a0
, 
œ°x
); \

290 
a0
 > 
œ°x
 && 
∑
 > 
thi§un
) \

291 
a0
 -*--
∑
; \

292 i‡(
a0
 < 
œ°x
) { \

293 i‡(
a0
 < 0) \

294 
a0
 = 0; \

295 i‡((
∑
-
thi§un
)&1) \

296 
	`SETVALUE
(0); \

297 
	`SETVALUE
(
œ°x
 - 
a0
); \

298 } i‡(
a0
 > 
œ°x
) { \

299 
	`SETVALUE
(
œ°x
); \

300 
	`SETVALUE
(0); \

303 } 0)

	)

317 
	#EXPAND1D
(
eoÊab
) do { \

320 
	`LOOKUP16
(12, 
TIFFFaxWhôeTabÀ
, 
eof1d
); \

321 
TabE¡
->
Sèã
) { \

322 
S_EOL
: \

323 
EOL˙t
 = 1; \

324 
d⁄e1d
; \

325 
S_TîmW
: \

326 
	`SETVALUE
(
TabE¡
->
P¨am
); \

327 
d⁄eWhôe1d
; \

328 
S_MakeUpW
: \

329 
S_MakeUp
: \

330 
a0
 +
TabE¡
->
P¨am
; \

331 
RunLígth
 +
TabE¡
->
P¨am
; \

334 
	`u√x≥˘ed
("WhôeTabÀ", 
a0
); \

335 
d⁄e1d
; \

338 
d⁄eWhôe1d
: \

339 i‡(
a0
 >
œ°x
) \

340 
d⁄e1d
; \

342 
	`LOOKUP16
(13, 
TIFFFaxBœckTabÀ
, 
eof1d
); \

343 
TabE¡
->
Sèã
) { \

344 
S_EOL
: \

345 
EOL˙t
 = 1; \

346 
d⁄e1d
; \

347 
S_TîmB
: \

348 
	`SETVALUE
(
TabE¡
->
P¨am
); \

349 
d⁄eBœck1d
; \

350 
S_MakeUpB
: \

351 
S_MakeUp
: \

352 
a0
 +
TabE¡
->
P¨am
; \

353 
RunLígth
 +
TabE¡
->
P¨am
; \

356 
	`u√x≥˘ed
("BœckTabÀ", 
a0
); \

357 
d⁄e1d
; \

360 
d⁄eBœck1d
: \

361 i‡(
a0
 >
œ°x
) \

362 
d⁄e1d
; \

363 if–*(
∑
-1) == 0 && *(pa-2) == 0 ) \

364 
∑
 -= 2; \

366 
eof1d
: \

367 
	`¥em©uªEOF
(
a0
); \

368 
	`CLEANUP_RUNS
(); \

369 
eoÊab
; \

370 
d⁄e1d
: \

371 
	`CLEANUP_RUNS
(); \

372 } 0)

	)

378 
	#CHECK_b1
 do { \

379 i‡(
∑
 !
thi§un
Ë
b1
 <
a0
 && b1 < 
œ°x
) { \

380 
b1
 +
pb
[0] +Öb[1]; \

381 
pb
 += 2; \

383 } 0)

	)

388 
	#EXPAND2D
(
eoÊab
) do { \

389 
a0
 < 
œ°x
) { \

390 
	`LOOKUP8
(7, 
TIFFFaxMaöTabÀ
, 
eof2d
); \

391 
TabE¡
->
Sèã
) { \

392 
S_Pass
: \

393 
CHECK_b1
; \

394 
b1
 +*
pb
++; \

395 
RunLígth
 +
b1
 - 
a0
; \

396 
a0
 = 
b1
; \

397 
b1
 +*
pb
++; \

399 
S_H‹iz
: \

400 i‡((
∑
-
thi§un
)&1) { \

402 
	`LOOKUP16
(13, 
TIFFFaxBœckTabÀ
, 
eof2d
); \

403 
TabE¡
->
Sèã
) { \

404 
S_TîmB
: \

405 
	`SETVALUE
(
TabE¡
->
P¨am
); \

406 
d⁄eWhôe2da
; \

407 
S_MakeUpB
: \

408 
S_MakeUp
: \

409 
a0
 +
TabE¡
->
P¨am
; \

410 
RunLígth
 +
TabE¡
->
P¨am
; \

413 
badBœck2d
; \

416 
d⁄eWhôe2da
:; \

418 
	`LOOKUP16
(12, 
TIFFFaxWhôeTabÀ
, 
eof2d
); \

419 
TabE¡
->
Sèã
) { \

420 
S_TîmW
: \

421 
	`SETVALUE
(
TabE¡
->
P¨am
); \

422 
d⁄eBœck2da
; \

423 
S_MakeUpW
: \

424 
S_MakeUp
: \

425 
a0
 +
TabE¡
->
P¨am
; \

426 
RunLígth
 +
TabE¡
->
P¨am
; \

429 
badWhôe2d
; \

432 
d⁄eBœck2da
:; \

435 
	`LOOKUP16
(12, 
TIFFFaxWhôeTabÀ
, 
eof2d
); \

436 
TabE¡
->
Sèã
) { \

437 
S_TîmW
: \

438 
	`SETVALUE
(
TabE¡
->
P¨am
); \

439 
d⁄eWhôe2db
; \

440 
S_MakeUpW
: \

441 
S_MakeUp
: \

442 
a0
 +
TabE¡
->
P¨am
; \

443 
RunLígth
 +
TabE¡
->
P¨am
; \

446 
badWhôe2d
; \

449 
d⁄eWhôe2db
:; \

451 
	`LOOKUP16
(13, 
TIFFFaxBœckTabÀ
, 
eof2d
); \

452 
TabE¡
->
Sèã
) { \

453 
S_TîmB
: \

454 
	`SETVALUE
(
TabE¡
->
P¨am
); \

455 
d⁄eBœck2db
; \

456 
S_MakeUpB
: \

457 
S_MakeUp
: \

458 
a0
 +
TabE¡
->
P¨am
; \

459 
RunLígth
 +
TabE¡
->
P¨am
; \

462 
badBœck2d
; \

465 
d⁄eBœck2db
:; \

467 
CHECK_b1
; \

469 
S_V0
: \

470 
CHECK_b1
; \

471 
	`SETVALUE
(
b1
 - 
a0
); \

472 
b1
 +*
pb
++; \

474 
S_VR
: \

475 
CHECK_b1
; \

476 
	`SETVALUE
(
b1
 - 
a0
 + 
TabE¡
->
P¨am
); \

477 
b1
 +*
pb
++; \

479 
S_VL
: \

480 
CHECK_b1
; \

481 i‡(
b1
 <(Ë(
a0
 + 
TabE¡
->
P¨am
)) { \

482 i‡(
b1
 < (Ë(
a0
 + 
TabE¡
->
P¨am
Ë|| 
∑
 !
thi§un
) { \

483 
	`u√x≥˘ed
("VL", 
a0
); \

484 
eﬁ2d
; \

487 
	`SETVALUE
(
b1
 - 
a0
 - 
TabE¡
->
P¨am
); \

488 
b1
 -*--
pb
; \

490 
S_Ext
: \

491 *
∑
++ = 
œ°x
 - 
a0
; \

492 
	`exãnsi⁄
(
a0
); \

493 
eﬁ2d
; \

494 
S_EOL
: \

495 *
∑
++ = 
œ°x
 - 
a0
; \

496 
	`NìdBôs8
(4,
eof2d
); \

497 i‡(
	`GëBôs
(4)) \

498 
	`u√x≥˘ed
("EOL", 
a0
); \

499 
	`CÃBôs
(4); \

500 
EOL˙t
 = 1; \

501 
eﬁ2d
; \

503 
badMaö2d
: \

504 
	`u√x≥˘ed
("MaöTabÀ", 
a0
); \

505 
eﬁ2d
; \

506 
badBœck2d
: \

507 
	`u√x≥˘ed
("BœckTabÀ", 
a0
); \

508 
eﬁ2d
; \

509 
badWhôe2d
: \

510 
	`u√x≥˘ed
("WhôeTabÀ", 
a0
); \

511 
eﬁ2d
; \

512 
eof2d
: \

513 
	`¥em©uªEOF
(
a0
); \

514 
	`CLEANUP_RUNS
(); \

515 
eoÊab
; \

518 i‡(
RunLígth
) { \

519 i‡(
RunLígth
 + 
a0
 < 
œ°x
) { \

521 
	`NìdBôs8
(1,
eof2d
); \

522 i‡(!
	`GëBôs
(1)) \

523 
badMaö2d
; \

524 
	`CÃBôs
(1); \

526 
	`SETVALUE
(0); \

528 
eﬁ2d
: \

529 
	`CLEANUP_RUNS
(); \

530 } 0)

	)

	@libtiff/tif_fax3sm.c

3 
	~"tiff.h
"

4 
	~"tif_Áx3.h
"

5 c⁄° 
TIFFFaxTabE¡
 
	gTIFFFaxMaöTabÀ
[128] = {

20 c⁄° 
TIFFFaxTabE¡
 
	gTIFFFaxWhôeTabÀ
[4096] = {

432 c⁄° 
TIFFFaxTabE¡
 
	gTIFFFaxBœckTabÀ
[8192] = {

	@libtiff/tif_flush.c

30 
	~"tiffi›.h
"

33 
	$TIFFFlush
(
TIFF
* 
tif
)

35 if–
tif
->
tif_mode
 =
O_RDONLY
 )

38 i‡(!
	`TIFFFlushD©a
(
tif
))

46 if–(
tif
->
tif_Êags
 & 
TIFF_DIRTYSTRIP
)

47 && !(
tif
->
tif_Êags
 & 
TIFF_DIRTYDIRECT
)

48 && 
tif
->
tif_mode
 =
O_RDWR
 )

50 
uöt64
 *
off£ts
=
NULL
, *
sizes
=NULL;

52 if–
	`TIFFIsTûed
(
tif
) )

54 if–
	`TIFFGëFõld
–
tif
, 
TIFFTAG_TILEOFFSETS
, &
off£ts
 )

55 && 
	`TIFFGëFõld
–
tif
, 
TIFFTAG_TILEBYTECOUNTS
, &
sizes
 )

56 && 
	`_TIFFRewrôeFõld
–
tif
, 
TIFFTAG_TILEOFFSETS
, 
TIFF_LONG8
,

57 
tif
->
tif_dú
.
td_n°rùs
, 
off£ts
 )

58 && 
	`_TIFFRewrôeFõld
–
tif
, 
TIFFTAG_TILEBYTECOUNTS
, 
TIFF_LONG8
,

59 
tif
->
tif_dú
.
td_n°rùs
, 
sizes
 ) )

61 
tif
->
tif_Êags
 &~
TIFF_DIRTYSTRIP
;

62 
tif
->
tif_Êags
 &~
TIFF_BEENWRITING
;

68 if–
	`TIFFGëFõld
–
tif
, 
TIFFTAG_STRIPOFFSETS
, &
off£ts
 )

69 && 
	`TIFFGëFõld
–
tif
, 
TIFFTAG_STRIPBYTECOUNTS
, &
sizes
 )

70 && 
	`_TIFFRewrôeFõld
–
tif
, 
TIFFTAG_STRIPOFFSETS
, 
TIFF_LONG8
,

71 
tif
->
tif_dú
.
td_n°rùs
, 
off£ts
 )

72 && 
	`_TIFFRewrôeFõld
–
tif
, 
TIFFTAG_STRIPBYTECOUNTS
, 
TIFF_LONG8
,

73 
tif
->
tif_dú
.
td_n°rùs
, 
sizes
 ) )

75 
tif
->
tif_Êags
 &~
TIFF_DIRTYSTRIP
;

76 
tif
->
tif_Êags
 &~
TIFF_BEENWRITING
;

82 i‡((
tif
->
tif_Êags
 & (
TIFF_DIRTYDIRECT
|
TIFF_DIRTYSTRIP
))

83 && !
	`TIFFRewrôeDúe˘‹y
(
tif
))

87 
	}
}

99 
	$TIFFFlushD©a
(
TIFF
* 
tif
)

101 i‡((
tif
->
tif_Êags
 & 
TIFF_BEENWRITING
) == 0)

103 i‡(
tif
->
tif_Êags
 & 
TIFF_POSTENCODE
) {

104 
tif
->
tif_Êags
 &~
TIFF_POSTENCODE
;

105 i‡(!(*
tif
->
tif_po°ícode
)(tif))

108  (
	`TIFFFlushD©a1
(
tif
));

109 
	}
}

	@libtiff/tif_getimage.c

32 
	~"tiffi›.h
"

33 
	~<°dio.h
>

35 
gtTûeC⁄tig
(
TIFFRGBAImage
*, 
uöt32
*, uint32, uint32);

36 
gtTûeSï¨©e
(
TIFFRGBAImage
*, 
uöt32
*, uint32, uint32);

37 
gtSåùC⁄tig
(
TIFFRGBAImage
*, 
uöt32
*, uint32, uint32);

38 
gtSåùSï¨©e
(
TIFFRGBAImage
*, 
uöt32
*, uint32, uint32);

39 
PickC⁄tigCa£
(
TIFFRGBAImage
*);

40 
PickSï¨©eCa£
(
TIFFRGBAImage
*);

42 
BuûdM≠UaToAa
(
TIFFRGBAImage
* 
img
);

43 
BuûdM≠Bôdïth16To8
(
TIFFRGBAImage
* 
img
);

45 c⁄° 
	gphŸoTag
[] = "PhotometricInterpretation";

50 
	#FLIP_VERTICALLY
 0x01

	)

51 
	#FLIP_HORIZONTALLY
 0x02

	)

57 c⁄° 
TIFFDi•œy
 
	gdi•œy_sRGB
 = {

76 
	$TIFFRGBAImageOK
(
TIFF
* 
tif
, 
emsg
[1024])

78 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

79 
uöt16
 
phŸomëric
;

80 
cﬁ‹ch™√ls
;

82 i‡(!
tif
->
tif_decode°©us
) {

83 
	`•rötf
(
emsg
, "Sorry,Ñequested compression method isÇot configured");

86 
td
->
td_bô•îßm∂e
) {

94 
	`•rötf
(
emsg
, "Sorry, canÇot handle images with %d-bit samples",

95 
td
->
td_bô•îßm∂e
);

98 
cﬁ‹ch™√ls
 = 
td
->
td_ßm∂e•îpixñ
 -Åd->
td_exåaßm∂es
;

99 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, &
phŸomëric
)) {

100 
cﬁ‹ch™√ls
) {

102 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

105 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

108 
	`•rötf
(
emsg
, "MissögÇìded %†èg", 
phŸoTag
);

112 
phŸomëric
) {

113 
PHOTOMETRIC_MINISWHITE
:

114 
PHOTOMETRIC_MINISBLACK
:

115 
PHOTOMETRIC_PALETTE
:

116 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG


117 && 
td
->
td_ßm∂e•îpixñ
 != 1

118 && 
td
->
td_bô•îßm∂e
 < 8 ) {

119 
	`•rötf
(
emsg
,

122 
phŸoTag
, 
phŸomëric
,

123 "Sam∂es/pixñ", 
td
->
td_ßm∂e•îpixñ
,

124 
td
->
td_bô•îßm∂e
);

133 
PHOTOMETRIC_YCBCR
:

141 
PHOTOMETRIC_RGB
:

142 i‡(
cﬁ‹ch™√ls
 < 3) {

143 
	`•rötf
(
emsg
, "Sorry, canÇot handle RGB image with %s=%d",

144 "Cﬁ‹ ch™√ls", 
cﬁ‹ch™√ls
);

148 
PHOTOMETRIC_SEPARATED
:

150 
uöt16
 
ök£t
;

151 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_INKSET
, &
ök£t
);

152 i‡(
ök£t
 !
INKSET_CMYK
) {

153 
	`•rötf
(
emsg
,

155 "InkSë", 
ök£t
);

158 i‡(
td
->
td_ßm∂e•îpixñ
 < 4) {

159 
	`•rötf
(
emsg
,

161 "Sam∂es/pixñ", 
td
->
td_ßm∂e•îpixñ
);

166 
PHOTOMETRIC_LOGL
:

167 i‡(
td
->
td_com¥essi⁄
 !
COMPRESSION_SGILOG
) {

168 
	`•rötf
(
emsg
, "Sorry, LogL data must have %s=%d",

169 "Com¥essi⁄", 
COMPRESSION_SGILOG
);

173 
PHOTOMETRIC_LOGLUV
:

174 i‡(
td
->
td_com¥essi⁄
 !
COMPRESSION_SGILOG
 &&

175 
td
->
td_com¥essi⁄
 !
COMPRESSION_SGILOG24
) {

176 
	`•rötf
(
emsg
, "Sorry, LogLuv data must have %s=%d or %d",

177 "Com¥essi⁄", 
COMPRESSION_SGILOG
, 
COMPRESSION_SGILOG24
);

180 i‡(
td
->
td_∂™¨c⁄fig
 !
PLANARCONFIG_CONTIG
) {

181 
	`•rötf
(
emsg
, "Sorry, canÇot handle LogLuv images with %s=%d",

182 "Pœ«rc⁄figuøti⁄", 
td
->
td_∂™¨c⁄fig
);

186 
PHOTOMETRIC_CIELAB
:

189 
	`•rötf
(
emsg
, "Sorry, canÇot handle image with %s=%d",

190 
phŸoTag
, 
phŸomëric
);

194 
	}
}

197 
	$TIFFRGBAImageEnd
(
TIFFRGBAImage
* 
img
)

199 i‡(
img
->
M≠
)

200 
	`_TIFF‰ì
(
img
->
M≠
), img->M≠ = 
NULL
;

201 i‡(
img
->
BWm≠
)

202 
	`_TIFF‰ì
(
img
->
BWm≠
), img->BWm≠ = 
NULL
;

203 i‡(
img
->
PALm≠
)

204 
	`_TIFF‰ì
(
img
->
PALm≠
), img->PALm≠ = 
NULL
;

205 i‡(
img
->
ycb¸
)

206 
	`_TIFF‰ì
(
img
->
ycb¸
), img->ycb¸ = 
NULL
;

207 i‡(
img
->
cõœb
)

208 
	`_TIFF‰ì
(
img
->
cõœb
), img->cõœb = 
NULL
;

209 i‡(
img
->
UaToAa
)

210 
	`_TIFF‰ì
(
img
->
UaToAa
), img->UaToA®
NULL
;

211 i‡(
img
->
Bôdïth16To8
)

212 
	`_TIFF‰ì
(
img
->
Bôdïth16To8
), img->Bôdïth16To8 = 
NULL
;

214 if–
img
->
ªdcm≠
 ) {

215 
	`_TIFF‰ì
–
img
->
ªdcm≠
 );

216 
	`_TIFF‰ì
–
img
->
gªícm≠
 );

217 
	`_TIFF‰ì
–
img
->
bluecm≠
 );

218 
img
->
ªdcm≠
 = img->
gªícm≠
 = img->
bluecm≠
 = 
NULL
;

220 
	}
}

223 
	$isCCITTCom¥essi⁄
(
TIFF
* 
tif
)

225 
uöt16
 
com¥ess
;

226 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, &
com¥ess
);

227  (
com¥ess
 =
COMPRESSION_CCITTFAX3
 ||

228 
com¥ess
 =
COMPRESSION_CCITTFAX4
 ||

229 
com¥ess
 =
COMPRESSION_CCITTRLE
 ||

230 
com¥ess
 =
COMPRESSION_CCITTRLEW
);

231 
	}
}

234 
	$TIFFRGBAImageBegö
(
TIFFRGBAImage
* 
img
, 
TIFF
* 
tif
, 
°›
, 
emsg
[1024])

236 
uöt16
* 
ßm∂eöfo
;

237 
uöt16
 
exåaßm∂es
;

238 
uöt16
 
∂™¨c⁄fig
;

239 
uöt16
 
com¥ess
;

240 
cﬁ‹ch™√ls
;

241 
uöt16
 *
ªd_‹ig
, *
gªí_‹ig
, *
blue_‹ig
;

242 
n_cﬁ‹
;

245 
img
->
row_off£t
 = 0;

246 
img
->
cﬁ_off£t
 = 0;

247 
img
->
ªdcm≠
 = 
NULL
;

248 
img
->
gªícm≠
 = 
NULL
;

249 
img
->
bluecm≠
 = 
NULL
;

250 
img
->
ªq_‹õ¡©i⁄
 = 
ORIENTATION_BOTLEFT
;

252 
img
->
tif
 =Åif;

253 
img
->
°›⁄îr
 = 
°›
;

254 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, &
img
->
bô•îßm∂e
);

255 
img
->
bô•îßm∂e
) {

263 
	`•rötf
(
emsg
, "Sorry, canÇot handle images with %d-bit samples",

264 
img
->
bô•îßm∂e
);

265 
Áû_ªtu∫
;

267 
img
->
Æpha
 = 0;

268 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, &
img
->
ßm∂e•îpixñ
);

269 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_EXTRASAMPLES
,

270 &
exåaßm∂es
, &
ßm∂eöfo
);

271 i‡(
exåaßm∂es
 >= 1)

273 
ßm∂eöfo
[0]) {

274 
EXTRASAMPLE_UNSPECIFIED
:

275 i‡(
img
->
ßm∂e•îpixñ
 > 3)

276 
img
->
Æpha
 = 
EXTRASAMPLE_ASSOCALPHA
;

278 
EXTRASAMPLE_ASSOCALPHA
:

279 
EXTRASAMPLE_UNASSALPHA
:

280 
img
->
Æpha
 = 
ßm∂eöfo
[0];

285 #ifde‡
DEFAULT_EXTRASAMPLE_AS_ALPHA


286 if–!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, &
img
->
phŸomëric
))

287 
img
->
phŸomëric
 = 
PHOTOMETRIC_MINISWHITE
;

289 if–
exåaßm∂es
 == 0

290 && 
img
->
ßm∂e•îpixñ
 == 4

291 && 
img
->
phŸomëric
 =
PHOTOMETRIC_RGB
 )

293 
img
->
Æpha
 = 
EXTRASAMPLE_ASSOCALPHA
;

294 
exåaßm∂es
 = 1;

298 
cﬁ‹ch™√ls
 = 
img
->
ßm∂e•îpixñ
 - 
exåaßm∂es
;

299 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_COMPRESSION
, &
com¥ess
);

300 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_PLANARCONFIG
, &
∂™¨c⁄fig
);

301 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, &
img
->
phŸomëric
)) {

302 
cﬁ‹ch™√ls
) {

304 i‡(
	`isCCITTCom¥essi⁄
(
tif
))

305 
img
->
phŸomëric
 = 
PHOTOMETRIC_MINISWHITE
;

307 
img
->
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

310 
img
->
phŸomëric
 = 
PHOTOMETRIC_RGB
;

313 
	`•rötf
(
emsg
, "MissögÇìded %†èg", 
phŸoTag
);

314 
Áû_ªtu∫
;

317 
img
->
phŸomëric
) {

318 
PHOTOMETRIC_PALETTE
:

319 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COLORMAP
,

320 &
ªd_‹ig
, &
gªí_‹ig
, &
blue_‹ig
)) {

321 
	`•rötf
(
emsg
, "MissingÑequired \"Colormap\"Åag");

322 
Áû_ªtu∫
;

326 
n_cﬁ‹
 = (1L << 
img
->
bô•îßm∂e
);

327 
img
->
ªdcm≠
 = (
uöt16
 *Ë
	`_TIFFmÆloc
((uöt16)*
n_cﬁ‹
);

328 
img
->
gªícm≠
 = (
uöt16
 *Ë
	`_TIFFmÆloc
((uöt16)*
n_cﬁ‹
);

329 
img
->
bluecm≠
 = (
uöt16
 *Ë
	`_TIFFmÆloc
((uöt16)*
n_cﬁ‹
);

330 if–!
img
->
ªdcm≠
 || !img->
gªícm≠
 || !img->
bluecm≠
 ) {

331 
	`•rötf
(
emsg
, "Out of memory for colormap copy");

332 
Áû_ªtu∫
;

335 
	`_TIFFmem˝y
–
img
->
ªdcm≠
, 
ªd_‹ig
, 
n_cﬁ‹
 * 2 );

336 
	`_TIFFmem˝y
–
img
->
gªícm≠
, 
gªí_‹ig
, 
n_cﬁ‹
 * 2 );

337 
	`_TIFFmem˝y
–
img
->
bluecm≠
, 
blue_‹ig
, 
n_cﬁ‹
 * 2 );

340 
PHOTOMETRIC_MINISWHITE
:

341 
PHOTOMETRIC_MINISBLACK
:

342 i‡(
∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG


343 && 
img
->
ßm∂e•îpixñ
 != 1

344 && 
img
->
bô•îßm∂e
 < 8 ) {

345 
	`•rötf
(
emsg
,

348 
phŸoTag
, 
img
->
phŸomëric
,

349 "Sam∂es/pixñ", 
img
->
ßm∂e•îpixñ
,

350 
img
->
bô•îßm∂e
);

351 
Áû_ªtu∫
;

354 
PHOTOMETRIC_YCBCR
:

356 i‡(
∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
)

359 
com¥ess
) {

360 
COMPRESSION_JPEG
:

366 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_JPEGCOLORMODE
, 
JPEGCOLORMODE_RGB
);

367 
img
->
phŸomëric
 = 
PHOTOMETRIC_RGB
;

380 
PHOTOMETRIC_RGB
:

381 i‡(
cﬁ‹ch™√ls
 < 3) {

382 
	`•rötf
(
emsg
, "Sorry, canÇot handle RGB image with %s=%d",

383 "Cﬁ‹ ch™√ls", 
cﬁ‹ch™√ls
);

384 
Áû_ªtu∫
;

387 
PHOTOMETRIC_SEPARATED
:

389 
uöt16
 
ök£t
;

390 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_INKSET
, &
ök£t
);

391 i‡(
ök£t
 !
INKSET_CMYK
) {

392 
	`•rötf
(
emsg
, "Sorry, canÇot handle separated image with %s=%d",

393 "InkSë", 
ök£t
);

394 
Áû_ªtu∫
;

396 i‡(
img
->
ßm∂e•îpixñ
 < 4) {

397 
	`•rötf
(
emsg
, "Sorry, canÇot handle separated image with %s=%d",

398 "Sam∂es/pixñ", 
img
->
ßm∂e•îpixñ
);

399 
Áû_ªtu∫
;

403 
PHOTOMETRIC_LOGL
:

404 i‡(
com¥ess
 !
COMPRESSION_SGILOG
) {

405 
	`•rötf
(
emsg
, "Sorry, LogL data must have %s=%d",

406 "Com¥essi⁄", 
COMPRESSION_SGILOG
);

407 
Áû_ªtu∫
;

409 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SGILOGDATAFMT
, 
SGILOGDATAFMT_8BIT
);

410 
img
->
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

411 
img
->
bô•îßm∂e
 = 8;

413 
PHOTOMETRIC_LOGLUV
:

414 i‡(
com¥ess
 !
COMPRESSION_SGILOG
 && com¥es†!
COMPRESSION_SGILOG24
) {

415 
	`•rötf
(
emsg
, "Sorry, LogLuv data must have %s=%d or %d",

416 "Com¥essi⁄", 
COMPRESSION_SGILOG
, 
COMPRESSION_SGILOG24
);

417 
Áû_ªtu∫
;

419 i‡(
∂™¨c⁄fig
 !
PLANARCONFIG_CONTIG
) {

420 
	`•rötf
(
emsg
, "Sorry, canÇot handle LogLuv images with %s=%d",

421 "Pœ«rc⁄figuøti⁄", 
∂™¨c⁄fig
);

424 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SGILOGDATAFMT
, 
SGILOGDATAFMT_8BIT
);

425 
img
->
phŸomëric
 = 
PHOTOMETRIC_RGB
;

426 
img
->
bô•îßm∂e
 = 8;

428 
PHOTOMETRIC_CIELAB
:

431 
	`•rötf
(
emsg
, "Sorry, canÇot handle image with %s=%d",

432 
phŸoTag
, 
img
->
phŸomëric
);

433 
Áû_ªtu∫
;

435 
img
->
M≠
 = 
NULL
;

436 
img
->
BWm≠
 = 
NULL
;

437 
img
->
PALm≠
 = 
NULL
;

438 
img
->
ycb¸
 = 
NULL
;

439 
img
->
cõœb
 = 
NULL
;

440 
img
->
UaToAa
 = 
NULL
;

441 
img
->
Bôdïth16To8
 = 
NULL
;

442 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, &
img
->
width
);

443 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
img
->
height
);

444 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_ORIENTATION
, &
img
->
‹õ¡©i⁄
);

445 
img
->
isC⁄tig
 =

446 !(
∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
 && 
img
->
ßm∂e•îpixñ
 > 1);

447 i‡(
img
->
isC⁄tig
) {

448 i‡(!
	`PickC⁄tigCa£
(
img
)) {

449 
	`•rötf
(
emsg
, "Sorry, canÇot handle image");

450 
Áû_ªtu∫
;

453 i‡(!
	`PickSï¨©eCa£
(
img
)) {

454 
	`•rötf
(
emsg
, "Sorry, canÇot handle image");

455 
Áû_ªtu∫
;

460 
Áû_ªtu∫
:

461 
	`_TIFF‰ì
–
img
->
ªdcm≠
 );

462 
	`_TIFF‰ì
–
img
->
gªícm≠
 );

463 
	`_TIFF‰ì
–
img
->
bluecm≠
 );

464 
img
->
ªdcm≠
 = img->
gªícm≠
 = img->
bluecm≠
 = 
NULL
;

466 
	}
}

469 
	$TIFFRGBAImageGë
(
TIFFRGBAImage
* 
img
, 
uöt32
* 
ø°î
, uöt32 
w
, uöt32 
h
)

471 i‡(
img
->
gë
 =
NULL
) {

472 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(img->tif), "No \"get\"Ñoutine setup");

475 i‡(
img
->
put
.
™y
 =
NULL
) {

476 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(img->tif),

480  (*
img
->
gë
)(img, 
ø°î
, 
w
, 
h
);

481 
	}
}

488 
	$TIFFRódRGBAImageOrõ¡ed
(
TIFF
* 
tif
,

489 
uöt32
 
rwidth
, uöt32 
rheight
, uöt32* 
ø°î
,

490 
‹õ¡©i⁄
, 
°›
)

492 
emsg
[1024] = "";

493 
TIFFRGBAImage
 
img
;

494 
ok
;

496 i‡(
	`TIFFRGBAImageOK
(
tif
, 
emsg
Ë&& 
	`TIFFRGBAImageBegö
(&
img
,Åif, 
°›
,Émsg)) {

497 
img
.
ªq_‹õ¡©i⁄
 = 
‹õ¡©i⁄
;

499 
ok
 = 
	`TIFFRGBAImageGë
(&
img
, 
ø°î
+(
rheight
-img.
height
)*
rwidth
,

500 
rwidth
, 
img
.
height
);

501 
	`TIFFRGBAImageEnd
(&
img
);

503 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
—if), "%s", 
emsg
);

504 
ok
 = 0;

506  (
ok
);

507 
	}
}

514 
	$TIFFRódRGBAImage
(
TIFF
* 
tif
,

515 
uöt32
 
rwidth
, uöt32 
rheight
, uöt32* 
ø°î
, 
°›
)

517  
	`TIFFRódRGBAImageOrõ¡ed
(
tif
, 
rwidth
, 
rheight
, 
ø°î
,

518 
ORIENTATION_BOTLEFT
, 
°›
);

519 
	}
}

522 
	$£t‹õ¡©i⁄
(
TIFFRGBAImage
* 
img
)

524 
img
->
‹õ¡©i⁄
) {

525 
ORIENTATION_TOPLEFT
:

526 
ORIENTATION_LEFTTOP
:

527 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_TOPRIGHT
 ||

528 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_RIGHTTOP
)

529  
FLIP_HORIZONTALLY
;

530 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_BOTRIGHT
 ||

531 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_RIGHTBOT
)

532  
FLIP_HORIZONTALLY
 | 
FLIP_VERTICALLY
;

533 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_BOTLEFT
 ||

534 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_LEFTBOT
)

535  
FLIP_VERTICALLY
;

538 
ORIENTATION_TOPRIGHT
:

539 
ORIENTATION_RIGHTTOP
:

540 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_TOPLEFT
 ||

541 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_LEFTTOP
)

542  
FLIP_HORIZONTALLY
;

543 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_BOTRIGHT
 ||

544 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_RIGHTBOT
)

545  
FLIP_VERTICALLY
;

546 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_BOTLEFT
 ||

547 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_LEFTBOT
)

548  
FLIP_HORIZONTALLY
 | 
FLIP_VERTICALLY
;

551 
ORIENTATION_BOTRIGHT
:

552 
ORIENTATION_RIGHTBOT
:

553 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_TOPLEFT
 ||

554 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_LEFTTOP
)

555  
FLIP_HORIZONTALLY
 | 
FLIP_VERTICALLY
;

556 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_TOPRIGHT
 ||

557 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_RIGHTTOP
)

558  
FLIP_VERTICALLY
;

559 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_BOTLEFT
 ||

560 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_LEFTBOT
)

561  
FLIP_HORIZONTALLY
;

564 
ORIENTATION_BOTLEFT
:

565 
ORIENTATION_LEFTBOT
:

566 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_TOPLEFT
 ||

567 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_LEFTTOP
)

568  
FLIP_VERTICALLY
;

569 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_TOPRIGHT
 ||

570 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_RIGHTTOP
)

571  
FLIP_HORIZONTALLY
 | 
FLIP_VERTICALLY
;

572 i‡(
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_BOTRIGHT
 ||

573 
img
->
ªq_‹õ¡©i⁄
 =
ORIENTATION_RIGHTBOT
)

574  
FLIP_HORIZONTALLY
;

580 
	}
}

589 
	$gtTûeC⁄tig
(
TIFFRGBAImage
* 
img
, 
uöt32
* 
ø°î
, uöt32 
w
, uöt32 
h
)

591 
TIFF
* 
tif
 = 
img
->tif;

592 
tûeC⁄tigRoutöe
 
put
 = 
img
->put.
c⁄tig
;

593 
uöt32
 
cﬁ
, 
row
, 
y
, 
row°‹ód
;

594 
tmsize_t
 
pos
;

595 
uöt32
 
tw
, 
th
;

596 * 
buf
;

597 
öt32
 
‰omskew
, 
toskew
;

598 
uöt32
 
ƒow
;

599 
ªt
 = 1, 
Êù
;

601 
buf
 = (*Ë
	`_TIFFmÆloc
(
	`TIFFTûeSize
(
tif
));

602 i‡(
buf
 == 0) {

603 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif), "%s", "No space forÅile buffer");

606 
	`_TIFFmem£t
(
buf
, 0, 
	`TIFFTûeSize
(
tif
));

607 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILEWIDTH
, &
tw
);

608 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILELENGTH
, &
th
);

610 
Êù
 = 
	`£t‹õ¡©i⁄
(
img
);

611 i‡(
Êù
 & 
FLIP_VERTICALLY
) {

612 
y
 = 
h
 - 1;

613 
toskew
 = -(
öt32
)(
tw
 + 
w
);

616 
y
 = 0;

617 
toskew
 = -(
öt32
)(
tw
 - 
w
);

620 
row
 = 0;Ñow < 
h
;Ñow +
ƒow
)

622 
row°‹ód
 = 
th
 - (
row
 + 
img
->
row_off£t
) %Åh;

623 
ƒow
 = (
row
 + 
row°‹ód
 > 
h
 ? h -Ñow :Ñowstoread);

624 
cﬁ
 = 0; cﬁ < 
w
; cﬁ +
tw
)

626 i‡(
	`TIFFRódTûe
(
tif
, 
buf
, 
cﬁ
+
img
->
cﬁ_off£t
,

627 
row
+
img
->
row_off£t
, 0, 0)==(
tmsize_t
)(-1Ë&& img->
°›⁄îr
)

629 
ªt
 = 0;

633 
pos
 = ((
row
+
img
->
row_off£t
Ë% 
th
Ë* 
	`TIFFTûeRowSize
(
tif
);

635 i‡(
cﬁ
 + 
tw
 > 
w
)

641 
uöt32
 
≈ix
 = 
w
 - 
cﬁ
;

642 
‰omskew
 = 
tw
 - 
≈ix
;

643 (*
put
)(
img
, 
ø°î
+
y
*
w
+
cﬁ
, col, y,

644 
≈ix
, 
ƒow
, 
‰omskew
, 
toskew
 + fromskew, 
buf
 + 
pos
);

648 (*
put
)(
img
, 
ø°î
+
y
*
w
+
cﬁ
, cﬁ, y, 
tw
, 
ƒow
, 0, 
toskew
, 
buf
 + 
pos
);

652 
y
 +(
Êù
 & 
FLIP_VERTICALLY
 ? -(
öt32
Ë
ƒow
 : (int32)Çrow);

654 
	`_TIFF‰ì
(
buf
);

656 i‡(
Êù
 & 
FLIP_HORIZONTALLY
) {

657 
uöt32
 
löe
;

659 
löe
 = 0;Üöê< 
h
;Üine++) {

660 
uöt32
 *
À·
 = 
ø°î
 + (
löe
 * 
w
);

661 
uöt32
 *
right
 = 
À·
 + 
w
 - 1;

663  
À·
 < 
right
 ) {

664 
uöt32
 
ãmp
 = *
À·
;

665 *
À·
 = *
right
;

666 *
right
 = 
ãmp
;

667 
À·
++, 
right
--;

672  (
ªt
);

673 
	}
}

682 
	$gtTûeSï¨©e
(
TIFFRGBAImage
* 
img
, 
uöt32
* 
ø°î
, uöt32 
w
, uöt32 
h
)

684 
TIFF
* 
tif
 = 
img
->tif;

685 
tûeSï¨©eRoutöe
 
put
 = 
img
->put.
£∑øã
;

686 
uöt32
 
cﬁ
, 
row
, 
y
, 
row°‹ód
;

687 
tmsize_t
 
pos
;

688 
uöt32
 
tw
, 
th
;

689 * 
buf
;

690 * 
p0
;

691 * 
p1
;

692 * 
p2
;

693 * 
∑
;

694 
tmsize_t
 
tûesize
;

695 
öt32
 
‰omskew
, 
toskew
;

696 
Æpha
 = 
img
->alpha;

697 
uöt32
 
ƒow
;

698 
ªt
 = 1, 
Êù
;

699 
cﬁ‹ch™√ls
;

701 
tûesize
 = 
	`TIFFTûeSize
(
tif
);

702 
buf
 = (*Ë
	`_TIFFmÆloc
((
Æpha
?4:3)*
tûesize
);

703 i‡(
buf
 == 0) {

704 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif), "%s", "No space forÅile buffer");

707 
	`_TIFFmem£t
(
buf
, 0, (
Æpha
?4:3)*
tûesize
);

708 
p0
 = 
buf
;

709 
p1
 = 
p0
 + 
tûesize
;

710 
p2
 = 
p1
 + 
tûesize
;

711 
∑
 = (
Æpha
?(
p2
+
tûesize
):
NULL
);

712 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILEWIDTH
, &
tw
);

713 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILELENGTH
, &
th
);

715 
Êù
 = 
	`£t‹õ¡©i⁄
(
img
);

716 i‡(
Êù
 & 
FLIP_VERTICALLY
) {

717 
y
 = 
h
 - 1;

718 
toskew
 = -(
öt32
)(
tw
 + 
w
);

721 
y
 = 0;

722 
toskew
 = -(
öt32
)(
tw
 - 
w
);

725  
img
->
phŸomëric
 )

727 
PHOTOMETRIC_MINISWHITE
:

728 
PHOTOMETRIC_MINISBLACK
:

729 
PHOTOMETRIC_PALETTE
:

730 
cﬁ‹ch™√ls
 = 1;

731 
p2
 = 
p1
 = 
p0
;

735 
cﬁ‹ch™√ls
 = 3;

739 
row
 = 0;Ñow < 
h
;Ñow +
ƒow
)

741 
row°‹ód
 = 
th
 - (
row
 + 
img
->
row_off£t
) %Åh;

742 
ƒow
 = (
row
 + 
row°‹ód
 > 
h
 ? h -Ñow :Ñowstoread);

743 
cﬁ
 = 0; cﬁ < 
w
; cﬁ +
tw
)

745 i‡(
	`TIFFRódTûe
(
tif
, 
p0
, 
cﬁ
+
img
->
cﬁ_off£t
,

746 
row
+
img
->
row_off£t
,0,0)==(
tmsize_t
)(-1Ë&& img->
°›⁄îr
)

748 
ªt
 = 0;

751 i‡(
cﬁ‹ch™√ls
 > 1

752 && 
	`TIFFRódTûe
(
tif
, 
p1
, 
cﬁ
+
img
->
cﬁ_off£t
,

753 
row
+
img
->
row_off£t
,0,1Ë=(
tmsize_t
)(-1)

754 && 
img
->
°›⁄îr
)

756 
ªt
 = 0;

759 i‡(
cﬁ‹ch™√ls
 > 1

760 && 
	`TIFFRódTûe
(
tif
, 
p2
, 
cﬁ
+
img
->
cﬁ_off£t
,

761 
row
+
img
->
row_off£t
,0,2Ë=(
tmsize_t
)(-1)

762 && 
img
->
°›⁄îr
)

764 
ªt
 = 0;

767 i‡(
Æpha


768 && 
	`TIFFRódTûe
(
tif
,
∑
,
cﬁ
+
img
->
cﬁ_off£t
,

769 
row
+
img
->
row_off£t
,0,
cﬁ‹ch™√ls
Ë=(
tmsize_t
)(-1)

770 && 
img
->
°›⁄îr
)

772 
ªt
 = 0;

776 
pos
 = ((
row
+
img
->
row_off£t
Ë% 
th
Ë* 
	`TIFFTûeRowSize
(
tif
);

778 i‡(
cﬁ
 + 
tw
 > 
w
)

784 
uöt32
 
≈ix
 = 
w
 - 
cﬁ
;

785 
‰omskew
 = 
tw
 - 
≈ix
;

786 (*
put
)(
img
, 
ø°î
+
y
*
w
+
cﬁ
, col, y,

787 
≈ix
, 
ƒow
, 
‰omskew
, 
toskew
 + fromskew,

788 
p0
 + 
pos
, 
p1
 +Öos, 
p2
 +Öos, (
Æpha
?(
∑
+pos):
NULL
));

790 (*
put
)(
img
, 
ø°î
+
y
*
w
+
cﬁ
, col, y,

791 
tw
, 
ƒow
, 0, 
toskew
, 
p0
 + 
pos
, 
p1
 +Öos, 
p2
 +Öos, (
Æpha
?(
∑
+pos):
NULL
));

795 
y
 +(
Êù
 & 
FLIP_VERTICALLY
 ?-(
öt32
Ë
ƒow
 : (int32)Çrow);

798 i‡(
Êù
 & 
FLIP_HORIZONTALLY
) {

799 
uöt32
 
löe
;

801 
löe
 = 0;Üöê< 
h
;Üine++) {

802 
uöt32
 *
À·
 = 
ø°î
 + (
löe
 * 
w
);

803 
uöt32
 *
right
 = 
À·
 + 
w
 - 1;

805  
À·
 < 
right
 ) {

806 
uöt32
 
ãmp
 = *
À·
;

807 *
À·
 = *
right
;

808 *
right
 = 
ãmp
;

809 
À·
++, 
right
--;

814 
	`_TIFF‰ì
(
buf
);

815  (
ªt
);

816 
	}
}

825 
	$gtSåùC⁄tig
(
TIFFRGBAImage
* 
img
, 
uöt32
* 
ø°î
, uöt32 
w
, uöt32 
h
)

827 
TIFF
* 
tif
 = 
img
->tif;

828 
tûeC⁄tigRoutöe
 
put
 = 
img
->put.
c⁄tig
;

829 
uöt32
 
row
, 
y
, 
ƒow
, 
ƒowsub
, 
row°‹ód
;

830 
tmsize_t
 
pos
;

831 * 
buf
;

832 
uöt32
 
row•î°rù
;

833 
uöt16
 
subßm∂ögh‹
,
subßm∂ögvî
;

834 
uöt32
 
imagewidth
 = 
img
->
width
;

835 
tmsize_t
 
sˇ∆öe
;

836 
öt32
 
‰omskew
, 
toskew
;

837 
ªt
 = 1, 
Êù
;

839 
buf
 = (*Ë
	`_TIFFmÆloc
(
	`TIFFSåùSize
(
tif
));

840 i‡(
buf
 == 0) {

841 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif), "No space for strip buffer");

844 
	`_TIFFmem£t
(
buf
, 0, 
	`TIFFSåùSize
(
tif
));

846 
Êù
 = 
	`£t‹õ¡©i⁄
(
img
);

847 i‡(
Êù
 & 
FLIP_VERTICALLY
) {

848 
y
 = 
h
 - 1;

849 
toskew
 = -(
öt32
)(
w
 + w);

851 
y
 = 0;

852 
toskew
 = -(
öt32
)(
w
 - w);

855 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

856 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_YCBCRSUBSAMPLING
, &
subßm∂ögh‹
, &
subßm∂ögvî
);

857 
sˇ∆öe
 = 
	`TIFFSˇ∆öeSize
(
tif
);

858 
‰omskew
 = (
w
 < 
imagewidth
 ? imagewidth - w : 0);

859 
row
 = 0;Ñow < 
h
;Ñow +
ƒow
)

861 
row°‹ód
 = 
row•î°rù
 - (
row
 + 
img
->
row_off£t
) %Ñowsperstrip;

862 
ƒow
 = (
row
 + 
row°‹ód
 > 
h
 ? h -Ñow :Ñowstoread);

863 
ƒowsub
 = 
ƒow
;

864 i‡((
ƒowsub
%
subßm∂ögvî
)!=0)

865 
ƒowsub
+=
subßm∂ögvî
-nrowsub%subsamplingver;

866 i‡(
	`TIFFRódEncodedSåù
(
tif
,

867 
	`TIFFCompuãSåù
(
tif
,
row
+
img
->
row_off£t
, 0),

868 
buf
,

869 ((
row
 + 
img
->
row_off£t
)%
row•î°rù
 + 
ƒowsub
Ë* 
sˇ∆öe
)==(
tmsize_t
)(-1)

870 && 
img
->
°›⁄îr
)

872 
ªt
 = 0;

876 
pos
 = ((
row
 + 
img
->
row_off£t
Ë% 
row•î°rù
Ë* 
sˇ∆öe
;

877 (*
put
)(
img
, 
ø°î
+
y
*
w
, 0, y, w, 
ƒow
, 
‰omskew
, 
toskew
, 
buf
 + 
pos
);

878 
y
 +(
Êù
 & 
FLIP_VERTICALLY
 ? -(
öt32
Ë
ƒow
 : (int32)Çrow);

881 i‡(
Êù
 & 
FLIP_HORIZONTALLY
) {

882 
uöt32
 
löe
;

884 
löe
 = 0;Üöê< 
h
;Üine++) {

885 
uöt32
 *
À·
 = 
ø°î
 + (
löe
 * 
w
);

886 
uöt32
 *
right
 = 
À·
 + 
w
 - 1;

888  
À·
 < 
right
 ) {

889 
uöt32
 
ãmp
 = *
À·
;

890 *
À·
 = *
right
;

891 *
right
 = 
ãmp
;

892 
À·
++, 
right
--;

897 
	`_TIFF‰ì
(
buf
);

898  (
ªt
);

899 
	}
}

908 
	$gtSåùSï¨©e
(
TIFFRGBAImage
* 
img
, 
uöt32
* 
ø°î
, uöt32 
w
, uöt32 
h
)

910 
TIFF
* 
tif
 = 
img
->tif;

911 
tûeSï¨©eRoutöe
 
put
 = 
img
->put.
£∑øã
;

912 *
buf
;

913 *
p0
, *
p1
, *
p2
, *
∑
;

914 
uöt32
 
row
, 
y
, 
ƒow
, 
row°‹ód
;

915 
tmsize_t
 
pos
;

916 
tmsize_t
 
sˇ∆öe
;

917 
uöt32
 
row•î°rù
, 
off£t_row
;

918 
uöt32
 
imagewidth
 = 
img
->
width
;

919 
tmsize_t
 
°rùsize
;

920 
öt32
 
‰omskew
, 
toskew
;

921 
Æpha
 = 
img
->alpha;

922 
ªt
 = 1, 
Êù
, 
cﬁ‹ch™√ls
;

924 
°rùsize
 = 
	`TIFFSåùSize
(
tif
);

925 
p0
 = 
buf
 = (*)
	`_TIFFmÆloc
((
Æpha
?4:3)*
°rùsize
);

926 i‡(
buf
 == 0) {

927 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif), "No space forÅile buffer");

930 
	`_TIFFmem£t
(
buf
, 0, (
Æpha
?4:3)*
°rùsize
);

931 
p1
 = 
p0
 + 
°rùsize
;

932 
p2
 = 
p1
 + 
°rùsize
;

933 
∑
 = (
Æpha
?(
p2
+
°rùsize
):
NULL
);

935 
Êù
 = 
	`£t‹õ¡©i⁄
(
img
);

936 i‡(
Êù
 & 
FLIP_VERTICALLY
) {

937 
y
 = 
h
 - 1;

938 
toskew
 = -(
öt32
)(
w
 + w);

941 
y
 = 0;

942 
toskew
 = -(
öt32
)(
w
 - w);

945  
img
->
phŸomëric
 )

947 
PHOTOMETRIC_MINISWHITE
:

948 
PHOTOMETRIC_MINISBLACK
:

949 
PHOTOMETRIC_PALETTE
:

950 
cﬁ‹ch™√ls
 = 1;

951 
p2
 = 
p1
 = 
p0
;

955 
cﬁ‹ch™√ls
 = 3;

959 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

960 
sˇ∆öe
 = 
	`TIFFSˇ∆öeSize
(
tif
);

961 
‰omskew
 = (
w
 < 
imagewidth
 ? imagewidth - w : 0);

962 
row
 = 0;Ñow < 
h
;Ñow +
ƒow
)

964 
row°‹ód
 = 
row•î°rù
 - (
row
 + 
img
->
row_off£t
) %Ñowsperstrip;

965 
ƒow
 = (
row
 + 
row°‹ód
 > 
h
 ? h -Ñow :Ñowstoread);

966 
off£t_row
 = 
row
 + 
img
->
row_off£t
;

967 i‡(
	`TIFFRódEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if, 
off£t_row
, 0),

968 
p0
, ((
row
 + 
img
->
row_off£t
)%
row•î°rù
 + 
ƒow
Ë* 
sˇ∆öe
)==(
tmsize_t
)(-1)

969 && 
img
->
°›⁄îr
)

971 
ªt
 = 0;

974 i‡(
cﬁ‹ch™√ls
 > 1

975 && 
	`TIFFRódEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if, 
off£t_row
, 1),

976 
p1
, ((
row
 + 
img
->
row_off£t
)%
row•î°rù
 + 
ƒow
Ë* 
sˇ∆öe
Ë=(
tmsize_t
)(-1)

977 && 
img
->
°›⁄îr
)

979 
ªt
 = 0;

982 i‡(
cﬁ‹ch™√ls
 > 1

983 && 
	`TIFFRódEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if, 
off£t_row
, 2),

984 
p2
, ((
row
 + 
img
->
row_off£t
)%
row•î°rù
 + 
ƒow
Ë* 
sˇ∆öe
Ë=(
tmsize_t
)(-1)

985 && 
img
->
°›⁄îr
)

987 
ªt
 = 0;

990 i‡(
Æpha
)

992 i‡(
	`TIFFRódEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if, 
off£t_row
, 
cﬁ‹ch™√ls
),

993 
∑
, ((
row
 + 
img
->
row_off£t
)%
row•î°rù
 + 
ƒow
Ë* 
sˇ∆öe
)==(
tmsize_t
)(-1)

994 && 
img
->
°›⁄îr
)

996 
ªt
 = 0;

1001 
pos
 = ((
row
 + 
img
->
row_off£t
Ë% 
row•î°rù
Ë* 
sˇ∆öe
;

1002 (*
put
)(
img
, 
ø°î
+
y
*
w
, 0, y, w, 
ƒow
, 
‰omskew
, 
toskew
, 
p0
 + 
pos
, 
p1
 +Öos,

1003 
p2
 + 
pos
, (
Æpha
?(
∑
+pos):
NULL
));

1004 
y
 +(
Êù
 & 
FLIP_VERTICALLY
 ? -(
öt32
Ë
ƒow
 : (int32)Çrow);

1007 i‡(
Êù
 & 
FLIP_HORIZONTALLY
) {

1008 
uöt32
 
löe
;

1010 
löe
 = 0;Üöê< 
h
;Üine++) {

1011 
uöt32
 *
À·
 = 
ø°î
 + (
löe
 * 
w
);

1012 
uöt32
 *
right
 = 
À·
 + 
w
 - 1;

1014  
À·
 < 
right
 ) {

1015 
uöt32
 
ãmp
 = *
À·
;

1016 *
À·
 = *
right
;

1017 *
right
 = 
ãmp
;

1018 
À·
++, 
right
--;

1023 
	`_TIFF‰ì
(
buf
);

1024  (
ªt
);

1025 
	}
}

1037 
	#REPEAT8
(
›
Ë
	`REPEAT4
(›); REPEAT4(›)

	)

1038 
	#REPEAT4
(
›
Ë
	`REPEAT2
(›); REPEAT2(›)

	)

1039 
	#REPEAT2
(
›
Ë›; 
	)
op

1040 
	#CASE8
(
x
,
›
) \

1041 
x
) { \

1042 7: 
›
; 6: op; 5: op; \

1043 4: 
›
; 3: op; 2: op; \

1044 1: 
›
; \

1045 }

	)

1046 
	#CASE4
(
x
,
›
ËxË{ 3: op; 2: op; 1: op; }

	)

1047 
	#NOP


	)

1049 
	#UNROLL8
(
w
, 
›1
, 
›2
) { \

1050 
uöt32
 
_x
; \

1051 
_x
 = 
w
; _x >= 8; _x -= 8) { \

1052 
›1
; \

1053 
	`REPEAT8
(
›2
); \

1055 i‡(
_x
 > 0) { \

1056 
›1
; \

1057 
	`CASE8
(
_x
,
›2
); \

1059 }

	)

1060 
	#UNROLL4
(
w
, 
›1
, 
›2
) { \

1061 
uöt32
 
_x
; \

1062 
_x
 = 
w
; _x >= 4; _x -= 4) { \

1063 
›1
; \

1064 
	`REPEAT4
(
›2
); \

1066 i‡(
_x
 > 0) { \

1067 
›1
; \

1068 
	`CASE4
(
_x
,
›2
); \

1070 }

	)

1071 
	#UNROLL2
(
w
, 
›1
, 
›2
) { \

1072 
uöt32
 
_x
; \

1073 
_x
 = 
w
; _x >= 2; _x -= 2) { \

1074 
›1
; \

1075 
	`REPEAT2
(
›2
); \

1077 i‡(
_x
) { \

1078 
›1
; \

1079 
›2
; \

1081 }

	)

1083 
	#SKEW
(
r
,
g
,
b
,
skew
Ë{Ñ +skew; g +skew; b +skew; }

	)

1084 
	#SKEW4
(
r
,
g
,
b
,
a
,
skew
Ë{Ñ +skew; g +skew; b +skew;á+skew; }

	)

1086 
	#A1
 (((
uöt32
)0xffL)<<24)

	)

1087 
	#PACK
(
r
,
g
,
b
) \

1088 ((
uöt32
)(
r
)|((uöt32)(
g
)<<8)|((uöt32)(
b
)<<16)|
A1
)

	)

1089 
	#PACK4
(
r
,
g
,
b
,
a
) \

1090 ((
uöt32
)(
r
)|((uöt32)(
g
)<<8)|((uöt32)(
b
)<<16)|((uöt32)(
a
)<<24))

	)

1091 
	#W2B
(
v
Ë(((v)>>8)&0xff)

	)

1093 
	#PACKW
(
r
,
g
,
b
) \

1094 ((
uöt32
)
	`W2B
(
r
)|((uöt32)W2B(
g
)<<8)|((uöt32)W2B(
b
)<<16)|
A1
)

	)

1095 
	#PACKW4
(
r
,
g
,
b
,
a
) \

1096 ((
uöt32
)
	`W2B
(
r
)|((uöt32)W2B(
g
)<<8)|((uöt32)W2B(
b
)<<16)|((uöt32)W2B(
a
)<<24))

	)

1098 
	#DECLAREC⁄tigPutFunc
(
«me
) \

1099 
	`«me
(\

1100 
TIFFRGBAImage
* 
img
, \

1101 
uöt32
* 
˝
, \

1102 
uöt32
 
x
, uöt32 
y
, \

1103 
uöt32
 
w
, uöt32 
h
, \

1104 
öt32
 
‰omskew
, i¡32 
toskew
, \

1105 * 
µ
 \

1106 )

	)

1111 
	$DECLAREC⁄tigPutFunc
(
put8bôcm≠tûe
)

1113 
uöt32
** 
PALm≠
 = 
img
->PALmap;

1114 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

1116 (Ë
y
;

1117 
h
-- > 0) {

1118 
x
 = 
w
; x-- > 0;)

1120 *
˝
++ = 
PALm≠
[*
µ
][0];

1121 
µ
 +
ßm∂e•îpixñ
;

1123 
˝
 +
toskew
;

1124 
µ
 +
‰omskew
;

1126 
	}
}

1131 
	$DECLAREC⁄tigPutFunc
(
put4bôcm≠tûe
)

1133 
uöt32
** 
PALm≠
 = 
img
->PALmap;

1135 (Ë
x
; (Ë
y
;

1136 
‰omskew
 /= 2;

1137 
h
-- > 0) {

1138 
uöt32
* 
bw
;

1139 
	`UNROLL2
(
w
, 
bw
 = 
PALm≠
[*
µ
++], *
˝
++ = *bw++);

1140 
˝
 +
toskew
;

1141 
µ
 +
‰omskew
;

1143 
	}
}

1148 
	$DECLAREC⁄tigPutFunc
(
put2bôcm≠tûe
)

1150 
uöt32
** 
PALm≠
 = 
img
->PALmap;

1152 (Ë
x
; (Ë
y
;

1153 
‰omskew
 /= 4;

1154 
h
-- > 0) {

1155 
uöt32
* 
bw
;

1156 
	`UNROLL4
(
w
, 
bw
 = 
PALm≠
[*
µ
++], *
˝
++ = *bw++);

1157 
˝
 +
toskew
;

1158 
µ
 +
‰omskew
;

1160 
	}
}

1165 
	$DECLAREC⁄tigPutFunc
(
put1bôcm≠tûe
)

1167 
uöt32
** 
PALm≠
 = 
img
->PALmap;

1169 (Ë
x
; (Ë
y
;

1170 
‰omskew
 /= 8;

1171 
h
-- > 0) {

1172 
uöt32
* 
bw
;

1173 
	`UNROLL8
(
w
, 
bw
 = 
PALm≠
[*
µ
++], *
˝
++ = *bw++);

1174 
˝
 +
toskew
;

1175 
µ
 +
‰omskew
;

1177 
	}
}

1182 
	$DECLAREC⁄tigPutFunc
(
putgªytûe
)

1184 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

1185 
uöt32
** 
BWm≠
 = 
img
->BWmap;

1187 (Ë
y
;

1188 
h
-- > 0) {

1189 
x
 = 
w
; x-- > 0;)

1191 *
˝
++ = 
BWm≠
[*
µ
][0];

1192 
µ
 +
ßm∂e•îpixñ
;

1194 
˝
 +
toskew
;

1195 
µ
 +
‰omskew
;

1197 
	}
}

1202 
	$DECLAREC⁄tigPutFunc
(
put16bôbwtûe
)

1204 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

1205 
uöt32
** 
BWm≠
 = 
img
->BWmap;

1207 (Ë
y
;

1208 
h
-- > 0) {

1209 
uöt16
 *
wp
 = (uöt16 *Ë
µ
;

1211 
x
 = 
w
; x-- > 0;)

1215 *
˝
++ = 
BWm≠
[*
wp
 >> 8][0];

1216 
µ
 +2 * 
ßm∂e•îpixñ
;

1217 
wp
 +
ßm∂e•îpixñ
;

1219 
˝
 +
toskew
;

1220 
µ
 +
‰omskew
;

1222 
	}
}

1227 
	$DECLAREC⁄tigPutFunc
(
put1bôbwtûe
)

1229 
uöt32
** 
BWm≠
 = 
img
->BWmap;

1231 (Ë
x
; (Ë
y
;

1232 
‰omskew
 /= 8;

1233 
h
-- > 0) {

1234 
uöt32
* 
bw
;

1235 
	`UNROLL8
(
w
, 
bw
 = 
BWm≠
[*
µ
++], *
˝
++ = *bw++);

1236 
˝
 +
toskew
;

1237 
µ
 +
‰omskew
;

1239 
	}
}

1244 
	$DECLAREC⁄tigPutFunc
(
put2bôbwtûe
)

1246 
uöt32
** 
BWm≠
 = 
img
->BWmap;

1248 (Ë
x
; (Ë
y
;

1249 
‰omskew
 /= 4;

1250 
h
-- > 0) {

1251 
uöt32
* 
bw
;

1252 
	`UNROLL4
(
w
, 
bw
 = 
BWm≠
[*
µ
++], *
˝
++ = *bw++);

1253 
˝
 +
toskew
;

1254 
µ
 +
‰omskew
;

1256 
	}
}

1261 
	$DECLAREC⁄tigPutFunc
(
put4bôbwtûe
)

1263 
uöt32
** 
BWm≠
 = 
img
->BWmap;

1265 (Ë
x
; (Ë
y
;

1266 
‰omskew
 /= 2;

1267 
h
-- > 0) {

1268 
uöt32
* 
bw
;

1269 
	`UNROLL2
(
w
, 
bw
 = 
BWm≠
[*
µ
++], *
˝
++ = *bw++);

1270 
˝
 +
toskew
;

1271 
µ
 +
‰omskew
;

1273 
	}
}

1278 
	$DECLAREC⁄tigPutFunc
(
putRGBc⁄tig8bôtûe
)

1280 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

1282 (Ë
x
; (Ë
y
;

1283 
‰omskew
 *
ßm∂e•îpixñ
;

1284 
h
-- > 0) {

1285 
	`UNROLL8
(
w
, 
NOP
,

1286 *
˝
++ = 
	`PACK
(
µ
[0],Öp[1],Öp[2]);

1287 
µ
 +
ßm∂e•îpixñ
);

1288 
˝
 +
toskew
;

1289 
µ
 +
‰omskew
;

1291 
	}
}

1297 
	$DECLAREC⁄tigPutFunc
(
putRGBAAc⁄tig8bôtûe
)

1299 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

1301 (Ë
x
; (Ë
y
;

1302 
‰omskew
 *
ßm∂e•îpixñ
;

1303 
h
-- > 0) {

1304 
	`UNROLL8
(
w
, 
NOP
,

1305 *
˝
++ = 
	`PACK4
(
µ
[0],Öp[1],Öp[2],Öp[3]);

1306 
µ
 +
ßm∂e•îpixñ
);

1307 
˝
 +
toskew
;

1308 
µ
 +
‰omskew
;

1310 
	}
}

1316 
	$DECLAREC⁄tigPutFunc
(
putRGBUAc⁄tig8bôtûe
)

1318 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

1319 (Ë
y
;

1320 
‰omskew
 *
ßm∂e•îpixñ
;

1321 
h
-- > 0) {

1322 
uöt32
 
r
, 
g
, 
b
, 
a
;

1323 
uöt8
* 
m
;

1324 
x
 = 
w
; x-- > 0;) {

1325 
a
 = 
µ
[3];

1326 
m
 = 
img
->
UaToAa
+(
a
<<8);

1327 
r
 = 
m
[
µ
[0]];

1328 
g
 = 
m
[
µ
[1]];

1329 
b
 = 
m
[
µ
[2]];

1330 *
˝
++ = 
	`PACK4
(
r
,
g
,
b
,
a
);

1331 
µ
 +
ßm∂e•îpixñ
;

1333 
˝
 +
toskew
;

1334 
µ
 +
‰omskew
;

1336 
	}
}

1341 
	$DECLAREC⁄tigPutFunc
(
putRGBc⁄tig16bôtûe
)

1343 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

1344 
uöt16
 *
wp
 = (uöt16 *)
µ
;

1345 (Ë
y
;

1346 
‰omskew
 *
ßm∂e•îpixñ
;

1347 
h
-- > 0) {

1348 
x
 = 
w
; x-- > 0;) {

1349 *
˝
++ = 
	`PACK
(
img
->
Bôdïth16To8
[
wp
[0]],

1350 
img
->
Bôdïth16To8
[
wp
[1]],

1351 
img
->
Bôdïth16To8
[
wp
[2]]);

1352 
wp
 +
ßm∂e•îpixñ
;

1354 
˝
 +
toskew
;

1355 
wp
 +
‰omskew
;

1357 
	}
}

1363 
	$DECLAREC⁄tigPutFunc
(
putRGBAAc⁄tig16bôtûe
)

1365 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

1366 
uöt16
 *
wp
 = (uöt16 *)
µ
;

1367 (Ë
y
;

1368 
‰omskew
 *
ßm∂e•îpixñ
;

1369 
h
-- > 0) {

1370 
x
 = 
w
; x-- > 0;) {

1371 *
˝
++ = 
	`PACK4
(
img
->
Bôdïth16To8
[
wp
[0]],

1372 
img
->
Bôdïth16To8
[
wp
[1]],

1373 
img
->
Bôdïth16To8
[
wp
[2]],

1374 
img
->
Bôdïth16To8
[
wp
[3]]);

1375 
wp
 +
ßm∂e•îpixñ
;

1377 
˝
 +
toskew
;

1378 
wp
 +
‰omskew
;

1380 
	}
}

1386 
	$DECLAREC⁄tigPutFunc
(
putRGBUAc⁄tig16bôtûe
)

1388 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

1389 
uöt16
 *
wp
 = (uöt16 *)
µ
;

1390 (Ë
y
;

1391 
‰omskew
 *
ßm∂e•îpixñ
;

1392 
h
-- > 0) {

1393 
uöt32
 
r
,
g
,
b
,
a
;

1394 
uöt8
* 
m
;

1395 
x
 = 
w
; x-- > 0;) {

1396 
a
 = 
img
->
Bôdïth16To8
[
wp
[3]];

1397 
m
 = 
img
->
UaToAa
+(
a
<<8);

1398 
r
 = 
m
[
img
->
Bôdïth16To8
[
wp
[0]]];

1399 
g
 = 
m
[
img
->
Bôdïth16To8
[
wp
[1]]];

1400 
b
 = 
m
[
img
->
Bôdïth16To8
[
wp
[2]]];

1401 *
˝
++ = 
	`PACK4
(
r
,
g
,
b
,
a
);

1402 
wp
 +
ßm∂e•îpixñ
;

1404 
˝
 +
toskew
;

1405 
wp
 +
‰omskew
;

1407 
	}
}

1414 
	$DECLAREC⁄tigPutFunc
(
putRGBc⁄tig8bôCMYKtûe
)

1416 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

1417 
uöt16
 
r
, 
g
, 
b
, 
k
;

1419 (Ë
x
; (Ë
y
;

1420 
‰omskew
 *
ßm∂e•îpixñ
;

1421 
h
-- > 0) {

1422 
	`UNROLL8
(
w
, 
NOP
,

1423 
k
 = 255 - 
µ
[3];

1424 
r
 = (
k
*(255-
µ
[0]))/255;

1425 
g
 = (
k
*(255-
µ
[1]))/255;

1426 
b
 = (
k
*(255-
µ
[2]))/255;

1427 *
˝
++ = 
	`PACK
(
r
, 
g
, 
b
);

1428 
µ
 +
ßm∂e•îpixñ
);

1429 
˝
 +
toskew
;

1430 
µ
 +
‰omskew
;

1432 
	}
}

1439 
	$DECLAREC⁄tigPutFunc
(
putRGBc⁄tig8bôCMYKM≠tûe
)

1441 
ßm∂e•îpixñ
 = 
img
->samplesperpixel;

1442 
TIFFRGBVÆue
* 
M≠
 = 
img
->Map;

1443 
uöt16
 
r
, 
g
, 
b
, 
k
;

1445 (Ë
y
;

1446 
‰omskew
 *
ßm∂e•îpixñ
;

1447 
h
-- > 0) {

1448 
x
 = 
w
; x-- > 0;) {

1449 
k
 = 255 - 
µ
[3];

1450 
r
 = (
k
*(255-
µ
[0]))/255;

1451 
g
 = (
k
*(255-
µ
[1]))/255;

1452 
b
 = (
k
*(255-
µ
[2]))/255;

1453 *
˝
++ = 
	`PACK
(
M≠
[
r
], M≠[
g
], M≠[
b
]);

1454 
µ
 +
ßm∂e•îpixñ
;

1456 
µ
 +
‰omskew
;

1457 
˝
 +
toskew
;

1459 
	}
}

1461 
	#DECLARESïPutFunc
(
«me
) \

1462 
	`«me
(\

1463 
TIFFRGBAImage
* 
img
,\

1464 
uöt32
* 
˝
,\

1465 
uöt32
 
x
, uöt32 
y
, \

1466 
uöt32
 
w
, uöt32 
h
,\

1467 
öt32
 
‰omskew
, i¡32 
toskew
,\

1468 * 
r
, * 
g
, * 
b
, * 
a
\

1469 )

	)

1474 
	$DECLARESïPutFunc
(
putRGB£∑øã8bôtûe
)

1476 (Ë
img
; (Ë
x
; (Ë
y
; (Ë
a
;

1477 
h
-- > 0) {

1478 
	`UNROLL8
(
w
, 
NOP
, *
˝
++ = 
	`PACK
(*
r
++, *
g
++, *
b
++));

1479 
	`SKEW
(
r
, 
g
, 
b
, 
‰omskew
);

1480 
˝
 +
toskew
;

1482 
	}
}

1487 
	$DECLARESïPutFunc
(
putRGBAA£∑øã8bôtûe
)

1489 (Ë
img
; (Ë
x
; (Ë
y
;

1490 
h
-- > 0) {

1491 
	`UNROLL8
(
w
, 
NOP
, *
˝
++ = 
	`PACK4
(*
r
++, *
g
++, *
b
++, *
a
++));

1492 
	`SKEW4
(
r
, 
g
, 
b
, 
a
, 
‰omskew
);

1493 
˝
 +
toskew
;

1495 
	}
}

1500 
	$DECLARESïPutFunc
(
putRGBUA£∑øã8bôtûe
)

1502 (Ë
img
; (Ë
y
;

1503 
h
-- > 0) {

1504 
uöt32
 
rv
, 
gv
, 
bv
, 
av
;

1505 
uöt8
* 
m
;

1506 
x
 = 
w
; x-- > 0;) {

1507 
av
 = *
a
++;

1508 
m
 = 
img
->
UaToAa
+(
av
<<8);

1509 
rv
 = 
m
[*
r
++];

1510 
gv
 = 
m
[*
g
++];

1511 
bv
 = 
m
[*
b
++];

1512 *
˝
++ = 
	`PACK4
(
rv
,
gv
,
bv
,
av
);

1514 
	`SKEW4
(
r
, 
g
, 
b
, 
a
, 
‰omskew
);

1515 
˝
 +
toskew
;

1517 
	}
}

1522 
	$DECLARESïPutFunc
(
putRGB£∑øã16bôtûe
)

1524 
uöt16
 *
wr
 = (uöt16*Ë
r
;

1525 
uöt16
 *
wg
 = (uöt16*Ë
g
;

1526 
uöt16
 *
wb
 = (uöt16*Ë
b
;

1527 (Ë
img
; (Ë
y
; (Ë
a
;

1528 
h
-- > 0) {

1529 
x
 = 0; x < 
w
; x++)

1530 *
˝
++ = 
	`PACK
(
img
->
Bôdïth16To8
[*
wr
++],

1531 
img
->
Bôdïth16To8
[*
wg
++],

1532 
img
->
Bôdïth16To8
[*
wb
++]);

1533 
	`SKEW
(
wr
, 
wg
, 
wb
, 
‰omskew
);

1534 
˝
 +
toskew
;

1536 
	}
}

1541 
	$DECLARESïPutFunc
(
putRGBAA£∑øã16bôtûe
)

1543 
uöt16
 *
wr
 = (uöt16*Ë
r
;

1544 
uöt16
 *
wg
 = (uöt16*Ë
g
;

1545 
uöt16
 *
wb
 = (uöt16*Ë
b
;

1546 
uöt16
 *
wa
 = (uöt16*Ë
a
;

1547 (Ë
img
; (Ë
y
;

1548 
h
-- > 0) {

1549 
x
 = 0; x < 
w
; x++)

1550 *
˝
++ = 
	`PACK4
(
img
->
Bôdïth16To8
[*
wr
++],

1551 
img
->
Bôdïth16To8
[*
wg
++],

1552 
img
->
Bôdïth16To8
[*
wb
++],

1553 
img
->
Bôdïth16To8
[*
wa
++]);

1554 
	`SKEW4
(
wr
, 
wg
, 
wb
, 
wa
, 
‰omskew
);

1555 
˝
 +
toskew
;

1557 
	}
}

1562 
	$DECLARESïPutFunc
(
putRGBUA£∑øã16bôtûe
)

1564 
uöt16
 *
wr
 = (uöt16*Ë
r
;

1565 
uöt16
 *
wg
 = (uöt16*Ë
g
;

1566 
uöt16
 *
wb
 = (uöt16*Ë
b
;

1567 
uöt16
 *
wa
 = (uöt16*Ë
a
;

1568 (Ë
img
; (Ë
y
;

1569 
h
-- > 0) {

1570 
uöt32
 
r
,
g
,
b
,
a
;

1571 
uöt8
* 
m
;

1572 
x
 = 
w
; x-- > 0;) {

1573 
a
 = 
img
->
Bôdïth16To8
[*
wa
++];

1574 
m
 = 
img
->
UaToAa
+(
a
<<8);

1575 
r
 = 
m
[
img
->
Bôdïth16To8
[*
wr
++]];

1576 
g
 = 
m
[
img
->
Bôdïth16To8
[*
wg
++]];

1577 
b
 = 
m
[
img
->
Bôdïth16To8
[*
wb
++]];

1578 *
˝
++ = 
	`PACK4
(
r
,
g
,
b
,
a
);

1580 
	`SKEW4
(
wr
, 
wg
, 
wb
, 
wa
, 
‰omskew
);

1581 
˝
 +
toskew
;

1583 
	}
}

1588 
	$DECLAREC⁄tigPutFunc
(
putc⁄tig8bôCIELab
)

1590 
X
, 
Y
, 
Z
;

1591 
uöt32
 
r
, 
g
, 
b
;

1592 (Ë
y
;

1593 
‰omskew
 *= 3;

1594 
h
-- > 0) {

1595 
x
 = 
w
; x-- > 0;) {

1596 
	`TIFFCIELabToXYZ
(
img
->
cõœb
,

1597 ()
µ
[0],

1598 (sig√d )
µ
[1],

1599 (sig√d )
µ
[2],

1600 &
X
, &
Y
, &
Z
);

1601 
	`TIFFXYZToRGB
(
img
->
cõœb
, 
X
, 
Y
, 
Z
, &
r
, &
g
, &
b
);

1602 *
˝
++ = 
	`PACK
(
r
, 
g
, 
b
);

1603 
µ
 += 3;

1605 
˝
 +
toskew
;

1606 
µ
 +
‰omskew
;

1608 
	}
}

1614 
	#YCbCπoRGB
(
d°
, 
Y
) { \

1615 
uöt32
 
r
, 
g
, 
b
; \

1616 
	`TIFFYCbCπoRGB
(
img
->
ycb¸
, (
Y
), 
Cb
, 
Cr
, &
r
, &
g
, &
b
); \

1617 
d°
 = 
	`PACK
(
r
, 
g
, 
b
); \

1618 }

	)

1628 #ifde‡
nŸdef


1629 
	$putc⁄tig8bôYCbCrGíîicTûe
(

1630 
TIFFRGBAImage
* 
img
,

1631 
uöt32
* 
˝
,

1632 
uöt32
 
x
, uöt32 
y
,

1633 
uöt32
 
w
, uöt32 
h
,

1634 
öt32
 
‰omskew
, i¡32 
toskew
,

1635 * 
µ
,

1636 
h_group
,

1637 
v_group
 )

1640 
uöt32
* 
˝1
 = 
˝
+
w
+
toskew
;

1641 
uöt32
* 
˝2
 = 
˝1
+
w
+
toskew
;

1642 
uöt32
* 
˝3
 = 
˝2
+
w
+
toskew
;

1643 
öt32
 
ö¸
 = 3*
w
+4*
toskew
;

1644 
öt32
 
Cb
, 
Cr
;

1645 
group_size
 = 
v_group
 * 
h_group
 + 2;

1647 (Ë
y
;

1648 
‰omskew
 = (‰omskew * 
group_size
Ë/ 
h_group
;

1650  
yy
 = 0; yy < 
h
; yy++ )

1652 *
µ_löe
;

1653 
y_löe_group
 = 
yy
 / 
v_group
;

1654 
y_ªmaödî
 = 
yy
 - 
y_löe_group
 * 
v_group
;

1656 
µ_löe
 = 
µ
 + 
v_löe_group
 *

1659  
xx
 = 0; xx < 
w
; xx++ )

1661 
Cb
 = 
µ


1664 ; 
h
 >= 4; h -= 4) {

1665 
x
 = 
w
>>2;

1667 
Cb
 = 
µ
[16];

1668 
Cr
 = 
µ
[17];

1670 
	`YCbCπoRGB
(
˝
 [0], 
µ
[ 0]);

1671 
	`YCbCπoRGB
(
˝
 [1], 
µ
[ 1]);

1672 
	`YCbCπoRGB
(
˝
 [2], 
µ
[ 2]);

1673 
	`YCbCπoRGB
(
˝
 [3], 
µ
[ 3]);

1674 
	`YCbCπoRGB
(
˝1
[0], 
µ
[ 4]);

1675 
	`YCbCπoRGB
(
˝1
[1], 
µ
[ 5]);

1676 
	`YCbCπoRGB
(
˝1
[2], 
µ
[ 6]);

1677 
	`YCbCπoRGB
(
˝1
[3], 
µ
[ 7]);

1678 
	`YCbCπoRGB
(
˝2
[0], 
µ
[ 8]);

1679 
	`YCbCπoRGB
(
˝2
[1], 
µ
[ 9]);

1680 
	`YCbCπoRGB
(
˝2
[2], 
µ
[10]);

1681 
	`YCbCπoRGB
(
˝2
[3], 
µ
[11]);

1682 
	`YCbCπoRGB
(
˝3
[0], 
µ
[12]);

1683 
	`YCbCπoRGB
(
˝3
[1], 
µ
[13]);

1684 
	`YCbCπoRGB
(
˝3
[2], 
µ
[14]);

1685 
	`YCbCπoRGB
(
˝3
[3], 
µ
[15]);

1687 
˝
 +4, 
˝1
 +4, 
˝2
 +4, 
˝3
 += 4;

1688 
µ
 += 18;

1689 } --
x
);

1690 
˝
 +
ö¸
, 
˝1
 +ö¸, 
˝2
 +ö¸, 
˝3
 += incr;

1691 
µ
 +
‰omskew
;

1693 
	}
}

1699 
	$DECLAREC⁄tigPutFunc
(
putc⁄tig8bôYCbCr44tûe
)

1701 
uöt32
* 
˝1
 = 
˝
+
w
+
toskew
;

1702 
uöt32
* 
˝2
 = 
˝1
+
w
+
toskew
;

1703 
uöt32
* 
˝3
 = 
˝2
+
w
+
toskew
;

1704 
öt32
 
ö¸
 = 3*
w
+4*
toskew
;

1706 (Ë
y
;

1708 
‰omskew
 = (fromskew * 18) / 4;

1709 i‡((
h
 & 3Ë=0 && (
w
 & 3) == 0) {

1710 ; 
h
 >= 4; h -= 4) {

1711 
x
 = 
w
>>2;

1713 
öt32
 
Cb
 = 
µ
[16];

1714 
öt32
 
Cr
 = 
µ
[17];

1716 
	`YCbCπoRGB
(
˝
 [0], 
µ
[ 0]);

1717 
	`YCbCπoRGB
(
˝
 [1], 
µ
[ 1]);

1718 
	`YCbCπoRGB
(
˝
 [2], 
µ
[ 2]);

1719 
	`YCbCπoRGB
(
˝
 [3], 
µ
[ 3]);

1720 
	`YCbCπoRGB
(
˝1
[0], 
µ
[ 4]);

1721 
	`YCbCπoRGB
(
˝1
[1], 
µ
[ 5]);

1722 
	`YCbCπoRGB
(
˝1
[2], 
µ
[ 6]);

1723 
	`YCbCπoRGB
(
˝1
[3], 
µ
[ 7]);

1724 
	`YCbCπoRGB
(
˝2
[0], 
µ
[ 8]);

1725 
	`YCbCπoRGB
(
˝2
[1], 
µ
[ 9]);

1726 
	`YCbCπoRGB
(
˝2
[2], 
µ
[10]);

1727 
	`YCbCπoRGB
(
˝2
[3], 
µ
[11]);

1728 
	`YCbCπoRGB
(
˝3
[0], 
µ
[12]);

1729 
	`YCbCπoRGB
(
˝3
[1], 
µ
[13]);

1730 
	`YCbCπoRGB
(
˝3
[2], 
µ
[14]);

1731 
	`YCbCπoRGB
(
˝3
[3], 
µ
[15]);

1733 
˝
 +4, 
˝1
 +4, 
˝2
 +4, 
˝3
 += 4;

1734 
µ
 += 18;

1735 } --
x
);

1736 
˝
 +
ö¸
, 
˝1
 +ö¸, 
˝2
 +ö¸, 
˝3
 += incr;

1737 
µ
 +
‰omskew
;

1740 
h
 > 0) {

1741 
x
 = 
w
; x > 0;) {

1742 
öt32
 
Cb
 = 
µ
[16];

1743 
öt32
 
Cr
 = 
µ
[17];

1744 
x
) {

1746 
h
) {

1747 : 
	`YCbCπoRGB
(
˝3
[3], 
µ
[15]);

1748 3: 
	`YCbCπoRGB
(
˝2
[3], 
µ
[11]);

1749 2: 
	`YCbCπoRGB
(
˝1
[3], 
µ
[ 7]);

1750 1: 
	`YCbCπoRGB
(
˝
 [3], 
µ
[ 3]);

1753 
h
) {

1754 : 
	`YCbCπoRGB
(
˝3
[2], 
µ
[14]);

1755 3: 
	`YCbCπoRGB
(
˝2
[2], 
µ
[10]);

1756 2: 
	`YCbCπoRGB
(
˝1
[2], 
µ
[ 6]);

1757 1: 
	`YCbCπoRGB
(
˝
 [2], 
µ
[ 2]);

1760 
h
) {

1761 : 
	`YCbCπoRGB
(
˝3
[1], 
µ
[13]);

1762 3: 
	`YCbCπoRGB
(
˝2
[1], 
µ
[ 9]);

1763 2: 
	`YCbCπoRGB
(
˝1
[1], 
µ
[ 5]);

1764 1: 
	`YCbCπoRGB
(
˝
 [1], 
µ
[ 1]);

1767 
h
) {

1768 : 
	`YCbCπoRGB
(
˝3
[0], 
µ
[12]);

1769 3: 
	`YCbCπoRGB
(
˝2
[0], 
µ
[ 8]);

1770 2: 
	`YCbCπoRGB
(
˝1
[0], 
µ
[ 4]);

1771 1: 
	`YCbCπoRGB
(
˝
 [0], 
µ
[ 0]);

1774 i‡(
x
 < 4) {

1775 
˝
 +
x
; 
˝1
 +x; 
˝2
 +x; 
˝3
 += x;

1776 
x
 = 0;

1779 
˝
 +4; 
˝1
 +4; 
˝2
 +4; 
˝3
 += 4;

1780 
x
 -= 4;

1782 
µ
 += 18;

1784 i‡(
h
 <= 4)

1786 
h
 -= 4;

1787 
˝
 +
ö¸
, 
˝1
 +ö¸, 
˝2
 +ö¸, 
˝3
 += incr;

1788 
µ
 +
‰omskew
;

1791 
	}
}

1796 
	$DECLAREC⁄tigPutFunc
(
putc⁄tig8bôYCbCr42tûe
)

1798 
uöt32
* 
˝1
 = 
˝
+
w
+
toskew
;

1799 
öt32
 
ö¸
 = 2*
toskew
+
w
;

1801 (Ë
y
;

1802 
‰omskew
 = (fromskew * 10) / 4;

1803 i‡((
h
 & 3Ë=0 && (
w
 & 1) == 0) {

1804 ; 
h
 >= 2; h -= 2) {

1805 
x
 = 
w
>>2;

1807 
öt32
 
Cb
 = 
µ
[8];

1808 
öt32
 
Cr
 = 
µ
[9];

1810 
	`YCbCπoRGB
(
˝
 [0], 
µ
[0]);

1811 
	`YCbCπoRGB
(
˝
 [1], 
µ
[1]);

1812 
	`YCbCπoRGB
(
˝
 [2], 
µ
[2]);

1813 
	`YCbCπoRGB
(
˝
 [3], 
µ
[3]);

1814 
	`YCbCπoRGB
(
˝1
[0], 
µ
[4]);

1815 
	`YCbCπoRGB
(
˝1
[1], 
µ
[5]);

1816 
	`YCbCπoRGB
(
˝1
[2], 
µ
[6]);

1817 
	`YCbCπoRGB
(
˝1
[3], 
µ
[7]);

1819 
˝
 +4, 
˝1
 += 4;

1820 
µ
 += 10;

1821 } --
x
);

1822 
˝
 +
ö¸
, 
˝1
 += incr;

1823 
µ
 +
‰omskew
;

1826 
h
 > 0) {

1827 
x
 = 
w
; x > 0;) {

1828 
öt32
 
Cb
 = 
µ
[8];

1829 
öt32
 
Cr
 = 
µ
[9];

1830 
x
) {

1832 
h
) {

1833 : 
	`YCbCπoRGB
(
˝1
[3], 
µ
[ 7]);

1834 1: 
	`YCbCπoRGB
(
˝
 [3], 
µ
[ 3]);

1837 
h
) {

1838 : 
	`YCbCπoRGB
(
˝1
[2], 
µ
[ 6]);

1839 1: 
	`YCbCπoRGB
(
˝
 [2], 
µ
[ 2]);

1842 
h
) {

1843 : 
	`YCbCπoRGB
(
˝1
[1], 
µ
[ 5]);

1844 1: 
	`YCbCπoRGB
(
˝
 [1], 
µ
[ 1]);

1847 
h
) {

1848 : 
	`YCbCπoRGB
(
˝1
[0], 
µ
[ 4]);

1849 1: 
	`YCbCπoRGB
(
˝
 [0], 
µ
[ 0]);

1852 i‡(
x
 < 4) {

1853 
˝
 +
x
; 
˝1
 += x;

1854 
x
 = 0;

1857 
˝
 +4; 
˝1
 += 4;

1858 
x
 -= 4;

1860 
µ
 += 10;

1862 i‡(
h
 <= 2)

1864 
h
 -= 2;

1865 
˝
 +
ö¸
, 
˝1
 += incr;

1866 
µ
 +
‰omskew
;

1869 
	}
}

1874 
	$DECLAREC⁄tigPutFunc
(
putc⁄tig8bôYCbCr41tûe
)

1876 (Ë
y
;

1879 
x
 = 
w
>>2;

1881 
öt32
 
Cb
 = 
µ
[4];

1882 
öt32
 
Cr
 = 
µ
[5];

1884 
	`YCbCπoRGB
(
˝
 [0], 
µ
[0]);

1885 
	`YCbCπoRGB
(
˝
 [1], 
µ
[1]);

1886 
	`YCbCπoRGB
(
˝
 [2], 
µ
[2]);

1887 
	`YCbCπoRGB
(
˝
 [3], 
µ
[3]);

1889 
˝
 += 4;

1890 
µ
 += 6;

1891 } --
x
);

1893 if–(
w
&3) != 0 )

1895 
öt32
 
Cb
 = 
µ
[4];

1896 
öt32
 
Cr
 = 
µ
[5];

1898  (
w
&3) ) {

1899 3: 
	`YCbCπoRGB
(
˝
 [2], 
µ
[2]);

1900 2: 
	`YCbCπoRGB
(
˝
 [1], 
µ
[1]);

1901 1: 
	`YCbCπoRGB
(
˝
 [0], 
µ
[0]);

1905 
˝
 +(
w
&3);

1906 
µ
 += 6;

1909 
˝
 +
toskew
;

1910 
µ
 +
‰omskew
;

1911 } --
h
);

1913 
	}
}

1918 
	$DECLAREC⁄tigPutFunc
(
putc⁄tig8bôYCbCr22tûe
)

1920 
uöt32
* 
˝2
;

1921 
öt32
 
ö¸
 = 2*
toskew
+
w
;

1922 (Ë
y
;

1923 
‰omskew
 = (fromskew / 2) * 6;

1924 
˝2
 = 
˝
+
w
+
toskew
;

1925 
h
>=2) {

1926 
x
 = 
w
;

1927 
x
>=2) {

1928 
uöt32
 
Cb
 = 
µ
[4];

1929 
uöt32
 
Cr
 = 
µ
[5];

1930 
	`YCbCπoRGB
(
˝
[0], 
µ
[0]);

1931 
	`YCbCπoRGB
(
˝
[1], 
µ
[1]);

1932 
	`YCbCπoRGB
(
˝2
[0], 
µ
[2]);

1933 
	`YCbCπoRGB
(
˝2
[1], 
µ
[3]);

1934 
˝
 += 2;

1935 
˝2
 += 2;

1936 
µ
 += 6;

1937 
x
 -= 2;

1939 i‡(
x
==1) {

1940 
uöt32
 
Cb
 = 
µ
[4];

1941 
uöt32
 
Cr
 = 
µ
[5];

1942 
	`YCbCπoRGB
(
˝
[0], 
µ
[0]);

1943 
	`YCbCπoRGB
(
˝2
[0], 
µ
[2]);

1944 
˝
 ++ ;

1945 
˝2
 ++ ;

1946 
µ
 += 6;

1948 
˝
 +
ö¸
;

1949 
˝2
 +
ö¸
;

1950 
µ
 +
‰omskew
;

1951 
h
-=2;

1953 i‡(
h
==1) {

1954 
x
 = 
w
;

1955 
x
>=2) {

1956 
uöt32
 
Cb
 = 
µ
[4];

1957 
uöt32
 
Cr
 = 
µ
[5];

1958 
	`YCbCπoRGB
(
˝
[0], 
µ
[0]);

1959 
	`YCbCπoRGB
(
˝
[1], 
µ
[1]);

1960 
˝
 += 2;

1961 
˝2
 += 2;

1962 
µ
 += 6;

1963 
x
 -= 2;

1965 i‡(
x
==1) {

1966 
uöt32
 
Cb
 = 
µ
[4];

1967 
uöt32
 
Cr
 = 
µ
[5];

1968 
	`YCbCπoRGB
(
˝
[0], 
µ
[0]);

1971 
	}
}

1976 
	$DECLAREC⁄tigPutFunc
(
putc⁄tig8bôYCbCr21tûe
)

1978 (Ë
y
;

1979 
‰omskew
 = (fromskew * 4) / 2;

1981 
x
 = 
w
>>1;

1983 
öt32
 
Cb
 = 
µ
[2];

1984 
öt32
 
Cr
 = 
µ
[3];

1986 
	`YCbCπoRGB
(
˝
[0], 
µ
[0]);

1987 
	`YCbCπoRGB
(
˝
[1], 
µ
[1]);

1989 
˝
 += 2;

1990 
µ
 += 4;

1991 } --
x
);

1993 if–(
w
&1) != 0 )

1995 
öt32
 
Cb
 = 
µ
[2];

1996 
öt32
 
Cr
 = 
µ
[3];

1998 
	`YCbCπoRGB
(
˝
[0], 
µ
[0]);

2000 
˝
 += 1;

2001 
µ
 += 4;

2004 
˝
 +
toskew
;

2005 
µ
 +
‰omskew
;

2006 } --
h
);

2007 
	}
}

2012 
	$DECLAREC⁄tigPutFunc
(
putc⁄tig8bôYCbCr12tûe
)

2014 
uöt32
* 
˝2
;

2015 
öt32
 
ö¸
 = 2*
toskew
+
w
;

2016 (Ë
y
;

2017 
‰omskew
 = (fromskew / 2) * 4;

2018 
˝2
 = 
˝
+
w
+
toskew
;

2019 
h
>=2) {

2020 
x
 = 
w
;

2022 
uöt32
 
Cb
 = 
µ
[2];

2023 
uöt32
 
Cr
 = 
µ
[3];

2024 
	`YCbCπoRGB
(
˝
[0], 
µ
[0]);

2025 
	`YCbCπoRGB
(
˝2
[0], 
µ
[1]);

2026 
˝
 ++;

2027 
˝2
 ++;

2028 
µ
 += 4;

2029 } --
x
);

2030 
˝
 +
ö¸
;

2031 
˝2
 +
ö¸
;

2032 
µ
 +
‰omskew
;

2033 
h
-=2;

2035 i‡(
h
==1) {

2036 
x
 = 
w
;

2038 
uöt32
 
Cb
 = 
µ
[2];

2039 
uöt32
 
Cr
 = 
µ
[3];

2040 
	`YCbCπoRGB
(
˝
[0], 
µ
[0]);

2041 
˝
 ++;

2042 
µ
 += 4;

2043 } --
x
);

2045 
	}
}

2050 
	$DECLAREC⁄tigPutFunc
(
putc⁄tig8bôYCbCr11tûe
)

2052 (Ë
y
;

2053 
‰omskew
 *= 3;

2055 
x
 = 
w
;

2057 
öt32
 
Cb
 = 
µ
[1];

2058 
öt32
 
Cr
 = 
µ
[2];

2060 
	`YCbCπoRGB
(*
˝
++, 
µ
[0]);

2062 
µ
 += 3;

2063 } --
x
);

2064 
˝
 +
toskew
;

2065 
µ
 +
‰omskew
;

2066 } --
h
);

2067 
	}
}

2072 
	$DECLARESïPutFunc
(
put£∑øã8bôYCbCr11tûe
)

2074 (Ë
y
;

2075 (Ë
a
;

2077 
h
-- > 0) {

2078 
x
 = 
w
;

2080 
uöt32
 
dr
, 
dg
, 
db
;

2081 
	`TIFFYCbCπoRGB
(
img
->
ycb¸
,*
r
++,*
g
++,*
b
++,&
dr
,&
dg
,&
db
);

2082 *
˝
++ = 
	`PACK
(
dr
,
dg
,
db
);

2083 } --
x
);

2084 
	`SKEW
(
r
, 
g
, 
b
, 
‰omskew
);

2085 
˝
 +
toskew
;

2087 
	}
}

2088 #unde‡
YCbCπoRGB


2091 
	$öôYCbCrC⁄vîsi⁄
(
TIFFRGBAImage
* 
img
)

2093 c⁄° 
moduÀ
[] = "initYCbCrConversion";

2095 *
luma
, *
ªfBœckWhôe
;

2097 i‡(
img
->
ycb¸
 =
NULL
) {

2098 
img
->
ycb¸
 = (
TIFFYCbCrToRGB
*Ë
	`_TIFFmÆloc
(

2099 
	`TIFFroundup_32
( (
TIFFYCbCrToRGB
),  ())

2100 + 4*256* (
TIFFRGBVÆue
)

2102 + 3*256* (
öt32
)

2104 i‡(
img
->
ycb¸
 =
NULL
) {

2105 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2111 
	`TIFFGëFõldDeÁu…ed
(
img
->
tif
, 
TIFFTAG_YCBCRCOEFFICIENTS
, &
luma
);

2112 
	`TIFFGëFõldDeÁu…ed
(
img
->
tif
, 
TIFFTAG_REFERENCEBLACKWHITE
,

2113 &
ªfBœckWhôe
);

2114 i‡(
	`TIFFYCbCrToRGBInô
(
img
->
ycb¸
, 
luma
, 
ªfBœckWhôe
) < 0)

2117 
	}
}

2119 
tûeC⁄tigRoutöe


2120 
	$öôCIELabC⁄vîsi⁄
(
TIFFRGBAImage
* 
img
)

2122 c⁄° 
moduÀ
[] = "initCIELabConversion";

2124 *
whôePoöt
;

2125 
ªfWhôe
[3];

2127 i‡(!
img
->
cõœb
) {

2128 
img
->
cõœb
 = (
TIFFCIELabToRGB
 *)

2129 
	`_TIFFmÆloc
((
TIFFCIELabToRGB
));

2130 i‡(!
img
->
cõœb
) {

2131 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2133  
NULL
;

2137 
	`TIFFGëFõldDeÁu…ed
(
img
->
tif
, 
TIFFTAG_WHITEPOINT
, &
whôePoöt
);

2138 
ªfWhôe
[1] = 100.0F;

2139 
ªfWhôe
[0] = 
whôePoöt
[0] / whitePoint[1] *ÑefWhite[1];

2140 
ªfWhôe
[2] = (1.0F - 
whôePoöt
[0] - whitePoint[1])

2141 / 
whôePoöt
[1] * 
ªfWhôe
[1];

2142 i‡(
	`TIFFCIELabToRGBInô
(
img
->
cõœb
, &
di•œy_sRGB
, 
ªfWhôe
) < 0) {

2143 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

2145 
	`_TIFF‰ì
(
img
->
cõœb
);

2146  
NULL
;

2149  
putc⁄tig8bôCIELab
;

2150 
	}
}

2160 
	$makebwm≠
(
TIFFRGBAImage
* 
img
)

2162 
TIFFRGBVÆue
* 
M≠
 = 
img
->Map;

2163 
bô•îßm∂e
 = 
img
->bitspersample;

2164 
nßm∂es
 = 8 / 
bô•îßm∂e
;

2165 
i
;

2166 
uöt32
* 
p
;

2168 if–
nßm∂es
 == 0 )

2169 
nßm∂es
 = 1;

2171 
img
->
BWm≠
 = (
uöt32
**Ë
	`_TIFFmÆloc
(

2172 256* (
uöt32
 *)+(256*
nßm∂es
*(uint32)));

2173 i‡(
img
->
BWm≠
 =
NULL
) {

2174 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(img->tif), "No space for B&W mappingÅable");

2177 
p
 = (
uöt32
*)(
img
->
BWm≠
 + 256);

2178 
i
 = 0; i < 256; i++) {

2179 
TIFFRGBVÆue
 
c
;

2180 
img
->
BWm≠
[
i
] = 
p
;

2181 
bô•îßm∂e
) {

2182 
	#GREY
(
x
Ë
c
 = 
M≠
[x]; *
p
++ = 
	`PACK
(c,c,c);

	)

2184 
	`GREY
(
i
>>7);

2185 
	`GREY
((
i
>>6)&1);

2186 
	`GREY
((
i
>>5)&1);

2187 
	`GREY
((
i
>>4)&1);

2188 
	`GREY
((
i
>>3)&1);

2189 
	`GREY
((
i
>>2)&1);

2190 
	`GREY
((
i
>>1)&1);

2191 
	`GREY
(
i
&1);

2194 
	`GREY
(
i
>>6);

2195 
	`GREY
((
i
>>4)&3);

2196 
	`GREY
((
i
>>2)&3);

2197 
	`GREY
(
i
&3);

2200 
	`GREY
(
i
>>4);

2201 
	`GREY
(
i
&0xf);

2205 
	`GREY
(
i
);

2208 #unde‡
GREY


2211 
	}
}

2219 
	$£tupM≠
(
TIFFRGBAImage
* 
img
)

2221 
öt32
 
x
, 
ønge
;

2223 
ønge
 = (
öt32
)((1L<<
img
->
bô•îßm∂e
)-1);

2226 if–
img
->
bô•îßm∂e
 == 16 )

2227 
ønge
 = (
öt32
) 255;

2229 
img
->
M≠
 = (
TIFFRGBVÆue
*Ë
	`_TIFFmÆloc
((
ønge
+1) *  (TIFFRGBValue));

2230 i‡(
img
->
M≠
 =
NULL
) {

2231 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(img->tif),

2235 i‡(
img
->
phŸomëric
 =
PHOTOMETRIC_MINISWHITE
) {

2236 
x
 = 0; x <
ønge
; x++)

2237 
img
->
M≠
[
x
] = (
TIFFRGBVÆue
Ë(((
ønge
 - x) * 255) /Ñange);

2239 
x
 = 0; x <
ønge
; x++)

2240 
img
->
M≠
[
x
] = (
TIFFRGBVÆue
Ë((x * 255Ë/ 
ønge
);

2242 i‡(
img
->
bô•îßm∂e
 <= 16 &&

2243 (
img
->
phŸomëric
 =
PHOTOMETRIC_MINISBLACK
 ||

2244 
img
->
phŸomëric
 =
PHOTOMETRIC_MINISWHITE
)) {

2249 i‡(!
	`makebwm≠
(
img
))

2252 
	`_TIFF‰ì
(
img
->
M≠
), img->M≠ = 
NULL
;

2255 
	}
}

2258 
	$checkcm≠
(
TIFFRGBAImage
* 
img
)

2260 
uöt16
* 
r
 = 
img
->
ªdcm≠
;

2261 
uöt16
* 
g
 = 
img
->
gªícm≠
;

2262 
uöt16
* 
b
 = 
img
->
bluecm≠
;

2263 
n
 = 1L<<
img
->
bô•îßm∂e
;

2265 
n
-- > 0)

2266 i‡(*
r
++ >256 || *
g
++ >256 || *
b
++ >= 256)

2269 
	}
}

2272 
	$cvtcm≠
(
TIFFRGBAImage
* 
img
)

2274 
uöt16
* 
r
 = 
img
->
ªdcm≠
;

2275 
uöt16
* 
g
 = 
img
->
gªícm≠
;

2276 
uöt16
* 
b
 = 
img
->
bluecm≠
;

2277 
i
;

2279 
i
 = (1L<<
img
->
bô•îßm∂e
)-1; i >= 0; i--) {

2280 
	#CVT
(
x
Ë((
uöt16
)((x)>>8))

	)

2281 
r
[
i
] = 
	`CVT
(r[i]);

2282 
g
[
i
] = 
	`CVT
(g[i]);

2283 
b
[
i
] = 
	`CVT
(b[i]);

2284 #unde‡
CVT


2286 
	}
}

2296 
	$makecm≠
(
TIFFRGBAImage
* 
img
)

2298 
bô•îßm∂e
 = 
img
->bitspersample;

2299 
nßm∂es
 = 8 / 
bô•îßm∂e
;

2300 
uöt16
* 
r
 = 
img
->
ªdcm≠
;

2301 
uöt16
* 
g
 = 
img
->
gªícm≠
;

2302 
uöt16
* 
b
 = 
img
->
bluecm≠
;

2303 
uöt32
 *
p
;

2304 
i
;

2306 
img
->
PALm≠
 = (
uöt32
**Ë
	`_TIFFmÆloc
(

2307 256* (
uöt32
 *)+(256*
nßm∂es
*(uint32)));

2308 i‡(
img
->
PALm≠
 =
NULL
) {

2309 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(img->tif), "No space for Palette mappingÅable");

2312 
p
 = (
uöt32
*)(
img
->
PALm≠
 + 256);

2313 
i
 = 0; i < 256; i++) {

2314 
TIFFRGBVÆue
 
c
;

2315 
img
->
PALm≠
[
i
] = 
p
;

2316 
	#CMAP
(
x
Ë
c
 = (
TIFFRGBVÆue
Ëx; *
p
++ = 
	`PACK
(
r
[c]&0xff, 
g
[c]&0xff, 
b
[c]&0xff);

	)

2317 
bô•îßm∂e
) {

2319 
	`CMAP
(
i
>>7);

2320 
	`CMAP
((
i
>>6)&1);

2321 
	`CMAP
((
i
>>5)&1);

2322 
	`CMAP
((
i
>>4)&1);

2323 
	`CMAP
((
i
>>3)&1);

2324 
	`CMAP
((
i
>>2)&1);

2325 
	`CMAP
((
i
>>1)&1);

2326 
	`CMAP
(
i
&1);

2329 
	`CMAP
(
i
>>6);

2330 
	`CMAP
((
i
>>4)&3);

2331 
	`CMAP
((
i
>>2)&3);

2332 
	`CMAP
(
i
&3);

2335 
	`CMAP
(
i
>>4);

2336 
	`CMAP
(
i
&0xf);

2339 
	`CMAP
(
i
);

2342 #unde‡
CMAP


2345 
	}
}

2352 
	$buûdM≠
(
TIFFRGBAImage
* 
img
)

2354 
img
->
phŸomëric
) {

2355 
PHOTOMETRIC_RGB
:

2356 
PHOTOMETRIC_YCBCR
:

2357 
PHOTOMETRIC_SEPARATED
:

2358 i‡(
img
->
bô•îßm∂e
 == 8)

2361 
PHOTOMETRIC_MINISBLACK
:

2362 
PHOTOMETRIC_MINISWHITE
:

2363 i‡(!
	`£tupM≠
(
img
))

2366 
PHOTOMETRIC_PALETTE
:

2371 i‡(
	`checkcm≠
(
img
) == 16)

2372 
	`cvtcm≠
(
img
);

2374 
	`TIFFW¨nögExt
(
img
->
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(img->tif), "Assuming 8-bit colormap");

2379 i‡(
img
->
bô•îßm∂e
 <8 && !
	`makecm≠
(img))

2384 
	}
}

2390 
	$PickC⁄tigCa£
(
TIFFRGBAImage
* 
img
)

2392 
img
->
gë
 = 
	`TIFFIsTûed
(img->
tif
Ë? 
gtTûeC⁄tig
 : 
gtSåùC⁄tig
;

2393 
img
->
put
.
c⁄tig
 = 
NULL
;

2394 
img
->
phŸomëric
) {

2395 
PHOTOMETRIC_RGB
:

2396 
img
->
bô•îßm∂e
) {

2398 i‡(
img
->
Æpha
 =
EXTRASAMPLE_ASSOCALPHA
)

2399 
img
->
put
.
c⁄tig
 = 
putRGBAAc⁄tig8bôtûe
;

2400 i‡(
img
->
Æpha
 =
EXTRASAMPLE_UNASSALPHA
)

2402 i‡(
	`BuûdM≠UaToAa
(
img
))

2403 
img
->
put
.
c⁄tig
 = 
putRGBUAc⁄tig8bôtûe
;

2406 
img
->
put
.
c⁄tig
 = 
putRGBc⁄tig8bôtûe
;

2409 i‡(
img
->
Æpha
 =
EXTRASAMPLE_ASSOCALPHA
)

2411 i‡(
	`BuûdM≠Bôdïth16To8
(
img
))

2412 
img
->
put
.
c⁄tig
 = 
putRGBAAc⁄tig16bôtûe
;

2414 i‡(
img
->
Æpha
 =
EXTRASAMPLE_UNASSALPHA
)

2416 i‡(
	`BuûdM≠Bôdïth16To8
(
img
) &&

2417 
	`BuûdM≠UaToAa
(
img
))

2418 
img
->
put
.
c⁄tig
 = 
putRGBUAc⁄tig16bôtûe
;

2422 i‡(
	`BuûdM≠Bôdïth16To8
(
img
))

2423 
img
->
put
.
c⁄tig
 = 
putRGBc⁄tig16bôtûe
;

2428 
PHOTOMETRIC_SEPARATED
:

2429 i‡(
	`buûdM≠
(
img
)) {

2430 i‡(
img
->
bô•îßm∂e
 == 8) {

2431 i‡(!
img
->
M≠
)

2432 
img
->
put
.
c⁄tig
 = 
putRGBc⁄tig8bôCMYKtûe
;

2434 
img
->
put
.
c⁄tig
 = 
putRGBc⁄tig8bôCMYKM≠tûe
;

2438 
PHOTOMETRIC_PALETTE
:

2439 i‡(
	`buûdM≠
(
img
)) {

2440 
img
->
bô•îßm∂e
) {

2442 
img
->
put
.
c⁄tig
 = 
put8bôcm≠tûe
;

2445 
img
->
put
.
c⁄tig
 = 
put4bôcm≠tûe
;

2448 
img
->
put
.
c⁄tig
 = 
put2bôcm≠tûe
;

2451 
img
->
put
.
c⁄tig
 = 
put1bôcm≠tûe
;

2456 
PHOTOMETRIC_MINISWHITE
:

2457 
PHOTOMETRIC_MINISBLACK
:

2458 i‡(
	`buûdM≠
(
img
)) {

2459 
img
->
bô•îßm∂e
) {

2461 
img
->
put
.
c⁄tig
 = 
put16bôbwtûe
;

2464 
img
->
put
.
c⁄tig
 = 
putgªytûe
;

2467 
img
->
put
.
c⁄tig
 = 
put4bôbwtûe
;

2470 
img
->
put
.
c⁄tig
 = 
put2bôbwtûe
;

2473 
img
->
put
.
c⁄tig
 = 
put1bôbwtûe
;

2478 
PHOTOMETRIC_YCBCR
:

2479 i‡((
img
->
bô•îßm∂e
==8Ë&& (img->
ßm∂e•îpixñ
==3))

2481 i‡(
	`öôYCbCrC⁄vîsi⁄
(
img
)!=0)

2492 
uöt16
 
Subßm∂ögH‹
;

2493 
uöt16
 
Subßm∂ögVî
;

2494 
	`TIFFGëFõldDeÁu…ed
(
img
->
tif
, 
TIFFTAG_YCBCRSUBSAMPLING
, &
Subßm∂ögH‹
, &
Subßm∂ögVî
);

2495 (
Subßm∂ögH‹
<<4)|
Subßm∂ögVî
) {

2497 
img
->
put
.
c⁄tig
 = 
putc⁄tig8bôYCbCr44tûe
;

2500 
img
->
put
.
c⁄tig
 = 
putc⁄tig8bôYCbCr42tûe
;

2503 
img
->
put
.
c⁄tig
 = 
putc⁄tig8bôYCbCr41tûe
;

2506 
img
->
put
.
c⁄tig
 = 
putc⁄tig8bôYCbCr22tûe
;

2509 
img
->
put
.
c⁄tig
 = 
putc⁄tig8bôYCbCr21tûe
;

2512 
img
->
put
.
c⁄tig
 = 
putc⁄tig8bôYCbCr12tûe
;

2515 
img
->
put
.
c⁄tig
 = 
putc⁄tig8bôYCbCr11tûe
;

2521 
PHOTOMETRIC_CIELAB
:

2522 i‡(
	`buûdM≠
(
img
)) {

2523 i‡(
img
->
bô•îßm∂e
 == 8)

2524 
img
->
put
.
c⁄tig
 = 
	`öôCIELabC⁄vîsi⁄
(img);

2528  ((
img
->
gë
!=
NULL
Ë&& (img->
put
.
c⁄tig
!=NULL));

2529 
	}
}

2538 
	$PickSï¨©eCa£
(
TIFFRGBAImage
* 
img
)

2540 
img
->
gë
 = 
	`TIFFIsTûed
(img->
tif
Ë? 
gtTûeSï¨©e
 : 
gtSåùSï¨©e
;

2541 
img
->
put
.
£∑øã
 = 
NULL
;

2542 
img
->
phŸomëric
) {

2543 
PHOTOMETRIC_MINISWHITE
:

2544 
PHOTOMETRIC_MINISBLACK
:

2546 
PHOTOMETRIC_RGB
:

2547 
img
->
bô•îßm∂e
) {

2549 i‡(
img
->
Æpha
 =
EXTRASAMPLE_ASSOCALPHA
)

2550 
img
->
put
.
£∑øã
 = 
putRGBAA£∑øã8bôtûe
;

2551 i‡(
img
->
Æpha
 =
EXTRASAMPLE_UNASSALPHA
)

2553 i‡(
	`BuûdM≠UaToAa
(
img
))

2554 
img
->
put
.
£∑øã
 = 
putRGBUA£∑øã8bôtûe
;

2557 
img
->
put
.
£∑øã
 = 
putRGB£∑øã8bôtûe
;

2560 i‡(
img
->
Æpha
 =
EXTRASAMPLE_ASSOCALPHA
)

2562 i‡(
	`BuûdM≠Bôdïth16To8
(
img
))

2563 
img
->
put
.
£∑øã
 = 
putRGBAA£∑øã16bôtûe
;

2565 i‡(
img
->
Æpha
 =
EXTRASAMPLE_UNASSALPHA
)

2567 i‡(
	`BuûdM≠Bôdïth16To8
(
img
) &&

2568 
	`BuûdM≠UaToAa
(
img
))

2569 
img
->
put
.
£∑øã
 = 
putRGBUA£∑øã16bôtûe
;

2573 i‡(
	`BuûdM≠Bôdïth16To8
(
img
))

2574 
img
->
put
.
£∑øã
 = 
putRGB£∑øã16bôtûe
;

2579 
PHOTOMETRIC_YCBCR
:

2580 i‡((
img
->
bô•îßm∂e
==8Ë&& (img->
ßm∂e•îpixñ
==3))

2582 i‡(
	`öôYCbCrC⁄vîsi⁄
(
img
)!=0)

2584 
uöt16
 
hs
, 
vs
;

2585 
	`TIFFGëFõldDeÁu…ed
(
img
->
tif
, 
TIFFTAG_YCBCRSUBSAMPLING
, &
hs
, &
vs
);

2586 (
hs
<<4)|
vs
) {

2588 
img
->
put
.
£∑øã
 = 
put£∑øã8bôYCbCr11tûe
;

2596  ((
img
->
gë
!=
NULL
Ë&& (img->
put
.
£∑øã
!=NULL));

2597 
	}
}

2600 
	$BuûdM≠UaToAa
(
TIFFRGBAImage
* 
img
)

2602 c⁄° 
moduÀ
[]="BuildMapUaToAa";

2603 
uöt8
* 
m
;

2604 
uöt16
 
«
,
nv
;

2605 
	`as£π
(
img
->
UaToAa
==
NULL
);

2606 
img
->
UaToAa
=
	`_TIFFmÆloc
(65536);

2607 i‡(
img
->
UaToAa
==
NULL
)

2609 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

2612 
m
=
img
->
UaToAa
;

2613 
«
=0;Ça<256;Ça++)

2615 
nv
=0;Çv<256;Çv++)

2616 *
m
++=(
nv
*
«
+127)/255;

2619 
	}
}

2622 
	$BuûdM≠Bôdïth16To8
(
TIFFRGBAImage
* 
img
)

2624 c⁄° 
moduÀ
[]="BuildMapBitdepth16To8";

2625 
uöt8
* 
m
;

2626 
uöt32
 
n
;

2627 
	`as£π
(
img
->
Bôdïth16To8
==
NULL
);

2628 
img
->
Bôdïth16To8
=
	`_TIFFmÆloc
(65536);

2629 i‡(
img
->
Bôdïth16To8
==
NULL
)

2631 
	`TIFFEº‹Ext
(
img
->
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

2634 
m
=
img
->
Bôdïth16To8
;

2635 
n
=0;Ç<65536;Ç++)

2636 *
m
++=(
n
+128)/257;

2638 
	}
}

2650 
	$TIFFRódRGBASåù
(
TIFF
* 
tif
, 
uöt32
 
row
, uöt32 * 
ø°î
 )

2653 
emsg
[1024] = "";

2654 
TIFFRGBAImage
 
img
;

2655 
ok
;

2656 
uöt32
 
row•î°rù
, 
rows_to_ªad
;

2658 if–
	`TIFFIsTûed
–
tif
 ) )

2660 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif),

2665 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

2666 if–(
row
 % 
row•î°rù
) != 0 )

2668 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif),

2673 i‡(
	`TIFFRGBAImageOK
(
tif
, 
emsg
Ë&& 
	`TIFFRGBAImageBegö
(&
img
,Åif, 0,Émsg)) {

2675 
img
.
row_off£t
 = 
row
;

2676 
img
.
cﬁ_off£t
 = 0;

2678 if–
row
 + 
row•î°rù
 > 
img
.
height
 )

2679 
rows_to_ªad
 = 
img
.
height
 - 
row
;

2681 
rows_to_ªad
 = 
row•î°rù
;

2683 
ok
 = 
	`TIFFRGBAImageGë
(&
img
, 
ø°î
, img.
width
, 
rows_to_ªad
 );

2685 
	`TIFFRGBAImageEnd
(&
img
);

2687 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
—if), "%s", 
emsg
);

2688 
ok
 = 0;

2691  (
ok
);

2692 
	}
}

2701 
	$TIFFRódRGBATûe
(
TIFF
* 
tif
, 
uöt32
 
cﬁ
, uöt32 
row
, uöt32 * 
ø°î
)

2704 
emsg
[1024] = "";

2705 
TIFFRGBAImage
 
img
;

2706 
ok
;

2707 
uöt32
 
tûe_xsize
, 
tûe_ysize
;

2708 
uöt32
 
ªad_xsize
, 
ªad_ysize
;

2709 
uöt32
 
i_row
;

2716 if–!
	`TIFFIsTûed
–
tif
 ) )

2718 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif),

2723 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_TILEWIDTH
, &
tûe_xsize
);

2724 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_TILELENGTH
, &
tûe_ysize
);

2725 if–(
cﬁ
 % 
tûe_xsize
Ë!0 || (
row
 % 
tûe_ysize
) != 0 )

2727 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
(tif),

2737 i‡(!
	`TIFFRGBAImageOK
(
tif
, 
emsg
)

2738 || !
	`TIFFRGBAImageBegö
(&
img
, 
tif
, 0, 
emsg
)) {

2739 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
	`TIFFFûeName
—if), "%s", 
emsg
);

2750 if–
row
 + 
tûe_ysize
 > 
img
.
height
 )

2751 
ªad_ysize
 = 
img
.
height
 - 
row
;

2753 
ªad_ysize
 = 
tûe_ysize
;

2755 if–
cﬁ
 + 
tûe_xsize
 > 
img
.
width
 )

2756 
ªad_xsize
 = 
img
.
width
 - 
cﬁ
;

2758 
ªad_xsize
 = 
tûe_xsize
;

2764 
img
.
row_off£t
 = 
row
;

2765 
img
.
cﬁ_off£t
 = 
cﬁ
;

2767 
ok
 = 
	`TIFFRGBAImageGë
(&
img
, 
ø°î
, 
ªad_xsize
, 
ªad_ysize
 );

2769 
	`TIFFRGBAImageEnd
(&
img
);

2779 if–
ªad_xsize
 =
tûe_xsize
 && 
ªad_ysize
 =
tûe_ysize
 )

2780 –
ok
 );

2782  
i_row
 = 0; i_row < 
ªad_ysize
; i_row++ ) {

2783 
	`memmove
–
ø°î
 + (
tûe_ysize
 - 
i_row
 - 1Ë* 
tûe_xsize
,

2784 
ø°î
 + (
ªad_ysize
 - 
i_row
 - 1Ë* 
ªad_xsize
,

2785 
ªad_xsize
 * (
uöt32
) );

2786 
	`_TIFFmem£t
–
ø°î
 + (
tûe_ysize
 - 
i_row
 - 1Ë* 
tûe_xsize
+
ªad_xsize
,

2787 0, (
uöt32
Ë* (
tûe_xsize
 - 
ªad_xsize
) );

2790  
i_row
 = 
ªad_ysize
; i_row < 
tûe_ysize
; i_row++ ) {

2791 
	`_TIFFmem£t
–
ø°î
 + (
tûe_ysize
 - 
i_row
 - 1Ë* 
tûe_xsize
,

2792 0, (
uöt32
Ë* 
tûe_xsize
 );

2795  (
ok
);

2796 
	}
}

	@libtiff/tif_jbig.c

35 
	~"tiffi›.h
"

37 #ifde‡
JBIG_SUPPORT


38 
	~"jbig.h
"

40 
	$JBIGSëupDecode
(
TIFF
* 
tif
)

42 i‡(
	`TIFFNumbîOfSåùs
(
tif
) != 1)

44 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "JBIG", "Multistrip imagesÇot supported in decoder");

49 
	}
}

51 
	$JBIGDecode
(
TIFF
* 
tif
, 
uöt8
* 
buf„r
, 
tmsize_t
 
size
, 
uöt16
 
s
)

53 
jbg_dec_°©e
 
decodî
;

54 
decodeSètus
 = 0;

55 * 
pImage
 = 
NULL
;

56 (Ë
size
, (Ë
s
;

58 i‡(
	`isFûlOrdî
(
tif
,Åif->
tif_dú
.
td_fûl‹dî
))

60 
	`TIFFRevî£Bôs
(
tif
->
tif_øwd©a
,Åif->
tif_øwd©asize
);

63 
	`jbg_dec_öô
(&
decodî
);

65 #i‡
	`deföed
(
HAVE_JBG_NEWLEN
)

66 
	`jbg_√wÀn
(
tif
->
tif_øwd©a
, (
size_t
Èif->
tif_øwd©asize
);

79 
decodeSètus
 = 
	`jbg_dec_ö
(&
decodî
, (*)
tif
->
tif_øwd©a
,

80 (
size_t
)
tif
->
tif_øwd©asize
, 
NULL
);

81 i‡(
JBG_EOK
 !
decodeSètus
)

88 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,

90 
decodeSètus
,

91 #i‡
	`deföed
(
JBG_EN
)

92 
	`jbg_°ªº‹
(
decodeSètus
, 
JBG_EN
)

94 
	`jbg_°ªº‹
(
decodeSètus
)

100 
pImage
 = 
	`jbg_dec_gëimage
(&
decodî
, 0);

101 
	`_TIFFmem˝y
(
buf„r
, 
pImage
, 
	`jbg_dec_gësize
(&
decodî
));

102 
	`jbg_dec_‰ì
(&
decodî
);

104 
	}
}

106 
	$JBIGSëupEncode
(
TIFF
* 
tif
)

108 i‡(
	`TIFFNumbîOfSåùs
(
tif
) != 1)

110 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "JBIG", "Multistrip imagesÇot supported inÉncoder");

115 
	}
}

117 
	$JBIGC›yEncodedD©a
(
TIFF
* 
tif
, * 
µ
, 
size_t
 
cc
, 
uöt16
 
s
)

119 (Ë
s
;

120 
cc
 > 0)

122 
tmsize_t
 
n
 = (tmsize_t)
cc
;

124 i‡(
tif
->
tif_øwcc
 + 
n
 >Åif->
tif_øwd©asize
)

126 
n
 = 
tif
->
tif_øwd©asize
 -Åif->
tif_øwcc
;

129 
	`as£π
(
n
 > 0);

130 
	`_TIFFmem˝y
(
tif
->
tif_øw˝
, 
µ
, 
n
);

131 
tif
->
tif_øw˝
 +
n
;

132 
tif
->
tif_øwcc
 +
n
;

133 
µ
 +
n
;

134 
cc
 -(
size_t
)
n
;

135 i‡(
tif
->
tif_øwcc
 >tif->
tif_øwd©asize
 &&

136 !
	`TIFFFlushD©a1
(
tif
))

143 
	}
}

145 
	$JBIGOuçutBõ
(* 
buf„r
, 
size_t
 
Àn
, * 
u£rD©a
)

147 
TIFF
* 
tif
 = (TIFF*)
u£rD©a
;

149 i‡(
	`isFûlOrdî
(
tif
,Åif->
tif_dú
.
td_fûl‹dî
))

151 
	`TIFFRevî£Bôs
(
buf„r
, (
tmsize_t
)
Àn
);

154 
	`JBIGC›yEncodedD©a
(
tif
, 
buf„r
, 
Àn
, 0);

155 
	}
}

157 
	$JBIGEncode
(
TIFF
* 
tif
, 
uöt8
* 
buf„r
, 
tmsize_t
 
size
, 
uöt16
 
s
)

159 
TIFFDúe˘‹y
* 
dú
 = &
tif
->
tif_dú
;

160 
jbg_íc_°©e
 
ícodî
;

162 (Ë
size
, (Ë
s
;

164 
	`jbg_íc_öô
(&
ícodî
,

165 
dú
->
td_imagewidth
,

166 
dú
->
td_imagñígth
,

168 &
buf„r
,

169 
JBIGOuçutBõ
,

170 
tif
);

175 
	`jbg_íc_out
(&
ícodî
);

176 
	`jbg_íc_‰ì
(&
ícodî
);

179 
	}
}

181 
	$TIFFInôJBIG
(
TIFF
* 
tif
, 
scheme
)

183 
	`as£π
(
scheme
 =
COMPRESSION_JBIG
);

190 
tif
->
tif_Êags
 |
TIFF_NOBITREV
;

191 
tif
->
tif_Êags
 &~
TIFF_MAPPED
;

194 
tif
->
tif_£tupdecode
 = 
JBIGSëupDecode
;

195 
tif
->
tif_decode°rù
 = 
JBIGDecode
;

197 
tif
->
tif_£tu≥ncode
 = 
JBIGSëupEncode
;

198 
tif
->
tif_ícode°rù
 = 
JBIGEncode
;

201 
	}
}

	@libtiff/tif_jpeg.c

27 
	#WIN32_LEAN_AND_MEAN


	)

28 
	#VC_EXTRALEAN


	)

30 
	~"tiffi›.h
"

31 #ifde‡
JPEG_SUPPORT


45 
	~<£tjmp.h
>

47 
TIFFFûlSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
);

48 
TIFFFûlTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
);

49 
TIFFReInôJPEG_12
–
TIFF
 *
tif
, 
scheme
, 
is_ícode
 );

53 #ifde‡
FAR


54 #unde‡
FAR


63 #i‡
deföed
(
__BORLANDC__
Ë|| deföed(
__MINGW32__
)

64 
	#XMD_H
 1

	)

81 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__MINGW32__
)

82 #i‚de‡
__RPCNDR_H__


83 
	tboﬁón
;

85 
	#HAVE_BOOLEAN


	)

88 
	~"j≥glib.h
"

89 
	~"jîr‹.h
"

96 #i‡
deföed
(
JPEG_LIB_MK1
)

97 
	#JPEG_LIB_MK1_OR_12BIT
 1

	)

98 #ñi‡
BITS_IN_JSAMPLE
 == 12

99 
	#JPEG_LIB_MK1_OR_12BIT
 1

	)

109 #i‡
deföed
(
D_MAX_DATA_UNITS_IN_MCU
)

110 
	#width_ö_blocks
 
width_ö_d©a_unôs


	)

117 
	#SETJMP
(
jbuf
Ë
	`£tjmp
(jbuf)

	)

118 
	#LONGJMP
(
jbuf
,
code
Ë
	`l⁄gjmp
(jbuf,code)

	)

119 
	#JMP_BUF
 
jmp_buf


	)

121 
j≥g_de°ö©i⁄_mgr
 
	tj≥g_de°ö©i⁄_mgr
;

122 
j≥g_sour˚_mgr
 
	tj≥g_sour˚_mgr
;

123 
j≥g_îr‹_mgr
 
	tj≥g_îr‹_mgr
;

140 
j≥g_com¥ess_°ru˘
 
	mc
;

141 
j≥g_decom¥ess_°ru˘
 
	md
;

142 
j≥g_comm⁄_°ru˘
 
	mcomm
;

143 } 
	mcöfo
;

144 
	mcöfo_öôülized
;

146 
j≥g_îr‹_mgr
 
	mîr
;

147 
JMP_BUF
 
	mexô_jmpbuf
;

152 
j≥g_de°ö©i⁄_mgr
 
	mde°
;

153 
j≥g_sour˚_mgr
 
	m§c
;

155 
TIFF
* 
	mtif
;

156 
uöt16
 
	mphŸomëric
;

157 
uöt16
 
	mh_ßm∂ög
;

158 
uöt16
 
	mv_ßm∂ög
;

159 
tmsize_t
 
	mbyã•îlöe
;

161 
JSAMPARRAY
 
	mds_buf„r
[
MAX_COMPONENTS
];

162 
	msˇncou¡
;

163 
	mßm∂e•î˛ump
;

165 
TIFFVGëMëhod
 
	mvgë∑ª¡
;

166 
TIFFVSëMëhod
 
	mv£ç¨ít
;

167 
TIFFPrötMëhod
 
	m¥ötdú
;

168 
TIFFSåùMëhod
 
	mdef•¨ít
;

169 
TIFFTûeMëhod
 
	mde·∑ª¡
;

171 * 
	mj≥gèbÀs
;

172 
uöt32
 
	mj≥gèbÀs_Àngth
;

173 
	mj≥gquÆôy
;

174 
	mj≥gcﬁ‹mode
;

175 
	mj≥gèbÀsmode
;

177 
	mycb¸ßm∂ög_„tched
;

178 } 
	tJPEGSèã
;

180 
	#JSèã
(
tif
Ë((
JPEGSèã
*)—if)->
tif_d©a
)

	)

182 
JPEGDecode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

183 
JPEGDecodeRaw
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

184 
JPEGEncode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

185 
JPEGEncodeRaw
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

186 
JPEGInôülizeLibJPEG
(
TIFF
 * 
tif
, 
decode
 );

187 
DecodeRowEº‹
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

189 
	#FIELD_JPEGTABLES
 (
FIELD_CODEC
+0)

	)

191 c⁄° 
TIFFFõld
 
	gj≥gFõlds
[] = {

192 { 
TIFFTAG_JPEGTABLES
, -3, -3, 
TIFF_UNDEFINED
, 0, 
TIFF_SETGET_C32_UINT8
, TIFF_SETGET_C32_UINT8, 
FIELD_JPEGTABLES
, 
FALSE
, 
TRUE
, "JPEGTabÀs", 
NULL
 },

193 { 
TIFFTAG_JPEGQUALITY
, 0, 0, 
TIFF_ANY
, 0, 
TIFF_SETGET_INT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PSEUDO
, 
TRUE
, 
FALSE
, "", 
NULL
 },

194 { 
TIFFTAG_JPEGCOLORMODE
, 0, 0, 
TIFF_ANY
, 0, 
TIFF_SETGET_INT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PSEUDO
, 
FALSE
, FALSE, "", 
NULL
 },

195 { 
TIFFTAG_JPEGTABLESMODE
, 0, 0, 
TIFF_ANY
, 0, 
TIFF_SETGET_INT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PSEUDO
, 
FALSE
, FALSE, "", 
NULL
 }

213 
	$TIFFj≥g_îr‹_exô
(
j_comm⁄_±r
 
cöfo
)

215 
JPEGSèã
 *
•
 = (JPEGSèã *Ë
cöfo
;

216 
buf„r
[
JMSG_LENGTH_MAX
];

218 (*
cöfo
->
îr
->
f‹m©_mesßge
Ë(cöfo, 
buf„r
);

219 
	`TIFFEº‹Ext
(
•
->
tif
->
tif_˛õ¡d©a
, "JPEGLib", "%s", 
buf„r
);

220 
	`j≥g_ab‹t
(
cöfo
);

221 
	`LONGJMP
(
•
->
exô_jmpbuf
, 1);

222 
	}
}

230 
	$TIFFj≥g_ouçut_mesßge
(
j_comm⁄_±r
 
cöfo
)

232 
buf„r
[
JMSG_LENGTH_MAX
];

234 (*
cöfo
->
îr
->
f‹m©_mesßge
Ë(cöfo, 
buf„r
);

235 
	`TIFFW¨nögExt
(((
JPEGSèã
 *Ë
cöfo
)->
tif
->
tif_˛õ¡d©a
, "JPEGLib", "%s", 
buf„r
);

236 
	}
}

244 
	#CALLJPEG
(
•
, 
Áû
, 
›
Ë(
	`SETJMP
((•)->
exô_jmpbuf
Ë? (ÁûË: (›))

	)

245 
	#CALLVJPEG
(
•
, 
›
Ë
	`CALLJPEG
(•, 0, ((›),1))

	)

248 
	$TIFFj≥g_¸óã_com¥ess
(
JPEGSèã
* 
•
)

251 
•
->
cöfo
.
c
.
îr
 = 
	`j≥g_°d_îr‹
(&sp->err);

252 
•
->
îr
.
îr‹_exô
 = 
TIFFj≥g_îr‹_exô
;

253 
•
->
îr
.
ouçut_mesßge
 = 
TIFFj≥g_ouçut_mesßge
;

255  
	`CALLVJPEG
(
•
, 
	`j≥g_¸óã_com¥ess
(&•->
cöfo
.
c
));

256 
	}
}

259 
	$TIFFj≥g_¸óã_decom¥ess
(
JPEGSèã
* 
•
)

262 
•
->
cöfo
.
d
.
îr
 = 
	`j≥g_°d_îr‹
(&sp->err);

263 
•
->
îr
.
îr‹_exô
 = 
TIFFj≥g_îr‹_exô
;

264 
•
->
îr
.
ouçut_mesßge
 = 
TIFFj≥g_ouçut_mesßge
;

266  
	`CALLVJPEG
(
•
, 
	`j≥g_¸óã_decom¥ess
(&•->
cöfo
.
d
));

267 
	}
}

270 
	$TIFFj≥g_£t_deÁu…s
(
JPEGSèã
* 
•
)

272  
	`CALLVJPEG
(
•
, 
	`j≥g_£t_deÁu…s
(&•->
cöfo
.
c
));

273 
	}
}

276 
	$TIFFj≥g_£t_cﬁ‹•a˚
(
JPEGSèã
* 
•
, 
J_COLOR_SPACE
 
cﬁ‹•a˚
)

278  
	`CALLVJPEG
(
•
, 
	`j≥g_£t_cﬁ‹•a˚
(&•->
cöfo
.
c
, 
cﬁ‹•a˚
));

279 
	}
}

282 
	$TIFFj≥g_£t_quÆôy
(
JPEGSèã
* 
•
, 
quÆôy
, 
boﬁón
 
f‹˚_ba£löe
)

284  
	`CALLVJPEG
(
•
,

285 
	`j≥g_£t_quÆôy
(&
•
->
cöfo
.
c
, 
quÆôy
, 
f‹˚_ba£löe
));

286 
	}
}

289 
	$TIFFj≥g_suµªss_èbÀs
(
JPEGSèã
* 
•
, 
boﬁón
 
suµªss
)

291  
	`CALLVJPEG
(
•
, 
	`j≥g_suµªss_èbÀs
(&•->
cöfo
.
c
, 
suµªss
));

292 
	}
}

295 
	$TIFFj≥g_°¨t_com¥ess
(
JPEGSèã
* 
•
, 
boﬁón
 
wrôe_Æl_èbÀs
)

297  
	`CALLVJPEG
(
•
,

298 
	`j≥g_°¨t_com¥ess
(&
•
->
cöfo
.
c
, 
wrôe_Æl_èbÀs
));

299 
	}
}

302 
	$TIFFj≥g_wrôe_sˇ∆öes
(
JPEGSèã
* 
•
, 
JSAMPARRAY
 
sˇ∆öes
, 
num_löes
)

304  
	`CALLJPEG
(
•
, -1, (Ë
	`j≥g_wrôe_sˇ∆öes
(&•->
cöfo
.
c
,

305 
sˇ∆öes
, (
JDIMENSION
Ë
num_löes
));

306 
	}
}

309 
	$TIFFj≥g_wrôe_øw_d©a
(
JPEGSèã
* 
•
, 
JSAMPIMAGE
 
d©a
, 
num_löes
)

311  
	`CALLJPEG
(
•
, -1, (Ë
	`j≥g_wrôe_øw_d©a
(&•->
cöfo
.
c
,

312 
d©a
, (
JDIMENSION
Ë
num_löes
));

313 
	}
}

316 
	$TIFFj≥g_föish_com¥ess
(
JPEGSèã
* 
•
)

318  
	`CALLVJPEG
(
•
, 
	`j≥g_föish_com¥ess
(&•->
cöfo
.
c
));

319 
	}
}

322 
	$TIFFj≥g_wrôe_èbÀs
(
JPEGSèã
* 
•
)

324  
	`CALLVJPEG
(
•
, 
	`j≥g_wrôe_èbÀs
(&•->
cöfo
.
c
));

325 
	}
}

328 
	$TIFFj≥g_ªad_hódî
(
JPEGSèã
* 
•
, 
boﬁón
 
ªquúe_image
)

330  
	`CALLJPEG
(
•
, -1, 
	`j≥g_ªad_hódî
(&•->
cöfo
.
d
, 
ªquúe_image
));

331 
	}
}

334 
	$TIFFj≥g_°¨t_decom¥ess
(
JPEGSèã
* 
•
)

336  
	`CALLVJPEG
(
•
, 
	`j≥g_°¨t_decom¥ess
(&•->
cöfo
.
d
));

337 
	}
}

340 
	$TIFFj≥g_ªad_sˇ∆öes
(
JPEGSèã
* 
•
, 
JSAMPARRAY
 
sˇ∆öes
, 
max_löes
)

342  
	`CALLJPEG
(
•
, -1, (Ë
	`j≥g_ªad_sˇ∆öes
(&•->
cöfo
.
d
,

343 
sˇ∆öes
, (
JDIMENSION
Ë
max_löes
));

344 
	}
}

347 
	$TIFFj≥g_ªad_øw_d©a
(
JPEGSèã
* 
•
, 
JSAMPIMAGE
 
d©a
, 
max_löes
)

349  
	`CALLJPEG
(
•
, -1, (Ë
	`j≥g_ªad_øw_d©a
(&•->
cöfo
.
d
,

350 
d©a
, (
JDIMENSION
Ë
max_löes
));

351 
	}
}

354 
	$TIFFj≥g_föish_decom¥ess
(
JPEGSèã
* 
•
)

356  
	`CALLJPEG
(
•
, -1, (Ë
	`j≥g_föish_decom¥ess
(&•->
cöfo
.
d
));

357 
	}
}

360 
	$TIFFj≥g_ab‹t
(
JPEGSèã
* 
•
)

362  
	`CALLVJPEG
(
•
, 
	`j≥g_ab‹t
(&•->
cöfo
.
comm
));

363 
	}
}

366 
	$TIFFj≥g_de°roy
(
JPEGSèã
* 
•
)

368  
	`CALLVJPEG
(
•
, 
	`j≥g_de°roy
(&•->
cöfo
.
comm
));

369 
	}
}

371 
JSAMPARRAY


372 
	$TIFFj≥g_Æloc_ßºay
(
JPEGSèã
* 
•
, 
poﬁ_id
,

373 
JDIMENSION
 
ßm∂e•îrow
, JDIMENSION 
numrows
)

375  
	`CALLJPEG
(
•
, (
JSAMPARRAY
Ë
NULL
,

376 (*
•
->
cöfo
.
comm
.
mem
->
Æloc_ßºay
)

377 (&
•
->
cöfo
.
comm
, 
poﬁ_id
, 
ßm∂e•îrow
, 
numrows
));

378 
	}
}

387 
	$°d_öô_de°ö©i⁄
(
j_com¥ess_±r
 
cöfo
)

389 
JPEGSèã
* 
•
 = (JPEGSèã*Ë
cöfo
;

390 
TIFF
* 
tif
 = 
•
->tif;

392 
•
->
de°
.
√xt_ouçut_byã
 = (
JOCTET
*Ë
tif
->
tif_øwd©a
;

393 
•
->
de°
.
‰ì_ö_buf„r
 = (
size_t
Ë
tif
->
tif_øwd©asize
;

394 
	}
}

396 
boﬁón


397 
	$°d_em±y_ouçut_buf„r
(
j_com¥ess_±r
 
cöfo
)

399 
JPEGSèã
* 
•
 = (JPEGSèã*Ë
cöfo
;

400 
TIFF
* 
tif
 = 
•
->tif;

403 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
;

405 #ifde‡
IPPJ_HUFF


412 i‡–
•
->
de°
.
‰ì_ö_buf„r
 >= 0 ) {

413 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
 - 
•
->
de°
.
‰ì_ö_buf„r
;

417 
	`TIFFFlushD©a1
(
tif
);

418 
•
->
de°
.
√xt_ouçut_byã
 = (
JOCTET
*Ë
tif
->
tif_øwd©a
;

419 
•
->
de°
.
‰ì_ö_buf„r
 = (
size_t
Ë
tif
->
tif_øwd©asize
;

421  (
TRUE
);

422 
	}
}

425 
	$°d_ãrm_de°ö©i⁄
(
j_com¥ess_±r
 
cöfo
)

427 
JPEGSèã
* 
•
 = (JPEGSèã*Ë
cöfo
;

428 
TIFF
* 
tif
 = 
•
->tif;

430 
tif
->
tif_øw˝
 = (
uöt8
*Ë
•
->
de°
.
√xt_ouçut_byã
;

431 
tif
->
tif_øwcc
 =

432 
tif
->
tif_øwd©asize
 - (
tmsize_t
Ë
•
->
de°
.
‰ì_ö_buf„r
;

434 
	}
}

437 
	$TIFFj≥g_d©a_de°
(
JPEGSèã
* 
•
, 
TIFF
* 
tif
)

439 (Ë
tif
;

440 
•
->
cöfo
.
c
.
de°
 = &sp->dest;

441 
•
->
de°
.
öô_de°ö©i⁄
 = 
°d_öô_de°ö©i⁄
;

442 
•
->
de°
.
em±y_ouçut_buf„r
 = 
°d_em±y_ouçut_buf„r
;

443 
•
->
de°
.
ãrm_de°ö©i⁄
 = 
°d_ãrm_de°ö©i⁄
;

444 
	}
}

451 
	$èbÀs_öô_de°ö©i⁄
(
j_com¥ess_±r
 
cöfo
)

453 
JPEGSèã
* 
•
 = (JPEGSèã*Ë
cöfo
;

456 
•
->
de°
.
√xt_ouçut_byã
 = (
JOCTET
*Ë•->
j≥gèbÀs
;

457 
•
->
de°
.
‰ì_ö_buf„r
 = (
size_t
Ë•->
j≥gèbÀs_Àngth
;

458 
	}
}

460 
boﬁón


461 
	$èbÀs_em±y_ouçut_buf„r
(
j_com¥ess_±r
 
cöfo
)

463 
JPEGSèã
* 
•
 = (JPEGSèã*Ë
cöfo
;

464 * 
√wbuf
;

467 
√wbuf
 = 
	`_TIFFªÆloc
((*Ë
•
->
j≥gèbÀs
,

468 (
tmsize_t
Ë(
•
->
j≥gèbÀs_Àngth
 + 1000));

469 i‡(
√wbuf
 =
NULL
)

470 
	`ERREXIT1
(
cöfo
, 
JERR_OUT_OF_MEMORY
, 100);

471 
•
->
de°
.
√xt_ouçut_byã
 = (
JOCTET
*Ë
√wbuf
 + sp->
j≥gèbÀs_Àngth
;

472 
•
->
de°
.
‰ì_ö_buf„r
 = (
size_t
) 1000;

473 
•
->
j≥gèbÀs
 = 
√wbuf
;

474 
•
->
j≥gèbÀs_Àngth
 += 1000;

475  (
TRUE
);

476 
	}
}

479 
	$èbÀs_ãrm_de°ö©i⁄
(
j_com¥ess_±r
 
cöfo
)

481 
JPEGSèã
* 
•
 = (JPEGSèã*Ë
cöfo
;

484 
•
->
j≥gèbÀs_Àngth
 -(
uöt32
Ë•->
de°
.
‰ì_ö_buf„r
;

485 
	}
}

488 
	$TIFFj≥g_èbÀs_de°
(
JPEGSèã
* 
•
, 
TIFF
* 
tif
)

490 (Ë
tif
;

495 i‡(
•
->
j≥gèbÀs
)

496 
	`_TIFF‰ì
(
•
->
j≥gèbÀs
);

497 
•
->
j≥gèbÀs_Àngth
 = 1000;

498 
•
->
j≥gèbÀs
 = (*Ë
	`_TIFFmÆloc
((
tmsize_t
Ë•->
j≥gèbÀs_Àngth
);

499 i‡(
•
->
j≥gèbÀs
 =
NULL
) {

500 
•
->
j≥gèbÀs_Àngth
 = 0;

501 
	`TIFFEº‹Ext
(
•
->
tif
->
tif_˛õ¡d©a
, "TIFFjpeg_tables_dest", "No space for JPEGTables");

504 
•
->
cöfo
.
c
.
de°
 = &sp->dest;

505 
•
->
de°
.
öô_de°ö©i⁄
 = 
èbÀs_öô_de°ö©i⁄
;

506 
•
->
de°
.
em±y_ouçut_buf„r
 = 
èbÀs_em±y_ouçut_buf„r
;

507 
•
->
de°
.
ãrm_de°ö©i⁄
 = 
èbÀs_ãrm_de°ö©i⁄
;

509 
	}
}

517 
	$°d_öô_sour˚
(
j_decom¥ess_±r
 
cöfo
)

519 
JPEGSèã
* 
•
 = (JPEGSèã*Ë
cöfo
;

520 
TIFF
* 
tif
 = 
•
->tif;

522 
•
->
§c
.
√xt_öput_byã
 = (c⁄° 
JOCTET
*Ë
tif
->
tif_øwd©a
;

523 
•
->
§c
.
byãs_ö_buf„r
 = (
size_t
Ë
tif
->
tif_øwcc
;

524 
	}
}

526 
boﬁón


527 
	$°d_fûl_öput_buf„r
(
j_decom¥ess_±r
 
cöfo
)

529 
JPEGSèã
* 
•
 = (JPEGSèã* ) 
cöfo
;

530 c⁄° 
JOCTET
 
dummy_EOI
[2] = { 0xFF, 
JPEG_EOI
 };

532 #ifde‡
IPPJ_HUFF


542 if–
•
->
§c
.
byãs_ö_buf„r
 > 0 ) {

543  (
TRUE
);

555 
	`WARNMS
(
cöfo
, 
JWRN_JPEG_EOF
);

557 
•
->
§c
.
√xt_öput_byã
 = 
dummy_EOI
;

558 
•
->
§c
.
byãs_ö_buf„r
 = 2;

559  (
TRUE
);

560 
	}
}

563 
	$°d_skù_öput_d©a
(
j_decom¥ess_±r
 
cöfo
, 
num_byãs
)

565 
JPEGSèã
* 
•
 = (JPEGSèã*Ë
cöfo
;

567 i‡(
num_byãs
 > 0) {

568 i‡((
size_t
)
num_byãs
 > 
•
->
§c
.
byãs_ö_buf„r
) {

570 (Ë
	`°d_fûl_öput_buf„r
(
cöfo
);

572 
•
->
§c
.
√xt_öput_byã
 +(
size_t
Ë
num_byãs
;

573 
•
->
§c
.
byãs_ö_buf„r
 -(
size_t
Ë
num_byãs
;

576 
	}
}

579 
	$°d_ãrm_sour˚
(
j_decom¥ess_±r
 
cöfo
)

582 (Ë
cöfo
;

583 
	}
}

586 
	$TIFFj≥g_d©a_§c
(
JPEGSèã
* 
•
, 
TIFF
* 
tif
)

588 (Ë
tif
;

589 
•
->
cöfo
.
d
.
§c
 = &sp->src;

590 
•
->
§c
.
öô_sour˚
 = 
°d_öô_sour˚
;

591 
•
->
§c
.
fûl_öput_buf„r
 = 
°d_fûl_öput_buf„r
;

592 
•
->
§c
.
skù_öput_d©a
 = 
°d_skù_öput_d©a
;

593 
•
->
§c
.
ªsync_to_ª°¨t
 = 
j≥g_ªsync_to_ª°¨t
;

594 
•
->
§c
.
ãrm_sour˚
 = 
°d_ãrm_sour˚
;

595 
•
->
§c
.
byãs_ö_buf„r
 = 0;

596 
•
->
§c
.
√xt_öput_byã
 = 
NULL
;

597 
	}
}

605 
	$èbÀs_öô_sour˚
(
j_decom¥ess_±r
 
cöfo
)

607 
JPEGSèã
* 
•
 = (JPEGSèã*Ë
cöfo
;

609 
•
->
§c
.
√xt_öput_byã
 = (c⁄° 
JOCTET
*Ë•->
j≥gèbÀs
;

610 
•
->
§c
.
byãs_ö_buf„r
 = (
size_t
Ë•->
j≥gèbÀs_Àngth
;

611 
	}
}

614 
	$TIFFj≥g_èbÀs_§c
(
JPEGSèã
* 
•
, 
TIFF
* 
tif
)

616 
	`TIFFj≥g_d©a_§c
(
•
, 
tif
);

617 
•
->
§c
.
öô_sour˚
 = 
èbÀs_öô_sour˚
;

618 
	}
}

628 
	$Æloc_downßm∂ed_buf„rs
(
TIFF
* 
tif
, 
j≥g_comp⁄ít_öfo
* 
comp_öfo
,

629 
num_comp⁄íts
)

631 
JPEGSèã
* 
•
 = 
	`JSèã
(
tif
);

632 
ci
;

633 
j≥g_comp⁄ít_öfo
* 
comµå
;

634 
JSAMPARRAY
 
buf
;

635 
ßm∂es_≥r_˛ump
 = 0;

637 
ci
 = 0, 
comµå
 = 
comp_öfo
; cò< 
num_comp⁄íts
;

638 
ci
++, 
comµå
++) {

639 
ßm∂es_≥r_˛ump
 +
comµå
->
h_ßmp_Á˘‹
 *

640 
comµå
->
v_ßmp_Á˘‹
;

641 
buf
 = 
	`TIFFj≥g_Æloc_ßºay
(
•
, 
JPOOL_IMAGE
,

642 
comµå
->
width_ö_blocks
 * 
DCTSIZE
,

643 (
JDIMENSION
Ë(
comµå
->
v_ßmp_Á˘‹
*
DCTSIZE
));

644 i‡(
buf
 =
NULL
)

646 
•
->
ds_buf„r
[
ci
] = 
buf
;

648 
•
->
ßm∂e•î˛ump
 = 
ßm∂es_≥r_˛ump
;

650 
	}
}

657 #ifde‡
CHECK_JPEG_YCBCR_SUBSAMPLING


659 
	#JPEG_MARKER_SOF0
 0xC0

	)

660 
	#JPEG_MARKER_SOF1
 0xC1

	)

661 
	#JPEG_MARKER_SOF3
 0xC3

	)

662 
	#JPEG_MARKER_DHT
 0xC4

	)

663 
	#JPEG_MARKER_SOI
 0xD8

	)

664 
	#JPEG_MARKER_SOS
 0xDA

	)

665 
	#JPEG_MARKER_DQT
 0xDB

	)

666 
	#JPEG_MARKER_DRI
 0xDD

	)

667 
	#JPEG_MARKER_APP0
 0xE0

	)

668 
	#JPEG_MARKER_COM
 0xFE

	)

669 
	sJPEGFixupTagsSubßm∂ögD©a


671 
TIFF
* 
	mtif
;

672 * 
	mbuf„r
;

673 
uöt32
 
	mbuf„rsize
;

674 
uöt8
* 
	mbuf„rcuºítbyã
;

675 
uöt32
 
	mbuf„rbyã¶e·
;

676 
uöt64
 
	mfûeoff£t
;

677 
uöt64
 
	mfûebyã¶e·
;

678 
uöt8
 
	mfûïosôi⁄ed
;

680 
JPEGFixupTagsSubßm∂ög
(
TIFF
* 
tif
);

681 
JPEGFixupTagsSubßm∂ögSec
(
JPEGFixupTagsSubßm∂ögD©a
* 
d©a
);

682 
JPEGFixupTagsSubßm∂ögRódByã
(
JPEGFixupTagsSubßm∂ögD©a
* 
d©a
, 
uöt8
* 
ªsu…
);

683 
JPEGFixupTagsSubßm∂ögRódW‹d
(
JPEGFixupTagsSubßm∂ögD©a
* 
d©a
, 
uöt16
* 
ªsu…
);

684 
JPEGFixupTagsSubßm∂ögSkù
(
JPEGFixupTagsSubßm∂ögD©a
* 
d©a
, 
uöt16
 
skùÀngth
);

689 
	$JPEGFixupTags
(
TIFF
* 
tif
)

691 #ifde‡
CHECK_JPEG_YCBCR_SUBSAMPLING


692 i‡((
tif
->
tif_dú
.
td_phŸomëric
==
PHOTOMETRIC_YCBCR
)&&

693 (
tif
->
tif_dú
.
td_∂™¨c⁄fig
==
PLANARCONFIG_CONTIG
)&&

694 (
tif
->
tif_dú
.
td_ßm∂e•îpixñ
==3))

695 
	`JPEGFixupTagsSubßm∂ög
(
tif
);

699 
	}
}

701 #ifde‡
CHECK_JPEG_YCBCR_SUBSAMPLING


704 
	$JPEGFixupTagsSubßm∂ög
(
TIFF
* 
tif
)

726 c⁄° 
moduÀ
[] = "JPEGFixupTagsSubsampling";

727 
JPEGFixupTagsSubßm∂ögD©a
 
m
;

729 
	`_TIFFFûlSåûes
–
tif
 );

731 if–
tif
->
tif_dú
.
td_°rùbyãcou¡
 =
NULL


732 || 
tif
->
tif_dú
.
td_°rùbyãcou¡
[0] == 0 )

740 
m
.
tif
=tif;

741 
m
.
buf„rsize
=2048;

742 
m
.
buf„r
=
	`_TIFFmÆloc
(m.
buf„rsize
);

743 i‡(
m
.
buf„r
==
NULL
)

745 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

749 
m
.
buf„rcuºítbyã
=
NULL
;

750 
m
.
buf„rbyã¶e·
=0;

751 
m
.
fûeoff£t
=
tif
->
tif_dú
.
td_°rùoff£t
[0];

752 
m
.
fûïosôi⁄ed
=0;

753 
m
.
fûebyã¶e·
=
tif
->
tif_dú
.
td_°rùbyãcou¡
[0];

754 i‡(!
	`JPEGFixupTagsSubßm∂ögSec
(&
m
))

755 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

757 
	`_TIFF‰ì
(
m
.
buf„r
);

758 
	}
}

761 
	$JPEGFixupTagsSubßm∂ögSec
(
JPEGFixupTagsSubßm∂ögD©a
* 
d©a
)

763 c⁄° 
moduÀ
[] = "JPEGFixupTagsSubsamplingSec";

764 
uöt8
 
m
;

769 i‡(!
	`JPEGFixupTagsSubßm∂ögRódByã
(
d©a
,&
m
))

771 i‡(
m
==255)

776 i‡(!
	`JPEGFixupTagsSubßm∂ögRódByã
(
d©a
,&
m
))

778 i‡(
m
!=255)

781 
m
)

783 
JPEG_MARKER_SOI
:

786 
JPEG_MARKER_COM
:

787 
JPEG_MARKER_APP0
:

788 
JPEG_MARKER_APP0
+1:

789 
JPEG_MARKER_APP0
+2:

790 
JPEG_MARKER_APP0
+3:

791 
JPEG_MARKER_APP0
+4:

792 
JPEG_MARKER_APP0
+5:

793 
JPEG_MARKER_APP0
+6:

794 
JPEG_MARKER_APP0
+7:

795 
JPEG_MARKER_APP0
+8:

796 
JPEG_MARKER_APP0
+9:

797 
JPEG_MARKER_APP0
+10:

798 
JPEG_MARKER_APP0
+11:

799 
JPEG_MARKER_APP0
+12:

800 
JPEG_MARKER_APP0
+13:

801 
JPEG_MARKER_APP0
+14:

802 
JPEG_MARKER_APP0
+15:

803 
JPEG_MARKER_DQT
:

804 
JPEG_MARKER_SOS
:

805 
JPEG_MARKER_DHT
:

806 
JPEG_MARKER_DRI
:

809 
uöt16
 
n
;

810 i‡(!
	`JPEGFixupTagsSubßm∂ögRódW‹d
(
d©a
,&
n
))

812 i‡(
n
<2)

814 
n
-=2;

815 i‡(
n
>0)

816 
	`JPEGFixupTagsSubßm∂ögSkù
(
d©a
,
n
);

819 
JPEG_MARKER_SOF0
:

820 
JPEG_MARKER_SOF1
:

823 
uöt16
 
n
;

824 
uöt16
 
o
;

825 
uöt8
 
p
;

826 
uöt8
 
ph
,
pv
;

827 i‡(!
	`JPEGFixupTagsSubßm∂ögRódW‹d
(
d©a
,&
n
))

829 i‡(
n
!=8+
d©a
->
tif
->
tif_dú
.
td_ßm∂e•îpixñ
*3)

831 
	`JPEGFixupTagsSubßm∂ögSkù
(
d©a
,7);

832 i‡(!
	`JPEGFixupTagsSubßm∂ögRódByã
(
d©a
,&
p
))

834 
ph
=(
p
>>4);

835 
pv
=(
p
&15);

836 
	`JPEGFixupTagsSubßm∂ögSkù
(
d©a
,1);

837 
o
=1; o<
d©a
->
tif
->
tif_dú
.
td_ßm∂e•îpixñ
; o++)

839 
	`JPEGFixupTagsSubßm∂ögSkù
(
d©a
,1);

840 i‡(!
	`JPEGFixupTagsSubßm∂ögRódByã
(
d©a
,&
p
))

842 i‡(
p
!=0x11)

844 
	`TIFFW¨nögExt
(
d©a
->
tif
->
tif_˛õ¡d©a
,
moduÀ
,

848 
	`JPEGFixupTagsSubßm∂ögSkù
(
d©a
,1);

850 i‡(((
ph
!=1)&&’h!=2)&&’h!=4))||((
pv
!=1)&&(pv!=2)&&(pv!=4)))

852 
	`TIFFW¨nögExt
(
d©a
->
tif
->
tif_˛õ¡d©a
,
moduÀ
,

856 i‡((
ph
!=
d©a
->
tif
->
tif_dú
.
td_ycb¸subßm∂ög
[0])||(
pv
!=data->tif->tif_dir.td_ycbcrsubsampling[1]))

858 
	`TIFFW¨nögExt
(
d©a
->
tif
->
tif_˛õ¡d©a
,
moduÀ
,

860 ()
d©a
->
tif
->
tif_dú
.
td_ycb¸subßm∂ög
[0],

861 ()
d©a
->
tif
->
tif_dú
.
td_ycb¸subßm∂ög
[1],

862 ()
ph
,()
pv
);

863 
d©a
->
tif
->
tif_dú
.
td_ycb¸subßm∂ög
[0]=
ph
;

864 
d©a
->
tif
->
tif_dú
.
td_ycb¸subßm∂ög
[1]=
pv
;

872 
	}
}

875 
	$JPEGFixupTagsSubßm∂ögRódByã
(
JPEGFixupTagsSubßm∂ögD©a
* 
d©a
, 
uöt8
* 
ªsu…
)

877 i‡(
d©a
->
buf„rbyã¶e·
==0)

879 
uöt32
 
m
;

880 i‡(
d©a
->
fûebyã¶e·
==0)

882 i‡(!
d©a
->
fûïosôi⁄ed
)

884 
	`TIFFSìkFûe
(
d©a
->
tif
,d©a->
fûeoff£t
,
SEEK_SET
);

885 
d©a
->
fûïosôi⁄ed
=1;

887 
m
=
d©a
->
buf„rsize
;

888 i‡((
uöt64
)
m
>
d©a
->
fûebyã¶e·
)

889 
m
=(
uöt32
)
d©a
->
fûebyã¶e·
;

890 
	`as£π
(
m
<0x80000000UL);

891 i‡(
	`TIFFRódFûe
(
d©a
->
tif
,d©a->
buf„r
,(
tmsize_t
)
m
)!=(tmsize_t)m)

893 
d©a
->
buf„rcuºítbyã
=d©a->
buf„r
;

894 
d©a
->
buf„rbyã¶e·
=
m
;

895 
d©a
->
fûeoff£t
+=
m
;

896 
d©a
->
fûebyã¶e·
-=
m
;

898 *
ªsu…
=*
d©a
->
buf„rcuºítbyã
;

899 
d©a
->
buf„rcuºítbyã
++;

900 
d©a
->
buf„rbyã¶e·
--;

902 
	}
}

905 
	$JPEGFixupTagsSubßm∂ögRódW‹d
(
JPEGFixupTagsSubßm∂ögD©a
* 
d©a
, 
uöt16
* 
ªsu…
)

907 
uöt8
 
ma
;

908 
uöt8
 
mb
;

909 i‡(!
	`JPEGFixupTagsSubßm∂ögRódByã
(
d©a
,&
ma
))

911 i‡(!
	`JPEGFixupTagsSubßm∂ögRódByã
(
d©a
,&
mb
))

913 *
ªsu…
=(
ma
<<8)|
mb
;

915 
	}
}

918 
	$JPEGFixupTagsSubßm∂ögSkù
(
JPEGFixupTagsSubßm∂ögD©a
* 
d©a
, 
uöt16
 
skùÀngth
)

920 i‡((
uöt32
)
skùÀngth
<=
d©a
->
buf„rbyã¶e·
)

922 
d©a
->
buf„rcuºítbyã
+=
skùÀngth
;

923 
d©a
->
buf„rbyã¶e·
-=
skùÀngth
;

927 
uöt16
 
m
;

928 
m
=
skùÀngth
-
d©a
->
buf„rbyã¶e·
;

929 i‡(
m
<=
d©a
->
fûebyã¶e·
)

931 
d©a
->
buf„rbyã¶e·
=0;

932 
d©a
->
fûeoff£t
+=
m
;

933 
d©a
->
fûebyã¶e·
-=
m
;

934 
d©a
->
fûïosôi⁄ed
=0;

938 
d©a
->
buf„rbyã¶e·
=0;

939 
d©a
->
fûebyã¶e·
=0;

942 
	}
}

948 
	$JPEGSëupDecode
(
TIFF
* 
tif
)

950 
JPEGSèã
* 
•
 = 
	`JSèã
(
tif
);

951 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

953 #i‡
	`deföed
(
JPEG_DUAL_MODE_8_12
Ë&& !deföed(
TIFFInôJPEG
)

954 if–
tif
->
tif_dú
.
td_bô•îßm∂e
 == 12 )

955  
	`TIFFReInôJPEG_12
–
tif
, 
COMPRESSION_JPEG
, 0 );

958 
	`JPEGInôülizeLibJPEG
–
tif
, 
TRUE
 );

960 
	`as£π
(
•
 !
NULL
);

961 
	`as£π
(
•
->
cöfo
.
comm
.
is_decom¥ess‹
);

964 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_JPEGTABLES
)) {

965 
	`TIFFj≥g_èbÀs_§c
(
•
, 
tif
);

966 if(
	`TIFFj≥g_ªad_hódî
(
•
,
FALSE
Ë!
JPEG_HEADER_TABLES_ONLY
) {

967 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "JPEGSetupDecode", "Bogus JPEGTables field");

973 
•
->
phŸomëric
 = 
td
->
td_phŸomëric
;

974 
•
->
phŸomëric
) {

975 
PHOTOMETRIC_YCBCR
:

976 
•
->
h_ßm∂ög
 = 
td
->
td_ycb¸subßm∂ög
[0];

977 
•
->
v_ßm∂ög
 = 
td
->
td_ycb¸subßm∂ög
[1];

981 
•
->
h_ßm∂ög
 = 1;

982 
•
->
v_ßm∂ög
 = 1;

987 
	`TIFFj≥g_d©a_§c
(
•
, 
tif
);

988 
tif
->
tif_po°decode
 = 
_TIFFNoPo°Decode
;

990 
	}
}

996 
	$JPEGPªDecode
(
TIFF
* 
tif
, 
uöt16
 
s
)

998 
JPEGSèã
 *
•
 = 
	`JSèã
(
tif
);

999 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

1000 c⁄° 
moduÀ
[] = "JPEGPreDecode";

1001 
uöt32
 
£gmít_width
, 
£gmít_height
;

1002 
downßm∂ed_ouçut
;

1003 
ci
;

1005 
	`as£π
(
•
 !
NULL
);

1007 i‡(
•
->
cöfo
.
comm
.
is_decom¥ess‹
 == 0)

1009 
tif
->
	`tif_£tupdecode
(Åif );

1012 
	`as£π
(
•
->
cöfo
.
comm
.
is_decom¥ess‹
);

1017 i‡(!
	`TIFFj≥g_ab‹t
(
•
))

1023 i‡(
	`TIFFj≥g_ªad_hódî
(
•
, 
TRUE
Ë!
JPEG_HEADER_OK
)

1026 
tif
->
tif_øw˝
 = (
uöt8
*Ë
•
->
§c
.
√xt_öput_byã
;

1027 
tif
->
tif_øwcc
 = 
•
->
§c
.
byãs_ö_buf„r
;

1032 
£gmít_width
 = 
td
->
td_imagewidth
;

1033 
£gmít_height
 = 
td
->
td_imagñígth
 - 
tif
->
tif_row
;

1034 i‡(
	`isTûed
(
tif
)) {

1035 
£gmít_width
 = 
td
->
td_tûewidth
;

1036 
£gmít_height
 = 
td
->
td_tûñígth
;

1037 
•
->
byã•îlöe
 = 
	`TIFFTûeRowSize
(
tif
);

1039 i‡(
£gmít_height
 > 
td
->
td_row•î°rù
)

1040 
£gmít_height
 = 
td
->
td_row•î°rù
;

1041 
•
->
byã•îlöe
 = 
	`TIFFSˇ∆öeSize
(
tif
);

1043 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
 && 
s
 > 0) {

1048 
£gmít_width
 = 
	`TIFFhowm™y_32
(£gmít_width, 
•
->
h_ßm∂ög
);

1049 
£gmít_height
 = 
	`TIFFhowm™y_32
(£gmít_height, 
•
->
v_ßm∂ög
);

1051 i‡(
•
->
cöfo
.
d
.
image_width
 < 
£gmít_width
 ||

1052 
•
->
cöfo
.
d
.
image_height
 < 
£gmít_height
) {

1053 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1056 
£gmít_width
, 
£gmít_height
,

1057 
•
->
cöfo
.
d
.
image_width
,

1058 
•
->
cöfo
.
d
.
image_height
);

1060 i‡(
•
->
cöfo
.
d
.
image_width
 > 
£gmít_width
 ||

1061 
•
->
cöfo
.
d
.
image_height
 > 
£gmít_height
) {

1068 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1071 
£gmít_width
, 
£gmít_height
,

1072 
•
->
cöfo
.
d
.
image_width
, sp->cöfo.d.
image_height
);

1075 i‡(
•
->
cöfo
.
d
.
num_comp⁄íts
 !=

1076 (
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
 ?

1077 
td
->
td_ßm∂e•îpixñ
 : 1)) {

1078 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Improper JPEG component count");

1081 #ifde‡
JPEG_LIB_MK1


1082 i‡(12 !
td
->
td_bô•îßm∂e
 && 8 !=Åd->td_bitspersample) {

1083 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Improper JPEG dataÖrecision");

1086 
•
->
cöfo
.
d
.
d©a_¥ecisi⁄
 = 
td
->
td_bô•îßm∂e
;

1087 
•
->
cöfo
.
d
.
bôs_ö_jßm∂e
 = 
td
->
td_bô•îßm∂e
;

1089 i‡(
•
->
cöfo
.
d
.
d©a_¥ecisi⁄
 !
td
->
td_bô•îßm∂e
) {

1090 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Improper JPEG dataÖrecision");

1094 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
) {

1096 i‡(
•
->
cöfo
.
d
.
comp_öfo
[0].
h_ßmp_Á˘‹
 !•->
h_ßm∂ög
 ||

1097 
•
->
cöfo
.
d
.
comp_öfo
[0].
v_ßmp_Á˘‹
 !•->
v_ßm∂ög
) {

1098 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1101 
•
->
cöfo
.
d
.
comp_öfo
[0].
h_ßmp_Á˘‹
,

1102 
•
->
cöfo
.
d
.
comp_öfo
[0].
v_ßmp_Á˘‹
,

1103 
•
->
h_ßm∂ög
, sp->
v_ßm∂ög
);

1112 i‡(
•
->
cöfo
.
d
.
comp_öfo
[0].
h_ßmp_Á˘‹


1113 > 
•
->
h_ßm∂ög


1114 || 
•
->
cöfo
.
d
.
comp_öfo
[0].
v_ßmp_Á˘‹


1115 > 
•
->
v_ßm∂ög
) {

1116 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,

1117 
moduÀ
,

1130 i‡(!
	`TIFFFödFõld
(
tif
, 33918, 
TIFF_ANY
)) {

1131 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1134 
•
->
cöfo
.
d
.
comp_öfo
[0].
h_ßmp_Á˘‹
,

1135 
•
->
cöfo
.
d
.
comp_öfo
[0].
v_ßmp_Á˘‹
);

1137 
•
->
h_ßm∂ög
 = (
uöt16
)

1138 
•
->
cöfo
.
d
.
comp_öfo
[0].
h_ßmp_Á˘‹
;

1139 
•
->
v_ßm∂ög
 = (
uöt16
)

1140 
•
->
cöfo
.
d
.
comp_öfo
[0].
v_ßmp_Á˘‹
;

1144 
ci
 = 1; cò< 
•
->
cöfo
.
d
.
num_comp⁄íts
; ci++) {

1145 i‡(
•
->
cöfo
.
d
.
comp_öfo
[
ci
].
h_ßmp_Á˘‹
 != 1 ||

1146 
•
->
cöfo
.
d
.
comp_öfo
[
ci
].
v_ßmp_Á˘‹
 != 1) {

1147 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Improper JPEG sampling factors");

1153 i‡(
•
->
cöfo
.
d
.
comp_öfo
[0].
h_ßmp_Á˘‹
 != 1 ||

1154 
•
->
cöfo
.
d
.
comp_öfo
[0].
v_ßmp_Á˘‹
 != 1) {

1155 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Improper JPEG sampling factors");

1159 
downßm∂ed_ouçut
 = 
FALSE
;

1160 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
 &&

1161 
•
->
phŸomëric
 =
PHOTOMETRIC_YCBCR
 &&

1162 
•
->
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
) {

1164 
•
->
cöfo
.
d
.
j≥g_cﬁ‹_•a˚
 = 
JCS_YCbCr
;

1165 
•
->
cöfo
.
d
.
out_cﬁ‹_•a˚
 = 
JCS_RGB
;

1168 
•
->
cöfo
.
d
.
j≥g_cﬁ‹_•a˚
 = 
JCS_UNKNOWN
;

1169 
•
->
cöfo
.
d
.
out_cﬁ‹_•a˚
 = 
JCS_UNKNOWN
;

1170 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
 &&

1171 (
•
->
h_ßm∂ög
 !1 || sp->
v_ßm∂ög
 != 1))

1172 
downßm∂ed_ouçut
 = 
TRUE
;

1175 i‡(
downßm∂ed_ouçut
) {

1177 
•
->
cöfo
.
d
.
øw_d©a_out
 = 
TRUE
;

1178 
tif
->
tif_decodîow
 = 
DecodeRowEº‹
;

1179 
tif
->
tif_decode°rù
 = 
JPEGDecodeRaw
;

1180 
tif
->
tif_decodëûe
 = 
JPEGDecodeRaw
;

1183 
•
->
cöfo
.
d
.
øw_d©a_out
 = 
FALSE
;

1184 
tif
->
tif_decodîow
 = 
JPEGDecode
;

1185 
tif
->
tif_decode°rù
 = 
JPEGDecode
;

1186 
tif
->
tif_decodëûe
 = 
JPEGDecode
;

1189 i‡(!
	`TIFFj≥g_°¨t_decom¥ess
(
•
))

1192 i‡(
downßm∂ed_ouçut
) {

1193 i‡(!
	`Æloc_downßm∂ed_buf„rs
(
tif
, 
•
->
cöfo
.
d
.
comp_öfo
,

1194 
•
->
cöfo
.
d
.
num_comp⁄íts
))

1196 
•
->
sˇncou¡
 = 
DCTSIZE
;

1199 
	}
}

1206 
	$JPEGDecode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

1208 
JPEGSèã
 *
•
 = 
	`JSèã
(
tif
);

1209 
tmsize_t
 
ƒows
;

1210 (Ë
s
;

1216 
•
->
§c
.
√xt_öput_byã
 = (c⁄° 
JOCTET
*Ë
tif
->
tif_øw˝
;

1217 
•
->
§c
.
byãs_ö_buf„r
 = (
size_t
Ë
tif
->
tif_øwcc
;

1219 if–
•
->
byã•îlöe
 == 0 )

1222 
ƒows
 = 
cc
 / 
•
->
byã•îlöe
;

1223 i‡(
cc
 % 
•
->
byã•îlöe
)

1224 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "fractional scanlineÇotÑead");

1226 if–
ƒows
 > (
tmsize_t
Ë
•
->
cöfo
.
d
.
image_height
 )

1227 
ƒows
 = 
•
->
cöfo
.
d
.
image_height
;

1230 i‡(
ƒows
)

1232 
JSAMPROW
 
löe_w‹k_buf
 = 
NULL
;

1238 #i‡!
	`deföed
(
JPEG_LIB_MK1
)

1239 if–
•
->
cöfo
.
d
.
d©a_¥ecisi⁄
 == 12 )

1242 
löe_w‹k_buf
 = (
JSAMPROW
)

1243 
	`_TIFFmÆloc
((Ë* 
•
->
cöfo
.
d
.
ouçut_width


1244 * 
•
->
cöfo
.
d
.
num_comp⁄íts
 );

1248 if–
löe_w‹k_buf
 !
NULL
 )

1255 i‡(
	`TIFFj≥g_ªad_sˇ∆öes
(
•
, &
löe_w‹k_buf
, 1) != 1)

1258 if–
•
->
cöfo
.
d
.
d©a_¥ecisi⁄
 == 12 )

1260 
vÆue_∑ús
 = (
•
->
cöfo
.
d
.
ouçut_width


1261 * 
•
->
cöfo
.
d
.
num_comp⁄íts
) / 2;

1262 
iPaú
;

1264  
iPaú
 = 0; iPaú < 
vÆue_∑ús
; iPair++ )

1266 *
out_±r
 =

1267 ((*Ë
buf
Ë+ 
iPaú
 * 3;

1268 
JSAMPLE
 *
ö_±r
 = 
löe_w‹k_buf
 + 
iPaú
 * 2;

1270 
out_±r
[0] = (
ö_±r
[0] & 0xff0) >> 4;

1271 
out_±r
[1] = ((
ö_±r
[0] & 0xf) << 4)

1272 | ((
ö_±r
[1] & 0xf00) >> 8);

1273 
out_±r
[2] = ((
ö_±r
[1] & 0xff) >> 0);

1276 if–
•
->
cöfo
.
d
.
d©a_¥ecisi⁄
 == 8 )

1278 
vÆue_cou¡
 = (
•
->
cöfo
.
d
.
ouçut_width


1279 * 
•
->
cöfo
.
d
.
num_comp⁄íts
);

1280 
iVÆue
;

1282  
iVÆue
 = 0; iVÆuê< 
vÆue_cou¡
; iValue++ )

1284 ((*Ë
buf
)[
iVÆue
] =

1285 
löe_w‹k_buf
[
iVÆue
] & 0xff;

1295 
JSAMPROW
 
buÂå
 = (JSAMPROW)
buf
;

1297 i‡(
	`TIFFj≥g_ªad_sˇ∆öes
(
•
, &
buÂå
, 1) != 1)

1301 ++
tif
->
tif_row
;

1302 
buf
 +
•
->
byã•îlöe
;

1303 
cc
 -
•
->
byã•îlöe
;

1304 } --
ƒows
 > 0);

1306 if–
löe_w‹k_buf
 !
NULL
 )

1307 
	`_TIFF‰ì
–
löe_w‹k_buf
 );

1311 
tif
->
tif_øw˝
 = (
uöt8
*Ë
•
->
§c
.
√xt_öput_byã
;

1312 
tif
->
tif_øwcc
 = 
•
->
§c
.
byãs_ö_buf„r
;

1315  
•
->
cöfo
.
d
.
ouçut_sˇ∆öe
 < sp->cöfo.d.
ouçut_height


1316 || 
	`TIFFj≥g_föish_decom¥ess
(
•
);

1317 
	}
}

1320 
	$DecodeRowEº‹
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

1323 (Ë
buf
;

1324 (Ë
cc
;

1325 (Ë
s
;

1327 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "TIFFReadScanline",

1330 
	}
}

1337 
	$JPEGDecodeRaw
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

1339 
JPEGSèã
 *
•
 = 
	`JSèã
(
tif
);

1340 
tmsize_t
 
ƒows
;

1341 (Ë
s
;

1344 i‡–(
ƒows
 = 
•
->
cöfo
.
d
.
image_height
) ) {

1347 
JDIMENSION
 
˛umps_≥r_löe
 = 
•
->
cöfo
.
d
.
comp_öfo
[1].
downßm∂ed_width
;

1348 
ßm∂es_≥r_˛ump
 = 
•
->
ßm∂e•î˛ump
;

1350 #i‡
	`deföed
(
JPEG_LIB_MK1_OR_12BIT
)

1351 * 
tmpbuf
 = 
	`_TIFFmÆloc
(() *

1352 
•
->
cöfo
.
d
.
ouçut_width
 *

1353 
•
->
cöfo
.
d
.
num_comp⁄íts
);

1354 if(
tmpbuf
==
NULL
) {

1355 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "JPEGDecodeRaw",

1362 
j≥g_comp⁄ít_öfo
 *
comµå
;

1363 
ci
, 
˛umpoff£t
;

1365 if–
cc
 < 
•
->
byã•îlöe
 * sp->
v_ßm∂ög
 ) {

1366 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "JPEGDecodeRaw",

1372 i‡(
•
->
sˇncou¡
 >
DCTSIZE
) {

1373 
n
 = 
•
->
cöfo
.
d
.
max_v_ßmp_Á˘‹
 * 
DCTSIZE
;

1374 i‡(
	`TIFFj≥g_ªad_øw_d©a
(
•
, sp->
ds_buf„r
, 
n
) !=Ç)

1376 
•
->
sˇncou¡
 = 0;

1382 
˛umpoff£t
 = 0;

1383 
ci
 = 0, 
comµå
 = 
•
->
cöfo
.
d
.
comp_öfo
;

1384 
ci
 < 
•
->
cöfo
.
d
.
num_comp⁄íts
;

1385 
ci
++, 
comµå
++) {

1386 
hßmp
 = 
comµå
->
h_ßmp_Á˘‹
;

1387 
vßmp
 = 
comµå
->
v_ßmp_Á˘‹
;

1388 
ypos
;

1390 
ypos
 = 0; ypo†< 
vßmp
; ypos++) {

1391 
JSAMPLE
 *
ö±r
 = 
•
->
ds_buf„r
[
ci
][•->
sˇncou¡
*
vßmp
 + 
ypos
];

1392 #i‡
	`deföed
(
JPEG_LIB_MK1_OR_12BIT
)

1393 
JSAMPLE
 *
ouçå
 = (JSAMPLE*)
tmpbuf
 + 
˛umpoff£t
;

1395 
JSAMPLE
 *
ouçå
 = (JSAMPLE*)
buf
 + 
˛umpoff£t
;

1397 
JDIMENSION
 
n˛ump
;

1399 i‡(
hßmp
 == 1) {

1401 
n˛ump
 = 
˛umps_≥r_löe
;Çclump-- > 0; ) {

1402 
ouçå
[0] = *
ö±r
++;

1403 
ouçå
 +
ßm∂es_≥r_˛ump
;

1406 
xpos
;

1409 
n˛ump
 = 
˛umps_≥r_löe
;Çclump-- > 0; ) {

1410 
xpos
 = 0; xpo†< 
hßmp
; xpos++)

1411 
ouçå
[
xpos
] = *
ö±r
++;

1412 
ouçå
 +
ßm∂es_≥r_˛ump
;

1415 
˛umpoff£t
 +
hßmp
;

1419 #i‡
	`deföed
(
JPEG_LIB_MK1_OR_12BIT
)

1421 i‡(
•
->
cöfo
.
d
.
d©a_¥ecisi⁄
 == 8)

1423 
i
=0;

1424 
Àn
 = 
•
->
cöfo
.
d
.
ouçut_width
 * sp->cöfo.d.
num_comp⁄íts
;

1425 
i
=0; i<
Àn
; i++)

1427 ((*)
buf
)[
i
] = 
tmpbuf
[i] & 0xff;

1432 
vÆue_∑ús
 = (
•
->
cöfo
.
d
.
ouçut_width


1433 * 
•
->
cöfo
.
d
.
num_comp⁄íts
) / 2;

1434 
iPaú
;

1435  
iPaú
 = 0; iPaú < 
vÆue_∑ús
; iPair++ )

1437 *
out_±r
 = ((*Ë
buf
Ë+ 
iPaú
 * 3;

1438 
JSAMPLE
 *
ö_±r
 = (JSAMPLE *Ë(
tmpbuf
 + 
iPaú
 * 2);

1439 
out_±r
[0] = (
ö_±r
[0] & 0xff0) >> 4;

1440 
out_±r
[1] = ((
ö_±r
[0] & 0xf) << 4)

1441 | ((
ö_±r
[1] & 0xf00) >> 8);

1442 
out_±r
[2] = ((
ö_±r
[1] & 0xff) >> 0);

1448 
•
->
sˇncou¡
 ++;

1449 
tif
->
tif_row
 +
•
->
v_ßm∂ög
;

1454 
buf
 +
•
->
byã•îlöe
 * sp->
v_ßm∂ög
;

1455 
cc
 -
•
->
byã•îlöe
 * sp->
v_ßm∂ög
;

1457 
ƒows
 -
•
->
v_ßm∂ög
;

1458 } 
ƒows
 > 0);

1460 #i‡
	`deföed
(
JPEG_LIB_MK1_OR_12BIT
)

1461 
	`_TIFF‰ì
(
tmpbuf
);

1467  
•
->
cöfo
.
d
.
ouçut_sˇ∆öe
 < sp->cöfo.d.
ouçut_height


1468 || 
	`TIFFj≥g_föish_decom¥ess
(
•
);

1469 
	}
}

1477 
	$unsuµªss_qu™t_èbÀ
 (
JPEGSèã
* 
•
, 
tb o
)

1479 
JQUANT_TBL
* 
qtbl
;

1481 i‡((
qtbl
 = 
•
->
cöfo
.
c
.
qu™t_tbl_±rs
[
tb o
]Ë!
NULL
)

1482 
qtbl
->
£¡_èbÀ
 = 
FALSE
;

1483 
	}
}

1486 
	$unsuµªss_huff_èbÀ
 (
JPEGSèã
* 
•
, 
tb o
)

1488 
JHUFF_TBL
* 
htbl
;

1490 i‡((
htbl
 = 
•
->
cöfo
.
c
.
dc_huff_tbl_±rs
[
tb o
]Ë!
NULL
)

1491 
htbl
->
£¡_èbÀ
 = 
FALSE
;

1492 i‡((
htbl
 = 
•
->
cöfo
.
c
.
ac_huff_tbl_±rs
[
tb o
]Ë!
NULL
)

1493 
htbl
->
£¡_èbÀ
 = 
FALSE
;

1494 
	}
}

1497 
	$¥ï¨e_JPEGTabÀs
(
TIFF
* 
tif
)

1499 
JPEGSèã
* 
•
 = 
	`JSèã
(
tif
);

1502 i‡(!
	`TIFFj≥g_£t_quÆôy
(
•
, sp->
j≥gquÆôy
, 
FALSE
))

1506 i‡(!
	`TIFFj≥g_suµªss_èbÀs
(
•
, 
TRUE
))

1508 i‡(
•
->
j≥gèbÀsmode
 & 
JPEGTABLESMODE_QUANT
) {

1509 
	`unsuµªss_qu™t_èbÀ
(
•
, 0);

1510 i‡(
•
->
phŸomëric
 =
PHOTOMETRIC_YCBCR
)

1511 
	`unsuµªss_qu™t_èbÀ
(
•
, 1);

1513 i‡(
•
->
j≥gèbÀsmode
 & 
JPEGTABLESMODE_HUFF
) {

1514 
	`unsuµªss_huff_èbÀ
(
•
, 0);

1515 i‡(
•
->
phŸomëric
 =
PHOTOMETRIC_YCBCR
)

1516 
	`unsuµªss_huff_èbÀ
(
•
, 1);

1519 i‡(!
	`TIFFj≥g_èbÀs_de°
(
•
, 
tif
))

1522 i‡(!
	`TIFFj≥g_wrôe_èbÀs
(
•
))

1526 
	}
}

1529 
	$JPEGSëupEncode
(
TIFF
* 
tif
)

1531 
JPEGSèã
* 
•
 = 
	`JSèã
(
tif
);

1532 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

1533 c⁄° 
moduÀ
[] = "JPEGSetupEncode";

1535 #i‡
	`deföed
(
JPEG_DUAL_MODE_8_12
Ë&& !deföed(
TIFFInôJPEG
)

1536 if–
tif
->
tif_dú
.
td_bô•îßm∂e
 == 12 )

1537  
	`TIFFReInôJPEG_12
–
tif
, 
COMPRESSION_JPEG
, 1 );

1540 
	`JPEGInôülizeLibJPEG
–
tif
, 
FALSE
 );

1542 
	`as£π
(
•
 !
NULL
);

1543 
	`as£π
(!
•
->
cöfo
.
comm
.
is_decom¥ess‹
);

1550 
•
->
cöfo
.
c
.
ö_cﬁ‹_•a˚
 = 
JCS_UNKNOWN
;

1551 
•
->
cöfo
.
c
.
öput_comp⁄íts
 = 1;

1552 i‡(!
	`TIFFj≥g_£t_deÁu…s
(
•
))

1555 
•
->
phŸomëric
 = 
td
->
td_phŸomëric
;

1556 
•
->
phŸomëric
) {

1557 
PHOTOMETRIC_YCBCR
:

1558 
•
->
h_ßm∂ög
 = 
td
->
td_ycb¸subßm∂ög
[0];

1559 
•
->
v_ßm∂ög
 = 
td
->
td_ycb¸subßm∂ög
[1];

1566 *
ªf
;

1567 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_REFERENCEBLACKWHITE
,

1568 &
ªf
)) {

1569 
ªfbw
[6];

1570 
t›
 = 1L << 
td
->
td_bô•îßm∂e
;

1571 
ªfbw
[0] = 0;

1572 
ªfbw
[1] = ()(
t›
-1L);

1573 
ªfbw
[2] = ()(
t›
>>1);

1574 
ªfbw
[3] =Ñefbw[1];

1575 
ªfbw
[4] =Ñefbw[2];

1576 
ªfbw
[5] =Ñefbw[1];

1577 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_REFERENCEBLACKWHITE
,

1578 
ªfbw
);

1582 
PHOTOMETRIC_PALETTE
:

1583 
PHOTOMETRIC_MASK
:

1584 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1586 (Ë
•
->
phŸomëric
);

1590 
•
->
h_ßm∂ög
 = 1;

1591 
•
->
v_ßm∂ög
 = 1;

1602 #ifde‡
JPEG_LIB_MK1


1604 i‡(
td
->
td_bô•îßm∂e
 != 8 &&Åd->td_bitspersample != 12)

1606 i‡(
td
->
td_bô•îßm∂e
 !
BITS_IN_JSAMPLE
 )

1609 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "BitsPerSample %dÇotállowed for JPEG",

1610 (Ë
td
->
td_bô•îßm∂e
);

1613 
•
->
cöfo
.
c
.
d©a_¥ecisi⁄
 = 
td
->
td_bô•îßm∂e
;

1614 #ifde‡
JPEG_LIB_MK1


1615 
•
->
cöfo
.
c
.
bôs_ö_jßm∂e
 = 
td
->
td_bô•îßm∂e
;

1617 i‡(
	`isTûed
(
tif
)) {

1618 i‡((
td
->
td_tûñígth
 % (
•
->
v_ßm∂ög
 * 
DCTSIZE
)) != 0) {

1619 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1621 
•
->
v_ßm∂ög
 * 
DCTSIZE
);

1624 i‡((
td
->
td_tûewidth
 % (
•
->
h_ßm∂ög
 * 
DCTSIZE
)) != 0) {

1625 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1627 
•
->
h_ßm∂ög
 * 
DCTSIZE
);

1631 i‡(
td
->
td_row•î°rù
 <Åd->
td_imagñígth
 &&

1632 (
td
->
td_row•î°rù
 % (
•
->
v_ßm∂ög
 * 
DCTSIZE
)) != 0) {

1633 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1635 
•
->
v_ßm∂ög
 * 
DCTSIZE
);

1641 i‡(
•
->
j≥gèbÀsmode
 & (
JPEGTABLESMODE_QUANT
|
JPEGTABLESMODE_HUFF
)) {

1642 if–
•
->
j≥gèbÀs
 =
NULL


1643 || 
	`memcmp
(
•
->
j≥gèbÀs
,"\0\0\0\0\0\0\0\0\0",8) == 0 )

1645 i‡(!
	`¥ï¨e_JPEGTabÀs
(
tif
))

1649 
tif
->
tif_Êags
 |
TIFF_DIRTYDIRECT
;

1650 
	`TIFFSëFõldBô
(
tif
, 
FIELD_JPEGTABLES
);

1655 
	`TIFFCÃFõldBô
(
tif
, 
FIELD_JPEGTABLES
);

1659 
	`TIFFj≥g_d©a_de°
(
•
, 
tif
);

1662 
	}
}

1668 
	$JPEGPªEncode
(
TIFF
* 
tif
, 
uöt16
 
s
)

1670 
JPEGSèã
 *
•
 = 
	`JSèã
(
tif
);

1671 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

1672 c⁄° 
moduÀ
[] = "JPEGPreEncode";

1673 
uöt32
 
£gmít_width
, 
£gmít_height
;

1674 
downßm∂ed_öput
;

1676 
	`as£π
(
•
 !
NULL
);

1678 i‡(
•
->
cöfo
.
comm
.
is_decom¥ess‹
 == 1)

1680 
tif
->
	`tif_£tu≥ncode
(Åif );

1683 
	`as£π
(!
•
->
cöfo
.
comm
.
is_decom¥ess‹
);

1687 i‡(
	`isTûed
(
tif
)) {

1688 
£gmít_width
 = 
td
->
td_tûewidth
;

1689 
£gmít_height
 = 
td
->
td_tûñígth
;

1690 
•
->
byã•îlöe
 = 
	`TIFFTûeRowSize
(
tif
);

1692 
£gmít_width
 = 
td
->
td_imagewidth
;

1693 
£gmít_height
 = 
td
->
td_imagñígth
 - 
tif
->
tif_row
;

1694 i‡(
£gmít_height
 > 
td
->
td_row•î°rù
)

1695 
£gmít_height
 = 
td
->
td_row•î°rù
;

1696 
•
->
byã•îlöe
 = 
	`TIFFSˇ∆öeSize
(
tif
);

1698 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
 && 
s
 > 0) {

1702 
£gmít_width
 = 
	`TIFFhowm™y_32
(£gmít_width, 
•
->
h_ßm∂ög
);

1703 
£gmít_height
 = 
	`TIFFhowm™y_32
(£gmít_height, 
•
->
v_ßm∂ög
);

1705 i‡(
£gmít_width
 > 65535 || 
£gmít_height
 > 65535) {

1706 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Strip/tileÅooÜarge for JPEG");

1709 
•
->
cöfo
.
c
.
image_width
 = 
£gmít_width
;

1710 
•
->
cöfo
.
c
.
image_height
 = 
£gmít_height
;

1711 
downßm∂ed_öput
 = 
FALSE
;

1712 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
) {

1713 
•
->
cöfo
.
c
.
öput_comp⁄íts
 = 
td
->
td_ßm∂e•îpixñ
;

1714 i‡(
•
->
phŸomëric
 =
PHOTOMETRIC_YCBCR
) {

1715 i‡(
•
->
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
) {

1716 
•
->
cöfo
.
c
.
ö_cﬁ‹_•a˚
 = 
JCS_RGB
;

1718 
•
->
cöfo
.
c
.
ö_cﬁ‹_•a˚
 = 
JCS_YCbCr
;

1719 i‡(
•
->
h_ßm∂ög
 !1 || sp->
v_ßm∂ög
 != 1)

1720 
downßm∂ed_öput
 = 
TRUE
;

1722 i‡(!
	`TIFFj≥g_£t_cﬁ‹•a˚
(
•
, 
JCS_YCbCr
))

1728 
•
->
cöfo
.
c
.
comp_öfo
[0].
h_ßmp_Á˘‹
 = sp->
h_ßm∂ög
;

1729 
•
->
cöfo
.
c
.
comp_öfo
[0].
v_ßmp_Á˘‹
 = sp->
v_ßm∂ög
;

1731 i‡((
td
->
td_phŸomëric
 =
PHOTOMETRIC_MINISWHITE
 ||Åd->td_phŸomëri¯=
PHOTOMETRIC_MINISBLACK
Ë&&Åd->
td_ßm∂e•îpixñ
 == 1)

1732 
•
->
cöfo
.
c
.
ö_cﬁ‹_•a˚
 = 
JCS_GRAYSCALE
;

1733 i‡(
td
->
td_phŸomëric
 =
PHOTOMETRIC_RGB
)

1734 
•
->
cöfo
.
c
.
ö_cﬁ‹_•a˚
 = 
JCS_RGB
;

1735 i‡(
td
->
td_phŸomëric
 =
PHOTOMETRIC_SEPARATED
 &&Åd->
td_ßm∂e•îpixñ
 == 4)

1736 
•
->
cöfo
.
c
.
ö_cﬁ‹_•a˚
 = 
JCS_CMYK
;

1738 
•
->
cöfo
.
c
.
ö_cﬁ‹_•a˚
 = 
JCS_UNKNOWN
;

1739 i‡(!
	`TIFFj≥g_£t_cﬁ‹•a˚
(
•
, sp->
cöfo
.
c
.
ö_cﬁ‹_•a˚
))

1744 
•
->
cöfo
.
c
.
öput_comp⁄íts
 = 1;

1745 
•
->
cöfo
.
c
.
ö_cﬁ‹_•a˚
 = 
JCS_UNKNOWN
;

1746 i‡(!
	`TIFFj≥g_£t_cﬁ‹•a˚
(
•
, 
JCS_UNKNOWN
))

1748 
•
->
cöfo
.
c
.
comp_öfo
[0].
comp⁄ít_id
 = 
s
;

1750 i‡(
•
->
phŸomëric
 =
PHOTOMETRIC_YCBCR
 && 
s
 > 0) {

1751 
•
->
cöfo
.
c
.
comp_öfo
[0].
qu™t_tbl_no
 = 1;

1752 
•
->
cöfo
.
c
.
comp_öfo
[0].
dc_tbl_no
 = 1;

1753 
•
->
cöfo
.
c
.
comp_öfo
[0].
ac_tbl_no
 = 1;

1757 
•
->
cöfo
.
c
.
wrôe_JFIF_hódî
 = 
FALSE
;

1758 
•
->
cöfo
.
c
.
wrôe_Adobe_m¨kî
 = 
FALSE
;

1760 i‡(!
	`TIFFj≥g_£t_quÆôy
(
•
, sp->
j≥gquÆôy
, 
FALSE
))

1762 i‡(! (
•
->
j≥gèbÀsmode
 & 
JPEGTABLESMODE_QUANT
)) {

1763 
	`unsuµªss_qu™t_èbÀ
(
•
, 0);

1764 
	`unsuµªss_qu™t_èbÀ
(
•
, 1);

1766 i‡(
•
->
j≥gèbÀsmode
 & 
JPEGTABLESMODE_HUFF
)

1767 
•
->
cöfo
.
c
.
›timize_codög
 = 
FALSE
;

1769 
•
->
cöfo
.
c
.
›timize_codög
 = 
TRUE
;

1770 i‡(
downßm∂ed_öput
) {

1772 
•
->
cöfo
.
c
.
øw_d©a_ö
 = 
TRUE
;

1773 
tif
->
tif_ícodîow
 = 
JPEGEncodeRaw
;

1774 
tif
->
tif_ícode°rù
 = 
JPEGEncodeRaw
;

1775 
tif
->
tif_ícodëûe
 = 
JPEGEncodeRaw
;

1778 
•
->
cöfo
.
c
.
øw_d©a_ö
 = 
FALSE
;

1779 
tif
->
tif_ícodîow
 = 
JPEGEncode
;

1780 
tif
->
tif_ícode°rù
 = 
JPEGEncode
;

1781 
tif
->
tif_ícodëûe
 = 
JPEGEncode
;

1784 i‡(!
	`TIFFj≥g_°¨t_com¥ess
(
•
, 
FALSE
))

1787 i‡(
downßm∂ed_öput
) {

1788 i‡(!
	`Æloc_downßm∂ed_buf„rs
(
tif
, 
•
->
cöfo
.
c
.
comp_öfo
,

1789 
•
->
cöfo
.
c
.
num_comp⁄íts
))

1792 
•
->
sˇncou¡
 = 0;

1795 
	}
}

1802 
	$JPEGEncode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

1804 
JPEGSèã
 *
•
 = 
	`JSèã
(
tif
);

1805 
tmsize_t
 
ƒows
;

1806 
JSAMPROW
 
buÂå
[1];

1807 *
löe16
 = 
NULL
;

1808 
löe16_cou¡
 = 0;

1810 (Ë
s
;

1811 
	`as£π
(
•
 !
NULL
);

1813 
ƒows
 = 
cc
 / 
•
->
byã•îlöe
;

1814 i‡(
cc
 % 
•
->
byã•îlöe
)

1815 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

1819 if–!
	`isTûed
(
tif
Ë&&Åif->
tif_row
+
ƒows
 >Åif->
tif_dú
.
td_imagñígth
 )

1820 
ƒows
 = 
tif
->
tif_dú
.
td_imagñígth
 -Åif->
tif_row
;

1822 if–
•
->
cöfo
.
c
.
d©a_¥ecisi⁄
 == 12 )

1824 
löe16_cou¡
 = (
•
->
byã•îlöe
 * 2) / 3;

1825 
löe16
 = (*Ë
	`_TIFFmÆloc
((Ë* 
löe16_cou¡
);

1829 
ƒows
-- > 0) {

1831 if–
•
->
cöfo
.
c
.
d©a_¥ecisi⁄
 == 12 )

1834 
vÆue_∑ús
 = 
löe16_cou¡
 / 2;

1835 
iPaú
;

1837 
buÂå
[0] = (
JSAMPROW
Ë
löe16
;

1839  
iPaú
 = 0; iPaú < 
vÆue_∑ús
; iPair++ )

1841 *
ö_±r
 =

1842 ((*Ë
buf
Ë+ 
iPaú
 * 3;

1843 
JSAMPLE
 *
out_±r
 = (JSAMPLE *Ë(
löe16
 + 
iPaú
 * 2);

1845 
out_±r
[0] = (
ö_±r
[0] << 4) | ((in_ptr[1] & 0xf0) >> 4);

1846 
out_±r
[1] = ((
ö_±r
[1] & 0x0f) << 8) | in_ptr[2];

1851 
buÂå
[0] = (
JSAMPROW
Ë
buf
;

1853 i‡(
	`TIFFj≥g_wrôe_sˇ∆öes
(
•
, 
buÂå
, 1) != 1)

1855 i‡(
ƒows
 > 0)

1856 
tif
->
tif_row
++;

1857 
buf
 +
•
->
byã•îlöe
;

1860 if–
•
->
cöfo
.
c
.
d©a_¥ecisi⁄
 == 12 )

1862 
	`_TIFF‰ì
–
löe16
 );

1866 
	}
}

1873 
	$JPEGEncodeRaw
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

1875 
JPEGSèã
 *
•
 = 
	`JSèã
(
tif
);

1876 
JSAMPLE
* 
ö±r
;

1877 
JSAMPLE
* 
ouçå
;

1878 
tmsize_t
 
ƒows
;

1879 
JDIMENSION
 
˛umps_≥r_löe
, 
n˛ump
;

1880 
˛umpoff£t
, 
ci
, 
xpos
, 
ypos
;

1881 
j≥g_comp⁄ít_öfo
* 
comµå
;

1882 
ßm∂es_≥r_˛ump
 = 
•
->
ßm∂e•î˛ump
;

1883 
tmsize_t
 
byã•î˛um∂öe
;

1885 (Ë
s
;

1886 
	`as£π
(
•
 !
NULL
);

1890 
byã•î˛um∂öe
 = (((
•
->
cöfo
.
c
.
image_width
+•->
h_ßm∂ög
-1)/sp->h_sampling)

1891 *(
•
->
h_ßm∂ög
*•->
v_ßm∂ög
+2)*•->
cöfo
.
c
.
d©a_¥ecisi⁄
+7)

1894 
ƒows
 = ( 
cc
 / 
byã•î˛um∂öe
 ) * 
•
->
v_ßm∂ög
;

1895 i‡(
cc
 % 
byã•î˛um∂öe
)

1896 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "fractional scanline discarded");

1899 
˛umps_≥r_löe
 = 
•
->
cöfo
.
c
.
comp_öfo
[1].
downßm∂ed_width
;

1901 
ƒows
 > 0) {

1906 
˛umpoff£t
 = 0;

1907 
ci
 = 0, 
comµå
 = 
•
->
cöfo
.
c
.
comp_öfo
;

1908 
ci
 < 
•
->
cöfo
.
c
.
num_comp⁄íts
;

1909 
ci
++, 
comµå
++) {

1910 
hßmp
 = 
comµå
->
h_ßmp_Á˘‹
;

1911 
vßmp
 = 
comµå
->
v_ßmp_Á˘‹
;

1912 
∑ddög
 = (Ë(
comµå
->
width_ö_blocks
 * 
DCTSIZE
 -

1913 
˛umps_≥r_löe
 * 
hßmp
);

1914 
ypos
 = 0; ypo†< 
vßmp
; ypos++) {

1915 
ö±r
 = ((
JSAMPLE
*Ë
buf
Ë+ 
˛umpoff£t
;

1916 
ouçå
 = 
•
->
ds_buf„r
[
ci
][•->
sˇncou¡
*
vßmp
 + 
ypos
];

1917 i‡(
hßmp
 == 1) {

1919 
n˛ump
 = 
˛umps_≥r_löe
;Çclump-- > 0; ) {

1920 *
ouçå
++ = 
ö±r
[0];

1921 
ö±r
 +
ßm∂es_≥r_˛ump
;

1925 
n˛ump
 = 
˛umps_≥r_löe
;Çclump-- > 0; ) {

1926 
xpos
 = 0; xpo†< 
hßmp
; xpos++)

1927 *
ouçå
++ = 
ö±r
[
xpos
];

1928 
ö±r
 +
ßm∂es_≥r_˛ump
;

1932 
xpos
 = 0; xpo†< 
∑ddög
; xpos++) {

1933 *
ouçå
 = outptr[-1];

1934 
ouçå
++;

1936 
˛umpoff£t
 +
hßmp
;

1939 
•
->
sˇncou¡
++;

1940 i‡(
•
->
sˇncou¡
 >
DCTSIZE
) {

1941 
n
 = 
•
->
cöfo
.
c
.
max_v_ßmp_Á˘‹
 * 
DCTSIZE
;

1942 i‡(
	`TIFFj≥g_wrôe_øw_d©a
(
•
, sp->
ds_buf„r
, 
n
) !=Ç)

1944 
•
->
sˇncou¡
 = 0;

1946 
tif
->
tif_row
 +
•
->
v_ßm∂ög
;

1947 
buf
 +
byã•î˛um∂öe
;

1948 
ƒows
 -
•
->
v_ßm∂ög
;

1951 
	}
}

1957 
	$JPEGPo°Encode
(
TIFF
* 
tif
)

1959 
JPEGSèã
 *
•
 = 
	`JSèã
(
tif
);

1961 i‡(
•
->
sˇncou¡
 > 0) {

1966 
ci
, 
ypos
, 
n
;

1967 
j≥g_comp⁄ít_öfo
* 
comµå
;

1969 
ci
 = 0, 
comµå
 = 
•
->
cöfo
.
c
.
comp_öfo
;

1970 
ci
 < 
•
->
cöfo
.
c
.
num_comp⁄íts
;

1971 
ci
++, 
comµå
++) {

1972 
vßmp
 = 
comµå
->
v_ßmp_Á˘‹
;

1973 
tmsize_t
 
row_width
 = 
comµå
->
width_ö_blocks
 * 
DCTSIZE


1974 * (
JSAMPLE
);

1975 
ypos
 = 
•
->
sˇncou¡
 * 
vßmp
;

1976 
ypos
 < 
DCTSIZE
 * 
vßmp
; ypos++) {

1977 
	`_TIFFmem˝y
((*)
•
->
ds_buf„r
[
ci
][
ypos
],

1978 (*)
•
->
ds_buf„r
[
ci
][
ypos
-1],

1979 
row_width
);

1983 
n
 = 
•
->
cöfo
.
c
.
max_v_ßmp_Á˘‹
 * 
DCTSIZE
;

1984 i‡(
	`TIFFj≥g_wrôe_øw_d©a
(
•
, sp->
ds_buf„r
, 
n
) !=Ç)

1988  (
	`TIFFj≥g_föish_com¥ess
(
	`JSèã
(
tif
)));

1989 
	}
}

1992 
	$JPEGCÀ™up
(
TIFF
* 
tif
)

1994 
JPEGSèã
 *
•
 = 
	`JSèã
(
tif
);

1996 
	`as£π
(
•
 != 0);

1998 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
•
->
vgë∑ª¡
;

1999 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
•
->
v£ç¨ít
;

2000 
tif
->
tif_ègmëhods
.
¥ötdú
 = 
•
->printdir;

2002 if–
•
 !
NULL
 ) {

2003 if–
•
->
cöfo_öôülized
 )

2004 
	`TIFFj≥g_de°roy
(
•
);

2005 i‡(
•
->
j≥gèbÀs
)

2006 
	`_TIFF‰ì
(
•
->
j≥gèbÀs
);

2008 
	`_TIFF‰ì
(
tif
->
tif_d©a
);

2009 
tif
->
tif_d©a
 = 
NULL
;

2011 
	`_TIFFSëDeÁu…Com¥essi⁄Sèã
(
tif
);

2012 
	}
}

2015 
	$JPEGRe£tUpßm∂ed
–
TIFF
* 
tif
 )

2017 
JPEGSèã
* 
•
 = 
	`JSèã
(
tif
);

2018 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

2025 
tif
->
tif_Êags
 &~
TIFF_UPSAMPLED
;

2026 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
) {

2027 i‡(
td
->
td_phŸomëric
 =
PHOTOMETRIC_YCBCR
 &&

2028 
•
->
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
) {

2029 
tif
->
tif_Êags
 |
TIFF_UPSAMPLED
;

2031 #ifde‡
nŸdef


2032 i‡(
td
->
td_ycb¸subßm∂ög
[0] != 1 ||

2033 
td
->
td_ycb¸subßm∂ög
[1] != 1)

2043 if–
tif
->
tif_tûesize
 > 0 )

2044 
tif
->
tif_tûesize
 = 
	`isTûed
—ifË? 
	`TIFFTûeSize
—ifË: (
tmsize_t
)(-1);

2045 if–
tif
->
tif_sˇ∆öesize
 > 0 )

2046 
tif
->
tif_sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(tif);

2047 
	}
}

2050 
	$JPEGVSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

2052 
JPEGSèã
* 
•
 = 
	`JSèã
(
tif
);

2053 c⁄° 
TIFFFõld
* 
fù
;

2054 
uöt32
 
v32
;

2056 
	`as£π
(
•
 !
NULL
);

2058 
èg
) {

2059 
TIFFTAG_JPEGTABLES
:

2060 
v32
 = (
uöt32
Ë
	`va_¨g
(
≠
, uint32);

2061 i‡(
v32
 == 0) {

2065 
	`_TIFF£tByãAºay
(&
•
->
j≥gèbÀs
, 
	`va_¨g
(
≠
, *),

2066 (Ë
v32
);

2067 
•
->
j≥gèbÀs_Àngth
 = 
v32
;

2068 
	`TIFFSëFõldBô
(
tif
, 
FIELD_JPEGTABLES
);

2070 
TIFFTAG_JPEGQUALITY
:

2071 
•
->
j≥gquÆôy
 = (Ë
	`va_¨g
(
≠
, );

2073 
TIFFTAG_JPEGCOLORMODE
:

2074 
•
->
j≥gcﬁ‹mode
 = (Ë
	`va_¨g
(
≠
, );

2075 
	`JPEGRe£tUpßm∂ed
–
tif
 );

2077 
TIFFTAG_PHOTOMETRIC
:

2079 
ªt_vÆue
 = (*
•
->
v£ç¨ít
)(
tif
, 
èg
, 
≠
);

2080 
	`JPEGRe£tUpßm∂ed
–
tif
 );

2081  
ªt_vÆue
;

2083 
TIFFTAG_JPEGTABLESMODE
:

2084 
•
->
j≥gèbÀsmode
 = (Ë
	`va_¨g
(
≠
, );

2086 
TIFFTAG_YCBCRSUBSAMPLING
:

2088 
•
->
ycb¸ßm∂ög_„tched
 = 1;

2090  (*
•
->
v£ç¨ít
)(
tif
, 
èg
, 
≠
);

2092  (*
•
->
v£ç¨ít
)(
tif
, 
èg
, 
≠
);

2095 i‡((
fù
 = 
	`TIFFFõldWôhTag
(
tif
, 
èg
))) {

2096 
	`TIFFSëFõldBô
(
tif
, 
fù
->
fõld_bô
);

2101 
tif
->
tif_Êags
 |
TIFF_DIRTYDIRECT
;

2103 
	}
}

2106 
	$JPEGVGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

2108 
JPEGSèã
* 
•
 = 
	`JSèã
(
tif
);

2110 
	`as£π
(
•
 !
NULL
);

2112 
èg
) {

2113 
TIFFTAG_JPEGTABLES
:

2114 *
	`va_¨g
(
≠
, 
uöt32
*Ë
•
->
j≥gèbÀs_Àngth
;

2115 *
	`va_¨g
(
≠
, **Ë
•
->
j≥gèbÀs
;

2117 
TIFFTAG_JPEGQUALITY
:

2118 *
	`va_¨g
(
≠
, *Ë
•
->
j≥gquÆôy
;

2120 
TIFFTAG_JPEGCOLORMODE
:

2121 *
	`va_¨g
(
≠
, *Ë
•
->
j≥gcﬁ‹mode
;

2123 
TIFFTAG_JPEGTABLESMODE
:

2124 *
	`va_¨g
(
≠
, *Ë
•
->
j≥gèbÀsmode
;

2127  (*
•
->
vgë∑ª¡
)(
tif
, 
èg
, 
≠
);

2130 
	}
}

2133 
	$JPEGPrötDú
(
TIFF
* 
tif
, 
FILE
* 
fd
, 
Êags
)

2135 
JPEGSèã
* 
•
 = 
	`JSèã
(
tif
);

2137 
	`as£π
(
•
 !
NULL
);

2138 (Ë
Êags
;

2140 if–
•
 !
NULL
 ) {

2141 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_JPEGTABLES
))

2142 
	`Ârötf
(
fd
, " JPEG Tables: (%lu bytes)\n",

2143 (Ë
•
->
j≥gèbÀs_Àngth
);

2144 i‡(
•
->
¥ötdú
)

2145 (*
•
->
¥ötdú
)(
tif
, 
fd
, 
Êags
);

2147 
	}
}

2149 
uöt32


2150 
	$JPEGDeÁu…SåùSize
(
TIFF
* 
tif
, 
uöt32
 
s
)

2152 
JPEGSèã
* 
•
 = 
	`JSèã
(
tif
);

2153 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

2155 
s
 = (*
•
->
def•¨ít
)(
tif
, s);

2156 i‡(
s
 < 
td
->
td_imagñígth
)

2157 
s
 = 
	`TIFFroundup_32
(s, 
td
->
td_ycb¸subßm∂ög
[1] * 
DCTSIZE
);

2158  (
s
);

2159 
	}
}

2162 
	$JPEGDeÁu…TûeSize
(
TIFF
* 
tif
, 
uöt32
* 
tw
, uöt32* 
th
)

2164 
JPEGSèã
* 
•
 = 
	`JSèã
(
tif
);

2165 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

2167 (*
•
->
de·∑ª¡
)(
tif
, 
tw
, 
th
);

2168 *
tw
 = 
	`TIFFroundup_32
(*tw, 
td
->
td_ycb¸subßm∂ög
[0] * 
DCTSIZE
);

2169 *
th
 = 
	`TIFFroundup_32
(*th, 
td
->
td_ycb¸subßm∂ög
[1] * 
DCTSIZE
);

2170 
	}
}

2194 
	$JPEGInôülizeLibJPEG
–
TIFF
 * 
tif
, 
decom¥ess
 )

2196 
JPEGSèã
* 
•
 = 
	`JSèã
(
tif
);

2198 if(
•
->
cöfo_öôülized
)

2200 if–!
decom¥ess
 && 
•
->
cöfo
.
comm
.
is_decom¥ess‹
 )

2201 
	`TIFFj≥g_de°roy
–
•
 );

2202 if–
decom¥ess
 && !
•
->
cöfo
.
comm
.
is_decom¥ess‹
 )

2203 
	`TIFFj≥g_de°roy
–
•
 );

2207 
•
->
cöfo_öôülized
 = 0;

2213 i‡–
decom¥ess
 ) {

2214 i‡(!
	`TIFFj≥g_¸óã_decom¥ess
(
•
))

2217 i‡(!
	`TIFFj≥g_¸óã_com¥ess
(
•
))

2221 
•
->
cöfo_öôülized
 = 
TRUE
;

2224 
	}
}

2227 
	$TIFFInôJPEG
(
TIFF
* 
tif
, 
scheme
)

2229 
JPEGSèã
* 
•
;

2231 
	`as£π
(
scheme
 =
COMPRESSION_JPEG
);

2236 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
j≥gFõlds
, 
	`TIFFAºayCou¡
(jpegFields))) {

2237 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,

2246 
tif
->
tif_d©a
 = (
uöt8
*Ë
	`_TIFFmÆloc
( (
JPEGSèã
));

2248 i‡(
tif
->
tif_d©a
 =
NULL
) {

2249 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,

2253 
	`_TIFFmem£t
(
tif
->
tif_d©a
, 0, (
JPEGSèã
));

2255 
•
 = 
	`JSèã
(
tif
);

2256 
•
->
tif
 =Åif;

2261 
•
->
vgë∑ª¡
 = 
tif
->
tif_ègmëhods
.
vgëfõld
;

2262 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
JPEGVGëFõld
;

2263 
•
->
v£ç¨ít
 = 
tif
->
tif_ègmëhods
.
v£tfõld
;

2264 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
JPEGVSëFõld
;

2265 
•
->
¥ötdú
 = 
tif
->
tif_ègmëhods
.printdir;

2266 
tif
->
tif_ègmëhods
.
¥ötdú
 = 
JPEGPrötDú
;

2269 
•
->
j≥gèbÀs
 = 
NULL
;

2270 
•
->
j≥gèbÀs_Àngth
 = 0;

2271 
•
->
j≥gquÆôy
 = 75;

2272 
•
->
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

2273 
•
->
j≥gèbÀsmode
 = 
JPEGTABLESMODE_QUANT
 | 
JPEGTABLESMODE_HUFF
;

2274 
•
->
ycb¸ßm∂ög_„tched
 = 0;

2279 
tif
->
tif_fixu±ags
 = 
JPEGFixupTags
;

2280 
tif
->
tif_£tupdecode
 = 
JPEGSëupDecode
;

2281 
tif
->
tif_¥edecode
 = 
JPEGPªDecode
;

2282 
tif
->
tif_decodîow
 = 
JPEGDecode
;

2283 
tif
->
tif_decode°rù
 = 
JPEGDecode
;

2284 
tif
->
tif_decodëûe
 = 
JPEGDecode
;

2285 
tif
->
tif_£tu≥ncode
 = 
JPEGSëupEncode
;

2286 
tif
->
tif_¥ìncode
 = 
JPEGPªEncode
;

2287 
tif
->
tif_po°ícode
 = 
JPEGPo°Encode
;

2288 
tif
->
tif_ícodîow
 = 
JPEGEncode
;

2289 
tif
->
tif_ícode°rù
 = 
JPEGEncode
;

2290 
tif
->
tif_ícodëûe
 = 
JPEGEncode
;

2291 
tif
->
tif_˛ónup
 = 
JPEGCÀ™up
;

2292 
•
->
def•¨ít
 = 
tif
->
tif_def°rùsize
;

2293 
tif
->
tif_def°rùsize
 = 
JPEGDeÁu…SåùSize
;

2294 
•
->
de·∑ª¡
 = 
tif
->
tif_de·ûesize
;

2295 
tif
->
tif_de·ûesize
 = 
JPEGDeÁu…TûeSize
;

2296 
tif
->
tif_Êags
 |
TIFF_NOBITREV
;

2298 
•
->
cöfo_öôülized
 = 
FALSE
;

2306 if–
tif
->
tif_dúoff
 == 0 )

2308 
	#SIZE_OF_JPEGTABLES
 2000

	)

2317 
•
->
j≥gèbÀs_Àngth
 = 
SIZE_OF_JPEGTABLES
;

2318 
•
->
j≥gèbÀs
 = (*Ë
	`_TIFFmÆloc
(•->
j≥gèbÀs_Àngth
);

2320 
	`_TIFFmem£t
(
•
->
j≥gèbÀs
, 0, 
SIZE_OF_JPEGTABLES
);

2321 #unde‡
SIZE_OF_JPEGTABLES


2325 
	}
}

	@libtiff/tif_jpeg_12.c

2 
	~"tiffi›.h
"

4 #i‡
deföed
(
JPEG_DUAL_MODE_8_12
)

6 
	#TIFFInôJPEG
 
TIFFInôJPEG_12


	)

8 #ö˛udê
LIBJPEG_12_PATH


10 
	~"tif_j≥g.c
"

12 
	$TIFFReInôJPEG_12
–
TIFF
 *
tif
, 
scheme
, 
is_ícode
 )

15 
JPEGSèã
* 
•
;

17 
	`as£π
(
scheme
 =
COMPRESSION_JPEG
);

19 
•
 = 
	`JSèã
(
tif
);

20 
•
->
tif
 =Åif;

25 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
JPEGVGëFõld
;

26 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
JPEGVSëFõld
;

27 
tif
->
tif_ègmëhods
.
¥ötdú
 = 
JPEGPrötDú
;

32 
tif
->
tif_fixu±ags
 = 
JPEGFixupTags
;

33 
tif
->
tif_£tupdecode
 = 
JPEGSëupDecode
;

34 
tif
->
tif_¥edecode
 = 
JPEGPªDecode
;

35 
tif
->
tif_decodîow
 = 
JPEGDecode
;

36 
tif
->
tif_decode°rù
 = 
JPEGDecode
;

37 
tif
->
tif_decodëûe
 = 
JPEGDecode
;

38 
tif
->
tif_£tu≥ncode
 = 
JPEGSëupEncode
;

39 
tif
->
tif_¥ìncode
 = 
JPEGPªEncode
;

40 
tif
->
tif_po°ícode
 = 
JPEGPo°Encode
;

41 
tif
->
tif_ícodîow
 = 
JPEGEncode
;

42 
tif
->
tif_ícode°rù
 = 
JPEGEncode
;

43 
tif
->
tif_ícodëûe
 = 
JPEGEncode
;

44 
tif
->
tif_˛ónup
 = 
JPEGCÀ™up
;

45 
tif
->
tif_def°rùsize
 = 
JPEGDeÁu…SåùSize
;

46 
tif
->
tif_de·ûesize
 = 
JPEGDeÁu…TûeSize
;

47 
tif
->
tif_Êags
 |
TIFF_NOBITREV
;

49 
•
->
cöfo_öôülized
 = 
FALSE
;

51 if–
is_ícode
 )

52  
	`JPEGSëupEncode
(
tif
);

54  
	`JPEGSëupDecode
(
tif
);

55 
	}
}

	@libtiff/tif_luv.c

27 
	~"tiffi›.h
"

28 #ifde‡
LOGLUV_SUPPORT


150 
	~<°dio.h
>

151 
	~<°dlib.h
>

152 
	~<m©h.h
>

158 
logLuvSèã
 
	tLogLuvSèã
;

160 
	slogLuvSèã
 {

161 
	mu£r_d©afmt
;

162 
	mícode_mëh
;

163 
	mpixñ_size
;

165 
uöt8
* 
	mtbuf
;

166 
tmsize_t
 
	mtbuÊí
;

167 (*
	mtfunc
)(
	mLogLuvSèã
*, 
	muöt8
*, 
	mtmsize_t
);

169 
TIFFVSëMëhod
 
	mvgë∑ª¡
;

170 
TIFFVSëMëhod
 
	mv£ç¨ít
;

173 
	#DecodîSèã
(
tif
Ë((
LogLuvSèã
*Ë—if)->
tif_d©a
)

	)

174 
	#EncodîSèã
(
tif
Ë((
LogLuvSèã
*Ë—if)->
tif_d©a
)

	)

176 
	#SGILOGDATAFMT_UNKNOWN
 -1

	)

178 
	#MINRUN
 4

	)

184 
	$LogL16Decode
(
TIFF
* 
tif
, 
uöt8
* 
›
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

186 c⁄° 
moduÀ
[] = "LogL16Decode";

187 
LogLuvSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

188 
sh·
;

189 
tmsize_t
 
i
;

190 
tmsize_t
 
≈ixñs
;

191 * 
bp
;

192 
öt16
* 
ç
;

193 
öt16
 
b
;

194 
tmsize_t
 
cc
;

195 
rc
;

197 
	`as£π
(
s
 == 0);

198 
	`as£π
(
•
 !
NULL
);

200 
≈ixñs
 = 
occ
 / 
•
->
pixñ_size
;

202 i‡(
•
->
u£r_d©afmt
 =
SGILOGDATAFMT_16BIT
)

203 
ç
 = (
öt16
*Ë
›
;

205 
	`as£π
(
•
->
tbuÊí
 >
≈ixñs
);

206 
ç
 = (
öt16
*Ë
•
->
tbuf
;

208 
	`_TIFFmem£t
((*Ë
ç
, 0, 
≈ixñs
* (tp[0]));

210 
bp
 = (*Ë
tif
->
tif_øw˝
;

211 
cc
 = 
tif
->
tif_øwcc
;

213 
sh·
 = 2*8; (shft -= 8) >= 0; ) {

214 
i
 = 0; i < 
≈ixñs
 && 
cc
 > 0; )

215 i‡(*
bp
 >= 128) {

216 
rc
 = *
bp
++ + (2-128);

217 
b
 = (
öt16
)(*
bp
++ << 
sh·
);

218 
cc
 -= 2;

219 
rc
-- && 
i
 < 
≈ixñs
)

220 
ç
[
i
++] |
b
;

222 
rc
 = *
bp
++;

223 --
cc
 && 
rc
-- && 
i
 < 
≈ixñs
)

224 
ç
[
i
++] |(
öt16
)*
bp
++ << 
sh·
;

226 i‡(
i
 !
≈ixñs
) {

227 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

228 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

230 (Ë
tif
->
tif_row
,

231 (
__öt64
Ë(
≈ixñs
 - 
i
));

233 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

235 (Ë
tif
->
tif_row
,

236 (Ë(
≈ixñs
 - 
i
));

238 
tif
->
tif_øw˝
 = (
uöt8
*Ë
bp
;

239 
tif
->
tif_øwcc
 = 
cc
;

243 (*
•
->
tfunc
)(•, 
›
, 
≈ixñs
);

244 
tif
->
tif_øw˝
 = (
uöt8
*Ë
bp
;

245 
tif
->
tif_øwcc
 = 
cc
;

247 
	}
}

253 
	$LogLuvDecode24
(
TIFF
* 
tif
, 
uöt8
* 
›
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

255 c⁄° 
moduÀ
[] = "LogLuvDecode24";

256 
LogLuvSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

257 
tmsize_t
 
cc
;

258 
tmsize_t
 
i
;

259 
tmsize_t
 
≈ixñs
;

260 * 
bp
;

261 
uöt32
* 
ç
;

263 
	`as£π
(
s
 == 0);

264 
	`as£π
(
•
 !
NULL
);

266 
≈ixñs
 = 
occ
 / 
•
->
pixñ_size
;

268 i‡(
•
->
u£r_d©afmt
 =
SGILOGDATAFMT_RAW
)

269 
ç
 = (
uöt32
 *)
›
;

271 
	`as£π
(
•
->
tbuÊí
 >
≈ixñs
);

272 
ç
 = (
uöt32
 *Ë
•
->
tbuf
;

275 
bp
 = (*Ë
tif
->
tif_øw˝
;

276 
cc
 = 
tif
->
tif_øwcc
;

277 
i
 = 0; i < 
≈ixñs
 && 
cc
 > 0; i++) {

278 
ç
[
i
] = 
bp
[0] << 16 | bp[1] << 8 | bp[2];

279 
bp
 += 3;

280 
cc
 -= 3;

282 
tif
->
tif_øw˝
 = (
uöt8
*Ë
bp
;

283 
tif
->
tif_øwcc
 = 
cc
;

284 i‡(
i
 !
≈ixñs
) {

285 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

286 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

288 (Ë
tif
->
tif_row
,

289 (
__öt64
Ë(
≈ixñs
 - 
i
));

291 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

293 (Ë
tif
->
tif_row
,

294 (Ë(
≈ixñs
 - 
i
));

298 (*
•
->
tfunc
)(•, 
›
, 
≈ixñs
);

300 
	}
}

306 
	$LogLuvDecode32
(
TIFF
* 
tif
, 
uöt8
* 
›
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

308 c⁄° 
moduÀ
[] = "LogLuvDecode32";

309 
LogLuvSèã
* 
•
;

310 
sh·
;

311 
tmsize_t
 
i
;

312 
tmsize_t
 
≈ixñs
;

313 * 
bp
;

314 
uöt32
* 
ç
;

315 
uöt32
 
b
;

316 
tmsize_t
 
cc
;

317 
rc
;

319 
	`as£π
(
s
 == 0);

320 
•
 = 
	`DecodîSèã
(
tif
);

321 
	`as£π
(
•
 !
NULL
);

323 
≈ixñs
 = 
occ
 / 
•
->
pixñ_size
;

325 i‡(
•
->
u£r_d©afmt
 =
SGILOGDATAFMT_RAW
)

326 
ç
 = (
uöt32
*Ë
›
;

328 
	`as£π
(
•
->
tbuÊí
 >
≈ixñs
);

329 
ç
 = (
uöt32
*Ë
•
->
tbuf
;

331 
	`_TIFFmem£t
((*Ë
ç
, 0, 
≈ixñs
* (tp[0]));

333 
bp
 = (*Ë
tif
->
tif_øw˝
;

334 
cc
 = 
tif
->
tif_øwcc
;

336 
sh·
 = 4*8; (shft -= 8) >= 0; ) {

337 
i
 = 0; i < 
≈ixñs
 && 
cc
 > 0; )

338 i‡(*
bp
 >= 128) {

339 
rc
 = *
bp
++ + (2-128);

340 
b
 = (
uöt32
)*
bp
++ << 
sh·
;

341 
cc
 -= 2;

342 
rc
-- && 
i
 < 
≈ixñs
)

343 
ç
[
i
++] |
b
;

345 
rc
 = *
bp
++;

346 --
cc
 && 
rc
-- && 
i
 < 
≈ixñs
)

347 
ç
[
i
++] |(
uöt32
)*
bp
++ << 
sh·
;

349 i‡(
i
 !
≈ixñs
) {

350 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

351 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

353 (Ë
tif
->
tif_row
,

354 (
__öt64
Ë(
≈ixñs
 - 
i
));

356 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

358 (Ë
tif
->
tif_row
,

359 (Ë(
≈ixñs
 - 
i
));

361 
tif
->
tif_øw˝
 = (
uöt8
*Ë
bp
;

362 
tif
->
tif_øwcc
 = 
cc
;

366 (*
•
->
tfunc
)(•, 
›
, 
≈ixñs
);

367 
tif
->
tif_øw˝
 = (
uöt8
*Ë
bp
;

368 
tif
->
tif_øwcc
 = 
cc
;

370 
	}
}

378 
	$LogLuvDecodeSåù
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

380 
tmsize_t
 
rowÀn
 = 
	`TIFFSˇ∆öeSize
(
tif
);

382 
	`as£π
(
cc
%
rowÀn
 == 0);

383 
cc
 && (*
tif
->
tif_decodîow
)—if, 
bp
, 
rowÀn
, 
s
))

384 
bp
 +
rowÀn
, 
cc
 -=Ñowlen;

385  (
cc
 == 0);

386 
	}
}

394 
	$LogLuvDecodeTûe
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

396 
tmsize_t
 
rowÀn
 = 
	`TIFFTûeRowSize
(
tif
);

398 
	`as£π
(
cc
%
rowÀn
 == 0);

399 
cc
 && (*
tif
->
tif_decodîow
)—if, 
bp
, 
rowÀn
, 
s
))

400 
bp
 +
rowÀn
, 
cc
 -=Ñowlen;

401  (
cc
 == 0);

402 
	}
}

408 
	$LogL16Encode
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

410 
LogLuvSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

411 
sh·
;

412 
tmsize_t
 
i
;

413 
tmsize_t
 
j
;

414 
tmsize_t
 
≈ixñs
;

415 
uöt8
* 
›
;

416 
öt16
* 
ç
;

417 
öt16
 
b
;

418 
tmsize_t
 
occ
;

419 
rc
=0, 
mask
;

420 
tmsize_t
 
beg
;

422 
	`as£π
(
s
 == 0);

423 
	`as£π
(
•
 !
NULL
);

424 
≈ixñs
 = 
cc
 / 
•
->
pixñ_size
;

426 i‡(
•
->
u£r_d©afmt
 =
SGILOGDATAFMT_16BIT
)

427 
ç
 = (
öt16
*Ë
bp
;

429 
ç
 = (
öt16
*Ë
•
->
tbuf
;

430 
	`as£π
(
•
->
tbuÊí
 >
≈ixñs
);

431 (*
•
->
tfunc
)(•, 
bp
, 
≈ixñs
);

434 
›
 = 
tif
->
tif_øw˝
;

435 
occ
 = 
tif
->
tif_øwd©asize
 -Åif->
tif_øwcc
;

436 
sh·
 = 2*8; (shft -= 8) >= 0; )

437 
i
 = 0; i < 
≈ixñs
; i +
rc
) {

438 i‡(
occ
 < 4) {

439 
tif
->
tif_øw˝
 = 
›
;

440 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
 - 
occ
;

441 i‡(!
	`TIFFFlushD©a1
(
tif
))

443 
›
 = 
tif
->
tif_øw˝
;

444 
occ
 = 
tif
->
tif_øwd©asize
 -Åif->
tif_øwcc
;

446 
mask
 = 0xf‡<< 
sh·
;

447 
beg
 = 
i
; beg < 
≈ixñs
; beg +
rc
) {

448 
b
 = (
öt16
Ë(
ç
[
beg
] & 
mask
);

449 
rc
 = 1;

450 
rc
 < 127+2 && 
beg
+r¯< 
≈ixñs
 &&

451 (
ç
[
beg
+
rc
] & 
mask
Ë=
b
)

452 
rc
++;

453 i‡(
rc
 >
MINRUN
)

456 i‡(
beg
-
i
 > 1 && beg-ò< 
MINRUN
) {

457 
b
 = (
öt16
Ë(
ç
[
i
] & 
mask
);

458 
j
 = 
i
+1;

459 (
ç
[
j
++] & 
mask
Ë=
b
)

460 i‡(
j
 =
beg
) {

461 *
›
++ = (
uöt8
)(128-2+
j
-
i
);

462 *
›
++ = (
uöt8
)(
b
 >> 
sh·
);

463 
occ
 -= 2;

464 
i
 = 
beg
;

468 
i
 < 
beg
) {

469 i‡((
j
 = 
beg
-
i
) > 127) j = 127;

470 i‡(
occ
 < 
j
+3) {

471 
tif
->
tif_øw˝
 = 
›
;

472 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
 - 
occ
;

473 i‡(!
	`TIFFFlushD©a1
(
tif
))

475 
›
 = 
tif
->
tif_øw˝
;

476 
occ
 = 
tif
->
tif_øwd©asize
 -Åif->
tif_øwcc
;

478 *
›
++ = (
uöt8
Ë
j
; 
occ
--;

479 
j
--) {

480 *
›
++ = (
uöt8
Ë(
ç
[
i
++] >> 
sh·
 & 0xff);

481 
occ
--;

484 i‡(
rc
 >
MINRUN
) {

485 *
›
++ = (
uöt8
Ë(128-2+
rc
);

486 *
›
++ = (
uöt8
Ë(
ç
[
beg
] >> 
sh·
 & 0xff);

487 
occ
 -= 2;

489 
rc
 = 0;

491 
tif
->
tif_øw˝
 = 
›
;

492 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
 - 
occ
;

495 
	}
}

501 
	$LogLuvEncode24
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

503 
LogLuvSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

504 
tmsize_t
 
i
;

505 
tmsize_t
 
≈ixñs
;

506 
tmsize_t
 
occ
;

507 
uöt8
* 
›
;

508 
uöt32
* 
ç
;

510 
	`as£π
(
s
 == 0);

511 
	`as£π
(
•
 !
NULL
);

512 
≈ixñs
 = 
cc
 / 
•
->
pixñ_size
;

514 i‡(
•
->
u£r_d©afmt
 =
SGILOGDATAFMT_RAW
)

515 
ç
 = (
uöt32
*Ë
bp
;

517 
ç
 = (
uöt32
*Ë
•
->
tbuf
;

518 
	`as£π
(
•
->
tbuÊí
 >
≈ixñs
);

519 (*
•
->
tfunc
)(•, 
bp
, 
≈ixñs
);

522 
›
 = 
tif
->
tif_øw˝
;

523 
occ
 = 
tif
->
tif_øwd©asize
 -Åif->
tif_øwcc
;

524 
i
 = 
≈ixñs
; i--; ) {

525 i‡(
occ
 < 3) {

526 
tif
->
tif_øw˝
 = 
›
;

527 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
 - 
occ
;

528 i‡(!
	`TIFFFlushD©a1
(
tif
))

530 
›
 = 
tif
->
tif_øw˝
;

531 
occ
 = 
tif
->
tif_øwd©asize
 -Åif->
tif_øwcc
;

533 *
›
++ = (
uöt8
)(*
ç
 >> 16);

534 *
›
++ = (
uöt8
)(*
ç
 >> 8 & 0xff);

535 *
›
++ = (
uöt8
)(*
ç
++ & 0xff);

536 
occ
 -= 3;

538 
tif
->
tif_øw˝
 = 
›
;

539 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
 - 
occ
;

542 
	}
}

548 
	$LogLuvEncode32
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

550 
LogLuvSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

551 
sh·
;

552 
tmsize_t
 
i
;

553 
tmsize_t
 
j
;

554 
tmsize_t
 
≈ixñs
;

555 
uöt8
* 
›
;

556 
uöt32
* 
ç
;

557 
uöt32
 
b
;

558 
tmsize_t
 
occ
;

559 
rc
=0, 
mask
;

560 
tmsize_t
 
beg
;

562 
	`as£π
(
s
 == 0);

563 
	`as£π
(
•
 !
NULL
);

565 
≈ixñs
 = 
cc
 / 
•
->
pixñ_size
;

567 i‡(
•
->
u£r_d©afmt
 =
SGILOGDATAFMT_RAW
)

568 
ç
 = (
uöt32
*Ë
bp
;

570 
ç
 = (
uöt32
*Ë
•
->
tbuf
;

571 
	`as£π
(
•
->
tbuÊí
 >
≈ixñs
);

572 (*
•
->
tfunc
)(•, 
bp
, 
≈ixñs
);

575 
›
 = 
tif
->
tif_øw˝
;

576 
occ
 = 
tif
->
tif_øwd©asize
 -Åif->
tif_øwcc
;

577 
sh·
 = 4*8; (shft -= 8) >= 0; )

578 
i
 = 0; i < 
≈ixñs
; i +
rc
) {

579 i‡(
occ
 < 4) {

580 
tif
->
tif_øw˝
 = 
›
;

581 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
 - 
occ
;

582 i‡(!
	`TIFFFlushD©a1
(
tif
))

584 
›
 = 
tif
->
tif_øw˝
;

585 
occ
 = 
tif
->
tif_øwd©asize
 -Åif->
tif_øwcc
;

587 
mask
 = 0xf‡<< 
sh·
;

588 
beg
 = 
i
; beg < 
≈ixñs
; beg +
rc
) {

589 
b
 = 
ç
[
beg
] & 
mask
;

590 
rc
 = 1;

591 
rc
 < 127+2 && 
beg
+r¯< 
≈ixñs
 &&

592 (
ç
[
beg
+
rc
] & 
mask
Ë=
b
)

593 
rc
++;

594 i‡(
rc
 >
MINRUN
)

597 i‡(
beg
-
i
 > 1 && beg-ò< 
MINRUN
) {

598 
b
 = 
ç
[
i
] & 
mask
;

599 
j
 = 
i
+1;

600 (
ç
[
j
++] & 
mask
Ë=
b
)

601 i‡(
j
 =
beg
) {

602 *
›
++ = (
uöt8
)(128-2+
j
-
i
);

603 *
›
++ = (
uöt8
)(
b
 >> 
sh·
);

604 
occ
 -= 2;

605 
i
 = 
beg
;

609 
i
 < 
beg
) {

610 i‡((
j
 = 
beg
-
i
) > 127) j = 127;

611 i‡(
occ
 < 
j
+3) {

612 
tif
->
tif_øw˝
 = 
›
;

613 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
 - 
occ
;

614 i‡(!
	`TIFFFlushD©a1
(
tif
))

616 
›
 = 
tif
->
tif_øw˝
;

617 
occ
 = 
tif
->
tif_øwd©asize
 -Åif->
tif_øwcc
;

619 *
›
++ = (
uöt8
Ë
j
; 
occ
--;

620 
j
--) {

621 *
›
++ = (
uöt8
)(
ç
[
i
++] >> 
sh·
 & 0xff);

622 
occ
--;

625 i‡(
rc
 >
MINRUN
) {

626 *
›
++ = (
uöt8
Ë(128-2+
rc
);

627 *
›
++ = (
uöt8
)(
ç
[
beg
] >> 
sh·
 & 0xff);

628 
occ
 -= 2;

630 
rc
 = 0;

632 
tif
->
tif_øw˝
 = 
›
;

633 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
 - 
occ
;

636 
	}
}

643 
	$LogLuvEncodeSåù
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

645 
tmsize_t
 
rowÀn
 = 
	`TIFFSˇ∆öeSize
(
tif
);

647 
	`as£π
(
cc
%
rowÀn
 == 0);

648 
cc
 && (*
tif
->
tif_ícodîow
)—if, 
bp
, 
rowÀn
, 
s
) == 1)

649 
bp
 +
rowÀn
, 
cc
 -=Ñowlen;

650  (
cc
 == 0);

651 
	}
}

658 
	$LogLuvEncodeTûe
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

660 
tmsize_t
 
rowÀn
 = 
	`TIFFTûeRowSize
(
tif
);

662 
	`as£π
(
cc
%
rowÀn
 == 0);

663 
cc
 && (*
tif
->
tif_ícodîow
)—if, 
bp
, 
rowÀn
, 
s
) == 1)

664 
bp
 +
rowÀn
, 
cc
 -=Ñowlen;

665  (
cc
 == 0);

666 
	}
}

672 
	~"uvcode.h
"

674 #i‚de‡
UVSCALE


675 
	#U_NEU
 0.210526316

	)

676 
	#V_NEU
 0.473684211

	)

677 
	#UVSCALE
 410.

	)

680 #i‚def 
M_LN2


681 
	#M_LN2
 0.69314718055994530942

	)

683 #i‚de‡
M_PI


684 
	#M_PI
 3.14159265358979323846

	)

686 
	#log2
(
x
Ë((1./
M_LN2
)*
	`log
(x))

	)

687 
	#exp2
(
x
Ë
	`exp
(
M_LN2
*(x))

	)

689 
	#ôrunc
(
x
,
m
Ë((m)==
SGILOGENCODE_NODITHER
 ? \

690 ()(
x
) : \

691 ()((
x
Ë+ 
	`ønd
()*(1./
RAND_MAX
Ë- .5))

	)

693 #i‡!
LOGLUV_PUBLIC


697 
	$LogL16toY
(
p16
)

699 
Le
 = 
p16
 & 0x7fff;

700 
Y
;

702 i‡(!
Le
)

704 
Y
 = 
	`exp
(
M_LN2
/256.*(
Le
+.5) - M_LN2*64.);

705  (!(
p16
 & 0x8000Ë? 
Y
 : -Y);

706 
	}
}

708 #i‡!
LOGLUV_PUBLIC


712 
	$LogL16‰omY
(
Y
, 
em
)

714 i‡(
Y
 >= 1.8371976e19)

716 i‡(
Y
 <= -1.8371976e19)

718 i‡(
Y
 > 5.4136769e-20)

719  
	`ôrunc
(256.*(
	`log2
(
Y
Ë+ 64.), 
em
);

720 i‡(
Y
 < -5.4136769e-20)

721  (~0x7ff‡| 
	`ôrunc
(256.*(
	`log2
(-
Y
Ë+ 64.), 
em
));

723 
	}
}

726 
	$L16toY
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

728 
öt16
* 
l16
 = (öt16*Ë
•
->
tbuf
;

729 * 
yp
 = (*Ë
›
;

731 
n
-- > 0)

732 *
yp
++ = ()
	`LogL16toY
(*
l16
++);

733 
	}
}

736 
	$L16toGry
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

738 
öt16
* 
l16
 = (öt16*Ë
•
->
tbuf
;

739 
uöt8
* 
gp
 = (uöt8*Ë
›
;

741 
n
-- > 0) {

742 
Y
 = 
	`LogL16toY
(*
l16
++);

743 *
gp
++ = (
uöt8
Ë((
Y
 <0.Ë? 0 : (Y >1.Ë? 255 : ()(256.*
	`sqπ
(Y)));

745 
	}
}

748 
	$L16‰omY
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

750 
öt16
* 
l16
 = (öt16*Ë
•
->
tbuf
;

751 * 
yp
 = (*Ë
›
;

753 
n
-- > 0)

754 *
l16
++ = (
öt16
Ë(
	`LogL16‰omY
(*
yp
++, 
•
->
ícode_mëh
));

755 
	}
}

757 #i‡!
LOGLUV_PUBLIC


761 
	$XYZtoRGB24
(
xyz
[3], 
uöt8
 
rgb
[3])

763 
r
, 
g
, 
b
;

765 
r
 = 2.690*
xyz
[0] + -1.276*xyz[1] + -0.414*xyz[2];

766 
g
 = -1.022*
xyz
[0] + 1.978*xyz[1] + 0.044*xyz[2];

767 
b
 = 0.061*
xyz
[0] + -0.224*xyz[1] + 1.163*xyz[2];

770 
rgb
[0] = (
uöt8
)((
r
<=0.Ë? 0 : (∏>1.Ë? 255 : ()(256.*
	`sqπ
(r)));

771 
rgb
[1] = (
uöt8
)((
g
<=0.Ë? 0 : (g >1.Ë? 255 : ()(256.*
	`sqπ
(g)));

772 
rgb
[2] = (
uöt8
)((
b
<=0.Ë? 0 : (b >1.Ë? 255 : ()(256.*
	`sqπ
(b)));

773 
	}
}

775 #i‡!
LOGLUV_PUBLIC


779 
	$LogL10toY
(
p10
)

781 i‡(
p10
 == 0)

783  (
	`exp
(
M_LN2
/64.*(
p10
+.5) - M_LN2*12.));

784 
	}
}

786 #i‡!
LOGLUV_PUBLIC


790 
	$LogL10‰omY
(
Y
, 
em
)

792 i‡(
Y
 >= 15.742)

794 i‡(
Y
 <= .00024283)

797  
	`ôrunc
(64.*(
	`log2
(
Y
Ë+ 12.), 
em
);

798 
	}
}

800 
	#NANGLES
 100

	)

801 
	#uv2™g
(
u
, 
v
Ë–(
NANGLES
*.499999999/
M_PI
) \

802 * 
	`©™2
((
v
)-
V_NEU
,(
u
)-
U_NEU
Ë+ .5*
NANGLES
 )

	)

805 
	$oog_ícode
(
u
, 
v
)

807 
oog_èbÀ
[
NANGLES
];

808 
öôülized
 = 0;

809 
i
;

811 i‡(!
öôülized
) {

812 
ïs
[
NANGLES
], 
ua
, 
va
, 
™g
, 
ïß
;

813 
ui
, 
vi
, 
u°ï
;

814 
i
 = 
NANGLES
; i--; )

815 
ïs
[
i
] = 2.;

816 
vi
 = 
UV_NVS
; vi--; ) {

817 
va
 = 
UV_VSTART
 + (
vi
+.5)*
UV_SQSIZ
;

818 
u°ï
 = 
uv_row
[
vi
].
nus
-1;

819 i‡(
vi
 =
UV_NVS
-1 || vò=0 || 
u°ï
 <= 0)

820 
u°ï
 = 1;

821 
ui
 = 
uv_row
[
vi
].
nus
-1; uò>0; uò-
u°ï
) {

822 
ua
 = 
uv_row
[
vi
].
u°¨t
 + (
ui
+.5)*
UV_SQSIZ
;

823 
™g
 = 
	`uv2™g
(
ua
, 
va
);

824 
i
 = (Ë
™g
;

825 
ïß
 = 
	`Ábs
(
™g
 - (
i
+.5));

826 i‡(
ïß
 < 
ïs
[
i
]) {

827 
oog_èbÀ
[
i
] = 
uv_row
[
vi
].
ncum
 + 
ui
;

828 
ïs
[
i
] = 
ïß
;

832 
i
 = 
NANGLES
; i--; )

833 i‡(
ïs
[
i
] > 1.5) {

834 
i1
, 
i2
;

835 
i1
 = 1; i1 < 
NANGLES
/2; i1++)

836 i‡(
ïs
[(
i
+
i1
)%
NANGLES
] < 1.5)

838 
i2
 = 1; i2 < 
NANGLES
/2; i2++)

839 i‡(
ïs
[(
i
+
NANGLES
-
i2
)%NANGLES] < 1.5)

841 i‡(
i1
 < 
i2
)

842 
oog_èbÀ
[
i
] =

843 
oog_èbÀ
[(
i
+
i1
)%
NANGLES
];

845 
oog_èbÀ
[
i
] =

846 
oog_èbÀ
[(
i
+
NANGLES
-
i2
)%NANGLES];

848 
öôülized
 = 1;

850 
i
 = (Ë
	`uv2™g
(
u
, 
v
);

851  (
oog_èbÀ
[
i
]);

852 
	}
}

854 #unde‡
uv2™g


855 #unde‡
NANGLES


857 #i‡!
LOGLUV_PUBLIC


861 
	$uv_ícode
(
u
, 
v
, 
em
)

863 
vi
, 
ui
;

865 i‡(
v
 < 
UV_VSTART
)

866  
	`oog_ícode
(
u
, 
v
);

867 
vi
 = 
	`ôrunc
((
v
 - 
UV_VSTART
)*(1./
UV_SQSIZ
), 
em
);

868 i‡(
vi
 >
UV_NVS
)

869  
	`oog_ícode
(
u
, 
v
);

870 i‡(
u
 < 
uv_row
[
vi
].
u°¨t
)

871  
	`oog_ícode
(
u
, 
v
);

872 
ui
 = 
	`ôrunc
((
u
 - 
uv_row
[
vi
].
u°¨t
)*(1./
UV_SQSIZ
), 
em
);

873 i‡(
ui
 >
uv_row
[
vi
].
nus
)

874  
	`oog_ícode
(
u
, 
v
);

876  (
uv_row
[
vi
].
ncum
 + 
ui
);

877 
	}
}

879 #i‡!
LOGLUV_PUBLIC


883 
	$uv_decode
(*
up
, *
vp
, 
c
)

885 
uµî
, 
lowî
;

886 
ui
, 
vi
;

888 i‡(
c
 < 0 || c >
UV_NDIVS
)

890 
lowî
 = 0;

891 
uµî
 = 
UV_NVS
;

892 
uµî
 - 
lowî
 > 1) {

893 
vi
 = (
lowî
 + 
uµî
) >> 1;

894 
ui
 = 
c
 - 
uv_row
[
vi
].
ncum
;

895 i‡(
ui
 > 0)

896 
lowî
 = 
vi
;

897 i‡(
ui
 < 0)

898 
uµî
 = 
vi
;

900 
lowî
 = 
vi
;

904 
vi
 = 
lowî
;

905 
ui
 = 
c
 - 
uv_row
[
vi
].
ncum
;

906 *
up
 = 
uv_row
[
vi
].
u°¨t
 + (
ui
+.5)*
UV_SQSIZ
;

907 *
vp
 = 
UV_VSTART
 + (
vi
+.5)*
UV_SQSIZ
;

909 
	}
}

911 #i‡!
LOGLUV_PUBLIC


915 
	$LogLuv24toXYZ
(
uöt32
 
p
, 
XYZ
[3])

917 
Ce
;

918 
L
, 
u
, 
v
, 
s
, 
x
, 
y
;

920 
L
 = 
	`LogL10toY
(
p
>>14 & 0x3ff);

921 i‡(
L
 <= 0.) {

922 
XYZ
[0] = XYZ[1] = XYZ[2] = 0.;

926 
Ce
 = 
p
 & 0x3fff;

927 i‡(
	`uv_decode
(&
u
, &
v
, 
Ce
) < 0) {

928 
u
 = 
U_NEU
; 
v
 = 
V_NEU
;

930 
s
 = 1./(6.*
u
 - 16.*
v
 + 12.);

931 
x
 = 9.*
u
 * 
s
;

932 
y
 = 4.*
v
 * 
s
;

934 
XYZ
[0] = ()(
x
/
y
 * 
L
);

935 
XYZ
[1] = ()
L
;

936 
XYZ
[2] = ()((1.-
x
-
y
)/y * 
L
);

937 
	}
}

939 #i‡!
LOGLUV_PUBLIC


942 
uöt32


943 
	$LogLuv24‰omXYZ
(
XYZ
[3], 
em
)

945 
Le
, 
Ce
;

946 
u
, 
v
, 
s
;

948 
Le
 = 
	`LogL10‰omY
(
XYZ
[1], 
em
);

950 
s
 = 
XYZ
[0] + 15.*XYZ[1] + 3.*XYZ[2];

951 i‡(!
Le
 || 
s
 <= 0.) {

952 
u
 = 
U_NEU
;

953 
v
 = 
V_NEU
;

955 
u
 = 4.*
XYZ
[0] / 
s
;

956 
v
 = 9.*
XYZ
[1] / 
s
;

958 
Ce
 = 
	`uv_ícode
(
u
, 
v
, 
em
);

959 i‡(
Ce
 < 0)

960 
Ce
 = 
	`uv_ícode
(
U_NEU
, 
V_NEU
, 
SGILOGENCODE_NODITHER
);

962  (
Le
 << 14 | 
Ce
);

963 
	}
}

966 
	$Luv24toXYZ
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

968 
uöt32
* 
luv
 = (uöt32*Ë
•
->
tbuf
;

969 * 
xyz
 = (*Ë
›
;

971 
n
-- > 0) {

972 
	`LogLuv24toXYZ
(*
luv
, 
xyz
);

973 
xyz
 += 3;

974 
luv
++;

976 
	}
}

979 
	$Luv24toLuv48
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

981 
uöt32
* 
luv
 = (uöt32*Ë
•
->
tbuf
;

982 
öt16
* 
luv3
 = (öt16*Ë
›
;

984 
n
-- > 0) {

985 
u
, 
v
;

987 *
luv3
++ = (
öt16
)((*
luv
 >> 12 & 0xffd) + 13314);

988 i‡(
	`uv_decode
(&
u
, &
v
, *
luv
&0x3fff) < 0) {

989 
u
 = 
U_NEU
;

990 
v
 = 
V_NEU
;

992 *
luv3
++ = (
öt16
)(
u
 * (1L<<15));

993 *
luv3
++ = (
öt16
)(
v
 * (1L<<15));

994 
luv
++;

996 
	}
}

999 
	$Luv24toRGB
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

1001 
uöt32
* 
luv
 = (uöt32*Ë
•
->
tbuf
;

1002 
uöt8
* 
rgb
 = (uöt8*Ë
›
;

1004 
n
-- > 0) {

1005 
xyz
[3];

1007 
	`LogLuv24toXYZ
(*
luv
++, 
xyz
);

1008 
	`XYZtoRGB24
(
xyz
, 
rgb
);

1009 
rgb
 += 3;

1011 
	}
}

1014 
	$Luv24‰omXYZ
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

1016 
uöt32
* 
luv
 = (uöt32*Ë
•
->
tbuf
;

1017 * 
xyz
 = (*Ë
›
;

1019 
n
-- > 0) {

1020 *
luv
++ = 
	`LogLuv24‰omXYZ
(
xyz
, 
•
->
ícode_mëh
);

1021 
xyz
 += 3;

1023 
	}
}

1026 
	$Luv24‰omLuv48
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

1028 
uöt32
* 
luv
 = (uöt32*Ë
•
->
tbuf
;

1029 
öt16
* 
luv3
 = (öt16*Ë
›
;

1031 
n
-- > 0) {

1032 
Le
, 
Ce
;

1034 i‡(
luv3
[0] <= 0)

1035 
Le
 = 0;

1036 i‡(
luv3
[0] >= (1<<12)+3314)

1037 
Le
 = (1<<10) - 1;

1038 i‡(
•
->
ícode_mëh
 =
SGILOGENCODE_NODITHER
)

1039 
Le
 = (
luv3
[0]-3314) >> 2;

1041 
Le
 = 
	`ôrunc
(.25*(
luv3
[0]-3314.), 
•
->
ícode_mëh
);

1043 
Ce
 = 
	`uv_ícode
((
luv3
[1]+.5)/(1<<15), (luv3[2]+.5)/(1<<15),

1044 
•
->
ícode_mëh
);

1045 i‡(
Ce
 < 0)

1046 
Ce
 = 
	`uv_ícode
(
U_NEU
, 
V_NEU
, 
SGILOGENCODE_NODITHER
);

1047 *
luv
++ = (
uöt32
)
Le
 << 14 | 
Ce
;

1048 
luv3
 += 3;

1050 
	}
}

1052 #i‡!
LOGLUV_PUBLIC


1056 
	$LogLuv32toXYZ
(
uöt32
 
p
, 
XYZ
[3])

1058 
L
, 
u
, 
v
, 
s
, 
x
, 
y
;

1060 
L
 = 
	`LogL16toY
(()
p
 >> 16);

1061 i‡(
L
 <= 0.) {

1062 
XYZ
[0] = XYZ[1] = XYZ[2] = 0.;

1066 
u
 = 1./
UVSCALE
 * ((
p
>>8 & 0xff) + .5);

1067 
v
 = 1./
UVSCALE
 * ((
p
 & 0xff) + .5);

1068 
s
 = 1./(6.*
u
 - 16.*
v
 + 12.);

1069 
x
 = 9.*
u
 * 
s
;

1070 
y
 = 4.*
v
 * 
s
;

1072 
XYZ
[0] = ()(
x
/
y
 * 
L
);

1073 
XYZ
[1] = ()
L
;

1074 
XYZ
[2] = ()((1.-
x
-
y
)/y * 
L
);

1075 
	}
}

1077 #i‡!
LOGLUV_PUBLIC


1080 
uöt32


1081 
	$LogLuv32‰omXYZ
(
XYZ
[3], 
em
)

1083 
Le
, 
ue
, 
ve
;

1084 
u
, 
v
, 
s
;

1086 
Le
 = ()
	`LogL16‰omY
(
XYZ
[1], 
em
);

1088 
s
 = 
XYZ
[0] + 15.*XYZ[1] + 3.*XYZ[2];

1089 i‡(!
Le
 || 
s
 <= 0.) {

1090 
u
 = 
U_NEU
;

1091 
v
 = 
V_NEU
;

1093 
u
 = 4.*
XYZ
[0] / 
s
;

1094 
v
 = 9.*
XYZ
[1] / 
s
;

1096 i‡(
u
 <0.Ë
ue
 = 0;

1097 
ue
 = 
	`ôrunc
(
UVSCALE
*
u
, 
em
);

1098 i‡(
ue
 > 255) ue = 255;

1099 i‡(
v
 <0.Ë
ve
 = 0;

1100 
ve
 = 
	`ôrunc
(
UVSCALE
*
v
, 
em
);

1101 i‡(
ve
 > 255) ve = 255;

1103  (
Le
 << 16 | 
ue
 << 8 | 
ve
);

1104 
	}
}

1107 
	$Luv32toXYZ
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

1109 
uöt32
* 
luv
 = (uöt32*Ë
•
->
tbuf
;

1110 * 
xyz
 = (*Ë
›
;

1112 
n
-- > 0) {

1113 
	`LogLuv32toXYZ
(*
luv
++, 
xyz
);

1114 
xyz
 += 3;

1116 
	}
}

1119 
	$Luv32toLuv48
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

1121 
uöt32
* 
luv
 = (uöt32*Ë
•
->
tbuf
;

1122 
öt16
* 
luv3
 = (öt16*Ë
›
;

1124 
n
-- > 0) {

1125 
u
, 
v
;

1127 *
luv3
++ = (
öt16
)(*
luv
 >> 16);

1128 
u
 = 1./
UVSCALE
 * ((*
luv
>>8 & 0xff) + .5);

1129 
v
 = 1./
UVSCALE
 * ((*
luv
 & 0xff) + .5);

1130 *
luv3
++ = (
öt16
)(
u
 * (1L<<15));

1131 *
luv3
++ = (
öt16
)(
v
 * (1L<<15));

1132 
luv
++;

1134 
	}
}

1137 
	$Luv32toRGB
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

1139 
uöt32
* 
luv
 = (uöt32*Ë
•
->
tbuf
;

1140 
uöt8
* 
rgb
 = (uöt8*Ë
›
;

1142 
n
-- > 0) {

1143 
xyz
[3];

1145 
	`LogLuv32toXYZ
(*
luv
++, 
xyz
);

1146 
	`XYZtoRGB24
(
xyz
, 
rgb
);

1147 
rgb
 += 3;

1149 
	}
}

1152 
	$Luv32‰omXYZ
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

1154 
uöt32
* 
luv
 = (uöt32*Ë
•
->
tbuf
;

1155 * 
xyz
 = (*Ë
›
;

1157 
n
-- > 0) {

1158 *
luv
++ = 
	`LogLuv32‰omXYZ
(
xyz
, 
•
->
ícode_mëh
);

1159 
xyz
 += 3;

1161 
	}
}

1164 
	$Luv32‰omLuv48
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

1166 
uöt32
* 
luv
 = (uöt32*Ë
•
->
tbuf
;

1167 
öt16
* 
luv3
 = (öt16*Ë
›
;

1169 i‡(
•
->
ícode_mëh
 =
SGILOGENCODE_NODITHER
) {

1170 
n
-- > 0) {

1171 *
luv
++ = (
uöt32
)
luv3
[0] << 16 |

1172 (
luv3
[1]*(
uöt32
)(
UVSCALE
+.5) >> 7 & 0xff00) |

1173 (
luv3
[2]*(
uöt32
)(
UVSCALE
+.5) >> 15 & 0xff);

1174 
luv3
 += 3;

1178 
n
-- > 0) {

1179 *
luv
++ = (
uöt32
)
luv3
[0] << 16 |

1180 (
	`ôrunc
(
luv3
[1]*(
UVSCALE
/(1<<15)), 
•
->
ícode_mëh
) << 8 & 0xff00) |

1181 (
	`ôrunc
(
luv3
[2]*(
UVSCALE
/(1<<15)), 
•
->
ícode_mëh
) & 0xff);

1182 
luv3
 += 3;

1184 
	}
}

1187 
	$_logLuvN›
(
LogLuvSèã
* 
•
, 
uöt8
* 
›
, 
tmsize_t
 
n
)

1189 (Ë
•
; (Ë
›
; (Ë
n
;

1190 
	}
}

1193 
	$LogL16GuessD©aFmt
(
TIFFDúe˘‹y
 *
td
)

1195 
	#PACK
(
s
,
b
,
f
Ë(((b)<<6)|((s)<<3)|(f))

	)

1196 
	`PACK
(
td
->
td_ßm∂e•îpixñ
,Åd->
td_bô•îßm∂e
,Åd->
td_ßm∂ef‹m©
)) {

1197 
	`PACK
(1, 32, 
SAMPLEFORMAT_IEEEFP
):

1198  (
SGILOGDATAFMT_FLOAT
);

1199 
	`PACK
(1, 16, 
SAMPLEFORMAT_VOID
):

1200 
	`PACK
(1, 16, 
SAMPLEFORMAT_INT
):

1201 
	`PACK
(1, 16, 
SAMPLEFORMAT_UINT
):

1202  (
SGILOGDATAFMT_16BIT
);

1203 
	`PACK
(1, 8, 
SAMPLEFORMAT_VOID
):

1204 
	`PACK
(1, 8, 
SAMPLEFORMAT_UINT
):

1205  (
SGILOGDATAFMT_8BIT
);

1207 #unde‡
PACK


1208  (
SGILOGDATAFMT_UNKNOWN
);

1209 
	}
}

1211 
tmsize_t


1212 
	$mu…ùly_ms
(
tmsize_t
 
m1
,Åmsize_à
m2
)

1214 
tmsize_t
 
byãs
 = 
m1
 * 
m2
;

1216 i‡(
m1
 && 
byãs
 / m1 !
m2
)

1217 
byãs
 = 0;

1219  
byãs
;

1220 
	}
}

1223 
	$LogL16InôSèã
(
TIFF
* 
tif
)

1225 c⁄° 
moduÀ
[] = "LogL16InitState";

1226 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

1227 
LogLuvSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

1229 
	`as£π
(
•
 !
NULL
);

1230 
	`as£π
(
td
->
td_phŸomëric
 =
PHOTOMETRIC_LOGL
);

1233 i‡(
•
->
u£r_d©afmt
 =
SGILOGDATAFMT_UNKNOWN
)

1234 
•
->
u£r_d©afmt
 = 
	`LogL16GuessD©aFmt
(
td
);

1235 
•
->
u£r_d©afmt
) {

1236 
SGILOGDATAFMT_FLOAT
:

1237 
•
->
pixñ_size
 =  ();

1239 
SGILOGDATAFMT_16BIT
:

1240 
•
->
pixñ_size
 =  (
öt16
);

1242 
SGILOGDATAFMT_8BIT
:

1243 
•
->
pixñ_size
 =  (
uöt8
);

1246 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1250 if–
	`isTûed
(
tif
) )

1251 
•
->
tbuÊí
 = 
	`mu…ùly_ms
(
td
->
td_tûewidth
,Åd->
td_tûñígth
);

1253 
•
->
tbuÊí
 = 
	`mu…ùly_ms
(
td
->
td_imagewidth
,Åd->
td_row•î°rù
);

1254 i‡(
	`mu…ùly_ms
(
•
->
tbuÊí
,  (
öt16
)) == 0 ||

1255 (
•
->
tbuf
 = (
uöt8
*Ë
	`_TIFFmÆloc
(•->
tbuÊí
 *  (
öt16
))Ë=
NULL
) {

1256 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "No space for SGILogÅranslation buffer");

1260 
	}
}

1263 
	$LogLuvGuessD©aFmt
(
TIFFDúe˘‹y
 *
td
)

1265 
guess
;

1271 
	#PACK
(
a
,
b
Ë((◊)<<3)|(b))

	)

1272 
	`PACK
(
td
->
td_bô•îßm∂e
,Åd->
td_ßm∂ef‹m©
)) {

1273 
	`PACK
(32, 
SAMPLEFORMAT_IEEEFP
):

1274 
guess
 = 
SGILOGDATAFMT_FLOAT
;

1276 
	`PACK
(32, 
SAMPLEFORMAT_VOID
):

1277 
	`PACK
(32, 
SAMPLEFORMAT_UINT
):

1278 
	`PACK
(32, 
SAMPLEFORMAT_INT
):

1279 
guess
 = 
SGILOGDATAFMT_RAW
;

1281 
	`PACK
(16, 
SAMPLEFORMAT_VOID
):

1282 
	`PACK
(16, 
SAMPLEFORMAT_INT
):

1283 
	`PACK
(16, 
SAMPLEFORMAT_UINT
):

1284 
guess
 = 
SGILOGDATAFMT_16BIT
;

1286 
	`PACK
–8, 
SAMPLEFORMAT_VOID
):

1287 
	`PACK
–8, 
SAMPLEFORMAT_UINT
):

1288 
guess
 = 
SGILOGDATAFMT_8BIT
;

1291 
guess
 = 
SGILOGDATAFMT_UNKNOWN
;

1293 #unde‡
PACK


1298 
td
->
td_ßm∂e•îpixñ
) {

1300 i‡(
guess
 !
SGILOGDATAFMT_RAW
)

1301 
guess
 = 
SGILOGDATAFMT_UNKNOWN
;

1304 i‡(
guess
 =
SGILOGDATAFMT_RAW
)

1305 
guess
 = 
SGILOGDATAFMT_UNKNOWN
;

1308 
guess
 = 
SGILOGDATAFMT_UNKNOWN
;

1311  (
guess
);

1312 
	}
}

1315 
	$LogLuvInôSèã
(
TIFF
* 
tif
)

1317 c⁄° 
moduÀ
[] = "LogLuvInitState";

1318 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

1319 
LogLuvSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

1321 
	`as£π
(
•
 !
NULL
);

1322 
	`as£π
(
td
->
td_phŸomëric
 =
PHOTOMETRIC_LOGLUV
);

1325 i‡(
td
->
td_∂™¨c⁄fig
 !
PLANARCONFIG_CONTIG
) {

1326 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1330 i‡(
•
->
u£r_d©afmt
 =
SGILOGDATAFMT_UNKNOWN
)

1331 
•
->
u£r_d©afmt
 = 
	`LogLuvGuessD©aFmt
(
td
);

1332 
•
->
u£r_d©afmt
) {

1333 
SGILOGDATAFMT_FLOAT
:

1334 
•
->
pixñ_size
 = 3* ();

1336 
SGILOGDATAFMT_16BIT
:

1337 
•
->
pixñ_size
 = 3* (
öt16
);

1339 
SGILOGDATAFMT_RAW
:

1340 
•
->
pixñ_size
 =  (
uöt32
);

1342 
SGILOGDATAFMT_8BIT
:

1343 
•
->
pixñ_size
 = 3* (
uöt8
);

1346 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1350 if–
	`isTûed
(
tif
) )

1351 
•
->
tbuÊí
 = 
	`mu…ùly_ms
(
td
->
td_tûewidth
,Åd->
td_tûñígth
);

1353 
•
->
tbuÊí
 = 
	`mu…ùly_ms
(
td
->
td_imagewidth
,Åd->
td_row•î°rù
);

1354 i‡(
	`mu…ùly_ms
(
•
->
tbuÊí
,  (
uöt32
)) == 0 ||

1355 (
•
->
tbuf
 = (
uöt8
*Ë
	`_TIFFmÆloc
(•->
tbuÊí
 *  (
uöt32
))Ë=
NULL
) {

1356 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "No space for SGILogÅranslation buffer");

1360 
	}
}

1363 
	$LogLuvFixupTags
(
TIFF
* 
tif
)

1365 (Ë
tif
;

1367 
	}
}

1370 
	$LogLuvSëupDecode
(
TIFF
* 
tif
)

1372 c⁄° 
moduÀ
[] = "LogLuvSetupDecode";

1373 
LogLuvSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

1374 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

1376 
tif
->
tif_po°decode
 = 
_TIFFNoPo°Decode
;

1377 
td
->
td_phŸomëric
) {

1378 
PHOTOMETRIC_LOGLUV
:

1379 i‡(!
	`LogLuvInôSèã
(
tif
))

1381 i‡(
td
->
td_com¥essi⁄
 =
COMPRESSION_SGILOG24
) {

1382 
tif
->
tif_decodîow
 = 
LogLuvDecode24
;

1383 
•
->
u£r_d©afmt
) {

1384 
SGILOGDATAFMT_FLOAT
:

1385 
•
->
tfunc
 = 
Luv24toXYZ
;

1387 
SGILOGDATAFMT_16BIT
:

1388 
•
->
tfunc
 = 
Luv24toLuv48
;

1390 
SGILOGDATAFMT_8BIT
:

1391 
•
->
tfunc
 = 
Luv24toRGB
;

1395 
tif
->
tif_decodîow
 = 
LogLuvDecode32
;

1396 
•
->
u£r_d©afmt
) {

1397 
SGILOGDATAFMT_FLOAT
:

1398 
•
->
tfunc
 = 
Luv32toXYZ
;

1400 
SGILOGDATAFMT_16BIT
:

1401 
•
->
tfunc
 = 
Luv32toLuv48
;

1403 
SGILOGDATAFMT_8BIT
:

1404 
•
->
tfunc
 = 
Luv32toRGB
;

1409 
PHOTOMETRIC_LOGL
:

1410 i‡(!
	`LogL16InôSèã
(
tif
))

1412 
tif
->
tif_decodîow
 = 
LogL16Decode
;

1413 
•
->
u£r_d©afmt
) {

1414 
SGILOGDATAFMT_FLOAT
:

1415 
•
->
tfunc
 = 
L16toY
;

1417 
SGILOGDATAFMT_8BIT
:

1418 
•
->
tfunc
 = 
L16toGry
;

1423 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1425 
td
->
td_phŸomëric
, "must beÉither LogLUV or LogL");

1429 
	}
}

1432 
	$LogLuvSëupEncode
(
TIFF
* 
tif
)

1434 c⁄° 
moduÀ
[] = "LogLuvSetupEncode";

1435 
LogLuvSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

1436 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

1438 
td
->
td_phŸomëric
) {

1439 
PHOTOMETRIC_LOGLUV
:

1440 i‡(!
	`LogLuvInôSèã
(
tif
))

1442 i‡(
td
->
td_com¥essi⁄
 =
COMPRESSION_SGILOG24
) {

1443 
tif
->
tif_ícodîow
 = 
LogLuvEncode24
;

1444 
•
->
u£r_d©afmt
) {

1445 
SGILOGDATAFMT_FLOAT
:

1446 
•
->
tfunc
 = 
Luv24‰omXYZ
;

1448 
SGILOGDATAFMT_16BIT
:

1449 
•
->
tfunc
 = 
Luv24‰omLuv48
;

1451 
SGILOGDATAFMT_RAW
:

1454 
nŸsuµ‹ãd
;

1457 
tif
->
tif_ícodîow
 = 
LogLuvEncode32
;

1458 
•
->
u£r_d©afmt
) {

1459 
SGILOGDATAFMT_FLOAT
:

1460 
•
->
tfunc
 = 
Luv32‰omXYZ
;

1462 
SGILOGDATAFMT_16BIT
:

1463 
•
->
tfunc
 = 
Luv32‰omLuv48
;

1465 
SGILOGDATAFMT_RAW
:

1468 
nŸsuµ‹ãd
;

1472 
PHOTOMETRIC_LOGL
:

1473 i‡(!
	`LogL16InôSèã
(
tif
))

1475 
tif
->
tif_ícodîow
 = 
LogL16Encode
;

1476 
•
->
u£r_d©afmt
) {

1477 
SGILOGDATAFMT_FLOAT
:

1478 
•
->
tfunc
 = 
L16‰omY
;

1480 
SGILOGDATAFMT_16BIT
:

1483 
nŸsuµ‹ãd
;

1487 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1489 
td
->
td_phŸomëric
, "must beÉither LogLUV or LogL");

1493 
nŸsuµ‹ãd
:

1494 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1496 
td
->
td_phŸomëric
 =
PHOTOMETRIC_LOGL
 ? "Y, L" : "XYZ, Luv");

1498 
	}
}

1501 
	$LogLuvClo£
(
TIFF
* 
tif
)

1503 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

1512 
td
->
td_ßm∂e•îpixñ
 =

1513 (
td
->
td_phŸomëric
 =
PHOTOMETRIC_LOGL
) ? 1 : 3;

1514 
td
->
td_bô•îßm∂e
 = 16;

1515 
td
->
td_ßm∂ef‹m©
 = 
SAMPLEFORMAT_INT
;

1516 
	}
}

1519 
	$LogLuvCÀ™up
(
TIFF
* 
tif
)

1521 
LogLuvSèã
* 
•
 = (LogLuvSèã *)
tif
->
tif_d©a
;

1523 
	`as£π
(
•
 != 0);

1525 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
•
->
vgë∑ª¡
;

1526 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
•
->
v£ç¨ít
;

1528 i‡(
•
->
tbuf
)

1529 
	`_TIFF‰ì
(
•
->
tbuf
);

1530 
	`_TIFF‰ì
(
•
);

1531 
tif
->
tif_d©a
 = 
NULL
;

1533 
	`_TIFFSëDeÁu…Com¥essi⁄Sèã
(
tif
);

1534 
	}
}

1537 
	$LogLuvVSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

1539 c⁄° 
moduÀ
[] = "LogLuvVSetField";

1540 
LogLuvSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

1541 
bps
, 
fmt
;

1543 
èg
) {

1544 
TIFFTAG_SGILOGDATAFMT
:

1545 
•
->
u£r_d©afmt
 = (Ë
	`va_¨g
(
≠
, );

1552 
•
->
u£r_d©afmt
) {

1553 
SGILOGDATAFMT_FLOAT
:

1554 
bps
 = 32, 
fmt
 = 
SAMPLEFORMAT_IEEEFP
;

1556 
SGILOGDATAFMT_16BIT
:

1557 
bps
 = 16, 
fmt
 = 
SAMPLEFORMAT_INT
;

1559 
SGILOGDATAFMT_RAW
:

1560 
bps
 = 32, 
fmt
 = 
SAMPLEFORMAT_UINT
;

1561 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 1);

1563 
SGILOGDATAFMT_8BIT
:

1564 
bps
 = 8, 
fmt
 = 
SAMPLEFORMAT_UINT
;

1567 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

1569 
•
->
u£r_d©afmt
);

1572 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 
bps
);

1573 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLEFORMAT
, 
fmt
);

1577 
tif
->
tif_tûesize
 = 
	`isTûed
—ifË? 
	`TIFFTûeSize
—ifË: (
tmsize_t
) -1;

1578 
tif
->
tif_sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(tif);

1580 
TIFFTAG_SGILOGENCODE
:

1581 
•
->
ícode_mëh
 = (Ë
	`va_¨g
(
≠
, );

1582 i‡(
•
->
ícode_mëh
 !
SGILOGENCODE_NODITHER
 &&

1583 
•
->
ícode_mëh
 !
SGILOGENCODE_RANDITHER
) {

1584 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1586 
•
->
ícode_mëh
);

1591  (*
•
->
v£ç¨ít
)(
tif
, 
èg
, 
≠
);

1593 
	}
}

1596 
	$LogLuvVGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

1598 
LogLuvSèã
 *
•
 = (LogLuvSèã *)
tif
->
tif_d©a
;

1600 
èg
) {

1601 
TIFFTAG_SGILOGDATAFMT
:

1602 *
	`va_¨g
(
≠
, *Ë
•
->
u£r_d©afmt
;

1605  (*
•
->
vgë∑ª¡
)(
tif
, 
èg
, 
≠
);

1607 
	}
}

1609 c⁄° 
TIFFFõld
 
	gLogLuvFõlds
[] = {

1610 { 
TIFFTAG_SGILOGDATAFMT
, 0, 0, 
TIFF_SHORT
, 0, 
TIFF_SETGET_INT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PSEUDO
, 
TRUE
, 
FALSE
, "SGILogD©aFmt", 
NULL
},

1611 { 
TIFFTAG_SGILOGENCODE
, 0, 0, 
TIFF_SHORT
, 0, 
TIFF_SETGET_INT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PSEUDO
, 
TRUE
, 
FALSE
, "SGILogEncode", 
NULL
}

1615 
	$TIFFInôSGILog
(
TIFF
* 
tif
, 
scheme
)

1617 c⁄° 
moduÀ
[] = "TIFFInitSGILog";

1618 
LogLuvSèã
* 
•
;

1620 
	`as£π
(
scheme
 =
COMPRESSION_SGILOG24
 || schemê=
COMPRESSION_SGILOG
);

1625 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
LogLuvFõlds
,

1626 
	`TIFFAºayCou¡
(
LogLuvFõlds
))) {

1627 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1635 
tif
->
tif_d©a
 = (
uöt8
*Ë
	`_TIFFmÆloc
( (
LogLuvSèã
));

1636 i‡(
tif
->
tif_d©a
 =
NULL
)

1637 
bad
;

1638 
•
 = (
LogLuvSèã
*Ë
tif
->
tif_d©a
;

1639 
	`_TIFFmem£t
((*)
•
, 0,  (*sp));

1640 
•
->
u£r_d©afmt
 = 
SGILOGDATAFMT_UNKNOWN
;

1641 
•
->
ícode_mëh
 = (
scheme
 =
COMPRESSION_SGILOG24
) ?

1642 
SGILOGENCODE_RANDITHER
 : 
SGILOGENCODE_NODITHER
;

1643 
•
->
tfunc
 = 
_logLuvN›
;

1650 
tif
->
tif_fixu±ags
 = 
LogLuvFixupTags
;

1651 
tif
->
tif_£tupdecode
 = 
LogLuvSëupDecode
;

1652 
tif
->
tif_decode°rù
 = 
LogLuvDecodeSåù
;

1653 
tif
->
tif_decodëûe
 = 
LogLuvDecodeTûe
;

1654 
tif
->
tif_£tu≥ncode
 = 
LogLuvSëupEncode
;

1655 
tif
->
tif_ícode°rù
 = 
LogLuvEncodeSåù
;

1656 
tif
->
tif_ícodëûe
 = 
LogLuvEncodeTûe
;

1657 
tif
->
tif_˛o£
 = 
LogLuvClo£
;

1658 
tif
->
tif_˛ónup
 = 
LogLuvCÀ™up
;

1663 
•
->
vgë∑ª¡
 = 
tif
->
tif_ègmëhods
.
vgëfõld
;

1664 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
LogLuvVGëFõld
;

1665 
•
->
v£ç¨ít
 = 
tif
->
tif_ègmëhods
.
v£tfõld
;

1666 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
LogLuvVSëFõld
;

1669 
bad
:

1670 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1671 "%s: Nÿ•a˚ f‹ LogLuv sèã block", 
tif
->
tif_«me
);

1673 
	}
}

	@libtiff/tif_lzma.c

26 
	~"tiffi›.h
"

27 #ifde‡
LZMA_SUPPORT


38 
	~"tif_¥edi˘.h
"

39 
	~"lzma.h
"

41 
	~<°dio.h
>

47 
TIFFPªdi˘‹Sèã
 
	m¥edi˘
;

48 
lzma_°ªam
 
	m°ªam
;

49 
lzma_fûãr
 
	mfûãrs
[
LZMA_FILTERS_MAX
 + 1];

50 
lzma_›ti⁄s_dñè
 
	m›t_dñè
;

51 
lzma_›ti⁄s_lzma
 
	m›t_lzma
;

52 
	m¥e£t
;

53 
lzma_check
 
	mcheck
;

54 
	m°©e
;

55 
	#LSTATE_INIT_DECODE
 0x01

	)

56 
	#LSTATE_INIT_ENCODE
 0x02

	)

58 
TIFFVGëMëhod
 
	mvgë∑ª¡
;

59 
TIFFVSëMëhod
 
	mv£ç¨ít
;

60 } 
	tLZMASèã
;

62 
	#LSèã
(
tif
Ë((
LZMASèã
*Ë—if)->
tif_d©a
)

	)

63 
	#DecodîSèã
(
tif
Ë
	`LSèã
—if)

	)

64 
	#EncodîSèã
(
tif
Ë
	`LSèã
—if)

	)

66 
LZMAEncode
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

67 
LZMADecode
(
TIFF
* 
tif
, 
uöt8
* 
›
, 
tmsize_t
 
occ
, 
uöt16
 
s
);

70 
	$LZMASåîr‹
(
lzma_ªt
 
ªt
)

72 
ªt
) {

73 
LZMA_OK
:

75 
LZMA_STREAM_END
:

77 
LZMA_NO_CHECK
:

79 
LZMA_UNSUPPORTED_CHECK
:

81 
LZMA_GET_CHECK
:

83 
LZMA_MEM_ERROR
:

85 
LZMA_MEMLIMIT_ERROR
:

87 
LZMA_FORMAT_ERROR
:

89 
LZMA_OPTIONS_ERROR
:

91 
LZMA_DATA_ERROR
:

93 
LZMA_BUF_ERROR
:

95 
LZMA_PROG_ERROR
:

100 
	}
}

103 
	$LZMAFixupTags
(
TIFF
* 
tif
)

105 (Ë
tif
;

107 
	}
}

110 
	$LZMASëupDecode
(
TIFF
* 
tif
)

112 
LZMASèã
* 
•
 = 
	`DecodîSèã
(
tif
);

114 
	`as£π
(
•
 !
NULL
);

117 i‡(
•
->
°©e
 & 
LSTATE_INIT_ENCODE
) {

118 
	`lzma_íd
(&
•
->
°ªam
);

119 
•
->
°©e
 = 0;

122 
•
->
°©e
 |
LSTATE_INIT_DECODE
;

124 
	}
}

130 
	$LZMAPªDecode
(
TIFF
* 
tif
, 
uöt16
 
s
)

132 c⁄° 
moduÀ
[] = "LZMAPreDecode";

133 
LZMASèã
* 
•
 = 
	`DecodîSèã
(
tif
);

134 
lzma_ªt
 
ªt
;

136 (Ë
s
;

137 
	`as£π
(
•
 !
NULL
);

139 if–(
•
->
°©e
 & 
LSTATE_INIT_DECODE
) == 0 )

140 
tif
->
	`tif_£tupdecode
(tif);

142 
•
->
°ªam
.
√xt_ö
 = 
tif
->
tif_øwd©a
;

143 
•
->
°ªam
.
avaû_ö
 = (
size_t
Ë
tif
->
tif_øwcc
;

144 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_ö
 !
tif
->
tif_øwcc
) {

145 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

154 
ªt
 = 
	`lzma_°ªam_decodî
(&
•
->
°ªam
, (
uöt64_t
)-1, 0);

155 i‡(
ªt
 !
LZMA_OK
) {

156 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

158 
	`LZMASåîr‹
(
ªt
));

162 
	}
}

165 
	$LZMADecode
(
TIFF
* 
tif
, 
uöt8
* 
›
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

167 c⁄° 
moduÀ
[] = "LZMADecode";

168 
LZMASèã
* 
•
 = 
	`DecodîSèã
(
tif
);

170 (Ë
s
;

171 
	`as£π
(
•
 !
NULL
);

172 
	`as£π
(
•
->
°©e
 =
LSTATE_INIT_DECODE
);

174 
•
->
°ªam
.
√xt_ö
 = 
tif
->
tif_øw˝
;

175 
•
->
°ªam
.
avaû_ö
 = (
size_t
Ë
tif
->
tif_øwcc
;

177 
•
->
°ªam
.
√xt_out
 = 
›
;

178 
•
->
°ªam
.
avaû_out
 = (
size_t
Ë
occ
;

179 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_out
 !
occ
) {

180 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

190 c⁄° 
uöt8_t
 *
√xt_ö
 = 
•
->
°ªam
.next_in;

191 
size_t
 
avaû_ö
 = 
•
->
°ªam
.avail_in;

193 
lzma_ªt
 
ªt
 = 
	`lzma_code
(&
•
->
°ªam
, 
LZMA_RUN
);

194 i‡(
ªt
 =
LZMA_STREAM_END
)

196 i‡(
ªt
 =
LZMA_MEMLIMIT_ERROR
) {

197 
lzma_ªt
 
r
 = 
	`lzma_°ªam_decodî
(&
•
->
°ªam
,

198 
	`lzma_memußge
(&
•
->
°ªam
), 0);

199 i‡(
r
 !
LZMA_OK
) {

200 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

202 
	`LZMASåîr‹
(
r
));

205 
•
->
°ªam
.
√xt_ö
 =Çext_in;

206 
•
->
°ªam
.
avaû_ö
 =ávail_in;

209 i‡(
ªt
 !
LZMA_OK
) {

210 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

212 (Ë
tif
->
tif_row
, 
	`LZMASåîr‹
(
ªt
));

215 } 
•
->
°ªam
.
avaû_out
 > 0);

216 i‡(
•
->
°ªam
.
avaû_out
 != 0) {

217 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

219 (Ë
tif
->
tif_row
, (Ë
•
->
°ªam
.
avaû_out
);

223 
tif
->
tif_øw˝
 = (
uöt8
 *)
•
->
°ªam
.
√xt_ö
;

224 
tif
->
tif_øwcc
 = 
•
->
°ªam
.
avaû_ö
;

227 
	}
}

230 
	$LZMASëupEncode
(
TIFF
* 
tif
)

232 
LZMASèã
* 
•
 = 
	`EncodîSèã
(
tif
);

234 
	`as£π
(
•
 !
NULL
);

235 i‡(
•
->
°©e
 & 
LSTATE_INIT_DECODE
) {

236 
	`lzma_íd
(&
•
->
°ªam
);

237 
•
->
°©e
 = 0;

240 
•
->
°©e
 |
LSTATE_INIT_ENCODE
;

242 
	}
}

248 
	$LZMAPªEncode
(
TIFF
* 
tif
, 
uöt16
 
s
)

250 c⁄° 
moduÀ
[] = "LZMAPreEncode";

251 
LZMASèã
 *
•
 = 
	`EncodîSèã
(
tif
);

253 (Ë
s
;

254 
	`as£π
(
•
 !
NULL
);

255 if–
•
->
°©e
 !
LSTATE_INIT_ENCODE
 )

256 
tif
->
	`tif_£tu≥ncode
(tif);

258 
•
->
°ªam
.
√xt_out
 = 
tif
->
tif_øwd©a
;

259 
•
->
°ªam
.
avaû_out
 = (
size_t
)
tif
->
tif_øwd©asize
;

260 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_out
 !
tif
->
tif_øwd©asize
) {

261 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

265  (
	`lzma_°ªam_ícodî
(&
•
->
°ªam
, sp->
fûãrs
, sp->
check
Ë=
LZMA_OK
);

266 
	}
}

272 
	$LZMAEncode
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

274 c⁄° 
moduÀ
[] = "LZMAEncode";

275 
LZMASèã
 *
•
 = 
	`EncodîSèã
(
tif
);

277 
	`as£π
(
•
 !
NULL
);

278 
	`as£π
(
•
->
°©e
 =
LSTATE_INIT_ENCODE
);

280 (Ë
s
;

281 
•
->
°ªam
.
√xt_ö
 = 
bp
;

282 
•
->
°ªam
.
avaû_ö
 = (
size_t
Ë
cc
;

283 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_ö
 !
cc
) {

284 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

289 
lzma_ªt
 
ªt
 = 
	`lzma_code
(&
•
->
°ªam
, 
LZMA_RUN
);

290 i‡(
ªt
 !
LZMA_OK
) {

291 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

293 (Ë
tif
->
tif_row
, 
	`LZMASåîr‹
(
ªt
));

296 i‡(
•
->
°ªam
.
avaû_out
 == 0) {

297 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
;

298 
	`TIFFFlushD©a1
(
tif
);

299 
•
->
°ªam
.
√xt_out
 = 
tif
->
tif_øwd©a
;

300 
•
->
°ªam
.
avaû_out
 = (
size_t
)
tif
->
tif_øwd©asize
;

302 } 
•
->
°ªam
.
avaû_ö
 > 0);

304 
	}
}

311 
	$LZMAPo°Encode
(
TIFF
* 
tif
)

313 c⁄° 
moduÀ
[] = "LZMAPostEncode";

314 
LZMASèã
 *
•
 = 
	`EncodîSèã
(
tif
);

315 
lzma_ªt
 
ªt
;

317 
•
->
°ªam
.
avaû_ö
 = 0;

319 
ªt
 = 
	`lzma_code
(&
•
->
°ªam
, 
LZMA_FINISH
);

320 
ªt
) {

321 
LZMA_STREAM_END
:

322 
LZMA_OK
:

323 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_out
 !
tif
->
tif_øwd©asize
) {

324 
tif
->
tif_øwcc
 =

325 
tif
->
tif_øwd©asize
 - 
•
->
°ªam
.
avaû_out
;

326 
	`TIFFFlushD©a1
(
tif
);

327 
•
->
°ªam
.
√xt_out
 = 
tif
->
tif_øwd©a
;

328 
•
->
°ªam
.
avaû_out
 = (
size_t
)
tif
->
tif_øwd©asize
;

332 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "LiblzmaÉrror: %s",

333 
	`LZMASåîr‹
(
ªt
));

336 } 
ªt
 !
LZMA_STREAM_END
);

338 
	}
}

341 
	$LZMACÀ™up
(
TIFF
* 
tif
)

343 
LZMASèã
* 
•
 = 
	`LSèã
(
tif
);

345 
	`as£π
(
•
 != 0);

347 ()
	`TIFFPªdi˘‹CÀ™up
(
tif
);

349 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
•
->
vgë∑ª¡
;

350 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
•
->
v£ç¨ít
;

352 i‡(
•
->
°©e
) {

353 
	`lzma_íd
(&
•
->
°ªam
);

354 
•
->
°©e
 = 0;

356 
	`_TIFF‰ì
(
•
);

357 
tif
->
tif_d©a
 = 
NULL
;

359 
	`_TIFFSëDeÁu…Com¥essi⁄Sèã
(
tif
);

360 
	}
}

363 
	$LZMAVSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

365 c⁄° 
moduÀ
[] = "LZMAVSetField";

366 
LZMASèã
* 
•
 = 
	`LSèã
(
tif
);

368 
èg
) {

369 
TIFFTAG_LZMAPRESET
:

370 
•
->
¥e£t
 = (Ë
	`va_¨g
(
≠
, );

371 
	`lzma_lzma_¥e£t
(&
•
->
›t_lzma
, sp->
¥e£t
);

372 i‡(
•
->
°©e
 & 
LSTATE_INIT_ENCODE
) {

373 
lzma_ªt
 
ªt
 = 
	`lzma_°ªam_ícodî
(&
•
->
°ªam
,

374 
•
->
fûãrs
,

375 
•
->
check
);

376 i‡(
ªt
 !
LZMA_OK
) {

377 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

379 
	`LZMASåîr‹
(
ªt
));

384  (*
•
->
v£ç¨ít
)(
tif
, 
èg
, 
≠
);

387 
	}
}

390 
	$LZMAVGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

392 
LZMASèã
* 
•
 = 
	`LSèã
(
tif
);

394 
èg
) {

395 
TIFFTAG_LZMAPRESET
:

396 *
	`va_¨g
(
≠
, *Ë
•
->
¥e£t
;

399  (*
•
->
vgë∑ª¡
)(
tif
, 
èg
, 
≠
);

402 
	}
}

404 c⁄° 
TIFFFõld
 
	glzmaFõlds
[] = {

405 { 
TIFFTAG_LZMAPRESET
, 0, 0, 
TIFF_ANY
, 0, 
TIFF_SETGET_INT
, 
TIFF_SETGET_UNDEFINED
,

406 
FIELD_PSEUDO
, 
TRUE
, 
FALSE
, "LZMA2 Com¥essi⁄ Pª£t", 
NULL
 },

410 
	$TIFFInôLZMA
(
TIFF
* 
tif
, 
scheme
)

412 c⁄° 
moduÀ
[] = "TIFFInitLZMA";

413 
LZMASèã
* 
•
;

414 
lzma_°ªam
 
tmp_°ªam
 = 
LZMA_STREAM_INIT
;

416 
	`as£π
–
scheme
 =
COMPRESSION_LZMA
 );

421 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
lzmaFõlds
, 
	`TIFFAºayCou¡
(lzmaFields))) {

422 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

430 
tif
->
tif_d©a
 = (
uöt8
*Ë
	`_TIFFmÆloc
((
LZMASèã
));

431 i‡(
tif
->
tif_d©a
 =
NULL
)

432 
bad
;

433 
•
 = 
	`LSèã
(
tif
);

434 
	`mem˝y
(&
•
->
°ªam
, &
tmp_°ªam
, (
lzma_°ªam
));

439 
•
->
vgë∑ª¡
 = 
tif
->
tif_ègmëhods
.
vgëfõld
;

440 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
LZMAVGëFõld
;

441 
•
->
v£ç¨ít
 = 
tif
->
tif_ègmëhods
.
v£tfõld
;

442 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
LZMAVSëFõld
;

445 
•
->
¥e£t
 = 
LZMA_PRESET_DEFAULT
;

446 
•
->
check
 = 
LZMA_CHECK_NONE
;

447 
•
->
°©e
 = 0;

450 
•
->
›t_dñè
.
ty≥
 = 
LZMA_DELTA_TYPE_BYTE
;

455 
•
->
›t_dñè
.
di°
 = (
tif
->
tif_dú
.
td_bô•îßm∂e
 % 8) ?

456 1 : 
tif
->
tif_dú
.
td_bô•îßm∂e
 / 8;

457 
•
->
fûãrs
[0].
id
 = 
LZMA_FILTER_DELTA
;

458 
•
->
fûãrs
[0].
›ti⁄s
 = &•->
›t_dñè
;

460 
	`lzma_lzma_¥e£t
(&
•
->
›t_lzma
, sp->
¥e£t
);

461 
•
->
fûãrs
[1].
id
 = 
LZMA_FILTER_LZMA2
;

462 
•
->
fûãrs
[1].
›ti⁄s
 = &•->
›t_lzma
;

464 
•
->
fûãrs
[2].
id
 = 
LZMA_VLI_UNKNOWN
;

465 
•
->
fûãrs
[2].
›ti⁄s
 = 
NULL
;

470 
tif
->
tif_fixu±ags
 = 
LZMAFixupTags
;

471 
tif
->
tif_£tupdecode
 = 
LZMASëupDecode
;

472 
tif
->
tif_¥edecode
 = 
LZMAPªDecode
;

473 
tif
->
tif_decodîow
 = 
LZMADecode
;

474 
tif
->
tif_decode°rù
 = 
LZMADecode
;

475 
tif
->
tif_decodëûe
 = 
LZMADecode
;

476 
tif
->
tif_£tu≥ncode
 = 
LZMASëupEncode
;

477 
tif
->
tif_¥ìncode
 = 
LZMAPªEncode
;

478 
tif
->
tif_po°ícode
 = 
LZMAPo°Encode
;

479 
tif
->
tif_ícodîow
 = 
LZMAEncode
;

480 
tif
->
tif_ícode°rù
 = 
LZMAEncode
;

481 
tif
->
tif_ícodëûe
 = 
LZMAEncode
;

482 
tif
->
tif_˛ónup
 = 
LZMACÀ™up
;

486 (Ë
	`TIFFPªdi˘‹Inô
(
tif
);

488 
bad
:

489 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

492 
	}
}

	@libtiff/tif_lzw.c

27 
	~"tiffi›.h
"

28 #ifde‡
LZW_SUPPORT


39 
	~"tif_¥edi˘.h
"

41 
	~<°dio.h
>

56 
	#LZW_COMPAT


	)

63 
	#LZW_CHECKEOS


	)

65 
	#MAXCODE
(
n
Ë((1L<<“))-1)

	)

70 
	#BITS_MIN
 9

	)

71 
	#BITS_MAX
 12

	)

73 
	#CODE_CLEAR
 256

	)

74 
	#CODE_EOI
 257

	)

75 
	#CODE_FIRST
 258

	)

76 
	#CODE_MAX
 
	`MAXCODE
(
BITS_MAX
)

	)

77 
	#HSIZE
 9001L

	)

78 
	#HSHIFT
 (13-8)

	)

79 #ifde‡
LZW_COMPAT


81 
	#CSIZE
 (
	`MAXCODE
(
BITS_MAX
)+1024L)

	)

83 
	#CSIZE
 (
	`MAXCODE
(
BITS_MAX
)+1L)

	)

92 
TIFFPªdi˘‹Sèã
 
	m¥edi˘
;

94 
	mnbôs
;

95 
	mmaxcode
;

96 
	m‰ì_ít
;

97 
	m√xtd©a
;

98 
	m√xtbôs
;

100 
	mrw_mode
;

101 } 
	tLZWBa£Sèã
;

103 
	#lzw_nbôs
 
ba£
.
nbôs


	)

104 
	#lzw_maxcode
 
ba£
.
maxcode


	)

105 
	#lzw_‰ì_ít
 
ba£
.
‰ì_ít


	)

106 
	#lzw_√xtd©a
 
ba£
.
√xtd©a


	)

107 
	#lzw_√xtbôs
 
ba£
.
√xtbôs


	)

112 
uöt16
 
	thcode_t
;

114 
	mhash
;

115 
hcode_t
 
	mcode
;

116 } 
	thash_t
;

121 
	scode_ít
 {

122 
code_ít
 *
	m√xt
;

123 
	mÀngth
;

124 
	mvÆue
;

125 
	mfú°ch¨
;

126 } 
	tcode_t
;

128 (*
	tdecodeFunc
)(
	tTIFF
*, 
	tuöt8
*, 
	ttmsize_t
, 
	tuöt16
);

131 
LZWBa£Sèã
 
ba£
;

134 
dec_nbôsmask
;

135 
dec_ª°¨t
;

136 #ifde‡
LZW_CHECKEOS


137 
uöt64
 
dec_bô¶e·
;

139 
decodeFunc
 
dec_decode
;

140 
code_t
* 
dec_codï
;

141 
code_t
* 
dec_ﬁdcodï
;

142 
code_t
* 
dec_‰ì_íç
;

143 
code_t
* 
dec_maxcodï
;

144 
code_t
* 
dec_codëab
;

147 
íc_ﬁdcode
;

148 
íc_checkpoöt
;

149 
	#CHECK_GAP
 10000

	)

150 
íc_øtio
;

151 
íc_öcou¡
;

152 
íc_outcou¡
;

153 
uöt8
* 
íc_øwlimô
;

154 
hash_t
* 
íc_hashèb
;

155 } 
	tLZWCodecSèã
;

157 
	#LZWSèã
(
tif
Ë((
LZWBa£Sèã
*Ë—if)->
tif_d©a
)

	)

158 
	#DecodîSèã
(
tif
Ë((
LZWCodecSèã
*Ë
	`LZWSèã
—if))

	)

159 
	#EncodîSèã
(
tif
Ë((
LZWCodecSèã
*Ë
	`LZWSèã
—if))

	)

161 
	`LZWDecode
(
TIFF
* 
tif
, 
uöt8
* 
›0
, 
tmsize_t
 
occ0
, 
uöt16
 
s
);

162 #ifde‡
LZW_COMPAT


163 
	`LZWDecodeCom∑t
(
TIFF
* 
tif
, 
uöt8
* 
›0
, 
tmsize_t
 
occ0
, 
uöt16
 
s
);

165 
	`˛_hash
(
LZWCodecSèã
*);

171 #ifde‡
LZW_CHECKEOS


176 
	#NextCode
(
_tif
, 
_•
, 
_bp
, 
_code
, 
_gë
) { \

177 i‡((
_•
)->
dec_bô¶e·
 < (
uöt64
)
nbôs
) { \

178 
	`TIFFW¨nögExt
(
_tif
->
tif_˛õ¡d©a
, 
moduÀ
, \

180 
_tif
->
tif_cur°rù
); \

181 
_code
 = 
CODE_EOI
; \

183 
	`_gë
(
_•
,
_bp
,
_code
); \

184 (
_•
)->
dec_bô¶e·
 -
nbôs
; \

186 
	}

	)
}

188 
	#NextCode
(
tif
, 
•
, 
bp
, 
code
, 
gë
Ë
	`gë
(•, bp, code)

	)

192 
	$LZWFixupTags
(
TIFF
* 
tif
)

194 (Ë
tif
;

196 
	}
}

199 
	$LZWSëupDecode
(
TIFF
* 
tif
)

201 c⁄° 
moduÀ
[] = "LZWSetupDecode";

202 
LZWCodecSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

203 
code
;

205 if–
•
 =
NULL
 )

211 
tif
->
tif_d©a
 = (
uöt8
*Ë
	`_TIFFmÆloc
((
LZWCodecSèã
));

212 i‡(
tif
->
tif_d©a
 =
NULL
)

214 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "No space for LZW state block");

218 
	`DecodîSèã
(
tif
)->
dec_codëab
 = 
NULL
;

219 
	`DecodîSèã
(
tif
)->
dec_decode
 = 
NULL
;

224 (Ë
	`TIFFPªdi˘‹Inô
(
tif
);

226 
•
 = 
	`DecodîSèã
(
tif
);

229 
	`as£π
(
•
 !
NULL
);

231 i‡(
•
->
dec_codëab
 =
NULL
) {

232 
•
->
dec_codëab
 = (
code_t
*)
	`_TIFFmÆloc
(
CSIZE
* (code_t));

233 i‡(
•
->
dec_codëab
 =
NULL
) {

234 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

241 
code
 = 255;

243 
•
->
dec_codëab
[
code
].
vÆue
 = code;

244 
•
->
dec_codëab
[
code
].
fú°ch¨
 = code;

245 
•
->
dec_codëab
[
code
].
Àngth
 = 1;

246 
•
->
dec_codëab
[
code
].
√xt
 = 
NULL
;

247 } 
code
--);

251 
	`_TIFFmem£t
(&
•
->
dec_codëab
[
CODE_CLEAR
], 0,

252 (
CODE_FIRST
 - 
CODE_CLEAR
Ë*  (
code_t
));

255 
	}
}

261 
	$LZWPªDecode
(
TIFF
* 
tif
, 
uöt16
 
s
)

263 c⁄° 
moduÀ
[] = "LZWPreDecode";

264 
LZWCodecSèã
 *
•
 = 
	`DecodîSèã
(
tif
);

266 (Ë
s
;

267 
	`as£π
(
•
 !
NULL
);

268 if–
•
->
dec_codëab
 =
NULL
 )

270 
tif
->
	`tif_£tupdecode
(Åif );

276 i‡(
tif
->
tif_øwd©a
[0] == 0 && (tif->tif_rawdata[1] & 0x1)) {

277 #ifde‡
LZW_COMPAT


278 i‡(!
•
->
dec_decode
) {

279 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

288 
tif
->
tif_decodîow
 = 
LZWDecodeCom∑t
;

289 
tif
->
tif_decode°rù
 = 
LZWDecodeCom∑t
;

290 
tif
->
tif_decodëûe
 = 
LZWDecodeCom∑t
;

296 (*
tif
->
tif_£tupdecode
)(tif);

297 
•
->
dec_decode
 = 
LZWDecodeCom∑t
;

299 
•
->
lzw_maxcode
 = 
	`MAXCODE
(
BITS_MIN
);

301 i‡(!
•
->
dec_decode
) {

302 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

304 
•
->
dec_decode
 = 
LZWDecode
;

309 
•
->
lzw_maxcode
 = 
	`MAXCODE
(
BITS_MIN
)-1;

310 
•
->
dec_decode
 = 
LZWDecode
;

312 
•
->
lzw_nbôs
 = 
BITS_MIN
;

313 
•
->
lzw_√xtbôs
 = 0;

314 
•
->
lzw_√xtd©a
 = 0;

316 
•
->
dec_ª°¨t
 = 0;

317 
•
->
dec_nbôsmask
 = 
	`MAXCODE
(
BITS_MIN
);

318 #ifde‡
LZW_CHECKEOS


319 
•
->
dec_bô¶e·
 = ((
uöt64
)
tif
->
tif_øwcc
) << 3;

321 
•
->
dec_‰ì_íç
 = sp->
dec_codëab
 + 
CODE_FIRST
;

329 
	`_TIFFmem£t
(
•
->
dec_‰ì_íç
, 0, (
CSIZE
-
CODE_FIRST
)* (
code_t
));

330 
•
->
dec_ﬁdcodï
 = &•->
dec_codëab
[-1];

331 
•
->
dec_maxcodï
 = &•->
dec_codëab
[•->
dec_nbôsmask
-1];

333 
	}
}

338 
	#GëNextCode
(
•
, 
bp
, 
code
) { \

339 
√xtd©a
 = (√xtd©a<<8Ë| *(
bp
)++; \

340 
√xtbôs
 += 8; \

341 i‡(
√xtbôs
 < 
nbôs
) { \

342 
√xtd©a
 = (√xtd©a<<8Ë| *(
bp
)++; \

343 
√xtbôs
 += 8; \

345 
code
 = (
hcode_t
)((
√xtd©a
 >> (
√xtbôs
-
nbôs
)Ë& 
nbôsmask
); \

346 
√xtbôs
 -
nbôs
; \

347 }

	)

350 
	$codeLo›
(
TIFF
* 
tif
, c⁄° * 
moduÀ
)

352 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

354 
tif
->
tif_row
);

355 
	}
}

358 
	$LZWDecode
(
TIFF
* 
tif
, 
uöt8
* 
›0
, 
tmsize_t
 
occ0
, 
uöt16
 
s
)

360 c⁄° 
moduÀ
[] = "LZWDecode";

361 
LZWCodecSèã
 *
•
 = 
	`DecodîSèã
(
tif
);

362 *
›
 = (*Ë
›0
;

363 
occ
 = (Ë
occ0
;

364 *
ç
;

365 *
bp
;

366 
hcode_t
 
code
;

367 
Àn
;

368 
nbôs
, 
√xtbôs
, 
√xtd©a
, 
nbôsmask
;

369 
code_t
 *
codï
, *
‰ì_íç
, *
maxcodï
, *
ﬁdcodï
;

371 (Ë
s
;

372 
	`as£π
(
•
 !
NULL
);

373 
	`as£π
(
•
->
dec_codëab
 !
NULL
);

378 i‡((
tmsize_t
Ë
occ
 !
occ0
)

383 i‡(
•
->
dec_ª°¨t
) {

384 
ªsidue
;

386 
codï
 = 
•
->
dec_codï
;

387 
ªsidue
 = 
codï
->
Àngth
 - 
•
->
dec_ª°¨t
;

388 i‡(
ªsidue
 > 
occ
) {

395 
•
->
dec_ª°¨t
 +
occ
;

397 
codï
 = codï->
√xt
;

398 } --
ªsidue
 > 
occ
 && 
codï
);

399 i‡(
codï
) {

400 
ç
 = 
›
 + 
occ
;

402 *--
ç
 = 
codï
->
vÆue
;

403 
codï
 = codï->
√xt
;

404 } --
occ
 && 
codï
);

411 
›
 +
ªsidue
, 
occ
 -=Ñesidue;

412 
ç
 = 
›
;

414 
t
;

415 --
ç
;

416 
t
 = 
codï
->
vÆue
;

417 
codï
 = codï->
√xt
;

418 *
ç
 = 
t
;

419 } --
ªsidue
 && 
codï
);

420 
•
->
dec_ª°¨t
 = 0;

423 
bp
 = (*)
tif
->
tif_øw˝
;

424 
nbôs
 = 
•
->
lzw_nbôs
;

425 
√xtd©a
 = 
•
->
lzw_√xtd©a
;

426 
√xtbôs
 = 
•
->
lzw_√xtbôs
;

427 
nbôsmask
 = 
•
->
dec_nbôsmask
;

428 
ﬁdcodï
 = 
•
->
dec_ﬁdcodï
;

429 
‰ì_íç
 = 
•
->
dec_‰ì_íç
;

430 
maxcodï
 = 
•
->
dec_maxcodï
;

432 
occ
 > 0) {

433 
	`NextCode
(
tif
, 
•
, 
bp
, 
code
, 
GëNextCode
);

434 i‡(
code
 =
CODE_EOI
)

436 i‡(
code
 =
CODE_CLEAR
) {

437 
‰ì_íç
 = 
•
->
dec_codëab
 + 
CODE_FIRST
;

438 
	`_TIFFmem£t
(
‰ì_íç
, 0,

439 (
CSIZE
 - 
CODE_FIRST
Ë*  (
code_t
));

440 
nbôs
 = 
BITS_MIN
;

441 
nbôsmask
 = 
	`MAXCODE
(
BITS_MIN
);

442 
maxcodï
 = 
•
->
dec_codëab
 + 
nbôsmask
-1;

443 
	`NextCode
(
tif
, 
•
, 
bp
, 
code
, 
GëNextCode
);

444 i‡(
code
 =
CODE_EOI
)

446 i‡(
code
 >
CODE_CLEAR
) {

447 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

449 
tif
->
tif_row
);

452 *
›
++ = ()
code
, 
occ
--;

453 
ﬁdcodï
 = 
•
->
dec_codëab
 + 
code
;

456 
codï
 = 
•
->
dec_codëab
 + 
code
;

461 i‡(
‰ì_íç
 < &
•
->
dec_codëab
[0] ||

462 
‰ì_íç
 >&
•
->
dec_codëab
[
CSIZE
]) {

463 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

465 
tif
->
tif_row
);

469 
‰ì_íç
->
√xt
 = 
ﬁdcodï
;

470 i‡(
‰ì_íç
->
√xt
 < &
•
->
dec_codëab
[0] ||

471 
‰ì_íç
->
√xt
 >&
•
->
dec_codëab
[
CSIZE
]) {

472 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

474 
tif
->
tif_row
);

477 
‰ì_íç
->
fú°ch¨
 = fªe_íç->
√xt
->firstchar;

478 
‰ì_íç
->
Àngth
 = fªe_íç->
√xt
->length+1;

479 
‰ì_íç
->
vÆue
 = (
codï
 < free_entp) ?

480 
codï
->
fú°ch¨
 : 
‰ì_íç
->firstchar;

481 i‡(++
‰ì_íç
 > 
maxcodï
) {

482 i‡(++
nbôs
 > 
BITS_MAX
)

483 
nbôs
 = 
BITS_MAX
;

484 
nbôsmask
 = 
	`MAXCODE
(
nbôs
);

485 
maxcodï
 = 
•
->
dec_codëab
 + 
nbôsmask
-1;

487 
ﬁdcodï
 = 
codï
;

488 i‡(
code
 >= 256) {

493 if(
codï
->
Àngth
 == 0) {

494 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

497 
tif
->
tif_row
);

500 i‡(
codï
->
Àngth
 > 
occ
) {

507 
•
->
dec_codï
 = 
codï
;

509 
codï
 = codï->
√xt
;

510 } 
codï
 && codï->
Àngth
 > 
occ
);

511 i‡(
codï
) {

512 
•
->
dec_ª°¨t
 = ()
occ
;

513 
ç
 = 
›
 + 
occ
;

515 *--
ç
 = 
codï
->
vÆue
;

516 
codï
 = codï->
√xt
;

517 } --
occ
 && 
codï
);

518 i‡(
codï
)

519 
	`codeLo›
(
tif
, 
moduÀ
);

523 
Àn
 = 
codï
->
Àngth
;

524 
ç
 = 
›
 + 
Àn
;

526 
t
;

527 --
ç
;

528 
t
 = 
codï
->
vÆue
;

529 
codï
 = codï->
√xt
;

530 *
ç
 = 
t
;

531 } 
codï
 && 
ç
 > 
›
);

532 i‡(
codï
) {

533 
	`codeLo›
(
tif
, 
moduÀ
);

536 
	`as£π
(
occ
 >
Àn
);

537 
›
 +
Àn
, 
occ
 -=Üen;

539 *
›
++ = ()
code
, 
occ
--;

542 
tif
->
tif_øw˝
 = (
uöt8
*Ë
bp
;

543 
•
->
lzw_nbôs
 = (Ë
nbôs
;

544 
•
->
lzw_√xtd©a
 = 
√xtd©a
;

545 
•
->
lzw_√xtbôs
 = 
√xtbôs
;

546 
•
->
dec_nbôsmask
 = 
nbôsmask
;

547 
•
->
dec_ﬁdcodï
 = 
ﬁdcodï
;

548 
•
->
dec_‰ì_íç
 = 
‰ì_íç
;

549 
•
->
dec_maxcodï
 = 
maxcodï
;

551 i‡(
occ
 > 0) {

552 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

553 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

555 
tif
->
tif_row
, (
__öt64
Ë
occ
);

557 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

559 
tif
->
tif_row
, (Ë
occ
);

564 
	}
}

566 #ifde‡
LZW_COMPAT


570 
	#GëNextCodeCom∑t
(
•
, 
bp
, 
code
) { \

571 
√xtd©a
 |(Ë*(
bp
)++ << 
√xtbôs
; \

572 
√xtbôs
 += 8; \

573 i‡(
√xtbôs
 < 
nbôs
) { \

574 
√xtd©a
 |(Ë*(
bp
)++ << 
√xtbôs
;\

575 
√xtbôs
 += 8; \

577 
code
 = (
hcode_t
)(
√xtd©a
 & 
nbôsmask
); \

578 
√xtd©a
 >>
nbôs
; \

579 
√xtbôs
 -
nbôs
; \

580 }

	)

583 
	$LZWDecodeCom∑t
(
TIFF
* 
tif
, 
uöt8
* 
›0
, 
tmsize_t
 
occ0
, 
uöt16
 
s
)

585 c⁄° 
moduÀ
[] = "LZWDecodeCompat";

586 
LZWCodecSèã
 *
•
 = 
	`DecodîSèã
(
tif
);

587 *
›
 = (*Ë
›0
;

588 
occ
 = (Ë
occ0
;

589 *
ç
;

590 *
bp
;

591 
code
, 
nbôs
;

592 
√xtbôs
, 
√xtd©a
, 
nbôsmask
;

593 
code_t
 *
codï
, *
‰ì_íç
, *
maxcodï
, *
ﬁdcodï
;

595 (Ë
s
;

596 
	`as£π
(
•
 !
NULL
);

601 i‡((
tmsize_t
Ë
occ
 !
occ0
)

607 i‡(
•
->
dec_ª°¨t
) {

608 
ªsidue
;

610 
codï
 = 
•
->
dec_codï
;

611 
ªsidue
 = 
codï
->
Àngth
 - 
•
->
dec_ª°¨t
;

612 i‡(
ªsidue
 > 
occ
) {

619 
•
->
dec_ª°¨t
 +
occ
;

621 
codï
 = codï->
√xt
;

622 } --
ªsidue
 > 
occ
);

623 
ç
 = 
›
 + 
occ
;

625 *--
ç
 = 
codï
->
vÆue
;

626 
codï
 = codï->
√xt
;

627 } --
occ
);

633 
›
 +
ªsidue
, 
occ
 -=Ñesidue;

634 
ç
 = 
›
;

636 *--
ç
 = 
codï
->
vÆue
;

637 
codï
 = codï->
√xt
;

638 } --
ªsidue
);

639 
•
->
dec_ª°¨t
 = 0;

642 
bp
 = (*)
tif
->
tif_øw˝
;

643 
nbôs
 = 
•
->
lzw_nbôs
;

644 
√xtd©a
 = 
•
->
lzw_√xtd©a
;

645 
√xtbôs
 = 
•
->
lzw_√xtbôs
;

646 
nbôsmask
 = 
•
->
dec_nbôsmask
;

647 
ﬁdcodï
 = 
•
->
dec_ﬁdcodï
;

648 
‰ì_íç
 = 
•
->
dec_‰ì_íç
;

649 
maxcodï
 = 
•
->
dec_maxcodï
;

651 
occ
 > 0) {

652 
	`NextCode
(
tif
, 
•
, 
bp
, 
code
, 
GëNextCodeCom∑t
);

653 i‡(
code
 =
CODE_EOI
)

655 i‡(
code
 =
CODE_CLEAR
) {

656 
‰ì_íç
 = 
•
->
dec_codëab
 + 
CODE_FIRST
;

657 
	`_TIFFmem£t
(
‰ì_íç
, 0,

658 (
CSIZE
 - 
CODE_FIRST
Ë*  (
code_t
));

659 
nbôs
 = 
BITS_MIN
;

660 
nbôsmask
 = 
	`MAXCODE
(
BITS_MIN
);

661 
maxcodï
 = 
•
->
dec_codëab
 + 
nbôsmask
;

662 
	`NextCode
(
tif
, 
•
, 
bp
, 
code
, 
GëNextCodeCom∑t
);

663 i‡(
code
 =
CODE_EOI
)

665 i‡(
code
 >
CODE_CLEAR
) {

666 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

668 
tif
->
tif_row
);

671 *
›
++ = 
code
, 
occ
--;

672 
ﬁdcodï
 = 
•
->
dec_codëab
 + 
code
;

675 
codï
 = 
•
->
dec_codëab
 + 
code
;

680 i‡(
‰ì_íç
 < &
•
->
dec_codëab
[0] ||

681 
‰ì_íç
 >&
•
->
dec_codëab
[
CSIZE
]) {

682 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

683 "C‹ru±ed LZWÅabÀáàsˇ∆öê%d", 
tif
->
tif_row
);

687 
‰ì_íç
->
√xt
 = 
ﬁdcodï
;

688 i‡(
‰ì_íç
->
√xt
 < &
•
->
dec_codëab
[0] ||

689 
‰ì_íç
->
√xt
 >&
•
->
dec_codëab
[
CSIZE
]) {

690 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

691 "C‹ru±ed LZWÅabÀáàsˇ∆öê%d", 
tif
->
tif_row
);

694 
‰ì_íç
->
fú°ch¨
 = fªe_íç->
√xt
->firstchar;

695 
‰ì_íç
->
Àngth
 = fªe_íç->
√xt
->length+1;

696 
‰ì_íç
->
vÆue
 = (
codï
 < free_entp) ?

697 
codï
->
fú°ch¨
 : 
‰ì_íç
->firstchar;

698 i‡(++
‰ì_íç
 > 
maxcodï
) {

699 i‡(++
nbôs
 > 
BITS_MAX
)

700 
nbôs
 = 
BITS_MAX
;

701 
nbôsmask
 = 
	`MAXCODE
(
nbôs
);

702 
maxcodï
 = 
•
->
dec_codëab
 + 
nbôsmask
;

704 
ﬁdcodï
 = 
codï
;

705 i‡(
code
 >= 256) {

710 if(
codï
->
Àngth
 == 0) {

711 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

714 
tif
->
tif_row
);

717 i‡(
codï
->
Àngth
 > 
occ
) {

724 
•
->
dec_codï
 = 
codï
;

726 
codï
 = codï->
√xt
;

727 } 
codï
->
Àngth
 > 
occ
);

728 
•
->
dec_ª°¨t
 = 
occ
;

729 
ç
 = 
›
 + 
occ
;

731 *--
ç
 = 
codï
->
vÆue
;

732 
codï
 = codï->
√xt
;

733 } --
occ
);

736 
	`as£π
(
occ
 >
codï
->
Àngth
);

737 
›
 +
codï
->
Àngth
, 
occ
 -= codep->length;

738 
ç
 = 
›
;

740 *--
ç
 = 
codï
->
vÆue
;

741 }  (
codï
 = codï->
√xt
Ë!
NULL
 );

743 *
›
++ = 
code
, 
occ
--;

746 
tif
->
tif_øw˝
 = (
uöt8
*Ë
bp
;

747 
•
->
lzw_nbôs
 = 
nbôs
;

748 
•
->
lzw_√xtd©a
 = 
√xtd©a
;

749 
•
->
lzw_√xtbôs
 = 
√xtbôs
;

750 
•
->
dec_nbôsmask
 = 
nbôsmask
;

751 
•
->
dec_ﬁdcodï
 = 
ﬁdcodï
;

752 
•
->
dec_‰ì_íç
 = 
‰ì_íç
;

753 
•
->
dec_maxcodï
 = 
maxcodï
;

755 i‡(
occ
 > 0) {

756 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

757 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

759 
tif
->
tif_row
, (
__öt64
Ë
occ
);

761 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

763 
tif
->
tif_row
, (Ë
occ
);

768 
	}
}

776 
	$LZWSëupEncode
(
TIFF
* 
tif
)

778 c⁄° 
moduÀ
[] = "LZWSetupEncode";

779 
LZWCodecSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

781 
	`as£π
(
•
 !
NULL
);

782 
•
->
íc_hashèb
 = (
hash_t
*Ë
	`_TIFFmÆloc
(
HSIZE
* (hash_t));

783 i‡(
•
->
íc_hashèb
 =
NULL
) {

784 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

789 
	}
}

795 
	$LZWPªEncode
(
TIFF
* 
tif
, 
uöt16
 
s
)

797 
LZWCodecSèã
 *
•
 = 
	`EncodîSèã
(
tif
);

799 (Ë
s
;

800 
	`as£π
(
•
 !
NULL
);

802 if–
•
->
íc_hashèb
 =
NULL
 )

804 
tif
->
	`tif_£tu≥ncode
(Åif );

807 
•
->
lzw_nbôs
 = 
BITS_MIN
;

808 
•
->
lzw_maxcode
 = 
	`MAXCODE
(
BITS_MIN
);

809 
•
->
lzw_‰ì_ít
 = 
CODE_FIRST
;

810 
•
->
lzw_√xtbôs
 = 0;

811 
•
->
lzw_√xtd©a
 = 0;

812 
•
->
íc_checkpoöt
 = 
CHECK_GAP
;

813 
•
->
íc_øtio
 = 0;

814 
•
->
íc_öcou¡
 = 0;

815 
•
->
íc_outcou¡
 = 0;

820 
•
->
íc_øwlimô
 = 
tif
->
tif_øwd©a
 +Åif->
tif_øwd©asize
-1 - 4;

821 
	`˛_hash
(
•
);

822 
•
->
íc_ﬁdcode
 = (
hcode_t
) -1;

824 
	}
}

826 
	#CALCRATIO
(
•
, 
øt
) { \

827 i‡(
öcou¡
 > 0x007fffff) { \

828 
øt
 = 
outcou¡
 >> 8; \

829 
øt
 = (øà=0 ? 0x7ffffff‡: 
öcou¡
/rat); \

831 
øt
 = (
öcou¡
<<8Ë/ 
outcou¡
; \

832 }

	)

833 
	#PutNextCode
(
›
, 
c
) { \

834 
√xtd©a
 = (√xtd©®<< 
nbôs
Ë| 
c
; \

835 
√xtbôs
 +
nbôs
; \

836 *
›
++ = ()(
√xtd©a
 >> (
√xtbôs
-8)); \

837 
√xtbôs
 -= 8; \

838 i‡(
√xtbôs
 >= 8) { \

839 *
›
++ = ()(
√xtd©a
 >> (
√xtbôs
-8)); \

840 
√xtbôs
 -= 8; \

842 
outcou¡
 +
nbôs
; \

843 }

	)

860 
	$LZWEncode
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

862 
LZWCodecSèã
 *
•
 = 
	`EncodîSèã
(
tif
);

863 
fcode
;

864 
hash_t
 *
hp
;

865 
h
, 
c
;

866 
hcode_t
 
ít
;

867 
di•
;

868 
öcou¡
, 
outcou¡
, 
checkpoöt
;

869 
√xtd©a
, 
√xtbôs
;

870 
‰ì_ít
, 
maxcode
, 
nbôs
;

871 
uöt8
* 
›
;

872 
uöt8
* 
limô
;

874 (Ë
s
;

875 i‡(
•
 =
NULL
)

878 
	`as£π
(
•
->
íc_hashèb
 !
NULL
);

883 
öcou¡
 = 
•
->
íc_öcou¡
;

884 
outcou¡
 = 
•
->
íc_outcou¡
;

885 
checkpoöt
 = 
•
->
íc_checkpoöt
;

886 
√xtd©a
 = 
•
->
lzw_√xtd©a
;

887 
√xtbôs
 = 
•
->
lzw_√xtbôs
;

888 
‰ì_ít
 = 
•
->
lzw_‰ì_ít
;

889 
maxcode
 = 
•
->
lzw_maxcode
;

890 
nbôs
 = 
•
->
lzw_nbôs
;

891 
›
 = 
tif
->
tif_øw˝
;

892 
limô
 = 
•
->
íc_øwlimô
;

893 
ít
 = 
•
->
íc_ﬁdcode
;

895 i‡(
ít
 =(
hcode_t
Ë-1 && 
cc
 > 0) {

901 
	`PutNextCode
(
›
, 
CODE_CLEAR
);

902 
ít
 = *
bp
++; 
cc
--; 
öcou¡
++;

904 
cc
 > 0) {

905 
c
 = *
bp
++; 
cc
--; 
öcou¡
++;

906 
fcode
 = (()
c
 << 
BITS_MAX
Ë+ 
ít
;

907 
h
 = (
c
 << 
HSHIFT
Ë^ 
ít
;

908 #ifde‡
_WINDOWS


912 i‡(
h
 >
HSIZE
)

913 
h
 -
HSIZE
;

915 
hp
 = &
•
->
íc_hashèb
[
h
];

916 i‡(
hp
->
hash
 =
fcode
) {

917 
ít
 = 
hp
->
code
;

920 i‡(
hp
->
hash
 >= 0) {

924 
di•
 = 
HSIZE
 - 
h
;

925 i‡(
h
 == 0)

926 
di•
 = 1;

932 i‡((
h
 -
di•
) < 0)

933 
h
 +
HSIZE
;

934 
hp
 = &
•
->
íc_hashèb
[
h
];

935 i‡(
hp
->
hash
 =
fcode
) {

936 
ít
 = 
hp
->
code
;

937 
hô
;

939 } 
hp
->
hash
 >= 0);

950 i‡(
›
 > 
limô
) {

951 
tif
->
tif_øwcc
 = (
tmsize_t
)(
›
 -Åif->
tif_øwd©a
);

952 
	`TIFFFlushD©a1
(
tif
);

953 
›
 = 
tif
->
tif_øwd©a
;

955 
	`PutNextCode
(
›
, 
ít
);

956 
ít
 = 
c
;

957 
hp
->
code
 = 
‰ì_ít
++;

958 
hp
->
hash
 = 
fcode
;

959 i‡(
‰ì_ít
 =
CODE_MAX
-1) {

961 
	`˛_hash
(
•
);

962 
•
->
íc_øtio
 = 0;

963 
öcou¡
 = 0;

964 
outcou¡
 = 0;

965 
‰ì_ít
 = 
CODE_FIRST
;

966 
	`PutNextCode
(
›
, 
CODE_CLEAR
);

967 
nbôs
 = 
BITS_MIN
;

968 
maxcode
 = 
	`MAXCODE
(
BITS_MIN
);

974 i‡(
‰ì_ít
 > 
maxcode
) {

975 
nbôs
++;

976 
	`as£π
(
nbôs
 <
BITS_MAX
);

977 
maxcode
 = (Ë
	`MAXCODE
(
nbôs
);

978 } i‡(
öcou¡
 >
checkpoöt
) {

979 
øt
;

986 
checkpoöt
 = 
öcou¡
+
CHECK_GAP
;

987 
	`CALCRATIO
(
•
, 
øt
);

988 i‡(
øt
 <
•
->
íc_øtio
) {

989 
	`˛_hash
(
•
);

990 
•
->
íc_øtio
 = 0;

991 
öcou¡
 = 0;

992 
outcou¡
 = 0;

993 
‰ì_ít
 = 
CODE_FIRST
;

994 
	`PutNextCode
(
›
, 
CODE_CLEAR
);

995 
nbôs
 = 
BITS_MIN
;

996 
maxcode
 = 
	`MAXCODE
(
BITS_MIN
);

998 
•
->
íc_øtio
 = 
øt
;

1001 
hô
:

1008 
•
->
íc_öcou¡
 = 
öcou¡
;

1009 
•
->
íc_outcou¡
 = 
outcou¡
;

1010 
•
->
íc_checkpoöt
 = 
checkpoöt
;

1011 
•
->
íc_ﬁdcode
 = 
ít
;

1012 
•
->
lzw_√xtd©a
 = 
√xtd©a
;

1013 
•
->
lzw_√xtbôs
 = 
√xtbôs
;

1014 
•
->
lzw_‰ì_ít
 = 
‰ì_ít
;

1015 
•
->
lzw_maxcode
 = 
maxcode
;

1016 
•
->
lzw_nbôs
 = 
nbôs
;

1017 
tif
->
tif_øw˝
 = 
›
;

1019 
	}
}

1026 
	$LZWPo°Encode
(
TIFF
* 
tif
)

1028 
LZWCodecSèã
 *
•
 = 
	`EncodîSèã
(
tif
);

1029 
uöt8
* 
›
 = 
tif
->
tif_øw˝
;

1030 
√xtbôs
 = 
•
->
lzw_√xtbôs
;

1031 
√xtd©a
 = 
•
->
lzw_√xtd©a
;

1032 
outcou¡
 = 
•
->
íc_outcou¡
;

1033 
nbôs
 = 
•
->
lzw_nbôs
;

1035 i‡(
›
 > 
•
->
íc_øwlimô
) {

1036 
tif
->
tif_øwcc
 = (
tmsize_t
)(
›
 -Åif->
tif_øwd©a
);

1037 
	`TIFFFlushD©a1
(
tif
);

1038 
›
 = 
tif
->
tif_øwd©a
;

1040 i‡(
•
->
íc_ﬁdcode
 !(
hcode_t
) -1) {

1041 
	`PutNextCode
(
›
, 
•
->
íc_ﬁdcode
);

1042 
•
->
íc_ﬁdcode
 = (
hcode_t
) -1;

1044 
	`PutNextCode
(
›
, 
CODE_EOI
);

1045 i‡(
√xtbôs
 > 0)

1046 *
›
++ = ()(
√xtd©a
 << (8-
√xtbôs
));

1047 
tif
->
tif_øwcc
 = (
tmsize_t
)(
›
 -Åif->
tif_øwd©a
);

1049 
	}
}

1055 
	$˛_hash
(
LZWCodecSèã
* 
•
)

1057 
hash_t
 *
hp
 = &
•
->
íc_hashèb
[
HSIZE
-1];

1058 
i
 = 
HSIZE
-8;

1061 
i
 -= 8;

1062 
hp
[-7].
hash
 = -1;

1063 
hp
[-6].
hash
 = -1;

1064 
hp
[-5].
hash
 = -1;

1065 
hp
[-4].
hash
 = -1;

1066 
hp
[-3].
hash
 = -1;

1067 
hp
[-2].
hash
 = -1;

1068 
hp
[-1].
hash
 = -1;

1069 
hp
[ 0].
hash
 = -1;

1070 
hp
 -= 8;

1071 } 
i
 >= 0);

1072 
i
 +8; i > 0; i--, 
hp
--)

1073 
hp
->
hash
 = -1;

1074 
	}
}

1077 
	$LZWCÀ™up
(
TIFF
* 
tif
)

1079 ()
	`TIFFPªdi˘‹CÀ™up
(
tif
);

1081 
	`as£π
(
tif
->
tif_d©a
 != 0);

1083 i‡(
	`DecodîSèã
(
tif
)->
dec_codëab
)

1084 
	`_TIFF‰ì
(
	`DecodîSèã
(
tif
)->
dec_codëab
);

1086 i‡(
	`EncodîSèã
(
tif
)->
íc_hashèb
)

1087 
	`_TIFF‰ì
(
	`EncodîSèã
(
tif
)->
íc_hashèb
);

1089 
	`_TIFF‰ì
(
tif
->
tif_d©a
);

1090 
tif
->
tif_d©a
 = 
NULL
;

1092 
	`_TIFFSëDeÁu…Com¥essi⁄Sèã
(
tif
);

1093 
	}
}

1096 
	$TIFFInôLZW
(
TIFF
* 
tif
, 
scheme
)

1098 c⁄° 
moduÀ
[] = "TIFFInitLZW";

1099 
	`as£π
(
scheme
 =
COMPRESSION_LZW
);

1103 
tif
->
tif_d©a
 = (
uöt8
*Ë
	`_TIFFmÆloc
( (
LZWCodecSèã
));

1104 i‡(
tif
->
tif_d©a
 =
NULL
)

1105 
bad
;

1106 
	`DecodîSèã
(
tif
)->
dec_codëab
 = 
NULL
;

1107 
	`DecodîSèã
(
tif
)->
dec_decode
 = 
NULL
;

1108 
	`EncodîSèã
(
tif
)->
íc_hashèb
 = 
NULL
;

1109 
	`LZWSèã
(
tif
)->
rw_mode
 =Åif->
tif_mode
;

1114 
tif
->
tif_fixu±ags
 = 
LZWFixupTags
;

1115 
tif
->
tif_£tupdecode
 = 
LZWSëupDecode
;

1116 
tif
->
tif_¥edecode
 = 
LZWPªDecode
;

1117 
tif
->
tif_decodîow
 = 
LZWDecode
;

1118 
tif
->
tif_decode°rù
 = 
LZWDecode
;

1119 
tif
->
tif_decodëûe
 = 
LZWDecode
;

1120 
tif
->
tif_£tu≥ncode
 = 
LZWSëupEncode
;

1121 
tif
->
tif_¥ìncode
 = 
LZWPªEncode
;

1122 
tif
->
tif_po°ícode
 = 
LZWPo°Encode
;

1123 
tif
->
tif_ícodîow
 = 
LZWEncode
;

1124 
tif
->
tif_ícode°rù
 = 
LZWEncode
;

1125 
tif
->
tif_ícodëûe
 = 
LZWEncode
;

1126 
tif
->
tif_˛ónup
 = 
LZWCÀ™up
;

1130 (Ë
	`TIFFPªdi˘‹Inô
(
tif
);

1132 
bad
:

1133 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1136 
	}
}

	@libtiff/tif_next.c

27 
	~"tiffi›.h
"

28 #ifde‡
NEXT_SUPPORT


35 
	#SETPIXEL
(
›
, 
v
) { \

36 
≈ixñs
++ & 3) { \

37 0: 
›
[0] = (Ë((
v
) << 6); ; \

38 1: 
›
[0] |(
v
) << 4; ; \

39 2: 
›
[0] |(
v
) << 2; ; \

40 3: *
›
++ |(
v
); ; \

42 }

	)

44 
	#LITERALROW
 0x00

	)

45 
	#LITERALSPAN
 0x40

	)

46 
	#WHITE
 ((1<<2)-1)

	)

49 
	$NeXTDecode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

51 c⁄° 
moduÀ
[] = "NeXTDecode";

52 *
bp
, *
›
;

53 
tmsize_t
 
cc
;

54 
uöt8
* 
row
;

55 
tmsize_t
 
sˇ∆öe
, 
n
;

57 (Ë
s
;

63 
›
 = (*Ë
buf
, 
cc
 = 
occ
; cc-- > 0;)

64 *
›
++ = 0xff;

66 
bp
 = (*)
tif
->
tif_øw˝
;

67 
cc
 = 
tif
->
tif_øwcc
;

68 
sˇ∆öe
 = 
tif
->
tif_sˇ∆öesize
;

69 i‡(
occ
 % 
sˇ∆öe
)

71 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Fractional scanlines cannot beÑead");

74 
row
 = 
buf
; 
occ
 > 0; oc¯-
sˇ∆öe
,Ñow += scanline) {

75 
n
 = *
bp
++, 
cc
--;

76 
n
) {

77 
LITERALROW
:

81 i‡(
cc
 < 
sˇ∆öe
)

82 
bad
;

83 
	`_TIFFmem˝y
(
row
, 
bp
, 
sˇ∆öe
);

84 
bp
 +
sˇ∆öe
;

85 
cc
 -
sˇ∆öe
;

87 
LITERALSPAN
: {

88 
tmsize_t
 
off
;

93 
off
 = (
bp
[0] * 256) + bp[1];

94 
n
 = (
bp
[2] * 256) + bp[3];

95 i‡(
cc
 < 4+
n
 || 
off
+¿> 
sˇ∆öe
)

96 
bad
;

97 
	`_TIFFmem˝y
(
row
+
off
, 
bp
+4, 
n
);

98 
bp
 +4+
n
;

99 
cc
 -4+
n
;

103 
uöt32
 
≈ixñs
 = 0, 
gªy
;

104 
uöt32
 
imagewidth
 = 
tif
->
tif_dú
.
td_imagewidth
;

112 
›
 = 
row
;

114 
gªy
 = (
uöt32
)((
n
>>6) & 0x3);

115 
n
 &= 0x3f;

121 
n
-- > 0 && 
≈ixñs
 < 
imagewidth
)

122 
	`SETPIXEL
(
›
, 
gªy
);

123 i‡(
≈ixñs
 >
imagewidth
)

125 i‡(
cc
 == 0)

126 
bad
;

127 
n
 = *
bp
++, 
cc
--;

133 
tif
->
tif_øw˝
 = (
uöt8
*Ë
bp
;

134 
tif
->
tif_øwcc
 = 
cc
;

136 
bad
:

137 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "NotÉnough data for scanline %ld",

138 (Ë
tif
->
tif_row
);

140 
	}
}

143 
	$TIFFInôNeXT
(
TIFF
* 
tif
, 
scheme
)

145 (Ë
scheme
;

146 
tif
->
tif_decodîow
 = 
NeXTDecode
;

147 
tif
->
tif_decode°rù
 = 
NeXTDecode
;

148 
tif
->
tif_decodëûe
 = 
NeXTDecode
;

150 
	}
}

	@libtiff/tif_ojpeg.c

123 
	#WIN32_LEAN_AND_MEAN


	)

124 
	#VC_EXTRALEAN


	)

126 
	~"tiffi›.h
"

127 #ifde‡
OJPEG_SUPPORT


152 
	#SETJMP
(
jbuf
Ë
	`£tjmp
(jbuf)

	)

153 
	#LONGJMP
(
jbuf
,
code
Ë
	`l⁄gjmp
(jbuf,code)

	)

154 
	#JMP_BUF
 
jmp_buf


	)

155 
	#OJPEG_BUFFER
 2048

	)

158 
	#JPEG_MARKER_SOF0
 0xC0

	)

159 
	#JPEG_MARKER_SOF1
 0xC1

	)

160 
	#JPEG_MARKER_SOF3
 0xC3

	)

161 
	#JPEG_MARKER_DHT
 0xC4

	)

162 
	#JPEG_MARKER_RST0
 0XD0

	)

163 
	#JPEG_MARKER_SOI
 0xD8

	)

164 
	#JPEG_MARKER_EOI
 0xD9

	)

165 
	#JPEG_MARKER_SOS
 0xDA

	)

166 
	#JPEG_MARKER_DQT
 0xDB

	)

167 
	#JPEG_MARKER_DRI
 0xDD

	)

168 
	#JPEG_MARKER_APP0
 0xE0

	)

169 
	#JPEG_MARKER_COM
 0xFE

	)

171 
	#FIELD_OJPEG_JPEGINTERCHANGEFORMAT
 (
FIELD_CODEC
+0)

	)

172 
	#FIELD_OJPEG_JPEGINTERCHANGEFORMATLENGTH
 (
FIELD_CODEC
+1)

	)

173 
	#FIELD_OJPEG_JPEGQTABLES
 (
FIELD_CODEC
+2)

	)

174 
	#FIELD_OJPEG_JPEGDCTABLES
 (
FIELD_CODEC
+3)

	)

175 
	#FIELD_OJPEG_JPEGACTABLES
 (
FIELD_CODEC
+4)

	)

176 
	#FIELD_OJPEG_JPEGPROC
 (
FIELD_CODEC
+5)

	)

177 
	#FIELD_OJPEG_JPEGRESTARTINTERVAL
 (
FIELD_CODEC
+6)

	)

179 c⁄° 
TIFFFõld
 
	goj≥gFõlds
[] = {

180 {
TIFFTAG_JPEGIFOFFSET
,1,1,
TIFF_LONG8
,0,
TIFF_SETGET_UINT64
,
TIFF_SETGET_UNDEFINED
,
FIELD_OJPEG_JPEGINTERCHANGEFORMAT
,
TRUE
,
FALSE
,"J≥gI¡îch™geF‹m©",
NULL
},

181 {
TIFFTAG_JPEGIFBYTECOUNT
,1,1,
TIFF_LONG8
,0,
TIFF_SETGET_UINT64
,
TIFF_SETGET_UNDEFINED
,
FIELD_OJPEG_JPEGINTERCHANGEFORMATLENGTH
,
TRUE
,
FALSE
,"J≥gI¡îch™geF‹m©Lígth",
NULL
},

182 {
TIFFTAG_JPEGQTABLES
,
TIFF_VARIABLE2
,TIFF_VARIABLE2,
TIFF_LONG8
,0,
TIFF_SETGET_C32_UINT64
,
TIFF_SETGET_UNDEFINED
,
FIELD_OJPEG_JPEGQTABLES
,
FALSE
,
TRUE
,"J≥gQTabÀs",
NULL
},

183 {
TIFFTAG_JPEGDCTABLES
,
TIFF_VARIABLE2
,TIFF_VARIABLE2,
TIFF_LONG8
,0,
TIFF_SETGET_C32_UINT64
,
TIFF_SETGET_UNDEFINED
,
FIELD_OJPEG_JPEGDCTABLES
,
FALSE
,
TRUE
,"J≥gDcTabÀs",
NULL
},

184 {
TIFFTAG_JPEGACTABLES
,
TIFF_VARIABLE2
,TIFF_VARIABLE2,
TIFF_LONG8
,0,
TIFF_SETGET_C32_UINT64
,
TIFF_SETGET_UNDEFINED
,
FIELD_OJPEG_JPEGACTABLES
,
FALSE
,
TRUE
,"J≥gAcTabÀs",
NULL
},

185 {
TIFFTAG_JPEGPROC
,1,1,
TIFF_SHORT
,0,
TIFF_SETGET_UINT16
,
TIFF_SETGET_UNDEFINED
,
FIELD_OJPEG_JPEGPROC
,
FALSE
,FALSE,"J≥gProc",
NULL
},

186 {
TIFFTAG_JPEGRESTARTINTERVAL
,1,1,
TIFF_SHORT
,0,
TIFF_SETGET_UINT16
,
TIFF_SETGET_UNDEFINED
,
FIELD_OJPEG_JPEGRESTARTINTERVAL
,
FALSE
,FALSE,"J≥gRe°¨tI¡îvÆ",
NULL
},

189 #i‚de‡
LIBJPEG_ENCAP_EXTERNAL


190 
	~<£tjmp.h
>

195 #ifde‡
FAR


196 #unde‡
FAR


205 #i‡
deföed
(
__BORLANDC__
Ë|| deföed(
__MINGW32__
)

206 
	#XMD_H
 1

	)

210 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__MINGW32__
)

211 #i‚de‡
__RPCNDR_H__


212 
	tboﬁón
;

214 
	#HAVE_BOOLEAN


	)

217 
	~"j≥glib.h
"

218 
	~"jîr‹.h
"

220 
j≥g_îr‹_mgr
 
	tj≥g_îr‹_mgr
;

221 
j≥g_comm⁄_°ru˘
 
	tj≥g_comm⁄_°ru˘
;

222 
j≥g_decom¥ess_°ru˘
 
	tj≥g_decom¥ess_°ru˘
;

223 
j≥g_sour˚_mgr
 
	tj≥g_sour˚_mgr
;

226 
	mosibsNŸSëYë
,

227 
	mosibsJ≥gI¡îch™geF‹m©
,

228 
	mosibsSåûe
,

229 
	mosibsEof


230 } 
	tOJPEGSèãInBuf„rSour˚
;

233 
	mososSoi
,

234 
	mososQTabÀ0
,
	mososQTabÀ1
,
	mososQTabÀ2
,
	mososQTabÀ3
,

235 
	mososDcTabÀ0
,
	mososDcTabÀ1
,
	mososDcTabÀ2
,
	mososDcTabÀ3
,

236 
	mososAcTabÀ0
,
	mososAcTabÀ1
,
	mososAcTabÀ2
,
	mososAcTabÀ3
,

237 
	mososDri
,

238 
	mososSof
,

239 
	mososSos
,

240 
	mososCom¥es£d
,

241 
	mososR°
,

242 
	mososEoi


243 } 
	tOJPEGSèãOutSèã
;

246 
TIFF
* 
	mtif
;

247 #i‚de‡
LIBJPEG_ENCAP_EXTERNAL


248 
JMP_BUF
 
	mexô_jmpbuf
;

250 
TIFFVGëMëhod
 
	mvgë∑ª¡
;

251 
TIFFVSëMëhod
 
	mv£ç¨ít
;

252 
TIFFPrötMëhod
 
	m¥ötdú
;

253 
uöt64
 
	mfûe_size
;

254 
uöt32
 
	mimage_width
;

255 
uöt32
 
	mimage_Àngth
;

256 
uöt32
 
	m°rûe_width
;

257 
uöt32
 
	m°rûe_Àngth
;

258 
uöt32
 
	m°rûe_Àngth_tŸÆ
;

259 
uöt8
 
	mßm∂es_≥r_pixñ
;

260 
uöt8
 
	m∂™e_ßm∂e_off£t
;

261 
uöt8
 
	mßm∂es_≥r_pixñ_≥r_∂™e
;

262 
uöt64
 
	mj≥g_öãrch™ge_f‹m©
;

263 
uöt64
 
	mj≥g_öãrch™ge_f‹m©_Àngth
;

264 
uöt8
 
	mj≥g_¥oc
;

265 
uöt8
 
	msubßm∂ögc‹ª˘
;

266 
uöt8
 
	msubßm∂ögc‹ª˘_d⁄e
;

267 
uöt8
 
	msubßm∂ög_èg
;

268 
uöt8
 
	msubßm∂ög_h‹
;

269 
uöt8
 
	msubßm∂ög_vî
;

270 
uöt8
 
	msubßm∂ög_f‹˚_desubßm∂ög_öside_decom¥essi⁄
;

271 
uöt8
 
	mqèbÀ_off£t_cou¡
;

272 
uöt8
 
	md˘abÀ_off£t_cou¡
;

273 
uöt8
 
	ma˘abÀ_off£t_cou¡
;

274 
uöt64
 
	mqèbÀ_off£t
[3];

275 
uöt64
 
	md˘abÀ_off£t
[3];

276 
uöt64
 
	ma˘abÀ_off£t
[3];

277 
uöt8
* 
	mqèbÀ
[4];

278 
uöt8
* 
	md˘abÀ
[4];

279 
uöt8
* 
	ma˘abÀ
[4];

280 
uöt16
 
	mª°¨t_öãrvÆ
;

281 
uöt8
 
	mª°¨t_ödex
;

282 
uöt8
 
	msof_log
;

283 
uöt8
 
	msof_m¨kî_id
;

284 
uöt32
 
	msof_x
;

285 
uöt32
 
	msof_y
;

286 
uöt8
 
	msof_c
[3];

287 
uöt8
 
	msof_hv
[3];

288 
uöt8
 
	msof_tq
[3];

289 
uöt8
 
	msos_cs
[3];

290 
uöt8
 
	msos_tda
[3];

292 
uöt8
 
	mlog
;

293 
OJPEGSèãInBuf„rSour˚
 
	mö_buf„r_sour˚
;

294 
uöt32
 
	mö_buf„r_√xt_°rûe
;

295 
uöt64
 
	mö_buf„r_fûe_pos
;

296 
uöt64
 
	mö_buf„r_fûe_togo
;

297 } 
	msos_íd
[3];

298 
uöt8
 
	mªadhódî_d⁄e
;

299 
uöt8
 
	mwrôehódî_d⁄e
;

300 
uöt16
 
	mwrôe_curßm∂e
;

301 
uöt32
 
	mwrôe_cur°rûe
;

302 
uöt8
 
	mlibj≥g_£ssi⁄_a˘ive
;

303 
uöt8
 
	mlibj≥g_j≥g_quîy_°yÀ
;

304 
j≥g_îr‹_mgr
 
	mlibj≥g_j≥g_îr‹_mgr
;

305 
j≥g_decom¥ess_°ru˘
 
	mlibj≥g_j≥g_decom¥ess_°ru˘
;

306 
j≥g_sour˚_mgr
 
	mlibj≥g_j≥g_sour˚_mgr
;

307 
uöt8
 
	msubßm∂ög_c⁄vît_log
;

308 
uöt32
 
	msubßm∂ög_c⁄vît_ylöñí
;

309 
uöt32
 
	msubßm∂ög_c⁄vît_ylöes
;

310 
uöt32
 
	msubßm∂ög_c⁄vît_˛öñí
;

311 
uöt32
 
	msubßm∂ög_c⁄vît_˛öes
;

312 
uöt32
 
	msubßm∂ög_c⁄vît_ybuÊí
;

313 
uöt32
 
	msubßm∂ög_c⁄vît_cbuÊí
;

314 
uöt32
 
	msubßm∂ög_c⁄vît_ycb¸buÊí
;

315 
uöt8
* 
	msubßm∂ög_c⁄vît_ycb¸buf
;

316 
uöt8
* 
	msubßm∂ög_c⁄vît_ybuf
;

317 
uöt8
* 
	msubßm∂ög_c⁄vît_cbbuf
;

318 
uöt8
* 
	msubßm∂ög_c⁄vît_¸buf
;

319 
uöt32
 
	msubßm∂ög_c⁄vît_ycb¸imagñí
;

320 
uöt8
** 
	msubßm∂ög_c⁄vît_ycb¸image
;

321 
uöt32
 
	msubßm∂ög_c⁄vît_˛öñíout
;

322 
uöt32
 
	msubßm∂ög_c⁄vît_°©e
;

323 
uöt32
 
	mbyãs_≥r_löe
;

324 
uöt32
 
	mlöes_≥r_°rûe
;

325 
OJPEGSèãInBuf„rSour˚
 
	mö_buf„r_sour˚
;

326 
uöt32
 
	mö_buf„r_√xt_°rûe
;

327 
uöt32
 
	mö_buf„r_°rûe_cou¡
;

328 
uöt64
 
	mö_buf„r_fûe_pos
;

329 
uöt8
 
	mö_buf„r_fûe_pos_log
;

330 
uöt64
 
	mö_buf„r_fûe_togo
;

331 
uöt16
 
	mö_buf„r_togo
;

332 
uöt8
* 
	mö_buf„r_cur
;

333 
uöt8
 
	mö_buf„r
[
OJPEG_BUFFER
];

334 
OJPEGSèãOutSèã
 
	mout_°©e
;

335 
uöt8
 
	mout_buf„r
[
OJPEG_BUFFER
];

336 
uöt8
* 
	mskù_buf„r
;

337 } 
	tOJPEGSèã
;

339 
OJPEGVGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
);

340 
OJPEGVSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
);

341 
OJPEGPrötDú
(
TIFF
* 
tif
, 
FILE
* 
fd
, 
Êags
);

343 
OJPEGFixupTags
(
TIFF
* 
tif
);

344 
OJPEGSëupDecode
(
TIFF
* 
tif
);

345 
OJPEGPªDecode
(
TIFF
* 
tif
, 
uöt16
 
s
);

346 
OJPEGPªDecodeSkùRaw
(
TIFF
* 
tif
);

347 
OJPEGPªDecodeSkùSˇ∆öes
(
TIFF
* 
tif
);

348 
OJPEGDecode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

349 
OJPEGDecodeRaw
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
);

350 
OJPEGDecodeSˇ∆öes
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
);

351 
OJPEGPo°Decode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
);

352 
OJPEGSëupEncode
(
TIFF
* 
tif
);

353 
OJPEGPªEncode
(
TIFF
* 
tif
, 
uöt16
 
s
);

354 
OJPEGEncode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

355 
OJPEGPo°Encode
(
TIFF
* 
tif
);

356 
OJPEGCÀ™up
(
TIFF
* 
tif
);

358 
OJPEGSubßm∂ögC‹ª˘
(
TIFF
* 
tif
);

359 
OJPEGRódHódîInfo
(
TIFF
* 
tif
);

360 
OJPEGRódSec⁄d¨ySos
(
TIFF
* 
tif
, 
uöt16
 
s
);

361 
OJPEGWrôeHódîInfo
(
TIFF
* 
tif
);

362 
OJPEGLibj≥gSessi⁄Ab‹t
(
TIFF
* 
tif
);

364 
OJPEGRódHódîInfoSec
(
TIFF
* 
tif
);

365 
OJPEGRódHódîInfoSecSåómDri
(
TIFF
* 
tif
);

366 
OJPEGRódHódîInfoSecSåómDqt
(
TIFF
* 
tif
);

367 
OJPEGRódHódîInfoSecSåómDht
(
TIFF
* 
tif
);

368 
OJPEGRódHódîInfoSecSåómSof
(
TIFF
* 
tif
, 
uöt8
 
m¨kî_id
);

369 
OJPEGRódHódîInfoSecSåómSos
(
TIFF
* 
tif
);

370 
OJPEGRódHódîInfoSecTabÀsQTabÀ
(
TIFF
* 
tif
);

371 
OJPEGRódHódîInfoSecTabÀsDcTabÀ
(
TIFF
* 
tif
);

372 
OJPEGRódHódîInfoSecTabÀsAcTabÀ
(
TIFF
* 
tif
);

374 
OJPEGRódBuf„rFûl
(
OJPEGSèã
* 
•
);

375 
OJPEGRódByã
(
OJPEGSèã
* 
•
, 
uöt8
* 
byã
);

376 
OJPEGRódByãPìk
(
OJPEGSèã
* 
•
, 
uöt8
* 
byã
);

377 
OJPEGRódByãAdv™˚
(
OJPEGSèã
* 
•
);

378 
OJPEGRódW‹d
(
OJPEGSèã
* 
•
, 
uöt16
* 
w‹d
);

379 
OJPEGRódBlock
(
OJPEGSèã
* 
•
, 
uöt16
 
Àn
, * 
mem
);

380 
OJPEGRódSkù
(
OJPEGSèã
* 
•
, 
uöt16
 
Àn
);

382 
OJPEGWrôeSåóm
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
);

383 
OJPEGWrôeSåómSoi
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
);

384 
OJPEGWrôeSåómQTabÀ
(
TIFF
* 
tif
, 
uöt8
 
èbÀ_ödex
, ** 
mem
, 
uöt32
* 
Àn
);

385 
OJPEGWrôeSåómDcTabÀ
(
TIFF
* 
tif
, 
uöt8
 
èbÀ_ödex
, ** 
mem
, 
uöt32
* 
Àn
);

386 
OJPEGWrôeSåómAcTabÀ
(
TIFF
* 
tif
, 
uöt8
 
èbÀ_ödex
, ** 
mem
, 
uöt32
* 
Àn
);

387 
OJPEGWrôeSåómDri
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
);

388 
OJPEGWrôeSåómSof
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
);

389 
OJPEGWrôeSåómSos
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
);

390 
OJPEGWrôeSåómCom¥es£d
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
);

391 
OJPEGWrôeSåómR°
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
);

392 
OJPEGWrôeSåómEoi
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
);

394 #ifde‡
LIBJPEG_ENCAP_EXTERNAL


395 
j≥g_¸óã_decom¥ess_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
);

396 
j≥g_ªad_hódî_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
, 
uöt8
 
ªquúe_image
);

397 
j≥g_°¨t_decom¥ess_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
);

398 
j≥g_ªad_sˇ∆öes_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
, * 
sˇ∆öes
, 
uöt32
 
max_löes
);

399 
j≥g_ªad_øw_d©a_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
, * 
d©a
, 
uöt32
 
max_löes
);

400 
j≥g_íˇp_unwöd
(
TIFF
* 
tif
);

402 
j≥g_¸óã_decom¥ess_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
j
);

403 
j≥g_ªad_hódî_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
, 
uöt8
 
ªquúe_image
);

404 
j≥g_°¨t_decom¥ess_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
);

405 
j≥g_ªad_sˇ∆öes_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
, * 
sˇ∆öes
, 
uöt32
 
max_löes
);

406 
j≥g_ªad_øw_d©a_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
, * 
d©a
, 
uöt32
 
max_löes
);

407 
j≥g_íˇp_unwöd
(
TIFF
* 
tif
);

410 
OJPEGLibj≥gJ≥gEº‹MgrOuçutMesßge
(
j≥g_comm⁄_°ru˘
* 
cöfo
);

411 
OJPEGLibj≥gJ≥gEº‹MgrEº‹Exô
(
j≥g_comm⁄_°ru˘
* 
cöfo
);

412 
OJPEGLibj≥gJ≥gSour˚MgrInôSour˚
(
j≥g_decom¥ess_°ru˘
* 
cöfo
);

413 
boﬁón
 
OJPEGLibj≥gJ≥gSour˚MgrFûlI≈utBuf„r
(
j≥g_decom¥ess_°ru˘
* 
cöfo
);

414 
OJPEGLibj≥gJ≥gSour˚MgrSkùI≈utD©a
(
j≥g_decom¥ess_°ru˘
* 
cöfo
, 
num_byãs
);

415 
boﬁón
 
OJPEGLibj≥gJ≥gSour˚MgrResyncToRe°¨t
(
j≥g_decom¥ess_°ru˘
* 
cöfo
, 
desúed
);

416 
OJPEGLibj≥gJ≥gSour˚MgrTîmSour˚
(
j≥g_decom¥ess_°ru˘
* 
cöfo
);

419 
	$TIFFInôOJPEG
(
TIFF
* 
tif
, 
scheme
)

421 c⁄° 
moduÀ
[]="TIFFInitOJPEG";

422 
OJPEGSèã
* 
•
;

424 
	`as£π
(
scheme
==
COMPRESSION_OJPEG
);

429 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
oj≥gFõlds
, 
	`TIFFAºayCou¡
(ojpegFields))) {

430 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

436 
•
=
	`_TIFFmÆloc
((
OJPEGSèã
));

437 i‡(
•
==
NULL
)

439 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"No space for OJPEG state block");

442 
	`_TIFFmem£t
(
•
,0,(
OJPEGSèã
));

443 
•
->
tif
=tif;

444 
•
->
j≥g_¥oc
=1;

445 
•
->
subßm∂ög_h‹
=2;

446 
•
->
subßm∂ög_vî
=2;

447 
	`TIFFSëFõld
(
tif
,
TIFFTAG_YCBCRSUBSAMPLING
,2,2);

449 
tif
->
tif_fixu±ags
=
OJPEGFixupTags
;

450 
tif
->
tif_£tupdecode
=
OJPEGSëupDecode
;

451 
tif
->
tif_¥edecode
=
OJPEGPªDecode
;

452 
tif
->
tif_po°decode
=
OJPEGPo°Decode
;

453 
tif
->
tif_decodîow
=
OJPEGDecode
;

454 
tif
->
tif_decode°rù
=
OJPEGDecode
;

455 
tif
->
tif_decodëûe
=
OJPEGDecode
;

456 
tif
->
tif_£tu≥ncode
=
OJPEGSëupEncode
;

457 
tif
->
tif_¥ìncode
=
OJPEGPªEncode
;

458 
tif
->
tif_po°ícode
=
OJPEGPo°Encode
;

459 
tif
->
tif_ícodîow
=
OJPEGEncode
;

460 
tif
->
tif_ícode°rù
=
OJPEGEncode
;

461 
tif
->
tif_ícodëûe
=
OJPEGEncode
;

462 
tif
->
tif_˛ónup
=
OJPEGCÀ™up
;

463 
tif
->
tif_d©a
=(
uöt8
*)
•
;

465 
•
->
vgë∑ª¡
=
tif
->
tif_ègmëhods
.
vgëfõld
;

466 
tif
->
tif_ègmëhods
.
vgëfõld
=
OJPEGVGëFõld
;

467 
•
->
v£ç¨ít
=
tif
->
tif_ègmëhods
.
v£tfõld
;

468 
tif
->
tif_ègmëhods
.
v£tfõld
=
OJPEGVSëFõld
;

469 
•
->
¥ötdú
=
tif
->
tif_ègmëhods
.printdir;

470 
tif
->
tif_ègmëhods
.
¥ötdú
=
OJPEGPrötDú
;

477 
tif
->
tif_Êags
|=
TIFF_NOREADRAW
;

479 
	}
}

482 
	$OJPEGVGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

484 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

485 
èg
)

487 
TIFFTAG_JPEGIFOFFSET
:

488 *
	`va_¨g
(
≠
,
uöt64
*)=(uöt64)
•
->
j≥g_öãrch™ge_f‹m©
;

490 
TIFFTAG_JPEGIFBYTECOUNT
:

491 *
	`va_¨g
(
≠
,
uöt64
*)=(uöt64)
•
->
j≥g_öãrch™ge_f‹m©_Àngth
;

493 
TIFFTAG_YCBCRSUBSAMPLING
:

494 i‡(
•
->
subßm∂ögc‹ª˘_d⁄e
==0)

495 
	`OJPEGSubßm∂ögC‹ª˘
(
tif
);

496 *
	`va_¨g
(
≠
,
uöt16
*)=(uöt16)
•
->
subßm∂ög_h‹
;

497 *
	`va_¨g
(
≠
,
uöt16
*)=(uöt16)
•
->
subßm∂ög_vî
;

499 
TIFFTAG_JPEGQTABLES
:

500 *
	`va_¨g
(
≠
,
uöt32
*)=(uöt32)
•
->
qèbÀ_off£t_cou¡
;

501 *
	`va_¨g
(
≠
,**)=(*)
•
->
qèbÀ_off£t
;

503 
TIFFTAG_JPEGDCTABLES
:

504 *
	`va_¨g
(
≠
,
uöt32
*)=(uöt32)
•
->
d˘abÀ_off£t_cou¡
;

505 *
	`va_¨g
(
≠
,**)=(*)
•
->
d˘abÀ_off£t
;

507 
TIFFTAG_JPEGACTABLES
:

508 *
	`va_¨g
(
≠
,
uöt32
*)=(uöt32)
•
->
a˘abÀ_off£t_cou¡
;

509 *
	`va_¨g
(
≠
,**)=(*)
•
->
a˘abÀ_off£t
;

511 
TIFFTAG_JPEGPROC
:

512 *
	`va_¨g
(
≠
,
uöt16
*)=(uöt16)
•
->
j≥g_¥oc
;

514 
TIFFTAG_JPEGRESTARTINTERVAL
:

515 *
	`va_¨g
(
≠
,
uöt16
*)=
•
->
ª°¨t_öãrvÆ
;

518  (*
•
->
vgë∑ª¡
)(
tif
,
èg
,
≠
);

521 
	}
}

524 
	$OJPEGVSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

526 c⁄° 
moduÀ
[]="OJPEGVSetField";

527 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

528 
uöt32
 
ma
;

529 
uöt64
* 
mb
;

530 
uöt32
 
n
;

531 
èg
)

533 
TIFFTAG_JPEGIFOFFSET
:

534 
•
->
j≥g_öãrch™ge_f‹m©
=(
uöt64
)
	`va_¨g
(
≠
,uint64);

536 
TIFFTAG_JPEGIFBYTECOUNT
:

537 
•
->
j≥g_öãrch™ge_f‹m©_Àngth
=(
uöt64
)
	`va_¨g
(
≠
,uint64);

539 
TIFFTAG_YCBCRSUBSAMPLING
:

540 
•
->
subßm∂ög_èg
=1;

541 
•
->
subßm∂ög_h‹
=(
uöt8
)
	`va_¨g
(
≠
,
uöt16_v≠
);

542 
•
->
subßm∂ög_vî
=(
uöt8
)
	`va_¨g
(
≠
,
uöt16_v≠
);

543 
tif
->
tif_dú
.
td_ycb¸subßm∂ög
[0]=
•
->
subßm∂ög_h‹
;

544 
tif
->
tif_dú
.
td_ycb¸subßm∂ög
[1]=
•
->
subßm∂ög_vî
;

546 
TIFFTAG_JPEGQTABLES
:

547 
ma
=(
uöt32
)
	`va_¨g
(
≠
,uint32);

548 i‡(
ma
!=0)

550 i‡(
ma
>3)

552 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"JpegQTablesÅag has incorrect count");

555 
•
->
qèbÀ_off£t_cou¡
=(
uöt8
)
ma
;

556 
mb
=(
uöt64
*)
	`va_¨g
(
≠
,uint64*);

557 
n
=0;Ç<
ma
;Ç++)

558 
•
->
qèbÀ_off£t
[
n
]=
mb
[n];

561 
TIFFTAG_JPEGDCTABLES
:

562 
ma
=(
uöt32
)
	`va_¨g
(
≠
,uint32);

563 i‡(
ma
!=0)

565 i‡(
ma
>3)

567 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"JpegDcTablesÅag has incorrect count");

570 
•
->
d˘abÀ_off£t_cou¡
=(
uöt8
)
ma
;

571 
mb
=(
uöt64
*)
	`va_¨g
(
≠
,uint64*);

572 
n
=0;Ç<
ma
;Ç++)

573 
•
->
d˘abÀ_off£t
[
n
]=
mb
[n];

576 
TIFFTAG_JPEGACTABLES
:

577 
ma
=(
uöt32
)
	`va_¨g
(
≠
,uint32);

578 i‡(
ma
!=0)

580 i‡(
ma
>3)

582 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"JpegAcTablesÅag has incorrect count");

585 
•
->
a˘abÀ_off£t_cou¡
=(
uöt8
)
ma
;

586 
mb
=(
uöt64
*)
	`va_¨g
(
≠
,uint64*);

587 
n
=0;Ç<
ma
;Ç++)

588 
•
->
a˘abÀ_off£t
[
n
]=
mb
[n];

591 
TIFFTAG_JPEGPROC
:

592 
•
->
j≥g_¥oc
=(
uöt8
)
	`va_¨g
(
≠
,
uöt16_v≠
);

594 
TIFFTAG_JPEGRESTARTINTERVAL
:

595 
•
->
ª°¨t_öãrvÆ
=(
uöt16
)
	`va_¨g
(
≠
,
uöt16_v≠
);

598  (*
•
->
v£ç¨ít
)(
tif
,
èg
,
≠
);

600 
	`TIFFSëFõldBô
(
tif
,
	`TIFFFõldWôhTag
—if,
èg
)->
fõld_bô
);

601 
tif
->
tif_Êags
|=
TIFF_DIRTYDIRECT
;

603 
	}
}

606 
	$OJPEGPrötDú
(
TIFF
* 
tif
, 
FILE
* 
fd
, 
Êags
)

608 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

609 
uöt8
 
m
;

610 ()
Êags
;

611 
	`as£π
(
•
!=
NULL
);

612 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_OJPEG_JPEGINTERCHANGEFORMAT
))

613 
	`Ârötf
(
fd
," J≥gI¡îch™geF‹m©: " 
TIFF_UINT64_FORMAT
 "\n",(
TIFF_UINT64_T
)
•
->
j≥g_öãrch™ge_f‹m©
);

614 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_OJPEG_JPEGINTERCHANGEFORMATLENGTH
))

615 
	`Ârötf
(
fd
," J≥gI¡îch™geF‹m©Lígth: " 
TIFF_UINT64_FORMAT
 "\n",(
TIFF_UINT64_T
)
•
->
j≥g_öãrch™ge_f‹m©_Àngth
);

616 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_OJPEG_JPEGQTABLES
))

618 
	`Ârötf
(
fd
," JpegQTables:");

619 
m
=0; m<
•
->
qèbÀ_off£t_cou¡
; m++)

620 
	`Ârötf
(
fd
," " 
TIFF_UINT64_FORMAT
,(
TIFF_UINT64_T
)
•
->
qèbÀ_off£t
[
m
]);

621 
	`Ârötf
(
fd
,"\n");

623 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_OJPEG_JPEGDCTABLES
))

625 
	`Ârötf
(
fd
," JpegDcTables:");

626 
m
=0; m<
•
->
d˘abÀ_off£t_cou¡
; m++)

627 
	`Ârötf
(
fd
," " 
TIFF_UINT64_FORMAT
,(
TIFF_UINT64_T
)
•
->
d˘abÀ_off£t
[
m
]);

628 
	`Ârötf
(
fd
,"\n");

630 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_OJPEG_JPEGACTABLES
))

632 
	`Ârötf
(
fd
," JpegAcTables:");

633 
m
=0; m<
•
->
a˘abÀ_off£t_cou¡
; m++)

634 
	`Ârötf
(
fd
," " 
TIFF_UINT64_FORMAT
,(
TIFF_UINT64_T
)
•
->
a˘abÀ_off£t
[
m
]);

635 
	`Ârötf
(
fd
,"\n");

637 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_OJPEG_JPEGPROC
))

638 
	`Ârötf
(
fd
," J≥gProc: %u\n",()
•
->
j≥g_¥oc
);

639 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_OJPEG_JPEGRESTARTINTERVAL
))

640 
	`Ârötf
(
fd
," J≥gRe°¨tI¡îvÆ: %u\n",()
•
->
ª°¨t_öãrvÆ
);

641 i‡(
•
->
¥ötdú
)

642 (*
•
->
¥ötdú
)(
tif
, 
fd
, 
Êags
);

643 
	}
}

646 
	$OJPEGFixupTags
(
TIFF
* 
tif
)

648 (Ë
tif
;

650 
	}
}

653 
	$OJPEGSëupDecode
(
TIFF
* 
tif
)

655 c⁄° 
moduÀ
[]="OJPEGSetupDecode";

656 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"DepreciatedándÅroublesome old-style JPEG compression mode,Ölease convertÅoÇew-style JPEG compressionándÇotify vendor of writing software");

658 
	}
}

661 
	$OJPEGPªDecode
(
TIFF
* 
tif
, 
uöt16
 
s
)

663 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

664 
uöt32
 
m
;

665 i‡(
•
->
subßm∂ögc‹ª˘_d⁄e
==0)

666 
	`OJPEGSubßm∂ögC‹ª˘
(
tif
);

667 i‡(
•
->
ªadhódî_d⁄e
==0)

669 i‡(
	`OJPEGRódHódîInfo
(
tif
)==0)

672 i‡(
•
->
sos_íd
[
s
].
log
==0)

674 i‡(
	`OJPEGRódSec⁄d¨ySos
(
tif
,
s
)==0)

677 
	`isTûed
(
tif
)

678 
m
=
tif
->
tif_cuπûe
;

680 
m
=
tif
->
tif_cur°rù
;

681 i‡((
•
->
wrôehódî_d⁄e
!=0Ë&& ((•->
wrôe_curßm∂e
!=
s
Ë|| (•->
wrôe_cur°rûe
>
m
)))

683 i‡(
•
->
libj≥g_£ssi⁄_a˘ive
!=0)

684 
	`OJPEGLibj≥gSessi⁄Ab‹t
(
tif
);

685 
•
->
wrôehódî_d⁄e
=0;

687 i‡(
•
->
wrôehódî_d⁄e
==0)

689 
•
->
∂™e_ßm∂e_off£t
=(
uöt8
)
s
;

690 
•
->
wrôe_curßm∂e
=
s
;

691 
•
->
wrôe_cur°rûe
=
s
*
tif
->
tif_dú
.
td_°rù•îimage
;

692 i‡((
•
->
ö_buf„r_fûe_pos_log
==0) ||

693 (
•
->
ö_buf„r_fûe_pos
-•->
ö_buf„r_togo
!=•->
sos_íd
[
s
].in_buffer_file_pos))

695 
•
->
ö_buf„r_sour˚
=•->
sos_íd
[
s
].in_buffer_source;

696 
•
->
ö_buf„r_√xt_°rûe
=•->
sos_íd
[
s
].in_buffer_next_strile;

697 
•
->
ö_buf„r_fûe_pos
=•->
sos_íd
[
s
].in_buffer_file_pos;

698 
•
->
ö_buf„r_fûe_pos_log
=0;

699 
•
->
ö_buf„r_fûe_togo
=•->
sos_íd
[
s
].in_buffer_file_togo;

700 
•
->
ö_buf„r_togo
=0;

701 
•
->
ö_buf„r_cur
=0;

703 i‡(
	`OJPEGWrôeHódîInfo
(
tif
)==0)

706 
•
->
wrôe_cur°rûe
<
m
)

708 i‡(
•
->
libj≥g_j≥g_quîy_°yÀ
==0)

710 i‡(
	`OJPEGPªDecodeSkùRaw
(
tif
)==0)

715 i‡(
	`OJPEGPªDecodeSkùSˇ∆öes
(
tif
)==0)

718 
•
->
wrôe_cur°rûe
++;

721 
	}
}

724 
	$OJPEGPªDecodeSkùRaw
(
TIFF
* 
tif
)

726 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

727 
uöt32
 
m
;

728 
m
=
•
->
löes_≥r_°rûe
;

729 i‡(
•
->
subßm∂ög_c⁄vît_°©e
!=0)

731 i‡(
•
->
subßm∂ög_c⁄vît_˛öes
-•->
subßm∂ög_c⁄vît_°©e
>=
m
)

733 
•
->
subßm∂ög_c⁄vît_°©e
+=
m
;

734 i‡(
•
->
subßm∂ög_c⁄vît_°©e
==•->
subßm∂ög_c⁄vît_˛öes
)

735 
•
->
subßm∂ög_c⁄vît_°©e
=0;

738 
m
-=
•
->
subßm∂ög_c⁄vît_˛öes
-•->
subßm∂ög_c⁄vît_°©e
;

739 
•
->
subßm∂ög_c⁄vît_°©e
=0;

741 
m
>=
•
->
subßm∂ög_c⁄vît_˛öes
)

743 i‡(
	`j≥g_ªad_øw_d©a_íˇp
(
•
,&(•->
libj≥g_j≥g_decom¥ess_°ru˘
),•->
subßm∂ög_c⁄vît_ycb¸image
,•->
subßm∂ög_vî
*8)==0)

745 
m
-=
•
->
subßm∂ög_c⁄vît_˛öes
;

747 i‡(
m
>0)

749 i‡(
	`j≥g_ªad_øw_d©a_íˇp
(
•
,&(•->
libj≥g_j≥g_decom¥ess_°ru˘
),•->
subßm∂ög_c⁄vît_ycb¸image
,•->
subßm∂ög_vî
*8)==0)

751 
•
->
subßm∂ög_c⁄vît_°©e
=
m
;

754 
	}
}

757 
	$OJPEGPªDecodeSkùSˇ∆öes
(
TIFF
* 
tif
)

759 c⁄° 
moduÀ
[]="OJPEGPreDecodeSkipScanlines";

760 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

761 
uöt32
 
m
;

762 i‡(
•
->
skù_buf„r
==
NULL
)

764 
•
->
skù_buf„r
=
	`_TIFFmÆloc
(•->
byãs_≥r_löe
);

765 i‡(
•
->
skù_buf„r
==
NULL
)

767 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

771 
m
=0; m<
•
->
löes_≥r_°rûe
; m++)

773 i‡(
	`j≥g_ªad_sˇ∆öes_íˇp
(
•
,&(•->
libj≥g_j≥g_decom¥ess_°ru˘
),&•->
skù_buf„r
,1)==0)

777 
	}
}

780 
	$OJPEGDecode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

782 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

783 ()
s
;

784 i‡(
•
->
libj≥g_j≥g_quîy_°yÀ
==0)

786 i‡(
	`OJPEGDecodeRaw
(
tif
,
buf
,
cc
)==0)

791 i‡(
	`OJPEGDecodeSˇ∆öes
(
tif
,
buf
,
cc
)==0)

795 
	}
}

798 
	$OJPEGDecodeRaw
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
)

800 c⁄° 
moduÀ
[]="OJPEGDecodeRaw";

801 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

802 
uöt8
* 
m
;

803 
tmsize_t
 
n
;

804 
uöt8
* 
oy
;

805 
uöt8
* 
ocb
;

806 
uöt8
* 
o¸
;

807 
uöt8
* 
p
;

808 
uöt32
 
q
;

809 
uöt8
* 
r
;

810 
uöt8
 
sx
,
sy
;

811 i‡(
cc
%
•
->
byãs_≥r_löe
!=0)

813 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Fractional scanlineÇotÑead");

816 
	`as£π
(
cc
>0);

817 
m
=
buf
;

818 
n
=
cc
;

821 i‡(
•
->
subßm∂ög_c⁄vît_°©e
==0)

823 i‡(
	`j≥g_ªad_øw_d©a_íˇp
(
•
,&(•->
libj≥g_j≥g_decom¥ess_°ru˘
),•->
subßm∂ög_c⁄vît_ycb¸image
,•->
subßm∂ög_vî
*8)==0)

826 
oy
=
•
->
subßm∂ög_c⁄vît_ybuf
+•->
subßm∂ög_c⁄vît_°©e
*•->
subßm∂ög_vî
*•->
subßm∂ög_c⁄vît_ylöñí
;

827 
ocb
=
•
->
subßm∂ög_c⁄vît_cbbuf
+•->
subßm∂ög_c⁄vît_°©e
*•->
subßm∂ög_c⁄vît_˛öñí
;

828 
o¸
=
•
->
subßm∂ög_c⁄vît_¸buf
+•->
subßm∂ög_c⁄vît_°©e
*•->
subßm∂ög_c⁄vît_˛öñí
;

829 
p
=
m
;

830 
q
=0; q<
•
->
subßm∂ög_c⁄vît_˛öñíout
; q++)

832 
r
=
oy
;

833 
sy
=0; sy<
•
->
subßm∂ög_vî
; sy++)

835 
sx
=0; sx<
•
->
subßm∂ög_h‹
; sx++)

836 *
p
++=*
r
++;

837 
r
+=
•
->
subßm∂ög_c⁄vît_ylöñí
-•->
subßm∂ög_h‹
;

839 
oy
+=
•
->
subßm∂ög_h‹
;

840 *
p
++=*
ocb
++;

841 *
p
++=*
o¸
++;

843 
•
->
subßm∂ög_c⁄vît_°©e
++;

844 i‡(
•
->
subßm∂ög_c⁄vît_°©e
==•->
subßm∂ög_c⁄vît_˛öes
)

845 
•
->
subßm∂ög_c⁄vît_°©e
=0;

846 
m
+=
•
->
byãs_≥r_löe
;

847 
n
-=
•
->
byãs_≥r_löe
;

848 } 
n
>0);

850 
	}
}

853 
	$OJPEGDecodeSˇ∆öes
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
)

855 c⁄° 
moduÀ
[]="OJPEGDecodeScanlines";

856 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

857 
uöt8
* 
m
;

858 
tmsize_t
 
n
;

859 i‡(
cc
%
•
->
byãs_≥r_löe
!=0)

861 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Fractional scanlineÇotÑead");

864 
	`as£π
(
cc
>0);

865 
m
=
buf
;

866 
n
=
cc
;

869 i‡(
	`j≥g_ªad_sˇ∆öes_íˇp
(
•
,&(•->
libj≥g_j≥g_decom¥ess_°ru˘
),&
m
,1)==0)

871 
m
+=
•
->
byãs_≥r_löe
;

872 
n
-=
•
->
byãs_≥r_löe
;

873 } 
n
>0);

875 
	}
}

878 
	$OJPEGPo°Decode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
)

880 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

881 ()
buf
;

882 ()
cc
;

883 
•
->
wrôe_cur°rûe
++;

884 i‡(
•
->
wrôe_cur°rûe
%
tif
->
tif_dú
.
td_°rù•îimage
==0)

886 
	`as£π
(
•
->
libj≥g_£ssi⁄_a˘ive
!=0);

887 
	`OJPEGLibj≥gSessi⁄Ab‹t
(
tif
);

888 
•
->
wrôehódî_d⁄e
=0;

890 
	}
}

893 
	$OJPEGSëupEncode
(
TIFF
* 
tif
)

895 c⁄° 
moduÀ
[]="OJPEGSetupEncode";

896 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"OJPEGÉncodingÇot supported; useÇew-style JPEG compression instead");

898 
	}
}

901 
	$OJPEGPªEncode
(
TIFF
* 
tif
, 
uöt16
 
s
)

903 c⁄° 
moduÀ
[]="OJPEGPreEncode";

904 ()
s
;

905 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"OJPEGÉncodingÇot supported; useÇew-style JPEG compression instead");

907 
	}
}

910 
	$OJPEGEncode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

912 c⁄° 
moduÀ
[]="OJPEGEncode";

913 ()
buf
;

914 ()
cc
;

915 ()
s
;

916 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"OJPEGÉncodingÇot supported; useÇew-style JPEG compression instead");

918 
	}
}

921 
	$OJPEGPo°Encode
(
TIFF
* 
tif
)

923 c⁄° 
moduÀ
[]="OJPEGPostEncode";

924 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"OJPEGÉncodingÇot supported; useÇew-style JPEG compression instead");

926 
	}
}

929 
	$OJPEGCÀ™up
(
TIFF
* 
tif
)

931 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

932 i‡(
•
!=0)

934 
tif
->
tif_ègmëhods
.
vgëfõld
=
•
->
vgë∑ª¡
;

935 
tif
->
tif_ègmëhods
.
v£tfõld
=
•
->
v£ç¨ít
;

936 
tif
->
tif_ègmëhods
.
¥ötdú
=
•
->printdir;

937 i‡(
•
->
qèbÀ
[0]!=0)

938 
	`_TIFF‰ì
(
•
->
qèbÀ
[0]);

939 i‡(
•
->
qèbÀ
[1]!=0)

940 
	`_TIFF‰ì
(
•
->
qèbÀ
[1]);

941 i‡(
•
->
qèbÀ
[2]!=0)

942 
	`_TIFF‰ì
(
•
->
qèbÀ
[2]);

943 i‡(
•
->
qèbÀ
[3]!=0)

944 
	`_TIFF‰ì
(
•
->
qèbÀ
[3]);

945 i‡(
•
->
d˘abÀ
[0]!=0)

946 
	`_TIFF‰ì
(
•
->
d˘abÀ
[0]);

947 i‡(
•
->
d˘abÀ
[1]!=0)

948 
	`_TIFF‰ì
(
•
->
d˘abÀ
[1]);

949 i‡(
•
->
d˘abÀ
[2]!=0)

950 
	`_TIFF‰ì
(
•
->
d˘abÀ
[2]);

951 i‡(
•
->
d˘abÀ
[3]!=0)

952 
	`_TIFF‰ì
(
•
->
d˘abÀ
[3]);

953 i‡(
•
->
a˘abÀ
[0]!=0)

954 
	`_TIFF‰ì
(
•
->
a˘abÀ
[0]);

955 i‡(
•
->
a˘abÀ
[1]!=0)

956 
	`_TIFF‰ì
(
•
->
a˘abÀ
[1]);

957 i‡(
•
->
a˘abÀ
[2]!=0)

958 
	`_TIFF‰ì
(
•
->
a˘abÀ
[2]);

959 i‡(
•
->
a˘abÀ
[3]!=0)

960 
	`_TIFF‰ì
(
•
->
a˘abÀ
[3]);

961 i‡(
•
->
libj≥g_£ssi⁄_a˘ive
!=0)

962 
	`OJPEGLibj≥gSessi⁄Ab‹t
(
tif
);

963 i‡(
•
->
subßm∂ög_c⁄vît_ycb¸buf
!=0)

964 
	`_TIFF‰ì
(
•
->
subßm∂ög_c⁄vît_ycb¸buf
);

965 i‡(
•
->
subßm∂ög_c⁄vît_ycb¸image
!=0)

966 
	`_TIFF‰ì
(
•
->
subßm∂ög_c⁄vît_ycb¸image
);

967 i‡(
•
->
skù_buf„r
!=0)

968 
	`_TIFF‰ì
(
•
->
skù_buf„r
);

969 
	`_TIFF‰ì
(
•
);

970 
tif
->
tif_d©a
=
NULL
;

971 
	`_TIFFSëDeÁu…Com¥essi⁄Sèã
(
tif
);

973 
	}
}

976 
	$OJPEGSubßm∂ögC‹ª˘
(
TIFF
* 
tif
)

978 c⁄° 
moduÀ
[]="OJPEGSubsamplingCorrect";

979 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

980 
uöt8
 
mh
;

981 
uöt8
 
mv
;

982 
	`_TIFFFûlSåûes
–
tif
 );

984 
	`as£π
(
•
->
subßm∂ögc‹ª˘_d⁄e
==0);

985 i‡((
tif
->
tif_dú
.
td_ßm∂e•îpixñ
!=3Ë|| (—if->tif_dú.
td_phŸomëric
!=
PHOTOMETRIC_YCBCR
) &&

986 (
tif
->
tif_dú
.
td_phŸomëric
!=
PHOTOMETRIC_ITULAB
)))

988 i‡(
•
->
subßm∂ög_èg
!=0)

989 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"SubsamplingÅagÇotáppropriate forÅhis Photometricánd/or SamplesPerPixel");

990 
•
->
subßm∂ög_h‹
=1;

991 
•
->
subßm∂ög_vî
=1;

992 
•
->
subßm∂ög_f‹˚_desubßm∂ög_öside_decom¥essi⁄
=0;

996 
•
->
subßm∂ögc‹ª˘_d⁄e
=1;

997 
mh
=
•
->
subßm∂ög_h‹
;

998 
mv
=
•
->
subßm∂ög_vî
;

999 
•
->
subßm∂ögc‹ª˘
=1;

1000 
	`OJPEGRódHódîInfoSec
(
tif
);

1001 i‡(
•
->
subßm∂ög_f‹˚_desubßm∂ög_öside_decom¥essi⁄
!=0)

1003 
•
->
subßm∂ög_h‹
=1;

1004 
•
->
subßm∂ög_vî
=1;

1006 
•
->
subßm∂ögc‹ª˘
=0;

1007 i‡(((
•
->
subßm∂ög_h‹
!=
mh
Ë|| (•->
subßm∂ög_vî
!=
mv
)Ë&& (•->
subßm∂ög_f‹˚_desubßm∂ög_öside_decom¥essi⁄
==0))

1009 i‡(
•
->
subßm∂ög_èg
==0)

1010 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Subßm∂ögÅag i†nŸ së, yë subßm∂ög insidêJPEG d©®[%d,%d] d€†nŸ m©ch deÁu… vÆue†[2,2];ássumög subßm∂ög insidêJPEG d©®i†c‹ª˘",
•
->
subßm∂ög_h‹
,•->
subßm∂ög_vî
);

1012 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Subßm∂ög insidêJPEG d©®[%d,%d] d€†nŸ m©ch subßm∂ögÅag vÆue†[%d,%d];ássumög subßm∂ög insidêJPEG d©®i†c‹ª˘",
•
->
subßm∂ög_h‹
,•->
subßm∂ög_vî
,
mh
,
mv
);

1014 i‡(
•
->
subßm∂ög_f‹˚_desubßm∂ög_öside_decom¥essi⁄
!=0)

1016 i‡(
•
->
subßm∂ög_èg
==0)

1017 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"SubsamplingÅag isÇot set, yet subsampling inside JPEG data doesÇot match default values [2,2] (norány other valuesállowed in TIFF);ássuming subsampling inside JPEG data is correctánd desubsampling inside JPEG decompression");

1019 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Subßm∂ög insidêJPEG d©®d€†nŸ m©ch subßm∂ögÅag vÆue†[%d,%d] (n‹ány othî vÆue†Ælowed i¿TIFF);ássumög subßm∂ög insidêJPEG d©®i†c‹ª˘ánd desubßm∂ög insidêJPEG decom¥essi⁄",
mh
,
mv
);

1021 i‡(
•
->
subßm∂ög_f‹˚_desubßm∂ög_öside_decom¥essi⁄
==0)

1023 i‡(
•
->
subßm∂ög_h‹
<•->
subßm∂ög_vî
)

1024 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Subßm∂ög vÆue†[%d,%d]áªÇŸáŒowed i¿TIFF",
•
->
subßm∂ög_h‹
,•->
subßm∂ög_vî
);

1027 
•
->
subßm∂ögc‹ª˘_d⁄e
=1;

1028 
	}
}

1031 
	$OJPEGRódHódîInfo
(
TIFF
* 
tif
)

1033 c⁄° 
moduÀ
[]="OJPEGReadHeaderInfo";

1034 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1035 
	`as£π
(
•
->
ªadhódî_d⁄e
==0);

1036 
•
->
image_width
=
tif
->
tif_dú
.
td_imagewidth
;

1037 
•
->
image_Àngth
=
tif
->
tif_dú
.
td_imagñígth
;

1038 
	`isTûed
(
tif
)

1040 
•
->
°rûe_width
=
tif
->
tif_dú
.
td_tûewidth
;

1041 
•
->
°rûe_Àngth
=
tif
->
tif_dú
.
td_tûñígth
;

1042 
•
->
°rûe_Àngth_tŸÆ
=((•->
image_Àngth
+•->
°rûe_Àngth
-1)/sp->strile_length)*sp->strile_length;

1046 
•
->
°rûe_width
=•->
image_width
;

1047 
•
->
°rûe_Àngth
=
tif
->
tif_dú
.
td_row•î°rù
;

1048 
•
->
°rûe_Àngth_tŸÆ
=•->
image_Àngth
;

1050 i‡(
tif
->
tif_dú
.
td_ßm∂e•îpixñ
==1)

1052 
•
->
ßm∂es_≥r_pixñ
=1;

1053 
•
->
∂™e_ßm∂e_off£t
=0;

1054 
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
=•->
ßm∂es_≥r_pixñ
;

1055 
•
->
subßm∂ög_h‹
=1;

1056 
•
->
subßm∂ög_vî
=1;

1060 i‡(
tif
->
tif_dú
.
td_ßm∂e•îpixñ
!=3)

1062 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Sam∂esPîPixñ %dÇŸ suµ‹ãd f‹Åhi†com¥essi⁄ scheme",
•
->
ßm∂es_≥r_pixñ
);

1065 
•
->
ßm∂es_≥r_pixñ
=3;

1066 
•
->
∂™e_ßm∂e_off£t
=0;

1067 i‡(
tif
->
tif_dú
.
td_∂™¨c⁄fig
==
PLANARCONFIG_CONTIG
)

1068 
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
=3;

1070 
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
=1;

1072 i‡(
•
->
°rûe_Àngth
<•->
image_Àngth
)

1074 i‡(
•
->
°rûe_Àngth
%(•->
subßm∂ög_vî
*8)!=0)

1076 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Incompatible vertical subsamplingánd image strip/tileÜength");

1079 
•
->
ª°¨t_öãrvÆ
=((•->
°rûe_width
+•->
subßm∂ög_h‹
*8-1)/(•->subßm∂ög_h‹*8))*(•->
°rûe_Àngth
/(•->
subßm∂ög_vî
*8));

1081 i‡(
	`OJPEGRódHódîInfoSec
(
tif
)==0)

1083 
•
->
sos_íd
[0].
log
=1;

1084 
•
->
sos_íd
[0].
ö_buf„r_sour˚
=sp->in_buffer_source;

1085 
•
->
sos_íd
[0].
ö_buf„r_√xt_°rûe
=sp->in_buffer_next_strile;

1086 
•
->
sos_íd
[0].
ö_buf„r_fûe_pos
=•->ö_buf„r_fûe_pos-•->
ö_buf„r_togo
;

1087 
•
->
sos_íd
[0].
ö_buf„r_fûe_togo
=•->ö_buf„r_fûe_togo+•->
ö_buf„r_togo
;

1088 
•
->
ªadhódî_d⁄e
=1;

1090 
	}
}

1093 
	$OJPEGRódSec⁄d¨ySos
(
TIFF
* 
tif
, 
uöt16
 
s
)

1095 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1096 
uöt8
 
m
;

1097 
	`as£π
(
s
>0);

1098 
	`as£π
(
s
<3);

1099 
	`as£π
(
•
->
sos_íd
[0].
log
!=0);

1100 
	`as£π
(
•
->
sos_íd
[
s
].
log
==0);

1101 
•
->
∂™e_ßm∂e_off£t
=
s
-1;

1102 
•
->
sos_íd
[•->
∂™e_ßm∂e_off£t
].
log
==0)

1103 
•
->
∂™e_ßm∂e_off£t
--;

1104 
•
->
ö_buf„r_sour˚
=•->
sos_íd
[•->
∂™e_ßm∂e_off£t
].in_buffer_source;

1105 
•
->
ö_buf„r_√xt_°rûe
=•->
sos_íd
[•->
∂™e_ßm∂e_off£t
].in_buffer_next_strile;

1106 
•
->
ö_buf„r_fûe_pos
=•->
sos_íd
[•->
∂™e_ßm∂e_off£t
].in_buffer_file_pos;

1107 
•
->
ö_buf„r_fûe_pos_log
=0;

1108 
•
->
ö_buf„r_fûe_togo
=•->
sos_íd
[•->
∂™e_ßm∂e_off£t
].in_buffer_file_togo;

1109 
•
->
ö_buf„r_togo
=0;

1110 
•
->
ö_buf„r_cur
=0;

1111 
•
->
∂™e_ßm∂e_off£t
<
s
)

1115 i‡(
	`OJPEGRódByã
(
•
,&
m
)==0)

1117 i‡(
m
==255)

1121 i‡(
	`OJPEGRódByã
(
•
,&
m
)==0)

1123 i‡(
m
!=255)

1126 i‡(
m
==
JPEG_MARKER_SOS
)

1130 
•
->
∂™e_ßm∂e_off£t
++;

1131 i‡(
	`OJPEGRódHódîInfoSecSåómSos
(
tif
)==0)

1133 
•
->
sos_íd
[•->
∂™e_ßm∂e_off£t
].
log
=1;

1134 
•
->
sos_íd
[•->
∂™e_ßm∂e_off£t
].
ö_buf„r_sour˚
=sp->in_buffer_source;

1135 
•
->
sos_íd
[•->
∂™e_ßm∂e_off£t
].
ö_buf„r_√xt_°rûe
=sp->in_buffer_next_strile;

1136 
•
->
sos_íd
[•->
∂™e_ßm∂e_off£t
].
ö_buf„r_fûe_pos
=•->ö_buf„r_fûe_pos-•->
ö_buf„r_togo
;

1137 
•
->
sos_íd
[•->
∂™e_ßm∂e_off£t
].
ö_buf„r_fûe_togo
=•->ö_buf„r_fûe_togo+•->
ö_buf„r_togo
;

1140 
	}
}

1143 
	$OJPEGWrôeHódîInfo
(
TIFF
* 
tif
)

1145 c⁄° 
moduÀ
[]="OJPEGWriteHeaderInfo";

1146 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1147 
uöt8
** 
m
;

1148 
uöt32
 
n
;

1149 
	`as£π
(
•
->
libj≥g_£ssi⁄_a˘ive
==0);

1150 
•
->
out_°©e
=
ososSoi
;

1151 
•
->
ª°¨t_ödex
=0;

1152 
	`j≥g_°d_îr‹
(&(
•
->
libj≥g_j≥g_îr‹_mgr
));

1153 
•
->
libj≥g_j≥g_îr‹_mgr
.
ouçut_mesßge
=
OJPEGLibj≥gJ≥gEº‹MgrOuçutMesßge
;

1154 
•
->
libj≥g_j≥g_îr‹_mgr
.
îr‹_exô
=
OJPEGLibj≥gJ≥gEº‹MgrEº‹Exô
;

1155 
•
->
libj≥g_j≥g_decom¥ess_°ru˘
.
îr
=&(•->
libj≥g_j≥g_îr‹_mgr
);

1156 
•
->
libj≥g_j≥g_decom¥ess_°ru˘
.
˛õ¡_d©a
=(*)
tif
;

1157 i‡(
	`j≥g_¸óã_decom¥ess_íˇp
(
•
,&(•->
libj≥g_j≥g_decom¥ess_°ru˘
))==0)

1159 
•
->
libj≥g_£ssi⁄_a˘ive
=1;

1160 
•
->
libj≥g_j≥g_sour˚_mgr
.
byãs_ö_buf„r
=0;

1161 
•
->
libj≥g_j≥g_sour˚_mgr
.
öô_sour˚
=
OJPEGLibj≥gJ≥gSour˚MgrInôSour˚
;

1162 
•
->
libj≥g_j≥g_sour˚_mgr
.
fûl_öput_buf„r
=
OJPEGLibj≥gJ≥gSour˚MgrFûlI≈utBuf„r
;

1163 
•
->
libj≥g_j≥g_sour˚_mgr
.
skù_öput_d©a
=
OJPEGLibj≥gJ≥gSour˚MgrSkùI≈utD©a
;

1164 
•
->
libj≥g_j≥g_sour˚_mgr
.
ªsync_to_ª°¨t
=
OJPEGLibj≥gJ≥gSour˚MgrResyncToRe°¨t
;

1165 
•
->
libj≥g_j≥g_sour˚_mgr
.
ãrm_sour˚
=
OJPEGLibj≥gJ≥gSour˚MgrTîmSour˚
;

1166 
•
->
libj≥g_j≥g_decom¥ess_°ru˘
.
§c
=&(•->
libj≥g_j≥g_sour˚_mgr
);

1167 i‡(
	`j≥g_ªad_hódî_íˇp
(
•
,&(•->
libj≥g_j≥g_decom¥ess_°ru˘
),1)==0)

1169 i‡((
•
->
subßm∂ög_f‹˚_desubßm∂ög_öside_decom¥essi⁄
==0Ë&& (•->
ßm∂es_≥r_pixñ_≥r_∂™e
>1))

1171 
•
->
libj≥g_j≥g_decom¥ess_°ru˘
.
øw_d©a_out
=1;

1172 #i‡
JPEG_LIB_VERSION
 >= 70

1173 
•
->
libj≥g_j≥g_decom¥ess_°ru˘
.
do_Áncy_upßm∂ög
=
FALSE
;

1175 
•
->
libj≥g_j≥g_quîy_°yÀ
=0;

1176 i‡(
•
->
subßm∂ög_c⁄vît_log
==0)

1178 
	`as£π
(
•
->
subßm∂ög_c⁄vît_ycb¸buf
==0);

1179 
	`as£π
(
•
->
subßm∂ög_c⁄vît_ycb¸image
==0);

1180 
•
->
subßm∂ög_c⁄vît_ylöñí
=((•->
°rûe_width
+•->
subßm∂ög_h‹
*8-1)/(sp->subsampling_hor*8)*sp->subsampling_hor*8);

1181 
•
->
subßm∂ög_c⁄vît_ylöes
=•->
subßm∂ög_vî
*8;

1182 
•
->
subßm∂ög_c⁄vît_˛öñí
=•->
subßm∂ög_c⁄vît_ylöñí
/•->
subßm∂ög_h‹
;

1183 
•
->
subßm∂ög_c⁄vît_˛öes
=8;

1184 
•
->
subßm∂ög_c⁄vît_ybuÊí
=•->
subßm∂ög_c⁄vît_ylöñí
*•->
subßm∂ög_c⁄vît_ylöes
;

1185 
•
->
subßm∂ög_c⁄vît_cbuÊí
=•->
subßm∂ög_c⁄vît_˛öñí
*•->
subßm∂ög_c⁄vît_˛öes
;

1186 
•
->
subßm∂ög_c⁄vît_ycb¸buÊí
=•->
subßm∂ög_c⁄vît_ybuÊí
+2*•->
subßm∂ög_c⁄vît_cbuÊí
;

1187 
•
->
subßm∂ög_c⁄vît_ycb¸buf
=
	`_TIFFmÆloc
(•->
subßm∂ög_c⁄vît_ycb¸buÊí
);

1188 i‡(
•
->
subßm∂ög_c⁄vît_ycb¸buf
==0)

1190 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1193 
•
->
subßm∂ög_c⁄vît_ybuf
=•->
subßm∂ög_c⁄vît_ycb¸buf
;

1194 
•
->
subßm∂ög_c⁄vît_cbbuf
=•->
subßm∂ög_c⁄vît_ybuf
+•->
subßm∂ög_c⁄vît_ybuÊí
;

1195 
•
->
subßm∂ög_c⁄vît_¸buf
=•->
subßm∂ög_c⁄vît_cbbuf
+•->
subßm∂ög_c⁄vît_cbuÊí
;

1196 
•
->
subßm∂ög_c⁄vît_ycb¸imagñí
=3+•->
subßm∂ög_c⁄vît_ylöes
+2*•->
subßm∂ög_c⁄vît_˛öes
;

1197 
•
->
subßm∂ög_c⁄vît_ycb¸image
=
	`_TIFFmÆloc
(•->
subßm∂ög_c⁄vît_ycb¸imagñí
*(
uöt8
*));

1198 i‡(
•
->
subßm∂ög_c⁄vît_ycb¸image
==0)

1200 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1203 
m
=
•
->
subßm∂ög_c⁄vît_ycb¸image
;

1204 *
m
++=(
uöt8
*)(
•
->
subßm∂ög_c⁄vît_ycb¸image
+3);

1205 *
m
++=(
uöt8
*)(
•
->
subßm∂ög_c⁄vît_ycb¸image
+3+•->
subßm∂ög_c⁄vît_ylöes
);

1206 *
m
++=(
uöt8
*)(
•
->
subßm∂ög_c⁄vît_ycb¸image
+3+•->
subßm∂ög_c⁄vît_ylöes
+•->
subßm∂ög_c⁄vît_˛öes
);

1207 
n
=0;Ç<
•
->
subßm∂ög_c⁄vît_ylöes
;Ç++)

1208 *
m
++=
•
->
subßm∂ög_c⁄vît_ybuf
+
n
*•->
subßm∂ög_c⁄vît_ylöñí
;

1209 
n
=0;Ç<
•
->
subßm∂ög_c⁄vît_˛öes
;Ç++)

1210 *
m
++=
•
->
subßm∂ög_c⁄vît_cbbuf
+
n
*•->
subßm∂ög_c⁄vît_˛öñí
;

1211 
n
=0;Ç<
•
->
subßm∂ög_c⁄vît_˛öes
;Ç++)

1212 *
m
++=
•
->
subßm∂ög_c⁄vît_¸buf
+
n
*•->
subßm∂ög_c⁄vît_˛öñí
;

1213 
•
->
subßm∂ög_c⁄vît_˛öñíout
=((•->
°rûe_width
+•->
subßm∂ög_h‹
-1)/sp->subsampling_hor);

1214 
•
->
subßm∂ög_c⁄vît_°©e
=0;

1215 
•
->
byãs_≥r_löe
=•->
subßm∂ög_c⁄vît_˛öñíout
*(•->
subßm∂ög_vî
*•->
subßm∂ög_h‹
+2);

1216 
•
->
löes_≥r_°rûe
=((•->
°rûe_Àngth
+•->
subßm∂ög_vî
-1)/sp->subsampling_ver);

1217 
•
->
subßm∂ög_c⁄vît_log
=1;

1222 
•
->
libj≥g_j≥g_decom¥ess_°ru˘
.
j≥g_cﬁ‹_•a˚
=
JCS_UNKNOWN
;

1223 
•
->
libj≥g_j≥g_decom¥ess_°ru˘
.
out_cﬁ‹_•a˚
=
JCS_UNKNOWN
;

1224 
•
->
libj≥g_j≥g_quîy_°yÀ
=1;

1225 
•
->
byãs_≥r_löe
=•->
ßm∂es_≥r_pixñ_≥r_∂™e
*•->
°rûe_width
;

1226 
•
->
löes_≥r_°rûe
=•->
°rûe_Àngth
;

1228 i‡(
	`j≥g_°¨t_decom¥ess_íˇp
(
•
,&(•->
libj≥g_j≥g_decom¥ess_°ru˘
))==0)

1230 
•
->
wrôehódî_d⁄e
=1;

1232 
	}
}

1235 
	$OJPEGLibj≥gSessi⁄Ab‹t
(
TIFF
* 
tif
)

1237 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1238 
	`as£π
(
•
->
libj≥g_£ssi⁄_a˘ive
!=0);

1239 
	`j≥g_de°roy
((
j≥g_comm⁄_°ru˘
*)(&(
•
->
libj≥g_j≥g_decom¥ess_°ru˘
)));

1240 
•
->
libj≥g_£ssi⁄_a˘ive
=0;

1241 
	}
}

1244 
	$OJPEGRódHódîInfoSec
(
TIFF
* 
tif
)

1246 c⁄° 
moduÀ
[]="OJPEGReadHeaderInfoSec";

1247 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1248 
uöt8
 
m
;

1249 
uöt16
 
n
;

1250 
uöt8
 
o
;

1251 i‡(
•
->
fûe_size
==0)

1252 
•
->
fûe_size
=
	`TIFFGëFûeSize
(
tif
);

1253 i‡(
•
->
j≥g_öãrch™ge_f‹m©
!=0)

1255 i‡(
•
->
j≥g_öãrch™ge_f‹m©
>=•->
fûe_size
)

1257 
•
->
j≥g_öãrch™ge_f‹m©
=0;

1258 
•
->
j≥g_öãrch™ge_f‹m©_Àngth
=0;

1262 i‡((
•
->
j≥g_öãrch™ge_f‹m©_Àngth
==0Ë|| (•->
j≥g_öãrch™ge_f‹m©
+•->j≥g_öãrch™ge_f‹m©_Àngth>•->
fûe_size
))

1263 
•
->
j≥g_öãrch™ge_f‹m©_Àngth
=•->
fûe_size
-•->
j≥g_öãrch™ge_f‹m©
;

1266 
•
->
ö_buf„r_sour˚
=
osibsNŸSëYë
;

1267 
•
->
ö_buf„r_√xt_°rûe
=0;

1268 
•
->
ö_buf„r_°rûe_cou¡
=
tif
->
tif_dú
.
td_n°rùs
;

1269 
•
->
ö_buf„r_fûe_togo
=0;

1270 
•
->
ö_buf„r_togo
=0;

1273 i‡(
	`OJPEGRódByãPìk
(
•
,&
m
)==0)

1275 i‡(
m
!=255)

1277 
	`OJPEGRódByãAdv™˚
(
•
);

1280 i‡(
	`OJPEGRódByã
(
•
,&
m
)==0)

1282 } 
m
==255);

1283 
m
)

1285 
JPEG_MARKER_SOI
:

1288 
JPEG_MARKER_COM
:

1289 
JPEG_MARKER_APP0
:

1290 
JPEG_MARKER_APP0
+1:

1291 
JPEG_MARKER_APP0
+2:

1292 
JPEG_MARKER_APP0
+3:

1293 
JPEG_MARKER_APP0
+4:

1294 
JPEG_MARKER_APP0
+5:

1295 
JPEG_MARKER_APP0
+6:

1296 
JPEG_MARKER_APP0
+7:

1297 
JPEG_MARKER_APP0
+8:

1298 
JPEG_MARKER_APP0
+9:

1299 
JPEG_MARKER_APP0
+10:

1300 
JPEG_MARKER_APP0
+11:

1301 
JPEG_MARKER_APP0
+12:

1302 
JPEG_MARKER_APP0
+13:

1303 
JPEG_MARKER_APP0
+14:

1304 
JPEG_MARKER_APP0
+15:

1306 i‡(
	`OJPEGRódW‹d
(
•
,&
n
)==0)

1308 i‡(
n
<2)

1310 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1311 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt JPEG data");

1314 i‡(
n
>2)

1315 
	`OJPEGRódSkù
(
•
,
n
-2);

1317 
JPEG_MARKER_DRI
:

1318 i‡(
	`OJPEGRódHódîInfoSecSåómDri
(
tif
)==0)

1321 
JPEG_MARKER_DQT
:

1322 i‡(
	`OJPEGRódHódîInfoSecSåómDqt
(
tif
)==0)

1325 
JPEG_MARKER_DHT
:

1326 i‡(
	`OJPEGRódHódîInfoSecSåómDht
(
tif
)==0)

1329 
JPEG_MARKER_SOF0
:

1330 
JPEG_MARKER_SOF1
:

1331 
JPEG_MARKER_SOF3
:

1332 i‡(
	`OJPEGRódHódîInfoSecSåómSof
(
tif
,
m
)==0)

1334 i‡(
•
->
subßm∂ögc‹ª˘
!=0)

1337 
JPEG_MARKER_SOS
:

1338 i‡(
•
->
subßm∂ögc‹ª˘
!=0)

1340 
	`as£π
(
•
->
∂™e_ßm∂e_off£t
==0);

1341 i‡(
	`OJPEGRódHódîInfoSecSåómSos
(
tif
)==0)

1345 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Unknow¿m¨kîÅy≥ %d i¿JPEG d©a",
m
);

1348 } 
m
!=
JPEG_MARKER_SOS
);

1349 i‡(
•
->
subßm∂ögc‹ª˘
)

1351 i‡(
•
->
sof_log
==0)

1353 i‡(
	`OJPEGRódHódîInfoSecTabÀsQTabÀ
(
tif
)==0)

1355 
•
->
sof_m¨kî_id
=
JPEG_MARKER_SOF0
;

1356 
o
=0; o<
•
->
ßm∂es_≥r_pixñ
; o++)

1357 
•
->
sof_c
[
o
]=o;

1358 
•
->
sof_hv
[0]=((•->
subßm∂ög_h‹
<<4)|•->
subßm∂ög_vî
);

1359 
o
=1; o<
•
->
ßm∂es_≥r_pixñ
; o++)

1360 
•
->
sof_hv
[
o
]=17;

1361 
•
->
sof_x
=•->
°rûe_width
;

1362 
•
->
sof_y
=•->
°rûe_Àngth_tŸÆ
;

1363 
•
->
sof_log
=1;

1364 i‡(
	`OJPEGRódHódîInfoSecTabÀsDcTabÀ
(
tif
)==0)

1366 i‡(
	`OJPEGRódHódîInfoSecTabÀsAcTabÀ
(
tif
)==0)

1368 
o
=1; o<
•
->
ßm∂es_≥r_pixñ
; o++)

1369 
•
->
sos_cs
[
o
]=o;

1372 
	}
}

1375 
	$OJPEGRódHódîInfoSecSåómDri
(
TIFF
* 
tif
)

1378 c⁄° 
moduÀ
[]="OJPEGReadHeaderInfoSecStreamDri";

1379 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1380 
uöt16
 
m
;

1381 i‡(
	`OJPEGRódW‹d
(
•
,&
m
)==0)

1383 i‡(
m
!=4)

1385 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt DRI marker in JPEG data");

1388 i‡(
	`OJPEGRódW‹d
(
•
,&
m
)==0)

1390 
•
->
ª°¨t_öãrvÆ
=
m
;

1392 
	}
}

1395 
	$OJPEGRódHódîInfoSecSåómDqt
(
TIFF
* 
tif
)

1398 c⁄° 
moduÀ
[]="OJPEGReadHeaderInfoSecStreamDqt";

1399 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1400 
uöt16
 
m
;

1401 
uöt32
 
«
;

1402 
uöt8
* 
nb
;

1403 
uöt8
 
o
;

1404 i‡(
	`OJPEGRódW‹d
(
•
,&
m
)==0)

1406 i‡(
m
<=2)

1408 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1409 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt DQT marker in JPEG data");

1412 i‡(
•
->
subßm∂ögc‹ª˘
!=0)

1413 
	`OJPEGRódSkù
(
•
,
m
-2);

1416 
m
-=2;

1419 i‡(
m
<65)

1421 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt DQT marker in JPEG data");

1424 
«
=(
uöt32
)+69;

1425 
nb
=
	`_TIFFmÆloc
(
«
);

1426 i‡(
nb
==0)

1428 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1431 *(
uöt32
*)
nb
=
«
;

1432 
nb
[(
uöt32
)]=255;

1433 
nb
[(
uöt32
)+1]=
JPEG_MARKER_DQT
;

1434 
nb
[(
uöt32
)+2]=0;

1435 
nb
[(
uöt32
)+3]=67;

1436 i‡(
	`OJPEGRódBlock
(
•
,65,&
nb
[(
uöt32
)+4])==0) {

1437 
	`_TIFF‰ì
(
nb
);

1440 
o
=
nb
[(
uöt32
)+4]&15;

1441 i‡(3<
o
)

1443 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt DQT marker in JPEG data");

1444 
	`_TIFF‰ì
(
nb
);

1447 i‡(
•
->
qèbÀ
[
o
]!=0)

1448 
	`_TIFF‰ì
(
•
->
qèbÀ
[
o
]);

1449 
•
->
qèbÀ
[
o
]=
nb
;

1450 
m
-=65;

1451 } 
m
>0);

1454 
	}
}

1457 
	$OJPEGRódHódîInfoSecSåómDht
(
TIFF
* 
tif
)

1461 c⁄° 
moduÀ
[]="OJPEGReadHeaderInfoSecStreamDht";

1462 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1463 
uöt16
 
m
;

1464 
uöt32
 
«
;

1465 
uöt8
* 
nb
;

1466 
uöt8
 
o
;

1467 i‡(
	`OJPEGRódW‹d
(
•
,&
m
)==0)

1469 i‡(
m
<=2)

1471 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1472 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt DHT marker in JPEG data");

1475 i‡(
•
->
subßm∂ögc‹ª˘
!=0)

1477 
	`OJPEGRódSkù
(
•
,
m
-2);

1481 
«
=(
uöt32
)+2+
m
;

1482 
nb
=
	`_TIFFmÆloc
(
«
);

1483 i‡(
nb
==0)

1485 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1488 *(
uöt32
*)
nb
=
«
;

1489 
nb
[(
uöt32
)]=255;

1490 
nb
[(
uöt32
)+1]=
JPEG_MARKER_DHT
;

1491 
nb
[(
uöt32
)+2]=(
m
>>8);

1492 
nb
[(
uöt32
)+3]=(
m
&255);

1493 i‡(
	`OJPEGRódBlock
(
•
,
m
-2,&
nb
[(
uöt32
)+4])==0)

1495 
o
=
nb
[(
uöt32
)+4];

1496 i‡((
o
&240)==0)

1498 i‡(3<
o
)

1500 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt DHT marker in JPEG data");

1503 i‡(
•
->
d˘abÀ
[
o
]!=0)

1504 
	`_TIFF‰ì
(
•
->
d˘abÀ
[
o
]);

1505 
•
->
d˘abÀ
[
o
]=
nb
;

1509 i‡((
o
&240)!=16)

1511 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt DHT marker in JPEG data");

1514 
o
&=15;

1515 i‡(3<
o
)

1517 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt DHT marker in JPEG data");

1520 i‡(
•
->
a˘abÀ
[
o
]!=0)

1521 
	`_TIFF‰ì
(
•
->
a˘abÀ
[
o
]);

1522 
•
->
a˘abÀ
[
o
]=
nb
;

1526 
	}
}

1529 
	$OJPEGRódHódîInfoSecSåómSof
(
TIFF
* 
tif
, 
uöt8
 
m¨kî_id
)

1532 c⁄° 
moduÀ
[]="OJPEGReadHeaderInfoSecStreamSof";

1533 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1534 
uöt16
 
m
;

1535 
uöt16
 
n
;

1536 
uöt8
 
o
;

1537 
uöt16
 
p
;

1538 
uöt16
 
q
;

1539 i‡(
•
->
sof_log
!=0)

1541 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt JPEG data");

1544 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1545 
•
->
sof_m¨kî_id
=
m¨kî_id
;

1547 i‡(
	`OJPEGRódW‹d
(
•
,&
m
)==0)

1549 i‡(
m
<11)

1551 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1552 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt SOF marker in JPEG data");

1555 
m
-=8;

1556 i‡(
m
%3!=0)

1558 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1559 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt SOF marker in JPEG data");

1562 
n
=
m
/3;

1563 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1565 i‡(
n
!=
•
->
ßm∂es_≥r_pixñ
)

1567 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"JPEG compressed data indicates unexpectedÇumber of samples");

1572 i‡(
	`OJPEGRódByã
(
•
,&
o
)==0)

1574 i‡(
o
!=8)

1576 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1577 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"JPEG compressed data indicates unexpectedÇumber of bitsÖer sample");

1581 i‡(
•
->
subßm∂ögc‹ª˘
)

1582 
	`OJPEGRódSkù
(
•
,4);

1586 i‡(
	`OJPEGRódW‹d
(
•
,&
p
)==0)

1588 i‡(((
uöt32
)
p
<
•
->
image_Àngth
Ë&& ((uöt32Ì<•->
°rûe_Àngth_tŸÆ
))

1590 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"JPEG compressed data indicates unexpected height");

1593 
•
->
sof_y
=
p
;

1595 i‡(
	`OJPEGRódW‹d
(
•
,&
p
)==0)

1597 i‡(((
uöt32
)
p
<
•
->
image_width
Ë&& ((uöt32Ì<•->
°rûe_width
))

1599 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"JPEG compressed data indicates unexpected width");

1602 i‡((
uöt32
)
p
>
•
->
°rûe_width
)

1604 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"JPEG compressed data image widthÉxceedsÉxpected image width");

1607 
•
->
sof_x
=
p
;

1610 i‡(
	`OJPEGRódByã
(
•
,&
o
)==0)

1612 i‡(
o
!=
n
)

1614 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1615 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt SOF marker in JPEG data");

1620 
q
=0; q<
n
; q++)

1623 i‡(
	`OJPEGRódByã
(
•
,&
o
)==0)

1625 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1626 
•
->
sof_c
[
q
]=
o
;

1628 i‡(
	`OJPEGRódByã
(
•
,&
o
)==0)

1630 i‡(
•
->
subßm∂ögc‹ª˘
!=0)

1632 i‡(
q
==0)

1634 
•
->
subßm∂ög_h‹
=(
o
>>4);

1635 
•
->
subßm∂ög_vî
=(
o
&15);

1636 i‡(((
•
->
subßm∂ög_h‹
!=1) && (sp->subsampling_hor!=2) && (sp->subsampling_hor!=4)) ||

1637 ((
•
->
subßm∂ög_vî
!=1) && (sp->subsampling_ver!=2) && (sp->subsampling_ver!=4)))

1638 
•
->
subßm∂ög_f‹˚_desubßm∂ög_öside_decom¥essi⁄
=1;

1642 i‡(
o
!=17)

1643 
•
->
subßm∂ög_f‹˚_desubßm∂ög_öside_decom¥essi⁄
=1;

1648 
•
->
sof_hv
[
q
]=
o
;

1649 i‡(
•
->
subßm∂ög_f‹˚_desubßm∂ög_öside_decom¥essi⁄
==0)

1651 i‡(
q
==0)

1653 i‡(
o
!=((
•
->
subßm∂ög_h‹
<<4)|•->
subßm∂ög_vî
))

1655 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"JPEG compressed data indicates unexpected subsampling values");

1661 i‡(
o
!=17)

1663 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"JPEG compressed data indicates unexpected subsampling values");

1670 i‡(
	`OJPEGRódByã
(
•
,&
o
)==0)

1672 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1673 
•
->
sof_tq
[
q
]=
o
;

1675 i‡(
•
->
subßm∂ögc‹ª˘
==0)

1676 
•
->
sof_log
=1;

1678 
	}
}

1681 
	$OJPEGRódHódîInfoSecSåómSos
(
TIFF
* 
tif
)

1684 c⁄° 
moduÀ
[]="OJPEGReadHeaderInfoSecStreamSos";

1685 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1686 
uöt16
 
m
;

1687 
uöt8
 
n
;

1688 
uöt8
 
o
;

1689 
	`as£π
(
•
->
subßm∂ögc‹ª˘
==0);

1690 i‡(
•
->
sof_log
==0)

1692 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt SOS marker in JPEG data");

1696 i‡(
	`OJPEGRódW‹d
(
•
,&
m
)==0)

1698 i‡(
m
!=6+
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
*2)

1700 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt SOS marker in JPEG data");

1704 i‡(
	`OJPEGRódByã
(
•
,&
n
)==0)

1706 i‡(
n
!=
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
)

1708 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt SOS marker in JPEG data");

1712 
o
=0; o<
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
; o++)

1715 i‡(
	`OJPEGRódByã
(
•
,&
n
)==0)

1717 
•
->
sos_cs
[•->
∂™e_ßm∂e_off£t
+
o
]=
n
;

1719 i‡(
	`OJPEGRódByã
(
•
,&
n
)==0)

1721 
•
->
sos_tda
[•->
∂™e_ßm∂e_off£t
+
o
]=
n
;

1724 
	`OJPEGRódSkù
(
•
,3);

1726 
	}
}

1729 
	$OJPEGRódHódîInfoSecTabÀsQTabÀ
(
TIFF
* 
tif
)

1731 c⁄° 
moduÀ
[]="OJPEGReadHeaderInfoSecTablesQTable";

1732 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1733 
uöt8
 
m
;

1734 
uöt8
 
n
;

1735 
uöt32
 
ﬂ
;

1736 
uöt8
* 
ob
;

1737 
uöt32
 
p
;

1738 i‡(
•
->
qèbÀ_off£t
[0]==0)

1740 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Missing JPEGÅables");

1743 
•
->
ö_buf„r_fûe_pos_log
=0;

1744 
m
=0; m<
•
->
ßm∂es_≥r_pixñ
; m++)

1746 i‡((
•
->
qèbÀ_off£t
[
m
]!=0) && ((m==0) || (sp->qtable_offset[m]!=sp->qtable_offset[m-1])))

1748 
n
=0;Ç<
m
-1;Ç++)

1750 i‡(
•
->
qèbÀ_off£t
[
m
]==•->qèbÀ_off£t[
n
])

1752 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt JpegQTablesÅag value");

1756 
ﬂ
=(
uöt32
)+69;

1757 
ob
=
	`_TIFFmÆloc
(
ﬂ
);

1758 i‡(
ob
==0)

1760 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1763 *(
uöt32
*)
ob
=
ﬂ
;

1764 
ob
[(
uöt32
)]=255;

1765 
ob
[(
uöt32
)+1]=
JPEG_MARKER_DQT
;

1766 
ob
[(
uöt32
)+2]=0;

1767 
ob
[(
uöt32
)+3]=67;

1768 
ob
[(
uöt32
)+4]=
m
;

1769 
	`TIFFSìkFûe
(
tif
,
•
->
qèbÀ_off£t
[
m
],
SEEK_SET
);

1770 
p
=
	`TIFFRódFûe
(
tif
,&
ob
[(
uöt32
)+5],64);

1771 i‡(
p
!=64)

1773 
•
->
qèbÀ
[
m
]=
ob
;

1774 
•
->
sof_tq
[
m
]=m;

1777 
•
->
sof_tq
[
m
]=sp->sof_tq[m-1];

1780 
	}
}

1783 
	$OJPEGRódHódîInfoSecTabÀsDcTabÀ
(
TIFF
* 
tif
)

1785 c⁄° 
moduÀ
[]="OJPEGReadHeaderInfoSecTablesDcTable";

1786 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1787 
uöt8
 
m
;

1788 
uöt8
 
n
;

1789 
uöt8
 
o
[16];

1790 
uöt32
 
p
;

1791 
uöt32
 
q
;

1792 
uöt32
 
ø
;

1793 
uöt8
* 
rb
;

1794 i‡(
•
->
d˘abÀ_off£t
[0]==0)

1796 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Missing JPEGÅables");

1799 
•
->
ö_buf„r_fûe_pos_log
=0;

1800 
m
=0; m<
•
->
ßm∂es_≥r_pixñ
; m++)

1802 i‡((
•
->
d˘abÀ_off£t
[
m
]!=0) && ((m==0) || (sp->dctable_offset[m]!=sp->dctable_offset[m-1])))

1804 
n
=0;Ç<
m
-1;Ç++)

1806 i‡(
•
->
d˘abÀ_off£t
[
m
]==•->d˘abÀ_off£t[
n
])

1808 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt JpegDcTablesÅag value");

1812 
	`TIFFSìkFûe
(
tif
,
•
->
d˘abÀ_off£t
[
m
],
SEEK_SET
);

1813 
p
=
	`TIFFRódFûe
(
tif
,
o
,16);

1814 i‡(
p
!=16)

1816 
q
=0;

1817 
n
=0;Ç<16;Ç++)

1818 
q
+=
o
[
n
];

1819 
ø
=(
uöt32
)+21+
q
;

1820 
rb
=
	`_TIFFmÆloc
(
ø
);

1821 i‡(
rb
==0)

1823 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1826 *(
uöt32
*)
rb
=
ø
;

1827 
rb
[(
uöt32
)]=255;

1828 
rb
[(
uöt32
)+1]=
JPEG_MARKER_DHT
;

1829 
rb
[(
uöt32
)+2]=((19+
q
)>>8);

1830 
rb
[(
uöt32
)+3]=((19+
q
)&255);

1831 
rb
[(
uöt32
)+4]=
m
;

1832 
n
=0;Ç<16;Ç++)

1833 
rb
[(
uöt32
)+5+
n
]=
o
[n];

1834 
p
=
	`TIFFRódFûe
(
tif
,&(
rb
[(
uöt32
)+21]),
q
);

1835 i‡(
p
!=
q
)

1837 
•
->
d˘abÀ
[
m
]=
rb
;

1838 
•
->
sos_tda
[
m
]=(m<<4);

1841 
•
->
sos_tda
[
m
]=sp->sos_tda[m-1];

1844 
	}
}

1847 
	$OJPEGRódHódîInfoSecTabÀsAcTabÀ
(
TIFF
* 
tif
)

1849 c⁄° 
moduÀ
[]="OJPEGReadHeaderInfoSecTablesAcTable";

1850 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

1851 
uöt8
 
m
;

1852 
uöt8
 
n
;

1853 
uöt8
 
o
[16];

1854 
uöt32
 
p
;

1855 
uöt32
 
q
;

1856 
uöt32
 
ø
;

1857 
uöt8
* 
rb
;

1858 i‡(
•
->
a˘abÀ_off£t
[0]==0)

1860 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Missing JPEGÅables");

1863 
•
->
ö_buf„r_fûe_pos_log
=0;

1864 
m
=0; m<
•
->
ßm∂es_≥r_pixñ
; m++)

1866 i‡((
•
->
a˘abÀ_off£t
[
m
]!=0) && ((m==0) || (sp->actable_offset[m]!=sp->actable_offset[m-1])))

1868 
n
=0;Ç<
m
-1;Ç++)

1870 i‡(
•
->
a˘abÀ_off£t
[
m
]==•->a˘abÀ_off£t[
n
])

1872 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Corrupt JpegAcTablesÅag value");

1876 
	`TIFFSìkFûe
(
tif
,
•
->
a˘abÀ_off£t
[
m
],
SEEK_SET
);

1877 
p
=
	`TIFFRódFûe
(
tif
,
o
,16);

1878 i‡(
p
!=16)

1880 
q
=0;

1881 
n
=0;Ç<16;Ç++)

1882 
q
+=
o
[
n
];

1883 
ø
=(
uöt32
)+21+
q
;

1884 
rb
=
	`_TIFFmÆloc
(
ø
);

1885 i‡(
rb
==0)

1887 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Out of memory");

1890 *(
uöt32
*)
rb
=
ø
;

1891 
rb
[(
uöt32
)]=255;

1892 
rb
[(
uöt32
)+1]=
JPEG_MARKER_DHT
;

1893 
rb
[(
uöt32
)+2]=((19+
q
)>>8);

1894 
rb
[(
uöt32
)+3]=((19+
q
)&255);

1895 
rb
[(
uöt32
)+4]=(16|
m
);

1896 
n
=0;Ç<16;Ç++)

1897 
rb
[(
uöt32
)+5+
n
]=
o
[n];

1898 
p
=
	`TIFFRódFûe
(
tif
,&(
rb
[(
uöt32
)+21]),
q
);

1899 i‡(
p
!=
q
)

1901 
•
->
a˘abÀ
[
m
]=
rb
;

1902 
•
->
sos_tda
[
m
]=(sp->sos_tda[m]|m);

1905 
•
->
sos_tda
[
m
]=(sp->sos_tda[m]|(sp->sos_tda[m-1]&15));

1908 
	}
}

1911 
	$OJPEGRódBuf„rFûl
(
OJPEGSèã
* 
•
)

1913 
uöt16
 
m
;

1914 
tmsize_t
 
n
;

1919 i‡(
•
->
ö_buf„r_fûe_togo
!=0)

1921 i‡(
•
->
ö_buf„r_fûe_pos_log
==0)

1923 
	`TIFFSìkFûe
(
•
->
tif
,•->
ö_buf„r_fûe_pos
,
SEEK_SET
);

1924 
•
->
ö_buf„r_fûe_pos_log
=1;

1926 
m
=
OJPEG_BUFFER
;

1927 i‡((
uöt64
)
m
>
•
->
ö_buf„r_fûe_togo
)

1928 
m
=(
uöt16
)
•
->
ö_buf„r_fûe_togo
;

1929 
n
=
	`TIFFRódFûe
(
•
->
tif
,•->
ö_buf„r
,(
tmsize_t
)
m
);

1930 i‡(
n
==0)

1932 
	`as£π
(
n
>0);

1933 
	`as£π
(
n
<=
OJPEG_BUFFER
);

1934 
	`as£π
(
n
<65536);

1935 
	`as£π
((
uöt64
)
n
<=
•
->
ö_buf„r_fûe_togo
);

1936 
m
=(
uöt16
)
n
;

1937 
•
->
ö_buf„r_togo
=
m
;

1938 
•
->
ö_buf„r_cur
=•->
ö_buf„r
;

1939 
•
->
ö_buf„r_fûe_togo
-=
m
;

1940 
•
->
ö_buf„r_fûe_pos
+=
m
;

1943 
•
->
ö_buf„r_fûe_pos_log
=0;

1944 
•
->
ö_buf„r_sour˚
)

1946 
osibsNŸSëYë
:

1947 i‡(
•
->
j≥g_öãrch™ge_f‹m©
!=0)

1949 
•
->
ö_buf„r_fûe_pos
=•->
j≥g_öãrch™ge_f‹m©
;

1950 
•
->
ö_buf„r_fûe_togo
=•->
j≥g_öãrch™ge_f‹m©_Àngth
;

1952 
•
->
ö_buf„r_sour˚
=
osibsJ≥gI¡îch™geF‹m©
;

1954 
osibsJ≥gI¡îch™geF‹m©
:

1955 
•
->
ö_buf„r_sour˚
=
osibsSåûe
;

1956 
osibsSåûe
:

1957 i‡(
•
->
ö_buf„r_√xt_°rûe
==•->
ö_buf„r_°rûe_cou¡
)

1958 
•
->
ö_buf„r_sour˚
=
osibsEof
;

1961 
•
->
ö_buf„r_fûe_pos
=•->
tif
->
tif_dú
.
td_°rùoff£t
[•->
ö_buf„r_√xt_°rûe
];

1962 i‡(
•
->
ö_buf„r_fûe_pos
!=0)

1964 i‡(
•
->
ö_buf„r_fûe_pos
>=•->
fûe_size
)

1965 
•
->
ö_buf„r_fûe_pos
=0;

1966 i‡(
•
->
tif
->
tif_dú
.
td_°rùbyãcou¡
==
NULL
)

1967 
•
->
ö_buf„r_fûe_togo
=•->
fûe_size
-•->
ö_buf„r_fûe_pos
;

1970 i‡(
•
->
tif
->
tif_dú
.
td_°rùbyãcou¡
 == 0) {

1971 
	`TIFFEº‹Ext
(
•
->
tif
->
tif_˛õ¡d©a
,•->tif->
tif_«me
,"Strip byte countsáre missing");

1974 
•
->
ö_buf„r_fûe_togo
=•->
tif
->
tif_dú
.
td_°rùbyãcou¡
[•->
ö_buf„r_√xt_°rûe
];

1975 i‡(
•
->
ö_buf„r_fûe_togo
==0)

1976 
•
->
ö_buf„r_fûe_pos
=0;

1977 i‡(
•
->
ö_buf„r_fûe_pos
+•->
ö_buf„r_fûe_togo
>•->
fûe_size
)

1978 
•
->
ö_buf„r_fûe_togo
=•->
fûe_size
-•->
ö_buf„r_fûe_pos
;

1981 
•
->
ö_buf„r_√xt_°rûe
++;

1989 
	}
}

1992 
	$OJPEGRódByã
(
OJPEGSèã
* 
•
, 
uöt8
* 
byã
)

1994 i‡(
•
->
ö_buf„r_togo
==0)

1996 i‡(
	`OJPEGRódBuf„rFûl
(
•
)==0)

1998 
	`as£π
(
•
->
ö_buf„r_togo
>0);

2000 *
byã
=*(
•
->
ö_buf„r_cur
);

2001 
•
->
ö_buf„r_cur
++;

2002 
•
->
ö_buf„r_togo
--;

2004 
	}
}

2007 
	$OJPEGRódByãPìk
(
OJPEGSèã
* 
•
, 
uöt8
* 
byã
)

2009 i‡(
•
->
ö_buf„r_togo
==0)

2011 i‡(
	`OJPEGRódBuf„rFûl
(
•
)==0)

2013 
	`as£π
(
•
->
ö_buf„r_togo
>0);

2015 *
byã
=*(
•
->
ö_buf„r_cur
);

2017 
	}
}

2020 
	$OJPEGRódByãAdv™˚
(
OJPEGSèã
* 
•
)

2022 
	`as£π
(
•
->
ö_buf„r_togo
>0);

2023 
•
->
ö_buf„r_cur
++;

2024 
•
->
ö_buf„r_togo
--;

2025 
	}
}

2028 
	$OJPEGRódW‹d
(
OJPEGSèã
* 
•
, 
uöt16
* 
w‹d
)

2030 
uöt8
 
m
;

2031 i‡(
	`OJPEGRódByã
(
•
,&
m
)==0)

2033 *
w‹d
=(
m
<<8);

2034 i‡(
	`OJPEGRódByã
(
•
,&
m
)==0)

2036 *
w‹d
|=
m
;

2038 
	}
}

2041 
	$OJPEGRódBlock
(
OJPEGSèã
* 
•
, 
uöt16
 
Àn
, * 
mem
)

2043 
uöt16
 
mÀn
;

2044 
uöt8
* 
mmem
;

2045 
uöt16
 
n
;

2046 
	`as£π
(
Àn
>0);

2047 
mÀn
=
Àn
;

2048 
mmem
=
mem
;

2051 i‡(
•
->
ö_buf„r_togo
==0)

2053 i‡(
	`OJPEGRódBuf„rFûl
(
•
)==0)

2055 
	`as£π
(
•
->
ö_buf„r_togo
>0);

2057 
n
=
mÀn
;

2058 i‡(
n
>
•
->
ö_buf„r_togo
)

2059 
n
=
•
->
ö_buf„r_togo
;

2060 
	`_TIFFmem˝y
(
mmem
,
•
->
ö_buf„r_cur
,
n
);

2061 
•
->
ö_buf„r_cur
+=
n
;

2062 
•
->
ö_buf„r_togo
-=
n
;

2063 
mÀn
-=
n
;

2064 
mmem
+=
n
;

2065 } 
mÀn
>0);

2067 
	}
}

2070 
	$OJPEGRódSkù
(
OJPEGSèã
* 
•
, 
uöt16
 
Àn
)

2072 
uöt16
 
m
;

2073 
uöt16
 
n
;

2074 
m
=
Àn
;

2075 
n
=
m
;

2076 i‡(
n
>
•
->
ö_buf„r_togo
)

2077 
n
=
•
->
ö_buf„r_togo
;

2078 
•
->
ö_buf„r_cur
+=
n
;

2079 
•
->
ö_buf„r_togo
-=
n
;

2080 
m
-=
n
;

2081 i‡(
m
>0)

2083 
	`as£π
(
•
->
ö_buf„r_togo
==0);

2084 
n
=
m
;

2085 i‡((
uöt64
)
n
>
•
->
ö_buf„r_fûe_togo
)

2086 
n
=(
uöt16
)
•
->
ö_buf„r_fûe_togo
;

2087 
•
->
ö_buf„r_fûe_pos
+=
n
;

2088 
•
->
ö_buf„r_fûe_togo
-=
n
;

2089 
•
->
ö_buf„r_fûe_pos_log
=0;

2097 
	}
}

2100 
	$OJPEGWrôeSåóm
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
)

2102 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2103 *
Àn
=0;

2106 
	`as£π
(
•
->
out_°©e
<=
ososEoi
);

2107 
•
->
out_°©e
)

2109 
ososSoi
:

2110 
	`OJPEGWrôeSåómSoi
(
tif
,
mem
,
Àn
);

2112 
ososQTabÀ0
:

2113 
	`OJPEGWrôeSåómQTabÀ
(
tif
,0,
mem
,
Àn
);

2115 
ososQTabÀ1
:

2116 
	`OJPEGWrôeSåómQTabÀ
(
tif
,1,
mem
,
Àn
);

2118 
ososQTabÀ2
:

2119 
	`OJPEGWrôeSåómQTabÀ
(
tif
,2,
mem
,
Àn
);

2121 
ososQTabÀ3
:

2122 
	`OJPEGWrôeSåómQTabÀ
(
tif
,3,
mem
,
Àn
);

2124 
ososDcTabÀ0
:

2125 
	`OJPEGWrôeSåómDcTabÀ
(
tif
,0,
mem
,
Àn
);

2127 
ososDcTabÀ1
:

2128 
	`OJPEGWrôeSåómDcTabÀ
(
tif
,1,
mem
,
Àn
);

2130 
ososDcTabÀ2
:

2131 
	`OJPEGWrôeSåómDcTabÀ
(
tif
,2,
mem
,
Àn
);

2133 
ososDcTabÀ3
:

2134 
	`OJPEGWrôeSåómDcTabÀ
(
tif
,3,
mem
,
Àn
);

2136 
ososAcTabÀ0
:

2137 
	`OJPEGWrôeSåómAcTabÀ
(
tif
,0,
mem
,
Àn
);

2139 
ososAcTabÀ1
:

2140 
	`OJPEGWrôeSåómAcTabÀ
(
tif
,1,
mem
,
Àn
);

2142 
ososAcTabÀ2
:

2143 
	`OJPEGWrôeSåómAcTabÀ
(
tif
,2,
mem
,
Àn
);

2145 
ososAcTabÀ3
:

2146 
	`OJPEGWrôeSåómAcTabÀ
(
tif
,3,
mem
,
Àn
);

2148 
ososDri
:

2149 
	`OJPEGWrôeSåómDri
(
tif
,
mem
,
Àn
);

2151 
ososSof
:

2152 
	`OJPEGWrôeSåómSof
(
tif
,
mem
,
Àn
);

2154 
ososSos
:

2155 
	`OJPEGWrôeSåómSos
(
tif
,
mem
,
Àn
);

2157 
ososCom¥es£d
:

2158 i‡(
	`OJPEGWrôeSåómCom¥es£d
(
tif
,
mem
,
Àn
)==0)

2161 
ososR°
:

2162 
	`OJPEGWrôeSåómR°
(
tif
,
mem
,
Àn
);

2164 
ososEoi
:

2165 
	`OJPEGWrôeSåómEoi
(
tif
,
mem
,
Àn
);

2168 } *
Àn
==0);

2170 
	}
}

2173 
	$OJPEGWrôeSåómSoi
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
)

2175 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2176 
	`as£π
(
OJPEG_BUFFER
>=2);

2177 
•
->
out_buf„r
[0]=255;

2178 
•
->
out_buf„r
[1]=
JPEG_MARKER_SOI
;

2179 *
Àn
=2;

2180 *
mem
=(*)
•
->
out_buf„r
;

2181 
•
->
out_°©e
++;

2182 
	}
}

2185 
	$OJPEGWrôeSåómQTabÀ
(
TIFF
* 
tif
, 
uöt8
 
èbÀ_ödex
, ** 
mem
, 
uöt32
* 
Àn
)

2187 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2188 i‡(
•
->
qèbÀ
[
èbÀ_ödex
]!=0)

2190 *
mem
=(*)(
•
->
qèbÀ
[
èbÀ_ödex
]+(
uöt32
));

2191 *
Àn
=*((
uöt32
*)
•
->
qèbÀ
[
èbÀ_ödex
])-(uint32);

2193 
•
->
out_°©e
++;

2194 
	}
}

2197 
	$OJPEGWrôeSåómDcTabÀ
(
TIFF
* 
tif
, 
uöt8
 
èbÀ_ödex
, ** 
mem
, 
uöt32
* 
Àn
)

2199 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2200 i‡(
•
->
d˘abÀ
[
èbÀ_ödex
]!=0)

2202 *
mem
=(*)(
•
->
d˘abÀ
[
èbÀ_ödex
]+(
uöt32
));

2203 *
Àn
=*((
uöt32
*)
•
->
d˘abÀ
[
èbÀ_ödex
])-(uint32);

2205 
•
->
out_°©e
++;

2206 
	}
}

2209 
	$OJPEGWrôeSåómAcTabÀ
(
TIFF
* 
tif
, 
uöt8
 
èbÀ_ödex
, ** 
mem
, 
uöt32
* 
Àn
)

2211 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2212 i‡(
•
->
a˘abÀ
[
èbÀ_ödex
]!=0)

2214 *
mem
=(*)(
•
->
a˘abÀ
[
èbÀ_ödex
]+(
uöt32
));

2215 *
Àn
=*((
uöt32
*)
•
->
a˘abÀ
[
èbÀ_ödex
])-(uint32);

2217 
•
->
out_°©e
++;

2218 
	}
}

2221 
	$OJPEGWrôeSåómDri
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
)

2223 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2224 
	`as£π
(
OJPEG_BUFFER
>=6);

2225 i‡(
•
->
ª°¨t_öãrvÆ
!=0)

2227 
•
->
out_buf„r
[0]=255;

2228 
•
->
out_buf„r
[1]=
JPEG_MARKER_DRI
;

2229 
•
->
out_buf„r
[2]=0;

2230 
•
->
out_buf„r
[3]=4;

2231 
•
->
out_buf„r
[4]=(•->
ª°¨t_öãrvÆ
>>8);

2232 
•
->
out_buf„r
[5]=(•->
ª°¨t_öãrvÆ
&255);

2233 *
Àn
=6;

2234 *
mem
=(*)
•
->
out_buf„r
;

2236 
•
->
out_°©e
++;

2237 
	}
}

2240 
	$OJPEGWrôeSåómSof
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
)

2242 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2243 
uöt8
 
m
;

2244 
	`as£π
(
OJPEG_BUFFER
>=2+8+
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
*3);

2245 
	`as£π
(255>=8+
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
*3);

2246 
•
->
out_buf„r
[0]=255;

2247 
•
->
out_buf„r
[1]=•->
sof_m¨kî_id
;

2249 
•
->
out_buf„r
[2]=0;

2250 
•
->
out_buf„r
[3]=8+•->
ßm∂es_≥r_pixñ_≥r_∂™e
*3;

2252 
•
->
out_buf„r
[4]=8;

2254 
•
->
out_buf„r
[5]=(•->
sof_y
>>8);

2255 
•
->
out_buf„r
[6]=(•->
sof_y
&255);

2257 
•
->
out_buf„r
[7]=(•->
sof_x
>>8);

2258 
•
->
out_buf„r
[8]=(•->
sof_x
&255);

2260 
•
->
out_buf„r
[9]=•->
ßm∂es_≥r_pixñ_≥r_∂™e
;

2261 
m
=0; m<
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
; m++)

2264 
•
->
out_buf„r
[10+
m
*3]=•->
sof_c
[•->
∂™e_ßm∂e_off£t
+m];

2266 
•
->
out_buf„r
[10+
m
*3+1]=•->
sof_hv
[•->
∂™e_ßm∂e_off£t
+m];

2268 
•
->
out_buf„r
[10+
m
*3+2]=•->
sof_tq
[•->
∂™e_ßm∂e_off£t
+m];

2270 *
Àn
=10+
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
*3;

2271 *
mem
=(*)
•
->
out_buf„r
;

2272 
•
->
out_°©e
++;

2273 
	}
}

2276 
	$OJPEGWrôeSåómSos
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
)

2278 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2279 
uöt8
 
m
;

2280 
	`as£π
(
OJPEG_BUFFER
>=2+6+
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
*2);

2281 
	`as£π
(255>=6+
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
*2);

2282 
•
->
out_buf„r
[0]=255;

2283 
•
->
out_buf„r
[1]=
JPEG_MARKER_SOS
;

2285 
•
->
out_buf„r
[2]=0;

2286 
•
->
out_buf„r
[3]=6+•->
ßm∂es_≥r_pixñ_≥r_∂™e
*2;

2288 
•
->
out_buf„r
[4]=•->
ßm∂es_≥r_pixñ_≥r_∂™e
;

2289 
m
=0; m<
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
; m++)

2292 
•
->
out_buf„r
[5+
m
*2]=•->
sos_cs
[•->
∂™e_ßm∂e_off£t
+m];

2294 
•
->
out_buf„r
[5+
m
*2+1]=•->
sos_tda
[•->
∂™e_ßm∂e_off£t
+m];

2297 
•
->
out_buf„r
[5+•->
ßm∂es_≥r_pixñ_≥r_∂™e
*2]=0;

2299 
•
->
out_buf„r
[5+•->
ßm∂es_≥r_pixñ_≥r_∂™e
*2+1]=63;

2301 
•
->
out_buf„r
[5+•->
ßm∂es_≥r_pixñ_≥r_∂™e
*2+2]=0;

2302 *
Àn
=8+
•
->
ßm∂es_≥r_pixñ_≥r_∂™e
*2;

2303 *
mem
=(*)
•
->
out_buf„r
;

2304 
•
->
out_°©e
++;

2305 
	}
}

2308 
	$OJPEGWrôeSåómCom¥es£d
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
)

2310 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2311 i‡(
•
->
ö_buf„r_togo
==0)

2313 i‡(
	`OJPEGRódBuf„rFûl
(
•
)==0)

2315 
	`as£π
(
•
->
ö_buf„r_togo
>0);

2317 *
Àn
=
•
->
ö_buf„r_togo
;

2318 *
mem
=(*)
•
->
ö_buf„r_cur
;

2319 
•
->
ö_buf„r_togo
=0;

2320 i‡(
•
->
ö_buf„r_fûe_togo
==0)

2322 
•
->
ö_buf„r_sour˚
)

2324 
osibsSåûe
:

2325 i‡(
•
->
ö_buf„r_√xt_°rûe
<•->
ö_buf„r_°rûe_cou¡
)

2326 
•
->
out_°©e
=
ososR°
;

2328 
•
->
out_°©e
=
ososEoi
;

2330 
osibsEof
:

2331 
•
->
out_°©e
=
ososEoi
;

2338 
	}
}

2341 
	$OJPEGWrôeSåómR°
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
)

2343 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2344 
	`as£π
(
OJPEG_BUFFER
>=2);

2345 
•
->
out_buf„r
[0]=255;

2346 
•
->
out_buf„r
[1]=
JPEG_MARKER_RST0
+•->
ª°¨t_ödex
;

2347 
•
->
ª°¨t_ödex
++;

2348 i‡(
•
->
ª°¨t_ödex
==8)

2349 
•
->
ª°¨t_ödex
=0;

2350 *
Àn
=2;

2351 *
mem
=(*)
•
->
out_buf„r
;

2352 
•
->
out_°©e
=
ososCom¥es£d
;

2353 
	}
}

2356 
	$OJPEGWrôeSåómEoi
(
TIFF
* 
tif
, ** 
mem
, 
uöt32
* 
Àn
)

2358 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2359 
	`as£π
(
OJPEG_BUFFER
>=2);

2360 
•
->
out_buf„r
[0]=255;

2361 
•
->
out_buf„r
[1]=
JPEG_MARKER_EOI
;

2362 *
Àn
=2;

2363 *
mem
=(*)
•
->
out_buf„r
;

2364 
	}
}

2366 #i‚de‡
LIBJPEG_ENCAP_EXTERNAL


2368 
	$j≥g_¸óã_decom¥ess_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
)

2370 (
	`SETJMP
(
•
->
exô_jmpbuf
)?0:(
	`j≥g_¸óã_decom¥ess
(
cöfo
),1));

2371 
	}
}

2374 #i‚de‡
LIBJPEG_ENCAP_EXTERNAL


2376 
	$j≥g_ªad_hódî_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
, 
uöt8
 
ªquúe_image
)

2378 (
	`SETJMP
(
•
->
exô_jmpbuf
)?0:(
	`j≥g_ªad_hódî
(
cöfo
,
ªquúe_image
),1));

2379 
	}
}

2382 #i‚de‡
LIBJPEG_ENCAP_EXTERNAL


2384 
	$j≥g_°¨t_decom¥ess_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
)

2386 (
	`SETJMP
(
•
->
exô_jmpbuf
)?0:(
	`j≥g_°¨t_decom¥ess
(
cöfo
),1));

2387 
	}
}

2390 #i‚de‡
LIBJPEG_ENCAP_EXTERNAL


2392 
	$j≥g_ªad_sˇ∆öes_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
, * 
sˇ∆öes
, 
uöt32
 
max_löes
)

2394 (
	`SETJMP
(
•
->
exô_jmpbuf
)?0:(
	`j≥g_ªad_sˇ∆öes
(
cöfo
,
sˇ∆öes
,
max_löes
),1));

2395 
	}
}

2398 #i‚de‡
LIBJPEG_ENCAP_EXTERNAL


2400 
	$j≥g_ªad_øw_d©a_íˇp
(
OJPEGSèã
* 
•
, 
j≥g_decom¥ess_°ru˘
* 
cöfo
, * 
d©a
, 
uöt32
 
max_löes
)

2402 (
	`SETJMP
(
•
->
exô_jmpbuf
)?0:(
	`j≥g_ªad_øw_d©a
(
cöfo
,
d©a
,
max_löes
),1));

2403 
	}
}

2406 #i‚de‡
LIBJPEG_ENCAP_EXTERNAL


2408 
	$j≥g_íˇp_unwöd
(
TIFF
* 
tif
)

2410 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2411 
	`LONGJMP
(
•
->
exô_jmpbuf
,1);

2412 
	}
}

2416 
	$OJPEGLibj≥gJ≥gEº‹MgrOuçutMesßge
(
j≥g_comm⁄_°ru˘
* 
cöfo
)

2418 
buf„r
[
JMSG_LENGTH_MAX
];

2419 (*
cöfo
->
îr
->
f‹m©_mesßge
)(cöfo,
buf„r
);

2420 
	`TIFFW¨nögExt
(((
TIFF
*)(
cöfo
->
˛õ¡_d©a
))->
tif_˛õ¡d©a
,"LibJ≥g","%s",
buf„r
);

2421 
	}
}

2424 
	$OJPEGLibj≥gJ≥gEº‹MgrEº‹Exô
(
j≥g_comm⁄_°ru˘
* 
cöfo
)

2426 
buf„r
[
JMSG_LENGTH_MAX
];

2427 (*
cöfo
->
îr
->
f‹m©_mesßge
)(cöfo,
buf„r
);

2428 
	`TIFFEº‹Ext
(((
TIFF
*)(
cöfo
->
˛õ¡_d©a
))->
tif_˛õ¡d©a
,"LibJ≥g","%s",
buf„r
);

2429 
	`j≥g_íˇp_unwöd
((
TIFF
*)(
cöfo
->
˛õ¡_d©a
));

2430 
	}
}

2433 
	$OJPEGLibj≥gJ≥gSour˚MgrInôSour˚
(
j≥g_decom¥ess_°ru˘
* 
cöfo
)

2435 ()
cöfo
;

2436 
	}
}

2438 
boﬁón


2439 
	$OJPEGLibj≥gJ≥gSour˚MgrFûlI≈utBuf„r
(
j≥g_decom¥ess_°ru˘
* 
cöfo
)

2441 
TIFF
* 
tif
=(TIFF*)
cöfo
->
˛õ¡_d©a
;

2442 
OJPEGSèã
* 
•
=(OJPEGSèã*)
tif
->
tif_d©a
;

2443 * 
mem
=0;

2444 
uöt32
 
Àn
=0U;

2445 i‡(
	`OJPEGWrôeSåóm
(
tif
,&
mem
,&
Àn
)==0)

2447 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,"LibJpeg","PrematureÉnd of JPEG data");

2448 
	`j≥g_íˇp_unwöd
(
tif
);

2450 
•
->
libj≥g_j≥g_sour˚_mgr
.
byãs_ö_buf„r
=
Àn
;

2451 
•
->
libj≥g_j≥g_sour˚_mgr
.
√xt_öput_byã
=
mem
;

2453 
	}
}

2456 
	$OJPEGLibj≥gJ≥gSour˚MgrSkùI≈utD©a
(
j≥g_decom¥ess_°ru˘
* 
cöfo
, 
num_byãs
)

2458 
TIFF
* 
tif
=(TIFF*)
cöfo
->
˛õ¡_d©a
;

2459 ()
num_byãs
;

2460 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,"LibJpeg","UnexpectedÉrror");

2461 
	`j≥g_íˇp_unwöd
(
tif
);

2462 
	}
}

2464 
boﬁón


2465 
	$OJPEGLibj≥gJ≥gSour˚MgrResyncToRe°¨t
(
j≥g_decom¥ess_°ru˘
* 
cöfo
, 
desúed
)

2467 
TIFF
* 
tif
=(TIFF*)
cöfo
->
˛õ¡_d©a
;

2468 ()
desúed
;

2469 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,"LibJpeg","UnexpectedÉrror");

2470 
	`j≥g_íˇp_unwöd
(
tif
);

2472 
	}
}

2475 
	$OJPEGLibj≥gJ≥gSour˚MgrTîmSour˚
(
j≥g_decom¥ess_°ru˘
* 
cöfo
)

2477 ()
cöfo
;

2478 
	}
}

	@libtiff/tif_open.c

30 
	~"tiffi›.h
"

36 
	$_tiffDummyM≠Proc
(
th™dÀ_t
 
fd
, ** 
pba£
, 
toff_t
* 
psize
)

38 (Ë
fd
; (Ë
pba£
; (Ë
psize
;

40 
	}
}

43 
	$_tiffDummyUnm≠Proc
(
th™dÀ_t
 
fd
, * 
ba£
, 
toff_t
 
size
)

45 (Ë
fd
; (Ë
ba£
; (Ë
size
;

46 
	}
}

49 
	$_TIFFgëMode
(c⁄° * 
mode
, c⁄° * 
moduÀ
)

51 
m
 = -1;

53 
mode
[0]) {

55 
m
 = 
O_RDONLY
;

56 i‡(
mode
[1] == '+')

57 
m
 = 
O_RDWR
;

61 
m
 = 
O_RDWR
|
O_CREAT
;

62 i‡(
mode
[0] == 'w')

63 
m
 |
O_TRUNC
;

66 
	`TIFFEº‹Ext
(0, 
moduÀ
, "\"%s\": Bad mode", 
mode
);

69  (
m
);

70 
	}
}

72 
TIFF
*

73 
	$TIFFClõ¡O≥n
(

74 c⁄° * 
«me
, c⁄° * 
mode
,

75 
th™dÀ_t
 
˛õ¡d©a
,

76 
TIFFRódWrôeProc
 
ªad¥oc
,

77 
TIFFRódWrôeProc
 
wrôïroc
,

78 
TIFFSìkProc
 
£ek¥oc
,

79 
TIFFClo£Proc
 
˛o£¥oc
,

80 
TIFFSizeProc
 
sizïroc
,

81 
TIFFM≠FûeProc
 
m≠¥oc
,

82 
TIFFUnm≠FûeProc
 
unm≠¥oc


85 c⁄° 
moduÀ
[] = "TIFFClientOpen";

86 
TIFF
 *
tif
;

87 
m
;

88 c⁄° * 
˝
;

93 
	`as£π
((
uöt8
)==1);

94 
	`as£π
((
öt8
)==1);

95 
	`as£π
((
uöt16
)==2);

96 
	`as£π
((
öt16
)==2);

97 
	`as£π
((
uöt32
)==4);

98 
	`as£π
((
öt32
)==4);

99 
	`as£π
((
uöt64
)==8);

100 
	`as£π
((
öt64
)==8);

101 
	`as£π
((
tmsize_t
)==(*));

104 
uöt8
 
a8
[2];

105 
uöt16
 
a16
;

106 } 
n
;

107 
n
.
a8
[0]=1;

108 
n
.
a8
[1]=0;

109 #ifde‡
WORDS_BIGENDIAN


110 
	`as£π
(
n
.
a16
==256);

112 
	`as£π
(
n
.
a16
==1);

116 
m
 = 
	`_TIFFgëMode
(
mode
, 
moduÀ
);

117 i‡(
m
 == -1)

118 
bad2
;

119 
tif
 = (
TIFF
 *)
	`_TIFFmÆloc
((
tmsize_t
)( (TIFFË+ 
	`°æí
(
«me
) + 1));

120 i‡(
tif
 =
NULL
) {

121 
	`TIFFEº‹Ext
(
˛õ¡d©a
, 
moduÀ
, "%s: Ouào‡mem‹y (TIFF såu˘uª)", 
«me
);

122 
bad2
;

124 
	`_TIFFmem£t
(
tif
, 0,  (*tif));

125 
tif
->
tif_«me
 = (*Èi‡+  (
TIFF
);

126 
	`°r˝y
(
tif
->
tif_«me
, 
«me
);

127 
tif
->
tif_mode
 = 
m
 &~ (
O_CREAT
|
O_TRUNC
);

128 
tif
->
tif_curdú
 = (
uöt16
) -1;

129 
tif
->
tif_curoff
 = 0;

130 
tif
->
tif_cur°rù
 = (
uöt32
) -1;

131 
tif
->
tif_row
 = (
uöt32
) -1;

132 
tif
->
tif_˛õ¡d©a
 = 
˛õ¡d©a
;

133 i‡(!
ªad¥oc
 || !
wrôïroc
 || !
£ek¥oc
 || !
˛o£¥oc
 || !
sizïroc
) {

134 
	`TIFFEº‹Ext
(
˛õ¡d©a
, 
moduÀ
,

136 
bad2
;

138 
tif
->
tif_ªad¥oc
 = 
ªad¥oc
;

139 
tif
->
tif_wrôïroc
 = 
wrôïroc
;

140 
tif
->
tif_£ek¥oc
 = 
£ek¥oc
;

141 
tif
->
tif_˛o£¥oc
 = 
˛o£¥oc
;

142 
tif
->
tif_sizïroc
 = 
sizïroc
;

143 i‡(
m≠¥oc
)

144 
tif
->
tif_m≠¥oc
 = 
m≠¥oc
;

146 
tif
->
tif_m≠¥oc
 = 
_tiffDummyM≠Proc
;

147 i‡(
unm≠¥oc
)

148 
tif
->
tif_unm≠¥oc
 = 
unm≠¥oc
;

150 
tif
->
tif_unm≠¥oc
 = 
_tiffDummyUnm≠Proc
;

151 
	`_TIFFSëDeÁu…Com¥essi⁄Sèã
(
tif
);

157 
tif
->
tif_Êags
 = 
FILLORDER_MSB2LSB
;

158 i‡(
m
 =
O_RDONLY
 )

159 
tif
->
tif_Êags
 |
TIFF_MAPPED
;

161 #ifde‡
STRIPCHOP_DEFAULT


162 i‡(
m
 =
O_RDONLY
 || m =
O_RDWR
)

163 
tif
->
tif_Êags
 |
STRIPCHOP_DEFAULT
;

218 
˝
 = 
mode
; *cp; cp++)

219 *
˝
) {

221 #i‚de‡
WORDS_BIGENDIAN


222 i‡(
m
&
O_CREAT
)

223 
tif
->
tif_Êags
 |
TIFF_SWAB
;

227 #ifde‡
WORDS_BIGENDIAN


228 i‡((
m
&
O_CREAT
))

229 
tif
->
tif_Êags
 |
TIFF_SWAB
;

233 
tif
->
tif_Êags
 = (tif->tif_Êag†&~ 
TIFF_FILLORDER
) |

234 
FILLORDER_MSB2LSB
;

237 
tif
->
tif_Êags
 = (tif->tif_Êag†&~ 
TIFF_FILLORDER
) |

238 
FILLORDER_LSB2MSB
;

241 
tif
->
tif_Êags
 = (tif->tif_Êag†&~ 
TIFF_FILLORDER
) |

242 
HOST_FILLORDER
;

245 i‡(
m
 =
O_RDONLY
)

246 
tif
->
tif_Êags
 |
TIFF_MAPPED
;

249 i‡(
m
 =
O_RDONLY
)

250 
tif
->
tif_Êags
 &~
TIFF_MAPPED
;

253 i‡(
m
 =
O_RDONLY
)

254 
tif
->
tif_Êags
 |
TIFF_STRIPCHOP
;

257 i‡(
m
 =
O_RDONLY
)

258 
tif
->
tif_Êags
 &~
TIFF_STRIPCHOP
;

261 
tif
->
tif_Êags
 |
TIFF_HEADERONLY
;

264 i‡(
m
&
O_CREAT
)

265 
tif
->
tif_Êags
 |
TIFF_BIGTIFF
;

271 i‡((
m
 & 
O_TRUNC
) ||

272 !
	`RódOK
(
tif
, &tif->
tif_hódî
,  (
TIFFHódîCœssic
))) {

273 i‡(
tif
->
tif_mode
 =
O_RDONLY
) {

274 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
«me
,

276 
bad
;

281 #ifde‡
WORDS_BIGENDIAN


282 
tif
->
tif_hódî
.
comm⁄
.
tiff_magic
 =Åif->
tif_Êags
 & 
TIFF_SWAB


283 ? 
TIFF_LITTLEENDIAN
 : 
TIFF_BIGENDIAN
;

285 
tif
->
tif_hódî
.
comm⁄
.
tiff_magic
 =Åif->
tif_Êags
 & 
TIFF_SWAB


286 ? 
TIFF_BIGENDIAN
 : 
TIFF_LITTLEENDIAN
;

288 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

290 
tif
->
tif_hódî
.
comm⁄
.
tiff_vîsi⁄
 = 
TIFF_VERSION_CLASSIC
;

291 
tif
->
tif_hódî
.
˛assic
.
tiff_dúoff
 = 0;

292 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

293 
	`TIFFSwabSh‹t
(&
tif
->
tif_hódî
.
comm⁄
.
tiff_vîsi⁄
);

294 
tif
->
tif_hódî_size
 = (
TIFFHódîCœssic
);

298 
tif
->
tif_hódî
.
comm⁄
.
tiff_vîsi⁄
 = 
TIFF_VERSION_BIG
;

299 
tif
->
tif_hódî
.
big
.
tiff_off£tsize
 = 8;

300 
tif
->
tif_hódî
.
big
.
tiff_unu£d
 = 0;

301 
tif
->
tif_hódî
.
big
.
tiff_dúoff
 = 0;

302 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

304 
	`TIFFSwabSh‹t
(&
tif
->
tif_hódî
.
comm⁄
.
tiff_vîsi⁄
);

305 
	`TIFFSwabSh‹t
(&
tif
->
tif_hódî
.
big
.
tiff_off£tsize
);

307 
tif
->
tif_hódî_size
 =  (
TIFFHódîBig
);

316 
	`TIFFSìkFûe
–
tif
, 0, 
SEEK_SET
 );

317 i‡(!
	`WrôeOK
(
tif
, &tif->
tif_hódî
, (
tmsize_t
)—if->
tif_hódî_size
))) {

318 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
«me
,

320 
bad
;

325 i‡(
tif
->
tif_hódî
.
comm⁄
.
tiff_magic
 =
TIFF_BIGENDIAN
) {

326 #i‚de‡
WORDS_BIGENDIAN


327 
tif
->
tif_Êags
 |
TIFF_SWAB
;

330 #ifde‡
WORDS_BIGENDIAN


331 
tif
->
tif_Êags
 |
TIFF_SWAB
;

337 i‡(!
	`TIFFDeÁu…Dúe˘‹y
(
tif
))

338 
bad
;

339 
tif
->
tif_dúoff
 = 0;

340 
tif
->
tif_dúli°
 = 
NULL
;

341 
tif
->
tif_dúli°size
 = 0;

342 
tif
->
tif_dúnumbî
 = 0;

343  (
tif
);

348 i‡(
tif
->
tif_hódî
.
comm⁄
.
tiff_magic
 !
TIFF_BIGENDIAN
 &&

349 
tif
->
tif_hódî
.
comm⁄
.
tiff_magic
 !
TIFF_LITTLEENDIAN


350 #i‡
MDI_SUPPORT


352 #i‡
HOST_BIGENDIAN


353 
tif
->
tif_hódî
.
comm⁄
.
tiff_magic
 !
MDI_BIGENDIAN


355 
tif
->
tif_hódî
.
comm⁄
.
tiff_magic
 !
MDI_LITTLEENDIAN


358 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
«me
,

362 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
«me
,

365 
tif
->
tif_hódî
.
comm⁄
.
tiff_magic
,

366 
tif
->
tif_hódî
.
comm⁄
.
tiff_magic
);

367 
bad
;

369 i‡(
tif
->
tif_hódî
.
comm⁄
.
tiff_magic
 =
TIFF_BIGENDIAN
) {

370 #i‚de‡
WORDS_BIGENDIAN


371 
tif
->
tif_Êags
 |
TIFF_SWAB
;

374 #ifde‡
WORDS_BIGENDIAN


375 
tif
->
tif_Êags
 |
TIFF_SWAB
;

378 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

379 
	`TIFFSwabSh‹t
(&
tif
->
tif_hódî
.
comm⁄
.
tiff_vîsi⁄
);

380 i‡((
tif
->
tif_hódî
.
comm⁄
.
tiff_vîsi⁄
 !
TIFF_VERSION_CLASSIC
)&&

381 (
tif
->
tif_hódî
.
comm⁄
.
tiff_vîsi⁄
 !
TIFF_VERSION_BIG
)) {

382 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
«me
,

384 
tif
->
tif_hódî
.
comm⁄
.
tiff_vîsi⁄
,

385 
tif
->
tif_hódî
.
comm⁄
.
tiff_vîsi⁄
);

386 
bad
;

388 i‡(
tif
->
tif_hódî
.
comm⁄
.
tiff_vîsi⁄
 =
TIFF_VERSION_CLASSIC
)

390 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

391 
	`TIFFSwabL⁄g
(&
tif
->
tif_hódî
.
˛assic
.
tiff_dúoff
);

392 
tif
->
tif_hódî_size
 = (
TIFFHódîCœssic
);

396 i‡(!
	`RódOK
(
tif
, ((
uöt8
*)(&tif->
tif_hódî
Ë+ (
TIFFHódîCœssic
)), ((
TIFFHódîBig
)-(TIFFHeaderClassic))))

398 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
«me
,

400 
bad
;

402 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

404 
	`TIFFSwabSh‹t
(&
tif
->
tif_hódî
.
big
.
tiff_off£tsize
);

405 
	`TIFFSwabL⁄g8
(&
tif
->
tif_hódî
.
big
.
tiff_dúoff
);

407 i‡(
tif
->
tif_hódî
.
big
.
tiff_off£tsize
 != 8)

409 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
«me
,

411 
tif
->
tif_hódî
.
big
.
tiff_off£tsize
,

412 
tif
->
tif_hódî
.
big
.
tiff_off£tsize
);

413 
bad
;

415 i‡(
tif
->
tif_hódî
.
big
.
tiff_unu£d
 != 0)

417 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
«me
,

419 
tif
->
tif_hódî
.
big
.
tiff_unu£d
,

420 
tif
->
tif_hódî
.
big
.
tiff_unu£d
);

421 
bad
;

423 
tif
->
tif_hódî_size
 = (
TIFFHódîBig
);

424 
tif
->
tif_Êags
 |
TIFF_BIGTIFF
;

426 
tif
->
tif_Êags
 |
TIFF_MYBUFFER
;

427 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
 = 0;

428 
tif
->
tif_øwd©asize
 = 0;

429 
tif
->
tif_øwd©aoff
 = 0;

430 
tif
->
tif_øwd©Æﬂded
 = 0;

432 
mode
[0]) {

434 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

435 
tif
->
tif_√xtdúoff
 =Åif->
tif_hódî
.
˛assic
.
tiff_dúoff
;

437 
tif
->
tif_√xtdúoff
 =Åif->
tif_hódî
.
big
.
tiff_dúoff
;

443 i‡(
tif
->
tif_Êags
 & 
TIFF_MAPPED
)

445 
toff_t
 
n
;

446 i‡(
	`TIFFM≠FûeC⁄ã¡s
(
tif
,(**)(&tif->
tif_ba£
),&
n
))

448 
tif
->
tif_size
=(
tmsize_t
)
n
;

449 
	`as£π
((
toff_t
)
tif
->
tif_size
==
n
);

452 
tif
->
tif_Êags
 &~
TIFF_MAPPED
;

460 i‡(
tif
->
tif_Êags
 & 
TIFF_HEADERONLY
)

461  (
tif
);

466 i‡(
	`TIFFRódDúe˘‹y
(
tif
)) {

467 
tif
->
tif_øwcc
 = (
tmsize_t
)-1;

468 
tif
->
tif_Êags
 |
TIFF_BUFFERSETUP
;

469  (
tif
);

478 i‡(!
	`TIFFDeÁu…Dúe˘‹y
(
tif
))

479 
bad
;

480  (
tif
);

482 
bad
:

483 
tif
->
tif_mode
 = 
O_RDONLY
;

484 
	`TIFFCÀ™up
(
tif
);

485 
bad2
:

486  ((
TIFF
*)0);

487 
	}
}

497 
	$TIFFFûeName
(
TIFF
* 
tif
)

499  (
tif
->
tif_«me
);

500 
	}
}

506 
	$TIFFSëFûeName
(
TIFF
* 
tif
, c⁄° *
«me
)

508 c⁄° * 
ﬁd_«me
 = 
tif
->
tif_«me
;

509 
tif
->
tif_«me
 = (*)
«me
;

510  (
ﬁd_«me
);

511 
	}
}

517 
	$TIFFFûío
(
TIFF
* 
tif
)

519  (
tif
->
tif_fd
);

520 
	}
}

526 
	$TIFFSëFûío
(
TIFF
* 
tif
, 
fd
)

528 
ﬁd_fd
 = 
tif
->
tif_fd
;

529 
tif
->
tif_fd
 = 
fd
;

530  
ﬁd_fd
;

531 
	}
}

536 
th™dÀ_t


537 
	$TIFFClõ¡d©a
(
TIFF
* 
tif
)

539  (
tif
->
tif_˛õ¡d©a
);

540 
	}
}

545 
th™dÀ_t


546 
	$TIFFSëClõ¡d©a
(
TIFF
* 
tif
, 
th™dÀ_t
 
√wvÆue
)

548 
th™dÀ_t
 
m
 = 
tif
->
tif_˛õ¡d©a
;

549 
tif
->
tif_˛õ¡d©a
 = 
√wvÆue
;

550  
m
;

551 
	}
}

557 
	$TIFFGëMode
(
TIFF
* 
tif
)

559  (
tif
->
tif_mode
);

560 
	}
}

566 
	$TIFFSëMode
(
TIFF
* 
tif
, 
mode
)

568 
ﬁd_mode
 = 
tif
->
tif_mode
;

569 
tif
->
tif_mode
 = 
mode
;

570  (
ﬁd_mode
);

571 
	}
}

578 
	$TIFFIsTûed
(
TIFF
* 
tif
)

580  (
	`isTûed
(
tif
));

581 
	}
}

586 
uöt32


587 
	$TIFFCuºítRow
(
TIFF
* 
tif
)

589  (
tif
->
tif_row
);

590 
	}
}

595 
uöt16


596 
	$TIFFCuºítDúe˘‹y
(
TIFF
* 
tif
)

598  (
tif
->
tif_curdú
);

599 
	}
}

604 
uöt32


605 
	$TIFFCuºítSåù
(
TIFF
* 
tif
)

607  (
tif
->
tif_cur°rù
);

608 
	}
}

613 
uöt32


614 
	$TIFFCuºítTûe
(
TIFF
* 
tif
)

616  (
tif
->
tif_cuπûe
);

617 
	}
}

623 
	$TIFFIsByãSw≠≥d
(
TIFF
* 
tif
)

625  ((
tif
->
tif_Êags
 & 
TIFF_SWAB
) != 0);

626 
	}
}

632 
	$TIFFIsUpSam∂ed
(
TIFF
* 
tif
)

634  (
	`isUpSam∂ed
(
tif
));

635 
	}
}

641 
	$TIFFIsMSB2LSB
(
TIFF
* 
tif
)

643  (
	`isFûlOrdî
(
tif
, 
FILLORDER_MSB2LSB
));

644 
	}
}

650 
	$TIFFIsBigEndün
(
TIFF
* 
tif
)

652  (
tif
->
tif_hódî
.
comm⁄
.
tiff_magic
 =
TIFF_BIGENDIAN
);

653 
	}
}

658 
TIFFRódWrôeProc


659 
	$TIFFGëRódProc
(
TIFF
* 
tif
)

661  (
tif
->
tif_ªad¥oc
);

662 
	}
}

667 
TIFFRódWrôeProc


668 
	$TIFFGëWrôeProc
(
TIFF
* 
tif
)

670  (
tif
->
tif_wrôïroc
);

671 
	}
}

676 
TIFFSìkProc


677 
	$TIFFGëSìkProc
(
TIFF
* 
tif
)

679  (
tif
->
tif_£ek¥oc
);

680 
	}
}

685 
TIFFClo£Proc


686 
	$TIFFGëClo£Proc
(
TIFF
* 
tif
)

688  (
tif
->
tif_˛o£¥oc
);

689 
	}
}

694 
TIFFSizeProc


695 
	$TIFFGëSizeProc
(
TIFF
* 
tif
)

697  (
tif
->
tif_sizïroc
);

698 
	}
}

703 
TIFFM≠FûeProc


704 
	$TIFFGëM≠FûeProc
(
TIFF
* 
tif
)

706  (
tif
->
tif_m≠¥oc
);

707 
	}
}

712 
TIFFUnm≠FûeProc


713 
	$TIFFGëUnm≠FûeProc
(
TIFF
* 
tif
)

715  (
tif
->
tif_unm≠¥oc
);

716 
	}
}

	@libtiff/tif_packbits.c

27 
	~"tiffi›.h
"

28 #ifde‡
PACKBITS_SUPPORT


34 
	~<°dio.h
>

37 
	$PackBôsPªEncode
(
TIFF
* 
tif
, 
uöt16
 
s
)

39 (Ë
s
;

41 i‡(!(
tif
->
tif_d©a
 = (
uöt8
*)
	`_TIFFmÆloc
((
tmsize_t
))))

46 i‡(
	`isTûed
(
tif
))

47 *(
tmsize_t
*)
tif
->
tif_d©a
 = 
	`TIFFTûeRowSize
(tif);

49 *(
tmsize_t
*)
tif
->
tif_d©a
 = 
	`TIFFSˇ∆öeSize
(tif);

51 
	}
}

54 
	$PackBôsPo°Encode
(
TIFF
* 
tif
)

56 i‡(
tif
->
tif_d©a
)

57 
	`_TIFF‰ì
(
tif
->
tif_d©a
);

59 
	}
}

65 
	$PackBôsEncode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

67 * 
bp
 = (*Ë
buf
;

68 
uöt8
* 
›
;

69 
uöt8
* 
ï
;

70 
uöt8
* 
œ°lôîÆ
;

71 
n
, 
¶›
;

72 
b
;

73 íum { 
BASE
, 
LITERAL
, 
RUN
, 
LITERAL_RUN
 } 
°©e
;

75 (Ë
s
;

76 
›
 = 
tif
->
tif_øw˝
;

77 
ï
 = 
tif
->
tif_øwd©a
 +Åif->
tif_øwd©asize
;

78 
°©e
 = 
BASE
;

79 
œ°lôîÆ
 = 0;

80 
cc
 > 0) {

84 
b
 = *
bp
++, 
cc
--, 
n
 = 1;

85 ; 
cc
 > 0 && 
b
 =*
bp
; cc--, bp++)

86 
n
++;

87 
agaö
:

88 i‡(
›
 + 2 >
ï
) {

95 i‡(
°©e
 =
LITERAL
 || sèã =
LITERAL_RUN
) {

96 
¶›
 = ()(
›
 - 
œ°lôîÆ
);

97 
tif
->
tif_øwcc
 +(
tmsize_t
)(
œ°lôîÆ
 -Åif->
tif_øw˝
);

98 i‡(!
	`TIFFFlushD©a1
(
tif
))

100 
›
 = 
tif
->
tif_øw˝
;

101 
¶›
-- > 0)

102 *
›
++ = *
œ°lôîÆ
++;

103 
œ°lôîÆ
 = 
tif
->
tif_øw˝
;

105 
tif
->
tif_øwcc
 +(
tmsize_t
)(
›
 -Åif->
tif_øw˝
);

106 i‡(!
	`TIFFFlushD©a1
(
tif
))

108 
›
 = 
tif
->
tif_øw˝
;

111 
°©e
) {

112 
BASE
:

113 i‡(
n
 > 1) {

114 
°©e
 = 
RUN
;

115 i‡(
n
 > 128) {

116 *
›
++ = (
uöt8
) -127;

117 *
›
++ = (
uöt8
Ë
b
;

118 
n
 -= 128;

119 
agaö
;

121 *
›
++ = (
uöt8
)(-(
n
-1));

122 *
›
++ = (
uöt8
Ë
b
;

124 
œ°lôîÆ
 = 
›
;

125 *
›
++ = 0;

126 *
›
++ = (
uöt8
Ë
b
;

127 
°©e
 = 
LITERAL
;

130 
LITERAL
:

131 i‡(
n
 > 1) {

132 
°©e
 = 
LITERAL_RUN
;

133 i‡(
n
 > 128) {

134 *
›
++ = (
uöt8
) -127;

135 *
›
++ = (
uöt8
Ë
b
;

136 
n
 -= 128;

137 
agaö
;

139 *
›
++ = (
uöt8
)(-(
n
-1));

140 *
›
++ = (
uöt8
Ë
b
;

142 i‡(++(*
œ°lôîÆ
) == 127)

143 
°©e
 = 
BASE
;

144 *
›
++ = (
uöt8
Ë
b
;

147 
RUN
:

148 i‡(
n
 > 1) {

149 i‡(
n
 > 128) {

150 *
›
++ = (
uöt8
) -127;

151 *
›
++ = (
uöt8
Ë
b
;

152 
n
 -= 128;

153 
agaö
;

155 *
›
++ = (
uöt8
)(-(
n
-1));

156 *
›
++ = (
uöt8
Ë
b
;

158 
œ°lôîÆ
 = 
›
;

159 *
›
++ = 0;

160 *
›
++ = (
uöt8
Ë
b
;

161 
°©e
 = 
LITERAL
;

164 
LITERAL_RUN
:

171 i‡(
n
 =1 && 
›
[-2] =(
uöt8
) -1 &&

172 *
œ°lôîÆ
 < 126) {

173 
°©e
 = (((*
œ°lôîÆ
) += 2) == 127 ?

174 
BASE
 : 
LITERAL
);

175 
›
[-2] = op[-1];

177 
°©e
 = 
RUN
;

178 
agaö
;

181 
tif
->
tif_øwcc
 +(
tmsize_t
)(
›
 -Åif->
tif_øw˝
);

182 
tif
->
tif_øw˝
 = 
›
;

184 
	}
}

194 
	$PackBôsEncodeChunk
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

196 
tmsize_t
 
rowsize
 = *—msize_t*)
tif
->
tif_d©a
;

198 
cc
 > 0) {

199 
tmsize_t
 
chunk
 = 
rowsize
;

201 if–
cc
 < 
chunk
 )

202 
chunk
 = 
cc
;

204 i‡(
	`PackBôsEncode
(
tif
, 
bp
, 
chunk
, 
s
) < 0)

206 
bp
 +
chunk
;

207 
cc
 -
chunk
;

210 
	}
}

213 
	$PackBôsDecode
(
TIFF
* 
tif
, 
uöt8
* 
›
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

215 c⁄° 
moduÀ
[] = "PackBitsDecode";

216 *
bp
;

217 
tmsize_t
 
cc
;

218 
n
;

219 
b
;

221 (Ë
s
;

222 
bp
 = (*Ë
tif
->
tif_øw˝
;

223 
cc
 = 
tif
->
tif_øwcc
;

224 
cc
 > 0 && 
occ
 > 0) {

225 
n
 = (Ë*
bp
++, 
cc
--;

230 i‡(
n
 >= 128)

231 
n
 -= 256;

232 i‡(
n
 < 0) {

233 i‡(
n
 == -128)

235 
n
 = -n + 1;

236 if–
occ
 < (
tmsize_t
)
n
 )

238 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

240 (Ë((
tmsize_t
)
n
 - 
occ
));

241 
n
 = ()
occ
;

243 
occ
 -
n
;

244 
b
 = *
bp
++, 
cc
--;

245 
n
-- > 0)

246 *
›
++ = (
uöt8
Ë
b
;

248 i‡(
occ
 < (
tmsize_t
)(
n
 + 1))

250 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

252 (Ë((
tmsize_t
)
n
 - 
occ
 + 1));

253 
n
 = ()
occ
 - 1;

255 
	`_TIFFmem˝y
(
›
, 
bp
, ++
n
);

256 
›
 +
n
; 
occ
 -=Ç;

257 
bp
 +
n
; 
cc
 -=Ç;

260 
tif
->
tif_øw˝
 = (
uöt8
*Ë
bp
;

261 
tif
->
tif_øwcc
 = 
cc
;

262 i‡(
occ
 > 0) {

263 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

265 (Ë
tif
->
tif_row
);

269 
	}
}

272 
	$TIFFInôPackBôs
(
TIFF
* 
tif
, 
scheme
)

274 (Ë
scheme
;

275 
tif
->
tif_decodîow
 = 
PackBôsDecode
;

276 
tif
->
tif_decode°rù
 = 
PackBôsDecode
;

277 
tif
->
tif_decodëûe
 = 
PackBôsDecode
;

278 
tif
->
tif_¥ìncode
 = 
PackBôsPªEncode
;

279 
tif
->
tif_po°ícode
 = 
PackBôsPo°Encode
;

280 
tif
->
tif_ícodîow
 = 
PackBôsEncode
;

281 
tif
->
tif_ícode°rù
 = 
PackBôsEncodeChunk
;

282 
tif
->
tif_ícodëûe
 = 
PackBôsEncodeChunk
;

284 
	}
}

	@libtiff/tif_pixarlog.c

27 
	~"tiffi›.h
"

28 #ifde‡
PIXARLOG_SUPPORT


92 
	~"tif_¥edi˘.h
"

93 
	~"zlib.h
"

95 
	~<°dio.h
>

96 
	~<°dlib.h
>

97 
	~<m©h.h
>

101 
	#TSIZE
 2048

	)

102 
	#TSIZEP1
 2049

	)

103 
	#ONE
 1250

	)

104 
	#RATIO
 1.004

	)

106 
	#CODE_MASK
 0x7f‡

	)

108 
	gF…size
;

109 
	gLogK1
, 
	gLogK2
;

111 
	#REPEAT
(
n
, 
›
Ë{ 
i
; iÚ; dÿ{ i--; op; } i>0); }

	)

114 
	$h‹iz⁄èlAccumuœãF
(
uöt16
 *
wp
, 
n
, 
°ride
, *
›
,

115 *
ToLöórF
)

117 
¸
, 
cg
, 
cb
, 
ˇ
, 
mask
;

118 
t0
, 
t1
, 
t2
, 
t3
;

120 i‡(
n
 >
°ride
) {

121 
mask
 = 
CODE_MASK
;

122 i‡(
°ride
 == 3) {

123 
t0
 = 
ToLöórF
[
¸
 = 
wp
[0]];

124 
t1
 = 
ToLöórF
[
cg
 = 
wp
[1]];

125 
t2
 = 
ToLöórF
[
cb
 = 
wp
[2]];

126 
›
[0] = 
t0
;

127 
›
[1] = 
t1
;

128 
›
[2] = 
t2
;

129 
n
 -= 3;

130 
n
 > 0) {

131 
wp
 += 3;

132 
›
 += 3;

133 
n
 -= 3;

134 
t0
 = 
ToLöórF
[(
¸
 +
wp
[0]Ë& 
mask
];

135 
t1
 = 
ToLöórF
[(
cg
 +
wp
[1]Ë& 
mask
];

136 
t2
 = 
ToLöórF
[(
cb
 +
wp
[2]Ë& 
mask
];

137 
›
[0] = 
t0
;

138 
›
[1] = 
t1
;

139 
›
[2] = 
t2
;

141 } i‡(
°ride
 == 4) {

142 
t0
 = 
ToLöórF
[
¸
 = 
wp
[0]];

143 
t1
 = 
ToLöórF
[
cg
 = 
wp
[1]];

144 
t2
 = 
ToLöórF
[
cb
 = 
wp
[2]];

145 
t3
 = 
ToLöórF
[
ˇ
 = 
wp
[3]];

146 
›
[0] = 
t0
;

147 
›
[1] = 
t1
;

148 
›
[2] = 
t2
;

149 
›
[3] = 
t3
;

150 
n
 -= 4;

151 
n
 > 0) {

152 
wp
 += 4;

153 
›
 += 4;

154 
n
 -= 4;

155 
t0
 = 
ToLöórF
[(
¸
 +
wp
[0]Ë& 
mask
];

156 
t1
 = 
ToLöórF
[(
cg
 +
wp
[1]Ë& 
mask
];

157 
t2
 = 
ToLöórF
[(
cb
 +
wp
[2]Ë& 
mask
];

158 
t3
 = 
ToLöórF
[(
ˇ
 +
wp
[3]Ë& 
mask
];

159 
›
[0] = 
t0
;

160 
›
[1] = 
t1
;

161 
›
[2] = 
t2
;

162 
›
[3] = 
t3
;

165 
	`REPEAT
(
°ride
, *
›
 = 
ToLöórF
[*
wp
&
mask
]; wp++; op++)

166 
n
 -
°ride
;

167 
n
 > 0) {

168 
	`REPEAT
(
°ride
,

169 
wp
[
°ride
] +*wp; *
›
 = 
ToLöórF
[*wp&
mask
]; wp++; op++)

170 
n
 -
°ride
;

174 
	}
}

177 
	$h‹iz⁄èlAccumuœã12
(
uöt16
 *
wp
, 
n
, 
°ride
, 
öt16
 *
›
,

178 *
ToLöórF
)

180 
¸
, 
cg
, 
cb
, 
ˇ
, 
mask
;

181 
t0
, 
t1
, 
t2
, 
t3
;

183 
	#SCALE12
 2048.0F

	)

184 
	#CLAMP12
(
t
Ë((—Ë< 3071Ë? (
uöt16
Ë—Ë: 3071)

	)

186 i‡(
n
 >
°ride
) {

187 
mask
 = 
CODE_MASK
;

188 i‡(
°ride
 == 3) {

189 
t0
 = 
ToLöórF
[
¸
 = 
wp
[0]] * 
SCALE12
;

190 
t1
 = 
ToLöórF
[
cg
 = 
wp
[1]] * 
SCALE12
;

191 
t2
 = 
ToLöórF
[
cb
 = 
wp
[2]] * 
SCALE12
;

192 
›
[0] = 
	`CLAMP12
(
t0
);

193 
›
[1] = 
	`CLAMP12
(
t1
);

194 
›
[2] = 
	`CLAMP12
(
t2
);

195 
n
 -= 3;

196 
n
 > 0) {

197 
wp
 += 3;

198 
›
 += 3;

199 
n
 -= 3;

200 
t0
 = 
ToLöórF
[(
¸
 +
wp
[0]Ë& 
mask
] * 
SCALE12
;

201 
t1
 = 
ToLöórF
[(
cg
 +
wp
[1]Ë& 
mask
] * 
SCALE12
;

202 
t2
 = 
ToLöórF
[(
cb
 +
wp
[2]Ë& 
mask
] * 
SCALE12
;

203 
›
[0] = 
	`CLAMP12
(
t0
);

204 
›
[1] = 
	`CLAMP12
(
t1
);

205 
›
[2] = 
	`CLAMP12
(
t2
);

207 } i‡(
°ride
 == 4) {

208 
t0
 = 
ToLöórF
[
¸
 = 
wp
[0]] * 
SCALE12
;

209 
t1
 = 
ToLöórF
[
cg
 = 
wp
[1]] * 
SCALE12
;

210 
t2
 = 
ToLöórF
[
cb
 = 
wp
[2]] * 
SCALE12
;

211 
t3
 = 
ToLöórF
[
ˇ
 = 
wp
[3]] * 
SCALE12
;

212 
›
[0] = 
	`CLAMP12
(
t0
);

213 
›
[1] = 
	`CLAMP12
(
t1
);

214 
›
[2] = 
	`CLAMP12
(
t2
);

215 
›
[3] = 
	`CLAMP12
(
t3
);

216 
n
 -= 4;

217 
n
 > 0) {

218 
wp
 += 4;

219 
›
 += 4;

220 
n
 -= 4;

221 
t0
 = 
ToLöórF
[(
¸
 +
wp
[0]Ë& 
mask
] * 
SCALE12
;

222 
t1
 = 
ToLöórF
[(
cg
 +
wp
[1]Ë& 
mask
] * 
SCALE12
;

223 
t2
 = 
ToLöórF
[(
cb
 +
wp
[2]Ë& 
mask
] * 
SCALE12
;

224 
t3
 = 
ToLöórF
[(
ˇ
 +
wp
[3]Ë& 
mask
] * 
SCALE12
;

225 
›
[0] = 
	`CLAMP12
(
t0
);

226 
›
[1] = 
	`CLAMP12
(
t1
);

227 
›
[2] = 
	`CLAMP12
(
t2
);

228 
›
[3] = 
	`CLAMP12
(
t3
);

231 
	`REPEAT
(
°ride
, 
t0
 = 
ToLöórF
[*
wp
&
mask
] * 
SCALE12
;

232 *
›
 = 
	`CLAMP12
(
t0
); 
wp
++; op++)

233 
n
 -
°ride
;

234 
n
 > 0) {

235 
	`REPEAT
(
°ride
,

236 
wp
[
°ride
] +*wp; 
t0
 = 
ToLöórF
[wp[°ride]&
mask
]*
SCALE12
;

237 *
›
 = 
	`CLAMP12
(
t0
); 
wp
++; op++)

238 
n
 -
°ride
;

242 
	}
}

245 
	$h‹iz⁄èlAccumuœã16
(
uöt16
 *
wp
, 
n
, 
°ride
, uöt16 *
›
,

246 
uöt16
 *
ToLöór16
)

248 
¸
, 
cg
, 
cb
, 
ˇ
, 
mask
;

250 i‡(
n
 >
°ride
) {

251 
mask
 = 
CODE_MASK
;

252 i‡(
°ride
 == 3) {

253 
›
[0] = 
ToLöór16
[
¸
 = 
wp
[0]];

254 
›
[1] = 
ToLöór16
[
cg
 = 
wp
[1]];

255 
›
[2] = 
ToLöór16
[
cb
 = 
wp
[2]];

256 
n
 -= 3;

257 
n
 > 0) {

258 
wp
 += 3;

259 
›
 += 3;

260 
n
 -= 3;

261 
›
[0] = 
ToLöór16
[(
¸
 +
wp
[0]Ë& 
mask
];

262 
›
[1] = 
ToLöór16
[(
cg
 +
wp
[1]Ë& 
mask
];

263 
›
[2] = 
ToLöór16
[(
cb
 +
wp
[2]Ë& 
mask
];

265 } i‡(
°ride
 == 4) {

266 
›
[0] = 
ToLöór16
[
¸
 = 
wp
[0]];

267 
›
[1] = 
ToLöór16
[
cg
 = 
wp
[1]];

268 
›
[2] = 
ToLöór16
[
cb
 = 
wp
[2]];

269 
›
[3] = 
ToLöór16
[
ˇ
 = 
wp
[3]];

270 
n
 -= 4;

271 
n
 > 0) {

272 
wp
 += 4;

273 
›
 += 4;

274 
n
 -= 4;

275 
›
[0] = 
ToLöór16
[(
¸
 +
wp
[0]Ë& 
mask
];

276 
›
[1] = 
ToLöór16
[(
cg
 +
wp
[1]Ë& 
mask
];

277 
›
[2] = 
ToLöór16
[(
cb
 +
wp
[2]Ë& 
mask
];

278 
›
[3] = 
ToLöór16
[(
ˇ
 +
wp
[3]Ë& 
mask
];

281 
	`REPEAT
(
°ride
, *
›
 = 
ToLöór16
[*
wp
&
mask
]; wp++; op++)

282 
n
 -
°ride
;

283 
n
 > 0) {

284 
	`REPEAT
(
°ride
,

285 
wp
[
°ride
] +*wp; *
›
 = 
ToLöór16
[*wp&
mask
]; wp++; op++)

286 
n
 -
°ride
;

290 
	}
}

297 
	$h‹iz⁄èlAccumuœã11
(
uöt16
 *
wp
, 
n
, 
°ride
, uöt16 *
›
)

299 
¸
, 
cg
, 
cb
, 
ˇ
, 
mask
;

301 i‡(
n
 >
°ride
) {

302 
mask
 = 
CODE_MASK
;

303 i‡(
°ride
 == 3) {

304 
›
[0] = 
¸
 = 
wp
[0]; op[1] = 
cg
 = wp[1]; op[2] = 
cb
 = wp[2];

305 
n
 -= 3;

306 
n
 > 0) {

307 
wp
 += 3;

308 
›
 += 3;

309 
n
 -= 3;

310 
›
[0] = (
¸
 +
wp
[0]Ë& 
mask
;

311 
›
[1] = (
cg
 +
wp
[1]Ë& 
mask
;

312 
›
[2] = (
cb
 +
wp
[2]Ë& 
mask
;

314 } i‡(
°ride
 == 4) {

315 
›
[0] = 
¸
 = 
wp
[0]; op[1] = 
cg
 = wp[1];

316 
›
[2] = 
cb
 = 
wp
[2]; op[3] = 
ˇ
 = wp[3];

317 
n
 -= 4;

318 
n
 > 0) {

319 
wp
 += 4;

320 
›
 += 4;

321 
n
 -= 4;

322 
›
[0] = (
¸
 +
wp
[0]Ë& 
mask
;

323 
›
[1] = (
cg
 +
wp
[1]Ë& 
mask
;

324 
›
[2] = (
cb
 +
wp
[2]Ë& 
mask
;

325 
›
[3] = (
ˇ
 +
wp
[3]Ë& 
mask
;

328 
	`REPEAT
(
°ride
, *
›
 = *
wp
&
mask
; wp++; op++)

329 
n
 -
°ride
;

330 
n
 > 0) {

331 
	`REPEAT
(
°ride
,

332 
wp
[
°ride
] +*wp; *
›
 = *wp&
mask
; wp++; op++)

333 
n
 -
°ride
;

337 
	}
}

340 
	$h‹iz⁄èlAccumuœã8
(
uöt16
 *
wp
, 
n
, 
°ride
, *
›
,

341 *
ToLöór8
)

343 
¸
, 
cg
, 
cb
, 
ˇ
, 
mask
;

345 i‡(
n
 >
°ride
) {

346 
mask
 = 
CODE_MASK
;

347 i‡(
°ride
 == 3) {

348 
›
[0] = 
ToLöór8
[
¸
 = 
wp
[0]];

349 
›
[1] = 
ToLöór8
[
cg
 = 
wp
[1]];

350 
›
[2] = 
ToLöór8
[
cb
 = 
wp
[2]];

351 
n
 -= 3;

352 
n
 > 0) {

353 
n
 -= 3;

354 
wp
 += 3;

355 
›
 += 3;

356 
›
[0] = 
ToLöór8
[(
¸
 +
wp
[0]Ë& 
mask
];

357 
›
[1] = 
ToLöór8
[(
cg
 +
wp
[1]Ë& 
mask
];

358 
›
[2] = 
ToLöór8
[(
cb
 +
wp
[2]Ë& 
mask
];

360 } i‡(
°ride
 == 4) {

361 
›
[0] = 
ToLöór8
[
¸
 = 
wp
[0]];

362 
›
[1] = 
ToLöór8
[
cg
 = 
wp
[1]];

363 
›
[2] = 
ToLöór8
[
cb
 = 
wp
[2]];

364 
›
[3] = 
ToLöór8
[
ˇ
 = 
wp
[3]];

365 
n
 -= 4;

366 
n
 > 0) {

367 
n
 -= 4;

368 
wp
 += 4;

369 
›
 += 4;

370 
›
[0] = 
ToLöór8
[(
¸
 +
wp
[0]Ë& 
mask
];

371 
›
[1] = 
ToLöór8
[(
cg
 +
wp
[1]Ë& 
mask
];

372 
›
[2] = 
ToLöór8
[(
cb
 +
wp
[2]Ë& 
mask
];

373 
›
[3] = 
ToLöór8
[(
ˇ
 +
wp
[3]Ë& 
mask
];

376 
	`REPEAT
(
°ride
, *
›
 = 
ToLöór8
[*
wp
&
mask
]; wp++; op++)

377 
n
 -
°ride
;

378 
n
 > 0) {

379 
	`REPEAT
(
°ride
,

380 
wp
[
°ride
] +*wp; *
›
 = 
ToLöór8
[*wp&
mask
]; wp++; op++)

381 
n
 -
°ride
;

385 
	}
}

389 
	$h‹iz⁄èlAccumuœã8abgr
(
uöt16
 *
wp
, 
n
, 
°ride
, *
›
,

390 *
ToLöór8
)

392 
¸
, 
cg
, 
cb
, 
ˇ
, 
mask
;

393 
t0
, 
t1
, 
t2
, 
t3
;

395 i‡(
n
 >
°ride
) {

396 
mask
 = 
CODE_MASK
;

397 i‡(
°ride
 == 3) {

398 
›
[0] = 0;

399 
t1
 = 
ToLöór8
[
cb
 = 
wp
[2]];

400 
t2
 = 
ToLöór8
[
cg
 = 
wp
[1]];

401 
t3
 = 
ToLöór8
[
¸
 = 
wp
[0]];

402 
›
[1] = 
t1
;

403 
›
[2] = 
t2
;

404 
›
[3] = 
t3
;

405 
n
 -= 3;

406 
n
 > 0) {

407 
n
 -= 3;

408 
wp
 += 3;

409 
›
 += 4;

410 
›
[0] = 0;

411 
t1
 = 
ToLöór8
[(
cb
 +
wp
[2]Ë& 
mask
];

412 
t2
 = 
ToLöór8
[(
cg
 +
wp
[1]Ë& 
mask
];

413 
t3
 = 
ToLöór8
[(
¸
 +
wp
[0]Ë& 
mask
];

414 
›
[1] = 
t1
;

415 
›
[2] = 
t2
;

416 
›
[3] = 
t3
;

418 } i‡(
°ride
 == 4) {

419 
t0
 = 
ToLöór8
[
ˇ
 = 
wp
[3]];

420 
t1
 = 
ToLöór8
[
cb
 = 
wp
[2]];

421 
t2
 = 
ToLöór8
[
cg
 = 
wp
[1]];

422 
t3
 = 
ToLöór8
[
¸
 = 
wp
[0]];

423 
›
[0] = 
t0
;

424 
›
[1] = 
t1
;

425 
›
[2] = 
t2
;

426 
›
[3] = 
t3
;

427 
n
 -= 4;

428 
n
 > 0) {

429 
n
 -= 4;

430 
wp
 += 4;

431 
›
 += 4;

432 
t0
 = 
ToLöór8
[(
ˇ
 +
wp
[3]Ë& 
mask
];

433 
t1
 = 
ToLöór8
[(
cb
 +
wp
[2]Ë& 
mask
];

434 
t2
 = 
ToLöór8
[(
cg
 +
wp
[1]Ë& 
mask
];

435 
t3
 = 
ToLöór8
[(
¸
 +
wp
[0]Ë& 
mask
];

436 
›
[0] = 
t0
;

437 
›
[1] = 
t1
;

438 
›
[2] = 
t2
;

439 
›
[3] = 
t3
;

442 
	`REPEAT
(
°ride
, *
›
 = 
ToLöór8
[*
wp
&
mask
]; wp++; op++)

443 
n
 -
°ride
;

444 
n
 > 0) {

445 
	`REPEAT
(
°ride
,

446 
wp
[
°ride
] +*wp; *
›
 = 
ToLöór8
[*wp&
mask
]; wp++; op++)

447 
n
 -
°ride
;

451 
	}
}

458 
TIFFPªdi˘‹Sèã
 
	m¥edi˘
;

459 
z_°ªam
 
	m°ªam
;

460 
uöt16
 *
	mtbuf
;

461 
uöt16
 
	m°ride
;

462 
	m°©e
;

463 
	mu£r_d©afmt
;

464 
	mquÆôy
;

465 
	#PLSTATE_INIT
 1

	)

467 
TIFFVSëMëhod
 
	mvgë∑ª¡
;

468 
TIFFVSëMëhod
 
	mv£ç¨ít
;

470 *
	mToLöórF
;

471 
uöt16
 *
	mToLöór16
;

472 *
	mToLöór8
;

473 
uöt16
 *
	mFromLT2
;

474 
uöt16
 *
	mFrom14
;

475 
uöt16
 *
	mFrom8
;

477 } 
	tPix¨LogSèã
;

480 
	$Pix¨LogMakeTabÀs
(
Pix¨LogSèã
 *
•
)

494 
∆ö
, 
…2size
;

495 
i
, 
j
;

496 
b
, 
c
, 
lö°ï
, 
v
;

497 *
ToLöórF
;

498 
uöt16
 *
ToLöór16
;

499 *
ToLöór8
;

500 
uöt16
 *
FromLT2
;

501 
uöt16
 *
From14
;

502 
uöt16
 *
From8
;

504 
c
 = 
	`log
(
RATIO
);

505 
∆ö
 = ()(1./
c
);

506 
c
 = 1./
∆ö
;

507 
b
 = 
	`exp
(-
c
*
ONE
);

508 
lö°ï
 = 
b
*
c
*
	`exp
(1.);

510 
LogK1
 = ()(1./
c
);

511 
LogK2
 = ()(1./
b
);

512 
…2size
 = ()(2./
lö°ï
) + 1;

513 
FromLT2
 = (
uöt16
 *)
	`_TIFFmÆloc
(
…2size
*(uint16));

514 
From14
 = (
uöt16
 *)
	`_TIFFmÆloc
(16384*(uint16));

515 
From8
 = (
uöt16
 *)
	`_TIFFmÆloc
(256*(uint16));

516 
ToLöórF
 = (*)
	`_TIFFmÆloc
(
TSIZEP1
 * ());

517 
ToLöór16
 = (
uöt16
 *)
	`_TIFFmÆloc
(
TSIZEP1
 * (uint16));

518 
ToLöór8
 = (*)
	`_TIFFmÆloc
(
TSIZEP1
 * ());

519 i‡(
FromLT2
 =
NULL
 || 
From14
 =NULL || 
From8
 == NULL ||

520 
ToLöórF
 =
NULL
 || 
ToLöór16
 =NULL || 
ToLöór8
 == NULL) {

521 i‡(
FromLT2
Ë
	`_TIFF‰ì
(FromLT2);

522 i‡(
From14
Ë
	`_TIFF‰ì
(From14);

523 i‡(
From8
Ë
	`_TIFF‰ì
(From8);

524 i‡(
ToLöórF
Ë
	`_TIFF‰ì
(ToLinearF);

525 i‡(
ToLöór16
Ë
	`_TIFF‰ì
(ToLinear16);

526 i‡(
ToLöór8
Ë
	`_TIFF‰ì
(ToLinear8);

527 
•
->
FromLT2
 = 
NULL
;

528 
•
->
From14
 = 
NULL
;

529 
•
->
From8
 = 
NULL
;

530 
•
->
ToLöórF
 = 
NULL
;

531 
•
->
ToLöór16
 = 
NULL
;

532 
•
->
ToLöór8
 = 
NULL
;

536 
j
 = 0;

538 
i
 = 0; i < 
∆ö
; i++) {

539 
v
 = 
i
 * 
lö°ï
;

540 
ToLöórF
[
j
++] = ()
v
;

543 
i
 = 
∆ö
; i < 
TSIZE
; i++)

544 
ToLöórF
[
j
++] = ()(
b
*
	`exp
(
c
*
i
));

546 
ToLöórF
[2048] = ToLinearF[2047];

548 
i
 = 0; i < 
TSIZEP1
; i++) {

549 
v
 = 
ToLöórF
[
i
]*65535.0 + 0.5;

550 
ToLöór16
[
i
] = (
v
 > 65535.0Ë? 65535 : (
uöt16
)v;

551 
v
 = 
ToLöórF
[
i
]*255.0 + 0.5;

552 
ToLöór8
[
i
] = (
v
 > 255.0) ? 255 : ()v;

555 
j
 = 0;

556 
i
 = 0; i < 
…2size
; i++) {

557 i‡((
i
*
lö°ï
)*(i*lö°ïË> 
ToLöórF
[
j
]*ToLinearF[j+1])

558 
j
++;

559 
FromLT2
[
i
] = 
j
;

567 
j
 = 0;

568 
i
 = 0; i < 16384; i++) {

569 (
i
/16383.)*(i/16383.Ë> 
ToLöórF
[
j
]*ToLinearF[j+1])

570 
j
++;

571 
From14
[
i
] = 
j
;

574 
j
 = 0;

575 
i
 = 0; i < 256; i++) {

576 (
i
/255.)*(i/255.Ë> 
ToLöórF
[
j
]*ToLinearF[j+1])

577 
j
++;

578 
From8
[
i
] = 
j
;

581 
F…size
 = ()(
…2size
/2);

583 
•
->
ToLöórF
 = ToLinearF;

584 
•
->
ToLöór16
 = ToLinear16;

585 
•
->
ToLöór8
 = ToLinear8;

586 
•
->
FromLT2
 = FromLT2;

587 
•
->
From14
 = From14;

588 
•
->
From8
 = From8;

591 
	}
}

593 
	#DecodîSèã
(
tif
Ë((
Pix¨LogSèã
*Ë—if)->
tif_d©a
)

	)

594 
	#EncodîSèã
(
tif
Ë((
Pix¨LogSèã
*Ë—if)->
tif_d©a
)

	)

596 
Pix¨LogEncode
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

597 
Pix¨LogDecode
(
TIFF
* 
tif
, 
uöt8
* 
›
, 
tmsize_t
 
occ
, 
uöt16
 
s
);

599 
	#PIXARLOGDATAFMT_UNKNOWN
 -1

	)

602 
	$Pix¨LogGuessD©aFmt
(
TIFFDúe˘‹y
 *
td
)

604 
guess
 = 
PIXARLOGDATAFMT_UNKNOWN
;

605 
f‹m©
 = 
td
->
td_ßm∂ef‹m©
;

610 
td
->
td_bô•îßm∂e
) {

612 i‡(
f‹m©
 =
SAMPLEFORMAT_IEEEFP
)

613 
guess
 = 
PIXARLOGDATAFMT_FLOAT
;

616 i‡(
f‹m©
 =
SAMPLEFORMAT_VOID
 || f‹m© =
SAMPLEFORMAT_UINT
)

617 
guess
 = 
PIXARLOGDATAFMT_16BIT
;

620 i‡(
f‹m©
 =
SAMPLEFORMAT_VOID
 || f‹m© =
SAMPLEFORMAT_INT
)

621 
guess
 = 
PIXARLOGDATAFMT_12BITPICIO
;

624 i‡(
f‹m©
 =
SAMPLEFORMAT_VOID
 || f‹m© =
SAMPLEFORMAT_UINT
)

625 
guess
 = 
PIXARLOGDATAFMT_11BITLOG
;

628 i‡(
f‹m©
 =
SAMPLEFORMAT_VOID
 || f‹m© =
SAMPLEFORMAT_UINT
)

629 
guess
 = 
PIXARLOGDATAFMT_8BIT
;

633  
guess
;

634 
	}
}

636 
tmsize_t


637 
	$mu…ùly_ms
(
tmsize_t
 
m1
,Åmsize_à
m2
)

639 
tmsize_t
 
byãs
 = 
m1
 * 
m2
;

641 i‡(
m1
 && 
byãs
 / m1 !
m2
)

642 
byãs
 = 0;

644  
byãs
;

645 
	}
}

648 
	$Pix¨LogFixupTags
(
TIFF
* 
tif
)

650 (Ë
tif
;

652 
	}
}

655 
	$Pix¨LogSëupDecode
(
TIFF
* 
tif
)

657 c⁄° 
moduÀ
[] = "PixarLogSetupDecode";

658 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

659 
Pix¨LogSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

660 
tmsize_t
 
tbuf_size
;

662 
	`as£π
(
•
 !
NULL
);

666 
tif
->
tif_po°decode
 = 
_TIFFNoPo°Decode
;

670 
•
->
°ride
 = (
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
 ?

671 
td
->
td_ßm∂e•îpixñ
 : 1);

672 
tbuf_size
 = 
	`mu…ùly_ms
(mu…ùly_ms(mu…ùly_ms(
•
->
°ride
, 
td
->
td_imagewidth
),

673 
td
->
td_row•î°rù
), (
uöt16
));

674 i‡(
tbuf_size
 == 0)

676 
•
->
tbuf
 = (
uöt16
 *Ë
	`_TIFFmÆloc
(
tbuf_size
);

677 i‡(
•
->
tbuf
 =
NULL
)

679 i‡(
•
->
u£r_d©afmt
 =
PIXARLOGDATAFMT_UNKNOWN
)

680 
•
->
u£r_d©afmt
 = 
	`Pix¨LogGuessD©aFmt
(
td
);

681 i‡(
•
->
u£r_d©afmt
 =
PIXARLOGDATAFMT_UNKNOWN
) {

682 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

684 
td
->
td_bô•îßm∂e
);

688 i‡(
	`öÊ©eInô
(&
•
->
°ªam
Ë!
Z_OK
) {

689 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "%s", 
•
->
°ªam
.
msg
);

692 
•
->
°©e
 |
PLSTATE_INIT
;

695 
	}
}

701 
	$Pix¨LogPªDecode
(
TIFF
* 
tif
, 
uöt16
 
s
)

703 c⁄° 
moduÀ
[] = "PixarLogPreDecode";

704 
Pix¨LogSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

706 (Ë
s
;

707 
	`as£π
(
•
 !
NULL
);

708 
•
->
°ªam
.
√xt_ö
 = 
tif
->
tif_øwd©a
;

709 
	`as£π
((
•
->
°ªam
.
avaû_ö
)==4);

713 
•
->
°ªam
.
avaû_ö
 = (
uI¡
Ë
tif
->
tif_øwcc
;

714 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_ö
 !
tif
->
tif_øwcc
)

716 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLib cannot deal with buffersÅhis size");

719  (
	`öÊ©eRe£t
(&
•
->
°ªam
Ë=
Z_OK
);

720 
	}
}

723 
	$Pix¨LogDecode
(
TIFF
* 
tif
, 
uöt8
* 
›
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

725 c⁄° 
moduÀ
[] = "PixarLogDecode";

726 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

727 
Pix¨LogSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

728 
tmsize_t
 
i
;

729 
tmsize_t
 
nßm∂es
;

730 
Œí
;

731 
uöt16
 *
up
;

733 
•
->
u£r_d©afmt
) {

734 
PIXARLOGDATAFMT_FLOAT
:

735 
nßm∂es
 = 
occ
 / ();

737 
PIXARLOGDATAFMT_16BIT
:

738 
PIXARLOGDATAFMT_12BITPICIO
:

739 
PIXARLOGDATAFMT_11BITLOG
:

740 
nßm∂es
 = 
occ
 / (
uöt16
);

742 
PIXARLOGDATAFMT_8BIT
:

743 
PIXARLOGDATAFMT_8BITABGR
:

744 
nßm∂es
 = 
occ
;

747 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

749 
td
->
td_bô•îßm∂e
);

753 
Œí
 = 
•
->
°ride
 * 
td
->
td_imagewidth
;

755 (Ë
s
;

756 
	`as£π
(
•
 !
NULL
);

757 
•
->
°ªam
.
√xt_out
 = (*Ë•->
tbuf
;

758 
	`as£π
((
•
->
°ªam
.
avaû_out
)==4);

762 
•
->
°ªam
.
avaû_out
 = (
uI¡
Ë(
nßm∂es
 * (
uöt16
));

763 i‡(
•
->
°ªam
.
avaû_out
 !
nßm∂es
 * (
uöt16
))

765 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLib cannot deal with buffersÅhis size");

769 
°©e
 = 
	`öÊ©e
(&
•
->
°ªam
, 
Z_PARTIAL_FLUSH
);

770 i‡(
°©e
 =
Z_STREAM_END
) {

773 i‡(
°©e
 =
Z_DATA_ERROR
) {

774 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

776 (Ë
tif
->
tif_row
, 
•
->
°ªam
.
msg
);

777 i‡(
	`öÊ©eSync
(&
•
->
°ªam
Ë!
Z_OK
)

781 i‡(
°©e
 !
Z_OK
) {

782 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLibÉrror: %s",

783 
•
->
°ªam
.
msg
);

786 } 
•
->
°ªam
.
avaû_out
 > 0);

789 i‡(
•
->
°ªam
.
avaû_out
 != 0) {

790 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

791 "NŸÉnough d©®© sˇ∆öê%lu (sh‹à" 
TIFF_UINT64_FORMAT
 " bytes)",

792 (Ë
tif
->
tif_row
, (
TIFF_UINT64_T
Ë
•
->
°ªam
.
avaû_out
);

796 
up
 = 
•
->
tbuf
;

798 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
)

799 
	`TIFFSwabAºayOfSh‹t
(
up
, 
nßm∂es
);

806 i‡(
nßm∂es
 % 
Œí
) {

807 
	`TIFFW¨nögExt
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

809 "%lu, d©®åunˇãd.", (Ë
Œí
, (Ë
nßm∂es
);

810 
nßm∂es
 -nßm∂e†% 
Œí
;

813 
i
 = 0; i < 
nßm∂es
; i +
Œí
, 
up
 +=Ülen) {

814 
•
->
u£r_d©afmt
) {

815 
PIXARLOGDATAFMT_FLOAT
:

816 
	`h‹iz⁄èlAccumuœãF
(
up
, 
Œí
, 
•
->
°ride
,

817 (*)
›
, 
•
->
ToLöórF
);

818 
›
 +
Œí
 * ();

820 
PIXARLOGDATAFMT_16BIT
:

821 
	`h‹iz⁄èlAccumuœã16
(
up
, 
Œí
, 
•
->
°ride
,

822 (
uöt16
 *)
›
, 
•
->
ToLöór16
);

823 
›
 +
Œí
 * (
uöt16
);

825 
PIXARLOGDATAFMT_12BITPICIO
:

826 
	`h‹iz⁄èlAccumuœã12
(
up
, 
Œí
, 
•
->
°ride
,

827 (
öt16
 *)
›
, 
•
->
ToLöórF
);

828 
›
 +
Œí
 * (
öt16
);

830 
PIXARLOGDATAFMT_11BITLOG
:

831 
	`h‹iz⁄èlAccumuœã11
(
up
, 
Œí
, 
•
->
°ride
,

832 (
uöt16
 *)
›
);

833 
›
 +
Œí
 * (
uöt16
);

835 
PIXARLOGDATAFMT_8BIT
:

836 
	`h‹iz⁄èlAccumuœã8
(
up
, 
Œí
, 
•
->
°ride
,

837 (*)
›
, 
•
->
ToLöór8
);

838 
›
 +
Œí
 * ();

840 
PIXARLOGDATAFMT_8BITABGR
:

841 
	`h‹iz⁄èlAccumuœã8abgr
(
up
, 
Œí
, 
•
->
°ride
,

842 (*)
›
, 
•
->
ToLöór8
);

843 
›
 +
Œí
 * ();

846 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

848 
td
->
td_bô•îßm∂e
);

854 
	}
}

857 
	$Pix¨LogSëupEncode
(
TIFF
* 
tif
)

859 c⁄° 
moduÀ
[] = "PixarLogSetupEncode";

860 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

861 
Pix¨LogSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

862 
tmsize_t
 
tbuf_size
;

864 
	`as£π
(
•
 !
NULL
);

868 
•
->
°ride
 = (
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
 ?

869 
td
->
td_ßm∂e•îpixñ
 : 1);

870 
tbuf_size
 = 
	`mu…ùly_ms
(mu…ùly_ms(mu…ùly_ms(
•
->
°ride
, 
td
->
td_imagewidth
),

871 
td
->
td_row•î°rù
), (
uöt16
));

872 i‡(
tbuf_size
 == 0)

874 
•
->
tbuf
 = (
uöt16
 *Ë
	`_TIFFmÆloc
(
tbuf_size
);

875 i‡(
•
->
tbuf
 =
NULL
)

877 i‡(
•
->
u£r_d©afmt
 =
PIXARLOGDATAFMT_UNKNOWN
)

878 
•
->
u£r_d©afmt
 = 
	`Pix¨LogGuessD©aFmt
(
td
);

879 i‡(
•
->
u£r_d©afmt
 =
PIXARLOGDATAFMT_UNKNOWN
) {

880 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Pix¨Log com¥essi⁄ c™'àh™dÀ %d bôÜöó∏ícodögs", 
td
->
td_bô•îßm∂e
);

884 i‡(
	`deÊ©eInô
(&
•
->
°ªam
, sp->
quÆôy
Ë!
Z_OK
) {

885 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "%s", 
•
->
°ªam
.
msg
);

888 
•
->
°©e
 |
PLSTATE_INIT
;

891 
	}
}

897 
	$Pix¨LogPªEncode
(
TIFF
* 
tif
, 
uöt16
 
s
)

899 c⁄° 
moduÀ
[] = "PixarLogPreEncode";

900 
Pix¨LogSèã
 *
•
 = 
	`EncodîSèã
(
tif
);

902 (Ë
s
;

903 
	`as£π
(
•
 !
NULL
);

904 
•
->
°ªam
.
√xt_out
 = 
tif
->
tif_øwd©a
;

905 
	`as£π
((
•
->
°ªam
.
avaû_out
)==4);

909 
•
->
°ªam
.
avaû_out
 = 
tif
->
tif_øwd©asize
;

910 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_out
 !
tif
->
tif_øwd©asize
)

912 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLib cannot deal with buffersÅhis size");

915  (
	`deÊ©eRe£t
(&
•
->
°ªam
Ë=
Z_OK
);

916 
	}
}

919 
	$h‹iz⁄èlDif„ªn˚F
(*
ù
, 
n
, 
°ride
, 
uöt16
 *
wp
, uöt16 *
FromLT2
)

921 
öt32
 
r1
, 
g1
, 
b1
, 
a1
, 
r2
, 
g2
, 
b2
, 
a2
, 
mask
;

922 
Êtsize
 = 
F…size
;

924 
	#CLAMP
(
v
) ( (v<()0.) ? 0 \

925 : (
v
<()2.Ë? 
FromLT2
[()(v*
Êtsize
)] \

926 : (
v
>()24.2) ? 2047 \

927 : 
LogK1
*
	`log
(
v
*
LogK2
Ë+ 0.5 )

	)

929 
mask
 = 
CODE_MASK
;

930 i‡(
n
 >
°ride
) {

931 i‡(
°ride
 == 3) {

932 
r2
 = 
wp
[0] = (
uöt16
Ë
	`CLAMP
(
ù
[0]);

933 
g2
 = 
wp
[1] = (
uöt16
Ë
	`CLAMP
(
ù
[1]);

934 
b2
 = 
wp
[2] = (
uöt16
Ë
	`CLAMP
(
ù
[2]);

935 
n
 -= 3;

936 
n
 > 0) {

937 
n
 -= 3;

938 
wp
 += 3;

939 
ù
 += 3;

940 
r1
 = (
öt32
Ë
	`CLAMP
(
ù
[0]); 
wp
[0] = (r1-
r2
Ë& 
mask
;Ñ2 =Ñ1;

941 
g1
 = (
öt32
Ë
	`CLAMP
(
ù
[1]); 
wp
[1] = (g1-
g2
Ë& 
mask
; g2 = g1;

942 
b1
 = (
öt32
Ë
	`CLAMP
(
ù
[2]); 
wp
[2] = (b1-
b2
Ë& 
mask
; b2 = b1;

944 } i‡(
°ride
 == 4) {

945 
r2
 = 
wp
[0] = (
uöt16
Ë
	`CLAMP
(
ù
[0]);

946 
g2
 = 
wp
[1] = (
uöt16
Ë
	`CLAMP
(
ù
[1]);

947 
b2
 = 
wp
[2] = (
uöt16
Ë
	`CLAMP
(
ù
[2]);

948 
a2
 = 
wp
[3] = (
uöt16
Ë
	`CLAMP
(
ù
[3]);

949 
n
 -= 4;

950 
n
 > 0) {

951 
n
 -= 4;

952 
wp
 += 4;

953 
ù
 += 4;

954 
r1
 = (
öt32
Ë
	`CLAMP
(
ù
[0]); 
wp
[0] = (r1-
r2
Ë& 
mask
;Ñ2 =Ñ1;

955 
g1
 = (
öt32
Ë
	`CLAMP
(
ù
[1]); 
wp
[1] = (g1-
g2
Ë& 
mask
; g2 = g1;

956 
b1
 = (
öt32
Ë
	`CLAMP
(
ù
[2]); 
wp
[2] = (b1-
b2
Ë& 
mask
; b2 = b1;

957 
a1
 = (
öt32
Ë
	`CLAMP
(
ù
[3]); 
wp
[3] = (a1-
a2
Ë& 
mask
;á2 =á1;

960 
ù
 +
n
 - 1;

961 
wp
 +
n
 - 1;

962 
n
 -
°ride
;

963 
n
 > 0) {

964 
	`REPEAT
(
°ride
, 
wp
[0] = (
uöt16
Ë
	`CLAMP
(
ù
[0]);

965 
wp
[
°ride
] -= wp[0];

966 
wp
[
°ride
] &
mask
;

967 
wp
--; 
ù
--)

968 
n
 -
°ride
;

970 
	`REPEAT
(
°ride
, 
wp
[0] = (
uöt16
Ë
	`CLAMP
(
ù
[0]); wp--; ip--)

973 
	}
}

976 
	$h‹iz⁄èlDif„ªn˚16
(*
ù
, 
n
, 
°ride
,

977 *
wp
, 
uöt16
 *
From14
)

979 
r1
, 
g1
, 
b1
, 
a1
, 
r2
, 
g2
, 
b2
, 
a2
, 
mask
;

982 #unde‡
CLAMP


983 
	#CLAMP
(
v
Ë
From14
[(vË>> 2]

	)

985 
mask
 = 
CODE_MASK
;

986 i‡(
n
 >
°ride
) {

987 i‡(
°ride
 == 3) {

988 
r2
 = 
wp
[0] = 
	`CLAMP
(
ù
[0]); 
g2
 = wp[1] = CLAMP(ip[1]);

989 
b2
 = 
wp
[2] = 
	`CLAMP
(
ù
[2]);

990 
n
 -= 3;

991 
n
 > 0) {

992 
n
 -= 3;

993 
wp
 += 3;

994 
ù
 += 3;

995 
r1
 = 
	`CLAMP
(
ù
[0]); 
wp
[0] = (r1-
r2
Ë& 
mask
;Ñ2 =Ñ1;

996 
g1
 = 
	`CLAMP
(
ù
[1]); 
wp
[1] = (g1-
g2
Ë& 
mask
; g2 = g1;

997 
b1
 = 
	`CLAMP
(
ù
[2]); 
wp
[2] = (b1-
b2
Ë& 
mask
; b2 = b1;

999 } i‡(
°ride
 == 4) {

1000 
r2
 = 
wp
[0] = 
	`CLAMP
(
ù
[0]); 
g2
 = wp[1] = CLAMP(ip[1]);

1001 
b2
 = 
wp
[2] = 
	`CLAMP
(
ù
[2]); 
a2
 = wp[3] = CLAMP(ip[3]);

1002 
n
 -= 4;

1003 
n
 > 0) {

1004 
n
 -= 4;

1005 
wp
 += 4;

1006 
ù
 += 4;

1007 
r1
 = 
	`CLAMP
(
ù
[0]); 
wp
[0] = (r1-
r2
Ë& 
mask
;Ñ2 =Ñ1;

1008 
g1
 = 
	`CLAMP
(
ù
[1]); 
wp
[1] = (g1-
g2
Ë& 
mask
; g2 = g1;

1009 
b1
 = 
	`CLAMP
(
ù
[2]); 
wp
[2] = (b1-
b2
Ë& 
mask
; b2 = b1;

1010 
a1
 = 
	`CLAMP
(
ù
[3]); 
wp
[3] = (a1-
a2
Ë& 
mask
;á2 =á1;

1013 
ù
 +
n
 - 1;

1014 
wp
 +
n
 - 1;

1015 
n
 -
°ride
;

1016 
n
 > 0) {

1017 
	`REPEAT
(
°ride
, 
wp
[0] = 
	`CLAMP
(
ù
[0]);

1018 
wp
[
°ride
] -= wp[0];

1019 
wp
[
°ride
] &
mask
;

1020 
wp
--; 
ù
--)

1021 
n
 -
°ride
;

1023 
	`REPEAT
(
°ride
, 
wp
[0] = 
	`CLAMP
(
ù
[0]); wp--; ip--)

1026 
	}
}

1030 
	$h‹iz⁄èlDif„ªn˚8
(*
ù
, 
n
, 
°ride
,

1031 *
wp
, 
uöt16
 *
From8
)

1033 
r1
, 
g1
, 
b1
, 
a1
, 
r2
, 
g2
, 
b2
, 
a2
, 
mask
;

1035 #unde‡
CLAMP


1036 
	#CLAMP
(
v
Ë(
From8
[(v)])

	)

1038 
mask
 = 
CODE_MASK
;

1039 i‡(
n
 >
°ride
) {

1040 i‡(
°ride
 == 3) {

1041 
r2
 = 
wp
[0] = 
	`CLAMP
(
ù
[0]); 
g2
 = wp[1] = CLAMP(ip[1]);

1042 
b2
 = 
wp
[2] = 
	`CLAMP
(
ù
[2]);

1043 
n
 -= 3;

1044 
n
 > 0) {

1045 
n
 -= 3;

1046 
r1
 = 
	`CLAMP
(
ù
[3]); 
wp
[3] = (r1-
r2
Ë& 
mask
;Ñ2 =Ñ1;

1047 
g1
 = 
	`CLAMP
(
ù
[4]); 
wp
[4] = (g1-
g2
Ë& 
mask
; g2 = g1;

1048 
b1
 = 
	`CLAMP
(
ù
[5]); 
wp
[5] = (b1-
b2
Ë& 
mask
; b2 = b1;

1049 
wp
 += 3;

1050 
ù
 += 3;

1052 } i‡(
°ride
 == 4) {

1053 
r2
 = 
wp
[0] = 
	`CLAMP
(
ù
[0]); 
g2
 = wp[1] = CLAMP(ip[1]);

1054 
b2
 = 
wp
[2] = 
	`CLAMP
(
ù
[2]); 
a2
 = wp[3] = CLAMP(ip[3]);

1055 
n
 -= 4;

1056 
n
 > 0) {

1057 
n
 -= 4;

1058 
r1
 = 
	`CLAMP
(
ù
[4]); 
wp
[4] = (r1-
r2
Ë& 
mask
;Ñ2 =Ñ1;

1059 
g1
 = 
	`CLAMP
(
ù
[5]); 
wp
[5] = (g1-
g2
Ë& 
mask
; g2 = g1;

1060 
b1
 = 
	`CLAMP
(
ù
[6]); 
wp
[6] = (b1-
b2
Ë& 
mask
; b2 = b1;

1061 
a1
 = 
	`CLAMP
(
ù
[7]); 
wp
[7] = (a1-
a2
Ë& 
mask
;á2 =á1;

1062 
wp
 += 4;

1063 
ù
 += 4;

1066 
wp
 +
n
 + 
°ride
 - 1;

1067 
ù
 +
n
 + 
°ride
 - 1;

1068 
n
 -
°ride
;

1069 
n
 > 0) {

1070 
	`REPEAT
(
°ride
, 
wp
[0] = 
	`CLAMP
(
ù
[0]);

1071 
wp
[
°ride
] -= wp[0];

1072 
wp
[
°ride
] &
mask
;

1073 
wp
--; 
ù
--)

1074 
n
 -
°ride
;

1076 
	`REPEAT
(
°ride
, 
wp
[0] = 
	`CLAMP
(
ù
[0]); wp--; ip--)

1079 
	}
}

1085 
	$Pix¨LogEncode
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

1087 c⁄° 
moduÀ
[] = "PixarLogEncode";

1088 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

1089 
Pix¨LogSèã
 *
•
 = 
	`EncodîSèã
(
tif
);

1090 
tmsize_t
 
i
;

1091 
tmsize_t
 
n
;

1092 
Œí
;

1093 * 
up
;

1095 (Ë
s
;

1097 
•
->
u£r_d©afmt
) {

1098 
PIXARLOGDATAFMT_FLOAT
:

1099 
n
 = 
cc
 / ();

1101 
PIXARLOGDATAFMT_16BIT
:

1102 
PIXARLOGDATAFMT_12BITPICIO
:

1103 
PIXARLOGDATAFMT_11BITLOG
:

1104 
n
 = 
cc
 / (
uöt16
);

1106 
PIXARLOGDATAFMT_8BIT
:

1107 
PIXARLOGDATAFMT_8BITABGR
:

1108 
n
 = 
cc
;

1111 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1113 
td
->
td_bô•îßm∂e
);

1117 
Œí
 = 
•
->
°ride
 * 
td
->
td_imagewidth
;

1119 
i
 = 0, 
up
 = 
•
->
tbuf
; i < 
n
; i +
Œí
, up +=Ülen) {

1120 
•
->
u£r_d©afmt
) {

1121 
PIXARLOGDATAFMT_FLOAT
:

1122 
	`h‹iz⁄èlDif„ªn˚F
((*)
bp
, 
Œí
,

1123 
•
->
°ride
, 
up
, sp->
FromLT2
);

1124 
bp
 +
Œí
 * ();

1126 
PIXARLOGDATAFMT_16BIT
:

1127 
	`h‹iz⁄èlDif„ªn˚16
((
uöt16
 *)
bp
, 
Œí
,

1128 
•
->
°ride
, 
up
, sp->
From14
);

1129 
bp
 +
Œí
 * (
uöt16
);

1131 
PIXARLOGDATAFMT_8BIT
:

1132 
	`h‹iz⁄èlDif„ªn˚8
((*)
bp
, 
Œí
,

1133 
•
->
°ride
, 
up
, sp->
From8
);

1134 
bp
 +
Œí
 * ();

1137 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1139 
td
->
td_bô•îßm∂e
);

1144 
•
->
°ªam
.
√xt_ö
 = (*Ë•->
tbuf
;

1145 
	`as£π
((
•
->
°ªam
.
avaû_ö
)==4);

1149 
•
->
°ªam
.
avaû_ö
 = (
uI¡
Ë(
n
 * (
uöt16
));

1150 i‡((
•
->
°ªam
.
avaû_ö
 / (
uöt16
)Ë!(
uI¡
Ë
n
)

1152 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1158 i‡(
	`deÊ©e
(&
•
->
°ªam
, 
Z_NO_FLUSH
Ë!
Z_OK
) {

1159 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "EncoderÉrror: %s",

1160 
•
->
°ªam
.
msg
);

1163 i‡(
•
->
°ªam
.
avaû_out
 == 0) {

1164 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
;

1165 
	`TIFFFlushD©a1
(
tif
);

1166 
•
->
°ªam
.
√xt_out
 = 
tif
->
tif_øwd©a
;

1167 
•
->
°ªam
.
avaû_out
 = (
uI¡
Ë
tif
->
tif_øwd©asize
;

1169 } 
•
->
°ªam
.
avaû_ö
 > 0);

1171 
	}
}

1179 
	$Pix¨LogPo°Encode
(
TIFF
* 
tif
)

1181 c⁄° 
moduÀ
[] = "PixarLogPostEncode";

1182 
Pix¨LogSèã
 *
•
 = 
	`EncodîSèã
(
tif
);

1183 
°©e
;

1185 
•
->
°ªam
.
avaû_ö
 = 0;

1188 
°©e
 = 
	`deÊ©e
(&
•
->
°ªam
, 
Z_FINISH
);

1189 
°©e
) {

1190 
Z_STREAM_END
:

1191 
Z_OK
:

1192 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_out
 !
tif
->
tif_øwd©asize
) {

1193 
tif
->
tif_øwcc
 =

1194 
tif
->
tif_øwd©asize
 - 
•
->
°ªam
.
avaû_out
;

1195 
	`TIFFFlushD©a1
(
tif
);

1196 
•
->
°ªam
.
√xt_out
 = 
tif
->
tif_øwd©a
;

1197 
•
->
°ªam
.
avaû_out
 = (
uI¡
Ë
tif
->
tif_øwd©asize
;

1201 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLibÉrror: %s",

1202 
•
->
°ªam
.
msg
);

1205 } 
°©e
 !
Z_STREAM_END
);

1207 
	}
}

1210 
	$Pix¨LogClo£
(
TIFF
* 
tif
)

1212 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

1222 
td
->
td_bô•îßm∂e
 = 8;

1223 
td
->
td_ßm∂ef‹m©
 = 
SAMPLEFORMAT_UINT
;

1224 
	}
}

1227 
	$Pix¨LogCÀ™up
(
TIFF
* 
tif
)

1229 
Pix¨LogSèã
* 
•
 = (Pix¨LogSèã*Ë
tif
->
tif_d©a
;

1231 
	`as£π
(
•
 != 0);

1233 ()
	`TIFFPªdi˘‹CÀ™up
(
tif
);

1235 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
•
->
vgë∑ª¡
;

1236 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
•
->
v£ç¨ít
;

1238 i‡(
•
->
FromLT2
Ë
	`_TIFF‰ì
(sp->FromLT2);

1239 i‡(
•
->
From14
Ë
	`_TIFF‰ì
(sp->From14);

1240 i‡(
•
->
From8
Ë
	`_TIFF‰ì
(sp->From8);

1241 i‡(
•
->
ToLöórF
Ë
	`_TIFF‰ì
(sp->ToLinearF);

1242 i‡(
•
->
ToLöór16
Ë
	`_TIFF‰ì
(sp->ToLinear16);

1243 i‡(
•
->
ToLöór8
Ë
	`_TIFF‰ì
(sp->ToLinear8);

1244 i‡(
•
->
°©e
&
PLSTATE_INIT
) {

1245 i‡(
tif
->
tif_mode
 =
O_RDONLY
)

1246 
	`öÊ©eEnd
(&
•
->
°ªam
);

1248 
	`deÊ©eEnd
(&
•
->
°ªam
);

1250 i‡(
•
->
tbuf
)

1251 
	`_TIFF‰ì
(
•
->
tbuf
);

1252 
	`_TIFF‰ì
(
•
);

1253 
tif
->
tif_d©a
 = 
NULL
;

1255 
	`_TIFFSëDeÁu…Com¥essi⁄Sèã
(
tif
);

1256 
	}
}

1259 
	$Pix¨LogVSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

1261 c⁄° 
moduÀ
[] = "PixarLogVSetField";

1262 
Pix¨LogSèã
 *
•
 = (Pix¨LogSèã *)
tif
->
tif_d©a
;

1263 
ªsu…
;

1265 
èg
) {

1266 
TIFFTAG_PIXARLOGQUALITY
:

1267 
•
->
quÆôy
 = (Ë
	`va_¨g
(
≠
, );

1268 i‡(
tif
->
tif_mode
 !
O_RDONLY
 && (
•
->
°©e
&
PLSTATE_INIT
)) {

1269 i‡(
	`deÊ©eP¨ams
(&
•
->
°ªam
,

1270 
•
->
quÆôy
, 
Z_DEFAULT_STRATEGY
Ë!
Z_OK
) {

1271 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLibÉrror: %s",

1272 
•
->
°ªam
.
msg
);

1277 
TIFFTAG_PIXARLOGDATAFMT
:

1278 
•
->
u£r_d©afmt
 = (Ë
	`va_¨g
(
≠
, );

1284 
•
->
u£r_d©afmt
) {

1285 
PIXARLOGDATAFMT_8BIT
:

1286 
PIXARLOGDATAFMT_8BITABGR
:

1287 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 8);

1288 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLEFORMAT
, 
SAMPLEFORMAT_UINT
);

1290 
PIXARLOGDATAFMT_11BITLOG
:

1291 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 16);

1292 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLEFORMAT
, 
SAMPLEFORMAT_UINT
);

1294 
PIXARLOGDATAFMT_12BITPICIO
:

1295 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 16);

1296 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLEFORMAT
, 
SAMPLEFORMAT_INT
);

1298 
PIXARLOGDATAFMT_16BIT
:

1299 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 16);

1300 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLEFORMAT
, 
SAMPLEFORMAT_UINT
);

1302 
PIXARLOGDATAFMT_FLOAT
:

1303 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 32);

1304 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLEFORMAT
, 
SAMPLEFORMAT_IEEEFP
);

1310 
tif
->
tif_tûesize
 = 
	`isTûed
—ifË? 
	`TIFFTûeSize
—ifË: (
tmsize_t
)(-1);

1311 
tif
->
tif_sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(tif);

1312 
ªsu…
 = 1;

1315 
ªsu…
 = (*
•
->
v£ç¨ít
)(
tif
, 
èg
, 
≠
);

1317  (
ªsu…
);

1318 
	}
}

1321 
	$Pix¨LogVGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

1323 
Pix¨LogSèã
 *
•
 = (Pix¨LogSèã *)
tif
->
tif_d©a
;

1325 
èg
) {

1326 
TIFFTAG_PIXARLOGQUALITY
:

1327 *
	`va_¨g
(
≠
, *Ë
•
->
quÆôy
;

1329 
TIFFTAG_PIXARLOGDATAFMT
:

1330 *
	`va_¨g
(
≠
, *Ë
•
->
u£r_d©afmt
;

1333  (*
•
->
vgë∑ª¡
)(
tif
, 
èg
, 
≠
);

1336 
	}
}

1338 c⁄° 
TIFFFõld
 
	gpix¨logFõlds
[] = {

1339 {
TIFFTAG_PIXARLOGDATAFMT
, 0, 0, 
TIFF_ANY
, 0, 
TIFF_SETGET_INT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PSEUDO
, 
FALSE
, FALSE, "", 
NULL
},

1340 {
TIFFTAG_PIXARLOGQUALITY
, 0, 0, 
TIFF_ANY
, 0, 
TIFF_SETGET_INT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PSEUDO
, 
FALSE
, FALSE, "", 
NULL
}

1344 
	$TIFFInôPix¨Log
(
TIFF
* 
tif
, 
scheme
)

1346 c⁄° 
moduÀ
[] = "TIFFInitPixarLog";

1348 
Pix¨LogSèã
* 
•
;

1350 
	`as£π
(
scheme
 =
COMPRESSION_PIXARLOG
);

1355 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
pix¨logFõlds
,

1356 
	`TIFFAºayCou¡
(
pix¨logFõlds
))) {

1357 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1365 
tif
->
tif_d©a
 = (
uöt8
*Ë
	`_TIFFmÆloc
( (
Pix¨LogSèã
));

1366 i‡(
tif
->
tif_d©a
 =
NULL
)

1367 
bad
;

1368 
•
 = (
Pix¨LogSèã
*Ë
tif
->
tif_d©a
;

1369 
	`_TIFFmem£t
(
•
, 0,  (*sp));

1370 
•
->
°ªam
.
d©a_ty≥
 = 
Z_BINARY
;

1371 
•
->
u£r_d©afmt
 = 
PIXARLOGDATAFMT_UNKNOWN
;

1376 
tif
->
tif_fixu±ags
 = 
Pix¨LogFixupTags
;

1377 
tif
->
tif_£tupdecode
 = 
Pix¨LogSëupDecode
;

1378 
tif
->
tif_¥edecode
 = 
Pix¨LogPªDecode
;

1379 
tif
->
tif_decodîow
 = 
Pix¨LogDecode
;

1380 
tif
->
tif_decode°rù
 = 
Pix¨LogDecode
;

1381 
tif
->
tif_decodëûe
 = 
Pix¨LogDecode
;

1382 
tif
->
tif_£tu≥ncode
 = 
Pix¨LogSëupEncode
;

1383 
tif
->
tif_¥ìncode
 = 
Pix¨LogPªEncode
;

1384 
tif
->
tif_po°ícode
 = 
Pix¨LogPo°Encode
;

1385 
tif
->
tif_ícodîow
 = 
Pix¨LogEncode
;

1386 
tif
->
tif_ícode°rù
 = 
Pix¨LogEncode
;

1387 
tif
->
tif_ícodëûe
 = 
Pix¨LogEncode
;

1388 
tif
->
tif_˛o£
 = 
Pix¨LogClo£
;

1389 
tif
->
tif_˛ónup
 = 
Pix¨LogCÀ™up
;

1392 
•
->
vgë∑ª¡
 = 
tif
->
tif_ègmëhods
.
vgëfõld
;

1393 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
Pix¨LogVGëFõld
;

1394 
•
->
v£ç¨ít
 = 
tif
->
tif_ègmëhods
.
v£tfõld
;

1395 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
Pix¨LogVSëFõld
;

1398 
•
->
quÆôy
 = 
Z_DEFAULT_COMPRESSION
;

1399 
•
->
°©e
 = 0;

1404 (Ë
	`TIFFPªdi˘‹Inô
(
tif
);

1409 
	`Pix¨LogMakeTabÀs
(
•
);

1412 
bad
:

1413 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

1416 
	}
}

	@libtiff/tif_predict.c

32 
	~"tiffi›.h
"

33 
	~"tif_¥edi˘.h
"

35 
	#Pªdi˘‹Sèã
(
tif
Ë((
TIFFPªdi˘‹Sèã
*Ë—if)->
tif_d©a
)

	)

37 
h‹Acc8
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
);

38 
h‹Acc16
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
);

39 
h‹Acc32
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
);

40 
swabH‹Acc16
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
);

41 
swabH‹Acc32
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
);

42 
h‹Diff8
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
);

43 
h‹Diff16
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
);

44 
h‹Diff32
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
);

45 
ÂAcc
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
);

46 
ÂDiff
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
);

47 
Pªdi˘‹DecodeRow
(
TIFF
* 
tif
, 
uöt8
* 
›0
, 
tmsize_t
 
occ0
, 
uöt16
 
s
);

48 
Pªdi˘‹DecodeTûe
(
TIFF
* 
tif
, 
uöt8
* 
›0
, 
tmsize_t
 
occ0
, 
uöt16
 
s
);

49 
Pªdi˘‹EncodeRow
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

50 
Pªdi˘‹EncodeTûe
(
TIFF
* 
tif
, 
uöt8
* 
bp0
, 
tmsize_t
 
cc0
, 
uöt16
 
s
);

53 
	$Pªdi˘‹Sëup
(
TIFF
* 
tif
)

55 c⁄° 
moduÀ
[] = "PredictorSetup";

57 
TIFFPªdi˘‹Sèã
* 
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

58 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

60 
•
->
¥edi˘‹
)

62 
PREDICTOR_NONE
:

64 
PREDICTOR_HORIZONTAL
:

65 i‡(
td
->
td_bô•îßm∂e
 != 8

66 && 
td
->
td_bô•îßm∂e
 != 16

67 && 
td
->
td_bô•îßm∂e
 != 32) {

68 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

70 
td
->
td_bô•îßm∂e
);

74 
PREDICTOR_FLOATINGPOINT
:

75 i‡(
td
->
td_ßm∂ef‹m©
 !
SAMPLEFORMAT_IEEEFP
) {

76 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

78 
td
->
td_ßm∂ef‹m©
);

83 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

85 
•
->
¥edi˘‹
);

88 
•
->
°ride
 = (
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
 ?

89 
td
->
td_ßm∂e•îpixñ
 : 1);

93 i‡(
	`isTûed
(
tif
))

94 
•
->
rowsize
 = 
	`TIFFTûeRowSize
(
tif
);

96 
•
->
rowsize
 = 
	`TIFFSˇ∆öeSize
(
tif
);

97 i‡(
•
->
rowsize
 == 0)

101 
	}
}

104 
	$Pªdi˘‹SëupDecode
(
TIFF
* 
tif
)

106 
TIFFPªdi˘‹Sèã
* 
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

107 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

109 i‡(!(*
•
->
£tupdecode
)(
tif
Ë|| !
	`Pªdi˘‹Sëup
(tif))

112 i‡(
•
->
¥edi˘‹
 == 2) {

113 
td
->
td_bô•îßm∂e
) {

114 8: 
•
->
decodïfunc
 = 
h‹Acc8
; ;

115 16: 
•
->
decodïfunc
 = 
h‹Acc16
; ;

116 32: 
•
->
decodïfunc
 = 
h‹Acc32
; ;

122 if–
tif
->
tif_decodîow
 !
Pªdi˘‹DecodeRow
 )

124 
•
->
decodîow
 = 
tif
->
tif_decodîow
;

125 
tif
->
tif_decodîow
 = 
Pªdi˘‹DecodeRow
;

126 
•
->
decode°rù
 = 
tif
->
tif_decode°rù
;

127 
tif
->
tif_decode°rù
 = 
Pªdi˘‹DecodeTûe
;

128 
•
->
decodëûe
 = 
tif
->
tif_decodëûe
;

129 
tif
->
tif_decodëûe
 = 
Pªdi˘‹DecodeTûe
;

139 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
) {

140 i‡(
•
->
decodïfunc
 =
h‹Acc16
) {

141 
•
->
decodïfunc
 = 
swabH‹Acc16
;

142 
tif
->
tif_po°decode
 = 
_TIFFNoPo°Decode
;

143 } i‡(
•
->
decodïfunc
 =
h‹Acc32
) {

144 
•
->
decodïfunc
 = 
swabH‹Acc32
;

145 
tif
->
tif_po°decode
 = 
_TIFFNoPo°Decode
;

150 i‡(
•
->
¥edi˘‹
 == 3) {

151 
•
->
decodïfunc
 = 
ÂAcc
;

156 if–
tif
->
tif_decodîow
 !
Pªdi˘‹DecodeRow
 )

158 
•
->
decodîow
 = 
tif
->
tif_decodîow
;

159 
tif
->
tif_decodîow
 = 
Pªdi˘‹DecodeRow
;

160 
•
->
decode°rù
 = 
tif
->
tif_decode°rù
;

161 
tif
->
tif_decode°rù
 = 
Pªdi˘‹DecodeTûe
;

162 
•
->
decodëûe
 = 
tif
->
tif_decodëûe
;

163 
tif
->
tif_decodëûe
 = 
Pªdi˘‹DecodeTûe
;

170 i‡(
tif
->
tif_Êags
 & 
TIFF_SWAB
) {

171 
tif
->
tif_po°decode
 = 
_TIFFNoPo°Decode
;

180 
	}
}

183 
	$Pªdi˘‹SëupEncode
(
TIFF
* 
tif
)

185 
TIFFPªdi˘‹Sèã
* 
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

186 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

188 i‡(!(*
•
->
£tu≥ncode
)(
tif
Ë|| !
	`Pªdi˘‹Sëup
(tif))

191 i‡(
•
->
¥edi˘‹
 == 2) {

192 
td
->
td_bô•îßm∂e
) {

193 8: 
•
->
ícodïfunc
 = 
h‹Diff8
; ;

194 16: 
•
->
ícodïfunc
 = 
h‹Diff16
; ;

195 32: 
•
->
ícodïfunc
 = 
h‹Diff32
; ;

201 if–
tif
->
tif_ícodîow
 !
Pªdi˘‹EncodeRow
 )

203 
•
->
ícodîow
 = 
tif
->
tif_ícodîow
;

204 
tif
->
tif_ícodîow
 = 
Pªdi˘‹EncodeRow
;

205 
•
->
ícode°rù
 = 
tif
->
tif_ícode°rù
;

206 
tif
->
tif_ícode°rù
 = 
Pªdi˘‹EncodeTûe
;

207 
•
->
ícodëûe
 = 
tif
->
tif_ícodëûe
;

208 
tif
->
tif_ícodëûe
 = 
Pªdi˘‹EncodeTûe
;

212 i‡(
•
->
¥edi˘‹
 == 3) {

213 
•
->
ícodïfunc
 = 
ÂDiff
;

218 if–
tif
->
tif_ícodîow
 !
Pªdi˘‹EncodeRow
 )

220 
•
->
ícodîow
 = 
tif
->
tif_ícodîow
;

221 
tif
->
tif_ícodîow
 = 
Pªdi˘‹EncodeRow
;

222 
•
->
ícode°rù
 = 
tif
->
tif_ícode°rù
;

223 
tif
->
tif_ícode°rù
 = 
Pªdi˘‹EncodeTûe
;

224 
•
->
ícodëûe
 = 
tif
->
tif_ícodëûe
;

225 
tif
->
tif_ícodëûe
 = 
Pªdi˘‹EncodeTûe
;

230 
	}
}

232 
	#REPEAT4
(
n
, 
›
) \

233 
n
) { \

234 : { 
tmsize_t
 
i
; ò
n
-4; i > 0; i--Ë{ 
›
; } } \

235 4: 
›
; \

236 3: 
›
; \

237 2: 
›
; \

238 1: 
›
; \

240 }

	)

243 
	$h‹Acc8
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
)

245 
tmsize_t
 
°ride
 = 
	`Pªdi˘‹Sèã
(
tif
)->stride;

247 * 
˝
 = (*Ë
˝0
;

248 
	`as£π
((
cc
%
°ride
)==0);

249 i‡(
cc
 > 
°ride
) {

253 i‡(
°ride
 == 3) {

254 
¸
 = 
˝
[0];

255 
cg
 = 
˝
[1];

256 
cb
 = 
˝
[2];

257 
cc
 -= 3;

258 
˝
 += 3;

259 
cc
>0) {

260 
˝
[0] = (Ë(
¸
 += cp[0]);

261 
˝
[1] = (Ë(
cg
 += cp[1]);

262 
˝
[2] = (Ë(
cb
 += cp[2]);

263 
cc
 -= 3;

264 
˝
 += 3;

266 } i‡(
°ride
 == 4) {

267 
¸
 = 
˝
[0];

268 
cg
 = 
˝
[1];

269 
cb
 = 
˝
[2];

270 
ˇ
 = 
˝
[3];

271 
cc
 -= 4;

272 
˝
 += 4;

273 
cc
>0) {

274 
˝
[0] = (Ë(
¸
 += cp[0]);

275 
˝
[1] = (Ë(
cg
 += cp[1]);

276 
˝
[2] = (Ë(
cb
 += cp[2]);

277 
˝
[3] = (Ë(
ˇ
 += cp[3]);

278 
cc
 -= 4;

279 
˝
 += 4;

282 
cc
 -
°ride
;

284 
	`REPEAT4
(
°ride
, 
˝
[stride] =

285 (Ë(
˝
[
°ride
] + *cp); cp++)

286 
cc
 -
°ride
;

287 } 
cc
>0);

290 
	}
}

293 
	$swabH‹Acc16
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
)

295 
tmsize_t
 
°ride
 = 
	`Pªdi˘‹Sèã
(
tif
)->stride;

296 
uöt16
* 
wp
 = (uöt16*Ë
˝0
;

297 
tmsize_t
 
wc
 = 
cc
 / 2;

299 
	`as£π
((
cc
%(2*
°ride
))==0);

301 i‡(
wc
 > 
°ride
) {

302 
	`TIFFSwabAºayOfSh‹t
(
wp
, 
wc
);

303 
wc
 -
°ride
;

305 
	`REPEAT4
(
°ride
, 
wp
[stride] += wp[0]; wp++)

306 
wc
 -
°ride
;

307 } 
wc
 > 0);

309 
	}
}

312 
	$h‹Acc16
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
)

314 
tmsize_t
 
°ride
 = 
	`Pªdi˘‹Sèã
(
tif
)->stride;

315 
uöt16
* 
wp
 = (uöt16*Ë
˝0
;

316 
tmsize_t
 
wc
 = 
cc
 / 2;

318 
	`as£π
((
cc
%(2*
°ride
))==0);

320 i‡(
wc
 > 
°ride
) {

321 
wc
 -
°ride
;

323 
	`REPEAT4
(
°ride
, 
wp
[stride] += wp[0]; wp++)

324 
wc
 -
°ride
;

325 } 
wc
 > 0);

327 
	}
}

330 
	$swabH‹Acc32
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
)

332 
tmsize_t
 
°ride
 = 
	`Pªdi˘‹Sèã
(
tif
)->stride;

333 
uöt32
* 
wp
 = (uöt32*Ë
˝0
;

334 
tmsize_t
 
wc
 = 
cc
 / 4;

336 
	`as£π
((
cc
%(4*
°ride
))==0);

338 i‡(
wc
 > 
°ride
) {

339 
	`TIFFSwabAºayOfL⁄g
(
wp
, 
wc
);

340 
wc
 -
°ride
;

342 
	`REPEAT4
(
°ride
, 
wp
[stride] += wp[0]; wp++)

343 
wc
 -
°ride
;

344 } 
wc
 > 0);

346 
	}
}

349 
	$h‹Acc32
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
)

351 
tmsize_t
 
°ride
 = 
	`Pªdi˘‹Sèã
(
tif
)->stride;

352 
uöt32
* 
wp
 = (uöt32*Ë
˝0
;

353 
tmsize_t
 
wc
 = 
cc
 / 4;

355 
	`as£π
((
cc
%(4*
°ride
))==0);

357 i‡(
wc
 > 
°ride
) {

358 
wc
 -
°ride
;

360 
	`REPEAT4
(
°ride
, 
wp
[stride] += wp[0]; wp++)

361 
wc
 -
°ride
;

362 } 
wc
 > 0);

364 
	}
}

370 
	$ÂAcc
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
)

372 
tmsize_t
 
°ride
 = 
	`Pªdi˘‹Sèã
(
tif
)->stride;

373 
uöt32
 
bps
 = 
tif
->
tif_dú
.
td_bô•îßm∂e
 / 8;

374 
tmsize_t
 
wc
 = 
cc
 / 
bps
;

375 
tmsize_t
 
cou¡
 = 
cc
;

376 
uöt8
 *
˝
 = (uöt8 *Ë
˝0
;

377 
uöt8
 *
tmp
 = (uöt8 *)
	`_TIFFmÆloc
(
cc
);

379 
	`as£π
((
cc
%(
bps
*
°ride
))==0);

381 i‡(!
tmp
)

384 
cou¡
 > 
°ride
) {

385 
	`REPEAT4
(
°ride
, 
˝
[stride] += cp[0]; cp++)

386 
cou¡
 -
°ride
;

389 
	`_TIFFmem˝y
(
tmp
, 
˝0
, 
cc
);

390 
˝
 = (
uöt8
 *Ë
˝0
;

391 
cou¡
 = 0; cou¡ < 
wc
; count++) {

392 
uöt32
 
byã
;

393 
byã
 = 0; byã < 
bps
; byte++) {

394 #i‡
WORDS_BIGENDIAN


395 
˝
[
bps
 * 
cou¡
 + 
byã
] = 
tmp
[byã * 
wc
 + count];

397 
˝
[
bps
 * 
cou¡
 + 
byã
] =

398 
tmp
[(
bps
 - 
byã
 - 1Ë* 
wc
 + 
cou¡
];

402 
	`_TIFF‰ì
(
tmp
);

403 
	}
}

409 
	$Pªdi˘‹DecodeRow
(
TIFF
* 
tif
, 
uöt8
* 
›0
, 
tmsize_t
 
occ0
, 
uöt16
 
s
)

411 
TIFFPªdi˘‹Sèã
 *
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

413 
	`as£π
(
•
 !
NULL
);

414 
	`as£π
(
•
->
decodîow
 !
NULL
);

415 
	`as£π
(
•
->
decodïfunc
 !
NULL
);

417 i‡((*
•
->
decodîow
)(
tif
, 
›0
, 
occ0
, 
s
)) {

418 (*
•
->
decodïfunc
)(
tif
, 
›0
, 
occ0
);

422 
	}
}

432 
	$Pªdi˘‹DecodeTûe
(
TIFF
* 
tif
, 
uöt8
* 
›0
, 
tmsize_t
 
occ0
, 
uöt16
 
s
)

434 
TIFFPªdi˘‹Sèã
 *
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

436 
	`as£π
(
•
 !
NULL
);

437 
	`as£π
(
•
->
decodëûe
 !
NULL
);

439 i‡((*
•
->
decodëûe
)(
tif
, 
›0
, 
occ0
, 
s
)) {

440 
tmsize_t
 
rowsize
 = 
•
->rowsize;

441 
	`as£π
(
rowsize
 > 0);

442 
	`as£π
((
occ0
%
rowsize
)==0);

443 
	`as£π
(
•
->
decodïfunc
 !
NULL
);

444 
occ0
 > 0) {

445 (*
•
->
decodïfunc
)(
tif
, 
›0
, 
rowsize
);

446 
occ0
 -
rowsize
;

447 
›0
 +
rowsize
;

452 
	}
}

455 
	$h‹Diff8
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
)

457 
TIFFPªdi˘‹Sèã
* 
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

458 
tmsize_t
 
°ride
 = 
•
->stride;

459 * 
˝
 = (*Ë
˝0
;

461 
	`as£π
((
cc
%
°ride
)==0);

463 i‡(
cc
 > 
°ride
) {

464 
cc
 -
°ride
;

468 i‡(
°ride
 == 3) {

469 
r1
, 
g1
, 
b1
;

470 
r2
 = 
˝
[0];

471 
g2
 = 
˝
[1];

472 
b2
 = 
˝
[2];

474 
r1
 = 
˝
[3]; cp[3] =Ñ1-
r2
;Ñ2 =Ñ1;

475 
g1
 = 
˝
[4]; cp[4] = g1-
g2
; g2 = g1;

476 
b1
 = 
˝
[5]; cp[5] = b1-
b2
; b2 = b1;

477 
˝
 += 3;

478 } (
cc
 -= 3) > 0);

479 } i‡(
°ride
 == 4) {

480 
r1
, 
g1
, 
b1
, 
a1
;

481 
r2
 = 
˝
[0];

482 
g2
 = 
˝
[1];

483 
b2
 = 
˝
[2];

484 
a2
 = 
˝
[3];

486 
r1
 = 
˝
[4]; cp[4] =Ñ1-
r2
;Ñ2 =Ñ1;

487 
g1
 = 
˝
[5]; cp[5] = g1-
g2
; g2 = g1;

488 
b1
 = 
˝
[6]; cp[6] = b1-
b2
; b2 = b1;

489 
a1
 = 
˝
[7]; cp[7] =á1-
a2
;á2 =á1;

490 
˝
 += 4;

491 } (
cc
 -= 4) > 0);

493 
˝
 +
cc
 - 1;

495 
	`REPEAT4
(
°ride
, 
˝
[stride] -= cp[0]; cp--)

496 } (
cc
 -
°ride
) > 0);

499 
	}
}

502 
	$h‹Diff16
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
)

504 
TIFFPªdi˘‹Sèã
* 
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

505 
tmsize_t
 
°ride
 = 
•
->stride;

506 
öt16
 *
wp
 = (öt16*Ë
˝0
;

507 
tmsize_t
 
wc
 = 
cc
/2;

509 
	`as£π
((
cc
%(2*
°ride
))==0);

511 i‡(
wc
 > 
°ride
) {

512 
wc
 -
°ride
;

513 
wp
 +
wc
 - 1;

515 
	`REPEAT4
(
°ride
, 
wp
[stride] -= wp[0]; wp--)

516 
wc
 -
°ride
;

517 } 
wc
 > 0);

519 
	}
}

522 
	$h‹Diff32
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
)

524 
TIFFPªdi˘‹Sèã
* 
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

525 
tmsize_t
 
°ride
 = 
•
->stride;

526 
öt32
 *
wp
 = (öt32*Ë
˝0
;

527 
tmsize_t
 
wc
 = 
cc
/4;

529 
	`as£π
((
cc
%(4*
°ride
))==0);

531 i‡(
wc
 > 
°ride
) {

532 
wc
 -
°ride
;

533 
wp
 +
wc
 - 1;

535 
	`REPEAT4
(
°ride
, 
wp
[stride] -= wp[0]; wp--)

536 
wc
 -
°ride
;

537 } 
wc
 > 0);

539 
	}
}

545 
	$ÂDiff
(
TIFF
* 
tif
, 
uöt8
* 
˝0
, 
tmsize_t
 
cc
)

547 
tmsize_t
 
°ride
 = 
	`Pªdi˘‹Sèã
(
tif
)->stride;

548 
uöt32
 
bps
 = 
tif
->
tif_dú
.
td_bô•îßm∂e
 / 8;

549 
tmsize_t
 
wc
 = 
cc
 / 
bps
;

550 
tmsize_t
 
cou¡
;

551 
uöt8
 *
˝
 = (uöt8 *Ë
˝0
;

552 
uöt8
 *
tmp
 = (uöt8 *)
	`_TIFFmÆloc
(
cc
);

554 
	`as£π
((
cc
%(
bps
*
°ride
))==0);

556 i‡(!
tmp
)

559 
	`_TIFFmem˝y
(
tmp
, 
˝0
, 
cc
);

560 
cou¡
 = 0; cou¡ < 
wc
; count++) {

561 
uöt32
 
byã
;

562 
byã
 = 0; byã < 
bps
; byte++) {

563 #i‡
WORDS_BIGENDIAN


564 
˝
[
byã
 * 
wc
 + 
cou¡
] = 
tmp
[
bps
 * count + byte];

566 
˝
[(
bps
 - 
byã
 - 1Ë* 
wc
 + 
cou¡
] =

567 
tmp
[
bps
 * 
cou¡
 + 
byã
];

571 
	`_TIFF‰ì
(
tmp
);

573 
˝
 = (
uöt8
 *Ë
˝0
;

574 
˝
 +
cc
 - 
°ride
 - 1;

575 
cou¡
 = 
cc
; cou¡ > 
°ride
; count -= stride)

576 
	`REPEAT4
(
°ride
, 
˝
[stride] -= cp[0]; cp--)

577 
	}
}

580 
	$Pªdi˘‹EncodeRow
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

582 
TIFFPªdi˘‹Sèã
 *
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

584 
	`as£π
(
•
 !
NULL
);

585 
	`as£π
(
•
->
ícodïfunc
 !
NULL
);

586 
	`as£π
(
•
->
ícodîow
 !
NULL
);

589 (*
•
->
ícodïfunc
)(
tif
, 
bp
, 
cc
);

590  (*
•
->
ícodîow
)(
tif
, 
bp
, 
cc
, 
s
);

591 
	}
}

594 
	$Pªdi˘‹EncodeTûe
(
TIFF
* 
tif
, 
uöt8
* 
bp0
, 
tmsize_t
 
cc0
, 
uöt16
 
s
)

596 c⁄° 
moduÀ
[] = "PredictorEncodeTile";

597 
TIFFPªdi˘‹Sèã
 *
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

598 
uöt8
 *
w‹kög_c›y
;

599 
tmsize_t
 
cc
 = 
cc0
, 
rowsize
;

600 * 
bp
;

601 
ªsu…_code
;

603 
	`as£π
(
•
 !
NULL
);

604 
	`as£π
(
•
->
ícodïfunc
 !
NULL
);

605 
	`as£π
(
•
->
ícodëûe
 !
NULL
);

611 
w‹kög_c›y
 = (
uöt8
*Ë
	`_TIFFmÆloc
(
cc0
);

612 if–
w‹kög_c›y
 =
NULL
 )

614 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

615 "Ouào‡mem‹yáŒoˇtög " 
TIFF_SSIZE_FORMAT
 " byteÅemp buffer.",

616 
cc0
 );

619 
	`mem˝y
–
w‹kög_c›y
, 
bp0
, 
cc0
 );

620 
bp
 = 
w‹kög_c›y
;

622 
rowsize
 = 
•
->rowsize;

623 
	`as£π
(
rowsize
 > 0);

624 
	`as£π
((
cc0
%
rowsize
)==0);

625 
cc
 > 0) {

626 (*
•
->
ícodïfunc
)(
tif
, 
bp
, 
rowsize
);

627 
cc
 -
rowsize
;

628 
bp
 +
rowsize
;

630 
ªsu…_code
 = (*
•
->
ícodëûe
)(
tif
, 
w‹kög_c›y
, 
cc0
, 
s
);

632 
	`_TIFF‰ì
–
w‹kög_c›y
 );

634  
ªsu…_code
;

635 
	}
}

637 
	#FIELD_PREDICTOR
 (
FIELD_CODEC
+0Ë

	)

639 c⁄° 
TIFFFõld
 
	g¥edi˘Fõlds
[] = {

640 { 
TIFFTAG_PREDICTOR
, 1, 1, 
TIFF_SHORT
, 0, 
TIFF_SETGET_UINT16
, TIFF_SETGET_UINT16, 
FIELD_PREDICTOR
, 
FALSE
, FALSE, "Pªdi˘‹", 
NULL
 },

644 
	$Pªdi˘‹VSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

646 
TIFFPªdi˘‹Sèã
 *
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

648 
	`as£π
(
•
 !
NULL
);

649 
	`as£π
(
•
->
v£ç¨ít
 !
NULL
);

651 
èg
) {

652 
TIFFTAG_PREDICTOR
:

653 
•
->
¥edi˘‹
 = (
uöt16
Ë
	`va_¨g
(
≠
, 
uöt16_v≠
);

654 
	`TIFFSëFõldBô
(
tif
, 
FIELD_PREDICTOR
);

657  (*
•
->
v£ç¨ít
)(
tif
, 
èg
, 
≠
);

659 
tif
->
tif_Êags
 |
TIFF_DIRTYDIRECT
;

661 
	}
}

664 
	$Pªdi˘‹VGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

666 
TIFFPªdi˘‹Sèã
 *
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

668 
	`as£π
(
•
 !
NULL
);

669 
	`as£π
(
•
->
vgë∑ª¡
 !
NULL
);

671 
èg
) {

672 
TIFFTAG_PREDICTOR
:

673 *
	`va_¨g
(
≠
, 
uöt16
*Ë
•
->
¥edi˘‹
;

676  (*
•
->
vgë∑ª¡
)(
tif
, 
èg
, 
≠
);

679 
	}
}

682 
	$Pªdi˘‹PrötDú
(
TIFF
* 
tif
, 
FILE
* 
fd
, 
Êags
)

684 
TIFFPªdi˘‹Sèã
* 
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

686 (Ë
Êags
;

687 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_PREDICTOR
)) {

688 
	`Ârötf
(
fd
, " Predictor: ");

689 
•
->
¥edi˘‹
) {

690 1: 
	`Ârötf
(
fd
, "none "); ;

691 2: 
	`Ârötf
(
fd
, "horizontal differencing "); ;

692 3: 
	`Ârötf
(
fd
, "floatingÖointÖredictor "); ;

694 
	`Ârötf
(
fd
, "%u (0x%x)\n", 
•
->
¥edi˘‹
, sp->predictor);

696 i‡(
•
->
¥ötdú
)

697 (*
•
->
¥ötdú
)(
tif
, 
fd
, 
Êags
);

698 
	}
}

701 
	$TIFFPªdi˘‹Inô
(
TIFF
* 
tif
)

703 
TIFFPªdi˘‹Sèã
* 
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

705 
	`as£π
(
•
 != 0);

710 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
¥edi˘Fõlds
,

711 
	`TIFFAºayCou¡
(
¥edi˘Fõlds
))) {

712 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, "TIFFPredictorInit",

720 
•
->
vgë∑ª¡
 = 
tif
->
tif_ègmëhods
.
vgëfõld
;

721 
tif
->
tif_ègmëhods
.
vgëfõld
 =

722 
Pªdi˘‹VGëFõld
;

723 
•
->
v£ç¨ít
 = 
tif
->
tif_ègmëhods
.
v£tfõld
;

724 
tif
->
tif_ègmëhods
.
v£tfõld
 =

725 
Pªdi˘‹VSëFõld
;

726 
•
->
¥ötdú
 = 
tif
->
tif_ègmëhods
.printdir;

727 
tif
->
tif_ègmëhods
.
¥ötdú
 =

728 
Pªdi˘‹PrötDú
;

730 
•
->
£tupdecode
 = 
tif
->
tif_£tupdecode
;

731 
tif
->
tif_£tupdecode
 = 
Pªdi˘‹SëupDecode
;

732 
•
->
£tu≥ncode
 = 
tif
->
tif_£tu≥ncode
;

733 
tif
->
tif_£tu≥ncode
 = 
Pªdi˘‹SëupEncode
;

735 
•
->
¥edi˘‹
 = 1;

736 
•
->
ícodïfunc
 = 
NULL
;

737 
•
->
decodïfunc
 = 
NULL
;

739 
	}
}

742 
	$TIFFPªdi˘‹CÀ™up
(
TIFF
* 
tif
)

744 
TIFFPªdi˘‹Sèã
* 
•
 = 
	`Pªdi˘‹Sèã
(
tif
);

746 
	`as£π
(
•
 != 0);

748 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
•
->
vgë∑ª¡
;

749 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
•
->
v£ç¨ít
;

750 
tif
->
tif_ègmëhods
.
¥ötdú
 = 
•
->printdir;

751 
tif
->
tif_£tupdecode
 = 
•
->
£tupdecode
;

752 
tif
->
tif_£tu≥ncode
 = 
•
->
£tu≥ncode
;

755 
	}
}

	@libtiff/tif_predict.h

27 #i‚de‡
_TIFFPREDICT_


28 
	#_TIFFPREDICT_


	)

39 
	m¥edi˘‹
;

40 
tmsize_t
 
	m°ride
;

41 
tmsize_t
 
	mrowsize
;

43 
TIFFCodeMëhod
 
	mícodîow
;

44 
TIFFCodeMëhod
 
	mícode°rù
;

45 
TIFFCodeMëhod
 
	mícodëûe
;

46 
TIFFPo°Mëhod
 
	mícodïfunc
;

48 
TIFFCodeMëhod
 
	mdecodîow
;

49 
TIFFCodeMëhod
 
	mdecode°rù
;

50 
TIFFCodeMëhod
 
	mdecodëûe
;

51 
TIFFPo°Mëhod
 
	mdecodïfunc
;

53 
TIFFVGëMëhod
 
	mvgë∑ª¡
;

54 
TIFFVSëMëhod
 
	mv£ç¨ít
;

55 
TIFFPrötMëhod
 
	m¥ötdú
;

56 
TIFFBoﬁMëhod
 
	m£tupdecode
;

57 
TIFFBoﬁMëhod
 
	m£tu≥ncode
;

58 } 
	tTIFFPªdi˘‹Sèã
;

60 #i‡
deföed
(
__˝lu•lus
)

63 
TIFFPªdi˘‹Inô
(
TIFF
*);

64 
TIFFPªdi˘‹CÀ™up
(
TIFF
*);

65 #i‡
deföed
(
__˝lu•lus
)

	@libtiff/tif_print.c

32 
	~"tiffi›.h
"

33 
	~<°dio.h
>

35 
	~<˘y≥.h
>

37 c⁄° *
	gphŸoNames
[] = {

48 
	#NPHOTONAMES
 ( (
phŸoNames
Ë/  (phŸoNames[0]))

	)

50 c⁄° *
	g‹õ¡Names
[] = {

61 
	#NORIENTNAMES
 ( (
‹õ¡Names
Ë/  (‹õ¡Names[0]))

	)

64 
	$_TIFFPrötFõld
(
FILE
* 
fd
, c⁄° 
TIFFFõld
 *
fù
,

65 
uöt32
 
vÆue_cou¡
, *
øw_d©a
)

67 
uöt32
 
j
;

69 
	`Ârötf
(
fd
, " %s: ", 
fù
->
fõld_«me
);

71 
j
 = 0; j < 
vÆue_cou¡
; j++) {

72 if(
fù
->
fõld_ty≥
 =
TIFF_BYTE
)

73 
	`Ârötf
(
fd
, "%u", ((
uöt8
 *Ë
øw_d©a
)[
j
]);

74 if(
fù
->
fõld_ty≥
 =
TIFF_UNDEFINED
)

75 
	`Ârötf
(
fd
, "0x%x",

76 (Ë((*Ë
øw_d©a
)[
j
]);

77 if(
fù
->
fõld_ty≥
 =
TIFF_SBYTE
)

78 
	`Ârötf
(
fd
, "%d", ((
öt8
 *Ë
øw_d©a
)[
j
]);

79 if(
fù
->
fõld_ty≥
 =
TIFF_SHORT
)

80 
	`Ârötf
(
fd
, "%u", ((
uöt16
 *Ë
øw_d©a
)[
j
]);

81 if(
fù
->
fõld_ty≥
 =
TIFF_SSHORT
)

82 
	`Ârötf
(
fd
, "%d", ((
öt16
 *Ë
øw_d©a
)[
j
]);

83 if(
fù
->
fõld_ty≥
 =
TIFF_LONG
)

84 
	`Ârötf
(
fd
, "%lu",

85 ()((
uöt32
 *Ë
øw_d©a
)[
j
]);

86 if(
fù
->
fõld_ty≥
 =
TIFF_SLONG
)

87 
	`Ârötf
(
fd
, "%ld", ()((
öt32
 *Ë
øw_d©a
)[
j
]);

88 if(
fù
->
fõld_ty≥
 =
TIFF_IFD
)

89 
	`Ârötf
(
fd
, "0x%lx",

90 ()((
uöt32
 *Ë
øw_d©a
)[
j
]);

91 if(
fù
->
fõld_ty≥
 =
TIFF_RATIONAL


92 || 
fù
->
fõld_ty≥
 =
TIFF_SRATIONAL


93 || 
fù
->
fõld_ty≥
 =
TIFF_FLOAT
)

94 
	`Ârötf
(
fd
, "%f", ((*Ë
øw_d©a
)[
j
]);

95 if(
fù
->
fõld_ty≥
 =
TIFF_LONG8
)

96 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

97 
	`Ârötf
(
fd
, "%I64u",

98 (
__öt64
)((
uöt64
 *Ë
øw_d©a
)[
j
]);

100 
	`Ârötf
(
fd
, "%llu",

101 ()((
uöt64
 *Ë
øw_d©a
)[
j
]);

103 if(
fù
->
fõld_ty≥
 =
TIFF_SLONG8
)

104 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

105 
	`Ârötf
(
fd
, "%I64d", (
__öt64
)((
öt64
 *Ë
øw_d©a
)[
j
]);

107 
	`Ârötf
(
fd
, "%Œd", ()((
öt64
 *Ë
øw_d©a
)[
j
]);

109 if(
fù
->
fõld_ty≥
 =
TIFF_IFD8
)

110 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

111 
	`Ârötf
(
fd
, "0x%I64x",

112 (
__öt64
)((
uöt64
 *Ë
øw_d©a
)[
j
]);

114 
	`Ârötf
(
fd
, "0x%llx",

115 ()((
uöt64
 *Ë
øw_d©a
)[
j
]);

117 if(
fù
->
fõld_ty≥
 =
TIFF_FLOAT
)

118 
	`Ârötf
(
fd
, "%f", ((*)
øw_d©a
)[
j
]);

119 if(
fù
->
fõld_ty≥
 =
TIFF_DOUBLE
)

120 
	`Ârötf
(
fd
, "%f", ((*Ë
øw_d©a
)[
j
]);

121 if(
fù
->
fõld_ty≥
 =
TIFF_ASCII
) {

122 
	`Ârötf
(
fd
, "%s", (*Ë
øw_d©a
);

126 
	`Ârötf
(
fd
, "<unsupported dataÅype in TIFFPrint>");

130 if(
j
 < 
vÆue_cou¡
 - 1)

131 
	`Ârötf
(
fd
, ",");

134 
	`Ârötf
(
fd
, "\n");

135 
	}
}

138 
	$_TIFFPªâyPrötFõld
(
TIFF
* 
tif
, 
FILE
* 
fd
, 
uöt32
 
èg
,

139 
uöt32
 
vÆue_cou¡
, *
øw_d©a
)

141 (Ë
tif
;

143 
èg
)

145 
TIFFTAG_INKSET
:

146 
	`Ârötf
(
fd
, " Ink Set: ");

147 *((
uöt16
*)
øw_d©a
)) {

148 
INKSET_CMYK
:

149 
	`Ârötf
(
fd
, "CMYK\n");

152 
	`Ârötf
(
fd
, "%u (0x%x)\n",

153 *((
uöt16
*)
øw_d©a
),

154 *((
uöt16
*)
øw_d©a
));

158 
TIFFTAG_DOTRANGE
:

159 
	`Ârötf
(
fd
, " Dot Range: %u-%u\n",

160 ((
uöt16
*)
øw_d©a
)[0], ((uint16*)raw_data)[1]);

162 
TIFFTAG_WHITEPOINT
:

163 
	`Ârötf
(
fd
, " White Point: %g-%g\n",

164 ((*)
øw_d©a
)[0], ((*)raw_data)[1]);

166 
TIFFTAG_XMLPACKET
:

168 
uöt32
 
i
;

170 
	`Ârötf
(
fd
, " XMLPacket (XMP Metadata):\n" );

171 
i
 = 0; i < 
vÆue_cou¡
; i++)

172 
	`Âutc
(((*)
øw_d©a
)[
i
], 
fd
);

173 
	`Ârötf
–
fd
, "\n" );

176 
TIFFTAG_RICHTIFFIPTC
:

181 
	`Ârötf
(
fd
,

183 (Ë
vÆue_cou¡
 * 4);

185 
TIFFTAG_PHOTOSHOP
:

186 
	`Ârötf
(
fd
, " Photoshop Data: <present>, %lu bytes\n",

187 (Ë
vÆue_cou¡
);

189 
TIFFTAG_ICCPROFILE
:

190 
	`Ârötf
(
fd
, " ICC Profile: <present>, %lu bytes\n",

191 (Ë
vÆue_cou¡
);

193 
TIFFTAG_STONITS
:

194 
	`Ârötf
(
fd
,

196 *((*)
øw_d©a
));

201 
	}
}

208 
	$TIFFPrötDúe˘‹y
(
TIFF
* 
tif
, 
FILE
* 
fd
, 
Êags
)

210 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

211 *
£p
;

212 
uöt16
 
i
;

213 
l
, 
n
;

215 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

216 
	`Ârötf
(
fd
, "TIFF Directoryát offset 0x%I64x (%I64u)\n",

217 (
__öt64
Ë
tif
->
tif_dúoff
,

218 (
__öt64
Ë
tif
->
tif_dúoff
);

220 
	`Ârötf
(
fd
, "TIFF Directoryát offset 0x%llx (%llu)\n",

221 (Ë
tif
->
tif_dúoff
,

222 (Ë
tif
->
tif_dúoff
);

224 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SUBFILETYPE
)) {

225 
	`Ârötf
(
fd
, " Subfile Type:");

226 
£p
 = " ";

227 i‡(
td
->
td_subfûëy≥
 & 
FILETYPE_REDUCEDIMAGE
) {

228 
	`Ârötf
(
fd
, "%§edu˚d-ªsﬁuti⁄ image", 
£p
);

229 
£p
 = "/";

231 i‡(
td
->
td_subfûëy≥
 & 
FILETYPE_PAGE
) {

232 
	`Ârötf
(
fd
, "%smu…i-∑gêdocumít", 
£p
);

233 
£p
 = "/";

235 i‡(
td
->
td_subfûëy≥
 & 
FILETYPE_MASK
)

236 
	`Ârötf
(
fd
, "%°øn•¨ícy mask", 
£p
);

237 
	`Ârötf
(
fd
, " (%lu = 0x%lx)\n",

238 (Ë
td
->
td_subfûëy≥
, ()Åd->td_subfiletype);

240 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_IMAGEDIMENSIONS
)) {

241 
	`Ârötf
(
fd
, " Image Width: %lu Image Length: %lu",

242 (Ë
td
->
td_imagewidth
, (Ëtd->
td_imagñígth
);

243 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_IMAGEDEPTH
))

244 
	`Ârötf
(
fd
, " Image Depth: %lu",

245 (Ë
td
->
td_imagedïth
);

246 
	`Ârötf
(
fd
, "\n");

248 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_TILEDIMENSIONS
)) {

249 
	`Ârötf
(
fd
, " Tile Width: %lu Tile Length: %lu",

250 (Ë
td
->
td_tûewidth
, (Ëtd->
td_tûñígth
);

251 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_TILEDEPTH
))

252 
	`Ârötf
(
fd
, " Tile Depth: %lu",

253 (Ë
td
->
td_tûedïth
);

254 
	`Ârötf
(
fd
, "\n");

256 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_RESOLUTION
)) {

257 
	`Ârötf
(
fd
, " Resolution: %g, %g",

258 
td
->
td_xªsﬁuti⁄
,Åd->
td_yªsﬁuti⁄
);

259 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_RESOLUTIONUNIT
)) {

260 
td
->
td_ªsﬁuti⁄unô
) {

261 
RESUNIT_NONE
:

262 
	`Ârötf
(
fd
, " (unitless)");

264 
RESUNIT_INCH
:

265 
	`Ârötf
(
fd
, "Öixels/inch");

267 
RESUNIT_CENTIMETER
:

268 
	`Ârötf
(
fd
, "Öixels/cm");

271 
	`Ârötf
(
fd
, " (unit %u = 0x%x)",

272 
td
->
td_ªsﬁuti⁄unô
,

273 
td
->
td_ªsﬁuti⁄unô
);

277 
	`Ârötf
(
fd
, "\n");

279 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_POSITION
))

280 
	`Ârötf
(
fd
, " Position: %g, %g\n",

281 
td
->
td_xposôi⁄
,Åd->
td_yposôi⁄
);

282 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_BITSPERSAMPLE
))

283 
	`Ârötf
(
fd
, " Bôs/Sam∂e: %u\n", 
td
->
td_bô•îßm∂e
);

284 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SAMPLEFORMAT
)) {

285 
	`Ârötf
(
fd
, " Sample Format: ");

286 
td
->
td_ßm∂ef‹m©
) {

287 
SAMPLEFORMAT_VOID
:

288 
	`Ârötf
(
fd
, "void\n");

290 
SAMPLEFORMAT_INT
:

291 
	`Ârötf
(
fd
, "signed integer\n");

293 
SAMPLEFORMAT_UINT
:

294 
	`Ârötf
(
fd
, "unsigned integer\n");

296 
SAMPLEFORMAT_IEEEFP
:

297 
	`Ârötf
(
fd
, "IEEE floatingÖoint\n");

299 
SAMPLEFORMAT_COMPLEXINT
:

300 
	`Ârötf
(
fd
, "complex signed integer\n");

302 
SAMPLEFORMAT_COMPLEXIEEEFP
:

303 
	`Ârötf
(
fd
, "complex IEEE floatingÖoint\n");

306 
	`Ârötf
(
fd
, "%u (0x%x)\n",

307 
td
->
td_ßm∂ef‹m©
,Åd->td_sampleformat);

311 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_COMPRESSION
)) {

312 c⁄° 
TIFFCodec
* 
c
 = 
	`TIFFFödCODEC
(
td
->
td_com¥essi⁄
);

313 
	`Ârötf
(
fd
, " Compression Scheme: ");

314 i‡(
c
)

315 
	`Ârötf
(
fd
, "%s\n", 
c
->
«me
);

317 
	`Ârötf
(
fd
, "%u (0x%x)\n",

318 
td
->
td_com¥essi⁄
,Åd->td_compression);

320 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_PHOTOMETRIC
)) {

321 
	`Ârötf
(
fd
, " Photometric Interpretation: ");

322 i‡(
td
->
td_phŸomëric
 < 
NPHOTONAMES
)

323 
	`Ârötf
(
fd
, "%s\n", 
phŸoNames
[
td
->
td_phŸomëric
]);

325 
td
->
td_phŸomëric
) {

326 
PHOTOMETRIC_LOGL
:

327 
	`Ârötf
(
fd
, "CIE Log2(L)\n");

329 
PHOTOMETRIC_LOGLUV
:

330 
	`Ârötf
(
fd
, "CIE Log2(L) (u',v')\n");

333 
	`Ârötf
(
fd
, "%u (0x%x)\n",

334 
td
->
td_phŸomëric
,Åd->td_photometric);

339 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_EXTRASAMPLES
Ë&& 
td
->
td_exåaßm∂es
) {

340 
	`Ârötf
(
fd
, " Exå®Sam∂es: %u<", 
td
->
td_exåaßm∂es
);

341 
£p
 = "";

342 
i
 = 0; i < 
td
->
td_exåaßm∂es
; i++) {

343 
td
->
td_ßm∂eöfo
[
i
]) {

344 
EXTRASAMPLE_UNSPECIFIED
:

345 
	`Ârötf
(
fd
, "%sun•ecifõd", 
£p
);

347 
EXTRASAMPLE_ASSOCALPHA
:

348 
	`Ârötf
(
fd
, "%ßssoc-Æpha", 
£p
);

350 
EXTRASAMPLE_UNASSALPHA
:

351 
	`Ârötf
(
fd
, "%su«ssoc-Æpha", 
£p
);

354 
	`Ârötf
(
fd
, "%s%u (0x%x)", 
£p
,

355 
td
->
td_ßm∂eöfo
[
i
],Åd->td_sampleinfo[i]);

358 
£p
 = ", ";

360 
	`Ârötf
(
fd
, ">\n");

362 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_INKNAMES
)) {

363 * 
˝
;

364 
	`Ârötf
(
fd
, " Ink Names: ");

365 
i
 = 
td
->
td_ßm∂e•îpixñ
;

366 
£p
 = "";

367 
˝
 = 
td
->
td_ök«mes
; 
i
 > 0; c∞
	`°rchr
(cp,'\0')+1, i--) {

368 
	`Âuts
(
£p
, 
fd
);

369 
	`_TIFF¥ötAscii
(
fd
, 
˝
);

370 
£p
 = ", ";

372 
	`Âuts
("\n", 
fd
);

374 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_THRESHHOLDING
)) {

375 
	`Ârötf
(
fd
, " Thresholding: ");

376 
td
->
td_thªshhﬁdög
) {

377 
THRESHHOLD_BILEVEL
:

378 
	`Ârötf
(
fd
, "bilevelárt scan\n");

380 
THRESHHOLD_HALFTONE
:

381 
	`Ârötf
(
fd
, "halftone or dithered scan\n");

383 
THRESHHOLD_ERRORDIFFUSE
:

384 
	`Ârötf
(
fd
, "error diffused\n");

387 
	`Ârötf
(
fd
, "%u (0x%x)\n",

388 
td
->
td_thªshhﬁdög
,Åd->td_threshholding);

392 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_FILLORDER
)) {

393 
	`Ârötf
(
fd
, " FillOrder: ");

394 
td
->
td_fûl‹dî
) {

395 
FILLORDER_MSB2LSB
:

396 
	`Ârötf
(
fd
, "msb-to-lsb\n");

398 
FILLORDER_LSB2MSB
:

399 
	`Ârötf
(
fd
, "lsb-to-msb\n");

402 
	`Ârötf
(
fd
, "%u (0x%x)\n",

403 
td
->
td_fûl‹dî
,Åd->td_fillorder);

407 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_YCBCRSUBSAMPLING
))

409 
	`Ârötf
(
fd
, " YCbCr Subsampling: %u, %u\n",

410 
td
->
td_ycb¸subßm∂ög
[0],Åd->td_ycbcrsubsampling[1] );

412 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_YCBCRPOSITIONING
)) {

413 
	`Ârötf
(
fd
, " YCbCr Positioning: ");

414 
td
->
td_ycb¸posôi⁄ög
) {

415 
YCBCRPOSITION_CENTERED
:

416 
	`Ârötf
(
fd
, "centered\n");

418 
YCBCRPOSITION_COSITED
:

419 
	`Ârötf
(
fd
, "cosited\n");

422 
	`Ârötf
(
fd
, "%u (0x%x)\n",

423 
td
->
td_ycb¸posôi⁄ög
,Åd->td_ycbcrpositioning);

427 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_HALFTONEHINTS
))

428 
	`Ârötf
(
fd
, " Halftone Hints:Üight %u dark %u\n",

429 
td
->
td_hÆ·⁄ehöts
[0],Åd->td_halftonehints[1]);

430 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_ORIENTATION
)) {

431 
	`Ârötf
(
fd
, " Orientation: ");

432 i‡(
td
->
td_‹õ¡©i⁄
 < 
NORIENTNAMES
)

433 
	`Ârötf
(
fd
, "%s\n", 
‹õ¡Names
[
td
->
td_‹õ¡©i⁄
]);

435 
	`Ârötf
(
fd
, "%u (0x%x)\n",

436 
td
->
td_‹õ¡©i⁄
,Åd->td_orientation);

438 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SAMPLESPERPIXEL
))

439 
	`Ârötf
(
fd
, " Sam∂es/Pixñ: %u\n", 
td
->
td_ßm∂e•îpixñ
);

440 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_ROWSPERSTRIP
)) {

441 
	`Ârötf
(
fd
, " Rows/Strip: ");

442 i‡(
td
->
td_row•î°rù
 =(
uöt32
) -1)

443 
	`Ârötf
(
fd
, "(infinite)\n");

445 
	`Ârötf
(
fd
, "%lu\n", (Ë
td
->
td_row•î°rù
);

447 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_MINSAMPLEVALUE
))

448 
	`Ârötf
(
fd
, " Mö Sam∂êVÆue: %u\n", 
td
->
td_mößm∂evÆue
);

449 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_MAXSAMPLEVALUE
))

450 
	`Ârötf
(
fd
, " Max Sam∂êVÆue: %u\n", 
td
->
td_maxßm∂evÆue
);

451 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SMINSAMPLEVALUE
)) {

452 
	`Ârötf
(
fd
, " SMin Sample Value:");

453 
i
 = 0; i < 
td
->
td_ßm∂e•îpixñ
; ++i)

454 
	`Ârötf
(
fd
, " %g", 
td
->
td_smößm∂evÆue
[
i
]);

455 
	`Ârötf
(
fd
, "\n");

457 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_SMAXSAMPLEVALUE
)) {

458 
	`Ârötf
(
fd
, " SMax Sample Value:");

459 
i
 = 0; i < 
td
->
td_ßm∂e•îpixñ
; ++i)

460 
	`Ârötf
(
fd
, " %g", 
td
->
td_smaxßm∂evÆue
[
i
]);

461 
	`Ârötf
(
fd
, "\n");

463 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_PLANARCONFIG
)) {

464 
	`Ârötf
(
fd
, " Planar Configuration: ");

465 
td
->
td_∂™¨c⁄fig
) {

466 
PLANARCONFIG_CONTIG
:

467 
	`Ârötf
(
fd
, "single imageÖlane\n");

469 
PLANARCONFIG_SEPARATE
:

470 
	`Ârötf
(
fd
, "separate imageÖlanes\n");

473 
	`Ârötf
(
fd
, "%u (0x%x)\n",

474 
td
->
td_∂™¨c⁄fig
,Åd->td_planarconfig);

478 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_PAGENUMBER
))

479 
	`Ârötf
(
fd
, " Page Number: %u-%u\n",

480 
td
->
td_∑gíumbî
[0],Åd->td_pagenumber[1]);

481 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_COLORMAP
)) {

482 
	`Ârötf
(
fd
, " Color Map: ");

483 i‡(
Êags
 & 
TIFFPRINT_COLORMAP
) {

484 
	`Ârötf
(
fd
, "\n");

485 
n
 = 1L<<
td
->
td_bô•îßm∂e
;

486 
l
 = 0;Ü < 
n
;Ü++)

487 
	`Ârötf
(
fd
, " %5lu: %5u %5u %5u\n",

488 
l
,

489 
td
->
td_cﬁ‹m≠
[0][
l
],

490 
td
->
td_cﬁ‹m≠
[1][
l
],

491 
td
->
td_cﬁ‹m≠
[2][
l
]);

493 
	`Ârötf
(
fd
, "(present)\n");

495 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_REFBLACKWHITE
)) {

496 
	`Ârötf
(
fd
, " Reference Black/White:\n");

497 
i
 = 0; i < 3; i++)

498 
	`Ârötf
(
fd
, " %2d: %5g %5g\n", 
i
,

499 
td
->
td_ªfbœckwhôe
[2*
i
+0],

500 
td
->
td_ªfbœckwhôe
[2*
i
+1]);

502 i‡(
	`TIFFFõldSë
(
tif
,
FIELD_TRANSFERFUNCTION
)) {

503 
	`Ârötf
(
fd
, " Transfer Function: ");

504 i‡(
Êags
 & 
TIFFPRINT_CURVES
) {

505 
	`Ârötf
(
fd
, "\n");

506 
n
 = 1L<<
td
->
td_bô•îßm∂e
;

507 
l
 = 0;Ü < 
n
;Ü++) {

508 
	`Ârötf
(
fd
, " %2lu: %5u",

509 
l
, 
td
->
td_å™s„rfun˘i⁄
[0][l]);

510 
i
 = 1; i < 
td
->
td_ßm∂e•îpixñ
; i++)

511 
	`Ârötf
(
fd
, " %5u",

512 
td
->
td_å™s„rfun˘i⁄
[
i
][
l
]);

513 
	`Âutc
('\n', 
fd
);

516 
	`Ârötf
(
fd
, "(present)\n");

518 i‡(
	`TIFFFõldSë
(
tif
, 
FIELD_SUBIFD
Ë&& (
td
->
td_subifd
)) {

519 
	`Ârötf
(
fd
, " SubIFD Offsets:");

520 
i
 = 0; i < 
td
->
td_nsubifd
; i++)

521 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

522 
	`Ârötf
(
fd
, " %5I64u",

523 (
__öt64
Ë
td
->
td_subifd
[
i
]);

525 
	`Ârötf
(
fd
, " %5llu",

526 (Ë
td
->
td_subifd
[
i
]);

528 
	`Âutc
('\n', 
fd
);

535 
i
;

536 
cou¡
;

538 
cou¡
 = (Ë
	`TIFFGëTagLi°Cou¡
(
tif
);

539 
i
 = 0; i < 
cou¡
; i++) {

540 
uöt32
 
èg
 = 
	`TIFFGëTagLi°E¡ry
(
tif
, 
i
);

541 c⁄° 
TIFFFõld
 *
fù
;

542 
uöt32
 
vÆue_cou¡
;

543 
mem_Æloc
 = 0;

544 *
øw_d©a
;

546 
fù
 = 
	`TIFFFõldWôhTag
(
tif
, 
èg
);

547 if(
fù
 =
NULL
)

550 if(
fù
->
fõld_∑sscou¡
) {

551 if(
	`TIFFGëFõld
(
tif
, 
èg
, &
vÆue_cou¡
, &
øw_d©a
) != 1)

554 i‡(
fù
->
fõld_ªadcou¡
 =
TIFF_VARIABLE


555 || 
fù
->
fõld_ªadcou¡
 =
TIFF_VARIABLE2
)

556 
vÆue_cou¡
 = 1;

557 i‡(
fù
->
fõld_ªadcou¡
 =
TIFF_SPP
)

558 
vÆue_cou¡
 = 
td
->
td_ßm∂e•îpixñ
;

560 
vÆue_cou¡
 = 
fù
->
fõld_ªadcou¡
;

561 i‡((
fù
->
fõld_ty≥
 =
TIFF_ASCII


562 || 
fù
->
fõld_ªadcou¡
 =
TIFF_VARIABLE


563 || 
fù
->
fõld_ªadcou¡
 =
TIFF_VARIABLE2


564 || 
fù
->
fõld_ªadcou¡
 =
TIFF_SPP


565 || 
vÆue_cou¡
 > 1)

566 && 
fù
->
fõld_èg
 !
TIFFTAG_PAGENUMBER


567 && 
fù
->
fõld_èg
 !
TIFFTAG_HALFTONEHINTS


568 && 
fù
->
fõld_èg
 !
TIFFTAG_YCBCRSUBSAMPLING


569 && 
fù
->
fõld_èg
 !
TIFFTAG_DOTRANGE
) {

570 if(
	`TIFFGëFõld
(
tif
, 
èg
, &
øw_d©a
) != 1)

572 } i‡(
fù
->
fõld_èg
 !
TIFFTAG_PAGENUMBER


573 && 
fù
->
fõld_èg
 !
TIFFTAG_HALFTONEHINTS


574 && 
fù
->
fõld_èg
 !
TIFFTAG_YCBCRSUBSAMPLING


575 && 
fù
->
fõld_èg
 !
TIFFTAG_DOTRANGE
) {

576 
øw_d©a
 = 
	`_TIFFmÆloc
(

577 
	`_TIFFD©aSize
(
fù
->
fõld_ty≥
)

578 * 
vÆue_cou¡
);

579 
mem_Æloc
 = 1;

580 if(
	`TIFFGëFõld
(
tif
, 
èg
, 
øw_d©a
) != 1) {

581 
	`_TIFF‰ì
(
øw_d©a
);

593 *
tmp
;

594 
øw_d©a
 = 
	`_TIFFmÆloc
(

595 
	`_TIFFD©aSize
(
fù
->
fõld_ty≥
)

596 * 
vÆue_cou¡
);

597 
tmp
 = 
øw_d©a
;

598 
mem_Æloc
 = 1;

599 if(
	`TIFFGëFõld
(
tif
, 
èg
, 
tmp
,

600 
tmp
 + 
	`_TIFFD©aSize
(
fù
->
fõld_ty≥
)) != 1) {

601 
	`_TIFF‰ì
(
øw_d©a
);

613 i‡(!
	`_TIFFPªâyPrötFõld
(
tif
, 
fd
, 
èg
, 
vÆue_cou¡
, 
øw_d©a
))

614 
	`_TIFFPrötFõld
(
fd
, 
fù
, 
vÆue_cou¡
, 
øw_d©a
);

616 if(
mem_Æloc
)

617 
	`_TIFF‰ì
(
øw_d©a
);

621 i‡(
tif
->
tif_ègmëhods
.
¥ötdú
)

622 (*
tif
->
tif_ègmëhods
.
¥ötdú
)—if, 
fd
, 
Êags
);

624 
	`_TIFFFûlSåûes
–
tif
 );

626 i‡((
Êags
 & 
TIFFPRINT_STRIPS
) &&

627 
	`TIFFFõldSë
(
tif
,
FIELD_STRIPOFFSETS
)) {

628 
uöt32
 
s
;

630 
	`Ârötf
(
fd
, " %lu %s:\n",

631 (Ë
td
->
td_n°rùs
,

632 
	`isTûed
(
tif
) ? "Tiles" : "Strips");

633 
s
 = 0; s < 
td
->
td_n°rùs
; s++)

634 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

635 
	`Ârötf
(
fd
, " %3lu: [%8I64u, %8I64u]\n",

636 (Ë
s
,

637 (
__öt64
Ë
td
->
td_°rùoff£t
[
s
],

638 (
__öt64
Ë
td
->
td_°rùbyãcou¡
[
s
]);

640 
	`Ârötf
(
fd
, " %3lu: [%8llu, %8llu]\n",

641 (Ë
s
,

642 (Ë
td
->
td_°rùoff£t
[
s
],

643 (Ë
td
->
td_°rùbyãcou¡
[
s
]);

646 
	}
}

649 
	$_TIFF¥ötAscii
(
FILE
* 
fd
, c⁄° * 
˝
)

651 ; *
˝
 != '\0'; cp++) {

652 c⁄° * 
ç
;

654 i‡(
	`i•röt
(()*
˝
)) {

655 
	`Âutc
(*
˝
, 
fd
);

658 
ç
 = "\tt\bb\rr\nn\vv"; *tp;Åp++)

659 i‡(*
ç
++ =*
˝
)

661 i‡(*
ç
)

662 
	`Ârötf
(
fd
, "\\%c", *
ç
);

664 
	`Ârötf
(
fd
, "\\%03o", *
˝
 & 0xff);

666 
	}
}

669 
	$_TIFF¥ötAsciiTag
(
FILE
* 
fd
, c⁄° * 
«me
, c⁄° * 
vÆue
)

671 
	`Ârötf
(
fd
, " %s: \"", 
«me
);

672 
	`_TIFF¥ötAscii
(
fd
, 
vÆue
);

673 
	`Ârötf
(
fd
, "\"\n");

674 
	}
}

	@libtiff/tif_read.c

31 
	~"tiffi›.h
"

32 
	~<°dio.h
>

34 
TIFFFûlSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
);

35 
TIFFFûlTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
);

36 
TIFFSèπSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
);

37 
TIFFSèπTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
);

38 
TIFFCheckRód
(
TIFF
*, );

39 
tmsize_t


40 
TIFFRódRawSåù1
(
TIFF
* 
tif
, 
uöt32
 
°rù
, * 
buf
, 
tmsize_t
 
size
,c⁄° * 
moduÀ
);

42 
	#NOSTRIP
 ((
uöt32
)(-1)Ë

	)

43 
	#NOTILE
 ((
uöt32
)(-1)Ë

	)

46 
	$TIFFFûlSåùP¨tül
–
TIFF
 *
tif
, 
°rù
, 
tmsize_t
 
ªad_ahód
, 
ª°¨t
 )

48 c⁄° 
moduÀ
[] = "TIFFFillStripPartial";

49 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

50 
uöt64
 
unu£d_d©a
;

51 
uöt64
 
ªad_off£t
;

52 
tmsize_t
 
cc
, 
to_ªad
;

53 
tmsize_t
 
byãcou¡m
;

55 i‡(!
	`_TIFFFûlSåûes
–
tif
 ) || !tif->
tif_dú
.
td_°rùbyãcou¡
)

64 
byãcou¡m
=(
tmsize_t
Ë
td
->
td_°rùbyãcou¡
[
°rù
];

65 i‡(
ªad_ahód
*2 > 
tif
->
tif_øwd©asize
) {

66 
	`as£π
–
ª°¨t
 );

68 
tif
->
tif_cur°rù
 = 
NOSTRIP
;

69 i‡((
tif
->
tif_Êags
 & 
TIFF_MYBUFFER
) == 0) {

70 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

72 (Ë
°rù
);

75 i‡(!
	`TIFFRódBuf„rSëup
(
tif
, 0, 
ªad_ahód
*2))

79 if–
ª°¨t
 )

81 
tif
->
tif_øwd©Æﬂded
 = 0;

82 
tif
->
tif_øwd©aoff
 = 0;

89 if–
tif
->
tif_øwd©Æﬂded
 > 0 )

90 
unu£d_d©a
 = 
tif
->
tif_øwd©Æﬂded
 - (tif->
tif_øw˝
 -Åif->
tif_øwd©a
);

92 
unu£d_d©a
 = 0;

94 if–
unu£d_d©a
 > 0 )

96 
	`memmove
–
tif
->
tif_øwd©a
,Åif->
tif_øw˝
, 
unu£d_d©a
 );

102 
ªad_off£t
 = 
td
->
td_°rùoff£t
[
°rù
]

103 + 
tif
->
tif_øwd©aoff
 +Åif->
tif_øwd©Æﬂded
;

105 i‡(!
	`SìkOK
(
tif
, 
ªad_off£t
)) {

106 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

108 (Ë
tif
->
tif_row
, (Ë
°rù
);

115 
to_ªad
 = 
tif
->
tif_øwd©asize
 - 
unu£d_d©a
;

116 if–(
uöt64
Ë
to_ªad
 > 
td
->
td_°rùbyãcou¡
[
°rù
]

117 - 
tif
->
tif_øwd©aoff
 -Åif->
tif_øwd©Æﬂded
 )

119 
to_ªad
 = 
td
->
td_°rùbyãcou¡
[
°rù
]

120 - 
tif
->
tif_øwd©aoff
 -Åif->
tif_øwd©Æﬂded
;

123 
cc
 = 
	`TIFFRódFûe
(
tif
,Åif->
tif_øwd©a
 + 
unu£d_d©a
, 
to_ªad
);

125 i‡(
cc
 !
to_ªad
) {

126 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

127 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

129 (Ë
tif
->
tif_row
,

130 (
__öt64
Ë
cc
,

131 (
__öt64
Ë
to_ªad
);

133 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

135 (Ë
tif
->
tif_row
,

136 (Ë
cc
,

137 (Ë
to_ªad
);

142 
tif
->
tif_øwd©aoff
 =Åif->tif_øwd©aof‡+Åif->
tif_øwd©Æﬂded
 - 
unu£d_d©a
 ;

143 
tif
->
tif_øwd©Æﬂded
 = 
unu£d_d©a
 + 
to_ªad
;

145 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
;

147 i‡(!
	`isFûlOrdî
(
tif
, 
td
->
td_fûl‹dî
) &&

148 (
tif
->
tif_Êags
 & 
TIFF_NOBITREV
) == 0)

149 
	`TIFFRevî£Bôs
(
tif
->
tif_øwd©a
 + 
unu£d_d©a
, 
to_ªad
 );

155 if–
ª°¨t
 )

156  
	`TIFFSèπSåù
(
tif
, 
°rù
);

159 
	}
}

170 
	$TIFFSìk
(
TIFF
* 
tif
, 
uöt32
 
row
, 
uöt16
 
ßm∂e
 )

172 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

173 
uöt32
 
°rù
;

174 
whﬁe_°rù
;

175 
tmsize_t
 
ªad_ahód
 = 0;

180 i‡(
row
 >
td
->
td_imagñígth
) {

181 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

183 (Ë
row
,

184 (Ë
td
->
td_imagñígth
);

187 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
) {

188 i‡(
ßm∂e
 >
td
->
td_ßm∂e•îpixñ
) {

189 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

191 (Ë
ßm∂e
, (Ë
td
->
td_ßm∂e•îpixñ
);

194 
°rù
 = (
uöt32
)
ßm∂e
*
td
->
td_°rù•îimage
 + 
row
/td->
td_row•î°rù
;

196 
°rù
 = 
row
 / 
td
->
td_row•î°rù
;

202 #i‡
	`deföed
(
CHUNKY_STRIP_READ_SUPPORT
)

203 i‡(!
	`_TIFFFûlSåûes
–
tif
 ) || !tif->
tif_dú
.
td_°rùbyãcou¡
)

205 
whﬁe_°rù
 = 
tif
->
tif_dú
.
td_°rùbyãcou¡
[
°rù
] < 10

206 || 
	`isM≠≥d
(
tif
);

208 
whﬁe_°rù
 = 1;

211 if–!
whﬁe_°rù
 )

213 
ªad_ahód
 = 
tif
->
tif_sˇ∆öesize
 * 16 + 5000;

220 i‡(
°rù
 !
tif
->
tif_cur°rù
) {

222 if–
whﬁe_°rù
 )

224 i‡(!
	`TIFFFûlSåù
(
tif
, 
°rù
))

229 if–!
	`TIFFFûlSåùP¨tül
(
tif
,
°rù
,
ªad_ahód
,1) )

237 if–!
whﬁe_°rù
 )

239 if–((
tif
->
tif_øwd©a
 +Åif->
tif_øwd©Æﬂded
Ë-Åif->
tif_øw˝
Ë< 
ªad_ahód


240 && (
uöt64
Ë
tif
->
tif_øwd©aoff
+tif->
tif_øwd©Æﬂded
 < 
td
->
td_°rùbyãcou¡
[
°rù
] )

242 if–!
	`TIFFFûlSåùP¨tül
(
tif
,
°rù
,
ªad_ahód
,0) )

247 i‡(
row
 < 
tif
->
tif_row
) {

257 if–
tif
->
tif_øwd©aoff
 != 0 )

259 if–!
	`TIFFFûlSåùP¨tül
(
tif
,
°rù
,
ªad_ahód
,1) )

264 i‡(!
	`TIFFSèπSåù
(
tif
, 
°rù
))

269 i‡(
row
 !
tif
->
tif_row
) {

276 i‡(!(*
tif
->
tif_£ek
)—if, 
row
 -Åif->
tif_row
))

278 
tif
->
tif_row
 = 
row
;

282 
	}
}

285 
	$TIFFRódSˇ∆öe
(
TIFF
* 
tif
, * 
buf
, 
uöt32
 
row
, 
uöt16
 
ßm∂e
)

287 
e
;

289 i‡(!
	`TIFFCheckRód
(
tif
, 0))

291 if–(
e
 = 
	`TIFFSìk
(
tif
, 
row
, 
ßm∂e
)) != 0) {

295 
e
 = (*
tif
->
tif_decodîow
)

296 (
tif
, (
uöt8
*Ë
buf
,Åif->
tif_sˇ∆öesize
, 
ßm∂e
);

299 
tif
->
tif_row
 = 
row
 + 1;

301 i‡(
e
)

302 (*
tif
->
tif_po°decode
)—if, (
uöt8
*Ë
buf
,

303 
tif
->
tif_sˇ∆öesize
);

305  (
e
 > 0 ? 1 : -1);

306 
	}
}

312 
tmsize_t


313 
	$TIFFRódEncodedSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
, * 
buf
, 
tmsize_t
 
size
)

315 c⁄° 
moduÀ
[] = "TIFFReadEncodedStrip";

316 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

317 
uöt32
 
row•î°rù
;

318 
uöt32
 
°rù•î∂™e
;

319 
uöt32
 
°rùö∂™e
;

320 
uöt16
 
∂™e
;

321 
uöt32
 
rows
;

322 
tmsize_t
 
°rùsize
;

323 i‡(!
	`TIFFCheckRód
(
tif
,0))

324 ((
tmsize_t
)(-1));

325 i‡(
°rù
>=
td
->
td_n°rùs
)

327 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

328 "%lu: Såù ouào‡ønge, max %lu",()
°rù
,

329 ()
td
->
td_n°rùs
);

330 ((
tmsize_t
)(-1));

337 
row•î°rù
=
td
->
td_row•î°rù
;

338 i‡(
row•î°rù
>
td
->
td_imagñígth
)

339 
row•î°rù
=
td
->
td_imagñígth
;

340 
°rù•î∂™e
=((
td
->
td_imagñígth
+
row•î°rù
-1)/rowsperstrip);

341 
°rùö∂™e
=(
°rù
%
°rù•î∂™e
);

342 
∂™e
=(
°rù
/
°rù•î∂™e
);

343 
rows
=
td
->
td_imagñígth
-
°rùö∂™e
*
row•î°rù
;

344 i‡(
rows
>
row•î°rù
)

345 
rows
=
row•î°rù
;

346 
°rùsize
=
	`TIFFVSåùSize
(
tif
,
rows
);

347 i‡(
°rùsize
==0)

348 ((
tmsize_t
)(-1));

349 i‡((
size
!=(
tmsize_t
)(-1))&&(size<
°rùsize
))

350 
°rùsize
=
size
;

351 i‡(!
	`TIFFFûlSåù
(
tif
,
°rù
))

352 ((
tmsize_t
)(-1));

353 i‡((*
tif
->
tif_decode°rù
)—if,
buf
,
°rùsize
,
∂™e
)<=0)

354 ((
tmsize_t
)(-1));

355 (*
tif
->
tif_po°decode
)—if,
buf
,
°rùsize
);

356 (
°rùsize
);

357 
	}
}

359 
tmsize_t


360 
	$TIFFRódRawSåù1
(
TIFF
* 
tif
, 
uöt32
 
°rù
, * 
buf
, 
tmsize_t
 
size
,

361 c⁄° * 
moduÀ
)

363 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

365 i‡(!
	`_TIFFFûlSåûes
–
tif
 ))

366  ((
tmsize_t
)(-1));

368 
	`as£π
((
tif
->
tif_Êags
&
TIFF_NOREADRAW
)==0);

369 i‡(!
	`isM≠≥d
(
tif
)) {

370 
tmsize_t
 
cc
;

372 i‡(!
	`SìkOK
(
tif
, 
td
->
td_°rùoff£t
[
°rù
])) {

373 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

375 (Ë
tif
->
tif_row
, (Ë
°rù
);

376  ((
tmsize_t
)(-1));

378 
cc
 = 
	`TIFFRódFûe
(
tif
, 
buf
, 
size
);

379 i‡(
cc
 !
size
) {

380 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

381 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

383 (Ë
tif
->
tif_row
,

384 (
__öt64
Ë
cc
,

385 (
__öt64
Ë
size
);

387 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

389 (Ë
tif
->
tif_row
,

390 (Ë
cc
,

391 (Ë
size
);

393  ((
tmsize_t
)(-1));

396 
tmsize_t
 
ma
,
mb
;

397 
tmsize_t
 
n
;

398 
ma
=(
tmsize_t
)
td
->
td_°rùoff£t
[
°rù
];

399 
mb
=
ma
+
size
;

400 i‡(((
uöt64
)
ma
!=
td
->
td_°rùoff£t
[
°rù
])||(ma>
tif
->
tif_size
))

401 
n
=0;

402 i‡((
mb
<
ma
)||(mb<
size
)||(mb>
tif
->
tif_size
))

403 
n
=
tif
->
tif_size
-
ma
;

405 
n
=
size
;

406 i‡(
n
!=
size
) {

407 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

408 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

410 (Ë
tif
->
tif_row
,

411 (Ë
°rù
,

412 (
__öt64
Ë
n
,

413 (
__öt64
Ë
size
);

415 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

417 (Ë
tif
->
tif_row
,

418 (Ë
°rù
,

419 (Ë
n
,

420 (Ë
size
);

422  ((
tmsize_t
)(-1));

424 
	`_TIFFmem˝y
(
buf
, 
tif
->
tif_ba£
 + 
ma
,

425 
size
);

427  (
size
);

428 
	}
}

433 
tmsize_t


434 
	$TIFFRódRawSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
, * 
buf
, 
tmsize_t
 
size
)

436 c⁄° 
moduÀ
[] = "TIFFReadRawStrip";

437 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

438 
uöt64
 
byãcou¡
;

439 
tmsize_t
 
byãcou¡m
;

441 i‡(!
	`TIFFCheckRód
(
tif
, 0))

442  ((
tmsize_t
)(-1));

443 i‡(
°rù
 >
td
->
td_n°rùs
) {

444 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

446 (Ë
°rù
,

447 (Ë
td
->
td_n°rùs
);

448  ((
tmsize_t
)(-1));

450 i‡(
tif
->
tif_Êags
&
TIFF_NOREADRAW
)

452 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

454  ((
tmsize_t
)(-1));

456 
byãcou¡
 = 
td
->
td_°rùbyãcou¡
[
°rù
];

457 i‡(
byãcou¡
 <= 0) {

458 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

459 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

461 (
__öt64
Ë
byãcou¡
,

462 (Ë
°rù
);

464 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

466 (Ë
byãcou¡
,

467 (Ë
°rù
);

469  ((
tmsize_t
)(-1));

471 
byãcou¡m
 = (
tmsize_t
)
byãcou¡
;

472 i‡((
uöt64
)
byãcou¡m
!=
byãcou¡
) {

473 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Integer overflow");

474  ((
tmsize_t
)(-1));

476 i‡(
size
 !(
tmsize_t
)(-1Ë&& sizê< 
byãcou¡m
)

477 
byãcou¡m
 = 
size
;

478  (
	`TIFFRódRawSåù1
(
tif
, 
°rù
, 
buf
, 
byãcou¡m
, 
moduÀ
));

479 
	}
}

486 
	$TIFFFûlSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
)

488 c⁄° 
moduÀ
[] = "TIFFFillStrip";

489 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

491 i‡(!
	`_TIFFFûlSåûes
–
tif
 ) || !tif->
tif_dú
.
td_°rùbyãcou¡
)

494 i‡((
tif
->
tif_Êags
&
TIFF_NOREADRAW
)==0)

496 
uöt64
 
byãcou¡
 = 
td
->
td_°rùbyãcou¡
[
°rù
];

497 i‡(
byãcou¡
 <= 0) {

498 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

499 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

501 (
__öt64
Ë
byãcou¡
,

502 (Ë
°rù
);

504 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

506 (Ë
byãcou¡
,

507 (Ë
°rù
);

511 i‡(
	`isM≠≥d
(
tif
) &&

512 (
	`isFûlOrdî
(
tif
, 
td
->
td_fûl‹dî
)

513 || (
tif
->
tif_Êags
 & 
TIFF_NOBITREV
))) {

525 i‡((
tif
->
tif_Êags
 & 
TIFF_MYBUFFER
Ë&&Åif->
tif_øwd©a
)

526 
	`_TIFF‰ì
(
tif
->
tif_øwd©a
);

527 
tif
->
tif_Êags
 &~
TIFF_MYBUFFER
;

537 i‡(
byãcou¡
 > (
uöt64
)
tif
->
tif_size
 ||

538 
td
->
td_°rùoff£t
[
°rù
] > (
uöt64
)
tif
->
tif_size
 - 
byãcou¡
) {

544 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

545 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

549 (Ë
°rù
,

550 (
__öt64
Ë
tif
->
tif_size
 - 
td
->
td_°rùoff£t
[
°rù
],

551 (
__öt64
Ë
byãcou¡
);

553 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

557 (Ë
°rù
,

558 (Ë
tif
->
tif_size
 - 
td
->
td_°rùoff£t
[
°rù
],

559 (Ë
byãcou¡
);

561 
tif
->
tif_cur°rù
 = 
NOSTRIP
;

564 
tif
->
tif_øwd©asize
 = (
tmsize_t
)
byãcou¡
;

565 
tif
->
tif_øwd©a
 =Åif->
tif_ba£
 + (
tmsize_t
)
td
->
td_°rùoff£t
[
°rù
];

566 
tif
->
tif_øwd©aoff
 = 0;

567 
tif
->
tif_øwd©Æﬂded
 = (
tmsize_t
Ë
byãcou¡
;

574 
tmsize_t
 
byãcou¡m
;

575 
byãcou¡m
=(
tmsize_t
)
byãcou¡
;

576 i‡((
uöt64
)
byãcou¡m
!=
byãcou¡
)

578 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Integer overflow");

581 i‡(
byãcou¡m
 > 
tif
->
tif_øwd©asize
) {

582 
tif
->
tif_cur°rù
 = 
NOSTRIP
;

583 i‡((
tif
->
tif_Êags
 & 
TIFF_MYBUFFER
) == 0) {

584 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

586 (Ë
°rù
);

589 i‡(!
	`TIFFRódBuf„rSëup
(
tif
, 0, 
byãcou¡m
))

592 i‡(
	`TIFFRódRawSåù1
(
tif
, 
°rù
,Åif->
tif_øwd©a
,

593 
byãcou¡m
, 
moduÀ
) != bytecountm)

596 
tif
->
tif_øwd©aoff
 = 0;

597 
tif
->
tif_øwd©Æﬂded
 = 
byãcou¡m
;

599 i‡(!
	`isFûlOrdî
(
tif
, 
td
->
td_fûl‹dî
) &&

600 (
tif
->
tif_Êags
 & 
TIFF_NOBITREV
) == 0)

601 
	`TIFFRevî£Bôs
(
tif
->
tif_øwd©a
, 
byãcou¡m
);

604  (
	`TIFFSèπSåù
(
tif
, 
°rù
));

605 
	}
}

616 
tmsize_t


617 
	$TIFFRódTûe
(
TIFF
* 
tif
, * 
buf
, 
uöt32
 
x
, uöt32 
y
, uöt32 
z
, 
uöt16
 
s
)

619 i‡(!
	`TIFFCheckRód
(
tif
, 1Ë|| !
	`TIFFCheckTûe
—if, 
x
, 
y
, 
z
, 
s
))

620  ((
tmsize_t
)(-1));

621  (
	`TIFFRódEncodedTûe
(
tif
,

622 
	`TIFFCompuãTûe
(
tif
, 
x
, 
y
, 
z
, 
s
), 
buf
, (
tmsize_t
)(-1)));

623 
	}
}

629 
tmsize_t


630 
	$TIFFRódEncodedTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
, * 
buf
, 
tmsize_t
 
size
)

632 c⁄° 
moduÀ
[] = "TIFFReadEncodedTile";

633 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

634 
tmsize_t
 
tûesize
 = 
tif
->
tif_tûesize
;

636 i‡(!
	`TIFFCheckRód
(
tif
, 1))

637  ((
tmsize_t
)(-1));

638 i‡(
tûe
 >
td
->
td_n°rùs
) {

639 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

641 (Ë
tûe
, (Ë
td
->
td_n°rùs
);

642  ((
tmsize_t
)(-1));

644 i‡(
size
 =(
tmsize_t
)(-1))

645 
size
 = 
tûesize
;

646 i‡(
size
 > 
tûesize
)

647 
size
 = 
tûesize
;

648 i‡(
	`TIFFFûlTûe
(
tif
, 
tûe
Ë&& (*tif->
tif_decodëûe
)(tif,

649 (
uöt8
*Ë
buf
, 
size
, (
uöt16
)(
tûe
/
td
->
td_°rù•îimage
))) {

650 (*
tif
->
tif_po°decode
)—if, (
uöt8
*Ë
buf
, 
size
);

651  (
size
);

653  ((
tmsize_t
)(-1));

654 
	}
}

656 
tmsize_t


657 
	$TIFFRódRawTûe1
(
TIFF
* 
tif
, 
uöt32
 
tûe
, * 
buf
, 
tmsize_t
 
size
, c⁄° * 
moduÀ
)

659 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

661 i‡(!
	`_TIFFFûlSåûes
–
tif
 ))

662  ((
tmsize_t
)(-1));

664 
	`as£π
((
tif
->
tif_Êags
&
TIFF_NOREADRAW
)==0);

665 i‡(!
	`isM≠≥d
(
tif
)) {

666 
tmsize_t
 
cc
;

668 i‡(!
	`SìkOK
(
tif
, 
td
->
td_°rùoff£t
[
tûe
])) {

669 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

671 (Ë
tif
->
tif_row
,

672 (Ë
tif
->
tif_cﬁ
,

673 (Ë
tûe
);

674  ((
tmsize_t
)(-1));

676 
cc
 = 
	`TIFFRódFûe
(
tif
, 
buf
, 
size
);

677 i‡(
cc
 !
size
) {

678 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

679 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

681 (Ë
tif
->
tif_row
,

682 (Ë
tif
->
tif_cﬁ
,

683 (
__öt64
Ë
cc
,

684 (
__öt64
Ë
size
);

686 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

688 (Ë
tif
->
tif_row
,

689 (Ë
tif
->
tif_cﬁ
,

690 (Ë
cc
,

691 (Ë
size
);

693  ((
tmsize_t
)(-1));

696 
tmsize_t
 
ma
,
mb
;

697 
tmsize_t
 
n
;

698 
ma
=(
tmsize_t
)
td
->
td_°rùoff£t
[
tûe
];

699 
mb
=
ma
+
size
;

700 i‡(((
uöt64
)
ma
!=
td
->
td_°rùoff£t
[
tûe
])||(ma>
tif
->
tif_size
))

701 
n
=0;

702 i‡((
mb
<
ma
)||(mb<
size
)||(mb>
tif
->
tif_size
))

703 
n
=
tif
->
tif_size
-
ma
;

705 
n
=
size
;

706 i‡(
n
!=
size
) {

707 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

708 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

710 (Ë
tif
->
tif_row
,

711 (Ë
tif
->
tif_cﬁ
,

712 (Ë
tûe
,

713 (
__öt64
Ë
n
,

714 (
__öt64
Ë
size
);

716 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

718 (Ë
tif
->
tif_row
,

719 (Ë
tif
->
tif_cﬁ
,

720 (Ë
tûe
,

721 (Ë
n
,

722 (Ë
size
);

724  ((
tmsize_t
)(-1));

726 
	`_TIFFmem˝y
(
buf
, 
tif
->
tif_ba£
 + 
ma
, 
size
);

728  (
size
);

729 
	}
}

734 
tmsize_t


735 
	$TIFFRódRawTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
, * 
buf
, 
tmsize_t
 
size
)

737 c⁄° 
moduÀ
[] = "TIFFReadRawTile";

738 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

739 
uöt64
 
byãcou¡64
;

740 
tmsize_t
 
byãcou¡m
;

742 i‡(!
	`TIFFCheckRód
(
tif
, 1))

743  ((
tmsize_t
)(-1));

744 i‡(
tûe
 >
td
->
td_n°rùs
) {

745 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

747 (Ë
tûe
, (Ë
td
->
td_n°rùs
);

748  ((
tmsize_t
)(-1));

750 i‡(
tif
->
tif_Êags
&
TIFF_NOREADRAW
)

752 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

754  ((
tmsize_t
)(-1));

756 
byãcou¡64
 = 
td
->
td_°rùbyãcou¡
[
tûe
];

757 i‡(
size
 !(
tmsize_t
)(-1Ë&& (
uöt64
)sizê< 
byãcou¡64
)

758 
byãcou¡64
 = (
uöt64
)
size
;

759 
byãcou¡m
 = (
tmsize_t
)
byãcou¡64
;

760 i‡((
uöt64
)
byãcou¡m
!=
byãcou¡64
)

762 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Integer overflow");

763  ((
tmsize_t
)(-1));

765  (
	`TIFFRódRawTûe1
(
tif
, 
tûe
, 
buf
, 
byãcou¡m
, 
moduÀ
));

766 
	}
}

773 
	$TIFFFûlTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
)

775 c⁄° 
moduÀ
[] = "TIFFFillTile";

776 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

778 i‡(!
	`_TIFFFûlSåûes
–
tif
 ) || !tif->
tif_dú
.
td_°rùbyãcou¡
)

781 i‡((
tif
->
tif_Êags
&
TIFF_NOREADRAW
)==0)

783 
uöt64
 
byãcou¡
 = 
td
->
td_°rùbyãcou¡
[
tûe
];

784 i‡(
byãcou¡
 <= 0) {

785 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

786 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

788 (
__öt64
Ë
byãcou¡
,

789 (Ë
tûe
);

791 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

793 (Ë
byãcou¡
,

794 (Ë
tûe
);

798 i‡(
	`isM≠≥d
(
tif
) &&

799 (
	`isFûlOrdî
(
tif
, 
td
->
td_fûl‹dî
)

800 || (
tif
->
tif_Êags
 & 
TIFF_NOBITREV
))) {

812 i‡((
tif
->
tif_Êags
 & 
TIFF_MYBUFFER
Ë&&Åif->
tif_øwd©a
)

813 
	`_TIFF‰ì
(
tif
->
tif_øwd©a
);

814 
tif
->
tif_Êags
 &~
TIFF_MYBUFFER
;

824 i‡(
byãcou¡
 > (
uöt64
)
tif
->
tif_size
 ||

825 
td
->
td_°rùoff£t
[
tûe
] > (
uöt64
)
tif
->
tif_size
 - 
byãcou¡
) {

826 
tif
->
tif_cuπûe
 = 
NOTILE
;

829 
tif
->
tif_øwd©asize
 = (
tmsize_t
)
byãcou¡
;

830 
tif
->
tif_øwd©a
 =

831 
tif
->
tif_ba£
 + (
tmsize_t
)
td
->
td_°rùoff£t
[
tûe
];

832 
tif
->
tif_øwd©aoff
 = 0;

833 
tif
->
tif_øwd©Æﬂded
 = (
tmsize_t
Ë
byãcou¡
;

840 
tmsize_t
 
byãcou¡m
;

841 
byãcou¡m
=(
tmsize_t
)
byãcou¡
;

842 i‡((
uöt64
)
byãcou¡m
!=
byãcou¡
)

844 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Integer overflow");

847 i‡(
byãcou¡m
 > 
tif
->
tif_øwd©asize
) {

848 
tif
->
tif_cuπûe
 = 
NOTILE
;

849 i‡((
tif
->
tif_Êags
 & 
TIFF_MYBUFFER
) == 0) {

850 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

852 (Ë
tûe
);

855 i‡(!
	`TIFFRódBuf„rSëup
(
tif
, 0, 
byãcou¡m
))

858 i‡(
	`TIFFRódRawTûe1
(
tif
, 
tûe
,Åif->
tif_øwd©a
,

859 
byãcou¡m
, 
moduÀ
) != bytecountm)

862 
tif
->
tif_øwd©aoff
 = 0;

863 
tif
->
tif_øwd©Æﬂded
 = 
byãcou¡m
;

865 i‡(!
	`isFûlOrdî
(
tif
, 
td
->
td_fûl‹dî
) &&

866 (
tif
->
tif_Êags
 & 
TIFF_NOBITREV
) == 0)

867 
	`TIFFRevî£Bôs
(
tif
->
tif_øwd©a
,

868 
tif
->
tif_øwd©Æﬂded
);

871  (
	`TIFFSèπTûe
(
tif
, 
tûe
));

872 
	}
}

884 
	$TIFFRódBuf„rSëup
(
TIFF
* 
tif
, * 
bp
, 
tmsize_t
 
size
)

886 c⁄° 
moduÀ
[] = "TIFFReadBufferSetup";

888 
	`as£π
((
tif
->
tif_Êags
&
TIFF_NOREADRAW
)==0);

889 i‡(
tif
->
tif_øwd©a
) {

890 i‡(
tif
->
tif_Êags
 & 
TIFF_MYBUFFER
)

891 
	`_TIFF‰ì
(
tif
->
tif_øwd©a
);

892 
tif
->
tif_øwd©a
 = 
NULL
;

894 i‡(
bp
) {

895 
tif
->
tif_øwd©asize
 = 
size
;

896 
tif
->
tif_øwd©a
 = (
uöt8
*Ë
bp
;

897 
tif
->
tif_Êags
 &~
TIFF_MYBUFFER
;

899 
tif
->
tif_øwd©asize
 = (
tmsize_t
)
	`TIFFroundup_64
((
uöt64
)
size
, 1024);

900 i‡(
tif
->
tif_øwd©asize
==0)

901 
tif
->
tif_øwd©asize
=(
tmsize_t
)(-1);

902 
tif
->
tif_øwd©a
 = (
uöt8
*Ë
	`_TIFFmÆloc
—if->
tif_øwd©asize
);

903 
tif
->
tif_Êags
 |
TIFF_MYBUFFER
;

905 i‡(
tif
->
tif_øwd©a
 =
NULL
) {

906 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

908 (Ë
tif
->
tif_row
);

909 
tif
->
tif_øwd©asize
 = 0;

913 
	}
}

920 
	$TIFFSèπSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
)

922 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

924 i‡(!
	`_TIFFFûlSåûes
–
tif
 ) || !tif->
tif_dú
.
td_°rùbyãcou¡
)

927 i‡((
tif
->
tif_Êags
 & 
TIFF_CODERSETUP
) == 0) {

928 i‡(!(*
tif
->
tif_£tupdecode
)(tif))

930 
tif
->
tif_Êags
 |
TIFF_CODERSETUP
;

932 
tif
->
tif_cur°rù
 = 
°rù
;

933 
tif
->
tif_row
 = (
°rù
 % 
td
->
td_°rù•îimage
Ë*Åd->
td_row•î°rù
;

934 
tif
->
tif_Êags
 &~
TIFF_BUF4WRITE
;

936 i‡(
tif
->
tif_Êags
&
TIFF_NOREADRAW
)

938 
tif
->
tif_øw˝
 = 
NULL
;

939 
tif
->
tif_øwcc
 = 0;

943 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
;

944 
tif
->
tif_øwcc
 = (
tmsize_t
)
td
->
td_°rùbyãcou¡
[
°rù
];

946  ((*
tif
->
tif_¥edecode
)(tif,

947 (
uöt16
)(
°rù
 / 
td
->
td_°rù•îimage
)));

948 
	}
}

955 
	$TIFFSèπTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
)

957 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

959 i‡(!
	`_TIFFFûlSåûes
–
tif
 ) || !tif->
tif_dú
.
td_°rùbyãcou¡
)

962 i‡((
tif
->
tif_Êags
 & 
TIFF_CODERSETUP
) == 0) {

963 i‡(!(*
tif
->
tif_£tupdecode
)(tif))

965 
tif
->
tif_Êags
 |
TIFF_CODERSETUP
;

967 
tif
->
tif_cuπûe
 = 
tûe
;

968 
tif
->
tif_row
 =

969 (
tûe
 % 
	`TIFFhowm™y_32
(
td
->
td_imagewidth
,Åd->
td_tûewidth
)) *

970 
td
->
td_tûñígth
;

971 
tif
->
tif_cﬁ
 =

972 (
tûe
 % 
	`TIFFhowm™y_32
(
td
->
td_imagñígth
,Åd->
td_tûñígth
)) *

973 
td
->
td_tûewidth
;

974 
tif
->
tif_Êags
 &~
TIFF_BUF4WRITE
;

975 i‡(
tif
->
tif_Êags
&
TIFF_NOREADRAW
)

977 
tif
->
tif_øw˝
 = 
NULL
;

978 
tif
->
tif_øwcc
 = 0;

982 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
;

983 
tif
->
tif_øwcc
 = (
tmsize_t
)
td
->
td_°rùbyãcou¡
[
tûe
];

985  ((*
tif
->
tif_¥edecode
)(tif,

986 (
uöt16
)(
tûe
/
td
->
td_°rù•îimage
)));

987 
	}
}

990 
	$TIFFCheckRód
(
TIFF
* 
tif
, 
tûes
)

992 i‡(
tif
->
tif_mode
 =
O_WRONLY
) {

993 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, "FileÇot open forÑeading");

996 i‡(
tûes
 ^ 
	`isTûed
(
tif
)) {

997 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
, 
tûes
 ?

1003 
	}
}

1006 
	$_TIFFNoPo°Decode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
)

1008 (Ë
tif
; (Ë
buf
; (Ë
cc
;

1009 
	}
}

1012 
	$_TIFFSwab16BôD©a
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
)

1014 (Ë
tif
;

1015 
	`as£π
((
cc
 & 1) == 0);

1016 
	`TIFFSwabAºayOfSh‹t
((
uöt16
*Ë
buf
, 
cc
/2);

1017 
	}
}

1020 
	$_TIFFSwab24BôD©a
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
)

1022 (Ë
tif
;

1023 
	`as£π
((
cc
 % 3) == 0);

1024 
	`TIFFSwabAºayOfTrùÀs
((
uöt8
*Ë
buf
, 
cc
/3);

1025 
	}
}

1028 
	$_TIFFSwab32BôD©a
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
)

1030 (Ë
tif
;

1031 
	`as£π
((
cc
 & 3) == 0);

1032 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*Ë
buf
, 
cc
/4);

1033 
	}
}

1036 
	$_TIFFSwab64BôD©a
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
)

1038 (Ë
tif
;

1039 
	`as£π
((
cc
 & 7) == 0);

1040 
	`TIFFSwabAºayOfDoubÀ
((*Ë
buf
, 
cc
/8);

1041 
	}
}

	@libtiff/tif_stream.cxx

30 
	~"tiffi›.h
"

31 
	~<io°ªam
>

33 #i‚de‡
__VMS


34 
usög
 
«me•a˚
 
	g°d
;

78 
	gtiffis_d©a
;

79 
	gtiffos_d©a
;

83 
tmsize_t
 
_tiffosRódProc
(
th™dÀ_t
, *,Åmsize_t);

84 
tmsize_t
 
_tiffisRódProc
(
th™dÀ_t
 
fd
, * 
buf
,Åmsize_à
size
);

85 
tmsize_t
 
_tiffosWrôeProc
(
th™dÀ_t
 
fd
, * 
buf
,Åmsize_à
size
);

86 
tmsize_t
 
_tiffisWrôeProc
(
th™dÀ_t
, *,Åmsize_t);

87 
uöt64
 
_tiffosSìkProc
(
th™dÀ_t
 
fd
, uöt64 
off
, 
whí˚
);

88 
uöt64
 
_tiffisSìkProc
(
th™dÀ_t
 
fd
, uöt64 
off
, 
whí˚
);

89 
uöt64
 
_tiffosSizeProc
(
th™dÀ_t
 
fd
);

90 
uöt64
 
_tiffisSizeProc
(
th™dÀ_t
 
fd
);

91 
_tiffosClo£Proc
(
th™dÀ_t
 
fd
);

92 
_tiffisClo£Proc
(
th™dÀ_t
 
fd
);

93 
_tiffDummyM≠Proc
(
th™dÀ_t
 , ** 
ba£
, 
toff_t
* 
size
 );

94 
_tiffDummyUnm≠Proc
(
th™dÀ_t
 , * 
ba£
, 
toff_t
 
size
 );

95 
TIFF
* 
_tiffSåómO≥n
(c⁄° * 
«me
, c⁄° * 
mode
, *
fd
);

97 
	stiffis_d©a


99 
i°ªam
 *
°ªam
;

100 
ios
::
pos_ty≥
 
°¨t_pos
;

103 
	stiffos_d©a


105 
o°ªam
 *
°ªam
;

106 
ios
::
pos_ty≥
 
°¨t_pos
;

109 
tmsize_t


110 
_tiffosRódProc
(
th™dÀ_t
, *, 
tmsize_t
)

115 
tmsize_t


116 
_tiffisRódProc
(
th™dÀ_t
 
fd
, * 
buf
, 
tmsize_t
 
size
)

118 
tiffis_d©a
 *
d©a
 = 
ªöãΩªt_ˇ°
<tiffis_d©®*>(
fd
);

121 
°ªamsize
 
ªque°_size
 = 
size
;

122 i‡(
°©ic_ˇ°
<
tmsize_t
>(
ªque°_size
Ë!
size
)

123  
°©ic_ˇ°
<
tmsize_t
>(-1);

125 
d©a
->
°ªam
->
ªad
((*Ë
buf
, 
ªque°_size
);

127  
°©ic_ˇ°
<
tmsize_t
>(
d©a
->
°ªam
->
gcou¡
());

130 
tmsize_t


131 
_tiffosWrôeProc
(
th™dÀ_t
 
fd
, * 
buf
, 
tmsize_t
 
size
)

133 
tiffos_d©a
 *
d©a
 = 
ªöãΩªt_ˇ°
<tiffos_d©®*>(
fd
);

134 
o°ªam
 *
os
 = 
d©a
->
°ªam
;

135 
ios
::
pos_ty≥
 
pos
 = 
os
->
ãŒp
();

138 
°ªamsize
 
ªque°_size
 = 
size
;

139 i‡(
°©ic_ˇ°
<
tmsize_t
>(
ªque°_size
Ë!
size
)

140  
°©ic_ˇ°
<
tmsize_t
>(-1);

142 
os
->
wrôe
(
ªöãΩªt_ˇ°
<c⁄° *>(
buf
), 
ªque°_size
);

144  
°©ic_ˇ°
<
tmsize_t
>(
os
->
ãŒp
(Ë- 
pos
);

147 
tmsize_t


148 
_tiffisWrôeProc
(
th™dÀ_t
, *, 
tmsize_t
)

153 
uöt64


154 
_tiffosSìkProc
(
th™dÀ_t
 
fd
, 
uöt64
 
off
, 
whí˚
)

156 
tiffos_d©a
 *
d©a
 = 
ªöãΩªt_ˇ°
<tiffos_d©®*>(
fd
);

157 
o°ªam
 *
os
 = 
d©a
->
°ªam
;

160 if–
os
->
Áû
() )

161  
°©ic_ˇ°
<
uöt64
>(-1);

163 
whí˚
) {

164 
SEEK_SET
:

167 
uöt64
 
√w_off£t
 = 
°©ic_ˇ°
<uöt64>(
d©a
->
°¨t_pos
Ë+ 
off
;

170 
ios
::
off_ty≥
 
off£t
 = 
°©ic_ˇ°
<ios::off_ty≥>(
√w_off£t
);

171 i‡(
°©ic_ˇ°
<
uöt64
>(
off£t
Ë!
√w_off£t
)

172  
°©ic_ˇ°
<
uöt64
>(-1);

174 
os
->
£ekp
(
off£t
, 
ios
::
beg
);

177 
SEEK_CUR
:

180 
ios
::
off_ty≥
 
off£t
 = 
°©ic_ˇ°
<ios::off_ty≥>(
off
);

181 i‡(
°©ic_ˇ°
<
uöt64
>(
off£t
Ë!
off
)

182  
°©ic_ˇ°
<
uöt64
>(-1);

184 
os
->
£ekp
(
off£t
, 
ios
::
cur
);

187 
SEEK_END
:

190 
ios
::
off_ty≥
 
off£t
 = 
°©ic_ˇ°
<ios::off_ty≥>(
off
);

191 i‡(
°©ic_ˇ°
<
uöt64
>(
off£t
Ë!
off
)

192  
°©ic_ˇ°
<
uöt64
>(-1);

194 
os
->
£ekp
(
off£t
, 
ios
::
íd
);

203 if–
os
->
Áû
() ) {

204 #ifde‡
__VMS


205 
ﬁd_°©e
;

207 
ios
::
io°©e
 
ﬁd_°©e
;

209 
ios
::
pos_ty≥
 
‹igö
;

211 
ﬁd_°©e
 = 
os
->
rd°©e
();

213 
os
->
˛ór
(os->
rd°©e
(Ë& ~
ios
::
Áûbô
);

214  
whí˚
 ) {

215 
SEEK_SET
:

217 
‹igö
 = 
d©a
->
°¨t_pos
;

219 
SEEK_CUR
:

220 
‹igö
 = 
os
->
ãŒp
();

222 
SEEK_END
:

223 
os
->
£ekp
(0, 
ios
::
íd
);

224 
‹igö
 = 
os
->
ãŒp
();

228 
os
->
˛ór
(
ﬁd_°©e
);

231 if–(
°©ic_ˇ°
<
uöt64
>(
‹igö
Ë+ 
off
Ë> sètic_ˇ°<uöt64>(
d©a
->
°¨t_pos
) ) {

232 
uöt64
 
num_fûl
;

235 
os
->
˛ór
(os->
rd°©e
(Ë& ~
ios
::
Áûbô
);

238 
os
->
£ekp
(0, 
ios
::
íd
);

239 
num_fûl
 = (
°©ic_ˇ°
<
uöt64
>(
‹igö
)Ë+ 
off
 - 
os
->
ãŒp
();

240  
uöt64
 
i
 = 0; i < 
num_fûl
; i++ )

241 
os
->
put
('\0');

244 
os
->
£ekp
(
°©ic_ˇ°
<
ios
::
off_ty≥
>(°©ic_ˇ°<
uöt64
>(
‹igö
Ë+ 
off
), ios::
beg
);

248  
°©ic_ˇ°
<
uöt64
>(
os
->
ãŒp
());

251 
uöt64


252 
_tiffisSìkProc
(
th™dÀ_t
 
fd
, 
uöt64
 
off
, 
whí˚
)

254 
tiffis_d©a
 *
d©a
 = 
ªöãΩªt_ˇ°
<tiffis_d©®*>(
fd
);

256 
whí˚
) {

257 
SEEK_SET
:

260 
uöt64
 
√w_off£t
 = 
°©ic_ˇ°
<uöt64>(
d©a
->
°¨t_pos
Ë+ 
off
;

263 
ios
::
off_ty≥
 
off£t
 = 
°©ic_ˇ°
<ios::off_ty≥>(
√w_off£t
);

264 i‡(
°©ic_ˇ°
<
uöt64
>(
off£t
Ë!
√w_off£t
)

265  
°©ic_ˇ°
<
uöt64
>(-1);

267 
d©a
->
°ªam
->
£ekg
(
off£t
, 
ios
::
beg
);

270 
SEEK_CUR
:

273 
ios
::
off_ty≥
 
off£t
 = 
°©ic_ˇ°
<ios::off_ty≥>(
off
);

274 i‡(
°©ic_ˇ°
<
uöt64
>(
off£t
Ë!
off
)

275  
°©ic_ˇ°
<
uöt64
>(-1);

277 
d©a
->
°ªam
->
£ekg
(
off£t
, 
ios
::
cur
);

280 
SEEK_END
:

283 
ios
::
off_ty≥
 
off£t
 = 
°©ic_ˇ°
<ios::off_ty≥>(
off
);

284 i‡(
°©ic_ˇ°
<
uöt64
>(
off£t
Ë!
off
)

285  
°©ic_ˇ°
<
uöt64
>(-1);

287 
d©a
->
°ªam
->
£ekg
(
off£t
, 
ios
::
íd
);

292  (
uöt64
Ë(
d©a
->
°ªam
->
ãŒg
(Ë- d©a->
°¨t_pos
);

295 
uöt64


296 
_tiffosSizeProc
(
th™dÀ_t
 
fd
)

298 
tiffos_d©a
 *
d©a
 = 
ªöãΩªt_ˇ°
<tiffos_d©®*>(
fd
);

299 
o°ªam
 *
os
 = 
d©a
->
°ªam
;

300 
ios
::
pos_ty≥
 
pos
 = 
os
->
ãŒp
();

301 
ios
::
pos_ty≥
 
Àn
;

303 
os
->
£ekp
(0, 
ios
::
íd
);

304 
Àn
 = 
os
->
ãŒp
();

305 
os
->
£ekp
(
pos
);

307  (
uöt64
Ë
Àn
;

310 
uöt64


311 
_tiffisSizeProc
(
th™dÀ_t
 
fd
)

313 
tiffis_d©a
 *
d©a
 = 
ªöãΩªt_ˇ°
<tiffis_d©®*>(
fd
);

314 
ios
::
pos_ty≥
 
pos
 = 
d©a
->
°ªam
->
ãŒg
();

315 
ios
::
pos_ty≥
 
Àn
;

317 
d©a
->
°ªam
->
£ekg
(0, 
ios
::
íd
);

318 
Àn
 = 
d©a
->
°ªam
->
ãŒg
();

319 
d©a
->
°ªam
->
£ekg
(
pos
);

321  (
uöt64
Ë
Àn
;

325 
_tiffosClo£Proc
(
th™dÀ_t
 
fd
)

328 
dñëe
 
ªöãΩªt_ˇ°
<
tiffos_d©a
 *>(
fd
);

333 
_tiffisClo£Proc
(
th™dÀ_t
 
fd
)

336 
dñëe
 
ªöãΩªt_ˇ°
<
tiffis_d©a
 *>(
fd
);

341 
_tiffDummyM≠Proc
(
th™dÀ_t
 , ** 
ba£
, 
toff_t
* 
size
 )

347 
_tiffDummyUnm≠Proc
(
th™dÀ_t
 , * 
ba£
, 
toff_t
 
size
 )

354 
TIFF
*

355 
_tiffSåómO≥n
(c⁄° * 
«me
, c⁄° * 
mode
, *
fd
)

357 
TIFF
* 
tif
;

359 if–
°rchr
(
mode
, 'w') ) {

360 
tiffos_d©a
 *
d©a
 = 
√w
Åiffos_data;

361 
d©a
->
°ªam
 = 
ªöãΩªt_ˇ°
<
o°ªam
 *>(
fd
);

362 
d©a
->
°¨t_pos
 = d©a->
°ªam
->
ãŒp
();

365 
tif
 = 
TIFFClõ¡O≥n
(
«me
, 
mode
,

366 
ªöãΩªt_ˇ°
<
th™dÀ_t
>(
d©a
),

367 
_tiffosRódProc
,

368 
_tiffosWrôeProc
,

369 
_tiffosSìkProc
,

370 
_tiffosClo£Proc
,

371 
_tiffosSizeProc
,

372 
_tiffDummyM≠Proc
,

373 
_tiffDummyUnm≠Proc
);

375 
tiffis_d©a
 *
d©a
 = 
√w
Åiffis_data;

376 
d©a
->
°ªam
 = 
ªöãΩªt_ˇ°
<
i°ªam
 *>(
fd
);

377 
d©a
->
°¨t_pos
 = d©a->
°ªam
->
ãŒg
();

379 
tif
 = 
TIFFClõ¡O≥n
(
«me
, 
mode
,

380 
ªöãΩªt_ˇ°
<
th™dÀ_t
>(
d©a
),

381 
_tiffisRódProc
,

382 
_tiffisWrôeProc
,

383 
_tiffisSìkProc
,

384 
_tiffisClo£Proc
,

385 
_tiffisSizeProc
,

386 
_tiffDummyM≠Proc
,

387 
_tiffDummyUnm≠Proc
);

390  (
tif
);

395 
TIFF
*

396 
	$TIFFSåómO≥n
(c⁄° * 
«me
, 
o°ªam
 *
os
)

402 if–!
os
->
	`Áû
(Ë&& 
°©ic_ˇ°
<>(os->
	`ãŒp
()) < 0 ) {

403 *
os
 << '\0';

404 
os
->
	`£ekp
(0);

408  
	`_tiffSåómO≥n
(
«me
, "wm", 
os
);

409 
	}
}

411 
TIFF
*

412 
	$TIFFSåómO≥n
(c⁄° * 
«me
, 
i°ªam
 *
is
)

415  
	`_tiffSåómO≥n
(
«me
, "rm", 
is
);

416 
	}
}

	@libtiff/tif_strip.c

32 
	~"tiffi›.h
"

37 
uöt32


38 
	$TIFFCompuãSåù
(
TIFF
* 
tif
, 
uöt32
 
row
, 
uöt16
 
ßm∂e
)

40 c⁄° 
moduÀ
[] = "TIFFComputeStrip";

41 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

42 
uöt32
 
°rù
;

44 
°rù
 = 
row
 / 
td
->
td_row•î°rù
;

45 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
) {

46 i‡(
ßm∂e
 >
td
->
td_ßm∂e•îpixñ
) {

47 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

49 (Ë
ßm∂e
, (Ë
td
->
td_ßm∂e•îpixñ
);

52 
°rù
 +(
uöt32
)
ßm∂e
*
td
->
td_°rù•îimage
;

54  (
°rù
);

55 
	}
}

60 
uöt32


61 
	$TIFFNumbîOfSåùs
(
TIFF
* 
tif
)

63 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

64 
uöt32
 
n°rùs
;

66 
n°rùs
 = (
td
->
td_row•î°rù
 =(
uöt32
) -1 ? 1 :

67 
	`TIFFhowm™y_32
(
td
->
td_imagñígth
,Åd->
td_row•î°rù
));

68 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
)

69 
n°rùs
 = 
	`_TIFFMu…ùly32
(
tif
,Ç°rùs, (
uöt32
)
td
->
td_ßm∂e•îpixñ
,

71  (
n°rùs
);

72 
	}
}

77 
uöt64


78 
	$TIFFVSåùSize64
(
TIFF
* 
tif
, 
uöt32
 
ƒows
)

80 c⁄° 
moduÀ
[] = "TIFFVStripSize64";

81 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

82 i‡(
ƒows
==(
uöt32
)(-1))

83 
ƒows
=
td
->
td_imagñígth
;

84 i‡((
td
->
td_∂™¨c⁄fig
==
PLANARCONFIG_CONTIG
)&&

85 (
td
->
td_phŸomëric
 =
PHOTOMETRIC_YCBCR
)&&

86 (!
	`isUpSam∂ed
(
tif
)))

96 
uöt16
 
ycb¸subßm∂ög
[2];

97 
uöt16
 
ßm∂ögblock_ßm∂es
;

98 
uöt32
 
ßm∂ögblocks_h‹
;

99 
uöt32
 
ßm∂ögblocks_vî
;

100 
uöt64
 
ßm∂ögrow_ßm∂es
;

101 
uöt64
 
ßm∂ögrow_size
;

102 if(
td
->
td_ßm∂e•îpixñ
!=3)

104 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

108 
	`TIFFGëFõldDeÁu…ed
(
tif
,
TIFFTAG_YCBCRSUBSAMPLING
,
ycb¸subßm∂ög
+0,

109 
ycb¸subßm∂ög
+1);

110 i‡(((
ycb¸subßm∂ög
[0]!=1)&&(ycbcrsubsampling[0]!=2)&&(ycbcrsubsampling[0]!=4)) ||

111 ((
ycb¸subßm∂ög
[1]!=1)&&(ycbcrsubsampling[1]!=2)&&(ycbcrsubsampling[1]!=4)))

113 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

117 
ßm∂ögblock_ßm∂es
=
ycb¸subßm∂ög
[0]*ycbcrsubsampling[1]+2;

118 
ßm∂ögblocks_h‹
=
	`TIFFhowm™y_32
(
td
->
td_imagewidth
,
ycb¸subßm∂ög
[0]);

119 
ßm∂ögblocks_vî
=
	`TIFFhowm™y_32
(
ƒows
,
ycb¸subßm∂ög
[1]);

120 
ßm∂ögrow_ßm∂es
=
	`_TIFFMu…ùly64
(
tif
,
ßm∂ögblocks_h‹
,
ßm∂ögblock_ßm∂es
,
moduÀ
);

121 
ßm∂ögrow_size
=
	`TIFFhowm™y8_64
(
	`_TIFFMu…ùly64
(
tif
,
ßm∂ögrow_ßm∂es
,
td
->
td_bô•îßm∂e
,
moduÀ
));

122 (
	`_TIFFMu…ùly64
(
tif
,
ßm∂ögrow_size
,
ßm∂ögblocks_vî
,
moduÀ
));

125 (
	`_TIFFMu…ùly64
(
tif
,
ƒows
,
	`TIFFSˇ∆öeSize64
—if),
moduÀ
));

126 
	}
}

127 
tmsize_t


128 
	$TIFFVSåùSize
(
TIFF
* 
tif
, 
uöt32
 
ƒows
)

130 c⁄° 
moduÀ
[] = "TIFFVStripSize";

131 
uöt64
 
m
;

132 
tmsize_t
 
n
;

133 
m
=
	`TIFFVSåùSize64
(
tif
,
ƒows
);

134 
n
=(
tmsize_t
)
m
;

135 i‡((
uöt64
)
n
!=
m
)

137 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Integer overflow");

138 
n
=0;

140 (
n
);

141 
	}
}

146 
uöt64


147 
	$TIFFRawSåùSize64
(
TIFF
* 
tif
, 
uöt32
 
°rù
)

149 c⁄° 
moduÀ
[] = "TIFFRawStripSize64";

150 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

151 
uöt64
 
byãcou¡
 = 
td
->
td_°rùbyãcou¡
[
°rù
];

153 i‡(
byãcou¡
 == 0)

155 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

156 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

158 (
__öt64
Ë
byãcou¡
,

159 (Ë
°rù
);

161 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

163 (Ë
byãcou¡
,

164 (Ë
°rù
);

166 
byãcou¡
 = (
uöt64
) -1;

169  
byãcou¡
;

170 
	}
}

171 
tmsize_t


172 
	$TIFFRawSåùSize
(
TIFF
* 
tif
, 
uöt32
 
°rù
)

174 c⁄° 
moduÀ
[] = "TIFFRawStripSize";

175 
uöt64
 
m
;

176 
tmsize_t
 
n
;

177 
m
=
	`TIFFRawSåùSize64
(
tif
,
°rù
);

178 i‡(
m
==(
uöt64
)(-1))

179 
n
=(
tmsize_t
)(-1);

182 
n
=(
tmsize_t
)
m
;

183 i‡((
uöt64
)
n
!=
m
)

185 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Integer overflow");

186 
n
=0;

189 (
n
);

190 
	}
}

200 
uöt64


201 
	$TIFFSåùSize64
(
TIFF
* 
tif
)

203 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

204 
uöt32
 
Ωs
 = 
td
->
td_row•î°rù
;

205 i‡(
Ωs
 > 
td
->
td_imagñígth
)

206 
Ωs
 = 
td
->
td_imagñígth
;

207  (
	`TIFFVSåùSize64
(
tif
, 
Ωs
));

208 
	}
}

209 
tmsize_t


210 
	$TIFFSåùSize
(
TIFF
* 
tif
)

212 c⁄° 
moduÀ
[] = "TIFFStripSize";

213 
uöt64
 
m
;

214 
tmsize_t
 
n
;

215 
m
=
	`TIFFSåùSize64
(
tif
);

216 
n
=(
tmsize_t
)
m
;

217 i‡((
uöt64
)
n
!=
m
)

219 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Integer overflow");

220 
n
=0;

222 (
n
);

223 
	}
}

231 
uöt32


232 
	$TIFFDeÁu…SåùSize
(
TIFF
* 
tif
, 
uöt32
 
ªque°
)

234  (*
tif
->
tif_def°rùsize
)—if, 
ªque°
);

235 
	}
}

237 
uöt32


238 
	$_TIFFDeÁu…SåùSize
(
TIFF
* 
tif
, 
uöt32
 
s
)

240 i‡((
öt32
Ë
s
 < 1) {

246 
uöt64
 
sˇ∆öesize
;

247 
uöt64
 
rows
;

248 
sˇ∆öesize
=
	`TIFFSˇ∆öeSize64
(
tif
);

249 i‡(
sˇ∆öesize
==0)

250 
sˇ∆öesize
=1;

251 
rows
=(
uöt64
)
STRIP_SIZE_DEFAULT
/
sˇ∆öesize
;

252 i‡(
rows
==0)

253 
rows
=1;

254 i‡(
rows
>0xFFFFFFFF)

255 
rows
=0xFFFFFFFF;

256 
s
=(
uöt32
)
rows
;

258  (
s
);

259 
	}
}

271 
uöt64


272 
	$TIFFSˇ∆öeSize64
(
TIFF
* 
tif
)

274 c⁄° 
moduÀ
[] = "TIFFScanlineSize64";

275 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

276 
uöt64
 
sˇ∆öe_size
;

277 i‡(
td
->
td_∂™¨c⁄fig
==
PLANARCONFIG_CONTIG
)

279 i‡((
td
->
td_phŸomëric
==
PHOTOMETRIC_YCBCR
)&&

280 (
td
->
td_ßm∂e•îpixñ
==3)&&

281 (!
	`isUpSam∂ed
(
tif
)))

283 
uöt16
 
ycb¸subßm∂ög
[2];

284 
uöt16
 
ßm∂ögblock_ßm∂es
;

285 
uöt32
 
ßm∂ögblocks_h‹
;

286 
uöt64
 
ßm∂ögrow_ßm∂es
;

287 
uöt64
 
ßm∂ögrow_size
;

288 if(
td
->
td_ßm∂e•îpixñ
!=3)

290 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

294 
	`TIFFGëFõldDeÁu…ed
(
tif
,
TIFFTAG_YCBCRSUBSAMPLING
,

295 
ycb¸subßm∂ög
+0,

296 
ycb¸subßm∂ög
+1);

297 i‡(((
ycb¸subßm∂ög
[0]!=1)&&(ycbcrsubsampling[0]!=2)&&(ycbcrsubsampling[0]!=4)) ||

298 ((
ycb¸subßm∂ög
[1]!=1)&&(ycbcrsubsampling[1]!=2)&&(ycbcrsubsampling[1]!=4)))

300 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

304 
ßm∂ögblock_ßm∂es
 = 
ycb¸subßm∂ög
[0]*ycbcrsubsampling[1]+2;

305 
ßm∂ögblocks_h‹
 = 
	`TIFFhowm™y_32
(
td
->
td_imagewidth
,
ycb¸subßm∂ög
[0]);

306 
ßm∂ögrow_ßm∂es
 = 
	`_TIFFMu…ùly64
(
tif
,
ßm∂ögblocks_h‹
,
ßm∂ögblock_ßm∂es
,
moduÀ
);

307 
ßm∂ögrow_size
 = 
	`TIFFhowm™y_64
(
	`_TIFFMu…ùly64
(
tif
,
ßm∂ögrow_ßm∂es
,
td
->
td_bô•îßm∂e
,
moduÀ
),8);

308 
sˇ∆öe_size
 = (
ßm∂ögrow_size
/
ycb¸subßm∂ög
[1]);

312 
uöt64
 
sˇ∆öe_ßm∂es
;

313 
sˇ∆öe_ßm∂es
=
	`_TIFFMu…ùly64
(
tif
,
td
->
td_imagewidth
,td->
td_ßm∂e•îpixñ
,
moduÀ
);

314 
sˇ∆öe_size
=
	`TIFFhowm™y_64
(
	`_TIFFMu…ùly64
(
tif
,
sˇ∆öe_ßm∂es
,
td
->
td_bô•îßm∂e
,
moduÀ
),8);

318 
sˇ∆öe_size
=
	`TIFFhowm™y_64
(
	`_TIFFMu…ùly64
(
tif
,
td
->
td_imagewidth
,td->
td_bô•îßm∂e
,
moduÀ
),8);

319 (
sˇ∆öe_size
);

320 
	}
}

321 
tmsize_t


322 
	$TIFFSˇ∆öeSize
(
TIFF
* 
tif
)

324 c⁄° 
moduÀ
[] = "TIFFScanlineSize";

325 
uöt64
 
m
;

326 
tmsize_t
 
n
;

327 
m
=
	`TIFFSˇ∆öeSize64
(
tif
);

328 
n
=(
tmsize_t
)
m
;

329 i‡((
uöt64
)
n
!=
m
)

331 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Integerárithmetic overflow");

332 
n
=0;

334 (
n
);

335 
	}
}

343 
uöt64


344 
	$TIFFRa°îSˇ∆öeSize64
(
TIFF
* 
tif
)

346 c⁄° 
moduÀ
[] = "TIFFRasterScanlineSize64";

347 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

348 
uöt64
 
sˇ∆öe
;

350 
sˇ∆öe
 = 
	`_TIFFMu…ùly64
(
tif
, 
td
->
td_bô•îßm∂e
,Åd->
td_imagewidth
, 
moduÀ
);

351 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
) {

352 
sˇ∆öe
 = 
	`_TIFFMu…ùly64
(
tif
, sˇ∆öe, 
td
->
td_ßm∂e•îpixñ
, 
moduÀ
);

353  (
	`TIFFhowm™y8_64
(
sˇ∆öe
));

355  (
	`_TIFFMu…ùly64
(
tif
, 
	`TIFFhowm™y8_64
(
sˇ∆öe
),

356 
td
->
td_ßm∂e•îpixñ
, 
moduÀ
));

357 
	}
}

358 
tmsize_t


359 
	$TIFFRa°îSˇ∆öeSize
(
TIFF
* 
tif
)

361 c⁄° 
moduÀ
[] = "TIFFRasterScanlineSize";

362 
uöt64
 
m
;

363 
tmsize_t
 
n
;

364 
m
=
	`TIFFRa°îSˇ∆öeSize64
(
tif
);

365 
n
=(
tmsize_t
)
m
;

366 i‡((
uöt64
)
n
!=
m
)

368 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Integerárithmetic overflow");

369 
n
=0;

371 (
n
);

372 
	}
}

	@libtiff/tif_swab.c

32 
	~"tiffi›.h
"

34 #i‚de‡
TIFFSwabSh‹t


36 
	$TIFFSwabSh‹t
(
uöt16
* 
wp
)

38 * 
˝
 = (*Ë
wp
;

39 
t
;

40 
	`as£π
((
uöt16
)==2);

41 
t
 = 
˝
[1]; cp[1] = cp[0]; cp[0] =Å;

42 
	}
}

45 #i‚de‡
TIFFSwabL⁄g


47 
	$TIFFSwabL⁄g
(
uöt32
* 
Õ
)

49 * 
˝
 = (*Ë
Õ
;

50 
t
;

51 
	`as£π
((
uöt32
)==4);

52 
t
 = 
˝
[3]; cp[3] = cp[0]; cp[0] =Å;

53 
t
 = 
˝
[2]; cp[2] = cp[1]; cp[1] =Å;

54 
	}
}

57 #i‚de‡
TIFFSwabL⁄g8


59 
	$TIFFSwabL⁄g8
(
uöt64
* 
Õ
)

61 * 
˝
 = (*Ë
Õ
;

62 
t
;

63 
	`as£π
((
uöt64
)==8);

64 
t
 = 
˝
[7]; cp[7] = cp[0]; cp[0] =Å;

65 
t
 = 
˝
[6]; cp[6] = cp[1]; cp[1] =Å;

66 
t
 = 
˝
[5]; cp[5] = cp[2]; cp[2] =Å;

67 
t
 = 
˝
[4]; cp[4] = cp[3]; cp[3] =Å;

68 
	}
}

71 #i‚de‡
TIFFSwabAºayOfSh‹t


73 
	$TIFFSwabAºayOfSh‹t
(
uöt16
* 
wp
, 
tmsize_t
 
n
)

75 * 
˝
;

76 
t
;

77 
	`as£π
((
uöt16
)==2);

79 
n
-- > 0) {

80 
˝
 = (*Ë
wp
;

81 
t
 = 
˝
[1]; cp[1] = cp[0]; cp[0] =Å;

82 
wp
++;

84 
	}
}

87 #i‚de‡
TIFFSwabAºayOfTrùÀs


89 
	$TIFFSwabAºayOfTrùÀs
(
uöt8
* 
ç
, 
tmsize_t
 
n
)

91 * 
˝
;

92 
t
;

95 
n
-- > 0) {

96 
˝
 = (*Ë
ç
;

97 
t
 = 
˝
[2]; cp[2] = cp[0]; cp[0] =Å;

98 
ç
 += 3;

100 
	}
}

103 #i‚de‡
TIFFSwabAºayOfL⁄g


105 
	$TIFFSwabAºayOfL⁄g
(
uöt32
* 
Õ
, 
tmsize_t
 
n
)

107 *
˝
;

108 
t
;

109 
	`as£π
((
uöt32
)==4);

111 
n
-- > 0) {

112 
˝
 = (*)
Õ
;

113 
t
 = 
˝
[3]; cp[3] = cp[0]; cp[0] =Å;

114 
t
 = 
˝
[2]; cp[2] = cp[1]; cp[1] =Å;

115 
Õ
++;

117 
	}
}

120 #i‚de‡
TIFFSwabAºayOfL⁄g8


122 
	$TIFFSwabAºayOfL⁄g8
(
uöt64
* 
Õ
, 
tmsize_t
 
n
)

124 *
˝
;

125 
t
;

126 
	`as£π
((
uöt64
)==8);

128 
n
-- > 0) {

129 
˝
 = (*)
Õ
;

130 
t
 = 
˝
[7]; cp[7] = cp[0]; cp[0] =Å;

131 
t
 = 
˝
[6]; cp[6] = cp[1]; cp[1] =Å;

132 
t
 = 
˝
[5]; cp[5] = cp[2]; cp[2] =Å;

133 
t
 = 
˝
[4]; cp[4] = cp[3]; cp[3] =Å;

134 
Õ
++;

136 
	}
}

139 #i‚de‡
TIFFSwabFlﬂt


141 
	$TIFFSwabFlﬂt
(* 
Â
)

143 * 
˝
 = (*Ë
Â
;

144 
t
;

145 
	`as£π
(()==4);

146 
t
 = 
˝
[3]; cp[3] = cp[0]; cp[0] =Å;

147 
t
 = 
˝
[2]; cp[2] = cp[1]; cp[1] =Å;

148 
	}
}

151 #i‚de‡
TIFFSwabAºayOfFlﬂt


153 
	$TIFFSwabAºayOfFlﬂt
(* 
Â
, 
tmsize_t
 
n
)

155 *
˝
;

156 
t
;

157 
	`as£π
(()==4);

159 
n
-- > 0) {

160 
˝
 = (*)
Â
;

161 
t
 = 
˝
[3]; cp[3] = cp[0]; cp[0] =Å;

162 
t
 = 
˝
[2]; cp[2] = cp[1]; cp[1] =Å;

163 
Â
++;

165 
	}
}

168 #i‚de‡
TIFFSwabDoubÀ


170 
	$TIFFSwabDoubÀ
(*
dp
)

172 * 
˝
 = (*Ë
dp
;

173 
t
;

174 
	`as£π
(()==8);

175 
t
 = 
˝
[7]; cp[7] = cp[0]; cp[0] =Å;

176 
t
 = 
˝
[6]; cp[6] = cp[1]; cp[1] =Å;

177 
t
 = 
˝
[5]; cp[5] = cp[2]; cp[2] =Å;

178 
t
 = 
˝
[4]; cp[4] = cp[3]; cp[3] =Å;

179 
	}
}

182 #i‚de‡
TIFFSwabAºayOfDoubÀ


184 
	$TIFFSwabAºayOfDoubÀ
(* 
dp
, 
tmsize_t
 
n
)

186 *
˝
;

187 
t
;

188 
	`as£π
(()==8);

190 
n
-- > 0) {

191 
˝
 = (*)
dp
;

192 
t
 = 
˝
[7]; cp[7] = cp[0]; cp[0] =Å;

193 
t
 = 
˝
[6]; cp[6] = cp[1]; cp[1] =Å;

194 
t
 = 
˝
[5]; cp[5] = cp[2]; cp[2] =Å;

195 
t
 = 
˝
[4]; cp[4] = cp[3]; cp[3] =Å;

196 
dp
++;

198 
	}
}

210 c⁄° 
	gTIFFBôRevTabÀ
[256] = {

244 c⁄° 
	gTIFFNoBôRevTabÀ
[256] = {

280 
	$TIFFGëBôRevTabÀ
(
ªvî£d
)

282  (
ªvî£d
 ? 
TIFFBôRevTabÀ
 : 
TIFFNoBôRevTabÀ
);

283 
	}
}

286 
	$TIFFRevî£Bôs
(
uöt8
* 
˝
, 
tmsize_t
 
n
)

288 ; 
n
 > 8;Ç -= 8) {

289 
˝
[0] = 
TIFFBôRevTabÀ
[cp[0]];

290 
˝
[1] = 
TIFFBôRevTabÀ
[cp[1]];

291 
˝
[2] = 
TIFFBôRevTabÀ
[cp[2]];

292 
˝
[3] = 
TIFFBôRevTabÀ
[cp[3]];

293 
˝
[4] = 
TIFFBôRevTabÀ
[cp[4]];

294 
˝
[5] = 
TIFFBôRevTabÀ
[cp[5]];

295 
˝
[6] = 
TIFFBôRevTabÀ
[cp[6]];

296 
˝
[7] = 
TIFFBôRevTabÀ
[cp[7]];

297 
˝
 += 8;

299 
n
-- > 0)

300 *
˝
 = 
TIFFBôRevTabÀ
[*cp], cp++;

301 
	}
}

	@libtiff/tif_thunder.c

27 
	~"tiffi›.h
"

28 
	~<as£π.h
>

29 #ifde‡
THUNDER_SUPPORT


46 
	#THUNDER_DATA
 0x3‡

	)

47 
	#THUNDER_CODE
 0xc0

	)

49 
	#THUNDER_RUN
 0x00

	)

50 
	#THUNDER_2BITDELTAS
 0x40

	)

51 
	#DELTA2_SKIP
 2

	)

52 
	#THUNDER_3BITDELTAS
 0x80

	)

53 
	#DELTA3_SKIP
 4

	)

54 
	#THUNDER_RAW
 0xc0

	)

56 c⁄° 
	gtwobôdñès
[4] = { 0, 1, 0, -1 };

57 c⁄° 
	gthªebôdñès
[8] = { 0, 1, 2, 3, 0, -3, -2, -1 };

59 
	#SETPIXEL
(
›
, 
v
) { \

60 
œ°pixñ
 = (
v
) & 0xf; \

61 i‡–
≈ixñs
 < 
maxpixñs
 ) \

63 i‡(
≈ixñs
++ & 1) \

64 *
›
++ |
œ°pixñ
; \

66 
›
[0] = (
uöt8
Ë(
œ°pixñ
 << 4); \

68 }

	)

71 
	$ThundîSëupDecode
(
TIFF
* 
tif
)

73 c⁄° 
moduÀ
[] = "ThunderSetupDecode";

75 if–
tif
->
tif_dú
.
td_bô•îßm∂e
 != 4 )

77 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

79 (Ë
tif
->
tif_dú
.
td_bô•îßm∂e
 );

85 
	}
}

88 
	$ThundîDecode
(
TIFF
* 
tif
, 
uöt8
* 
›
, 
tmsize_t
 
maxpixñs
)

90 c⁄° 
moduÀ
[] = "ThunderDecode";

91 *
bp
;

92 
tmsize_t
 
cc
;

93 
œ°pixñ
;

94 
tmsize_t
 
≈ixñs
;

96 
bp
 = (*)
tif
->
tif_øw˝
;

97 
cc
 = 
tif
->
tif_øwcc
;

98 
œ°pixñ
 = 0;

99 
≈ixñs
 = 0;

100 
cc
 > 0 && 
≈ixñs
 < 
maxpixñs
) {

101 
n
, 
dñè
;

103 
n
 = *
bp
++, 
cc
--;

104 
n
 & 
THUNDER_CODE
) {

105 
THUNDER_RUN
:

110 i‡(
≈ixñs
 & 1) {

111 
›
[0] |
œ°pixñ
;

112 
œ°pixñ
 = *
›
++; 
≈ixñs
++; 
n
--;

114 
œ°pixñ
 |=Üastpixel << 4;

115 
≈ixñs
 +
n
;

116 i‡(
≈ixñs
 < 
maxpixñs
) {

117 ; 
n
 > 0;Ç -= 2)

118 *
›
++ = (
uöt8
Ë
œ°pixñ
;

120 i‡(
n
 == -1)

121 *--
›
 &= 0xf0;

122 
œ°pixñ
 &= 0xf;

124 
THUNDER_2BITDELTAS
:

125 i‡((
dñè
 = ((
n
 >> 4Ë& 3)Ë!
DELTA2_SKIP
)

126 
	`SETPIXEL
(
›
, 
œ°pixñ
 + 
twobôdñès
[
dñè
]);

127 i‡((
dñè
 = ((
n
 >> 2Ë& 3)Ë!
DELTA2_SKIP
)

128 
	`SETPIXEL
(
›
, 
œ°pixñ
 + 
twobôdñès
[
dñè
]);

129 i‡((
dñè
 = (
n
 & 3)Ë!
DELTA2_SKIP
)

130 
	`SETPIXEL
(
›
, 
œ°pixñ
 + 
twobôdñès
[
dñè
]);

132 
THUNDER_3BITDELTAS
:

133 i‡((
dñè
 = ((
n
 >> 3Ë& 7)Ë!
DELTA3_SKIP
)

134 
	`SETPIXEL
(
›
, 
œ°pixñ
 + 
thªebôdñès
[
dñè
]);

135 i‡((
dñè
 = (
n
 & 7)Ë!
DELTA3_SKIP
)

136 
	`SETPIXEL
(
›
, 
œ°pixñ
 + 
thªebôdñès
[
dñè
]);

138 
THUNDER_RAW
:

139 
	`SETPIXEL
(
›
, 
n
);

143 
tif
->
tif_øw˝
 = (
uöt8
*Ë
bp
;

144 
tif
->
tif_øwcc
 = 
cc
;

145 i‡(
≈ixñs
 !
maxpixñs
) {

146 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

147 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

149 
≈ixñs
 < 
maxpixñs
 ? "NotÉnough" : "Too much",

150 (Ë
tif
->
tif_row
,

151 (
__öt64
Ë
≈ixñs
,

152 (
__öt64
Ë
maxpixñs
);

154 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

156 
≈ixñs
 < 
maxpixñs
 ? "NotÉnough" : "Too much",

157 (Ë
tif
->
tif_row
,

158 (Ë
≈ixñs
,

159 (Ë
maxpixñs
);

165 
	}
}

168 
	$ThundîDecodeRow
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

170 c⁄° 
moduÀ
[] = "ThunderDecodeRow";

171 
uöt8
* 
row
 = 
buf
;

173 (Ë
s
;

174 i‡(
occ
 % 
tif
->
tif_sˇ∆öesize
)

176 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Fractional scanlines cannot beÑead");

179 
occ
 > 0) {

180 i‡(!
	`ThundîDecode
(
tif
, 
row
,Åif->
tif_dú
.
td_imagewidth
))

182 
occ
 -
tif
->
tif_sˇ∆öesize
;

183 
row
 +
tif
->
tif_sˇ∆öesize
;

186 
	}
}

189 
	$TIFFInôThundîSˇn
(
TIFF
* 
tif
, 
scheme
)

191 (Ë
scheme
;

193 
tif
->
tif_£tupdecode
 = 
ThundîSëupDecode
;

194 
tif
->
tif_decodîow
 = 
ThundîDecodeRow
;

195 
tif
->
tif_decode°rù
 = 
ThundîDecodeRow
;

197 
	}
}

	@libtiff/tif_tile.c

32 
	~"tiffi›.h
"

37 
uöt32


38 
	$TIFFCompuãTûe
(
TIFF
* 
tif
, 
uöt32
 
x
, uöt32 
y
, uöt32 
z
, 
uöt16
 
s
)

40 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

41 
uöt32
 
dx
 = 
td
->
td_tûewidth
;

42 
uöt32
 
dy
 = 
td
->
td_tûñígth
;

43 
uöt32
 
dz
 = 
td
->
td_tûedïth
;

44 
uöt32
 
tûe
 = 1;

46 i‡(
td
->
td_imagedïth
 == 1)

47 
z
 = 0;

48 i‡(
dx
 =(
uöt32
) -1)

49 
dx
 = 
td
->
td_imagewidth
;

50 i‡(
dy
 =(
uöt32
) -1)

51 
dy
 = 
td
->
td_imagñígth
;

52 i‡(
dz
 =(
uöt32
) -1)

53 
dz
 = 
td
->
td_imagedïth
;

54 i‡(
dx
 !0 && 
dy
 !0 && 
dz
 != 0) {

55 
uöt32
 
x±
 = 
	`TIFFhowm™y_32
(
td
->
td_imagewidth
, 
dx
);

56 
uöt32
 
y±
 = 
	`TIFFhowm™y_32
(
td
->
td_imagñígth
, 
dy
);

57 
uöt32
 
z±
 = 
	`TIFFhowm™y_32
(
td
->
td_imagedïth
, 
dz
);

59 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
)

60 
tûe
 = (
x±
*
y±
*
z±
)*
s
 +

61 (
x±
*
y±
)*(
z
/
dz
) +

62 
x±
*(
y
/
dy
) +

63 
x
/
dx
;

65 
tûe
 = (
x±
*
y±
)*(
z
/
dz
Ë+ x±*(
y
/
dy
Ë+ 
x
/
dx
;

67  (
tûe
);

68 
	}
}

75 
	$TIFFCheckTûe
(
TIFF
* 
tif
, 
uöt32
 
x
, uöt32 
y
, uöt32 
z
, 
uöt16
 
s
)

77 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

79 i‡(
x
 >
td
->
td_imagewidth
) {

80 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

82 (Ë
x
,

83 (Ë(
td
->
td_imagewidth
 - 1));

86 i‡(
y
 >
td
->
td_imagñígth
) {

87 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

89 (Ë
y
,

90 (Ë(
td
->
td_imagñígth
 - 1));

93 i‡(
z
 >
td
->
td_imagedïth
) {

94 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

96 (Ë
z
,

97 (Ë(
td
->
td_imagedïth
 - 1));

100 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
 &&

101 
s
 >
td
->
td_ßm∂e•îpixñ
) {

102 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,Åif->
tif_«me
,

104 (Ë
s
,

105 (Ë(
td
->
td_ßm∂e•îpixñ
 - 1));

109 
	}
}

114 
uöt32


115 
	$TIFFNumbîOfTûes
(
TIFF
* 
tif
)

117 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

118 
uöt32
 
dx
 = 
td
->
td_tûewidth
;

119 
uöt32
 
dy
 = 
td
->
td_tûñígth
;

120 
uöt32
 
dz
 = 
td
->
td_tûedïth
;

121 
uöt32
 
¡ûes
;

123 i‡(
dx
 =(
uöt32
) -1)

124 
dx
 = 
td
->
td_imagewidth
;

125 i‡(
dy
 =(
uöt32
) -1)

126 
dy
 = 
td
->
td_imagñígth
;

127 i‡(
dz
 =(
uöt32
) -1)

128 
dz
 = 
td
->
td_imagedïth
;

129 
¡ûes
 = (
dx
 =0 || 
dy
 =0 || 
dz
 == 0) ? 0 :

130 
	`_TIFFMu…ùly32
(
tif
, _TIFFMu…ùly32—if, 
	`TIFFhowm™y_32
(
td
->
td_imagewidth
, 
dx
),

131 
	`TIFFhowm™y_32
(
td
->
td_imagñígth
, 
dy
),

133 
	`TIFFhowm™y_32
(
td
->
td_imagedïth
, 
dz
), "TIFFNumberOfTiles");

134 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
)

135 
¡ûes
 = 
	`_TIFFMu…ùly32
(
tif
,Çtûes, 
td
->
td_ßm∂e•îpixñ
,

137  (
¡ûes
);

138 
	}
}

143 
uöt64


144 
	$TIFFTûeRowSize64
(
TIFF
* 
tif
)

146 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

147 
uöt64
 
rowsize
;

149 i‡(
td
->
td_tûñígth
 =0 ||Åd->
td_tûewidth
 == 0)

151 
rowsize
 = 
	`_TIFFMu…ùly64
(
tif
, 
td
->
td_bô•îßm∂e
,Åd->
td_tûewidth
,

153 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
)

154 
rowsize
 = 
	`_TIFFMu…ùly64
(
tif
,Ñowsize, 
td
->
td_ßm∂e•îpixñ
,

156  (
	`TIFFhowm™y8_64
(
rowsize
));

157 
	}
}

158 
tmsize_t


159 
	$TIFFTûeRowSize
(
TIFF
* 
tif
)

161 c⁄° 
moduÀ
[] = "TIFFTileRowSize";

162 
uöt64
 
m
;

163 
tmsize_t
 
n
;

164 
m
=
	`TIFFTûeRowSize64
(
tif
);

165 
n
=(
tmsize_t
)
m
;

166 i‡((
uöt64
)
n
!=
m
)

168 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Integer overflow");

169 
n
=0;

171 (
n
);

172 
	}
}

177 
uöt64


178 
	$TIFFVTûeSize64
(
TIFF
* 
tif
, 
uöt32
 
ƒows
)

180 c⁄° 
moduÀ
[] = "TIFFVTileSize64";

181 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

182 i‡(
td
->
td_tûñígth
 =0 ||Åd->
td_tûewidth
 == 0 ||

183 
td
->
td_tûedïth
 == 0)

185 i‡((
td
->
td_∂™¨c⁄fig
==
PLANARCONFIG_CONTIG
)&&

186 (
td
->
td_phŸomëric
==
PHOTOMETRIC_YCBCR
)&&

187 (
td
->
td_ßm∂e•îpixñ
==3)&&

188 (!
	`isUpSam∂ed
(
tif
)))

198 
uöt16
 
ycb¸subßm∂ög
[2];

199 
uöt16
 
ßm∂ögblock_ßm∂es
;

200 
uöt32
 
ßm∂ögblocks_h‹
;

201 
uöt32
 
ßm∂ögblocks_vî
;

202 
uöt64
 
ßm∂ögrow_ßm∂es
;

203 
uöt64
 
ßm∂ögrow_size
;

204 
	`TIFFGëFõldDeÁu…ed
(
tif
,
TIFFTAG_YCBCRSUBSAMPLING
,
ycb¸subßm∂ög
+0,

205 
ycb¸subßm∂ög
+1);

206 
	`as£π
((
ycb¸subßm∂ög
[0]==1)||(ycbcrsubsampling[0]==2)||(ycbcrsubsampling[0]==4));

207 
	`as£π
((
ycb¸subßm∂ög
[1]==1)||(ycbcrsubsampling[1]==2)||(ycbcrsubsampling[1]==4));

208 i‡(
ycb¸subßm∂ög
[0]*ycbcrsubsampling[1]==0)

210 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,

214 
ßm∂ögblock_ßm∂es
=
ycb¸subßm∂ög
[0]*ycbcrsubsampling[1]+2;

215 
ßm∂ögblocks_h‹
=
	`TIFFhowm™y_32
(
td
->
td_tûewidth
,
ycb¸subßm∂ög
[0]);

216 
ßm∂ögblocks_vî
=
	`TIFFhowm™y_32
(
ƒows
,
ycb¸subßm∂ög
[1]);

217 
ßm∂ögrow_ßm∂es
=
	`_TIFFMu…ùly64
(
tif
,
ßm∂ögblocks_h‹
,
ßm∂ögblock_ßm∂es
,
moduÀ
);

218 
ßm∂ögrow_size
=
	`TIFFhowm™y8_64
(
	`_TIFFMu…ùly64
(
tif
,
ßm∂ögrow_ßm∂es
,
td
->
td_bô•îßm∂e
,
moduÀ
));

219 (
	`_TIFFMu…ùly64
(
tif
,
ßm∂ögrow_size
,
ßm∂ögblocks_vî
,
moduÀ
));

222 (
	`_TIFFMu…ùly64
(
tif
,
ƒows
,
	`TIFFTûeRowSize64
—if),
moduÀ
));

223 
	}
}

224 
tmsize_t


225 
	$TIFFVTûeSize
(
TIFF
* 
tif
, 
uöt32
 
ƒows
)

227 c⁄° 
moduÀ
[] = "TIFFVTileSize";

228 
uöt64
 
m
;

229 
tmsize_t
 
n
;

230 
m
=
	`TIFFVTûeSize64
(
tif
,
ƒows
);

231 
n
=(
tmsize_t
)
m
;

232 i‡((
uöt64
)
n
!=
m
)

234 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Integer overflow");

235 
n
=0;

237 (
n
);

238 
	}
}

243 
uöt64


244 
	$TIFFTûeSize64
(
TIFF
* 
tif
)

246  (
	`TIFFVTûeSize64
(
tif
,Åif->
tif_dú
.
td_tûñígth
));

247 
	}
}

248 
tmsize_t


249 
	$TIFFTûeSize
(
TIFF
* 
tif
)

251 c⁄° 
moduÀ
[] = "TIFFTileSize";

252 
uöt64
 
m
;

253 
tmsize_t
 
n
;

254 
m
=
	`TIFFTûeSize64
(
tif
);

255 
n
=(
tmsize_t
)
m
;

256 i‡((
uöt64
)
n
!=
m
)

258 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
,
moduÀ
,"Integer overflow");

259 
n
=0;

261 (
n
);

262 
	}
}

271 
	$TIFFDeÁu…TûeSize
(
TIFF
* 
tif
, 
uöt32
* 
tw
, uöt32* 
th
)

273 (*
tif
->
tif_de·ûesize
)—if, 
tw
, 
th
);

274 
	}
}

277 
	$_TIFFDeÁu…TûeSize
(
TIFF
* 
tif
, 
uöt32
* 
tw
, uöt32* 
th
)

279 (Ë
tif
;

280 i‡(*(
öt32
*Ë
tw
 < 1)

281 *
tw
 = 256;

282 i‡(*(
öt32
*Ë
th
 < 1)

283 *
th
 = 256;

285 i‡(*
tw
 & 0xf)

286 *
tw
 = 
	`TIFFroundup_32
(*tw, 16);

287 i‡(*
th
 & 0xf)

288 *
th
 = 
	`TIFFroundup_32
(*th, 16);

289 
	}
}

	@libtiff/tif_unix.c

32 
	~"tif_c⁄fig.h
"

34 #ifde‡
HAVE_SYS_TYPES_H


35 
	~<sys/ty≥s.h
>

38 
	~<î∫o.h
>

40 
	~<°d¨g.h
>

41 
	~<°dlib.h
>

42 
	~<sys/°©.h
>

44 #ifde‡
HAVE_UNISTD_H


45 
	~<uni°d.h
>

48 #ifde‡
HAVE_FCNTL_H


49 
	~<f˙é.h
>

52 #ifde‡
HAVE_IO_H


53 
	~<io.h
>

56 
	~"tiffi›.h
"

58 
tmsize_t


59 
	$_tiffRódProc
(
th™dÀ_t
 
fd
, * 
buf
, 
tmsize_t
 
size
)

61 
size_t
 
size_io
 = (size_tË
size
;

62 i‡((
tmsize_t
Ë
size_io
 !
size
)

64 
î∫o
=
EINVAL
;

65  (
tmsize_t
) -1;

67  ((
tmsize_t
Ë
	`ªad
((Ë
fd
, 
buf
, 
size_io
));

68 
	}
}

70 
tmsize_t


71 
	$_tiffWrôeProc
(
th™dÀ_t
 
fd
, * 
buf
, 
tmsize_t
 
size
)

73 
size_t
 
size_io
 = (size_tË
size
;

74 i‡((
tmsize_t
Ë
size_io
 !
size
)

76 
î∫o
=
EINVAL
;

77  (
tmsize_t
) -1;

79  ((
tmsize_t
Ë
	`wrôe
((Ë
fd
, 
buf
, 
size_io
));

80 
	}
}

82 
uöt64


83 
	$_tiffSìkProc
(
th™dÀ_t
 
fd
, 
uöt64
 
off
, 
whí˚
)

85 
off_t
 
off_io
 = (off_tË
off
;

86 i‡((
uöt64
Ë
off_io
 !
off
)

88 
î∫o
=
EINVAL
;

89  (
uöt64
) -1;

91 ((
uöt64
)
	`l£ek
(()
fd
,
off_io
,
whí˚
));

92 
	}
}

95 
	$_tiffClo£Proc
(
th™dÀ_t
 
fd
)

97 (
	`˛o£
(()
fd
));

98 
	}
}

100 
uöt64


101 
	$_tiffSizeProc
(
th™dÀ_t
 
fd
)

103 
°©
 
sb
;

104 i‡(
	`f°©
(()
fd
,&
sb
)<0)

107 ((
uöt64
)
sb
.
°_size
);

108 
	}
}

110 #ifde‡
HAVE_MMAP


111 
	~<sys/mm™.h
>

114 
	$_tiffM≠Proc
(
th™dÀ_t
 
fd
, ** 
pba£
, 
toff_t
* 
psize
)

116 
uöt64
 
size64
 = 
	`_tiffSizeProc
(
fd
);

117 
tmsize_t
 
sizem
 = (tmsize_t)
size64
;

118 i‡((
uöt64
)
sizem
==
size64
) {

119 *
pba£
 = (*)

120 
	`mm≠
(0, (
size_t
)
sizem
, 
PROT_READ
, 
MAP_SHARED
, (Ë
fd
, 0);

121 i‡(*
pba£
 != (*) -1) {

122 *
psize
 = (
tmsize_t
)
sizem
;

127 
	}
}

130 
	$_tiffUnm≠Proc
(
th™dÀ_t
 
fd
, * 
ba£
, 
toff_t
 
size
)

132 (Ë
fd
;

133 (Ë
	`munm≠
(
ba£
, (
off_t
Ë
size
);

134 
	}
}

137 
	$_tiffM≠Proc
(
th™dÀ_t
 
fd
, ** 
pba£
, 
toff_t
* 
psize
)

139 (Ë
fd
; (Ë
pba£
; (Ë
psize
;

141 
	}
}

144 
	$_tiffUnm≠Proc
(
th™dÀ_t
 
fd
, * 
ba£
, 
toff_t
 
size
)

146 (Ë
fd
; (Ë
ba£
; (Ë
size
;

147 
	}
}

153 
TIFF
*

154 
	$TIFFFdO≥n
(
fd
, c⁄° * 
«me
, c⁄° * 
mode
)

156 
TIFF
* 
tif
;

158 
tif
 = 
	`TIFFClõ¡O≥n
(
«me
, 
mode
,

159 (
th™dÀ_t
Ë
fd
,

160 
_tiffRódProc
, 
_tiffWrôeProc
,

161 
_tiffSìkProc
, 
_tiffClo£Proc
, 
_tiffSizeProc
,

162 
_tiffM≠Proc
, 
_tiffUnm≠Proc
);

163 i‡(
tif
)

164 
tif
->
tif_fd
 = 
fd
;

165  (
tif
);

166 
	}
}

171 
TIFF
*

172 
	$TIFFO≥n
(c⁄° * 
«me
, c⁄° * 
mode
)

174 c⁄° 
moduÀ
[] = "TIFFOpen";

175 
m
, 
fd
;

176 
TIFF
* 
tif
;

178 
m
 = 
	`_TIFFgëMode
(
mode
, 
moduÀ
);

179 i‡(
m
 == -1)

180  ((
TIFF
*)0);

183 #ifde‡
O_BINARY


184 
m
 |
O_BINARY
;

187 
fd
 = 
	`›í
(
«me
, 
m
, 0666);

188 i‡(
fd
 < 0) {

189 
	`TIFFEº‹Ext
(0, 
moduÀ
, "%s: C™nŸ o≥n", 
«me
);

190  ((
TIFF
 *)0);

193 
tif
 = 
	`TIFFFdO≥n
(()
fd
, 
«me
, 
mode
);

194 if(!
tif
)

195 
	`˛o£
(
fd
);

196  
tif
;

197 
	}
}

199 #ifde‡
__WIN32__


200 
	~<wödows.h
>

204 
TIFF
*

205 
	$TIFFO≥nW
(c⁄° 
wch¨_t
* 
«me
, c⁄° * 
mode
)

207 c⁄° 
moduÀ
[] = "TIFFOpenW";

208 
m
, 
fd
;

209 
mbsize
;

210 *
mb«me
;

211 
TIFF
* 
tif
;

213 
m
 = 
	`_TIFFgëMode
(
mode
, 
moduÀ
);

214 i‡(
m
 == -1)

215  ((
TIFF
*)0);

218 #ifde‡
O_BINARY


219 
m
 |
O_BINARY
;

222 
fd
 = 
	`_w›í
(
«me
, 
m
, 0666);

223 i‡(
fd
 < 0) {

224 
	`TIFFEº‹Ext
(0, 
moduÀ
, "%s: C™nŸ o≥n", 
«me
);

225  ((
TIFF
 *)0);

228 
mb«me
 = 
NULL
;

229 
mbsize
 = 
	`WideCh¨ToMu…iByã
(
CP_ACP
, 0, 
«me
, -1, 
NULL
, 0, NULL, NULL);

230 i‡(
mbsize
 > 0) {

231 
mb«me
 = 
	`_TIFFmÆloc
(
mbsize
);

232 i‡(!
mb«me
) {

233 
	`TIFFEº‹Ext
(0, 
moduÀ
,

235  ((
TIFF
*)0);

238 
	`WideCh¨ToMu…iByã
(
CP_ACP
, 0, 
«me
, -1, 
mb«me
, 
mbsize
,

239 
NULL
, NULL);

242 
tif
 = 
	`TIFFFdO≥n
(()
fd
, (
mb«me
 !
NULL
) ? mbname : "<unknown>",

243 
mode
);

245 
	`_TIFF‰ì
(
mb«me
);

247 if(!
tif
)

248 
	`˛o£
(
fd
);

249  
tif
;

250 
	}
}

254 
	$_TIFFmÆloc
(
tmsize_t
 
s
)

256  (
	`mÆloc
((
size_t
Ë
s
));

257 
	}
}

260 
	$_TIFF‰ì
(* 
p
)

262 
	`‰ì
(
p
);

263 
	}
}

266 
	$_TIFFªÆloc
(* 
p
, 
tmsize_t
 
s
)

268  (
	`ªÆloc
(
p
, (
size_t
Ë
s
));

269 
	}
}

272 
	$_TIFFmem£t
(* 
p
, 
v
, 
tmsize_t
 
c
)

274 
	`mem£t
(
p
, 
v
, (
size_t
Ë
c
);

275 
	}
}

278 
	$_TIFFmem˝y
(* 
d
, c⁄° * 
s
, 
tmsize_t
 
c
)

280 
	`mem˝y
(
d
, 
s
, (
size_t
Ë
c
);

281 
	}
}

284 
	$_TIFFmemcmp
(c⁄° * 
p1
, c⁄° * 
p2
, 
tmsize_t
 
c
)

286  (
	`memcmp
(
p1
, 
p2
, (
size_t
Ë
c
));

287 
	}
}

290 
	$unixW¨nögH™dÀr
(c⁄° * 
moduÀ
, c⁄° * 
fmt
, 
va_li°
 
≠
)

292 i‡(
moduÀ
 !
NULL
)

293 
	`Ârötf
(
°dîr
, "%s: ", 
moduÀ
);

294 
	`Ârötf
(
°dîr
, "Warning, ");

295 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

296 
	`Ârötf
(
°dîr
, ".\n");

297 
	}
}

298 
TIFFEº‹H™dÀr
 
	g_TIFFw¨nögH™dÀr
 = 
unixW¨nögH™dÀr
;

301 
	$unixEº‹H™dÀr
(c⁄° * 
moduÀ
, c⁄° * 
fmt
, 
va_li°
 
≠
)

303 i‡(
moduÀ
 !
NULL
)

304 
	`Ârötf
(
°dîr
, "%s: ", 
moduÀ
);

305 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

306 
	`Ârötf
(
°dîr
, ".\n");

307 
	}
}

308 
TIFFEº‹H™dÀr
 
	g_TIFFîr‹H™dÀr
 = 
unixEº‹H™dÀr
;

	@libtiff/tif_version.c

25 
	~"tiffi›.h
"

27 c⁄° 
	gTIFFVîsi⁄
[] = 
TIFFLIB_VERSION_STR
;

30 
	$TIFFGëVîsi⁄
()

32  (
TIFFVîsi⁄
);

33 
	}
}

	@libtiff/tif_warning.c

30 
	~"tiffi›.h
"

32 
TIFFEº‹H™dÀrExt
 
	g_TIFFw¨nögH™dÀrExt
 = 
NULL
;

34 
TIFFEº‹H™dÀr


35 
	$TIFFSëW¨nögH™dÀr
(
TIFFEº‹H™dÀr
 
h™dÀr
)

37 
TIFFEº‹H™dÀr
 
¥ev
 = 
_TIFFw¨nögH™dÀr
;

38 
_TIFFw¨nögH™dÀr
 = 
h™dÀr
;

39  (
¥ev
);

40 
	}
}

42 
TIFFEº‹H™dÀrExt


43 
	$TIFFSëW¨nögH™dÀrExt
(
TIFFEº‹H™dÀrExt
 
h™dÀr
)

45 
TIFFEº‹H™dÀrExt
 
¥ev
 = 
_TIFFw¨nögH™dÀrExt
;

46 
_TIFFw¨nögH™dÀrExt
 = 
h™dÀr
;

47  (
¥ev
);

48 
	}
}

51 
	$TIFFW¨nög
(c⁄° * 
moduÀ
, c⁄° * 
fmt
, ...)

53 
va_li°
 
≠
;

54 
	`va_°¨t
(
≠
, 
fmt
);

55 i‡(
_TIFFw¨nögH™dÀr
)

56 (*
_TIFFw¨nögH™dÀr
)(
moduÀ
, 
fmt
, 
≠
);

57 i‡(
_TIFFw¨nögH™dÀrExt
)

58 (*
_TIFFw¨nögH™dÀrExt
)(0, 
moduÀ
, 
fmt
, 
≠
);

59 
	`va_íd
(
≠
);

60 
	}
}

63 
	$TIFFW¨nögExt
(
th™dÀ_t
 
fd
, c⁄° * 
moduÀ
, c⁄° * 
fmt
, ...)

65 
va_li°
 
≠
;

66 
	`va_°¨t
(
≠
, 
fmt
);

67 i‡(
_TIFFw¨nögH™dÀr
)

68 (*
_TIFFw¨nögH™dÀr
)(
moduÀ
, 
fmt
, 
≠
);

69 i‡(
_TIFFw¨nögH™dÀrExt
)

70 (*
_TIFFw¨nögH™dÀrExt
)(
fd
, 
moduÀ
, 
fmt
, 
≠
);

71 
	`va_íd
(
≠
);

72 
	}
}

	@libtiff/tif_win32.c

31 
	~"tiffi›.h
"

33 
	~<wödows.h
>

35 
tmsize_t


36 
	$_tiffRódProc
(
th™dÀ_t
 
fd
, * 
buf
, 
tmsize_t
 
size
)

41 
uöt8
* 
ma
;

42 
uöt64
 
mb
;

43 
DWORD
 
n
;

44 
DWORD
 
o
;

45 
tmsize_t
 
p
;

46 
ma
=(
uöt8
*)
buf
;

47 
mb
=
size
;

48 
p
=0;

49 
mb
>0)

51 
n
=0x80000000UL;

52 i‡((
uöt64
)
n
>
mb
)

53 
n
=(
DWORD
)
mb
;

54 i‡(!
	`RódFûe
(
fd
,(
LPVOID
)
ma
,
n
,&
o
,
NULL
))

56 
ma
+=
o
;

57 
mb
-=
o
;

58 
p
+=
o
;

59 i‡(
o
!=
n
)

62 (
p
);

63 
	}
}

65 
tmsize_t


66 
	$_tiffWrôeProc
(
th™dÀ_t
 
fd
, * 
buf
, 
tmsize_t
 
size
)

71 
uöt8
* 
ma
;

72 
uöt64
 
mb
;

73 
DWORD
 
n
;

74 
DWORD
 
o
;

75 
tmsize_t
 
p
;

76 
ma
=(
uöt8
*)
buf
;

77 
mb
=
size
;

78 
p
=0;

79 
mb
>0)

81 
n
=0x80000000UL;

82 i‡((
uöt64
)
n
>
mb
)

83 
n
=(
DWORD
)
mb
;

84 i‡(!
	`WrôeFûe
(
fd
,(
LPVOID
)
ma
,
n
,&
o
,
NULL
))

86 
ma
+=
o
;

87 
mb
-=
o
;

88 
p
+=
o
;

89 i‡(
o
!=
n
)

92 (
p
);

93 
	}
}

95 
uöt64


96 
	$_tiffSìkProc
(
th™dÀ_t
 
fd
, 
uöt64
 
off
, 
whí˚
)

98 
LARGE_INTEGER
 
ofÊi
;

99 
DWORD
 
dwMoveMëhod
;

100 
ofÊi
.
QuadP¨t
 = 
off
;

101 
whí˚
)

103 
SEEK_SET
:

104 
dwMoveMëhod
 = 
FILE_BEGIN
;

106 
SEEK_CUR
:

107 
dwMoveMëhod
 = 
FILE_CURRENT
;

109 
SEEK_END
:

110 
dwMoveMëhod
 = 
FILE_END
;

113 
dwMoveMëhod
 = 
FILE_BEGIN
;

116 
ofÊi
.
LowP¨t
=
	`SëFûePoöãr
(
fd
,ofÊi.LowP¨t,&ofÊi.
HighP¨t
,
dwMoveMëhod
);

117 i‡((
ofÊi
.
LowP¨t
==
INVALID_SET_FILE_POINTER
)&&(
	`GëLa°Eº‹
()!=
NO_ERROR
))

118 
ofÊi
.
QuadP¨t
=0;

119 (
ofÊi
.
QuadP¨t
);

120 
	}
}

123 
	$_tiffClo£Proc
(
th™dÀ_t
 
fd
)

125  (
	`Clo£H™dÀ
(
fd
) ? 0 : -1);

126 
	}
}

128 
uöt64


129 
	$_tiffSizeProc
(
th™dÀ_t
 
fd
)

131 
ULARGE_INTEGER
 
m
;

132 
m
.
LowP¨t
=
	`GëFûeSize
(
fd
,&m.
HighP¨t
);

133 (
m
.
QuadP¨t
);

134 
	}
}

137 
	$_tiffDummyM≠Proc
(
th™dÀ_t
 
fd
, ** 
pba£
, 
toff_t
* 
psize
)

139 (Ë
fd
;

140 (Ë
pba£
;

141 (Ë
psize
;

143 
	}
}

157 
	$_tiffM≠Proc
(
th™dÀ_t
 
fd
, ** 
pba£
, 
toff_t
* 
psize
)

159 
uöt64
 
size
;

160 
tmsize_t
 
sizem
;

161 
HANDLE
 
hM≠Fûe
;

163 
size
 = 
	`_tiffSizeProc
(
fd
);

164 
sizem
 = (
tmsize_t
)
size
;

165 i‡((
uöt64
)
sizem
!=
size
)

170 
hM≠Fûe
 = 
	`Cª©eFûeM≠pög
(
fd
, 
NULL
, 
PAGE_READONLY
, 0, 0, NULL);

171 i‡(
hM≠Fûe
 =
NULL
)

173 *
pba£
 = 
	`M≠VõwOfFûe
(
hM≠Fûe
, 
FILE_MAP_READ
, 0, 0, 0);

174 
	`Clo£H™dÀ
(
hM≠Fûe
);

175 i‡(*
pba£
 =
NULL
)

177 *
psize
 = 
size
;

179 
	}
}

182 
	$_tiffDummyUnm≠Proc
(
th™dÀ_t
 
fd
, * 
ba£
, 
toff_t
 
size
)

184 (Ë
fd
;

185 (Ë
ba£
;

186 (Ë
size
;

187 
	}
}

190 
	$_tiffUnm≠Proc
(
th™dÀ_t
 
fd
, * 
ba£
, 
toff_t
 
size
)

192 (Ë
fd
;

193 (Ë
size
;

194 
	`Unm≠VõwOfFûe
(
ba£
);

195 
	}
}

202 
TIFF
*

203 
	$TIFFFdO≥n
(
ifd
, c⁄° * 
«me
, c⁄° * 
mode
)

205 
TIFF
* 
tif
;

206 
fSuµªssM≠
;

207 
m
;

208 
fSuµªssM≠
=0;

209 
m
=0; 
mode
[m]!=0; m++)

211 i‡(
mode
[
m
]=='u')

213 
fSuµªssM≠
=1;

217 
tif
 = 
	`TIFFClõ¡O≥n
(
«me
, 
mode
, (
th™dÀ_t
)
ifd
,

218 
_tiffRódProc
, 
_tiffWrôeProc
,

219 
_tiffSìkProc
, 
_tiffClo£Proc
, 
_tiffSizeProc
,

220 
fSuµªssM≠
 ? 
_tiffDummyM≠Proc
 : 
_tiffM≠Proc
,

221 
fSuµªssM≠
 ? 
_tiffDummyUnm≠Proc
 : 
_tiffUnm≠Proc
);

222 i‡(
tif
)

223 
tif
->
tif_fd
 = 
ifd
;

224  (
tif
);

225 
	}
}

227 #i‚de‡
_WIN32_WCE


232 
TIFF
*

233 
	$TIFFO≥n
(c⁄° * 
«me
, c⁄° * 
mode
)

235 c⁄° 
moduÀ
[] = "TIFFOpen";

236 
th™dÀ_t
 
fd
;

237 
m
;

238 
DWORD
 
dwMode
;

239 
TIFF
* 
tif
;

241 
m
 = 
	`_TIFFgëMode
(
mode
, 
moduÀ
);

243 
m
) {

244 
O_RDONLY
: 
dwMode
 = 
OPEN_EXISTING
; ;

245 
O_RDWR
: 
dwMode
 = 
OPEN_ALWAYS
; ;

246 
O_RDWR
|
O_CREAT
: 
dwMode
 = 
OPEN_ALWAYS
; ;

247 
O_RDWR
|
O_TRUNC
: 
dwMode
 = 
CREATE_ALWAYS
; ;

248 
O_RDWR
|
O_CREAT
|
O_TRUNC
: 
dwMode
 = 
CREATE_ALWAYS
; ;

249 :  ((
TIFF
*)0);

252 
fd
 = (
th™dÀ_t
)
	`Cª©eFûeA
(
«me
,

253 (
m
 =
O_RDONLY
)?
GENERIC_READ
:(GENERIC_READ | 
GENERIC_WRITE
),

254 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
, 
dwMode
,

255 (
m
 =
O_RDONLY
)?
FILE_ATTRIBUTE_READONLY
:
FILE_ATTRIBUTE_NORMAL
,

256 
NULL
);

257 i‡(
fd
 =
INVALID_HANDLE_VALUE
) {

258 
	`TIFFEº‹Ext
(0, 
moduÀ
, "%s: C™nŸ o≥n", 
«me
);

259  ((
TIFF
 *)0);

262 
tif
 = 
	`TIFFFdO≥n
(()
fd
, 
«me
, 
mode
);

263 if(!
tif
)

264 
	`Clo£H™dÀ
(
fd
);

265  
tif
;

266 
	}
}

271 
TIFF
*

272 
	$TIFFO≥nW
(c⁄° 
wch¨_t
* 
«me
, c⁄° * 
mode
)

274 c⁄° 
moduÀ
[] = "TIFFOpenW";

275 
th™dÀ_t
 
fd
;

276 
m
;

277 
DWORD
 
dwMode
;

278 
mbsize
;

279 *
mb«me
;

280 
TIFF
 *
tif
;

282 
m
 = 
	`_TIFFgëMode
(
mode
, 
moduÀ
);

284 
m
) {

285 
O_RDONLY
: 
dwMode
 = 
OPEN_EXISTING
; ;

286 
O_RDWR
: 
dwMode
 = 
OPEN_ALWAYS
; ;

287 
O_RDWR
|
O_CREAT
: 
dwMode
 = 
OPEN_ALWAYS
; ;

288 
O_RDWR
|
O_TRUNC
: 
dwMode
 = 
CREATE_ALWAYS
; ;

289 
O_RDWR
|
O_CREAT
|
O_TRUNC
: 
dwMode
 = 
CREATE_ALWAYS
; ;

290 :  ((
TIFF
*)0);

293 
fd
 = (
th™dÀ_t
)
	`Cª©eFûeW
(
«me
,

294 (
m
 =
O_RDONLY
)?
GENERIC_READ
:(GENERIC_READ|
GENERIC_WRITE
),

295 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
, 
dwMode
,

296 (
m
 =
O_RDONLY
)?
FILE_ATTRIBUTE_READONLY
:
FILE_ATTRIBUTE_NORMAL
,

297 
NULL
);

298 i‡(
fd
 =
INVALID_HANDLE_VALUE
) {

299 
	`TIFFEº‹Ext
(0, 
moduÀ
, "%S: C™nŸ o≥n", 
«me
);

300  ((
TIFF
 *)0);

303 
mb«me
 = 
NULL
;

304 
mbsize
 = 
	`WideCh¨ToMu…iByã
(
CP_ACP
, 0, 
«me
, -1, 
NULL
, 0, NULL, NULL);

305 i‡(
mbsize
 > 0) {

306 
mb«me
 = (*)
	`_TIFFmÆloc
(
mbsize
);

307 i‡(!
mb«me
) {

308 
	`TIFFEº‹Ext
(0, 
moduÀ
,

310  ((
TIFF
*)0);

313 
	`WideCh¨ToMu…iByã
(
CP_ACP
, 0, 
«me
, -1, 
mb«me
, 
mbsize
,

314 
NULL
, NULL);

317 
tif
 = 
	`TIFFFdO≥n
(()
fd
,

318 (
mb«me
 !
NULL
Ë? mb«mê: "<unknown>", 
mode
);

319 if(!
tif
)

320 
	`Clo£H™dÀ
(
fd
);

322 
	`_TIFF‰ì
(
mb«me
);

324  
tif
;

325 
	}
}

330 
	$_TIFFmÆloc
(
tmsize_t
 
s
)

332  (
	`mÆloc
((
size_t
Ë
s
));

333 
	}
}

336 
	$_TIFF‰ì
(* 
p
)

338 
	`‰ì
(
p
);

339 
	}
}

342 
	$_TIFFªÆloc
(* 
p
, 
tmsize_t
 
s
)

344  (
	`ªÆloc
(
p
, (
size_t
Ë
s
));

345 
	}
}

348 
	$_TIFFmem£t
(* 
p
, 
v
, 
tmsize_t
 
c
)

350 
	`mem£t
(
p
, 
v
, (
size_t
Ë
c
);

351 
	}
}

354 
	$_TIFFmem˝y
(* 
d
, c⁄° * 
s
, 
tmsize_t
 
c
)

356 
	`mem˝y
(
d
, 
s
, (
size_t
Ë
c
);

357 
	}
}

360 
	$_TIFFmemcmp
(c⁄° * 
p1
, c⁄° * 
p2
, 
tmsize_t
 
c
)

362  (
	`memcmp
(
p1
, 
p2
, (
size_t
Ë
c
));

363 
	}
}

365 #i‚de‡
_WIN32_WCE


367 #i‡(
_MSC_VER
 < 1500)

368 
	#v¢¥ötf
 
_v¢¥ötf


	)

372 
	$Wö32W¨nögH™dÀr
(c⁄° * 
moduÀ
, c⁄° * 
fmt
, 
va_li°
 
≠
)

374 #i‚de‡
TIF_PLATFORM_CONSOLE


375 
LPTSTR
 
szTôÀ
;

376 
LPTSTR
 
szTmp
;

377 
LPCTSTR
 
szTôÀText
 = "%s Warning";

378 
LPCTSTR
 
szDeÁu…ModuÀ
 = "LIBTIFF";

379 
LPCTSTR
 
szTmpModuÀ
 = (
moduÀ
 =
NULL
Ë? 
szDeÁu…ModuÀ
 : module;

380 
SIZE_T
 
nBufSize
 = (
	`°æí
(
szTmpModuÀ
) +

381 
	`°æí
(
szTôÀText
Ë+ såÀn(
fmt
) + 256)*();

383 i‡((
szTôÀ
 = (
LPTSTR
)
	`LoˇlAŒoc
(
LMEM_FIXED
, 
nBufSize
)Ë=
NULL
)

385 
	`•rötf
(
szTôÀ
, 
szTôÀText
, 
szTmpModuÀ
);

386 
szTmp
 = 
szTôÀ
 + (
	`°æí
(szTitle)+2)*();

387 
	`v¢¥ötf
(
szTmp
, 
nBufSize
-(
	`°æí
(
szTôÀ
)+2)*(), 
fmt
, 
≠
);

388 
	`MesßgeBoxA
(
	`GëFocus
(), 
szTmp
, 
szTôÀ
, 
MB_OK
 | 
MB_ICONINFORMATION
);

389 
	`LoˇlFªe
(
szTôÀ
);

393 i‡(
moduÀ
 !
NULL
)

394 
	`Ârötf
(
°dîr
, "%s: ", 
moduÀ
);

395 
	`Ârötf
(
°dîr
, "Warning, ");

396 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

397 
	`Ârötf
(
°dîr
, ".\n");

399 
	}
}

400 
TIFFEº‹H™dÀr
 
	g_TIFFw¨nögH™dÀr
 = 
Wö32W¨nögH™dÀr
;

403 
	$Wö32Eº‹H™dÀr
(c⁄° * 
moduÀ
, c⁄° * 
fmt
, 
va_li°
 
≠
)

405 #i‚de‡
TIF_PLATFORM_CONSOLE


406 
LPTSTR
 
szTôÀ
;

407 
LPTSTR
 
szTmp
;

408 
LPCTSTR
 
szTôÀText
 = "%s Error";

409 
LPCTSTR
 
szDeÁu…ModuÀ
 = "LIBTIFF";

410 
LPCTSTR
 
szTmpModuÀ
 = (
moduÀ
 =
NULL
Ë? 
szDeÁu…ModuÀ
 : module;

411 
SIZE_T
 
nBufSize
 = (
	`°æí
(
szTmpModuÀ
) +

412 
	`°æí
(
szTôÀText
Ë+ såÀn(
fmt
) + 256)*();

414 i‡((
szTôÀ
 = (
LPTSTR
)
	`LoˇlAŒoc
(
LMEM_FIXED
, 
nBufSize
)Ë=
NULL
)

416 
	`•rötf
(
szTôÀ
, 
szTôÀText
, 
szTmpModuÀ
);

417 
szTmp
 = 
szTôÀ
 + (
	`°æí
(szTitle)+2)*();

418 
	`v¢¥ötf
(
szTmp
, 
nBufSize
-(
	`°æí
(
szTôÀ
)+2)*(), 
fmt
, 
≠
);

419 
	`MesßgeBoxA
(
	`GëFocus
(), 
szTmp
, 
szTôÀ
, 
MB_OK
 | 
MB_ICONEXCLAMATION
);

420 
	`LoˇlFªe
(
szTôÀ
);

423 i‡(
moduÀ
 !
NULL
)

424 
	`Ârötf
(
°dîr
, "%s: ", 
moduÀ
);

425 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

426 
	`Ârötf
(
°dîr
, ".\n");

428 
	}
}

429 
TIFFEº‹H™dÀr
 
	g_TIFFîr‹H™dÀr
 = 
Wö32Eº‹H™dÀr
;

	@libtiff/tif_write.c

32 
	~"tiffi›.h
"

33 
	~<°dio.h
>

35 
	#STRIPINCR
 20

	)

37 
	#WRITECHECKSTRIPS
(
tif
, 
moduÀ
) \

38 (((
tif
)->
tif_Êags
&
TIFF_BEENWRITING
Ë|| 
	`TIFFWrôeCheck
(—if),0,
moduÀ
))

	)

39 
	#WRITECHECKTILES
(
tif
, 
moduÀ
) \

40 (((
tif
)->
tif_Êags
&
TIFF_BEENWRITING
Ë|| 
	`TIFFWrôeCheck
(—if),1,
moduÀ
))

	)

41 
	#BUFFERCHECK
(
tif
) \

42 ((((
tif
)->
tif_Êags
 & 
TIFF_BUFFERSETUP
Ë&&Åif->
tif_øwd©a
) || \

43 
	`TIFFWrôeBuf„rSëup
((
tif
), 
NULL
, (
tmsize_t
Ë-1))

	)

45 
TIFFGrowSåùs
(
TIFF
* 
tif
, 
uöt32
 
dñè
, c⁄° * 
moduÀ
);

46 
TIFFAµídToSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
, 
uöt8
* 
d©a
, 
tmsize_t
 
cc
);

49 
	$TIFFWrôeSˇ∆öe
(
TIFF
* 
tif
, * 
buf
, 
uöt32
 
row
, 
uöt16
 
ßm∂e
)

51 c⁄° 
moduÀ
[] = "TIFFWriteScanline";

52 
TIFFDúe˘‹y
 *
td
;

53 
°©us
, 
imagegªw
 = 0;

54 
uöt32
 
°rù
;

56 i‡(!
	`WRITECHECKSTRIPS
(
tif
, 
moduÀ
))

63 i‡(!
	`BUFFERCHECK
(
tif
))

65 
tif
->
tif_Êags
 |
TIFF_BUF4WRITE
;

67 
td
 = &
tif
->
tif_dú
;

72 i‡(
row
 >
td
->
td_imagñígth
) {

73 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
) {

74 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

78 
td
->
td_imagñígth
 = 
row
+1;

79 
imagegªw
 = 1;

84 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
) {

85 i‡(
ßm∂e
 >
td
->
td_ßm∂e•îpixñ
) {

86 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

88 (Ë
ßm∂e
, (Ë
td
->
td_ßm∂e•îpixñ
);

91 
°rù
 = 
ßm∂e
*
td
->
td_°rù•îimage
 + 
row
/td->
td_row•î°rù
;

93 
°rù
 = 
row
 / 
td
->
td_row•î°rù
;

101 i‡(
°rù
 >
td
->
td_n°rùs
 && !
	`TIFFGrowSåùs
(
tif
, 1, 
moduÀ
))

103 i‡(
°rù
 !
tif
->
tif_cur°rù
) {

107 i‡(!
	`TIFFFlushD©a
(
tif
))

109 
tif
->
tif_cur°rù
 = 
°rù
;

115 i‡(
°rù
 >
td
->
td_°rù•îimage
 && 
imagegªw
)

116 
td
->
td_°rù•îimage
 =

117 
	`TIFFhowm™y_32
(
td
->
td_imagñígth
,td->
td_row•î°rù
);

118 
tif
->
tif_row
 =

119 (
°rù
 % 
td
->
td_°rù•îimage
Ë*Åd->
td_row•î°rù
;

120 i‡((
tif
->
tif_Êags
 & 
TIFF_CODERSETUP
) == 0) {

121 i‡(!(*
tif
->
tif_£tu≥ncode
)(tif))

123 
tif
->
tif_Êags
 |
TIFF_CODERSETUP
;

126 
tif
->
tif_øwcc
 = 0;

127 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
;

129 if–
td
->
td_°rùbyãcou¡
[
°rù
] > 0 )

132 
td
->
td_°rùbyãcou¡
[
°rù
] = 0;

135 
tif
->
tif_curoff
 = 0;

138 i‡(!(*
tif
->
tif_¥ìncode
)—if, 
ßm∂e
))

140 
tif
->
tif_Êags
 |
TIFF_POSTENCODE
;

147 i‡(
row
 !
tif
->
tif_row
) {

148 i‡(
row
 < 
tif
->
tif_row
) {

154 
tif
->
tif_row
 = (
°rù
 % 
td
->
td_°rù•îimage
) *

155 
td
->
td_row•î°rù
;

156 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
;

161 i‡(!(*
tif
->
tif_£ek
)—if, 
row
 -Åif->
tif_row
))

163 
tif
->
tif_row
 = 
row
;

167 
tif
->
	`tif_po°decode
–tif, (
uöt8
*Ë
buf
,Åif->
tif_sˇ∆öesize
 );

169 
°©us
 = (*
tif
->
tif_ícodîow
)—if, (
uöt8
*Ë
buf
,

170 
tif
->
tif_sˇ∆öesize
, 
ßm∂e
);

173 
tif
->
tif_row
 = 
row
 + 1;

174  (
°©us
);

175 
	}
}

183 
tmsize_t


184 
	$TIFFWrôeEncodedSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
, * 
d©a
, 
tmsize_t
 
cc
)

186 c⁄° 
moduÀ
[] = "TIFFWriteEncodedStrip";

187 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

188 
uöt16
 
ßm∂e
;

190 i‡(!
	`WRITECHECKSTRIPS
(
tif
, 
moduÀ
))

191  ((
tmsize_t
) -1);

201 i‡(
°rù
 >
td
->
td_n°rùs
) {

202 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
) {

203 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

205  ((
tmsize_t
) -1);

207 i‡(!
	`TIFFGrowSåùs
(
tif
, 1, 
moduÀ
))

208  ((
tmsize_t
) -1);

209 
td
->
td_°rù•îimage
 =

210 
	`TIFFhowm™y_32
(
td
->
td_imagñígth
,Åd->
td_row•î°rù
);

217 i‡(!
	`BUFFERCHECK
(
tif
))

218  ((
tmsize_t
) -1);

220 
tif
->
tif_Êags
 |
TIFF_BUF4WRITE
;

221 
tif
->
tif_cur°rù
 = 
°rù
;

223 
tif
->
tif_row
 = (
°rù
 % 
td
->
td_°rù•îimage
Ë*Åd->
td_row•î°rù
;

224 i‡((
tif
->
tif_Êags
 & 
TIFF_CODERSETUP
) == 0) {

225 i‡(!(*
tif
->
tif_£tu≥ncode
)(tif))

226  ((
tmsize_t
) -1);

227 
tif
->
tif_Êags
 |
TIFF_CODERSETUP
;

230 
tif
->
tif_øwcc
 = 0;

231 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
;

233 if–
td
->
td_°rùbyãcou¡
[
°rù
] > 0 )

237 
tif
->
tif_curoff
 = 0;

240 
tif
->
tif_Êags
 &~
TIFF_POSTENCODE
;

241 
ßm∂e
 = (
uöt16
)(
°rù
 / 
td
->
td_°rù•îimage
);

242 i‡(!(*
tif
->
tif_¥ìncode
)—if, 
ßm∂e
))

243  ((
tmsize_t
) -1);

246 
tif
->
	`tif_po°decode
–tif, (
uöt8
*Ë
d©a
, 
cc
 );

248 i‡(!(*
tif
->
tif_ícode°rù
)—if, (
uöt8
*Ë
d©a
, 
cc
, 
ßm∂e
))

250 i‡(!(*
tif
->
tif_po°ícode
)(tif))

251  ((
tmsize_t
) -1);

252 i‡(!
	`isFûlOrdî
(
tif
, 
td
->
td_fûl‹dî
) &&

253 (
tif
->
tif_Êags
 & 
TIFF_NOBITREV
) == 0)

254 
	`TIFFRevî£Bôs
(
tif
->
tif_øwd©a
,Åif->
tif_øwcc
);

255 i‡(
tif
->
tif_øwcc
 > 0 &&

256 !
	`TIFFAµídToSåù
(
tif
, 
°rù
,Åif->
tif_øwd©a
,Åif->
tif_øwcc
))

257  ((
tmsize_t
) -1);

258 
tif
->
tif_øwcc
 = 0;

259 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
;

260  (
cc
);

261 
	}
}

268 
tmsize_t


269 
	$TIFFWrôeRawSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
, * 
d©a
, 
tmsize_t
 
cc
)

271 c⁄° 
moduÀ
[] = "TIFFWriteRawStrip";

272 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

274 i‡(!
	`WRITECHECKSTRIPS
(
tif
, 
moduÀ
))

275  ((
tmsize_t
) -1);

285 i‡(
°rù
 >
td
->
td_n°rùs
) {

286 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
) {

287 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

289  ((
tmsize_t
) -1);

296 i‡(
°rù
 >
td
->
td_°rù•îimage
)

297 
td
->
td_°rù•îimage
 =

298 
	`TIFFhowm™y_32
(
td
->
td_imagñígth
,td->
td_row•î°rù
);

299 i‡(!
	`TIFFGrowSåùs
(
tif
, 1, 
moduÀ
))

300  ((
tmsize_t
) -1);

302 
tif
->
tif_cur°rù
 = 
°rù
;

303 
tif
->
tif_row
 = (
°rù
 % 
td
->
td_°rù•îimage
Ë*Åd->
td_row•î°rù
;

304  (
	`TIFFAµídToSåù
(
tif
, 
°rù
, (
uöt8
*Ë
d©a
, 
cc
) ?

305 
cc
 : (
tmsize_t
) -1);

306 
	}
}

312 
tmsize_t


313 
	$TIFFWrôeTûe
(
TIFF
* 
tif
, * 
buf
, 
uöt32
 
x
, uöt32 
y
, uöt32 
z
, 
uöt16
 
s
)

315 i‡(!
	`TIFFCheckTûe
(
tif
, 
x
, 
y
, 
z
, 
s
))

316  ((
tmsize_t
)(-1));

323  (
	`TIFFWrôeEncodedTûe
(
tif
,

324 
	`TIFFCompuãTûe
(
tif
, 
x
, 
y
, 
z
, 
s
), 
buf
, (
tmsize_t
)(-1)));

325 
	}
}

339 
tmsize_t


340 
	$TIFFWrôeEncodedTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
, * 
d©a
, 
tmsize_t
 
cc
)

342 c⁄° 
moduÀ
[] = "TIFFWriteEncodedTile";

343 
TIFFDúe˘‹y
 *
td
;

344 
uöt16
 
ßm∂e
;

346 i‡(!
	`WRITECHECKTILES
(
tif
, 
moduÀ
))

347  ((
tmsize_t
)(-1));

348 
td
 = &
tif
->
tif_dú
;

349 i‡(
tûe
 >
td
->
td_n°rùs
) {

350 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Tile %lu out ofÑange, max %lu",

351 (Ë
tûe
, (Ë
td
->
td_n°rùs
);

352  ((
tmsize_t
)(-1));

359 i‡(!
	`BUFFERCHECK
(
tif
))

360  ((
tmsize_t
)(-1));

362 
tif
->
tif_Êags
 |
TIFF_BUF4WRITE
;

363 
tif
->
tif_cuπûe
 = 
tûe
;

365 
tif
->
tif_øwcc
 = 0;

366 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
;

368 if–
td
->
td_°rùbyãcou¡
[
tûe
] > 0 )

372 
tif
->
tif_curoff
 = 0;

379 
tif
->
tif_row
 = (
tûe
 % 
	`TIFFhowm™y_32
(
td
->
td_imagñígth
,Åd->
td_tûñígth
))

380 * 
td
->
td_tûñígth
;

381 
tif
->
tif_cﬁ
 = (
tûe
 % 
	`TIFFhowm™y_32
(
td
->
td_imagewidth
,Åd->
td_tûewidth
))

382 * 
td
->
td_tûewidth
;

384 i‡((
tif
->
tif_Êags
 & 
TIFF_CODERSETUP
) == 0) {

385 i‡(!(*
tif
->
tif_£tu≥ncode
)(tif))

386  ((
tmsize_t
)(-1));

387 
tif
->
tif_Êags
 |
TIFF_CODERSETUP
;

389 
tif
->
tif_Êags
 &~
TIFF_POSTENCODE
;

390 
ßm∂e
 = (
uöt16
)(
tûe
/
td
->
td_°rù•îimage
);

391 i‡(!(*
tif
->
tif_¥ìncode
)—if, 
ßm∂e
))

392  ((
tmsize_t
)(-1));

398 i‡–
cc
 < 1 || c¯> 
tif
->
tif_tûesize
)

399 
cc
 = 
tif
->
tif_tûesize
;

402 
tif
->
	`tif_po°decode
–tif, (
uöt8
*Ë
d©a
, 
cc
 );

404 i‡(!(*
tif
->
tif_ícodëûe
)—if, (
uöt8
*Ë
d©a
, 
cc
, 
ßm∂e
))

406 i‡(!(*
tif
->
tif_po°ícode
)(tif))

407  ((
tmsize_t
)(-1));

408 i‡(!
	`isFûlOrdî
(
tif
, 
td
->
td_fûl‹dî
) &&

409 (
tif
->
tif_Êags
 & 
TIFF_NOBITREV
) == 0)

410 
	`TIFFRevî£Bôs
((
uöt8
*)
tif
->
tif_øwd©a
,Åif->
tif_øwcc
);

411 i‡(
tif
->
tif_øwcc
 > 0 && !
	`TIFFAµídToSåù
—if, 
tûe
,

412 
tif
->
tif_øwd©a
,Åif->
tif_øwcc
))

413  ((
tmsize_t
)(-1));

414 
tif
->
tif_øwcc
 = 0;

415 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
;

416  (
cc
);

417 
	}
}

428 
tmsize_t


429 
	$TIFFWrôeRawTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
, * 
d©a
, 
tmsize_t
 
cc
)

431 c⁄° 
moduÀ
[] = "TIFFWriteRawTile";

433 i‡(!
	`WRITECHECKTILES
(
tif
, 
moduÀ
))

434  ((
tmsize_t
)(-1));

435 i‡(
tûe
 >
tif
->
tif_dú
.
td_n°rùs
) {

436 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Tile %lu out ofÑange, max %lu",

437 (Ë
tûe
,

438 (Ë
tif
->
tif_dú
.
td_n°rùs
);

439  ((
tmsize_t
)(-1));

441  (
	`TIFFAµídToSåù
(
tif
, 
tûe
, (
uöt8
*Ë
d©a
, 
cc
) ?

442 
cc
 : (
tmsize_t
)(-1));

443 
	}
}

445 
	#isUn•ecifõd
(
tif
, 
f
) \

446 (
	`TIFFFõldSë
(
tif
,
f
Ë&& (tif)->
tif_dú
.
td_imagñígth
 =0)

	)

449 
	$TIFFSëupSåùs
(
TIFF
* 
tif
)

451 
TIFFDúe˘‹y
* 
td
 = &
tif
->
tif_dú
;

453 i‡(
	`isTûed
(
tif
))

454 
td
->
td_°rù•îimage
 =

455 
	`isUn•ecifõd
(
tif
, 
FIELD_TILEDIMENSIONS
) ?

456 
td
->
td_ßm∂e•îpixñ
 : 
	`TIFFNumbîOfTûes
(
tif
);

458 
td
->
td_°rù•îimage
 =

459 
	`isUn•ecifõd
(
tif
, 
FIELD_ROWSPERSTRIP
) ?

460 
td
->
td_ßm∂e•îpixñ
 : 
	`TIFFNumbîOfSåùs
(
tif
);

461 
td
->
td_n°rùs
 =Åd->
td_°rù•îimage
;

462 i‡(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_SEPARATE
)

463 
td
->
td_°rù•îimage
 /td->
td_ßm∂e•îpixñ
;

464 
td
->
td_°rùoff£t
 = (
uöt64
 *)

465 
	`_TIFFmÆloc
(
td
->
td_n°rùs
 *  (
uöt64
));

466 
td
->
td_°rùbyãcou¡
 = (
uöt64
 *)

467 
	`_TIFFmÆloc
(
td
->
td_n°rùs
 *  (
uöt64
));

468 i‡(
td
->
td_°rùoff£t
 =
NULL
 ||Åd->
td_°rùbyãcou¡
 == NULL)

474 
	`_TIFFmem£t
(
td
->
td_°rùoff£t
, 0,Åd->
td_n°rùs
* (
uöt64
));

475 
	`_TIFFmem£t
(
td
->
td_°rùbyãcou¡
, 0,Åd->
td_n°rùs
* (
uöt64
));

476 
	`TIFFSëFõldBô
(
tif
, 
FIELD_STRIPOFFSETS
);

477 
	`TIFFSëFõldBô
(
tif
, 
FIELD_STRIPBYTECOUNTS
);

479 
	}
}

480 #unde‡
isUn•ecifõd


489 
	$TIFFWrôeCheck
(
TIFF
* 
tif
, 
tûes
, c⁄° * 
moduÀ
)

491 i‡(
tif
->
tif_mode
 =
O_RDONLY
) {

492 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "FileÇot open for writing");

495 i‡(
tûes
 ^ 
	`isTûed
(
tif
)) {

496 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, 
tûes
 ?

502 
	`_TIFFFûlSåûes
–
tif
 );

514 i‡(!
	`TIFFFõldSë
(
tif
, 
FIELD_IMAGEDIMENSIONS
)) {

515 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

519 i‡(
tif
->
tif_dú
.
td_ßm∂e•îpixñ
 == 1) {

526 i‡(!
	`TIFFFõldSë
(
tif
, 
FIELD_PLANARCONFIG
))

527 
tif
->
tif_dú
.
td_∂™¨c⁄fig
 = 
PLANARCONFIG_CONTIG
;

529 i‡(!
	`TIFFFõldSë
(
tif
, 
FIELD_PLANARCONFIG
)) {

530 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

535 i‡(
tif
->
tif_dú
.
td_°rùoff£t
 =
NULL
 && !
	`TIFFSëupSåùs
(tif)) {

536 
tif
->
tif_dú
.
td_n°rùs
 = 0;

537 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "No space for %sárrays",

538 
	`isTûed
(
tif
) ? "tile" : "strip");

541 i‡(
	`isTûed
(
tif
))

543 
tif
->
tif_tûesize
 = 
	`TIFFTûeSize
(tif);

544 i‡(
tif
->
tif_tûesize
 == 0)

548 
tif
->
tif_tûesize
 = (
tmsize_t
)(-1);

549 
tif
->
tif_sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(tif);

550 i‡(
tif
->
tif_sˇ∆öesize
 == 0)

552 
tif
->
tif_Êags
 |
TIFF_BEENWRITING
;

554 
	}
}

560 
	$TIFFWrôeBuf„rSëup
(
TIFF
* 
tif
, * 
bp
, 
tmsize_t
 
size
)

562 c⁄° 
moduÀ
[] = "TIFFWriteBufferSetup";

564 i‡(
tif
->
tif_øwd©a
) {

565 i‡(
tif
->
tif_Êags
 & 
TIFF_MYBUFFER
) {

566 
	`_TIFF‰ì
(
tif
->
tif_øwd©a
);

567 
tif
->
tif_Êags
 &~
TIFF_MYBUFFER
;

569 
tif
->
tif_øwd©a
 = 
NULL
;

571 i‡(
size
 =(
tmsize_t
)(-1)) {

572 
size
 = (
	`isTûed
(
tif
) ?

573 
tif
->
tif_tûesize
 : 
	`TIFFSåùSize
(tif));

577 i‡(
size
 < 8*1024)

578 
size
 = 8*1024;

579 
bp
 = 
NULL
;

581 i‡(
bp
 =
NULL
) {

582 
bp
 = 
	`_TIFFmÆloc
(
size
);

583 i‡(
bp
 =
NULL
) {

584 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "No space for output buffer");

587 
tif
->
tif_Êags
 |
TIFF_MYBUFFER
;

589 
tif
->
tif_Êags
 &~
TIFF_MYBUFFER
;

590 
tif
->
tif_øwd©a
 = (
uöt8
*Ë
bp
;

591 
tif
->
tif_øwd©asize
 = 
size
;

592 
tif
->
tif_øwcc
 = 0;

593 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
;

594 
tif
->
tif_Êags
 |
TIFF_BUFFERSETUP
;

596 
	}
}

602 
	$TIFFGrowSåùs
(
TIFF
* 
tif
, 
uöt32
 
dñè
, c⁄° * 
moduÀ
)

604 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

605 
uöt64
* 
√w_°rùoff£t
;

606 
uöt64
* 
√w_°rùbyãcou¡
;

608 
	`as£π
(
td
->
td_∂™¨c⁄fig
 =
PLANARCONFIG_CONTIG
);

609 
√w_°rùoff£t
 = (
uöt64
*)
	`_TIFFªÆloc
(
td
->
td_°rùoff£t
,

610 (
td
->
td_n°rùs
 + 
dñè
Ë*  (
uöt64
));

611 
√w_°rùbyãcou¡
 = (
uöt64
*)
	`_TIFFªÆloc
(
td
->
td_°rùbyãcou¡
,

612 (
td
->
td_n°rùs
 + 
dñè
Ë*  (
uöt64
));

613 i‡(
√w_°rùoff£t
 =
NULL
 || 
√w_°rùbyãcou¡
 == NULL) {

614 i‡(
√w_°rùoff£t
)

615 
	`_TIFF‰ì
(
√w_°rùoff£t
);

616 i‡(
√w_°rùbyãcou¡
)

617 
	`_TIFF‰ì
(
√w_°rùbyãcou¡
);

618 
td
->
td_n°rùs
 = 0;

619 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "No spaceÅoÉxpand stripárrays");

622 
td
->
td_°rùoff£t
 = 
√w_°rùoff£t
;

623 
td
->
td_°rùbyãcou¡
 = 
√w_°rùbyãcou¡
;

624 
	`_TIFFmem£t
(
td
->
td_°rùoff£t
 +Åd->
td_n°rùs
,

625 0, 
dñè
* (
uöt64
));

626 
	`_TIFFmem£t
(
td
->
td_°rùbyãcou¡
 +Åd->
td_n°rùs
,

627 0, 
dñè
* (
uöt64
));

628 
td
->
td_n°rùs
 +
dñè
;

629 
tif
->
tif_Êags
 |
TIFF_DIRTYDIRECT
;

632 
	}
}

638 
	$TIFFAµídToSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
, 
uöt8
* 
d©a
, 
tmsize_t
 
cc
)

640 c⁄° 
moduÀ
[] = "TIFFAppendToStrip";

641 
TIFFDúe˘‹y
 *
td
 = &
tif
->
tif_dú
;

642 
uöt64
 
m
;

643 
öt64
 
ﬁd_byã_cou¡
 = -1;

645 i‡(
td
->
td_°rùoff£t
[
°rù
] =0 || 
tif
->
tif_curoff
 == 0) {

646 
	`as£π
(
td
->
td_n°rùs
 > 0);

648 if–
td
->
td_°rùbyãcou¡
[
°rù
] != 0

649 && 
td
->
td_°rùoff£t
[
°rù
] != 0

650 && 
td
->
td_°rùbyãcou¡
[
°rù
] >(
uöt64
Ë
cc
 )

659 i‡(!
	`SìkOK
(
tif
, 
td
->
td_°rùoff£t
[
°rù
])) {

660 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

662 ()
tif
->
tif_row
);

672 
td
->
td_°rùoff£t
[
°rù
] = 
	`TIFFSìkFûe
(
tif
, 0, 
SEEK_END
);

673 
tif
->
tif_Êags
 |
TIFF_DIRTYSTRIP
;

676 
tif
->
tif_curoff
 = 
td
->
td_°rùoff£t
[
°rù
];

681 
ﬁd_byã_cou¡
 = 
td
->
td_°rùbyãcou¡
[
°rù
];

682 
td
->
td_°rùbyãcou¡
[
°rù
] = 0;

685 
m
 = 
tif
->
tif_curoff
+
cc
;

686 i‡(!(
tif
->
tif_Êags
&
TIFF_BIGTIFF
))

687 
m
 = (
uöt32
)m;

688 i‡((
m
<
tif
->
tif_curoff
)||(m<(
uöt64
)
cc
))

690 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "Maximum TIFF file sizeÉxceeded");

693 i‡(!
	`WrôeOK
(
tif
, 
d©a
, 
cc
)) {

694 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "WriteÉrrorát scanline %lu",

695 (Ë
tif
->
tif_row
);

698 
tif
->
tif_curoff
 = 
m
;

699 
td
->
td_°rùbyãcou¡
[
°rù
] +
cc
;

701 if–(
öt64
Ë
td
->
td_°rùbyãcou¡
[
°rù
] !
ﬁd_byã_cou¡
 )

702 
tif
->
tif_Êags
 |
TIFF_DIRTYSTRIP
;

705 
	}
}

713 
	$TIFFFlushD©a1
(
TIFF
* 
tif
)

715 i‡(
tif
->
tif_øwcc
 > 0 &&Åif->
tif_Êags
 & 
TIFF_BUF4WRITE
 ) {

716 i‡(!
	`isFûlOrdî
(
tif
,Åif->
tif_dú
.
td_fûl‹dî
) &&

717 (
tif
->
tif_Êags
 & 
TIFF_NOBITREV
) == 0)

718 
	`TIFFRevî£Bôs
((
uöt8
*)
tif
->
tif_øwd©a
,

719 
tif
->
tif_øwcc
);

720 i‡(!
	`TIFFAµídToSåù
(
tif
,

721 
	`isTûed
(
tif
Ë?Åif->
tif_cuπûe
 :Åif->
tif_cur°rù
,

722 
tif
->
tif_øwd©a
,Åif->
tif_øwcc
))

724 
tif
->
tif_øwcc
 = 0;

725 
tif
->
tif_øw˝
 =Åif->
tif_øwd©a
;

728 
	}
}

737 
	$TIFFSëWrôeOff£t
(
TIFF
* 
tif
, 
toff_t
 
off
)

739 
tif
->
tif_curoff
 = 
off
;

740 
	}
}

	@libtiff/tif_zip.c

27 
	~"tiffi›.h
"

28 #ifde‡
ZIP_SUPPORT


49 
	~"tif_¥edi˘.h
"

50 
	~"zlib.h
"

52 
	~<°dio.h
>

60 #i‡!
deföed
(
Z_NO_COMPRESSION
Ë|| !deföed(
Z_DEFLATED
)

69 
TIFFPªdi˘‹Sèã
 
	m¥edi˘
;

70 
z_°ªam
 
	m°ªam
;

71 
	mzùquÆôy
;

72 
	m°©e
;

73 
	#ZSTATE_INIT_DECODE
 0x01

	)

74 
	#ZSTATE_INIT_ENCODE
 0x02

	)

76 
TIFFVGëMëhod
 
	mvgë∑ª¡
;

77 
TIFFVSëMëhod
 
	mv£ç¨ít
;

78 } 
	tZIPSèã
;

80 
	#ZSèã
(
tif
Ë((
ZIPSèã
*Ë—if)->
tif_d©a
)

	)

81 
	#DecodîSèã
(
tif
Ë
	`ZSèã
—if)

	)

82 
	#EncodîSèã
(
tif
Ë
	`ZSèã
—if)

	)

84 
ZIPEncode
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

85 
ZIPDecode
(
TIFF
* 
tif
, 
uöt8
* 
›
, 
tmsize_t
 
occ
, 
uöt16
 
s
);

88 
	$ZIPFixupTags
(
TIFF
* 
tif
)

90 (Ë
tif
;

92 
	}
}

95 
	$ZIPSëupDecode
(
TIFF
* 
tif
)

97 c⁄° 
moduÀ
[] = "ZIPSetupDecode";

98 
ZIPSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

100 
	`as£π
(
•
 !
NULL
);

103 i‡(
•
->
°©e
 & 
ZSTATE_INIT_ENCODE
) {

104 
	`deÊ©eEnd
(&
•
->
°ªam
);

105 
•
->
°©e
 = 0;

108 i‡(
	`öÊ©eInô
(&
•
->
°ªam
Ë!
Z_OK
) {

109 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "%s", 
•
->
°ªam
.
msg
);

112 
•
->
°©e
 |
ZSTATE_INIT_DECODE
;

115 
	}
}

121 
	$ZIPPªDecode
(
TIFF
* 
tif
, 
uöt16
 
s
)

123 c⁄° 
moduÀ
[] = "ZIPPreDecode";

124 
ZIPSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

126 (Ë
s
;

127 
	`as£π
(
•
 !
NULL
);

129 if–(
•
->
°©e
 & 
ZSTATE_INIT_DECODE
) == 0 )

130 
tif
->
	`tif_£tupdecode
(Åif );

132 
•
->
°ªam
.
√xt_ö
 = 
tif
->
tif_øwd©a
;

133 
	`as£π
((
•
->
°ªam
.
avaû_ö
)==4);

137 
•
->
°ªam
.
avaû_ö
 = (
uI¡
Ë
tif
->
tif_øwcc
;

138 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_ö
 !
tif
->
tif_øwcc
)

140 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLib cannot deal with buffersÅhis size");

143  (
	`öÊ©eRe£t
(&
•
->
°ªam
Ë=
Z_OK
);

144 
	}
}

147 
	$ZIPDecode
(
TIFF
* 
tif
, 
uöt8
* 
›
, 
tmsize_t
 
occ
, 
uöt16
 
s
)

149 c⁄° 
moduÀ
[] = "ZIPDecode";

150 
ZIPSèã
* 
•
 = 
	`DecodîSèã
(
tif
);

152 (Ë
s
;

153 
	`as£π
(
•
 !
NULL
);

154 
	`as£π
(
•
->
°©e
 =
ZSTATE_INIT_DECODE
);

156 
•
->
°ªam
.
√xt_ö
 = 
tif
->
tif_øw˝
;

157 
•
->
°ªam
.
avaû_ö
 = (
uI¡
Ë
tif
->
tif_øwcc
;

159 
•
->
°ªam
.
√xt_out
 = 
›
;

160 
	`as£π
((
•
->
°ªam
.
avaû_out
)==4);

164 
•
->
°ªam
.
avaû_out
 = (
uI¡
Ë
occ
;

165 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_out
 !
occ
)

167 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLib cannot deal with buffersÅhis size");

171 
°©e
 = 
	`öÊ©e
(&
•
->
°ªam
, 
Z_PARTIAL_FLUSH
);

172 i‡(
°©e
 =
Z_STREAM_END
)

174 i‡(
°©e
 =
Z_DATA_ERROR
) {

175 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

177 (Ë
tif
->
tif_row
, 
•
->
°ªam
.
msg
);

178 i‡(
	`öÊ©eSync
(&
•
->
°ªam
Ë!
Z_OK
)

182 i‡(
°©e
 !
Z_OK
) {

183 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLibÉrror: %s",

184 
•
->
°ªam
.
msg
);

187 } 
•
->
°ªam
.
avaû_out
 > 0);

188 i‡(
•
->
°ªam
.
avaû_out
 != 0) {

189 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

190 "NŸÉnough d©®© sˇ∆öê%lu (sh‹à" 
TIFF_UINT64_FORMAT
 " bytes)",

191 (Ë
tif
->
tif_row
, (
TIFF_UINT64_T
Ë
•
->
°ªam
.
avaû_out
);

195 
tif
->
tif_øw˝
 = 
•
->
°ªam
.
√xt_ö
;

196 
tif
->
tif_øwcc
 = 
•
->
°ªam
.
avaû_ö
;

199 
	}
}

202 
	$ZIPSëupEncode
(
TIFF
* 
tif
)

204 c⁄° 
moduÀ
[] = "ZIPSetupEncode";

205 
ZIPSèã
* 
•
 = 
	`EncodîSèã
(
tif
);

207 
	`as£π
(
•
 !
NULL
);

208 i‡(
•
->
°©e
 & 
ZSTATE_INIT_DECODE
) {

209 
	`öÊ©eEnd
(&
•
->
°ªam
);

210 
•
->
°©e
 = 0;

213 i‡(
	`deÊ©eInô
(&
•
->
°ªam
, sp->
zùquÆôy
Ë!
Z_OK
) {

214 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "%s", 
•
->
°ªam
.
msg
);

217 
•
->
°©e
 |
ZSTATE_INIT_ENCODE
;

220 
	}
}

226 
	$ZIPPªEncode
(
TIFF
* 
tif
, 
uöt16
 
s
)

228 c⁄° 
moduÀ
[] = "ZIPPreEncode";

229 
ZIPSèã
 *
•
 = 
	`EncodîSèã
(
tif
);

231 (Ë
s
;

232 
	`as£π
(
•
 !
NULL
);

233 if–
•
->
°©e
 !
ZSTATE_INIT_ENCODE
 )

234 
tif
->
	`tif_£tu≥ncode
(Åif );

236 
•
->
°ªam
.
√xt_out
 = 
tif
->
tif_øwd©a
;

237 
	`as£π
((
•
->
°ªam
.
avaû_out
)==4);

241 
•
->
°ªam
.
avaû_out
 = 
tif
->
tif_øwd©asize
;

242 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_out
 !
tif
->
tif_øwd©asize
)

244 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLib cannot deal with buffersÅhis size");

247  (
	`deÊ©eRe£t
(&
•
->
°ªam
Ë=
Z_OK
);

248 
	}
}

254 
	$ZIPEncode
(
TIFF
* 
tif
, 
uöt8
* 
bp
, 
tmsize_t
 
cc
, 
uöt16
 
s
)

256 c⁄° 
moduÀ
[] = "ZIPEncode";

257 
ZIPSèã
 *
•
 = 
	`EncodîSèã
(
tif
);

259 
	`as£π
(
•
 !
NULL
);

260 
	`as£π
(
•
->
°©e
 =
ZSTATE_INIT_ENCODE
);

262 (Ë
s
;

263 
•
->
°ªam
.
√xt_ö
 = 
bp
;

264 
	`as£π
((
•
->
°ªam
.
avaû_ö
)==4);

268 
•
->
°ªam
.
avaû_ö
 = (
uI¡
Ë
cc
;

269 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_ö
 !
cc
)

271 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLib cannot deal with buffersÅhis size");

275 i‡(
	`deÊ©e
(&
•
->
°ªam
, 
Z_NO_FLUSH
Ë!
Z_OK
) {

276 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "EncoderÉrror: %s",

277 
•
->
°ªam
.
msg
);

280 i‡(
•
->
°ªam
.
avaû_out
 == 0) {

281 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
;

282 
	`TIFFFlushD©a1
(
tif
);

283 
•
->
°ªam
.
√xt_out
 = 
tif
->
tif_øwd©a
;

284 
•
->
°ªam
.
avaû_out
 = (
uI¡
Ë
tif
->
tif_øwd©asize
;

286 } 
•
->
°ªam
.
avaû_ö
 > 0);

288 
	}
}

295 
	$ZIPPo°Encode
(
TIFF
* 
tif
)

297 c⁄° 
moduÀ
[] = "ZIPPostEncode";

298 
ZIPSèã
 *
•
 = 
	`EncodîSèã
(
tif
);

299 
°©e
;

301 
•
->
°ªam
.
avaû_ö
 = 0;

303 
°©e
 = 
	`deÊ©e
(&
•
->
°ªam
, 
Z_FINISH
);

304 
°©e
) {

305 
Z_STREAM_END
:

306 
Z_OK
:

307 i‡((
tmsize_t
)
•
->
°ªam
.
avaû_out
 !
tif
->
tif_øwd©asize
)

309 
tif
->
tif_øwcc
 =Åif->
tif_øwd©asize
 - 
•
->
°ªam
.
avaû_out
;

310 
	`TIFFFlushD©a1
(
tif
);

311 
•
->
°ªam
.
√xt_out
 = 
tif
->
tif_øwd©a
;

312 
•
->
°ªam
.
avaû_out
 = (
uI¡
Ë
tif
->
tif_øwd©asize
;

316 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLibÉrror: %s",

317 
•
->
°ªam
.
msg
);

320 } 
°©e
 !
Z_STREAM_END
);

322 
	}
}

325 
	$ZIPCÀ™up
(
TIFF
* 
tif
)

327 
ZIPSèã
* 
•
 = 
	`ZSèã
(
tif
);

329 
	`as£π
(
•
 != 0);

331 ()
	`TIFFPªdi˘‹CÀ™up
(
tif
);

333 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
•
->
vgë∑ª¡
;

334 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
•
->
v£ç¨ít
;

336 i‡(
•
->
°©e
 & 
ZSTATE_INIT_ENCODE
) {

337 
	`deÊ©eEnd
(&
•
->
°ªam
);

338 
•
->
°©e
 = 0;

339 } if–
•
->
°©e
 & 
ZSTATE_INIT_DECODE
) {

340 
	`öÊ©eEnd
(&
•
->
°ªam
);

341 
•
->
°©e
 = 0;

343 
	`_TIFF‰ì
(
•
);

344 
tif
->
tif_d©a
 = 
NULL
;

346 
	`_TIFFSëDeÁu…Com¥essi⁄Sèã
(
tif
);

347 
	}
}

350 
	$ZIPVSëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

352 c⁄° 
moduÀ
[] = "ZIPVSetField";

353 
ZIPSèã
* 
•
 = 
	`ZSèã
(
tif
);

355 
èg
) {

356 
TIFFTAG_ZIPQUALITY
:

357 
•
->
zùquÆôy
 = (Ë
	`va_¨g
(
≠
, );

358 i‡–
•
->
°©e
&
ZSTATE_INIT_ENCODE
 ) {

359 i‡(
	`deÊ©eP¨ams
(&
•
->
°ªam
,

360 
•
->
zùquÆôy
, 
Z_DEFAULT_STRATEGY
Ë!
Z_OK
) {

361 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
, "ZLibÉrror: %s",

362 
•
->
°ªam
.
msg
);

368  (*
•
->
v£ç¨ít
)(
tif
, 
èg
, 
≠
);

371 
	}
}

374 
	$ZIPVGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
)

376 
ZIPSèã
* 
•
 = 
	`ZSèã
(
tif
);

378 
èg
) {

379 
TIFFTAG_ZIPQUALITY
:

380 *
	`va_¨g
(
≠
, *Ë
•
->
zùquÆôy
;

383  (*
•
->
vgë∑ª¡
)(
tif
, 
èg
, 
≠
);

386 
	}
}

388 c⁄° 
TIFFFõld
 
	gzùFõlds
[] = {

389 { 
TIFFTAG_ZIPQUALITY
, 0, 0, 
TIFF_ANY
, 0, 
TIFF_SETGET_INT
, 
TIFF_SETGET_UNDEFINED
, 
FIELD_PSEUDO
, 
TRUE
, 
FALSE
, "", 
NULL
 },

393 
	$TIFFInôZIP
(
TIFF
* 
tif
, 
scheme
)

395 c⁄° 
moduÀ
[] = "TIFFInitZIP";

396 
ZIPSèã
* 
•
;

398 
	`as£π
–(
scheme
 =
COMPRESSION_DEFLATE
)

399 || (
scheme
 =
COMPRESSION_ADOBE_DEFLATE
));

404 i‡(!
	`_TIFFMîgeFõlds
(
tif
, 
zùFõlds
, 
	`TIFFAºayCou¡
(zipFields))) {

405 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

413 
tif
->
tif_d©a
 = (
uöt8
*Ë
	`_TIFFmÆloc
( (
ZIPSèã
));

414 i‡(
tif
->
tif_d©a
 =
NULL
)

415 
bad
;

416 
•
 = 
	`ZSèã
(
tif
);

417 
•
->
°ªam
.
zÆloc
 = 
NULL
;

418 
•
->
°ªam
.
z‰ì
 = 
NULL
;

419 
•
->
°ªam
.
›aque
 = 
NULL
;

420 
•
->
°ªam
.
d©a_ty≥
 = 
Z_BINARY
;

425 
•
->
vgë∑ª¡
 = 
tif
->
tif_ègmëhods
.
vgëfõld
;

426 
tif
->
tif_ègmëhods
.
vgëfõld
 = 
ZIPVGëFõld
;

427 
•
->
v£ç¨ít
 = 
tif
->
tif_ègmëhods
.
v£tfõld
;

428 
tif
->
tif_ègmëhods
.
v£tfõld
 = 
ZIPVSëFõld
;

431 
•
->
zùquÆôy
 = 
Z_DEFAULT_COMPRESSION
;

432 
•
->
°©e
 = 0;

437 
tif
->
tif_fixu±ags
 = 
ZIPFixupTags
;

438 
tif
->
tif_£tupdecode
 = 
ZIPSëupDecode
;

439 
tif
->
tif_¥edecode
 = 
ZIPPªDecode
;

440 
tif
->
tif_decodîow
 = 
ZIPDecode
;

441 
tif
->
tif_decode°rù
 = 
ZIPDecode
;

442 
tif
->
tif_decodëûe
 = 
ZIPDecode
;

443 
tif
->
tif_£tu≥ncode
 = 
ZIPSëupEncode
;

444 
tif
->
tif_¥ìncode
 = 
ZIPPªEncode
;

445 
tif
->
tif_po°ícode
 = 
ZIPPo°Encode
;

446 
tif
->
tif_ícodîow
 = 
ZIPEncode
;

447 
tif
->
tif_ícode°rù
 = 
ZIPEncode
;

448 
tif
->
tif_ícodëûe
 = 
ZIPEncode
;

449 
tif
->
tif_˛ónup
 = 
ZIPCÀ™up
;

453 (Ë
	`TIFFPªdi˘‹Inô
(
tif
);

455 
bad
:

456 
	`TIFFEº‹Ext
(
tif
->
tif_˛õ¡d©a
, 
moduÀ
,

459 
	}
}

	@libtiff/tiff.h

27 #i‚de‡
_TIFF_


28 
	#_TIFF_


	)

30 
	~"tiffc⁄f.h
"

50 
	#TIFF_VERSION_CLASSIC
 42

	)

51 
	#TIFF_VERSION_BIG
 43

	)

53 
	#TIFF_BIGENDIAN
 0x4d4d

	)

54 
	#TIFF_LITTLEENDIAN
 0x4949

	)

55 
	#MDI_LITTLEENDIAN
 0x5045

	)

56 
	#MDI_BIGENDIAN
 0x4550

	)

68 
TIFF_INT8_T
 
	töt8
;

69 
TIFF_UINT8_T
 
	tuöt8
;

71 
TIFF_INT16_T
 
	töt16
;

72 
TIFF_UINT16_T
 
	tuöt16
;

74 
TIFF_INT32_T
 
	töt32
;

75 
TIFF_UINT32_T
 
	tuöt32
;

77 
TIFF_INT64_T
 
	töt64
;

78 
TIFF_UINT64_T
 
	tuöt64
;

88 
	tuöt16_v≠
;

94 
uöt16
 
	mtiff_magic
;

95 
uöt16
 
	mtiff_vîsi⁄
;

96 } 
	tTIFFHódîComm⁄
;

98 
uöt16
 
	mtiff_magic
;

99 
uöt16
 
	mtiff_vîsi⁄
;

100 
uöt32
 
	mtiff_dúoff
;

101 } 
	tTIFFHódîCœssic
;

103 
uöt16
 
	mtiff_magic
;

104 
uöt16
 
	mtiff_vîsi⁄
;

105 
uöt16
 
	mtiff_off£tsize
;

106 
uöt16
 
	mtiff_unu£d
;

107 
uöt64
 
	mtiff_dúoff
;

108 } 
	tTIFFHódîBig
;

126 
	mTIFF_NOTYPE
 = 0,

127 
	mTIFF_BYTE
 = 1,

128 
	mTIFF_ASCII
 = 2,

129 
	mTIFF_SHORT
 = 3,

130 
	mTIFF_LONG
 = 4,

131 
	mTIFF_RATIONAL
 = 5,

132 
	mTIFF_SBYTE
 = 6,

133 
	mTIFF_UNDEFINED
 = 7,

134 
	mTIFF_SSHORT
 = 8,

135 
	mTIFF_SLONG
 = 9,

136 
	mTIFF_SRATIONAL
 = 10,

137 
	mTIFF_FLOAT
 = 11,

138 
	mTIFF_DOUBLE
 = 12,

139 
	mTIFF_IFD
 = 13,

140 
	mTIFF_LONG8
 = 16,

141 
	mTIFF_SLONG8
 = 17,

142 
	mTIFF_IFD8
 = 18

143 } 
	tTIFFD©aTy≥
;

148 
	#TIFFTAG_SUBFILETYPE
 254

	)

149 
	#FILETYPE_REDUCEDIMAGE
 0x1

	)

150 
	#FILETYPE_PAGE
 0x2

	)

151 
	#FILETYPE_MASK
 0x4

	)

152 
	#TIFFTAG_OSUBFILETYPE
 255

	)

153 
	#OFILETYPE_IMAGE
 1

	)

154 
	#OFILETYPE_REDUCEDIMAGE
 2

	)

155 
	#OFILETYPE_PAGE
 3

	)

156 
	#TIFFTAG_IMAGEWIDTH
 256

	)

157 
	#TIFFTAG_IMAGELENGTH
 257

	)

158 
	#TIFFTAG_BITSPERSAMPLE
 258

	)

159 
	#TIFFTAG_COMPRESSION
 259

	)

160 
	#COMPRESSION_NONE
 1

	)

161 
	#COMPRESSION_CCITTRLE
 2

	)

162 
	#COMPRESSION_CCITTFAX3
 3

	)

163 
	#COMPRESSION_CCITT_T4
 3

	)

164 
	#COMPRESSION_CCITTFAX4
 4

	)

165 
	#COMPRESSION_CCITT_T6
 4

	)

166 
	#COMPRESSION_LZW
 5

	)

167 
	#COMPRESSION_OJPEG
 6

	)

168 
	#COMPRESSION_JPEG
 7

	)

169 
	#COMPRESSION_NEXT
 32766

	)

170 
	#COMPRESSION_CCITTRLEW
 32771

	)

171 
	#COMPRESSION_PACKBITS
 32773

	)

172 
	#COMPRESSION_THUNDERSCAN
 32809

	)

174 
	#COMPRESSION_IT8CTPAD
 32895

	)

175 
	#COMPRESSION_IT8LW
 32896

	)

176 
	#COMPRESSION_IT8MP
 32897

	)

177 
	#COMPRESSION_IT8BL
 32898

	)

179 
	#COMPRESSION_PIXARFILM
 32908

	)

180 
	#COMPRESSION_PIXARLOG
 32909

	)

181 
	#COMPRESSION_DEFLATE
 32946

	)

182 
	#COMPRESSION_ADOBE_DEFLATE
 8

	)

185 
	#COMPRESSION_DCS
 32947

	)

186 
	#COMPRESSION_JBIG
 34661

	)

187 
	#COMPRESSION_SGILOG
 34676

	)

188 
	#COMPRESSION_SGILOG24
 34677

	)

189 
	#COMPRESSION_JP2000
 34712

	)

190 
	#COMPRESSION_LZMA
 34925

	)

191 
	#TIFFTAG_PHOTOMETRIC
 262

	)

192 
	#PHOTOMETRIC_MINISWHITE
 0

	)

193 
	#PHOTOMETRIC_MINISBLACK
 1

	)

194 
	#PHOTOMETRIC_RGB
 2

	)

195 
	#PHOTOMETRIC_PALETTE
 3

	)

196 
	#PHOTOMETRIC_MASK
 4

	)

197 
	#PHOTOMETRIC_SEPARATED
 5

	)

198 
	#PHOTOMETRIC_YCBCR
 6

	)

199 
	#PHOTOMETRIC_CIELAB
 8

	)

200 
	#PHOTOMETRIC_ICCLAB
 9

	)

201 
	#PHOTOMETRIC_ITULAB
 10

	)

202 
	#PHOTOMETRIC_LOGL
 32844

	)

203 
	#PHOTOMETRIC_LOGLUV
 32845

	)

204 
	#TIFFTAG_THRESHHOLDING
 263

	)

205 
	#THRESHHOLD_BILEVEL
 1

	)

206 
	#THRESHHOLD_HALFTONE
 2

	)

207 
	#THRESHHOLD_ERRORDIFFUSE
 3

	)

208 
	#TIFFTAG_CELLWIDTH
 264

	)

209 
	#TIFFTAG_CELLLENGTH
 265

	)

210 
	#TIFFTAG_FILLORDER
 266

	)

211 
	#FILLORDER_MSB2LSB
 1

	)

212 
	#FILLORDER_LSB2MSB
 2

	)

213 
	#TIFFTAG_DOCUMENTNAME
 269

	)

214 
	#TIFFTAG_IMAGEDESCRIPTION
 270

	)

215 
	#TIFFTAG_MAKE
 271

	)

216 
	#TIFFTAG_MODEL
 272

	)

217 
	#TIFFTAG_STRIPOFFSETS
 273

	)

218 
	#TIFFTAG_ORIENTATION
 274

	)

219 
	#ORIENTATION_TOPLEFT
 1

	)

220 
	#ORIENTATION_TOPRIGHT
 2

	)

221 
	#ORIENTATION_BOTRIGHT
 3

	)

222 
	#ORIENTATION_BOTLEFT
 4

	)

223 
	#ORIENTATION_LEFTTOP
 5

	)

224 
	#ORIENTATION_RIGHTTOP
 6

	)

225 
	#ORIENTATION_RIGHTBOT
 7

	)

226 
	#ORIENTATION_LEFTBOT
 8

	)

227 
	#TIFFTAG_SAMPLESPERPIXEL
 277

	)

228 
	#TIFFTAG_ROWSPERSTRIP
 278

	)

229 
	#TIFFTAG_STRIPBYTECOUNTS
 279

	)

230 
	#TIFFTAG_MINSAMPLEVALUE
 280

	)

231 
	#TIFFTAG_MAXSAMPLEVALUE
 281

	)

232 
	#TIFFTAG_XRESOLUTION
 282

	)

233 
	#TIFFTAG_YRESOLUTION
 283

	)

234 
	#TIFFTAG_PLANARCONFIG
 284

	)

235 
	#PLANARCONFIG_CONTIG
 1

	)

236 
	#PLANARCONFIG_SEPARATE
 2

	)

237 
	#TIFFTAG_PAGENAME
 285

	)

238 
	#TIFFTAG_XPOSITION
 286

	)

239 
	#TIFFTAG_YPOSITION
 287

	)

240 
	#TIFFTAG_FREEOFFSETS
 288

	)

241 
	#TIFFTAG_FREEBYTECOUNTS
 289

	)

242 
	#TIFFTAG_GRAYRESPONSEUNIT
 290

	)

243 
	#GRAYRESPONSEUNIT_10S
 1

	)

244 
	#GRAYRESPONSEUNIT_100S
 2

	)

245 
	#GRAYRESPONSEUNIT_1000S
 3

	)

246 
	#GRAYRESPONSEUNIT_10000S
 4

	)

247 
	#GRAYRESPONSEUNIT_100000S
 5

	)

248 
	#TIFFTAG_GRAYRESPONSECURVE
 291

	)

249 
	#TIFFTAG_GROUP3OPTIONS
 292

	)

250 
	#TIFFTAG_T4OPTIONS
 292

	)

251 
	#GROUP3OPT_2DENCODING
 0x1

	)

252 
	#GROUP3OPT_UNCOMPRESSED
 0x2

	)

253 
	#GROUP3OPT_FILLBITS
 0x4

	)

254 
	#TIFFTAG_GROUP4OPTIONS
 293

	)

255 
	#TIFFTAG_T6OPTIONS
 293

	)

256 
	#GROUP4OPT_UNCOMPRESSED
 0x2

	)

257 
	#TIFFTAG_RESOLUTIONUNIT
 296

	)

258 
	#RESUNIT_NONE
 1

	)

259 
	#RESUNIT_INCH
 2

	)

260 
	#RESUNIT_CENTIMETER
 3

	)

261 
	#TIFFTAG_PAGENUMBER
 297

	)

262 
	#TIFFTAG_COLORRESPONSEUNIT
 300

	)

263 
	#COLORRESPONSEUNIT_10S
 1

	)

264 
	#COLORRESPONSEUNIT_100S
 2

	)

265 
	#COLORRESPONSEUNIT_1000S
 3

	)

266 
	#COLORRESPONSEUNIT_10000S
 4

	)

267 
	#COLORRESPONSEUNIT_100000S
 5

	)

268 
	#TIFFTAG_TRANSFERFUNCTION
 301

	)

269 
	#TIFFTAG_SOFTWARE
 305

	)

270 
	#TIFFTAG_DATETIME
 306

	)

271 
	#TIFFTAG_ARTIST
 315

	)

272 
	#TIFFTAG_HOSTCOMPUTER
 316

	)

273 
	#TIFFTAG_PREDICTOR
 317

	)

274 
	#PREDICTOR_NONE
 1

	)

275 
	#PREDICTOR_HORIZONTAL
 2

	)

276 
	#PREDICTOR_FLOATINGPOINT
 3

	)

277 
	#TIFFTAG_WHITEPOINT
 318

	)

278 
	#TIFFTAG_PRIMARYCHROMATICITIES
 319

	)

279 
	#TIFFTAG_COLORMAP
 320

	)

280 
	#TIFFTAG_HALFTONEHINTS
 321

	)

281 
	#TIFFTAG_TILEWIDTH
 322

	)

282 
	#TIFFTAG_TILELENGTH
 323

	)

283 
	#TIFFTAG_TILEOFFSETS
 324

	)

284 
	#TIFFTAG_TILEBYTECOUNTS
 325

	)

285 
	#TIFFTAG_BADFAXLINES
 326

	)

286 
	#TIFFTAG_CLEANFAXDATA
 327

	)

287 
	#CLEANFAXDATA_CLEAN
 0

	)

288 
	#CLEANFAXDATA_REGENERATED
 1

	)

289 
	#CLEANFAXDATA_UNCLEAN
 2

	)

290 
	#TIFFTAG_CONSECUTIVEBADFAXLINES
 328

	)

291 
	#TIFFTAG_SUBIFD
 330

	)

292 
	#TIFFTAG_INKSET
 332

	)

293 
	#INKSET_CMYK
 1

	)

294 
	#INKSET_MULTIINK
 2

	)

295 
	#TIFFTAG_INKNAMES
 333

	)

296 
	#TIFFTAG_NUMBEROFINKS
 334

	)

297 
	#TIFFTAG_DOTRANGE
 336

	)

298 
	#TIFFTAG_TARGETPRINTER
 337

	)

299 
	#TIFFTAG_EXTRASAMPLES
 338

	)

300 
	#EXTRASAMPLE_UNSPECIFIED
 0

	)

301 
	#EXTRASAMPLE_ASSOCALPHA
 1

	)

302 
	#EXTRASAMPLE_UNASSALPHA
 2

	)

303 
	#TIFFTAG_SAMPLEFORMAT
 339

	)

304 
	#SAMPLEFORMAT_UINT
 1

	)

305 
	#SAMPLEFORMAT_INT
 2

	)

306 
	#SAMPLEFORMAT_IEEEFP
 3

	)

307 
	#SAMPLEFORMAT_VOID
 4

	)

308 
	#SAMPLEFORMAT_COMPLEXINT
 5

	)

309 
	#SAMPLEFORMAT_COMPLEXIEEEFP
 6

	)

310 
	#TIFFTAG_SMINSAMPLEVALUE
 340

	)

311 
	#TIFFTAG_SMAXSAMPLEVALUE
 341

	)

312 
	#TIFFTAG_CLIPPATH
 343

	)

314 
	#TIFFTAG_XCLIPPATHUNITS
 344

	)

316 
	#TIFFTAG_YCLIPPATHUNITS
 345

	)

318 
	#TIFFTAG_INDEXED
 346

	)

320 
	#TIFFTAG_JPEGTABLES
 347

	)

321 
	#TIFFTAG_OPIPROXY
 351

	)

326 
	#TIFFTAG_JPEGPROC
 512

	)

327 
	#JPEGPROC_BASELINE
 1

	)

328 
	#JPEGPROC_LOSSLESS
 14

	)

329 
	#TIFFTAG_JPEGIFOFFSET
 513

	)

330 
	#TIFFTAG_JPEGIFBYTECOUNT
 514

	)

331 
	#TIFFTAG_JPEGRESTARTINTERVAL
 515

	)

332 
	#TIFFTAG_JPEGLOSSLESSPREDICTORS
 517

	)

333 
	#TIFFTAG_JPEGPOINTTRANSFORM
 518

	)

334 
	#TIFFTAG_JPEGQTABLES
 519

	)

335 
	#TIFFTAG_JPEGDCTABLES
 520

	)

336 
	#TIFFTAG_JPEGACTABLES
 521

	)

337 
	#TIFFTAG_YCBCRCOEFFICIENTS
 529

	)

338 
	#TIFFTAG_YCBCRSUBSAMPLING
 530

	)

339 
	#TIFFTAG_YCBCRPOSITIONING
 531

	)

340 
	#YCBCRPOSITION_CENTERED
 1

	)

341 
	#YCBCRPOSITION_COSITED
 2

	)

342 
	#TIFFTAG_REFERENCEBLACKWHITE
 532

	)

343 
	#TIFFTAG_XMLPACKET
 700

	)

346 
	#TIFFTAG_OPIIMAGEID
 32781

	)

349 
	#TIFFTAG_REFPTS
 32953

	)

350 
	#TIFFTAG_REGIONTACKPOINT
 32954

	)

351 
	#TIFFTAG_REGIONWARPCORNERS
 32955

	)

352 
	#TIFFTAG_REGIONAFFINE
 32956

	)

354 
	#TIFFTAG_MATTEING
 32995

	)

355 
	#TIFFTAG_DATATYPE
 32996

	)

356 
	#TIFFTAG_IMAGEDEPTH
 32997

	)

357 
	#TIFFTAG_TILEDEPTH
 32998

	)

366 
	#TIFFTAG_PIXAR_IMAGEFULLWIDTH
 33300

	)

367 
	#TIFFTAG_PIXAR_IMAGEFULLLENGTH
 33301

	)

371 
	#TIFFTAG_PIXAR_TEXTUREFORMAT
 33302

	)

372 
	#TIFFTAG_PIXAR_WRAPMODES
 33303

	)

373 
	#TIFFTAG_PIXAR_FOVCOT
 33304

	)

374 
	#TIFFTAG_PIXAR_MATRIX_WORLDTOSCREEN
 33305

	)

375 
	#TIFFTAG_PIXAR_MATRIX_WORLDTOCAMERA
 33306

	)

377 
	#TIFFTAG_WRITERSERIALNUMBER
 33405

	)

379 
	#TIFFTAG_COPYRIGHT
 33432

	)

381 
	#TIFFTAG_RICHTIFFIPTC
 33723

	)

383 
	#TIFFTAG_IT8SITE
 34016

	)

384 
	#TIFFTAG_IT8COLORSEQUENCE
 34017

	)

385 
	#TIFFTAG_IT8HEADER
 34018

	)

386 
	#TIFFTAG_IT8RASTERPADDING
 34019

	)

387 
	#TIFFTAG_IT8BITSPERRUNLENGTH
 34020

	)

388 
	#TIFFTAG_IT8BITSPEREXTENDEDRUNLENGTH
 34021

	)

389 
	#TIFFTAG_IT8COLORTABLE
 34022

	)

390 
	#TIFFTAG_IT8IMAGECOLORINDICATOR
 34023

	)

391 
	#TIFFTAG_IT8BKGCOLORINDICATOR
 34024

	)

392 
	#TIFFTAG_IT8IMAGECOLORVALUE
 34025

	)

393 
	#TIFFTAG_IT8BKGCOLORVALUE
 34026

	)

394 
	#TIFFTAG_IT8PIXELINTENSITYRANGE
 34027

	)

395 
	#TIFFTAG_IT8TRANSPARENCYINDICATOR
 34028

	)

396 
	#TIFFTAG_IT8COLORCHARACTERIZATION
 34029

	)

397 
	#TIFFTAG_IT8HCUSAGE
 34030

	)

398 
	#TIFFTAG_IT8TRAPINDICATOR
 34031

	)

400 
	#TIFFTAG_IT8CMYKEQUIVALENT
 34032

	)

402 
	#TIFFTAG_FRAMECOUNT
 34232

	)

404 
	#TIFFTAG_PHOTOSHOP
 34377

	)

406 
	#TIFFTAG_EXIFIFD
 34665

	)

408 
	#TIFFTAG_ICCPROFILE
 34675

	)

410 
	#TIFFTAG_JBIGOPTIONS
 34750

	)

411 
	#TIFFTAG_GPSIFD
 34853

	)

413 
	#TIFFTAG_FAXRECVPARAMS
 34908

	)

414 
	#TIFFTAG_FAXSUBADDRESS
 34909

	)

415 
	#TIFFTAG_FAXRECVTIME
 34910

	)

416 
	#TIFFTAG_FAXDCS
 34911

	)

418 
	#TIFFTAG_STONITS
 37439

	)

420 
	#TIFFTAG_FEDEX_EDR
 34929

	)

421 
	#TIFFTAG_INTEROPERABILITYIFD
 40965

	)

423 
	#TIFFTAG_DNGVERSION
 50706

	)

424 
	#TIFFTAG_DNGBACKWARDVERSION
 50707

	)

425 
	#TIFFTAG_UNIQUECAMERAMODEL
 50708

	)

426 
	#TIFFTAG_LOCALIZEDCAMERAMODEL
 50709

	)

428 
	#TIFFTAG_CFAPLANECOLOR
 50710

	)

430 
	#TIFFTAG_CFALAYOUT
 50711

	)

431 
	#TIFFTAG_LINEARIZATIONTABLE
 50712

	)

432 
	#TIFFTAG_BLACKLEVELREPEATDIM
 50713

	)

434 
	#TIFFTAG_BLACKLEVEL
 50714

	)

435 
	#TIFFTAG_BLACKLEVELDELTAH
 50715

	)

437 
	#TIFFTAG_BLACKLEVELDELTAV
 50716

	)

439 
	#TIFFTAG_WHITELEVEL
 50717

	)

441 
	#TIFFTAG_DEFAULTSCALE
 50718

	)

442 
	#TIFFTAG_DEFAULTCROPORIGIN
 50719

	)

444 
	#TIFFTAG_DEFAULTCROPSIZE
 50720

	)

446 
	#TIFFTAG_COLORMATRIX1
 50721

	)

448 
	#TIFFTAG_COLORMATRIX2
 50722

	)

450 
	#TIFFTAG_CAMERACALIBRATION1
 50723

	)

451 
	#TIFFTAG_CAMERACALIBRATION2
 50724

	)

452 
	#TIFFTAG_REDUCTIONMATRIX1
 50725

	)

454 
	#TIFFTAG_REDUCTIONMATRIX2
 50726

	)

456 
	#TIFFTAG_ANALOGBALANCE
 50727

	)

458 
	#TIFFTAG_ASSHOTNEUTRAL
 50728

	)

460 
	#TIFFTAG_ASSHOTWHITEXY
 50729

	)

463 
	#TIFFTAG_BASELINEEXPOSURE
 50730

	)

465 
	#TIFFTAG_BASELINENOISE
 50731

	)

466 
	#TIFFTAG_BASELINESHARPNESS
 50732

	)

468 
	#TIFFTAG_BAYERGREENSPLIT
 50733

	)

473 
	#TIFFTAG_LINEARRESPONSELIMIT
 50734

	)

474 
	#TIFFTAG_CAMERASERIALNUMBER
 50735

	)

475 
	#TIFFTAG_LENSINFO
 50736

	)

476 
	#TIFFTAG_CHROMABLURRADIUS
 50737

	)

477 
	#TIFFTAG_ANTIALIASSTRENGTH
 50738

	)

479 
	#TIFFTAG_SHADOWSCALE
 50739

	)

480 
	#TIFFTAG_DNGPRIVATEDATA
 50740

	)

481 
	#TIFFTAG_MAKERNOTESAFETY
 50741

	)

485 
	#TIFFTAG_CALIBRATIONILLUMINANT1
 50778

	)

486 
	#TIFFTAG_CALIBRATIONILLUMINANT2
 50779

	)

487 
	#TIFFTAG_BESTQUALITYSCALE
 50780

	)

488 
	#TIFFTAG_RAWDATAUNIQUEID
 50781

	)

490 
	#TIFFTAG_ORIGINALRAWFILENAME
 50827

	)

492 
	#TIFFTAG_ORIGINALRAWFILEDATA
 50828

	)

494 
	#TIFFTAG_ACTIVEAREA
 50829

	)

496 
	#TIFFTAG_MASKEDAREAS
 50830

	)

498 
	#TIFFTAG_ASSHOTICCPROFILE
 50831

	)

499 
	#TIFFTAG_ASSHOTPREPROFILEMATRIX
 50832

	)

501 
	#TIFFTAG_CURRENTICCPROFILE
 50833

	)

502 
	#TIFFTAG_CURRENTPREPROFILEMATRIX
 50834

	)

504 
	#TIFFTAG_DCSHUESHIFTVALUES
 65535

	)

517 
	#TIFFTAG_FAXMODE
 65536

	)

518 
	#FAXMODE_CLASSIC
 0x0000

	)

519 
	#FAXMODE_NORTC
 0x0001

	)

520 
	#FAXMODE_NOEOL
 0x0002

	)

521 
	#FAXMODE_BYTEALIGN
 0x0004

	)

522 
	#FAXMODE_WORDALIGN
 0x0008

	)

523 
	#FAXMODE_CLASSF
 
FAXMODE_NORTC


	)

524 
	#TIFFTAG_JPEGQUALITY
 65537

	)

526 
	#TIFFTAG_JPEGCOLORMODE
 65538

	)

527 
	#JPEGCOLORMODE_RAW
 0x0000

	)

528 
	#JPEGCOLORMODE_RGB
 0x0001

	)

529 
	#TIFFTAG_JPEGTABLESMODE
 65539

	)

530 
	#JPEGTABLESMODE_QUANT
 0x0001

	)

531 
	#JPEGTABLESMODE_HUFF
 0x0002

	)

533 
	#TIFFTAG_FAXFILLFUNC
 65540

	)

534 
	#TIFFTAG_PIXARLOGDATAFMT
 65549

	)

535 
	#PIXARLOGDATAFMT_8BIT
 0

	)

536 
	#PIXARLOGDATAFMT_8BITABGR
 1

	)

537 
	#PIXARLOGDATAFMT_11BITLOG
 2

	)

538 
	#PIXARLOGDATAFMT_12BITPICIO
 3

	)

539 
	#PIXARLOGDATAFMT_16BIT
 4

	)

540 
	#PIXARLOGDATAFMT_FLOAT
 5

	)

542 
	#TIFFTAG_DCSIMAGERTYPE
 65550

	)

543 
	#DCSIMAGERMODEL_M3
 0

	)

544 
	#DCSIMAGERMODEL_M5
 1

	)

545 
	#DCSIMAGERMODEL_M6
 2

	)

546 
	#DCSIMAGERFILTER_IR
 0

	)

547 
	#DCSIMAGERFILTER_MONO
 1

	)

548 
	#DCSIMAGERFILTER_CFA
 2

	)

549 
	#DCSIMAGERFILTER_OTHER
 3

	)

550 
	#TIFFTAG_DCSINTERPMODE
 65551

	)

551 
	#DCSINTERPMODE_NORMAL
 0x0

	)

552 
	#DCSINTERPMODE_PREVIEW
 0x1

	)

553 
	#TIFFTAG_DCSBALANCEARRAY
 65552

	)

554 
	#TIFFTAG_DCSCORRECTMATRIX
 65553

	)

555 
	#TIFFTAG_DCSGAMMA
 65554

	)

556 
	#TIFFTAG_DCSTOESHOULDERPTS
 65555

	)

557 
	#TIFFTAG_DCSCALIBRATIONFD
 65556

	)

559 
	#TIFFTAG_ZIPQUALITY
 65557

	)

560 
	#TIFFTAG_PIXARLOGQUALITY
 65558

	)

562 
	#TIFFTAG_DCSCLIPRECTANGLE
 65559

	)

563 
	#TIFFTAG_SGILOGDATAFMT
 65560

	)

564 
	#SGILOGDATAFMT_FLOAT
 0

	)

565 
	#SGILOGDATAFMT_16BIT
 1

	)

566 
	#SGILOGDATAFMT_RAW
 2

	)

567 
	#SGILOGDATAFMT_8BIT
 3

	)

568 
	#TIFFTAG_SGILOGENCODE
 65561

	)

569 
	#SGILOGENCODE_NODITHER
 0

	)

570 
	#SGILOGENCODE_RANDITHER
 1

	)

571 
	#TIFFTAG_LZMAPRESET
 65562

	)

572 
	#TIFFTAG_PERSAMPLE
 65563

	)

573 
	#PERSAMPLE_MERGED
 0

	)

574 
	#PERSAMPLE_MULTI
 1

	)

579 
	#EXIFTAG_EXPOSURETIME
 33434

	)

580 
	#EXIFTAG_FNUMBER
 33437

	)

581 
	#EXIFTAG_EXPOSUREPROGRAM
 34850

	)

582 
	#EXIFTAG_SPECTRALSENSITIVITY
 34852

	)

583 
	#EXIFTAG_ISOSPEEDRATINGS
 34855

	)

584 
	#EXIFTAG_OECF
 34856

	)

586 
	#EXIFTAG_EXIFVERSION
 36864

	)

587 
	#EXIFTAG_DATETIMEORIGINAL
 36867

	)

589 
	#EXIFTAG_DATETIMEDIGITIZED
 36868

	)

591 
	#EXIFTAG_COMPONENTSCONFIGURATION
 37121

	)

592 
	#EXIFTAG_COMPRESSEDBITSPERPIXEL
 37122

	)

593 
	#EXIFTAG_SHUTTERSPEEDVALUE
 37377

	)

594 
	#EXIFTAG_APERTUREVALUE
 37378

	)

595 
	#EXIFTAG_BRIGHTNESSVALUE
 37379

	)

596 
	#EXIFTAG_EXPOSUREBIASVALUE
 37380

	)

597 
	#EXIFTAG_MAXAPERTUREVALUE
 37381

	)

598 
	#EXIFTAG_SUBJECTDISTANCE
 37382

	)

599 
	#EXIFTAG_METERINGMODE
 37383

	)

600 
	#EXIFTAG_LIGHTSOURCE
 37384

	)

601 
	#EXIFTAG_FLASH
 37385

	)

602 
	#EXIFTAG_FOCALLENGTH
 37386

	)

603 
	#EXIFTAG_SUBJECTAREA
 37396

	)

604 
	#EXIFTAG_MAKERNOTE
 37500

	)

605 
	#EXIFTAG_USERCOMMENT
 37510

	)

606 
	#EXIFTAG_SUBSECTIME
 37520

	)

607 
	#EXIFTAG_SUBSECTIMEORIGINAL
 37521

	)

608 
	#EXIFTAG_SUBSECTIMEDIGITIZED
 37522

	)

609 
	#EXIFTAG_FLASHPIXVERSION
 40960

	)

610 
	#EXIFTAG_COLORSPACE
 40961

	)

611 
	#EXIFTAG_PIXELXDIMENSION
 40962

	)

612 
	#EXIFTAG_PIXELYDIMENSION
 40963

	)

613 
	#EXIFTAG_RELATEDSOUNDFILE
 40964

	)

614 
	#EXIFTAG_FLASHENERGY
 41483

	)

615 
	#EXIFTAG_SPATIALFREQUENCYRESPONSE
 41484

	)

616 
	#EXIFTAG_FOCALPLANEXRESOLUTION
 41486

	)

617 
	#EXIFTAG_FOCALPLANEYRESOLUTION
 41487

	)

618 
	#EXIFTAG_FOCALPLANERESOLUTIONUNIT
 41488

	)

619 
	#EXIFTAG_SUBJECTLOCATION
 41492

	)

620 
	#EXIFTAG_EXPOSUREINDEX
 41493

	)

621 
	#EXIFTAG_SENSINGMETHOD
 41495

	)

622 
	#EXIFTAG_FILESOURCE
 41728

	)

623 
	#EXIFTAG_SCENETYPE
 41729

	)

624 
	#EXIFTAG_CFAPATTERN
 41730

	)

625 
	#EXIFTAG_CUSTOMRENDERED
 41985

	)

626 
	#EXIFTAG_EXPOSUREMODE
 41986

	)

627 
	#EXIFTAG_WHITEBALANCE
 41987

	)

628 
	#EXIFTAG_DIGITALZOOMRATIO
 41988

	)

629 
	#EXIFTAG_FOCALLENGTHIN35MMFILM
 41989

	)

630 
	#EXIFTAG_SCENECAPTURETYPE
 41990

	)

631 
	#EXIFTAG_GAINCONTROL
 41991

	)

632 
	#EXIFTAG_CONTRAST
 41992

	)

633 
	#EXIFTAG_SATURATION
 41993

	)

634 
	#EXIFTAG_SHARPNESS
 41994

	)

635 
	#EXIFTAG_DEVICESETTINGDESCRIPTION
 41995

	)

636 
	#EXIFTAG_SUBJECTDISTANCERANGE
 41996

	)

637 
	#EXIFTAG_GAINCONTROL
 41991

	)

638 
	#EXIFTAG_GAINCONTROL
 41991

	)

639 
	#EXIFTAG_IMAGEUNIQUEID
 42016

	)

	@libtiff/tiffconf.h

8 #i‚de‡
_TIFFCONF_


9 
	#_TIFFCONF_


	)

12 
	#TIFF_INT16_T
 sig√d 

	)

15 
	#TIFF_INT32_T
 sig√d 

	)

18 
	#TIFF_INT64_T
 sig√d 

	)

21 
	#TIFF_INT8_T
 sig√d 

	)

24 
	#TIFF_UINT16_T
 

	)

27 
	#TIFF_UINT32_T
 

	)

30 
	#TIFF_UINT64_T
 

	)

33 
	#TIFF_UINT8_T
 

	)

36 
	#TIFF_SSIZE_T
 sig√d 

	)

39 
	#TIFF_PTRDIFF_T
 
±rdiff_t


	)

54 
	#HAVE_IEEEFP
 1

	)

57 
	#HOST_FILLORDER
 
FILLORDER_LSB2MSB


	)

61 
	#HOST_BIGENDIAN
 0

	)

64 
	#CCITT_SUPPORT
 1

	)

67 
	#JPEG_SUPPORT
 1

	)

73 
	#LOGLUV_SUPPORT
 1

	)

76 
	#LZW_SUPPORT
 1

	)

79 
	#NEXT_SUPPORT
 1

	)

83 
	#OJPEG_SUPPORT
 1

	)

86 
	#PACKBITS_SUPPORT
 1

	)

89 
	#PIXARLOG_SUPPORT
 1

	)

92 
	#THUNDER_SUPPORT
 1

	)

95 
	#ZIP_SUPPORT
 1

	)

99 
	#STRIPCHOP_DEFAULT
 
TIFF_STRIPCHOP


	)

102 
	#SUBIFD_SUPPORT
 1

	)

107 
	#DEFAULT_EXTRASAMPLE_AS_ALPHA
 1

	)

111 
	#CHECK_JPEG_YCBCR_SUBSAMPLING
 1

	)

114 
	#MDI_SUPPORT
 1

	)

121 
	#COLORIMETRY_SUPPORT


	)

122 
	#YCBCR_SUPPORT


	)

123 
	#CMYK_SUPPORT


	)

124 
	#ICC_SUPPORT


	)

125 
	#PHOTOSHOP_SUPPORT


	)

126 
	#IPTC_SUPPORT


	)

	@libtiff/tiffconf.vc.h

7 #i‚de‡
_TIFFCONF_


8 
	#_TIFFCONF_


	)

20 
	#SIZEOF_INT
 4

	)

23 
	#TIFF_INT8_T
 sig√d 

	)

26 
	#TIFF_UINT8_T
 

	)

29 
	#TIFF_INT16_T
 sig√d 

	)

32 
	#TIFF_UINT16_T
 

	)

35 
	#TIFF_INT32_FORMAT
 "%d"

	)

38 
	#TIFF_INT32_T
 sig√d 

	)

41 
	#TIFF_UINT32_FORMAT
 "%u"

	)

44 
	#TIFF_UINT32_T
 

	)

47 
	#TIFF_INT64_FORMAT
 "%I64d"

	)

50 
	#TIFF_INT64_T
 sig√d 
__öt64


	)

53 
	#TIFF_UINT64_FORMAT
 "%I64u"

	)

56 
	#TIFF_UINT64_T
 
__öt64


	)

59 #i‡
deföed
(
_WIN64
)

60 
	#TIFF_SSIZE_T
 sig√d 
__öt64


	)

62 
	#TIFF_SSIZE_T
 sig√d 

	)

66 #i‡
deföed
(
_WIN64
)

67 
	#TIFF_SSIZE_FORMAT
 "%I64d"

	)

69 
	#TIFF_SSIZE_FORMAT
 "%ld"

	)

73 
	#TIFF_PTRDIFF_T
 

	)

79 
	#HAVE_IEEEFP
 1

	)

82 
	#HOST_FILLORDER
 
FILLORDER_LSB2MSB


	)

86 
	#HOST_BIGENDIAN
 0

	)

89 
	#CCITT_SUPPORT
 1

	)

98 
	#LOGLUV_SUPPORT
 1

	)

101 
	#LZW_SUPPORT
 1

	)

104 
	#NEXT_SUPPORT
 1

	)

111 
	#PACKBITS_SUPPORT
 1

	)

117 
	#THUNDER_SUPPORT
 1

	)

124 
	#STRIPCHOP_DEFAULT
 
TIFF_STRIPCHOP


	)

127 
	#SUBIFD_SUPPORT
 1

	)

132 
	#DEFAULT_EXTRASAMPLE_AS_ALPHA
 1

	)

136 
	#CHECK_JPEG_YCBCR_SUBSAMPLING
 1

	)

146 
	#COLORIMETRY_SUPPORT


	)

147 
	#YCBCR_SUPPORT


	)

148 
	#CMYK_SUPPORT


	)

149 
	#ICC_SUPPORT


	)

150 
	#PHOTOSHOP_SUPPORT


	)

151 
	#IPTC_SUPPORT


	)

	@libtiff/tiffconf.wince.h

22 #i‚de‡
_WIN32_WCE


23 #îr‹ 
This
 
vîsi⁄
 
of
 
tif_c⁄fig
.
h
 
hódî
 
is
 
dediˇãd
 
Wödows
 
CE
 
∂©f‹m
!

27 #i‚de‡
_TIFFCONF_


28 
	#_TIFFCONF_


	)

40 
	#SIZEOF_INT
 4

	)

46 
	#HAVE_IEEEFP
 1

	)

49 
	#HOST_FILLORDER
 
FILLORDER_LSB2MSB


	)

53 
	#HOST_BIGENDIAN
 0

	)

56 
	#CCITT_SUPPORT
 1

	)

62 
	#LOGLUV_SUPPORT
 1

	)

65 
	#LZW_SUPPORT
 1

	)

68 
	#NEXT_SUPPORT
 1

	)

75 
	#PACKBITS_SUPPORT
 1

	)

81 
	#THUNDER_SUPPORT
 1

	)

88 
	#STRIPCHOP_DEFAULT
 
TIFF_STRIPCHOP


	)

91 
	#SUBIFD_SUPPORT
 1

	)

96 
	#DEFAULT_EXTRASAMPLE_AS_ALPHA
 1

	)

100 
	#CHECK_JPEG_YCBCR_SUBSAMPLING
 1

	)

107 
	#COLORIMETRY_SUPPORT


	)

108 
	#YCBCR_SUPPORT


	)

109 
	#CMYK_SUPPORT


	)

110 
	#ICC_SUPPORT


	)

111 
	#PHOTOSHOP_SUPPORT


	)

112 
	#IPTC_SUPPORT


	)

	@libtiff/tiffio.h

27 #i‚de‡
_TIFFIO_


28 
	#_TIFFIO_


	)

33 
	~"tiff.h
"

34 
	~"tiffvîs.h
"

40 
tiff
 
	tTIFF
;

67 
TIFF_SSIZE_T
 
	ttmsize_t
;

68 
uöt64
 
	ttoff_t
;

71 
uöt32
 
	tâag_t
;

72 
uöt16
 
	ttdú_t
;

73 
uöt16
 
	ttßm∂e_t
;

74 
uöt32
 
	tt°rûe_t
;

75 
t°rûe_t
 
	tt°rù_t
;

76 
t°rûe_t
 
	tâûe_t
;

77 
tmsize_t
 
	ttsize_t
;

78 * 
	ttd©a_t
;

80 #i‡!
deföed
(
__WIN32__
Ë&& (deföed(
_WIN32
Ë|| deföed(
WIN32
))

81 
	#__WIN32__


	)

91 #i‡
deföed
(
_WINDOWS
Ë|| deföed(
__WIN32__
Ë|| deföed(
_Wödows
)

92 #i‡!
deföed
(
__CYGWIN
Ë&& !deföed(
AVOID_WIN32_FILEIO
Ë&& !deföed(
USE_WIN32_FILEIO
)

93 
	#AVOID_WIN32_FILEIO


	)

97 #i‡
deföed
(
USE_WIN32_FILEIO
)

98 
	#VC_EXTRALEAN


	)

99 
	~<wödows.h
>

100 #ifde‡
__WIN32__


101 
DECLARE_HANDLE
(
th™dÀ_t
);

103 
HFILE
 
	tth™dÀ_t
;

106 * 
	tth™dÀ_t
;

115 
	#TIFFPRINT_NONE
 0x0

	)

116 
	#TIFFPRINT_STRIPS
 0x1

	)

117 
	#TIFFPRINT_CURVES
 0x2

	)

118 
	#TIFFPRINT_COLORMAP
 0x4

	)

119 
	#TIFFPRINT_JPEGQTABLES
 0x100

	)

120 
	#TIFFPRINT_JPEGACTABLES
 0x200

	)

121 
	#TIFFPRINT_JPEGDCTABLES
 0x200

	)

128 
	#D65_X0
 (95.0470F)

	)

129 
	#D65_Y0
 (100.0F)

	)

130 
	#D65_Z0
 (108.8827F)

	)

132 
	#D50_X0
 (96.4250F)

	)

133 
	#D50_Y0
 (100.0F)

	)

134 
	#D50_Z0
 (82.4680F)

	)

138 
	tTIFFRGBVÆue
;

141 
	md_m©
[3][3];

142 
	md_YCR
;

143 
	md_YCG
;

144 
	md_YCB
;

145 
uöt32
 
	md_Vrwr
;

146 
uöt32
 
	md_Vrwg
;

147 
uöt32
 
	md_Vrwb
;

148 
	md_Y0R
;

149 
	md_Y0G
;

150 
	md_Y0B
;

151 
	md_gammaR
;

152 
	md_gammaG
;

153 
	md_gammaB
;

154 } 
	tTIFFDi•œy
;

157 
TIFFRGBVÆue
* 
	m˛am±ab
;

158 * 
	mCr_r_èb
;

159 * 
	mCb_b_èb
;

160 
öt32
* 
	mCr_g_èb
;

161 
öt32
* 
	mCb_g_èb
;

162 
öt32
* 
	mY_èb
;

163 } 
	tTIFFYCbCrToRGB
;

166 
	mønge
;

167 
	#CIELABTORGB_TABLE_RANGE
 1500

	)

168 
	mr°ï
, 
	mg°ï
, 
	mb°ï
;

169 
	mX0
, 
	mY0
, 
	mZ0
;

170 
TIFFDi•œy
 
	mdi•œy
;

171 
	mYr2r
[
CIELABTORGB_TABLE_RANGE
 + 1];

172 
	mYg2g
[
CIELABTORGB_TABLE_RANGE
 + 1];

173 
	mYb2b
[
CIELABTORGB_TABLE_RANGE
 + 1];

174 } 
	tTIFFCIELabToRGB
;

179 
_TIFFRGBAImage
 
	tTIFFRGBAImage
;

190 (*
	ttûeC⁄tigRoutöe
)

191 (
	tTIFFRGBAImage
*, 
	tuöt32
*, uöt32, uöt32, uöt32, uöt32, 
	töt32
, int32,

193 (*
	ttûeSï¨©eRoutöe
)

194 (
	tTIFFRGBAImage
*, 
	tuöt32
*, uöt32, uöt32, uöt32, uöt32, 
	töt32
, int32,

199 
	s_TIFFRGBAImage
 {

200 
TIFF
* 
tif
;

201 
°›⁄îr
;

202 
isC⁄tig
;

203 
Æpha
;

204 
uöt32
 
width
;

205 
uöt32
 
height
;

206 
uöt16
 
bô•îßm∂e
;

207 
uöt16
 
ßm∂e•îpixñ
;

208 
uöt16
 
‹õ¡©i⁄
;

209 
uöt16
 
ªq_‹õ¡©i⁄
;

210 
uöt16
 
phŸomëric
;

211 
uöt16
* 
ªdcm≠
;

212 
uöt16
* 
gªícm≠
;

213 
uöt16
* 
bluecm≠
;

215 (*
gë
)(
TIFFRGBAImage
*, 
uöt32
*, uint32, uint32);

218 (*
™y
)(
TIFFRGBAImage
*);

219 
tûeC⁄tigRoutöe
 
c⁄tig
;

220 
tûeSï¨©eRoutöe
 
£∑øã
;

221 } 
put
;

222 
TIFFRGBVÆue
* 
M≠
;

223 
uöt32
** 
BWm≠
;

224 
uöt32
** 
PALm≠
;

225 
TIFFYCbCrToRGB
* 
ycb¸
;

226 
TIFFCIELabToRGB
* 
cõœb
;

228 
uöt8
* 
UaToAa
;

229 
uöt8
* 
Bôdïth16To8
;

231 
row_off£t
;

232 
cﬁ_off£t
;

239 
	#TIFFGëR
(
abgr
Ë(◊bgrË& 0xff)

	)

240 
	#TIFFGëG
(
abgr
Ë((◊bgrË>> 8Ë& 0xff)

	)

241 
	#TIFFGëB
(
abgr
Ë((◊bgrË>> 16Ë& 0xff)

	)

242 
	#TIFFGëA
(
abgr
Ë((◊bgrË>> 24Ë& 0xff)

	)

251 (*
	tTIFFInôMëhod
)(
	tTIFF
*, );

253 * 
«me
;

254 
uöt16
 
scheme
;

255 
TIFFInôMëhod
 
öô
;

256 } 
	tTIFFCodec
;

258 
	~<°dio.h
>

259 
	~<°d¨g.h
>

262 #i‚de‡
LOGLUV_PUBLIC


263 
	#LOGLUV_PUBLIC
 1

	)

266 #i‡!
	`deföed
(
__GNUC__
Ë&& !deföed(
__©åibuã__
)

267 
	#__©åibuã__
(
x
Ë

	)

270 #i‡
	`deföed
(
c_∂u•lus
Ë|| deföed(
__˝lu•lus
)

273 (*
	tTIFFEº‹H™dÀr
)(c⁄° *, c⁄° *, 
	tva_li°
);

274 (*
	tTIFFEº‹H™dÀrExt
)(
	tth™dÀ_t
, c⁄° *, c⁄° *, 
	tva_li°
);

275 
	`tmsize_t
 (*
	tTIFFRódWrôeProc
)(
	tth™dÀ_t
, *, 
	ttmsize_t
);

276 
	`toff_t
 (*
	tTIFFSìkProc
)(
	tth™dÀ_t
, 
	ttoff_t
, );

277 (*
	tTIFFClo£Proc
)(
	tth™dÀ_t
);

278 
	`toff_t
 (*
	tTIFFSizeProc
)(
	tth™dÀ_t
);

279 (*
	tTIFFM≠FûeProc
)(
	tth™dÀ_t
, ** 
	tba£
, 
	ttoff_t
* 
	tsize
);

280 (*
	tTIFFUnm≠FûeProc
)(
	tth™dÀ_t
, * 
	tba£
, 
	ttoff_t
 
	tsize
);

281 (*
	tTIFFExãndProc
)(
	tTIFF
*);

283 c⁄° * 
	`TIFFGëVîsi⁄
();

285 c⁄° 
TIFFCodec
* 
	`TIFFFödCODEC
(
uöt16
);

286 
TIFFCodec
* 
	`TIFFRegi°îCODEC
(
uöt16
, c⁄° *, 
TIFFInôMëhod
);

287 
	`TIFFUnRegi°îCODEC
(
TIFFCodec
*);

288 
	`TIFFIsCODECC⁄figuªd
(
uöt16
);

289 
TIFFCodec
* 
	`TIFFGëC⁄figuªdCODECs
();

295 * 
	`_TIFFmÆloc
(
tmsize_t
 
s
);

301 * 
	`_TIFFªÆloc
(* 
p
, 
tmsize_t
 
s
);

302 
	`_TIFFmem£t
(* 
p
, 
v
, 
tmsize_t
 
c
);

303 
	`_TIFFmem˝y
(* 
d
, c⁄° * 
s
, 
tmsize_t
 
c
);

304 
	`_TIFFmemcmp
(c⁄° * 
p1
, c⁄° * 
p2
, 
tmsize_t
 
c
);

305 
	`_TIFF‰ì
(* 
p
);

310 
	`TIFFGëTagLi°Cou¡
–
TIFF
 * );

311 
uöt32
 
	`TIFFGëTagLi°E¡ry
–
TIFF
 *, 
èg_ödex
 );

313 
	#TIFF_ANY
 
TIFF_NOTYPE


	)

314 
	#TIFF_VARIABLE
 -1

	)

315 
	#TIFF_SPP
 -2

	)

316 
	#TIFF_VARIABLE2
 -3

	)

318 
	#FIELD_CUSTOM
 65

	)

320 
_TIFFFõld
 
	tTIFFFõld
;

321 
_TIFFFõldAºay
 
	tTIFFFõldAºay
;

323 c⁄° 
TIFFFõld
* 
	`TIFFFödFõld
(
TIFF
 *, 
uöt32
, 
TIFFD©aTy≥
);

324 c⁄° 
TIFFFõld
* 
	`TIFFFõldWôhTag
(
TIFF
*, 
uöt32
);

325 c⁄° 
TIFFFõld
* 
	`TIFFFõldWôhName
(
TIFF
*, const *);

327 (*
	tTIFFVSëMëhod
)(
	tTIFF
*, 
	tuöt32
, 
	tva_li°
);

328 (*
	tTIFFVGëMëhod
)(
	tTIFF
*, 
	tuöt32
, 
	tva_li°
);

329 (*
	tTIFFPrötMëhod
)(
	tTIFF
*, 
	tFILE
*, );

332 
TIFFVSëMëhod
 
v£tfõld
;

333 
TIFFVGëMëhod
 
vgëfõld
;

334 
TIFFPrötMëhod
 
¥ötdú
;

335 } 
	tTIFFTagMëhods
;

337 
TIFFTagMëhods
 *
	`TIFFAc˚ssTagMëhods
(
TIFF
 *);

338 *
	`TIFFGëClõ¡Info
(
TIFF
 *, const *);

339 
	`TIFFSëClõ¡Info
(
TIFF
 *, *, const *);

341 
	`TIFFCÀ™up
(
TIFF
* 
tif
);

342 
	`TIFFClo£
(
TIFF
* 
tif
);

343 
	`TIFFFlush
(
TIFF
* 
tif
);

344 
	`TIFFFlushD©a
(
TIFF
* 
tif
);

345 
	`TIFFGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, ...);

346 
	`TIFFVGëFõld
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
);

347 
	`TIFFGëFõldDeÁu…ed
(
TIFF
* 
tif
, 
uöt32
 
èg
, ...);

348 
	`TIFFVGëFõldDeÁu…ed
(
TIFF
* 
tif
, 
uöt32
 
èg
, 
va_li°
 
≠
);

349 
	`TIFFRódDúe˘‹y
(
TIFF
* 
tif
);

350 
	`TIFFRódCu°omDúe˘‹y
(
TIFF
* 
tif
, 
toff_t
 
dúoff
, c⁄° 
TIFFFõldAºay
* 
öfﬂºay
);

351 
	`TIFFRódEXIFDúe˘‹y
(
TIFF
* 
tif
, 
toff_t
 
dúoff
);

352 
uöt64
 
	`TIFFSˇ∆öeSize64
(
TIFF
* 
tif
);

353 
tmsize_t
 
	`TIFFSˇ∆öeSize
(
TIFF
* 
tif
);

354 
uöt64
 
	`TIFFRa°îSˇ∆öeSize64
(
TIFF
* 
tif
);

355 
tmsize_t
 
	`TIFFRa°îSˇ∆öeSize
(
TIFF
* 
tif
);

356 
uöt64
 
	`TIFFSåùSize64
(
TIFF
* 
tif
);

357 
tmsize_t
 
	`TIFFSåùSize
(
TIFF
* 
tif
);

358 
uöt64
 
	`TIFFRawSåùSize64
(
TIFF
* 
tif
, 
uöt32
 
°rù
);

359 
tmsize_t
 
	`TIFFRawSåùSize
(
TIFF
* 
tif
, 
uöt32
 
°rù
);

360 
uöt64
 
	`TIFFVSåùSize64
(
TIFF
* 
tif
, 
uöt32
 
ƒows
);

361 
tmsize_t
 
	`TIFFVSåùSize
(
TIFF
* 
tif
, 
uöt32
 
ƒows
);

362 
uöt64
 
	`TIFFTûeRowSize64
(
TIFF
* 
tif
);

363 
tmsize_t
 
	`TIFFTûeRowSize
(
TIFF
* 
tif
);

364 
uöt64
 
	`TIFFTûeSize64
(
TIFF
* 
tif
);

365 
tmsize_t
 
	`TIFFTûeSize
(
TIFF
* 
tif
);

366 
uöt64
 
	`TIFFVTûeSize64
(
TIFF
* 
tif
, 
uöt32
 
ƒows
);

367 
tmsize_t
 
	`TIFFVTûeSize
(
TIFF
* 
tif
, 
uöt32
 
ƒows
);

368 
uöt32
 
	`TIFFDeÁu…SåùSize
(
TIFF
* 
tif
, uöt32 
ªque°
);

369 
	`TIFFDeÁu…TûeSize
(
TIFF
*, 
uöt32
*, uint32*);

370 
	`TIFFFûío
(
TIFF
*);

371 
	`TIFFSëFûío
(
TIFF
*, );

372 
th™dÀ_t
 
	`TIFFClõ¡d©a
(
TIFF
*);

373 
th™dÀ_t
 
	`TIFFSëClõ¡d©a
(
TIFF
*,Åhandle_t);

374 
	`TIFFGëMode
(
TIFF
*);

375 
	`TIFFSëMode
(
TIFF
*, );

376 
	`TIFFIsTûed
(
TIFF
*);

377 
	`TIFFIsByãSw≠≥d
(
TIFF
*);

378 
	`TIFFIsUpSam∂ed
(
TIFF
*);

379 
	`TIFFIsMSB2LSB
(
TIFF
*);

380 
	`TIFFIsBigEndün
(
TIFF
*);

381 
TIFFRódWrôeProc
 
	`TIFFGëRódProc
(
TIFF
*);

382 
TIFFRódWrôeProc
 
	`TIFFGëWrôeProc
(
TIFF
*);

383 
TIFFSìkProc
 
	`TIFFGëSìkProc
(
TIFF
*);

384 
TIFFClo£Proc
 
	`TIFFGëClo£Proc
(
TIFF
*);

385 
TIFFSizeProc
 
	`TIFFGëSizeProc
(
TIFF
*);

386 
TIFFM≠FûeProc
 
	`TIFFGëM≠FûeProc
(
TIFF
*);

387 
TIFFUnm≠FûeProc
 
	`TIFFGëUnm≠FûeProc
(
TIFF
*);

388 
uöt32
 
	`TIFFCuºítRow
(
TIFF
*);

389 
uöt16
 
	`TIFFCuºítDúe˘‹y
(
TIFF
*);

390 
uöt16
 
	`TIFFNumbîOfDúe˘‹õs
(
TIFF
*);

391 
uöt64
 
	`TIFFCuºítDúOff£t
(
TIFF
*);

392 
uöt32
 
	`TIFFCuºítSåù
(
TIFF
*);

393 
uöt32
 
	`TIFFCuºítTûe
(
TIFF
* 
tif
);

394 
	`TIFFRódBuf„rSëup
(
TIFF
* 
tif
, * 
bp
, 
tmsize_t
 
size
);

395 
	`TIFFWrôeBuf„rSëup
(
TIFF
* 
tif
, * 
bp
, 
tmsize_t
 
size
);

396 
	`TIFFSëupSåùs
(
TIFF
 *);

397 
	`TIFFWrôeCheck
(
TIFF
*, , const *);

398 
	`TIFFFªeDúe˘‹y
(
TIFF
*);

399 
	`TIFFCª©eDúe˘‹y
(
TIFF
*);

400 
	`TIFFLa°Dúe˘‹y
(
TIFF
*);

401 
	`TIFFSëDúe˘‹y
(
TIFF
*, 
uöt16
);

402 
	`TIFFSëSubDúe˘‹y
(
TIFF
*, 
uöt64
);

403 
	`TIFFU∆ökDúe˘‹y
(
TIFF
*, 
uöt16
);

404 
	`TIFFSëFõld
(
TIFF
*, 
uöt32
, ...);

405 
	`TIFFVSëFõld
(
TIFF
*, 
uöt32
, 
va_li°
);

406 
	`TIFFUn£tFõld
(
TIFF
*, 
uöt32
);

407 
	`TIFFWrôeDúe˘‹y
(
TIFF
 *);

408 
	`TIFFCheckpoötDúe˘‹y
(
TIFF
 *);

409 
	`TIFFRewrôeDúe˘‹y
(
TIFF
 *);

411 #i‡
	`deföed
(
c_∂u•lus
Ë|| deföed(
__˝lu•lus
)

412 
	`TIFFPrötDúe˘‹y
(
TIFF
*, 
FILE
*, = 0);

413 
	`TIFFRódSˇ∆öe
(
TIFF
* 
tif
, * 
buf
, 
uöt32
 
row
, 
uöt16
 
ßm∂e
 = 0);

414 
	`TIFFWrôeSˇ∆öe
(
TIFF
* 
tif
, * 
buf
, 
uöt32
 
row
, 
uöt16
 
ßm∂e
 = 0);

415 
	`TIFFRódRGBAImage
(
TIFF
*, 
uöt32
, uint32, uint32*, = 0);

416 
	`TIFFRódRGBAImageOrõ¡ed
(
TIFF
*, 
uöt32
, uint32, uint32*,

417 
ORIENTATION_BOTLEFT
, = 0);

419 
	`TIFFPrötDúe˘‹y
(
TIFF
*, 
FILE
*, );

420 
	`TIFFRódSˇ∆öe
(
TIFF
* 
tif
, * 
buf
, 
uöt32
 
row
, 
uöt16
 
ßm∂e
);

421 
	`TIFFWrôeSˇ∆öe
(
TIFF
* 
tif
, * 
buf
, 
uöt32
 
row
, 
uöt16
 
ßm∂e
);

422 
	`TIFFRódRGBAImage
(
TIFF
*, 
uöt32
, uint32, uint32*, );

423 
	`TIFFRódRGBAImageOrõ¡ed
(
TIFF
*, 
uöt32
, uint32, uint32*, , );

426 
	`TIFFRódRGBASåù
(
TIFF
*, 
uöt32
, uint32 * );

427 
	`TIFFRódRGBATûe
(
TIFF
*, 
uöt32
, uint32, uint32 * );

428 
	`TIFFRGBAImageOK
(
TIFF
*, [1024]);

429 
	`TIFFRGBAImageBegö
(
TIFFRGBAImage
*, 
TIFF
*, , [1024]);

430 
	`TIFFRGBAImageGë
(
TIFFRGBAImage
*, 
uöt32
*, uint32, uint32);

431 
	`TIFFRGBAImageEnd
(
TIFFRGBAImage
*);

432 
TIFF
* 
	`TIFFO≥n
(const *, const *);

433 #ifde‡
__WIN32__


434 
TIFF
* 
	`TIFFO≥nW
(c⁄° 
wch¨_t
*, const *);

436 
TIFF
* 
	`TIFFFdO≥n
(, const *, const *);

437 
TIFF
* 
	`TIFFClõ¡O≥n
(const *, const *,

438 
th™dÀ_t
,

439 
TIFFRódWrôeProc
, TIFFReadWriteProc,

440 
TIFFSìkProc
, 
TIFFClo£Proc
,

441 
TIFFSizeProc
,

442 
TIFFM≠FûeProc
, 
TIFFUnm≠FûeProc
);

443 c⁄° * 
	`TIFFFûeName
(
TIFF
*);

444 c⁄° * 
	`TIFFSëFûeName
(
TIFF
*, const *);

445 
	`TIFFEº‹
(c⁄° *, c⁄° *, ...Ë
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
,2,3)));

446 
	`TIFFEº‹Ext
(
th™dÀ_t
, c⁄° *, c⁄° *, ...Ë
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
,3,4)));

447 
	`TIFFW¨nög
(c⁄° *, c⁄° *, ...Ë
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
,2,3)));

448 
	`TIFFW¨nögExt
(
th™dÀ_t
, c⁄° *, c⁄° *, ...Ë
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
,3,4)));

449 
TIFFEº‹H™dÀr
 
	`TIFFSëEº‹H™dÀr
(TIFFErrorHandler);

450 
TIFFEº‹H™dÀrExt
 
	`TIFFSëEº‹H™dÀrExt
(TIFFErrorHandlerExt);

451 
TIFFEº‹H™dÀr
 
	`TIFFSëW¨nögH™dÀr
(TIFFErrorHandler);

452 
TIFFEº‹H™dÀrExt
 
	`TIFFSëW¨nögH™dÀrExt
(TIFFErrorHandlerExt);

453 
TIFFExãndProc
 
	`TIFFSëTagExãndî
(TIFFExtendProc);

454 
uöt32
 
	`TIFFCompuãTûe
(
TIFF
* 
tif
, uöt32 
x
, uöt32 
y
, uöt32 
z
, 
uöt16
 
s
);

455 
	`TIFFCheckTûe
(
TIFF
* 
tif
, 
uöt32
 
x
, uöt32 
y
, uöt32 
z
, 
uöt16
 
s
);

456 
uöt32
 
	`TIFFNumbîOfTûes
(
TIFF
*);

457 
tmsize_t
 
	`TIFFRódTûe
(
TIFF
* 
tif
, * 
buf
, 
uöt32
 
x
, uöt32 
y
, uöt32 
z
, 
uöt16
 
s
);

458 
tmsize_t
 
	`TIFFWrôeTûe
(
TIFF
* 
tif
, * 
buf
, 
uöt32
 
x
, uöt32 
y
, uöt32 
z
, 
uöt16
 
s
);

459 
uöt32
 
	`TIFFCompuãSåù
(
TIFF
*, uöt32, 
uöt16
);

460 
uöt32
 
	`TIFFNumbîOfSåùs
(
TIFF
*);

461 
tmsize_t
 
	`TIFFRódEncodedSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
, * 
buf
,Åmsize_à
size
);

462 
tmsize_t
 
	`TIFFRódRawSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
, * 
buf
,Åmsize_à
size
);

463 
tmsize_t
 
	`TIFFRódEncodedTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
, * 
buf
,Åmsize_à
size
);

464 
tmsize_t
 
	`TIFFRódRawTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
, * 
buf
,Åmsize_à
size
);

465 
tmsize_t
 
	`TIFFWrôeEncodedSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
, * 
d©a
,Åmsize_à
cc
);

466 
tmsize_t
 
	`TIFFWrôeRawSåù
(
TIFF
* 
tif
, 
uöt32
 
°rù
, * 
d©a
,Åmsize_à
cc
);

467 
tmsize_t
 
	`TIFFWrôeEncodedTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
, * 
d©a
,Åmsize_à
cc
);

468 
tmsize_t
 
	`TIFFWrôeRawTûe
(
TIFF
* 
tif
, 
uöt32
 
tûe
, * 
d©a
,Åmsize_à
cc
);

469 
	`TIFFD©aWidth
(
TIFFD©aTy≥
);

470 
	`TIFFSëWrôeOff£t
(
TIFF
* 
tif
, 
toff_t
 
off
);

471 
	`TIFFSwabSh‹t
(
uöt16
*);

472 
	`TIFFSwabL⁄g
(
uöt32
*);

473 
	`TIFFSwabL⁄g8
(
uöt64
*);

474 
	`TIFFSwabFlﬂt
(*);

475 
	`TIFFSwabDoubÀ
(*);

476 
	`TIFFSwabAºayOfSh‹t
(
uöt16
* 
wp
, 
tmsize_t
 
n
);

477 
	`TIFFSwabAºayOfTrùÀs
(
uöt8
* 
ç
, 
tmsize_t
 
n
);

478 
	`TIFFSwabAºayOfL⁄g
(
uöt32
* 
Õ
, 
tmsize_t
 
n
);

479 
	`TIFFSwabAºayOfL⁄g8
(
uöt64
* 
Õ
, 
tmsize_t
 
n
);

480 
	`TIFFSwabAºayOfFlﬂt
(* 
Â
, 
tmsize_t
 
n
);

481 
	`TIFFSwabAºayOfDoubÀ
(* 
dp
, 
tmsize_t
 
n
);

482 
	`TIFFRevî£Bôs
(
uöt8
* 
˝
, 
tmsize_t
 
n
);

483 c⁄° * 
	`TIFFGëBôRevTabÀ
();

485 #ifde‡
LOGLUV_PUBLIC


486 
	#U_NEU
 0.210526316

	)

487 
	#V_NEU
 0.473684211

	)

488 
	#UVSCALE
 410.

	)

489 
	`LogL16toY
();

490 
	`LogL10toY
();

491 
	`XYZtoRGB24
(*, 
uöt8
*);

492 
	`uv_decode
(*, *, );

493 
	`LogLuv24toXYZ
(
uöt32
, *);

494 
	`LogLuv32toXYZ
(
uöt32
, *);

495 #i‡
	`deföed
(
c_∂u•lus
Ë|| deföed(
__˝lu•lus
)

496 
	`LogL16‰omY
(, 
SGILOGENCODE_NODITHER
);

497 
	`LogL10‰omY
(, 
SGILOGENCODE_NODITHER
);

498 
	`uv_ícode
(, , 
SGILOGENCODE_NODITHER
);

499 
uöt32
 
	`LogLuv24‰omXYZ
(*, 
SGILOGENCODE_NODITHER
);

500 
uöt32
 
	`LogLuv32‰omXYZ
(*, 
SGILOGENCODE_NODITHER
);

502 
	`LogL16‰omY
(, );

503 
	`LogL10‰omY
(, );

504 
	`uv_ícode
(, , );

505 
uöt32
 
	`LogLuv24‰omXYZ
(*, );

506 
uöt32
 
	`LogLuv32‰omXYZ
(*, );

510 
	`TIFFCIELabToRGBInô
(
TIFFCIELabToRGB
*, c⁄° 
TIFFDi•œy
 *, *);

511 
	`TIFFCIELabToXYZ
(
TIFFCIELabToRGB
 *, 
uöt32
, 
öt32
, int32,

513 
	`TIFFXYZToRGB
(
TIFFCIELabToRGB
 *, , , ,

514 
uöt32
 *, uint32 *, uint32 *);

516 
	`TIFFYCbCrToRGBInô
(
TIFFYCbCrToRGB
*, *, *);

517 
	`TIFFYCbCπoRGB
(
TIFFYCbCrToRGB
 *, 
uöt32
, 
öt32
, int32,

518 
uöt32
 *, uint32 *, uint32 *);

527 
âag_t
 
fõld_èg
;

528 
fõld_ªadcou¡
;

529 
fõld_wrôecou¡
;

530 
TIFFD©aTy≥
 
fõld_ty≥
;

531 
fõld_bô
;

532 
fõld_oktoch™ge
;

533 
fõld_∑sscou¡
;

534 *
fõld_«me
;

535 } 
	tTIFFFõldInfo
;

537 
	`TIFFMîgeFõldInfo
(
TIFF
*, c⁄° 
TIFFFõldInfo
[], 
uöt32
);

539 #i‡
	`deföed
(
c_∂u•lus
Ë|| deföed(
__˝lu•lus
)

540 
	}
}

	@libtiff/tiffio.hxx

27 #i‚de‡
_TIFFIO_HXX_


28 
	#_TIFFIO_HXX_


	)

34 
	~<io°ªam
>

35 
	~"tiff.h
"

37 
TIFF
* 
TIFFSåómO≥n
(c⁄° *, 
°d
::
o°ªam
 *);

38 
TIFF
* 
TIFFSåómO≥n
(c⁄° *, 
°d
::
i°ªam
 *);

	@libtiff/tiffiop.h

27 #i‚de‡
_TIFFIOP_


28 
	#_TIFFIOP_


	)

33 
	~"tif_c⁄fig.h
"

35 #ifde‡
HAVE_FCNTL_H


36 
	~<f˙é.h
>

39 #ifde‡
HAVE_SYS_TYPES_H


40 
	~<sys/ty≥s.h
>

43 #ifde‡
HAVE_STRING_H


44 
	~<°rög.h
>

47 #ifde‡
HAVE_ASSERT_H


48 
	~<as£π.h
>

50 
	#as£π
(
x
)

	)

53 #ifde‡
HAVE_SEARCH_H


54 
	~<£¨ch.h
>

56 *
lföd
(c⁄° *, c⁄° *, 
size_t
 *, size_t,

60 
	~"tiffio.h
"

62 
	~"tif_dú.h
"

64 #i‚de‡
STRIP_SIZE_DEFAULT


65 
	#STRIP_SIZE_DEFAULT
 8192

	)

68 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

70 #i‚de‡
TRUE


71 
	#TRUE
 1

	)

72 
	#FALSE
 0

	)

75 
	s˛õ¡_öfo
 {

76 
˛õ¡_öfo
 *
√xt
;

77 *
d©a
;

78 *
«me
;

79 } 
	tTIFFClõ¡InfoLök
;

85 
	ttid©avÆ_t
;

86 
tid©avÆ_t
* 
	ttid©a_t
;

88 (*
	tTIFFVoidMëhod
)(
	tTIFF
*);

89 (*
	tTIFFBoﬁMëhod
)(
	tTIFF
*);

90 (*
	tTIFFPªMëhod
)(
	tTIFF
*, 
	tuöt16
);

91 (*
	tTIFFCodeMëhod
)(
	tTIFF
* 
	ttif
, 
	tuöt8
* 
	tbuf
, 
	ttmsize_t
 
	tsize
, 
	tuöt16
 
	tßm∂e
);

92 (*
	tTIFFSìkMëhod
)(
	tTIFF
*, 
	tuöt32
);

93 (*
	tTIFFPo°Mëhod
)(
	tTIFF
* 
	ttif
, 
	tuöt8
* 
	tbuf
, 
	ttmsize_t
 
	tsize
);

94 
	$uöt32
 (*
	tTIFFSåùMëhod
)(
	tTIFF
*, 
	tuöt32
);

95 (*
	tTIFFTûeMëhod
)(
	tTIFF
*, 
	tuöt32
*, uint32*);

97 
	stiff
 {

98 * 
tif_«me
;

99 
tif_fd
;

100 
tif_mode
;

101 
uöt32
 
tif_Êags
;

102 
	#TIFF_FILLORDER
 0x00003

	)

103 
	#TIFF_DIRTYHEADER
 0x00004

	)

104 
	#TIFF_DIRTYDIRECT
 0x00008

	)

105 
	#TIFF_BUFFERSETUP
 0x00010

	)

106 
	#TIFF_CODERSETUP
 0x00020

	)

107 
	#TIFF_BEENWRITING
 0x00040

	)

108 
	#TIFF_SWAB
 0x00080

	)

109 
	#TIFF_NOBITREV
 0x00100

	)

110 
	#TIFF_MYBUFFER
 0x00200

	)

111 
	#TIFF_ISTILED
 0x00400

	)

112 
	#TIFF_MAPPED
 0x00800

	)

113 
	#TIFF_POSTENCODE
 0x01000

	)

114 
	#TIFF_INSUBIFD
 0x02000

	)

115 
	#TIFF_UPSAMPLED
 0x04000

	)

116 
	#TIFF_STRIPCHOP
 0x08000

	)

117 
	#TIFF_HEADERONLY
 0x10000

	)

118 
	#TIFF_NOREADRAW
 0x20000

	)

119 
	#TIFF_INCUSTOMIFD
 0x40000

	)

120 
	#TIFF_BIGTIFF
 0x80000

	)

121 
	#TIFF_BUF4WRITE
 0x100000

	)

122 
	#TIFF_DIRTYSTRIP
 0x200000

	)

123 
	#TIFF_PERSAMPLE
 0x400000

	)

124 
uöt64
 
tif_dúoff
;

125 
uöt64
 
tif_√xtdúoff
;

126 
uöt64
* 
tif_dúli°
;

127 
uöt16
 
tif_dúli°size
;

128 
uöt16
 
tif_dúnumbî
;

129 
TIFFDúe˘‹y
 
tif_dú
;

130 
TIFFDúe˘‹y
 
tif_cu°omdú
;

132 
TIFFHódîComm⁄
 
comm⁄
;

133 
TIFFHódîCœssic
 
˛assic
;

134 
TIFFHódîBig
 
big
;

135 } 
tif_hódî
;

136 
uöt16
 
tif_hódî_size
;

137 
uöt32
 
tif_row
;

138 
uöt16
 
tif_curdú
;

139 
uöt32
 
tif_cur°rù
;

140 
uöt64
 
tif_curoff
;

141 
uöt64
 
tif_d©aoff
;

143 
uöt16
 
tif_nsubifd
;

144 
uöt64
 
tif_subifdoff
;

146 
uöt32
 
tif_cﬁ
;

147 
uöt32
 
tif_cuπûe
;

148 
tmsize_t
 
tif_tûesize
;

150 
tif_decode°©us
;

151 
TIFFBoﬁMëhod
 
tif_fixu±ags
;

152 
TIFFBoﬁMëhod
 
tif_£tupdecode
;

153 
TIFFPªMëhod
 
tif_¥edecode
;

154 
TIFFBoﬁMëhod
 
tif_£tu≥ncode
;

155 
tif_ícode°©us
;

156 
TIFFPªMëhod
 
tif_¥ìncode
;

157 
TIFFBoﬁMëhod
 
tif_po°ícode
;

158 
TIFFCodeMëhod
 
tif_decodîow
;

159 
TIFFCodeMëhod
 
tif_ícodîow
;

160 
TIFFCodeMëhod
 
tif_decode°rù
;

161 
TIFFCodeMëhod
 
tif_ícode°rù
;

162 
TIFFCodeMëhod
 
tif_decodëûe
;

163 
TIFFCodeMëhod
 
tif_ícodëûe
;

164 
TIFFVoidMëhod
 
tif_˛o£
;

165 
TIFFSìkMëhod
 
tif_£ek
;

166 
TIFFVoidMëhod
 
tif_˛ónup
;

167 
TIFFSåùMëhod
 
tif_def°rùsize
;

168 
TIFFTûeMëhod
 
tif_de·ûesize
;

169 
uöt8
* 
tif_d©a
;

171 
tmsize_t
 
tif_sˇ∆öesize
;

172 
tmsize_t
 
tif_sˇ∆öeskew
;

173 
uöt8
* 
tif_øwd©a
;

174 
tmsize_t
 
tif_øwd©asize
;

175 
tmsize_t
 
tif_øwd©aoff
;

176 
tmsize_t
 
tif_øwd©Æﬂded
;

177 
uöt8
* 
tif_øw˝
;

178 
tmsize_t
 
tif_øwcc
;

180 
uöt8
* 
tif_ba£
;

181 
tmsize_t
 
tif_size
;

182 
TIFFM≠FûeProc
 
tif_m≠¥oc
;

183 
TIFFUnm≠FûeProc
 
tif_unm≠¥oc
;

185 
th™dÀ_t
 
tif_˛õ¡d©a
;

186 
TIFFRódWrôeProc
 
tif_ªad¥oc
;

187 
TIFFRódWrôeProc
 
tif_wrôïroc
;

188 
TIFFSìkProc
 
tif_£ek¥oc
;

189 
TIFFClo£Proc
 
tif_˛o£¥oc
;

190 
TIFFSizeProc
 
tif_sizïroc
;

192 
TIFFPo°Mëhod
 
tif_po°decode
;

194 
TIFFFõld
** 
tif_fõlds
;

195 
size_t
 
tif_nfõlds
;

196 c⁄° 
TIFFFõld
* 
tif_foundfõld
;

197 
TIFFTagMëhods
 
tif_ègmëhods
;

198 
TIFFClõ¡InfoLök
* 
tif_˛õ¡öfo
;

201 
TIFFFõldAºay
* 
tif_fõldscom∑t
;

202 
size_t
 
tif_nfõldscom∑t
;

205 
	#isP£udoTag
(
t
Ë— > 0xffffË

	)

207 
	#isTûed
(
tif
Ë((—if)->
tif_Êags
 & 
TIFF_ISTILED
Ë!0)

	)

208 
	#isM≠≥d
(
tif
Ë((—if)->
tif_Êags
 & 
TIFF_MAPPED
Ë!0)

	)

209 
	#isFûlOrdî
(
tif
, 
o
Ë((—if)->
tif_Êags
 & (o)Ë!0)

	)

210 
	#isUpSam∂ed
(
tif
Ë((—if)->
tif_Êags
 & 
TIFF_UPSAMPLED
Ë!0)

	)

211 
	#TIFFRódFûe
(
tif
, 
buf
, 
size
) \

212 ((*(
tif
)->
tif_ªad¥oc
)(—if)->
tif_˛õ¡d©a
,(
buf
),(
size
)))

	)

213 
	#TIFFWrôeFûe
(
tif
, 
buf
, 
size
) \

214 ((*(
tif
)->
tif_wrôïroc
)(—if)->
tif_˛õ¡d©a
,(
buf
),(
size
)))

	)

215 
	#TIFFSìkFûe
(
tif
, 
off
, 
whí˚
) \

216 ((*(
tif
)->
tif_£ek¥oc
)(—if)->
tif_˛õ¡d©a
,(
off
),(
whí˚
)))

	)

217 
	#TIFFClo£Fûe
(
tif
) \

218 ((*(
tif
)->
tif_˛o£¥oc
)(—if)->
tif_˛õ¡d©a
))

	)

219 
	#TIFFGëFûeSize
(
tif
) \

220 ((*(
tif
)->
tif_sizïroc
)(—if)->
tif_˛õ¡d©a
))

	)

221 
	#TIFFM≠FûeC⁄ã¡s
(
tif
, 
∑ddr
, 
psize
) \

222 ((*(
tif
)->
tif_m≠¥oc
)(—if)->
tif_˛õ¡d©a
,(
∑ddr
),(
psize
)))

	)

223 
	#TIFFUnm≠FûeC⁄ã¡s
(
tif
, 
addr
, 
size
) \

224 ((*(
tif
)->
tif_unm≠¥oc
)(—if)->
tif_˛õ¡d©a
,(
addr
),(
size
)))

	)

229 #i‚de‡
RódOK


230 
	#RódOK
(
tif
, 
buf
, 
size
) \

231 (
	`TIFFRódFûe
((
tif
),(
buf
),(
size
))==(size))

	)

233 #i‚de‡
SìkOK


234 
	#SìkOK
(
tif
, 
off
) \

235 (
	`TIFFSìkFûe
((
tif
),(
off
),
SEEK_SET
)==(off))

	)

237 #i‚de‡
WrôeOK


238 
	#WrôeOK
(
tif
, 
buf
, 
size
) \

239 (
	`TIFFWrôeFûe
((
tif
),(
buf
),(
size
))==(size))

	)

243 
	#TIFFhowm™y_32
(
x
, 
y
Ë(((
uöt32
)x < (0xffffffff - (uint32)(y-1))) ? \

244 ((((
uöt32
)(
x
))+(((uöt32)(
y
))-1))/((uint32)(y))) : \

245 0U)

	)

246 
	#TIFFhowm™y8_32
(
x
Ë(((x)&0x07)?((
uöt32
)(x)>>3)+1:(uöt32)(x)>>3)

	)

247 
	#TIFFroundup_32
(
x
, 
y
Ë(
	`TIFFhowm™y_32
(x,y)*(y))

	)

248 
	#TIFFhowm™y_64
(
x
, 
y
Ë((((
uöt64
)(x))+(((uöt64)(y))-1))/((uöt64)(y)))

	)

249 
	#TIFFhowm™y8_64
(
x
Ë(((x)&0x07)?((
uöt64
)(x)>>3)+1:(uöt64)(x)>>3)

	)

250 
	#TIFFroundup_64
(
x
, 
y
Ë(
	`TIFFhowm™y_64
(x,y)*(y))

	)

253 
	#TIFFSa„Mu…ùly
(
t
,
v
,
m
Ë(((—)m !—)0Ë&& ((—)((v*m)/m)Ë=—)v)Ë? (t)(v*mË: (t)0)

	)

255 
	#TIFFmax
(
A
,
B
Ë((A)>(B)?(A):(B))

	)

256 
	#TIFFmö
(
A
,
B
Ë((A)<(B)?(A):(B))

	)

258 
	#TIFFAºayCou¡
(
a
Ë( (aË/  (◊)[0]))

	)

260 #i‡
	`deföed
(
__˝lu•lus
)

263 
	`_TIFFgëMode
(c⁄° * 
mode
, c⁄° * 
moduÀ
);

264 
	`_TIFFNoRowEncode
(
TIFF
* 
tif
, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

265 
	`_TIFFNoSåùEncode
(
TIFF
* 
tif
, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

266 
	`_TIFFNoTûeEncode
(
TIFF
*, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

267 
	`_TIFFNoRowDecode
(
TIFF
* 
tif
, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

268 
	`_TIFFNoSåùDecode
(
TIFF
* 
tif
, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

269 
	`_TIFFNoTûeDecode
(
TIFF
*, 
uöt8
* 
µ
, 
tmsize_t
 
cc
, 
uöt16
 
s
);

270 
	`_TIFFNoPo°Decode
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
);

271 
	`_TIFFNoPªCode
(
TIFF
* 
tif
, 
uöt16
 
s
);

272 
	`_TIFFNoSìk
(
TIFF
* 
tif
, 
uöt32
 
off
);

273 
	`_TIFFSwab16BôD©a
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
);

274 
	`_TIFFSwab24BôD©a
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
);

275 
	`_TIFFSwab32BôD©a
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
);

276 
	`_TIFFSwab64BôD©a
(
TIFF
* 
tif
, 
uöt8
* 
buf
, 
tmsize_t
 
cc
);

277 
	`TIFFFlushD©a1
(
TIFF
* 
tif
);

278 
	`TIFFDeÁu…Dúe˘‹y
(
TIFF
* 
tif
);

279 
	`_TIFFSëDeÁu…Com¥essi⁄Sèã
(
TIFF
* 
tif
);

280 
	`_TIFFRewrôeFõld
(
TIFF
 *, 
uöt16
, 
TIFFD©aTy≥
, 
tmsize_t
, *);

281 
	`TIFFSëCom¥essi⁄Scheme
(
TIFF
* 
tif
, 
scheme
);

282 
	`TIFFSëDeÁu…Com¥essi⁄Sèã
(
TIFF
* 
tif
);

283 
uöt32
 
	`_TIFFDeÁu…SåùSize
(
TIFF
* 
tif
, uöt32 
s
);

284 
	`_TIFFDeÁu…TûeSize
(
TIFF
* 
tif
, 
uöt32
* 
tw
, uöt32* 
th
);

285 
	`_TIFFD©aSize
(
TIFFD©aTy≥
 
ty≥
);

287 
	`_TIFF£tByãAºay
(**, *, 
uöt32
);

288 
	`_TIFF£tSåög
(**, *);

289 
	`_TIFF£tSh‹tAºay
(
uöt16
**, uöt16*, 
uöt32
);

290 
	`_TIFF£tL⁄gAºay
(
uöt32
**, uint32*, uint32);

291 
	`_TIFF£tFlﬂtAºay
(**, *, 
uöt32
);

292 
	`_TIFF£tDoubÀAºay
(**, *, 
uöt32
);

294 
	`_TIFF¥ötAscii
(
FILE
*, const *);

295 
	`_TIFF¥ötAsciiTag
(
FILE
*, const *, const *);

297 
TIFFEº‹H™dÀr
 
_TIFFw¨nögH™dÀr
;

298 
TIFFEº‹H™dÀr
 
_TIFFîr‹H™dÀr
;

299 
TIFFEº‹H™dÀrExt
 
_TIFFw¨nögH™dÀrExt
;

300 
TIFFEº‹H™dÀrExt
 
_TIFFîr‹H™dÀrExt
;

302 
uöt32
 
	`_TIFFMu…ùly32
(
TIFF
*, uint32, uint32, const *);

303 
uöt64
 
	`_TIFFMu…ùly64
(
TIFF
*, uint64, uint64, const *);

304 * 
	`_TIFFCheckMÆloc
(
TIFF
*, 
tmsize_t
,Åmsize_t, const *);

305 * 
	`_TIFFCheckRóŒoc
(
TIFF
*, *, 
tmsize_t
,Åmsize_t, const *);

307 
	`_TIFFUI¡64ToDoubÀ
(
uöt64
);

308 
	`_TIFFUI¡64ToFlﬂt
(
uöt64
);

310 
	`TIFFInôDumpMode
(
TIFF
*, );

311 #ifde‡
PACKBITS_SUPPORT


312 
	`TIFFInôPackBôs
(
TIFF
*, );

314 #ifde‡
CCITT_SUPPORT


315 
	`TIFFInôCCITTRLE
(
TIFF
*, ), 
	`TIFFInôCCITTRLEW
(TIFF*, );

316 
	`TIFFInôCCITTFax3
(
TIFF
*, ), 
	`TIFFInôCCITTFax4
(TIFF*, );

318 #ifde‡
THUNDER_SUPPORT


319 
	`TIFFInôThundîSˇn
(
TIFF
*, );

321 #ifde‡
NEXT_SUPPORT


322 
	`TIFFInôNeXT
(
TIFF
*, );

324 #ifde‡
LZW_SUPPORT


325 
	`TIFFInôLZW
(
TIFF
*, );

327 #ifde‡
OJPEG_SUPPORT


328 
	`TIFFInôOJPEG
(
TIFF
*, );

330 #ifde‡
JPEG_SUPPORT


331 
	`TIFFInôJPEG
(
TIFF
*, );

333 #ifde‡
JBIG_SUPPORT


334 
	`TIFFInôJBIG
(
TIFF
*, );

336 #ifde‡
ZIP_SUPPORT


337 
	`TIFFInôZIP
(
TIFF
*, );

339 #ifde‡
PIXARLOG_SUPPORT


340 
	`TIFFInôPix¨Log
(
TIFF
*, );

342 #ifde‡
LOGLUV_SUPPORT


343 
	`TIFFInôSGILog
(
TIFF
*, );

345 #ifde‡
LZMA_SUPPORT


346 
	`TIFFInôLZMA
(
TIFF
*, );

348 #ifde‡
VMS


349 c⁄° 
TIFFCodec
 
_TIFFBuûtöCODECS
[];

351 
TIFFCodec
 
_TIFFBuûtöCODECS
[];

354 #i‡
	`deföed
(
__˝lu•lus
)

355 
	}
}

	@libtiff/tiffvers.h

1 
	#TIFFLIB_VERSION_STR
 "LIBTIFF, Vîsi⁄ 4.0.1\nC›yrighà(cË1988-1996 Sam LefÊî\nC›yrighà(cË1991-1996 Sûic⁄ Gøphics, Inc."

	)

9 
	#TIFFLIB_VERSION
 20120218

	)

	@libtiff/uvcode.h

2 
	#UV_SQSIZ
 ()0.003500

	)

3 
	#UV_NDIVS
 16289

	)

4 
	#UV_VSTART
 ()0.016940

	)

5 
	#UV_NVS
 163

	)

7 
	mu°¨t
;

8 
	mnus
, 
	mncum
;

9 } 
	guv_row
[
UV_NVS
] = {

	@port/dummy.c

8 
	$libp‹t_dummy_fun˘i⁄
()

11 
	}
}

	@port/getopt.c

33 
	gsccsid
[] = "@(#)getopt.c 8.3 (Berkeley) 4/27/95";

34 
__RCSID
("$NetBSD: getopt.c,v 1.26 2003/08/07 16:43:40ágc Exp $");

37 
	~<°dio.h
>

38 
	~<°rög.h
>

39 
	~"libp‹t.h
"

41 
	g›ãº
 = 1,

42 
	g›töd
 = 1,

43 
	g›t›t
,

44 
	g›åe£t
;

45 *
	g›èrg
;

47 
	#BADCH
 ()'?'

	)

48 
	#BADARG
 ()':'

	)

49 
	#EMSG
 ""

	)

56 
	$gë›t
(
¨gc
, * c⁄° 
¨gv
[], c⁄° *
›t°rög
)

58 *
∂a˚
 = 
EMSG
;

59 *
ﬁi
;

61 i‡(
›åe£t
 || *
∂a˚
 == 0) {

62 
›åe£t
 = 0;

63 
∂a˚
 = 
¨gv
[
›töd
];

64 i‡(
›töd
 >
¨gc
 || *
∂a˚
++ != '-') {

66 
∂a˚
 = 
EMSG
;

69 
›t›t
 = *
∂a˚
++;

70 i‡(
›t›t
 ='-' && *
∂a˚
 == 0) {

72 ++
›töd
;

73 
∂a˚
 = 
EMSG
;

76 i‡(
›t›t
 == 0) {

79 
∂a˚
 = 
EMSG
;

80 i‡(
	`°rchr
(
›t°rög
, '-'Ë=
NULL
)

82 
›t›t
 = '-';

85 
›t›t
 = *
∂a˚
++;

88 i‡(
›t›t
 =':' || (
ﬁi
 = 
	`°rchr
(
›t°rög
, o±›t)Ë=
NULL
) {

89 i‡(*
∂a˚
 == 0)

90 ++
›töd
;

91 i‡(
›ãº
 && *
›t°rög
 != ':')

92 ()
	`Ârötf
(
°dîr
,

93 "unknow¿›ti⁄ -- %c\n", 
›t›t
);

94  (
BADCH
);

98 i‡(
ﬁi
[1] != ':') {

100 
›èrg
 = 
NULL
;

101 i‡(*
∂a˚
 == 0)

102 ++
›töd
;

106 i‡(*
∂a˚
)

107 
›èrg
 = 
∂a˚
;

108 i‡(
¨gc
 > ++
›töd
)

109 
›èrg
 = 
¨gv
[
›töd
];

112 
∂a˚
 = 
EMSG
;

113 i‡(*
›t°rög
 == ':')

114  (
BADARG
);

115 i‡(
›ãº
)

116 ()
	`Ârötf
(
°dîr
,

118 
›t›t
);

119  (
BADCH
);

121 
∂a˚
 = 
EMSG
;

122 ++
›töd
;

124  (
›t›t
);

125 
	}
}

	@port/lfind.c

36 
	gsccsid
[] = "@(#)lsearch.c 8.1 (Berkeley) 6/4/93";

37 
__RCSID
("$NetBSD:Üsearch.c,v 1.2 2005/07/06 15:47:15 drochner Exp $");

40 #ifde‡
_WIN32_WCE


41 
	~<w˚_ty≥s.h
>

43 
	~<sys/ty≥s.h
>

46 #i‚de‡
NULL


47 
	#NULL
 0

	)

51 
	$lföd
(c⁄° *
key
, c⁄° *
ba£
, 
size_t
 *
nmemb
, size_à
size
,

52 (*
com∑r
)(const *, const *))

54 *
ñemít
, *
íd
;

56 
íd
 = (*)
ba£
 + *
nmemb
 * 
size
;

57 
ñemít
 = (*)
ba£
;ÉÀmíà< 
íd
;ÉÀmíà+
size
)

58 i‡(!
	`com∑r
(
ñemít
, 
key
))

59  
ñemít
;

61  
NULL
;

62 
	}
}

	@port/libport.h

26 #i‚de‡
_LIBPORT_


27 
	#_LIBPORT_


	)

29 
gë›t
(
¨gc
, * c⁄° 
¨gv
[], c⁄° *
›t°rög
);

30 *
›èrg
;

31 
›ãº
;

32 
›töd
;

33 
›t›t
;

35 
°rˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
);

37 #i‚de‡
HAVE_GETOPT


38 
	#HAVE_GETOPT
 1

	)

42 
°πoul
(c⁄° *
≈å
, **
íd±r
, 
ba£
);

47 
lföd
(c⁄° *
key
, c⁄° *
ba£
, 
size_t
 *
nmemb
, size_à
size
,

48 (*
com∑r
)(const *, const *));

	@port/strcasecmp.c

33 
	gsccsid
[] = "@(#)strcasecmp.c 8.1 (Berkeley) 6/4/93";

34 
__RCSID
("$NetBSD: strcasecmp.c,v 1.16 2003/08/07 16:43:49ágc Exp $");

37 
	~<˘y≥.h
>

38 
	~<°rög.h
>

39 
	~"libp‹t.h
"

42 
	$°rˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
)

44 c⁄° *
us1
 = (c⁄° *)
s1
,

45 *
us2
 = (c⁄° *)
s2
;

47 
	`tﬁowî
(*
us1
Ë=tﬁowî(*
us2
++))

48 i‡(*
us1
++ == '\0')

50  (
	`tﬁowî
(*
us1
Ë-Åﬁowî(*--
us2
));

51 
	}
}

	@port/strtoul.c

33 
	gsccsid
[] = "@(#)strtoul.c 8.1 (Berkeley) 6/4/93";

34 
__RCSID
("$NetBSD: strtoul.c,v 1.16 2003/08/07 16:43:45ágc Exp $");

37 
	~<˘y≥.h
>

38 
	~<î∫o.h
>

39 
	~<limôs.h
>

40 
	~<°dlib.h
>

49 
	$°πoul
(c⁄° *
≈å
, **
íd±r
, 
ba£
)

51 c⁄° *
s
;

52 
acc
, 
cutoff
;

53 
c
;

54 
√g
, 
™y
, 
cuéim
;

59 
s
 = 
≈å
;

61 
c
 = (Ë*
s
++;

62 } 
	`is•a˚
(
c
));

63 i‡(
c
 == '-') {

64 
√g
 = 1;

65 
c
 = *
s
++;

67 
√g
 = 0;

68 i‡(
c
 == '+')

69 
c
 = *
s
++;

71 i‡((
ba£
 == 0 || base == 16) &&

72 
c
 ='0' && (*
s
 == 'x' || *s == 'X')) {

73 
c
 = 
s
[1];

74 
s
 += 2;

75 
ba£
 = 16;

77 i‡(
ba£
 == 0)

78 
ba£
 = 
c
 == '0' ? 8 : 10;

80 
cutoff
 = 
ULONG_MAX
 / ()
ba£
;

81 
cuéim
 = ()(
ULONG_MAX
 % ()
ba£
);

82 
acc
 = 0, 
™y
 = 0;; 
c
 = (Ë*
s
++) {

83 i‡(
	`isdigô
(
c
))

84 
c
 -= '0';

85 i‡(
	`ißÕha
(
c
))

86 
c
 -
	`isuµî
(c) ? 'A' - 10 : 'a' - 10;

89 i‡(
c
 >
ba£
)

91 i‡(
™y
 < 0)

93 i‡(
acc
 > 
cutoff
 || (ac¯=cutof‡&& 
c
 > 
cuéim
)) {

94 
™y
 = -1;

95 
acc
 = 
ULONG_MAX
;

96 
î∫o
 = 
ERANGE
;

98 
™y
 = 1;

99 
acc
 *()
ba£
;

100 
acc
 +
c
;

103 i‡(
√g
 && 
™y
 > 0)

104 
acc
 = -acc;

105 i‡(
íd±r
 != 0)

107 *
íd±r
 = (*)(
™y
 ? 
s
 - 1 : 
≈å
);

108  (
acc
);

109 
	}
}

	@port/strtoull.c

34 
	~<limôs.h
>

35 
	~<î∫o.h
>

36 
	~<˘y≥.h
>

37 
	~<°dlib.h
>

46 
	$°πouŒ
(c⁄° *
≈å
, **
íd±r
, 
ba£
)

48 c⁄° *
s
;

49 
acc
;

50 
c
;

51 
cutoff
;

52 
√g
, 
™y
, 
cuéim
;

57 
s
 = 
≈å
;

59 
c
 = *
s
++;

60 } 
	`is•a˚
(()
c
));

61 i‡(
c
 == '-') {

62 
√g
 = 1;

63 
c
 = *
s
++;

65 
√g
 = 0;

66 i‡(
c
 == '+')

67 
c
 = *
s
++;

69 i‡((
ba£
 == 0 || base == 16) &&

70 
c
 ='0' && (*
s
 == 'x' || *s == 'X') &&

71 ((
s
[1] >= '0' && s[1] <= '9') ||

72 (
s
[1] >= 'A' && s[1] <= 'F') ||

73 (
s
[1] >= 'a' && s[1] <= 'f'))) {

74 
c
 = 
s
[1];

75 
s
 += 2;

76 
ba£
 = 16;

78 i‡(
ba£
 == 0)

79 
ba£
 = 
c
 == '0' ? 8 : 10;

80 
acc
 = 
™y
 = 0;

81 i‡(
ba£
 < 2 || base > 36)

82 
noc⁄v
;

84 
cutoff
 = 
ULLONG_MAX
 / 
ba£
;

85 
cuéim
 = 
ULLONG_MAX
 % 
ba£
;

86  ; ; 
c
 = *
s
++) {

87 i‡(
c
 >= '0' && c <= '9')

88 
c
 -= '0';

89 i‡(
c
 >= 'A' && c <= 'Z')

90 
c
 -= 'A' - 10;

91 i‡(
c
 >= 'a' && c <= 'z')

92 
c
 -= 'a' - 10;

95 i‡(
c
 >
ba£
)

97 i‡(
™y
 < 0 || 
acc
 > 
cutoff
 || (ac¯=cutof‡&& 
c
 > 
cuéim
))

98 
™y
 = -1;

100 
™y
 = 1;

101 
acc
 *
ba£
;

102 
acc
 +
c
;

105 i‡(
™y
 < 0) {

106 
acc
 = 
ULLONG_MAX
;

107 
î∫o
 = 
ERANGE
;

108 } i‡(!
™y
) {

109 
noc⁄v
:

110 
î∫o
 = 
EINVAL
;

111 } i‡(
√g
)

112 
acc
 = -acc;

113 i‡(
íd±r
 !
NULL
)

114 *
íd±r
 = (*)(
™y
 ? 
s
 - 1 : 
≈å
);

115  (
acc
);

116 
	}
}

	@test/ascii_tag.c

32 
	~"tif_c⁄fig.h
"

34 
	~<°dio.h
>

35 
	~<°rög.h
>

37 #ifde‡
HAVE_UNISTD_H


38 
	~<uni°d.h
>

41 
	~"tiffio.h
"

43 c⁄° 
	gfûíame
[] = "ascii_test.tiff";

46 
âag_t
 
	mèg
;

47 c⁄° *
	mvÆue
;

48 } 
	gascii_ègs
[] = {

49 { 
TIFFTAG_DOCUMENTNAME
, "Test TIFF image" },

50 { 
TIFFTAG_IMAGEDESCRIPTION
, "TemporaryÅest image" },

51 { 
TIFFTAG_MAKE
, "This isÇot scanned image" },

52 { 
TIFFTAG_MODEL
, "No scanner" },

53 { 
TIFFTAG_PAGENAME
, "TestÖage" },

54 { 
TIFFTAG_SOFTWARE
, "LibtiffÜibrary" },

55 { 
TIFFTAG_DATETIME
, "2004:09:10 16:09:00" },

56 { 
TIFFTAG_ARTIST
, "Andrey V. Kiselev" },

57 { 
TIFFTAG_HOSTCOMPUTER
, "Debian GNU/Linux (Sarge)" },

58 { 
TIFFTAG_TARGETPRINTER
, "NoÖrinter" },

59 { 
TIFFTAG_COPYRIGHT
, "Copyright (c) 2004, Andrey Kiselev" },

60 { 
TIFFTAG_FAXSUBADDRESS
, "Fax subaddress" },

62 { 
TIFFTAG_UNIQUECAMERAMODEL
, "No camera" },

63 { 
TIFFTAG_CAMERASERIALNUMBER
, "1234567890" }

65 
	#NTAGS
 ( (
ascii_ègs
Ë/  (ascii_ègs[0]))

	)

67 c⁄° 
	gök_«mes
[] = "Red\0Green\0Blue";

68 c⁄° 
	gök_«mes_size
 = 15;

71 
	$maö
()

73 
TIFF
 *
tif
;

74 
size_t
 
i
;

75 
buf
[] = { 0, 127, 255 };

76 *
vÆue
;

79 
tif
 = 
	`TIFFO≥n
(
fûíame
, "w");

80 i‡(!
tif
) {

81 
	`Ârötf
 (
°dîr
, "C™'à¸óãÅe° TIFF fûê%s.\n", 
fûíame
);

85 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 1)) {

86 
	`Ârötf
 (
°dîr
, "Can't set ImageWidthÅag.\n");

87 
Áûuª
;

89 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 1)) {

90 
	`Ârötf
 (
°dîr
, "Can't set ImageLengthÅag.\n");

91 
Áûuª
;

93 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 8)) {

94 
	`Ârötf
 (
°dîr
, "Can't set BitsPerSampleÅag.\n");

95 
Áûuª
;

97 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, (
buf
))) {

98 
	`Ârötf
 (
°dîr
, "Can't set SamplesPerPixelÅag.\n");

99 
Áûuª
;

101 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
)) {

102 
	`Ârötf
 (
°dîr
, "Can't set PlanarConfigurationÅag.\n");

103 
Áûuª
;

105 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_RGB
)) {

106 
	`Ârötf
 (
°dîr
, "Can't set PhotometricInterpretationÅag.\n");

107 
Áûuª
;

110 
i
 = 0; i < 
NTAGS
; i++) {

111 i‡(!
	`TIFFSëFõld
(
tif
, 
ascii_ègs
[
i
].
èg
,

112 
ascii_ègs
[
i
].
vÆue
)) {

113 
	`Ârötf
(
°dîr
, "Can't setÅag %lu.\n",

114 ()
ascii_ègs
[
i
].
èg
);

115 
Áûuª
;

120 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_NUMBEROFINKS
, 3)) {

121 
	`Ârötf
 (
°dîr
, "Can't setÅag %d (NUMBEROFINKS).\n",

122 
TIFFTAG_NUMBEROFINKS
);

123 
Áûuª
;

125 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_INKNAMES
, 
ök_«mes_size
, 
ök_«mes
)) {

126 
	`Ârötf
 (
°dîr
, "Can't setÅag %d (INKNAMES).\n",

127 
TIFFTAG_INKNAMES
);

128 
Áûuª
;

132 i‡(!
	`TIFFWrôeSˇ∆öe
(
tif
, 
buf
, 0, 0) < 0) {

133 
	`Ârötf
 (
°dîr
, "Can't write image data.\n");

134 
Áûuª
;

137 
	`TIFFClo£
(
tif
);

140 
tif
 = 
	`TIFFO≥n
(
fûíame
, "r");

141 i‡(!
tif
) {

142 
	`Ârötf
 (
°dîr
, "C™'à›íÅe° TIFF fûê%s.\n", 
fûíame
);

146 
i
 = 0; i < 
NTAGS
; i++) {

147 i‡(!
	`TIFFGëFõld
(
tif
, 
ascii_ègs
[
i
].
èg
, &
vÆue
)

148 || 
	`°rcmp
(
vÆue
, 
ascii_ègs
[
i
].value)) {

149 
	`Ârötf
(
°dîr
, "Can't getÅag %lu.\n",

150 ()
ascii_ègs
[
i
].
èg
);

151 
Áûuª
;

155 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_INKNAMES
, &
vÆue
)

156 || 
	`memcmp
(
vÆue
, 
ök_«mes
, 
ök_«mes_size
)) {

157 
	`Ârötf
 (
°dîr
, "Can't getÅag %d (INKNAMES).\n",

158 
TIFFTAG_INKNAMES
);

159 
Áûuª
;

162 
	`TIFFClo£
(
tif
);

165 
	`u∆ök
(
fûíame
);

168 
Áûuª
:

173 
	`TIFFClo£
(
tif
);

175 
	}
}

	@test/check_tag.c

32 
	~"tiffio.h
"

35 
	$CheckSh‹tFõld
(
TIFF
 *
tif
, c⁄° 
âag_t
 
fõld
, c⁄° 
uöt16
 
vÆue
)

37 
uöt16
 
tmp
 = 123;

39 i‡(!
	`TIFFGëFõld
(
tif
, 
fõld
, &
tmp
)) {

40 
	`Ârötf
 (
°dîr
, "Problem fetchingÅag %lu.\n",

41 (Ë
fõld
);

44 i‡(
tmp
 !
vÆue
) {

45 
	`Ârötf
 (
°dîr
, "Wrong SHORT value fetched forÅag %lu.\n",

46 (Ë
fõld
);

51 
	}
}

54 
	$CheckSh‹tPaúedFõld
(
TIFF
 *
tif
, c⁄° 
âag_t
 
fõld
, c⁄° 
uöt16
 *
vÆues
)

56 
uöt16
 
tmp
[2] = { 123, 456 };

58 i‡(!
	`TIFFGëFõld
(
tif
, 
fõld
, 
tmp
,Åmp + 1)) {

59 
	`Ârötf
 (
°dîr
, "Problem fetchingÅag %lu.\n",

60 (Ë
fõld
);

63 i‡(
tmp
[0] !
vÆues
[0] ||Åmp[1] != values[1]) {

64 
	`Ârötf
 (
°dîr
, "Wrong SHORT PAIR fetched forÅag %lu.\n",

65 (Ë
fõld
);

70 
	}
}

73 
	$CheckL⁄gFõld
(
TIFF
 *
tif
, c⁄° 
âag_t
 
fõld
, c⁄° 
uöt32
 
vÆue
)

75 
uöt32
 
tmp
 = 123;

77 i‡(!
	`TIFFGëFõld
(
tif
, 
fõld
, &
tmp
)) {

78 
	`Ârötf
 (
°dîr
, "Problem fetchingÅag %lu.\n",

79 (Ë
fõld
);

82 i‡(
tmp
 !
vÆue
) {

83 
	`Ârötf
 (
°dîr
, "Wrong LONG value fetched forÅag %lu.\n",

84 (Ë
fõld
);

89 
	}
}

	@test/long_tag.c

32 
	~"tif_c⁄fig.h
"

34 
	~<°dio.h
>

36 #ifde‡
HAVE_UNISTD_H


37 
	~<uni°d.h
>

40 
	~"tiffio.h
"

42 
CheckL⁄gFõld
(
TIFF
 *, 
âag_t
, 
uöt32
);

44 c⁄° *
	gfûíame
 = "long_test.tiff";

46 
	sTags
 {

47 
âag_t
 
	mèg
;

48 
	mcou¡
;

49 
uöt32
 
	mvÆue
;

50 } 
	gl⁄g_ègs
[] = {

51 { 
TIFFTAG_SUBFILETYPE
, 1, 
FILETYPE_REDUCEDIMAGE
|
FILETYPE_PAGE
|
FILETYPE_MASK
 }

53 
	#NTAGS
 ( (
l⁄g_ègs
Ë/  (l⁄g_ègs[0]))

	)

55 c⁄° 
uöt32
 
	gwidth
 = 1;

56 c⁄° 
uöt32
 
	gÀngth
 = 1;

57 c⁄° 
uöt32
 
	grows_≥r_°rù
 = 1;

60 
	$maö
(
¨gc
, **
¨gv
)

62 
TIFF
 *
tif
;

63 
i
;

64 
buf
[3] = { 0, 127, 255 };

65 (Ë
¨gc
;

66 (Ë
¨gv
;

69 
tif
 = 
	`TIFFO≥n
(
fûíame
, "w");

70 i‡(!
tif
) {

71 
	`Ârötf
 (
°dîr
, "C™'à¸óãÅe° TIFF fûê%s.\n", 
fûíame
);

75 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
width
)) {

76 
	`Ârötf
 (
°dîr
, "Can't set ImageWidthÅag.\n");

77 
Áûuª
;

79 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
Àngth
)) {

80 
	`Ârötf
 (
°dîr
, "Can't set ImageLengthÅag.\n");

81 
Áûuª
;

83 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 8)) {

84 
	`Ârötf
 (
°dîr
, "Can't set BitsPerSampleÅag.\n");

85 
Áûuª
;

87 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 3)) {

88 
	`Ârötf
 (
°dîr
, "Can't set SamplesPerPixelÅag.\n");

89 
Áûuª
;

91 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 
rows_≥r_°rù
)) {

92 
	`Ârötf
 (
°dîr
, "Can't set SamplesPerPixelÅag.\n");

93 
Áûuª
;

95 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
)) {

96 
	`Ârötf
 (
°dîr
, "Can't set PlanarConfigurationÅag.\n");

97 
Áûuª
;

99 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_RGB
)) {

100 
	`Ârötf
 (
°dîr
, "Can't set PhotometricInterpretationÅag.\n");

101 
Áûuª
;

104 
i
 = 0; i < 
NTAGS
; i++) {

105 i‡(!
	`TIFFSëFõld
(
tif
, 
l⁄g_ègs
[
i
].
èg
,

106 
l⁄g_ègs
[
i
].
vÆue
)) {

107 
	`Ârötf
(
°dîr
, "Can't setÅag %d.\n",

108 ()
l⁄g_ègs
[
i
].
èg
);

109 
Áûuª
;

114 i‡(!
	`TIFFWrôeSˇ∆öe
(
tif
, 
buf
, 0, 0) < 0) {

115 
	`Ârötf
 (
°dîr
, "Can't write image data.\n");

116 
Áûuª
;

119 
	`TIFFClo£
(
tif
);

122 
tif
 = 
	`TIFFO≥n
(
fûíame
, "r");

123 i‡(!
tif
) {

124 
	`Ârötf
 (
°dîr
, "C™'à›íÅe° TIFF fûê%s.\n", 
fûíame
);

128 i‡(
	`CheckL⁄gFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
width
) < 0)

129 
Áûuª
;

131 i‡(
	`CheckL⁄gFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
Àngth
) < 0)

132 
Áûuª
;

134 i‡(
	`CheckL⁄gFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 
rows_≥r_°rù
) < 0)

135 
Áûuª
;

137 
i
 = 0; i < 
NTAGS
; i++) {

138 i‡(
	`CheckL⁄gFõld
(
tif
, 
l⁄g_ègs
[
i
].
èg
,

139 
l⁄g_ègs
[
i
].
vÆue
) < 0)

140 
Áûuª
;

143 
	`TIFFClo£
(
tif
);

146 
	`u∆ök
(
fûíame
);

149 
Áûuª
:

151 
	`TIFFClo£
(
tif
);

152 
	`u∆ök
(
fûíame
);

154 
	}
}

	@test/rewrite_tag.c

32 
	~"tif_c⁄fig.h
"

34 
	~<°dio.h
>

36 #ifde‡
HAVE_UNISTD_H


37 
	~<uni°d.h
>

40 
	~"tiffio.h
"

41 
	~"tiffi›.h
"

43 c⁄° 
uöt32
 
	gwidth
 = 10;

44 c⁄° 
uöt32
 
	gÀngth
 = 40;

45 c⁄° 
uöt32
 
	grows_≥r_°rù
 = 1;

47 
	$ã°_∑ckbôs
()

50 
TIFF
 *
tif
;

51 
i
;

52 
buf
[10] = {0,0,0,0,0,0,0,0,0,0};

54 
Àngth
 = 20;

55 c⁄° *
fûíame
 = "test_packbits.tif";

58 
tif
 = 
	`TIFFO≥n
(
fûíame
, "w");

60 i‡(!
tif
) {

61 
	`Ârötf
 (
°dîr
, "C™'à¸óãÅe° TIFF fûê%s.\n", 
fûíame
);

65 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_PACKBITS
)) {

66 
	`Ârötf
 (
°dîr
, "Can't set CompressionÅag.\n");

67 
Áûuª
;

69 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
width
)) {

70 
	`Ârötf
 (
°dîr
, "Can't set ImageWidthÅag.\n");

71 
Áûuª
;

73 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
Àngth
)) {

74 
	`Ârötf
 (
°dîr
, "Can't set ImageLengthÅag.\n");

75 
Áûuª
;

77 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 8)) {

78 
	`Ârötf
 (
°dîr
, "Can't set BitsPerSampleÅag.\n");

79 
Áûuª
;

81 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 1)) {

82 
	`Ârötf
 (
°dîr
, "Can't set SamplesPerPixelÅag.\n");

83 
Áûuª
;

85 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 
rows_≥r_°rù
)) {

86 
	`Ârötf
 (
°dîr
, "Can't set SamplesPerPixelÅag.\n");

87 
Áûuª
;

89 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
)) {

90 
	`Ârötf
 (
°dîr
, "Can't set PlanarConfigurationÅag.\n");

91 
Áûuª
;

94 
i
 = 0; i < 
Àngth
; i++ )

96 if–!
	`TIFFWrôeEncodedSåù
–
tif
, 
i
, 
buf
, 10 ) )

98 
	`Ârötf
 (
°dîr
, "Can't write image data.\n");

99 
Áûuª
;

103 
	`TIFFClo£
(
tif
);

107 
tif
 = 
	`TIFFO≥n
(
fûíame
, "r+");

109 i‡(!
tif
) {

110 
	`Ârötf
 (
°dîr
, "C™'à¸óãÅe° TIFF fûê%s.\n", 
fûíame
);

114 
buf
[3] = 17;

115 
buf
[6] = 12;

117 if–!
	`TIFFWrôeEncodedSåù
–
tif
, 6, 
buf
, 10 ) )

119 
	`Ârötf
 (
°dîr
, "Can't write image data.\n");

120 
Áûuª
;

123 
	`TIFFClo£
(
tif
);

129 
Áûuª
:

131 
	`TIFFClo£
(
tif
);

136 
	}
}

141 
	$ªwrôe_ã°
–c⁄° *
fûíame
, 
Àngth
, 
bigtiff
,

142 
uöt64
 
ba£_vÆue
 )

145 
TIFF
 *
tif
;

146 
i
;

147 
buf
[10] = {5,6,7,8,9,10,11,12,13,14};

148 
uöt64
 *
rowoff£t
, *
rowbyãs
;

149 
uöt64
 *
upd_rowoff£t
;

150 
uöt64
 *
upd_byãcou¡
;

153 if–
bigtiff
 )

154 
tif
 = 
	`TIFFO≥n
(
fûíame
, "w8");

156 
tif
 = 
	`TIFFO≥n
(
fûíame
, "w4");

158 i‡(!
tif
) {

159 
	`Ârötf
 (
°dîr
, "C™'à¸óãÅe° TIFF fûê%s.\n", 
fûíame
);

163 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_PACKBITS
)) {

164 
	`Ârötf
 (
°dîr
, "Can't set CompressionÅag.\n");

165 
Áûuª
;

167 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
width
)) {

168 
	`Ârötf
 (
°dîr
, "Can't set ImageWidthÅag.\n");

169 
Áûuª
;

171 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
Àngth
)) {

172 
	`Ârötf
 (
°dîr
, "Can't set ImageLengthÅag.\n");

173 
Áûuª
;

175 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 8)) {

176 
	`Ârötf
 (
°dîr
, "Can't set BitsPerSampleÅag.\n");

177 
Áûuª
;

179 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 1)) {

180 
	`Ârötf
 (
°dîr
, "Can't set SamplesPerPixelÅag.\n");

181 
Áûuª
;

183 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 
rows_≥r_°rù
)) {

184 
	`Ârötf
 (
°dîr
, "Can't set SamplesPerPixelÅag.\n");

185 
Áûuª
;

187 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
)) {

188 
	`Ârötf
 (
°dîr
, "Can't set PlanarConfigurationÅag.\n");

189 
Áûuª
;

192 
i
 = 0; i < 
Àngth
; i++ )

194 if–!
	`TIFFWrôeSˇ∆öe
–
tif
, 
buf
, 
i
, 0 ) )

196 
	`Ârötf
 (
°dîr
, "Can't write image data.\n");

197 
Áûuª
;

201 
	`TIFFClo£
(
tif
);

204 
tif
 = 
	`TIFFO≥n
(
fûíame
, "r+");

205 i‡(!
tif
) {

206 
	`Ârötf
 (
°dîr
, "C™'à›íÅe° TIFF fûê%s.\n", 
fûíame
);

210 if–!
	`TIFFGëFõld
–
tif
, 
TIFFTAG_STRIPOFFSETS
, &
rowoff£t
 ) )

212 
	`Ârötf
 (
°dîr
, "Can't fetch STRIPOFFSETS.\n");

213 
Áûuª
;

216 if–!
	`TIFFGëFõld
–
tif
, 
TIFFTAG_STRIPBYTECOUNTS
, &
rowbyãs
 ) )

218 
	`Ârötf
 (
°dîr
, "Can't fetch STRIPBYTECOUNTS.\n");

219 
Áûuª
;

222 
upd_rowoff£t
 = (
uöt64
 *Ë
	`_TIFFmÆloc
((uöt64Ë* 
Àngth
);

223  
i
 = 0; i < 
Àngth
; i++ )

224 
upd_rowoff£t
[
i
] = 
ba£_vÆue
 + i*10;

226 if–!
	`_TIFFRewrôeFõld
–
tif
, 
TIFFTAG_STRIPOFFSETS
, 
TIFF_LONG8
,

227 
Àngth
, 
upd_rowoff£t
 ) )

229 
	`Ârötf
 (
°dîr
, "Can'tÑewrite STRIPOFFSETS.\n");

230 
Áûuª
;

233 
	`_TIFF‰ì
–
upd_rowoff£t
 );

235 
upd_byãcou¡
 = (
uöt64
 *Ë
	`_TIFFmÆloc
((uöt64Ë* 
Àngth
);

236  
i
 = 0; i < 
Àngth
; i++ )

237 
upd_byãcou¡
[
i
] = 100 + i*10;

239 if–!
	`_TIFFRewrôeFõld
–
tif
, 
TIFFTAG_STRIPBYTECOUNTS
, 
TIFF_LONG8
,

240 
Àngth
, 
upd_byãcou¡
 ) )

242 
	`Ârötf
 (
°dîr
, "Can'tÑewrite STRIPBYTECOUNTS.\n");

243 
Áûuª
;

246 
	`_TIFF‰ì
–
upd_byãcou¡
 );

248 
	`TIFFClo£
(
tif
);

252 
tif
 = 
	`TIFFO≥n
(
fûíame
, "r");

253 i‡(!
tif
) {

254 
	`Ârötf
 (
°dîr
, "C™'à›íÅe° TIFF fûê%s.\n", 
fûíame
);

258 if–!
	`TIFFGëFõld
–
tif
, 
TIFFTAG_STRIPOFFSETS
, &
rowoff£t
 ) )

260 
	`Ârötf
 (
°dîr
, "Can't fetch STRIPOFFSETS.\n");

261 
Áûuª
;

264  
i
 = 0; i < 
Àngth
; i++ )

266 
uöt64
 
ex≥˘
 = 
ba£_vÆue
 + 
i
*10;

268 if–
rowoff£t
[
i
] !
ex≥˘
 )

270 
	`Ârötf
–
°dîr
,

272 
fûíame
, 
i
,

273 (Ë(
rowoff£t
[
i
] >> 32),

274 (Ë(
rowoff£t
[
i
]&0xFFFFFFFF),

275 (Ë(
ex≥˘
 >> 32),

276 (Ë(
ex≥˘
 & 0xFFFFFFFF) );

277 
Áûuª
;

281 if–!
	`TIFFGëFõld
–
tif
, 
TIFFTAG_STRIPBYTECOUNTS
, &
rowbyãs
 ) )

283 
	`Ârötf
 (
°dîr
, "Can't fetch STRIPBYTECOUNTS.\n");

284 
Áûuª
;

287  
i
 = 0; i < 
Àngth
; i++ )

289 
uöt64
 
ex≥˘
 = 100 + 
i
*10;

291 if–
rowbyãs
[
i
] !
ex≥˘
 )

293 
	`Ârötf
–
°dîr
,

295 
fûíame
, 
i
,

296 (Ë(
rowbyãs
[
i
] >> 32),

297 (Ë(
rowbyãs
[
i
] & 0xFFFFFFFF),

298 (Ë(
ex≥˘
 >> 32),

299 (Ë(
ex≥˘
 & 0xFFFFFFFF) );

300 
Áûuª
;

304 
	`TIFFClo£
–
tif
 );

307 
	`u∆ök
(
fûíame
);

310 
Áûuª
:

312 
	`TIFFClo£
(
tif
);

317 
	}
}

323 
	$maö
(
¨gc
, **
¨gv
)

325 (Ë
¨gc
;

326 (Ë
¨gv
;

327 
Áûuª
 = 0;

329 
Áûuª
 |
	`ã°_∑ckbôs
();

332 
Áûuª
 |
	`ªwrôe_ã°
( "rewrite1.tif", 10, 0, 100 );

333 
Áûuª
 |
	`ªwrôe_ã°
( "rewrite2.tif", 10, 1, 100 );

336 
Áûuª
 |
	`ªwrôe_ã°
( "rewrite3.tif", 1, 0, 100 );

337 
Áûuª
 |
	`ªwrôe_ã°
( "rewrite4.tif", 1, 1, 100 );

340 
Áûuª
 |
	`ªwrôe_ã°
( "rewrite5.tif", 1000, 1, 0x6000000000ULL );

341 
Áûuª
 |
	`ªwrôe_ã°
( "rewrite6.tif", 1, 1, 0x6000000000ULL );

343  
Áûuª
;

344 
	}
}

	@test/short_tag.c

32 
	~"tif_c⁄fig.h
"

34 
	~<°dio.h
>

36 #ifde‡
HAVE_UNISTD_H


37 
	~<uni°d.h
>

40 
	~"tiffio.h
"

41 
	~"tif·e°.h
"

43 c⁄° 
	gfûíame
[] = "short_test.tiff";

45 
	#SPP
 3

	)

46 c⁄° 
uöt16
 
	gwidth
 = 1;

47 c⁄° 
uöt16
 
	gÀngth
 = 1;

48 c⁄° 
uöt16
 
	gbps
 = 8;

49 c⁄° 
uöt16
 
	gphŸomëric
 = 
PHOTOMETRIC_RGB
;

50 c⁄° 
uöt16
 
	grows_≥r_°rù
 = 1;

51 c⁄° 
uöt16
 
	g∂™¨c⁄fig
 = 
PLANARCONFIG_CONTIG
;

54 c⁄° 
âag_t
 
	mèg
;

55 c⁄° 
uöt16
 
	mvÆue
;

56 } 
	gsh‹t_sögÀ_ègs
[] = {

57 { 
TIFFTAG_COMPRESSION
, 
COMPRESSION_NONE
 },

58 { 
TIFFTAG_FILLORDER
, 
FILLORDER_MSB2LSB
 },

59 { 
TIFFTAG_ORIENTATION
, 
ORIENTATION_BOTRIGHT
 },

60 { 
TIFFTAG_RESOLUTIONUNIT
, 
RESUNIT_INCH
 },

61 { 
TIFFTAG_MINSAMPLEVALUE
, 23 },

62 { 
TIFFTAG_MAXSAMPLEVALUE
, 241 },

63 { 
TIFFTAG_INKSET
, 
INKSET_MULTIINK
 },

64 { 
TIFFTAG_NUMBEROFINKS
, 
SPP
 },

65 { 
TIFFTAG_SAMPLEFORMAT
, 
SAMPLEFORMAT_UINT
 }

67 
	#NSINGLETAGS
 ((
sh‹t_sögÀ_ègs
Ë/ (sh‹t_sögÀ_ègs[0]))

	)

70 c⁄° 
âag_t
 
	mèg
;

71 c⁄° 
uöt16
 
	mvÆues
[2];

72 } 
	gsh‹t_∑úed_ègs
[] = {

73 { 
TIFFTAG_PAGENUMBER
, {1, 1} },

74 { 
TIFFTAG_HALFTONEHINTS
, {0, 255} },

75 { 
TIFFTAG_DOTRANGE
, {8, 16} },

76 { 
TIFFTAG_YCBCRSUBSAMPLING
, {2, 1} }

78 
	#NPAIREDTAGS
 ((
sh‹t_∑úed_ègs
Ë/ (sh‹t_∑úed_ègs[0]))

	)

81 
	$maö
()

83 
TIFF
 *
tif
;

84 
size_t
 
i
;

85 
buf
[
SPP
] = { 0, 127, 255 };

88 
tif
 = 
	`TIFFO≥n
(
fûíame
, "w");

89 i‡(!
tif
) {

90 
	`Ârötf
 (
°dîr
, "C™'à¸óãÅe° TIFF fûê%s.\n", 
fûíame
);

94 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
width
)) {

95 
	`Ârötf
 (
°dîr
, "Can't set ImageWidthÅag.\n");

96 
Áûuª
;

98 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
Àngth
)) {

99 
	`Ârötf
 (
°dîr
, "Can't set ImageLengthÅag.\n");

100 
Áûuª
;

102 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 
bps
)) {

103 
	`Ârötf
 (
°dîr
, "Can't set BitsPerSampleÅag.\n");

104 
Áûuª
;

106 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 
SPP
)) {

107 
	`Ârötf
 (
°dîr
, "Can't set SamplesPerPixelÅag.\n");

108 
Áûuª
;

110 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 
rows_≥r_°rù
)) {

111 
	`Ârötf
 (
°dîr
, "Can't set SamplesPerPixelÅag.\n");

112 
Áûuª
;

114 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
∂™¨c⁄fig
)) {

115 
	`Ârötf
 (
°dîr
, "Can't set PlanarConfigurationÅag.\n");

116 
Áûuª
;

118 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric
)) {

119 
	`Ârötf
 (
°dîr
, "Can't set PhotometricInterpretationÅag.\n");

120 
Áûuª
;

123 
i
 = 0; i < 
NSINGLETAGS
; i++) {

124 i‡(!
	`TIFFSëFõld
(
tif
, 
sh‹t_sögÀ_ègs
[
i
].
èg
,

125 
sh‹t_sögÀ_ègs
[
i
].
vÆue
)) {

126 
	`Ârötf
(
°dîr
, "Can't setÅag %lu.\n",

127 ()
sh‹t_sögÀ_ègs
[
i
].
èg
);

128 
Áûuª
;

132 
i
 = 0; i < 
NPAIREDTAGS
; i++) {

133 i‡(!
	`TIFFSëFõld
(
tif
, 
sh‹t_∑úed_ègs
[
i
].
èg
,

134 
sh‹t_∑úed_ègs
[
i
].
vÆues
[0],

135 
sh‹t_∑úed_ègs
[
i
].
vÆues
[1])) {

136 
	`Ârötf
(
°dîr
, "Can't setÅag %lu.\n",

137 ()
sh‹t_∑úed_ègs
[
i
].
èg
);

138 
Áûuª
;

143 i‡(!
	`TIFFWrôeSˇ∆öe
(
tif
, 
buf
, 0, 0) < 0) {

144 
	`Ârötf
 (
°dîr
, "Can't write image data.\n");

145 
Áûuª
;

148 
	`TIFFClo£
(
tif
);

151 
tif
 = 
	`TIFFO≥n
(
fûíame
, "r");

152 i‡(!
tif
) {

153 
	`Ârötf
 (
°dîr
, "C™'à›íÅe° TIFF fûê%s.\n", 
fûíame
);

157 i‡(
	`CheckL⁄gFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
width
) < 0)

158 
Áûuª
;

160 i‡(
	`CheckL⁄gFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
Àngth
) < 0)

161 
Áûuª
;

163 i‡(
	`CheckSh‹tFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 
bps
) < 0)

164 
Áûuª
;

166 i‡(
	`CheckSh‹tFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric
) < 0)

167 
Áûuª
;

169 i‡(
	`CheckSh‹tFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 
SPP
) < 0)

170 
Áûuª
;

172 i‡(
	`CheckL⁄gFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 
rows_≥r_°rù
) < 0)

173 
Áûuª
;

175 i‡(
	`CheckSh‹tFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
∂™¨c⁄fig
) < 0)

176 
Áûuª
;

178 
i
 = 0; i < 
NSINGLETAGS
; i++) {

179 i‡(
	`CheckSh‹tFõld
(
tif
, 
sh‹t_sögÀ_ègs
[
i
].
èg
,

180 
sh‹t_sögÀ_ègs
[
i
].
vÆue
) < 0)

181 
Áûuª
;

184 
i
 = 0; i < 
NPAIREDTAGS
; i++) {

185 i‡(
	`CheckSh‹tPaúedFõld
(
tif
, 
sh‹t_∑úed_ègs
[
i
].
èg
,

186 
sh‹t_∑úed_ègs
[
i
].
vÆues
) < 0)

187 
Áûuª
;

190 
	`TIFFClo£
(
tif
);

193 
	`u∆ök
(
fûíame
);

196 
Áûuª
:

201 
	`TIFFClo£
(
tif
);

203 
	}
}

	@test/strip.c

32 
	~<°dio.h
>

33 
	~<°rög.h
>

35 
	~"tiffio.h
"

38 
	$wrôe_°rùs
(
TIFF
 *
tif
, c⁄° 
td©a_t
 
¨øy
, c⁄° 
tsize_t
 
size
)

40 
t°rù_t
 
°rù
, 
n°rùs
;

41 
tsize_t
 
°rùsize
, 
off£t
;

43 
°rùsize
 = 
	`TIFFSåùSize
(
tif
);

44 i‡(!
°rùsize
) {

45 
	`Ârötf
 (
°dîr
, "Wrong size of strip.\n");

49 
n°rùs
 = 
	`TIFFNumbîOfSåùs
(
tif
);

50 
off£t
 = 0, 
°rù
 = 0;

51 
off£t
 < 
size
 && 
°rù
 < 
n°rùs
;

52 
off£t
+=
°rùsize
, 
°rù
++) {

56 
tsize_t
 
bufsize
 = 
size
 - 
off£t
;

57 i‡(
bufsize
 > 
°rùsize
)

58 
bufsize
 = 
°rùsize
;

60 i‡(
	`TIFFWrôeEncodedSåù
(
tif
, 
°rù
, (*)
¨øy
 + 
off£t
,

61 
bufsize
) != bufsize) {

62 
	`Ârötf
 (
°dîr
, "Can't write strip %lu.\n",

63 ()
°rù
);

69 
	}
}

72 
	$ªad_°rùs
(
TIFF
 *
tif
, c⁄° 
td©a_t
 
¨øy
, c⁄° 
tsize_t
 
size
)

74 
t°rù_t
 
°rù
, 
n°rùs
;

75 
tsize_t
 
°rùsize
, 
off£t
;

76 
td©a_t
 
buf
 = 
NULL
;

78 
°rùsize
 = 
	`TIFFSåùSize
(
tif
);

79 i‡(!
°rùsize
) {

80 
	`Ârötf
 (
°dîr
, "Wrong size of strip.\n");

84 
buf
 = 
	`_TIFFmÆloc
(
°rùsize
);

85 i‡(!
buf
) {

86 
	`Ârötf
 (
°dîr
, "Can'tállocate space for strip buffer.\n");

90 
n°rùs
 = 
	`TIFFNumbîOfSåùs
(
tif
);

91 
off£t
 = 0, 
°rù
 = 0;

92 
off£t
 < 
size
 && 
°rù
 < 
n°rùs
;

93 
off£t
+=
°rùsize
, 
°rù
++) {

97 
tsize_t
 
bufsize
 = 
size
 - 
off£t
;

98 i‡(
bufsize
 > 
°rùsize
)

99 
bufsize
 = 
°rùsize
;

101 i‡(
	`TIFFRódEncodedSåù
(
tif
, 
°rù
, 
buf
, -1Ë!
bufsize
) {

102 
	`Ârötf
 (
°dîr
, "Can'tÑead strip %lu.\n",

103 ()
°rù
);

106 i‡(
	`memcmp
(
buf
, (*)
¨øy
 + 
off£t
, 
bufsize
) != 0) {

107 
	`Ârötf
 (
°dîr
, "Wrong dataÑead for strip %lu.\n",

108 ()
°rù
);

109 
	`_TIFF‰ì
(
buf
);

114 
	`_TIFF‰ì
(
buf
);

117 
	}
}

120 
	$¸óã_image_°rùed
(c⁄° *
«me
, 
uöt32
 
width
, uöt32 
Àngth
,

121 
uöt32
 
row•î°rù
, 
uöt16
 
com¥essi⁄
,

122 
uöt16
 
•p
, uöt16 
bps
, uöt16 
phŸomëric
,

123 
uöt16
 
ßm∂ef‹m©
, uöt16 
∂™¨c⁄fig
,

124 c⁄° 
td©a_t
 
¨øy
, c⁄° 
tsize_t
 
size
)

126 
TIFF
 *
tif
;

129 
tif
 = 
	`TIFFO≥n
(
«me
, "w");

130 i‡(!
tif
)

131 
›íÁûuª
;

133 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
width
)) {

134 
	`Ârötf
 (
°dîr
, "Can't set ImageWidthÅag.\n");

135 
Áûuª
;

137 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
Àngth
)) {

138 
	`Ârötf
 (
°dîr
, "Can't set ImageLengthÅag.\n");

139 
Áûuª
;

141 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 
bps
)) {

142 
	`Ârötf
 (
°dîr
, "Can't set BitsPerSampleÅag.\n");

143 
Áûuª
;

145 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 
•p
)) {

146 
	`Ârötf
 (
°dîr
, "Can't set SamplesPerPixelÅag.\n");

147 
Áûuª
;

149 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
)) {

150 
	`Ârötf
 (
°dîr
, "Can't set RowsPerStripÅag.\n");

151 
Áûuª
;

153 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
∂™¨c⁄fig
)) {

154 
	`Ârötf
 (
°dîr
, "Can't set PlanarConfigurationÅag.\n");

155 
Áûuª
;

157 i‡(!
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric
)) {

158 
	`Ârötf
 (
°dîr
, "Can't set PhotometricInterpretationÅag.\n");

159 
Áûuª
;

162 i‡(
	`wrôe_°rùs
(
tif
, 
¨øy
, 
size
) < 0) {

163 
	`Ârötf
 (
°dîr
, "Can't write image data.\n");

164 
Áûuª
;

167 
	`TIFFClo£
(
tif
);

170 
Áûuª
:

171 
	`TIFFClo£
(
tif
);

172 
›íÁûuª
:

173 
	`Ârötf
 (
°dîr
, "Can't createÅest TIFF file %s:\n"

177 
«me
, (Ë
width
, (Ë
Àngth
, (Ë
row•î°rù
,

178 
com¥essi⁄
, 
bps
, 
•p
, 
ßm∂ef‹m©
, 
∂™¨c⁄fig
,

179 
phŸomëric
);

181 
	}
}

184 
	$ªad_image_°rùed
(c⁄° *
«me
, 
uöt32
 
width
, uöt32 
Àngth
,

185 
uöt32
 
row•î°rù
, 
uöt16
 
com¥essi⁄
,

186 
uöt16
 
•p
, uöt16 
bps
, uöt16 
phŸomëric
,

187 
uöt16
 
ßm∂ef‹m©
, uöt16 
∂™¨c⁄fig
,

188 c⁄° 
td©a_t
 
¨øy
, c⁄° 
tsize_t
 
size
)

190 
TIFF
 *
tif
;

191 
uöt16
 
vÆue_u16
;

192 
uöt32
 
vÆue_u32
;

195 
tif
 = 
	`TIFFO≥n
(
«me
, "r");

196 i‡(!
tif
)

197 
›íÁûuª
;

199 i‡(
	`TIFFIsTûed
(
tif
)) {

200 
	`Ârötf
 (
°dîr
, "Can'tÑead image %s, it isÅiled.\n",

201 
«me
);

202 
Áûuª
;

204 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, &
vÆue_u32
)

205 || 
vÆue_u32
 !
width
) {

206 
	`Ârötf
 (
°dîr
, "C™'àgëÅag %d.\n", 
TIFFTAG_IMAGEWIDTH
);

207 
Áûuª
;

209 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
vÆue_u32
)

210 || 
vÆue_u32
 !
Àngth
) {

211 
	`Ârötf
 (
°dîr
, "C™'àgëÅag %d.\n", 
TIFFTAG_IMAGELENGTH
);

212 
Áûuª
;

214 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, &
vÆue_u16
)

215 || 
vÆue_u16
 !
bps
) {

216 
	`Ârötf
 (
°dîr
, "C™'àgëÅag %d.\n", 
TIFFTAG_BITSPERSAMPLE
);

217 
Áûuª
;

219 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, &
vÆue_u16
)

220 || 
vÆue_u16
 !
phŸomëric
) {

221 
	`Ârötf
 (
°dîr
, "C™'àgëÅag %d.\n", 
TIFFTAG_PHOTOMETRIC
);

222 
Áûuª
;

224 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, &
vÆue_u16
)

225 || 
vÆue_u16
 !
•p
) {

226 
	`Ârötf
 (
°dîr
, "C™'àgëÅag %d.\n", 
TIFFTAG_SAMPLESPERPIXEL
);

227 
Áûuª
;

229 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
vÆue_u32
)

230 || 
vÆue_u32
 !
row•î°rù
) {

231 
	`Ârötf
 (
°dîr
, "C™'àgëÅag %d.\n", 
TIFFTAG_ROWSPERSTRIP
);

232 
Áûuª
;

234 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, &
vÆue_u16
)

235 || 
vÆue_u16
 !
∂™¨c⁄fig
) {

236 
	`Ârötf
 (
°dîr
, "C™'àgëÅag %d.\n", 
TIFFTAG_PLANARCONFIG
);

237 
Áûuª
;

240 i‡(
	`ªad_°rùs
(
tif
, 
¨øy
, 
size
) < 0) {

241 
	`Ârötf
 (
°dîr
, "Can'tÑead image data.\n");

242 
Áûuª
;

245 
	`TIFFClo£
(
tif
);

248 
Áûuª
:

249 
	`TIFFClo£
(
tif
);

250 
›íÁûuª
:

251 
	`Ârötf
 (
°dîr
, "Can'tÑeadÅest TIFF file %s:\n"

255 
«me
, (Ë
width
, (Ë
Àngth
, (Ë
row•î°rù
,

256 
com¥essi⁄
, 
bps
, 
•p
, 
ßm∂ef‹m©
, 
∂™¨c⁄fig
,

257 
phŸomëric
);

259 
	}
}

262 
	$wrôe_sˇ∆öes
(
TIFF
 *
tif
, c⁄° 
td©a_t
 
¨øy
, c⁄° 
tsize_t
 
size
)

264 
uöt32
 
Àngth
, 
row
;

265 
tsize_t
 
sˇ∆öesize
, 
off£t
;

266 (Ë
size
;

268 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
Àngth
)) {

269 
	`Ârötf
 (
°dîr
, "C™'àgëÅag %d.\n", 
TIFFTAG_IMAGELENGTH
);

273 
sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(
tif
);

274 i‡(!
sˇ∆öesize
) {

275 
	`Ârötf
 (
°dîr
, "Wrong size of scanline.\n");

279 
off£t
 = 0, 
row
 = 0;Ñow < 
Àngth
; off£t+=
sˇ∆öesize
,Ñow++) {

280 i‡(
	`TIFFWrôeSˇ∆öe
(
tif
, (*)
¨øy
 + 
off£t
, 
row
, 0) < 0) {

281 
	`Ârötf
 (
°dîr
,

282 "C™'àwrôêimagêd©®©Ñow %lu.\n", (Ë
row
);

288 
	}
}

	@test/strip_rw.c

32 
	~"tif_c⁄fig.h
"

34 
	~<°dio.h
>

36 #ifde‡
HAVE_UNISTD_H


37 
	~<uni°d.h
>

40 
	~"tiffio.h
"

41 
	~"ã°_¨øys.h
"

44 
¸óã_image_°rùed
(c⁄° *, 
uöt32
, uöt32, uöt32, 
uöt16
, uint16,

45 
uöt16
, uöt16, uöt16, uöt16, c⁄° 
td©a_t
,

46 c⁄° 
tsize_t
);

48 
ªad_image_°rùed
(c⁄° *, 
uöt32
, uöt32, uöt32, 
uöt16
, uint16,

49 
uöt16
, uöt16, uöt16, uöt16, c⁄° 
td©a_t
,

50 c⁄° 
tsize_t
);

52 c⁄° *
	gfûíame
 = "strip_test.tiff";

55 
	$maö
(
¨gc
, **
¨gv
)

57 
uöt32
 
row•î°rù
;

58 
uöt16
 
com¥essi⁄
;

59 
uöt16
 
•p
, 
bps
, 
phŸomëric
, 
ßm∂ef‹m©
, 
∂™¨c⁄fig
;

60 (Ë
¨gc
;

61 (Ë
¨gv
;

67 
row•î°rù
 = 1;

68 
com¥essi⁄
 = 
COMPRESSION_NONE
;

69 
•p
 = 1;

70 
bps
 = 8;

71 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

72 
ßm∂ef‹m©
 = 
SAMPLEFORMAT_UINT
;

73 
∂™¨c⁄fig
 = 
PLANARCONFIG_CONTIG
;

75 i‡(
	`¸óã_image_°rùed
(
fûíame
, 
XSIZE
 * 
YSIZE
, 1, 
row•î°rù
,

76 
com¥essi⁄
, 
•p
, 
bps
, 
phŸomëric
,

77 
ßm∂ef‹m©
, 
∂™¨c⁄fig
,

78 (c⁄° 
td©a_t
Ë
byã_¨øy1
, 
byã_¨øy1_size
) < 0) {

79 
	`Ârötf
 (
°dîr
, "C™'à¸óã TIFF fûê%s.\n", 
fûíame
);

80 
Áûuª
;

82 i‡(
	`ªad_image_°rùed
(
fûíame
, 
XSIZE
 * 
YSIZE
, 1, 
row•î°rù
,

83 
com¥essi⁄
, 
•p
, 
bps
, 
phŸomëric
,

84 
ßm∂ef‹m©
, 
∂™¨c⁄fig
,

85 (c⁄° 
td©a_t
Ë
byã_¨øy1
, 
byã_¨øy1_size
) < 0) {

86 
	`Ârötf
 (
°dîr
, "C™'àªad TIFF fûê%s.\n", 
fûíame
);

87 
Áûuª
;

89 
	`u∆ök
(
fûíame
);

91 i‡(
	`¸óã_image_°rùed
(
fûíame
, 1, 
XSIZE
 * 
YSIZE
, 
row•î°rù
,

92 
com¥essi⁄
, 
•p
, 
bps
, 
phŸomëric
,

93 
ßm∂ef‹m©
, 
∂™¨c⁄fig
,

94 (c⁄° 
td©a_t
Ë
byã_¨øy1
, 
byã_¨øy1_size
) < 0) {

95 
	`Ârötf
 (
°dîr
, "C™'à¸óã TIFF fûê%s.\n", 
fûíame
);

96 
Áûuª
;

98 i‡(
	`ªad_image_°rùed
(
fûíame
, 1, 
XSIZE
 * 
YSIZE
, 
row•î°rù
,

99 
com¥essi⁄
, 
•p
, 
bps
, 
phŸomëric
,

100 
ßm∂ef‹m©
, 
∂™¨c⁄fig
,

101 (c⁄° 
td©a_t
Ë
byã_¨øy1
, 
byã_¨øy1_size
) < 0) {

102 
	`Ârötf
 (
°dîr
, "C™'àªad TIFF fûê%s.\n", 
fûíame
);

103 
Áûuª
;

105 
	`u∆ök
(
fûíame
);

110 
row•î°rù
 = 1;

111 
•p
 = 1;

112 
bps
 = 8;

113 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

114 
ßm∂ef‹m©
 = 
SAMPLEFORMAT_UINT
;

115 
∂™¨c⁄fig
 = 
PLANARCONFIG_CONTIG
;

117 i‡(
	`¸óã_image_°rùed
(
fûíame
, 
XSIZE
, 
YSIZE
, 
row•î°rù
,

118 
com¥essi⁄
, 
•p
, 
bps
, 
phŸomëric
,

119 
ßm∂ef‹m©
, 
∂™¨c⁄fig
,

120 (c⁄° 
td©a_t
Ë
byã_¨øy1
, 
byã_¨øy1_size
) < 0) {

121 
	`Ârötf
 (
°dîr
, "C™'à¸óã TIFF fûê%s.\n", 
fûíame
);

122 
Áûuª
;

124 i‡(
	`ªad_image_°rùed
(
fûíame
, 
XSIZE
, 
YSIZE
, 
row•î°rù
,

125 
com¥essi⁄
, 
•p
, 
bps
, 
phŸomëric
,

126 
ßm∂ef‹m©
, 
∂™¨c⁄fig
,

127 (c⁄° 
td©a_t
Ë
byã_¨øy1
, 
byã_¨øy1_size
) < 0) {

128 
	`Ârötf
 (
°dîr
, "C™'àªad TIFF fûê%s.\n", 
fûíame
);

129 
Áûuª
;

131 
	`u∆ök
(
fûíame
);

133 
row•î°rù
 = 
YSIZE
;

134 i‡(
	`¸óã_image_°rùed
(
fûíame
, 
XSIZE
, 
YSIZE
, 
row•î°rù
,

135 
com¥essi⁄
, 
•p
, 
bps
, 
phŸomëric
,

136 
ßm∂ef‹m©
, 
∂™¨c⁄fig
,

137 (c⁄° 
td©a_t
Ë
byã_¨øy1
, 
byã_¨øy1_size
) < 0) {

138 
	`Ârötf
 (
°dîr
, "C™'à¸óã TIFF fûê%s.\n", 
fûíame
);

139 
Áûuª
;

141 i‡(
	`ªad_image_°rùed
(
fûíame
, 
XSIZE
, 
YSIZE
, 
row•î°rù
,

142 
com¥essi⁄
, 
•p
, 
bps
, 
phŸomëric
,

143 
ßm∂ef‹m©
, 
∂™¨c⁄fig
,

144 (c⁄° 
td©a_t
Ë
byã_¨øy1
, 
byã_¨øy1_size
) < 0) {

145 
	`Ârötf
 (
°dîr
, "C™'àªad TIFF fûê%s.\n", 
fûíame
);

146 
Áûuª
;

148 
	`u∆ök
(
fûíame
);

152 
Áûuª
:

153 
	`u∆ök
(
fûíame
);

155 
	}
}

	@test/test_arrays.c

32 
	~<°ddef.h
>

34 
	~"ã°_¨øys.h
"

36 c⁄° 
	gbyã_¨øy1
[
XSIZE
 * 
YSIZE
]=

109 c⁄° 
size_t
 
	gbyã_¨øy1_size
 = (
byã_¨øy1
);

111 c⁄° 
	gbyã_¨øy2
[
YSIZE
 * 
XSIZE
] =

184 c⁄° 
size_t
 
	gbyã_¨øy2_size
 = (
byã_¨øy2
);

186 c⁄° 
	gbyã_¨øy3
[
YSIZE
 * 
XSIZE
] =

251 c⁄° 
size_t
 
	gbyã_¨øy3_size
 = (
byã_¨øy3
);

253 c⁄° 
	g¨øy_Êﬂt1
[
YSIZE
 * 
XSIZE
] =

372 c⁄° 
size_t
 
	g¨øy_Êﬂt1_size
 = (
¨øy_Êﬂt1
);

374 c⁄° 
	g¨øy_Êﬂt2
[
YSIZE
 * 
XSIZE
] =

493 c⁄° 
size_t
 
	g¨øy_Êﬂt2_size
 = (
¨øy_Êﬂt2
);

495 c⁄° 
	g¨øy_doubÀ1
[
YSIZE
 * 
XSIZE
] =

660 c⁄° 
size_t
 
	g¨øy_doubÀ1_size
 = (
¨øy_doubÀ1
);

662 c⁄° 
	g¨øy_doubÀ2
[
YSIZE
 * 
XSIZE
] =

827 c⁄° 
size_t
 
	g¨øy_doubÀ2_size
 = (
¨øy_doubÀ2
);

	@test/test_arrays.h

32 #i‚de‡
_TEST_ARRAYS_


33 
	#_TEST_ARRAYS_


	)

35 
	~<°ddef.h
>

37 
	#XSIZE
 37

	)

38 
	#YSIZE
 23

	)

40 c⁄° 
byã_¨øy1
[];

41 c⁄° 
size_t
 
byã_¨øy1_size
;

43 c⁄° 
byã_¨øy2
[];

44 c⁄° 
size_t
 
byã_¨øy2_size
;

46 c⁄° 
byã_¨øy3
[];

47 c⁄° 
size_t
 
byã_¨øy3_size
;

49 c⁄° 
¨øy_Êﬂt1
[];

50 c⁄° 
size_t
 
¨øy_Êﬂt1_size
;

52 c⁄° 
¨øy_Êﬂt2
[];

53 c⁄° 
size_t
 
¨øy_Êﬂt2_size
;

55 c⁄° 
¨øy_doubÀ1
[];

56 c⁄° 
size_t
 
¨øy_doubÀ1_size
;

58 c⁄° 
¨øy_doubÀ2
[];

59 c⁄° 
size_t
 
¨øy_doubÀ2_size
;

	@test/tifftest.h

26 #i‚de‡
_TIFFTEST_


27 
	#_TIFFTEST_


	)

35 
	~"tiffio.h
"

37 
CheckSh‹tFõld
(
TIFF
 *, c⁄° 
âag_t
, c⁄° 
uöt16
);

38 
CheckSh‹tPaúedFõld
(
TIFF
 *, c⁄° 
âag_t
, c⁄° 
uöt16
*);

39 
CheckL⁄gFõld
(
TIFF
 *, c⁄° 
âag_t
, c⁄° 
uöt32
);

	@tools/bmp2tiff.c

30 
	~"tif_c⁄fig.h
"

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<˘y≥.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<sys/°©.h
>

39 #ifde‡
HAVE_UNISTD_H


40 
	~<uni°d.h
>

43 #i‡
HAVE_FCNTL_H


44 
	~<f˙é.h
>

47 #i‡
HAVE_SYS_TYPES_H


48 
	~<sys/ty≥s.h
>

51 #i‡
HAVE_IO_H


52 
	~<io.h
>

55 #ifde‡
NEED_LIBPORT


56 
	~"libp‹t.h
"

59 
	~"tiffio.h
"

61 #i‚de‡
O_BINARY


62 
	#O_BINARY
 0

	)

65 
	eBMPTy≥


67 
	mBMPT_WIN4
,

68 
	mBMPT_WIN5
,

69 
	mBMPT_OS21
,

70 
	mBMPT_OS22


94 
	eBMPCom¥Mëhod


96 
	mBMPC_RGB
 = 0L,

97 
	mBMPC_RLE8
 = 1L,

98 
	mBMPC_RLE4
 = 2L,

99 
	mBMPC_BITFIELDS
 = 3L,

104 
	mBMPC_JPEG
 = 4L,

105 
	mBMPC_PNG
 = 5L

108 
	eBMPLCSTy≥


110 
	mBMPLT_CALIBRATED_RGB
 = 0,

113 
	mBMPLT_DEVICE_RGB
 = 1,

114 
	mBMPLT_DEVICE_CMYK
 = 2

119 
öt32
 
	miCIEX
;

120 
öt32
 
	miCIEY
;

121 
öt32
 
	miCIEZ
;

122 } 
	tBMPCIEXYZ
;

127 
BMPCIEXYZ
 
	miCIERed
;

128 
BMPCIEXYZ
 
	miCIEGªí
;

129 
BMPCIEXYZ
 
	miCIEBlue
;

130 } 
	tBMPCIEXYZTrùÀ
;

134 
	mbTy≥
[2];

135 
uöt32
 
	miSize
;

139 
uöt16
 
	miRe£rved1
;

140 
uöt16
 
	miRe£rved2
;

141 
uöt32
 
	miOffBôs
;

142 } 
	tBMPFûeHódî
;

145 c⁄° 
	gBFH_SIZE
 = 14;

149 
uöt32
 
	miSize
;

152 
öt32
 
	miWidth
;

153 
öt32
 
	miHeight
;

155 
öt16
 
	miPœ√s
;

156 
öt16
 
	miBôCou¡
;

160 
uöt32
 
	miCom¥essi⁄
;

161 
uöt32
 
	miSizeImage
;

165 
öt32
 
	miXPñsPîMëî
;

166 
öt32
 
	miYPñsPîMëî
;

167 
uöt32
 
	miCÃU£d
;

171 
öt32
 
	miCÃImp‹è¡
;

179 
öt32
 
	miRedMask
;

182 
öt32
 
	miGªíMask
;

183 
öt32
 
	miBlueMask
;

184 
öt32
 
	miAÕhaMask
;

186 
uöt32
 
	miCSTy≥
;

187 
BMPCIEXYZTrùÀ
 
	msEndpoöts
;

189 
öt32
 
	miGammaRed
;

194 
öt32
 
	miGammaGªí
;

195 
öt32
 
	miGammaBlue
;

196 } 
	tBMPInfoHódî
;

201 c⁄° 
	gBIH_WIN4SIZE
 = 40;

202 c⁄° 
	gBIH_WIN5SIZE
 = 57;

203 c⁄° 
	gBIH_OS21SIZE
 = 12;

204 c⁄° 
	gBIH_OS22SIZE
 = 64;

212 
	mbBlue
;

213 
	mbGªí
;

214 
	mbRed
;

215 
	mbRe£rved
;

216 } 
	tBMPCﬁ‹E¡ry
;

218 
uöt16
 
	gcom¥essi⁄
 = (uint16) -1;

219 
	gj≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

220 
	gquÆôy
 = 75;

221 
uöt16
 
	g¥edi˘‹
 = 0;

223 
ußge
();

224 
¥o˚ssCom¥essO±i⁄s
(*);

225 
ª¨øngePixñs
(*, 
uöt32
, uint32);

228 
	$maö
(
¨gc
, * 
¨gv
[])

230 
uöt32
 
width
, 
Àngth
;

231 
uöt16
 
nb™ds
 = 1;

232 
uöt16
 
dïth
 = 8;

233 
uöt32
 
row•î°rù
 = (uint32) -1;

234 
uöt16
 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

235 
fd
 = 0;

236 
°©
 
ö°©
;

237 *
outfûíame
 = 
NULL
, *
öfûíame
 = NULL;

238 
TIFF
 *
out
 = 
NULL
;

240 
BMPFûeHódî
 
fûe_hdr
;

241 
BMPInfoHódî
 
öfo_hdr
;

242 
bmp_ty≥
;

243 
uöt32
 
˛r_tbl_size
, 
n_˛r_ñems
 = 3;

244 *
˛r_tbl
;

245 *
ªd_tbl
 = 
NULL
, *
gªí_tbl
 = NULL, *
blue_tbl
 = NULL;

246 
uöt32
 
row
, 
˛r
;

248 
c
;

249 
›töd
;

250 * 
›èrg
;

252 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:r:o:h")) != -1) {

253 
c
) {

255 i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

256 
	`ußge
();

259 
row•î°rù
 = 
	`©oi
(
›èrg
);

262 
outfûíame
 = 
›èrg
;

265 
	`ußge
();

271 i‡(
¨gc
 - 
›töd
 < 2)

272 
	`ußge
();

274 i‡(
outfûíame
 =
NULL
)

275 
outfûíame
 = 
¨gv
[
¨gc
-1];

276 
out
 = 
	`TIFFO≥n
(
outfûíame
, "w");

277 i‡(
out
 =
NULL
) {

278 
	`TIFFEº‹
(
öfûíame
, "Cannot open file %s for output",

279 
outfûíame
);

280 
bad3
;

284 
›töd
 < 
¨gc
-1) {

285 
öfûíame
 = 
¨gv
[
›töd
];

286 
›töd
++;

288 
fd
 = 
	`›í
(
öfûíame
, 
O_RDONLY
|
O_BINARY
, 0);

289 i‡(
fd
 < 0) {

290 
	`TIFFEº‹
(
öfûíame
, "Cannot open input file");

294 
	`ªad
(
fd
, 
fûe_hdr
.
bTy≥
, 2);

295 if(
fûe_hdr
.
bTy≥
[0] != 'B' || file_hdr.bType[1] != 'M') {

296 
	`TIFFEº‹
(
öfûíame
, "File isÇot BMP");

297 
bad
;

303 
	`l£ek
(
fd
, 10, 
SEEK_SET
);

304 
	`ªad
(
fd
, &
fûe_hdr
.
iOffBôs
, 4);

305 #ifde‡
WORDS_BIGENDIAN


306 
	`TIFFSwabL⁄g
(&
fûe_hdr
.
iOffBôs
);

308 
	`f°©
(
fd
, &
ö°©
);

309 
fûe_hdr
.
iSize
 = 
ö°©
.
°_size
;

315 
	`l£ek
(
fd
, 
BFH_SIZE
, 
SEEK_SET
);

316 
	`ªad
(
fd
, &
öfo_hdr
.
iSize
, 4);

317 #ifde‡
WORDS_BIGENDIAN


318 
	`TIFFSwabL⁄g
(&
öfo_hdr
.
iSize
);

321 i‡(
öfo_hdr
.
iSize
 =
BIH_WIN4SIZE
)

322 
bmp_ty≥
 = 
BMPT_WIN4
;

323 i‡(
öfo_hdr
.
iSize
 =
BIH_OS21SIZE
)

324 
bmp_ty≥
 = 
BMPT_OS21
;

325 i‡(
öfo_hdr
.
iSize
 =
BIH_OS22SIZE


326 || 
öfo_hdr
.
iSize
 == 16)

327 
bmp_ty≥
 = 
BMPT_OS22
;

329 
bmp_ty≥
 = 
BMPT_WIN5
;

331 i‡(
bmp_ty≥
 =
BMPT_WIN4


332 || 
bmp_ty≥
 =
BMPT_WIN5


333 || 
bmp_ty≥
 =
BMPT_OS22
) {

334 
	`ªad
(
fd
, &
öfo_hdr
.
iWidth
, 4);

335 
	`ªad
(
fd
, &
öfo_hdr
.
iHeight
, 4);

336 
	`ªad
(
fd
, &
öfo_hdr
.
iPœ√s
, 2);

337 
	`ªad
(
fd
, &
öfo_hdr
.
iBôCou¡
, 2);

338 
	`ªad
(
fd
, &
öfo_hdr
.
iCom¥essi⁄
, 4);

339 
	`ªad
(
fd
, &
öfo_hdr
.
iSizeImage
, 4);

340 
	`ªad
(
fd
, &
öfo_hdr
.
iXPñsPîMëî
, 4);

341 
	`ªad
(
fd
, &
öfo_hdr
.
iYPñsPîMëî
, 4);

342 
	`ªad
(
fd
, &
öfo_hdr
.
iCÃU£d
, 4);

343 
	`ªad
(
fd
, &
öfo_hdr
.
iCÃImp‹è¡
, 4);

344 #ifde‡
WORDS_BIGENDIAN


345 
	`TIFFSwabL⁄g
((
uöt32
*Ë&
öfo_hdr
.
iWidth
);

346 
	`TIFFSwabL⁄g
((
uöt32
*Ë&
öfo_hdr
.
iHeight
);

347 
	`TIFFSwabSh‹t
((
uöt16
*Ë&
öfo_hdr
.
iPœ√s
);

348 
	`TIFFSwabSh‹t
((
uöt16
*Ë&
öfo_hdr
.
iBôCou¡
);

349 
	`TIFFSwabL⁄g
((
uöt32
*Ë&
öfo_hdr
.
iCom¥essi⁄
);

350 
	`TIFFSwabL⁄g
((
uöt32
*Ë&
öfo_hdr
.
iSizeImage
);

351 
	`TIFFSwabL⁄g
((
uöt32
*Ë&
öfo_hdr
.
iXPñsPîMëî
);

352 
	`TIFFSwabL⁄g
((
uöt32
*Ë&
öfo_hdr
.
iYPñsPîMëî
);

353 
	`TIFFSwabL⁄g
((
uöt32
*Ë&
öfo_hdr
.
iCÃU£d
);

354 
	`TIFFSwabL⁄g
((
uöt32
*Ë&
öfo_hdr
.
iCÃImp‹è¡
);

356 
n_˛r_ñems
 = 4;

359 i‡(
bmp_ty≥
 =
BMPT_OS22
) {

364 
n_˛r_ñems
 = 3;

367 i‡(
bmp_ty≥
 =
BMPT_OS21
) {

368 
öt16
 
iSh‹t
;

370 
	`ªad
(
fd
, &
iSh‹t
, 2);

371 #ifde‡
WORDS_BIGENDIAN


372 
	`TIFFSwabSh‹t
((
uöt16
*Ë&
iSh‹t
);

374 
öfo_hdr
.
iWidth
 = 
iSh‹t
;

375 
	`ªad
(
fd
, &
iSh‹t
, 2);

376 #ifde‡
WORDS_BIGENDIAN


377 
	`TIFFSwabSh‹t
((
uöt16
*Ë&
iSh‹t
);

379 
öfo_hdr
.
iHeight
 = 
iSh‹t
;

380 
	`ªad
(
fd
, &
iSh‹t
, 2);

381 #ifde‡
WORDS_BIGENDIAN


382 
	`TIFFSwabSh‹t
((
uöt16
*Ë&
iSh‹t
);

384 
öfo_hdr
.
iPœ√s
 = 
iSh‹t
;

385 
	`ªad
(
fd
, &
iSh‹t
, 2);

386 #ifde‡
WORDS_BIGENDIAN


387 
	`TIFFSwabSh‹t
((
uöt16
*Ë&
iSh‹t
);

389 
öfo_hdr
.
iBôCou¡
 = 
iSh‹t
;

390 
öfo_hdr
.
iCom¥essi⁄
 = 
BMPC_RGB
;

391 
n_˛r_ñems
 = 3;

394 i‡(
öfo_hdr
.
iBôCou¡
 != 1 && info_hdr.iBitCount != 4 &&

395 
öfo_hdr
.
iBôCou¡
 != 8 && info_hdr.iBitCount != 16 &&

396 
öfo_hdr
.
iBôCou¡
 != 24 && info_hdr.iBitCount != 32) {

397 
	`TIFFEº‹
(
öfûíame
,

399 
öfo_hdr
.
iBôCou¡
);

400 
	`˛o£
(
fd
);

404 
width
 = 
öfo_hdr
.
iWidth
;

405 
Àngth
 = (
öfo_hdr
.
iHeight
 > 0) ? info_hdr.iHeight : -info_hdr.iHeight;

407 
öfo_hdr
.
iBôCou¡
)

412 
nb™ds
 = 1;

413 
dïth
 = 
öfo_hdr
.
iBôCou¡
;

414 
phŸomëric
 = 
PHOTOMETRIC_PALETTE
;

416 i‡(
öfo_hdr
.
iCÃU£d
)

417 
˛r_tbl_size
 =

418 ((
uöt32
)(1<<
dïth
)<
öfo_hdr
.
iCÃU£d
)

419 ? (
uöt32
Ë(1 << 
dïth
)

420 : 
öfo_hdr
.
iCÃU£d
;

422 
˛r_tbl_size
 = 1 << 
dïth
;

423 
˛r_tbl
 = (*)

424 
	`_TIFFmÆloc
(
n_˛r_ñems
 * 
˛r_tbl_size
);

425 i‡(!
˛r_tbl
) {

426 
	`TIFFEº‹
(
öfûíame
,

428 
bad
;

431 
	`l£ek
(
fd
, 
BFH_SIZE
 + 
öfo_hdr
.
iSize
, 
SEEK_SET
);

432 
	`ªad
(
fd
, 
˛r_tbl
, 
n_˛r_ñems
 * 
˛r_tbl_size
);

434 
ªd_tbl
 = (*)

435 
	`_TIFFmÆloc
(((
tmsize_t
)1)<<
dïth
 * ());

436 i‡(!
ªd_tbl
) {

437 
	`TIFFEº‹
(
öfûíame
,

439 
	`_TIFF‰ì
(
˛r_tbl
);

440 
bad1
;

442 
gªí_tbl
 = (*)

443 
	`_TIFFmÆloc
(((
tmsize_t
)1)<<
dïth
 * ());

444 i‡(!
gªí_tbl
) {

445 
	`TIFFEº‹
(
öfûíame
,

447 
	`_TIFF‰ì
(
˛r_tbl
);

448 
bad2
;

450 
blue_tbl
 = (*)

451 
	`_TIFFmÆloc
(((
tmsize_t
)1)<<
dïth
 * ());

452 i‡(!
blue_tbl
) {

453 
	`TIFFEº‹
(
öfûíame
,

455 
	`_TIFF‰ì
(
˛r_tbl
);

456 
bad3
;

459 
˛r
 = 0; cÃ < 
˛r_tbl_size
; clr++) {

460 
ªd_tbl
[
˛r
] = 257*
˛r_tbl
[˛r*
n_˛r_ñems
+2];

461 
gªí_tbl
[
˛r
] = 257*
˛r_tbl
[˛r*
n_˛r_ñems
+1];

462 
blue_tbl
[
˛r
] = 257*
˛r_tbl
[˛r*
n_˛r_ñems
];

465 
	`_TIFF‰ì
(
˛r_tbl
);

469 
nb™ds
 = 3;

470 
dïth
 = 
öfo_hdr
.
iBôCou¡
 / 
nb™ds
;

471 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

474 
nb™ds
 = 3;

475 
dïth
 = 8;

476 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

486 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, 
width
);

487 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, 
Àngth
);

488 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_TOPLEFT
);

489 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 
nb™ds
);

490 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 
dïth
);

491 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

492 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric
);

493 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
,

494 
	`TIFFDeÁu…SåùSize
(
out
, 
row•î°rù
));

496 i‡(
ªd_tbl
 && 
gªí_tbl
 && 
blue_tbl
) {

497 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COLORMAP
,

498 
ªd_tbl
, 
gªí_tbl
, 
blue_tbl
);

501 i‡(
com¥essi⁄
 =(
uöt16
) -1)

502 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

503 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

504 
com¥essi⁄
) {

505 
COMPRESSION_JPEG
:

506 i‡(
phŸomëric
 =
PHOTOMETRIC_RGB


507 && 
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
)

508 
phŸomëric
 = 
PHOTOMETRIC_YCBCR
;

509 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGQUALITY
, 
quÆôy
);

510 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGCOLORMODE
, 
j≥gcﬁ‹mode
);

512 
COMPRESSION_LZW
:

513 
COMPRESSION_DEFLATE
:

514 i‡(
¥edi˘‹
 != 0)

515 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

523 i‡(
öfo_hdr
.
iCom¥essi⁄
 =
BMPC_RGB
) {

524 
uöt32
 
off£t
, 
size
;

525 *
sˇnbuf
;

535 
size
 = 
width
 * 
öfo_hdr
.
iBôCou¡
 + 31;

536 i‡(!
width
 || !
öfo_hdr
.
iBôCou¡


537 || (
size
 - 31Ë/ 
öfo_hdr
.
iBôCou¡
 !
width
 ) {

538 
	`TIFFEº‹
(
öfûíame
,

541 
bad3
;

543 
size
 = (size & ~31) / 8;

545 
sˇnbuf
 = (*Ë
	`_TIFFmÆloc
(
size
);

546 i‡(!
sˇnbuf
) {

547 
	`TIFFEº‹
(
öfûíame
,

549 
bad3
;

552 
row
 = 0;Ñow < 
Àngth
;Ñow++) {

553 i‡(
öfo_hdr
.
iHeight
 > 0)

554 
off£t
 = 
fûe_hdr
.
iOffBôs
+(
Àngth
-
row
-1)*
size
;

556 
off£t
 = 
fûe_hdr
.
iOffBôs
 + 
row
 * 
size
;

557 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
Ë=(
off_t
)-1) {

558 
	`TIFFEº‹
(
öfûíame
,

560 (Ë
row
);

564 i‡(
	`ªad
(
fd
, 
sˇnbuf
, 
size
) < 0) {

565 
	`TIFFEº‹
(
öfûíame
,

567 (Ë
row
);

571 
	`ª¨øngePixñs
(
sˇnbuf
, 
width
, 
öfo_hdr
.
iBôCou¡
);

573 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
sˇnbuf
, 
row
, 0)<0) {

574 
	`TIFFEº‹
(
öfûíame
,

576 (Ë
row
);

581 
	`_TIFF‰ì
(
sˇnbuf
);

587 } i‡–
öfo_hdr
.
iCom¥essi⁄
 =
BMPC_RLE8


588 || 
öfo_hdr
.
iCom¥essi⁄
 =
BMPC_RLE4
 ) {

589 
uöt32
 
i
, 
j
, 
k
, 
ru∆ígth
;

590 
uöt32
 
com¥_size
, 
uncom¥_size
;

591 *
com¥buf
;

592 *
uncom¥buf
;

594 
com¥_size
 = 
fûe_hdr
.
iSize
 - fûe_hdr.
iOffBôs
;

595 
uncom¥_size
 = 
width
 * 
Àngth
;

596 
com¥buf
 = (*Ë
	`_TIFFmÆloc
–
com¥_size
 );

597 i‡(!
com¥buf
) {

598 
	`TIFFEº‹
(
öfûíame
,

600 
bad3
;

602 
uncom¥buf
 = (*)
	`_TIFFmÆloc
(
uncom¥_size
);

603 i‡(!
uncom¥buf
) {

604 
	`TIFFEº‹
(
öfûíame
,

606 
bad3
;

609 
	`l£ek
(
fd
, 
fûe_hdr
.
iOffBôs
, 
SEEK_SET
);

610 
	`ªad
(
fd
, 
com¥buf
, 
com¥_size
);

611 
i
 = 0;

612 
j
 = 0;

613 i‡(
öfo_hdr
.
iBôCou¡
 == 8) {

614 
j
 < 
uncom¥_size
 && 
i
 < 
com¥_size
) {

615 i‡–
com¥buf
[
i
] ) {

616 
ru∆ígth
 = 
com¥buf
[
i
++];

617  
ru∆ígth
 > 0

618 && 
j
 < 
uncom¥_size


619 && 
i
 < 
com¥_size
 ) {

620 
uncom¥buf
[
j
++] = 
com¥buf
[
i
];

621 
ru∆ígth
--;

623 
i
++;

625 
i
++;

626 i‡(
com¥buf
[
i
] == 0)

627 
i
++;

628 i‡(
com¥buf
[
i
] == 1)

630 i‡(
com¥buf
[
i
] == 2) {

631 
i
++;

632 i‡(
i
 < 
com¥_size
 - 1) {

633 
j
+=
com¥buf
[
i
]+com¥buf[i+1]*
width
;

634 
i
 += 2;

639 
ru∆ígth
 = 
com¥buf
[
i
++];

640 
k
 = 0; k < 
ru∆ígth
 && 
j
 < 
uncom¥_size
 && 
i
 < 
com¥_size
; k++)

641 
uncom¥buf
[
j
++] = 
com¥buf
[
i
++];

642 i‡–
k
 & 0x01 )

643 
i
++;

649  
j
 < 
uncom¥_size
 && 
i
 < 
com¥_size
 ) {

650 i‡–
com¥buf
[
i
] ) {

651 
ru∆ígth
 = 
com¥buf
[
i
++];

652  
ru∆ígth
 > 0 && 
j
 < 
uncom¥_size
 && 
i
 < 
com¥_size
 ) {

653 i‡–
ru∆ígth
 & 0x01 )

654 
uncom¥buf
[
j
++] = (
com¥buf
[
i
] & 0xF0) >> 4;

656 
uncom¥buf
[
j
++] = 
com¥buf
[
i
] & 0x0F;

657 
ru∆ígth
--;

659 
i
++;

661 
i
++;

662 i‡(
com¥buf
[
i
] == 0)

663 
i
++;

664 i‡(
com¥buf
[
i
] == 1)

666 i‡(
com¥buf
[
i
] == 2) {

667 
i
++;

668 i‡(
i
 < 
com¥_size
 - 1) {

669 
j
+=
com¥buf
[
i
]+com¥buf[i+1]*
width
;

670 
i
 += 2;

675 
ru∆ígth
 = 
com¥buf
[
i
++];

676 
k
 = 0; k < 
ru∆ígth
 && 
j
 < 
uncom¥_size
 && 
i
 < 
com¥_size
; k++) {

677 i‡(
k
 & 0x01)

678 
uncom¥buf
[
j
++] = 
com¥buf
[
i
++] & 0x0F;

680 
uncom¥buf
[
j
++] = (
com¥buf
[
i
] & 0xF0) >> 4;

682 i‡(
k
 & 0x01)

683 
i
++;

689 
	`_TIFF‰ì
(
com¥buf
);

691 
row
 = 0;Ñow < 
Àngth
;Ñow++) {

692 i‡(
	`TIFFWrôeSˇ∆öe
(
out
,

693 
uncom¥buf
 + (
Àngth
 - 
row
 - 1Ë* 
width
,

694 
row
, 0) < 0) {

695 
	`TIFFEº‹
(
öfûíame
,

697 (Ë
row
);

701 
	`_TIFF‰ì
(
uncom¥buf
);

703 
	`TIFFWrôeDúe˘‹y
(
out
);

704 i‡(
blue_tbl
) {

705 
	`_TIFF‰ì
(
blue_tbl
);

706 
blue_tbl
=
NULL
;

708 i‡(
gªí_tbl
) {

709 
	`_TIFF‰ì
(
gªí_tbl
);

710 
gªí_tbl
=
NULL
;

712 i‡(
ªd_tbl
) {

713 
	`_TIFF‰ì
(
ªd_tbl
);

714 
ªd_tbl
=
NULL
;

718 
bad3
:

719 i‡(
blue_tbl
)

720 
	`_TIFF‰ì
(
blue_tbl
);

721 
bad2
:

722 i‡(
gªí_tbl
)

723 
	`_TIFF‰ì
(
gªí_tbl
);

724 
bad1
:

725 i‡(
ªd_tbl
)

726 
	`_TIFF‰ì
(
ªd_tbl
);

727 
bad
:

728 
	`˛o£
(
fd
);

730 i‡(
out
)

731 
	`TIFFClo£
(
out
);

733 
	}
}

740 
	$ª¨øngePixñs
(*
buf
, 
uöt32
 
width
, uöt32 
bô_cou¡
)

742 
tmp
;

743 
uöt32
 
i
;

745 
bô_cou¡
) {

749 
i
 = 0; i < 
width
; i++, 
buf
 += 3) {

750 
tmp
 = *
buf
;

751 *
buf
 = *(buf + 2);

752 *(
buf
 + 2Ë
tmp
;

757 *
buf1
 = 
buf
;

759 
i
 = 0; i < 
width
; i++, 
buf
 += 4) {

760 
tmp
 = *
buf
;

761 *
buf1
++ = *(
buf
 + 2);

762 *
buf1
++ = *(
buf
 + 1);

763 *
buf1
++ = 
tmp
;

770 
	}
}

773 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

775 i‡(
	`°rcmp
(
›t
, "none") == 0)

776 
com¥essi⁄
 = 
COMPRESSION_NONE
;

777 i‡(
	`°rcmp
(
›t
, "packbits") == 0)

778 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

779 i‡(
	`°∫cmp
(
›t
, "jpeg", 4) == 0) {

780 * 
˝
 = 
	`°rchr
(
›t
, ':');

782 
com¥essi⁄
 = 
COMPRESSION_JPEG
;

783  
˝
 )

785 i‡(
	`isdigô
(()
˝
[1]))

786 
quÆôy
 = 
	`©oi
(
˝
+1);

787 i‡(
˝
[1] == 'r' )

788 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

790 
	`ußge
();

792 
˝
 = 
	`°rchr
(cp+1,':');

794 } i‡(
	`°∫cmp
(
›t
, "lzw", 3) == 0) {

795 * 
˝
 = 
	`°rchr
(
›t
, ':');

796 i‡(
˝
)

797 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

798 
com¥essi⁄
 = 
COMPRESSION_LZW
;

799 } i‡(
	`°∫cmp
(
›t
, "zip", 3) == 0) {

800 * 
˝
 = 
	`°rchr
(
›t
, ':');

801 i‡(
˝
)

802 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

803 
com¥essi⁄
 = 
COMPRESSION_DEFLATE
;

807 
	}
}

809 * 
	g°uff
[] = {

831 
NULL


835 
	$ußge
()

837 
buf
[
BUFSIZ
];

838 
i
;

840 
	`£tbuf
(
°dîr
, 
buf
);

841 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

842 
i
 = 0; 
°uff
[i] !
NULL
; i++)

843 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

844 
	`exô
(-1);

845 
	}
}

	@tools/fax2ps.c

26 
	~"tif_c⁄fig.h
"

28 
	~<°dlib.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<m©h.h
>

32 
	~<time.h
>

34 #ifde‡
HAVE_UNISTD_H


35 
	~<uni°d.h
>

38 #ifde‡
HAVE_FCNTL_H


39 
	~<f˙é.h
>

42 #ifde‡
HAVE_IO_H


43 
	~<io.h
>

46 #ifde‡
NEED_LIBPORT


47 
	~"libp‹t.h
"

50 
	~"tiffio.h
"

52 
	gdefxªs
 = 204.;

53 
	gdefyªs
 = 98.;

54 c⁄° 
	ghÆf
 = 0.5;

55 c⁄° 
	gpoöts
 = 72.0;

56 
	g∑geWidth
 = 0;

57 
	g∑geHeight
 = 0;

58 
	gsˇÀToPage
 = 0;

59 
	gtŸÆPages
 = 0;

60 
	grow
;

61 
	gmaxlöe
 = 512;

72 
	$¥öåuns
(* 
buf
, 
uöt32
* 
runs
, uöt32* 
îun
, uöt32 
œ°x
)

75 
whôe
, 
bœck
;

76 
width
;

77 } 
WB¨r
[] = {

83 * 
svÆue
 =

85 
cﬁ‹mode
 = 1;

86 
uöt32
 
ru∆ígth
 = 0;

87 
n
 = 
maxlöe
;

88 
uöt32
 
x
 = 0;

89 
l
;

91 (Ë
buf
;

92 
	`¥ötf
("%d m(", 
row
++);

93 
runs
 < 
îun
) {

94 i‡(
ru∆ígth
 <= 0) {

95 
cﬁ‹mode
 ^= 1;

96 
ru∆ígth
 = *
runs
++;

97 i‡(
x
+
ru∆ígth
 > 
œ°x
)

98 
ru∆ígth
 = 
runs
[-1] = 
œ°x
-
x
;

99 
x
 +
ru∆ígth
;

100 i‡(!
cﬁ‹mode
 && 
runs
 =
îun
)

113 
l
 = 0;

114 
ru∆ígth
 > 6) {

115 i‡(
ru∆ígth
 >
WB¨r
[
l
].
width
) {

116 i‡(
n
 == 0) {

117 
	`putch¨
('\n');

118 
n
 = 
maxlöe
;

120 
	`putch¨
(
cﬁ‹mode
 ? 
WB¨r
[
l
].
bœck
 : WB¨r[l].
whôe
), 
n
--;

121 
ru∆ígth
 -
WB¨r
[
l
].
width
;

123 
l
++;

125 
ru∆ígth
 > 0 &&Ñunlength <= 6) {

126 
uöt32
 
bô¶e·
 = 6;

127 
t
 = 0;

128 
bô¶e·
) {

129 i‡(
ru∆ígth
 <
bô¶e·
) {

130 i‡(
cﬁ‹mode
)

131 
t
 |((1 << 
ru∆ígth
)-1Ë<< (
bô¶e·
-runlength);

132 
bô¶e·
 -
ru∆ígth
;

133 
ru∆ígth
 = 0;

134 i‡(
bô¶e·
) {

135 i‡(
runs
 >
îun
)

137 
cﬁ‹mode
 ^= 1;

138 
ru∆ígth
 = *
runs
++;

139 i‡(
x
+
ru∆ígth
 > 
œ°x
)

140 
ru∆ígth
 = 
runs
[-1] = 
œ°x
-
x
;

141 
x
 +
ru∆ígth
;

144 i‡(
cﬁ‹mode
)

145 
t
 |((1 << 
bô¶e·
)-1);

146 
ru∆ígth
 -
bô¶e·
;

147 
bô¶e·
 = 0;

150 i‡(
n
 == 0) {

151 
	`putch¨
('\n');

152 
n
 = 
maxlöe
;

154 
	`putch¨
(
svÆue
[
t
]), 
n
--;

157 
	`¥ötf
(")s\n");

158 
	}
}

166 
	$emôF⁄t
(
FILE
* 
fd
)

168 c⁄° * 
f⁄tPrﬁogue
[] = {

190 
NULL


192 
i
;

193 
i
 = 0; 
f⁄tPrﬁogue
[i] !
NULL
; i++)

194 
	`Ârötf
(
fd
, "%s\n", 
f⁄tPrﬁogue
[
i
]);

195 
	}
}

198 
	$¥ötTIF
(
TIFF
* 
tif
, 
uöt16
 
∑geNumbî
)

200 
uöt32
 
w
, 
h
;

201 
uöt16
 
unô
, 
com¥essi⁄
;

202 
xªs
, 
yªs
, 
sˇÀ
 = 1.0;

203 
t°rù_t
 
s
, 
ns
;

204 
time_t
 
¸óti⁄_time
;

206 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
h
);

207 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, &
w
);

208 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, &
com¥essi⁄
)

209 || 
com¥essi⁄
 < 
COMPRESSION_CCITTRLE


210 || 
com¥essi⁄
 > 
COMPRESSION_CCITT_T6
)

212 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_XRESOLUTION
, &
xªs
) || !xres) {

213 
	`TIFFW¨nög
(
	`TIFFFûeName
(
tif
),

214 "Nÿx-ªsﬁuti⁄,ássumög %g dpi", 
defxªs
);

215 
xªs
 = 
defxªs
;

217 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_YRESOLUTION
, &
yªs
) || !yres) {

218 
	`TIFFW¨nög
(
	`TIFFFûeName
(
tif
),

219 "Nÿy-ªsﬁuti⁄,ássumög %gÜpi", 
defyªs
);

220 
yªs
 = 
defyªs
;

222 i‡(
	`TIFFGëFõld
(
tif
, 
TIFFTAG_RESOLUTIONUNIT
, &
unô
) &&

223 
unô
 =
RESUNIT_CENTIMETER
) {

224 
xªs
 *= 2.54F;

225 
yªs
 *= 2.54F;

227 i‡(
∑geWidth
 == 0)

228 
∑geWidth
 = 
w
 / 
xªs
;

229 i‡(
∑geHeight
 == 0)

230 
∑geHeight
 = 
h
 / 
yªs
;

232 
	`¥ötf
("%%!PS-Adobe-3.0\n");

233 
	`¥ötf
("%%%%Creator: fax2ps\n");

234 #ifde‡
nŸdef


235 
	`¥ötf
("%%%%TôÀ: %s\n", 
fûe
);

237 
¸óti⁄_time
 = 
	`time
(0);

238 
	`¥ötf
("%%%%Cª©i⁄D©e: %s", 
	`˘ime
(&
¸óti⁄_time
));

239 
	`¥ötf
("%%%%Origin: 0 0\n");

240 
	`¥ötf
("%%%%BoundingBox: 0 0 %u %u\n",

241 ()(
∑geWidth
 * 
poöts
), ()(
∑geHeight
 *Öoints));

242 
	`¥ötf
("%%%%Pages: (atend)\n");

243 
	`¥ötf
("%%%%EndComments\n");

244 
	`¥ötf
("%%%%BeginProlog\n");

245 
	`emôF⁄t
(
°dout
);

246 
	`¥ötf
("/d{bind def}def\n");

247 
	`¥ötf
("/m{0Éxch moveto}d\n");

248 
	`¥ötf
("/s{show}d\n");

249 
	`¥ötf
("/p{showpage}d \n");

250 
	`¥ötf
("%%%%EndProlog\n");

251 
	`¥ötf
("%%%%Page: \"%u\" %u\n", 
∑geNumbî
,ÖageNumber);

252 
	`¥ötf
("/$pageTop save def gsave\n");

253 i‡(
sˇÀToPage
)

254 
sˇÀ
 = 
∑geHeight
 / (
h
/
yªs
Ë< 
∑geWidth
 / (
w
/
xªs
) ?

255 
∑geHeight
 / (
h
/
yªs
Ë: 
∑geWidth
 / (
w
/
xªs
);

256 
	`¥ötf
("%g %gÅranslate\n",

257 
poöts
 * (
∑geWidth
 - 
sˇÀ
*
w
/
xªs
Ë* 
hÆf
,

258 
poöts
 * (
sˇÀ
*
h
/
yªs
 + (
∑geHeight
 - sˇÀ*h/yªsË* 
hÆf
));

259 
	`¥ötf
("%g %g sˇÀ\n", 
poöts
/
xªs
*
sˇÀ
, -poöts/
yªs
*scale);

260 
	`¥ötf
("0 setgray\n");

261 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_FAXFILLFUNC
, 
¥öåuns
);

262 
ns
 = 
	`TIFFNumbîOfSåùs
(
tif
);

263 
row
 = 0;

264 
s
 = 0; s < 
ns
; s++)

265 (Ë
	`TIFFRódEncodedSåù
(
tif
, 
s
, (
td©a_t
Ë
NULL
, (
tsize_t
) -1);

266 
	`¥ötf
("p\n");

267 
	`¥ötf
("grestore $pageTopÑestore\n");

268 
tŸÆPages
++;

269 
	}
}

271 
	#GëPageNumbî
(
tif
) \

272 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_PAGENUMBER
, &
≤
, &
±ŸÆ
)

	)

275 
	$födPage
(
TIFF
* 
tif
, 
uöt16
 
∑geNumbî
)

277 
uöt16
 
≤
 = (uint16) -1;

278 
uöt16
 
±ŸÆ
 = (uint16) -1;

279 i‡(
	`GëPageNumbî
(
tif
)) {

280 
≤
 !(
∑geNumbî
-1Ë&& 
	`TIFFRódDúe˘‹y
(
tif
Ë&& 
	`GëPageNumbî
(tif))

282  (
≤
 =(
∑geNumbî
-1));

284  (
	`TIFFSëDúe˘‹y
(
tif
, (
tdú_t
)(
∑geNumbî
-1)));

285 
	}
}

288 
	$Áx2ps
(
TIFF
* 
tif
, 
uöt16
 
≈ages
, uöt16* 
∑ges
, * 
fûíame
)

290 i‡(
≈ages
 > 0) {

291 
uöt16
 
≤
, 
±ŸÆ
;

292 
i
;

294 i‡(!
	`GëPageNumbî
(
tif
))

295 
	`Ârötf
(
°dîr
, "%s: NoÖageÇumbers, counting directories.\n",

296 
fûíame
);

297 
i
 = 0; i < 
≈ages
; i++) {

298 i‡(
	`födPage
(
tif
, 
∑ges
[
i
]))

299 
	`¥ötTIF
(
tif
, 
∑ges
[
i
]);

301 
	`Ârötf
(
°dîr
, "%s: Nÿ∑gênumbî %d\n", 
fûíame
, 
∑ges
[
i
]);

304 
uöt16
 
∑geNumbî
 = 0;

306 
	`¥ötTIF
(
tif
, 
∑geNumbî
++);

307 
	`TIFFRódDúe˘‹y
(
tif
));

309 
	}
}

311 #unde‡
GëPageNumbî


314 
	$pcom∑r
(c⁄° * 
va
, c⁄° * 
vb
)

316 c⁄° * 
∑
 = (c⁄° *Ë
va
;

317 c⁄° * 
pb
 = (c⁄° *Ë
vb
;

318  (*
∑
 - *
pb
);

319 
	}
}

321 
ußge
(
code
);

324 
	$maö
(
¨gc
, ** 
¨gv
)

326 
›töd
;

327 * 
›èrg
;

328 
uöt16
 *
∑ges
 = 
NULL
, 
≈ages
 = 0, 
∑geNumbî
;

329 
c
, 
dow¨nögs
 = 0;

330 
TIFF
* 
tif
;

332 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "l:p:x:y:W:H:wS")) != -1)

333 
c
) {

335 
∑geHeight
 = ()
	`©of
(
›èrg
);

338 
sˇÀToPage
 = 1;

341 
∑geWidth
 = ()
	`©of
(
›èrg
);

344 
∑geNumbî
 = (
uöt16
)
	`©oi
(
›èrg
);

345 i‡(
∑ges
)

346 
∑ges
 = (
uöt16
*Ë
	`ªÆloc
’ages, (
≈ages
+1)*(uint16));

348 
∑ges
 = (
uöt16
*Ë
	`mÆloc
((uint16));

349 
∑ges
[
≈ages
++] = 
∑geNumbî
;

352 
dow¨nögs
 = 1;

355 
defxªs
 = ()
	`©of
(
›èrg
);

358 
defyªs
 = ()
	`©of
(
›èrg
);

361 
maxlöe
 = 
	`©oi
(
›èrg
);

364 
	`ußge
(-1);

366 i‡(
≈ages
 > 0)

367 
	`qs‹t
(
∑ges
, 
≈ages
, (
uöt16
), 
pcom∑r
);

368 i‡(!
dow¨nögs
)

369 
	`TIFFSëW¨nögH™dÀr
(0);

370 i‡(
›töd
 < 
¨gc
) {

372 
tif
 = 
	`TIFFO≥n
(
¨gv
[
›töd
], "r");

373 i‡(
tif
) {

374 
	`Áx2ps
(
tif
, 
≈ages
, 
∑ges
, 
¨gv
[
›töd
]);

375 
	`TIFFClo£
(
tif
);

377 
	`Ârötf
(
°dîr
, "%s: CanÇot open, orÇotá TIFF file.\n",

378 
¨gv
[
›töd
]);

379 } ++
›töd
 < 
¨gc
);

381 
n
;

382 
FILE
* 
fd
;

383 
buf
[16*1024];

385 
fd
 = 
	`tmpfûe
();

386 i‡(
fd
 =
NULL
) {

387 
	`Ârötf
(
°dîr
, "CouldÇot obtainÅemporary file.\n");

388 
	`exô
(-2);

390 #i‡
	`deföed
(
HAVE_SETMODE
Ë&& deföed(
O_BINARY
)

391 
	`£tmode
(
	`fûío
(
°dö
), 
O_BINARY
);

393 (
n
 = 
	`ªad
(
	`fûío
(
°dö
), 
buf
,  (buf))) > 0)

394 
	`wrôe
(
	`fûío
(
fd
), 
buf
, 
n
);

395 
	`l£ek
(
	`fûío
(
fd
), 0, 
SEEK_SET
);

396 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
USE_WIN32_FILEIO
)

397 
tif
 = 
	`TIFFFdO≥n
(
	`_gë_osfh™dÀ
(
	`fûío
(
fd
)), "temp", "r");

399 
tif
 = 
	`TIFFFdO≥n
(
	`fûío
(
fd
), "temp", "r");

401 i‡(
tif
) {

402 
	`Áx2ps
(
tif
, 
≈ages
, 
∑ges
, "<stdin>");

403 
	`TIFFClo£
(
tif
);

405 
	`Ârötf
(
°dîr
, "CanÇot open, orÇotá TIFF file.\n");

406 
	`f˛o£
(
fd
);

408 
	`¥ötf
("%%%%Trailer\n");

409 
	`¥ötf
("%%%%Pages: %u\n", 
tŸÆPages
);

410 
	`¥ötf
("%%%%EOF\n");

413 
	}
}

415 * 
	g°uff
[] = {

426 
NULL


430 
	$ußge
(
code
)

432 
buf
[
BUFSIZ
];

433 
i
;

435 
	`£tbuf
(
°dîr
, 
buf
);

436 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

437 
i
 = 0; 
°uff
[i] !
NULL
; i++)

438 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

439 
	`exô
(
code
);

440 
	}
}

	@tools/fax2tiff.c

30 
	~"tif_c⁄fig.h
"

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

35 #ifde‡
HAVE_UNISTD_H


36 
	~<uni°d.h
>

39 #ifde‡
HAVE_FCNTL_H


40 
	~<f˙é.h
>

43 #ifde‡
HAVE_IO_H


44 
	~<io.h
>

47 #ifde‡
NEED_LIBPORT


48 
	~"libp‹t.h
"

51 
	~"tiffi›.h
"

53 #i‚de‡
EXIT_SUCCESS


54 
	#EXIT_SUCCESS
 0

	)

56 #i‚de‡
EXIT_FAILURE


57 
	#EXIT_FAILURE
 1

	)

60 
	#TIFFhowm™y8
(
x
Ë(((x)&0x07)?((
uöt32
)(x)>>3)+1:(uöt32)(x)>>3)

	)

62 
TIFF
 *
	gÁxTIFF
;

63 *
	growbuf
;

64 *
	gªfbuf
;

66 
uöt32
 
	gxsize
 = 1728;

67 
	gvîbo£
;

68 
	g°ªtch
;

69 
uöt16
 
	gbadÁxrun
;

70 
uöt32
 
	gbadÁxlöes
;

72 
c›yFaxFûe
(
TIFF
* 
tifö
, TIFF* 
tifout
);

73 
ußge
();

76 
	$maö
(
¨gc
, * 
¨gv
[])

78 
FILE
 *
ö
;

79 
TIFF
 *
out
 = 
NULL
;

80 
TIFFEº‹H™dÀr
 
wh™dÀr
 = 
NULL
;

81 
com¥essi⁄_ö
 = 
COMPRESSION_CCITTFAX3
;

82 
com¥essi⁄_out
 = 
COMPRESSION_CCITTFAX3
;

83 
fûl‹dî_ö
 = 
FILLORDER_LSB2MSB
;

84 
fûl‹dî_out
 = 
FILLORDER_LSB2MSB
;

85 
uöt32
 
group3›ti⁄s_ö
 = 0;

86 
uöt32
 
group3›ti⁄s_out
 = 0;

87 
uöt32
 
group4›ti⁄s_ö
 = 0;

88 
uöt32
 
group4›ti⁄s_out
 = 0;

89 
uöt32
 
de‰ow•î°rù
 = (uint32) 0;

90 
uöt32
 
row•î°rù
;

91 
phŸomëric_ö
 = 
PHOTOMETRIC_MINISWHITE
;

92 
phŸomëric_out
 = 
PHOTOMETRIC_MINISWHITE
;

93 
mode
 = 
FAXMODE_CLASSF
;

94 
rows
;

95 
c
;

96 
≤
, 
≈ages
;

97 
ªsY
 = 196.0;

98 
›töd
;

99 * 
›èrg
;

102 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "R:X:o:1234ABLMPUW5678abcflmprsuvwz?")) != -1)

103 
c
) {

106 
com¥essi⁄_ö
 = 
COMPRESSION_CCITTFAX3
;

109 
com¥essi⁄_ö
 = 
COMPRESSION_CCITTFAX4
;

112 
group3›ti⁄s_ö
 |
GROUP3OPT_UNCOMPRESSED
;

113 
group4›ti⁄s_ö
 |
GROUP4OPT_UNCOMPRESSED
;

116 
group3›ti⁄s_ö
 &~
GROUP3OPT_2DENCODING
;

119 
group3›ti⁄s_ö
 |
GROUP3OPT_2DENCODING
;

122 
group3›ti⁄s_ö
 &~
GROUP3OPT_FILLBITS
;

125 
group3›ti⁄s_ö
 |
GROUP3OPT_FILLBITS
;

128 
phŸomëric_ö
 = 
PHOTOMETRIC_MINISWHITE
;

131 
phŸomëric_ö
 = 
PHOTOMETRIC_MINISBLACK
;

134 
fûl‹dî_ö
 = 
FILLORDER_LSB2MSB
;

137 
fûl‹dî_ö
 = 
FILLORDER_MSB2LSB
;

140 
ªsY
 = (Ë
	`©of
(
›èrg
);

143 
xsize
 = (
uöt32
Ë
	`©oi
(
›èrg
);

148 
com¥essi⁄_out
 = 
COMPRESSION_CCITTFAX3
;

151 
com¥essi⁄_out
 = 
COMPRESSION_CCITTFAX4
;

154 
group3›ti⁄s_out
 |
GROUP3OPT_UNCOMPRESSED
;

155 
group4›ti⁄s_out
 |
GROUP4OPT_UNCOMPRESSED
;

158 
group3›ti⁄s_out
 &~
GROUP3OPT_2DENCODING
;

161 
group3›ti⁄s_out
 |
GROUP3OPT_2DENCODING
;

164 
mode
 = 
FAXMODE_CLASSIC
;

167 
mode
 = 
FAXMODE_CLASSF
;

170 
fûl‹dî_out
 = 
FILLORDER_MSB2LSB
;

173 
fûl‹dî_out
 = 
FILLORDER_LSB2MSB
;

176 
out
 = 
	`TIFFO≥n
(
›èrg
, "w");

177 i‡(
out
 =
NULL
) {

178 
	`Ârötf
(
°dîr
,

180 
¨gv
[0], 
›èrg
);

181  
EXIT_FAILURE
;

185 
group3›ti⁄s_out
 |
GROUP3OPT_FILLBITS
;

188 
group3›ti⁄s_out
 &~
GROUP3OPT_FILLBITS
;

191 
de‰ow•î°rù
 = 
	`©ﬁ
(
›èrg
);

194 
°ªtch
 = 1;

197 
phŸomëric_out
 = 
PHOTOMETRIC_MINISWHITE
;

200 
phŸomëric_out
 = 
PHOTOMETRIC_MINISBLACK
;

203 
com¥essi⁄_out
 = 
COMPRESSION_LZW
;

206 
vîbo£
++;

209 
	`ußge
();

212 
≈ages
 = 
¨gc
 - 
›töd
;

213 i‡(
≈ages
 < 1)

214 
	`ußge
();

216 
rowbuf
 = 
	`_TIFFmÆloc
(
	`TIFFhowm™y8
(
xsize
));

217 
ªfbuf
 = 
	`_TIFFmÆloc
(
	`TIFFhowm™y8
(
xsize
));

218 i‡(
rowbuf
 =
NULL
 || 
ªfbuf
 == NULL) {

219 
	`Ârötf
(
°dîr
, "%s: NŸÉnough mem‹y\n", 
¨gv
[0]);

220  (
EXIT_FAILURE
);

223 i‡(
out
 =
NULL
) {

224 
out
 = 
	`TIFFO≥n
("fax.tif", "w");

225 i‡(
out
 =
NULL
) {

226 
	`Ârötf
(
°dîr
, "%s: CanÇot create fax.tif\n",

227 
¨gv
[0]);

228  (
EXIT_FAILURE
);

232 
ÁxTIFF
 = 
	`TIFFClõ¡O≥n
("(FakeInput)", "w",

234 
	`TIFFClõ¡d©a
(
out
),

235 
	`TIFFGëRódProc
(
out
), 
	`TIFFGëWrôeProc
(out),

236 
	`TIFFGëSìkProc
(
out
), 
	`TIFFGëClo£Proc
(out),

237 
	`TIFFGëSizeProc
(
out
), 
	`TIFFGëM≠FûeProc
(out),

238 
	`TIFFGëUnm≠FûeProc
(
out
));

239 i‡(
ÁxTIFF
 =
NULL
) {

240 
	`Ârötf
(
°dîr
, "%s: CanÇot create fake input file\n",

241 
¨gv
[0]);

242  (
EXIT_FAILURE
);

244 
	`TIFFSëMode
(
ÁxTIFF
, 
O_RDONLY
);

245 
	`TIFFSëFõld
(
ÁxTIFF
, 
TIFFTAG_IMAGEWIDTH
, 
xsize
);

246 
	`TIFFSëFõld
(
ÁxTIFF
, 
TIFFTAG_SAMPLESPERPIXEL
, 1);

247 
	`TIFFSëFõld
(
ÁxTIFF
, 
TIFFTAG_BITSPERSAMPLE
, 1);

248 
	`TIFFSëFõld
(
ÁxTIFF
, 
TIFFTAG_FILLORDER
, 
fûl‹dî_ö
);

249 
	`TIFFSëFõld
(
ÁxTIFF
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

250 
	`TIFFSëFõld
(
ÁxTIFF
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric_ö
);

251 
	`TIFFSëFõld
(
ÁxTIFF
, 
TIFFTAG_YRESOLUTION
, 
ªsY
);

252 
	`TIFFSëFõld
(
ÁxTIFF
, 
TIFFTAG_RESOLUTIONUNIT
, 
RESUNIT_INCH
);

255 
	`TIFFSëFõld
(
ÁxTIFF
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄_ö
);

256 i‡(
com¥essi⁄_ö
 =
COMPRESSION_CCITTFAX3
)

257 
	`TIFFSëFõld
(
ÁxTIFF
, 
TIFFTAG_GROUP3OPTIONS
, 
group3›ti⁄s_ö
);

258 i‡(
com¥essi⁄_ö
 =
COMPRESSION_CCITTFAX4
)

259 
	`TIFFSëFõld
(
ÁxTIFF
, 
TIFFTAG_GROUP4OPTIONS
, 
group4›ti⁄s_ö
);

260 
≤
 = 0; 
›töd
 < 
¨gc
;Ön++, optind++) {

261 
ö
 = 
	`f›í
(
¨gv
[
›töd
], "rb");

262 i‡(
ö
 =
NULL
) {

263 
	`Ârötf
(
°dîr
,

264 "%s: %s: C™ÇŸ o≥n\n", 
¨gv
[0],árgv[
›töd
]);

267 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
USE_WIN32_FILEIO
)

268 
	`TIFFSëClõ¡d©a
(
ÁxTIFF
, (
th™dÀ_t
)
	`_gë_osfh™dÀ
(
	`fûío
(
ö
)));

270 
	`TIFFSëClõ¡d©a
(
ÁxTIFF
, (
th™dÀ_t
)
	`fûío
(
ö
));

272 
	`TIFFSëFûeName
(
ÁxTIFF
, (c⁄° *)
¨gv
[
›töd
]);

273 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, 
xsize
);

274 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 1);

275 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄_out
);

276 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric_out
);

277 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_TOPLEFT
);

278 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 1);

279 
com¥essi⁄_out
) {

281 
COMPRESSION_CCITTFAX3
:

282 
	`TIFFSëFõld
(
out
, 
TIFFTAG_GROUP3OPTIONS
,

283 
group3›ti⁄s_out
);

284 
	`TIFFSëFõld
(
out
, 
TIFFTAG_FAXMODE
, 
mode
);

285 
row•î°rù
 =

286 (
de‰ow•î°rù
)?de‰ow•î°rù:(
uöt32
)-1L;

290 
COMPRESSION_CCITTFAX4
:

291 
	`TIFFSëFõld
(
out
, 
TIFFTAG_GROUP4OPTIONS
,

292 
group4›ti⁄s_out
);

293 
	`TIFFSëFõld
(
out
, 
TIFFTAG_FAXMODE
, 
mode
);

294 
row•î°rù
 =

295 (
de‰ow•î°rù
)?de‰ow•î°rù:(
uöt32
)-1L;

299 
row•î°rù
 = (
de‰ow•î°rù
) ?

300 
de‰ow•î°rù
 : 
	`TIFFDeÁu…SåùSize
(
out
, 0);

302 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

303 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

304 
	`TIFFSëFõld
(
out
, 
TIFFTAG_FILLORDER
, 
fûl‹dî_out
);

305 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SOFTWARE
, "fax2tiff");

306 
	`TIFFSëFõld
(
out
, 
TIFFTAG_XRESOLUTION
, 204.0);

307 i‡(!
°ªtch
) {

308 
	`TIFFGëFõld
(
ÁxTIFF
, 
TIFFTAG_YRESOLUTION
, &
ªsY
);

309 
	`TIFFSëFõld
(
out
, 
TIFFTAG_YRESOLUTION
, 
ªsY
);

311 
	`TIFFSëFõld
(
out
, 
TIFFTAG_YRESOLUTION
, 196.);

312 
	`TIFFSëFõld
(
out
, 
TIFFTAG_RESOLUTIONUNIT
, 
RESUNIT_INCH
);

313 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PAGENUMBER
, 
≤
, 
≈ages
);

315 i‡(!
vîbo£
)

316 
wh™dÀr
 = 
	`TIFFSëW¨nögH™dÀr
(
NULL
);

317 
rows
 = 
	`c›yFaxFûe
(
ÁxTIFF
, 
out
);

318 
	`f˛o£
(
ö
);

319 i‡(!
vîbo£
)

320 (Ë
	`TIFFSëW¨nögH™dÀr
(
wh™dÀr
);

322 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, 
rows
);

324 i‡(
vîbo£
) {

325 
	`Ârötf
(
°dîr
, "%s:\n", 
¨gv
[
›töd
]);

326 
	`Ârötf
(
°dîr
, "%dÑow†ö i≈ut\n", 
rows
);

327 
	`Ârötf
(
°dîr
, "%ldÅotal badÑows\n",

328 (Ë
badÁxlöes
);

329 
	`Ârötf
(
°dîr
, "%d max c⁄£cutivêbadÑows\n", 
badÁxrun
);

331 i‡(
com¥essi⁄_out
 =
COMPRESSION_CCITTFAX3
 &&

332 
mode
 =
FAXMODE_CLASSF
) {

333 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BADFAXLINES
, 
badÁxlöes
);

334 
	`TIFFSëFõld
(
out
, 
TIFFTAG_CLEANFAXDATA
, 
badÁxlöes
 ?

335 
CLEANFAXDATA_REGENERATED
 : 
CLEANFAXDATA_CLEAN
);

336 
	`TIFFSëFõld
(
out
, 
TIFFTAG_CONSECUTIVEBADFAXLINES
, 
badÁxrun
);

338 
	`TIFFWrôeDúe˘‹y
(
out
);

340 
	`TIFFClo£
(
out
);

341 
	`_TIFF‰ì
(
rowbuf
);

342 
	`_TIFF‰ì
(
ªfbuf
);

343  (
EXIT_SUCCESS
);

344 
	}
}

347 
	$c›yFaxFûe
(
TIFF
* 
tifö
, TIFF* 
tifout
)

349 
uöt32
 
row
;

350 
uöt32
 
löesize
 = 
	`TIFFhowm™y8
(
xsize
);

351 
uöt16
 
badrun
;

352 
ok
;

354 
tifö
->
tif_øwd©asize
 = (
tmsize_t
)
	`TIFFGëFûeSize
(tifin);

355 
tifö
->
tif_øwd©a
 = 
	`_TIFFmÆloc
—ifö->
tif_øwd©asize
);

356 i‡(
tifö
->
tif_øwd©a
 =
NULL
) {

357 
	`TIFFEº‹
(
tifö
->
tif_«me
, "NotÉnough memory");

360 i‡(!
	`RódOK
(
tifö
,Åifö->
tif_øwd©a
,Åifö->
tif_øwd©asize
)) {

361 
	`TIFFEº‹
(
tifö
->
tif_«me
, "ReadÉrrorát scanline 0");

364 
tifö
->
tif_øw˝
 =Åifö->
tif_øwd©a
;

365 
tifö
->
tif_øwcc
 =Åifö->
tif_øwd©asize
;

367 (*
tifö
->
tif_£tupdecode
)(tifin);

368 (*
tifö
->
tif_¥edecode
)—ifö, (
tßm∂e_t
) 0);

369 
tifö
->
tif_row
 = 0;

370 
badÁxlöes
 = 0;

371 
badÁxrun
 = 0;

373 
	`_TIFFmem£t
(
ªfbuf
, 0, 
löesize
);

374 
row
 = 0;

375 
badrun
 = 0;

376 
tifö
->
tif_øwcc
 > 0) {

377 
ok
 = (*
tifö
->
tif_decodîow
)—ifö, (
td©a_t
Ë
rowbuf
,

378 
löesize
, 0);

379 i‡(!
ok
) {

380 
badÁxlöes
++;

381 
badrun
++;

383 
	`_TIFFmem˝y
(
rowbuf
, 
ªfbuf
, 
löesize
);

385 i‡(
badrun
 > 
badÁxrun
)

386 
badÁxrun
 = 
badrun
;

387 
badrun
 = 0;

388 
	`_TIFFmem˝y
(
ªfbuf
, 
rowbuf
, 
löesize
);

390 
tifö
->
tif_row
++;

392 i‡(
	`TIFFWrôeSˇ∆öe
(
tifout
, 
rowbuf
, 
row
, 0) < 0) {

393 
	`Ârötf
(
°dîr
, "%s: WriteÉrrorátÑow %ld.\n",

394 
tifout
->
tif_«me
, (Ë
row
);

397 
row
++;

398 i‡(
°ªtch
) {

399 i‡(
	`TIFFWrôeSˇ∆öe
(
tifout
, 
rowbuf
, 
row
, 0) < 0) {

400 
	`Ârötf
(
°dîr
, "%s: WriteÉrrorátÑow %ld.\n",

401 
tifout
->
tif_«me
, (Ë
row
);

404 
row
++;

407 i‡(
badrun
 > 
badÁxrun
)

408 
badÁxrun
 = 
badrun
;

409 
	`_TIFF‰ì
(
tifö
->
tif_øwd©a
);

410  (
row
);

411 
	}
}

413 * 
	g°uff
[] = {

446 
NULL


450 
	$ußge
()

452 
buf
[
BUFSIZ
];

453 
i
;

455 
	`£tbuf
(
°dîr
, 
buf
);

456 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

457 
i
 = 0; 
°uff
[i] !
NULL
; i++)

458 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

459 
	`exô
(
EXIT_FAILURE
);

460 
	}
}

	@tools/gif2tiff.c

36 
	~"tif_c⁄fig.h
"

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<m©h.h
>

43 #ifde‡
HAVE_UNISTD_H


44 
	~<uni°d.h
>

47 #ifde‡
NEED_LIBPORT


48 
	~"libp‹t.h
"

51 
	~"tiffio.h
"

53 
	#GIFGAMMA
 (1.5Ë

	)

54 
	#IMAX
 0xfff‡

	)

55 
	#EXTRAFUDGE
 128

	)

57 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

58 
	#°∫eq
(
a
,
b
,
n
Ë(
	`°∫cmp
◊,b,nË=0)

	)

60 
	ggamèb
[256];

63 
	$_TIFFmÆloc_ruiqö
(
tmsize_t
 
s
)

65  (
	`mÆloc
((
size_t
Ë
s
));

66 
	}
};

69 
	$makegamèb
(
gam
)

71 
i
;

73 
i
=0; i<256; i++)

74 
gamèb
[
i
] = (Ë(
IMAX
*
	`pow
(i/255.0,
gam
)+0.5);

75 
	}
}

77 * 
	g°uff
[] = {

90 
NULL


94 
	$ußge
()

96 
buf
[
BUFSIZ
];

97 
i
;

99 
	`£tbuf
(
°dîr
, 
buf
);

100 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

101 
i
 = 0; 
°uff
[i] !
NULL
; i++)

102 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

103 
	`exô
(-1);

104 
	}
}

106 
	#COLSIZE
 256

	)

108 *
	g°ackp
;

109 
	g¥efix
[4096];

110 
	gsuffix
[4096];

111 
	g°ack
[4096];

112 
	gd©asize
,
	gcodesize
,
	gcodemask
;

113 
	g˛ór
,
	geoi
;

114 
	gavaû
, 
	gﬁdcode
;

116 
FILE
 *
	göfûe
;

117 
	gglobÆ
;

118 
	gglobÆbôs
;

119 
	gglobÆm≠
[
COLSIZE
][3];

120 *
	gø°î
;

121 
	gwidth
, 
	gheight
;

122 
	gªd
[
COLSIZE
];

123 
	ggªí
[
COLSIZE
];

124 
	gblue
[
COLSIZE
];

125 *
	gfûíame
, *
	gimagíame
;

127 
uöt16
 
	gcom¥essi⁄
 = 
COMPRESSION_PACKBITS
;

128 
uöt16
 
	g¥edi˘‹
 = 0;

129 
uöt32
 
	grow•î°rù
 = (uint32) -1;

130 
¥o˚ssCom¥essO±i⁄s
(*);

132 
c⁄vît
();

133 
checksig«tuª
();

134 
ªads¸ìn
();

135 
ªadgifimage
(*);

136 
ªadexãnsi⁄
();

137 
ªadø°î
();

138 
¥o˚ss
(, **);

139 
öôcﬁ‹s
([
COLSIZE
][3], );

140 
ø°îize
(, *);

143 
	$maö
(
¨gc
, * 
¨gv
[])

145 
›töd
;

146 *
›èrg
;

147 
c
, 
°©us
;

149 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:r:")) != -1)

150 
c
) {

152 i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

153 
	`ußge
();

156 
row•î°rù
 = 
	`©oi
(
›èrg
);

159 
	`ußge
();

162 i‡(
¨gc
 - 
›töd
 != 2)

163 
	`ußge
();

165 
	`makegamèb
(
GIFGAMMA
);

166 
fûíame
 = 
¨gv
[
›töd
];

167 
imagíame
 = 
¨gv
[
›töd
+1];

168 i‡((
öfûe
 = 
	`f›í
(
imagíame
, "rb")Ë!
NULL
) {

169 
c
;

170 
	`f˛o£
(
öfûe
);

171 
	`¥ötf
("ovîwrôê%s? ", 
imagíame
); 
	`fÊush
(
°dout
);

172 
c
 = 
	`gëc
(
°dö
);

173 i‡(
c
 != 'y' && c != 'Y')

176 i‡((
öfûe
 = 
	`f›í
(
fûíame
, "rb")Ë=
NULL
) {

177 
	`≥º‹
(
fûíame
);

180 
°©us
 = 
	`c⁄vît
();

181 
	`f˛o£
(
öfûe
);

182  (
°©us
);

183 
	}
}

186 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

188 i‡(
	`°ªq
(
›t
, "none"))

189 
com¥essi⁄
 = 
COMPRESSION_NONE
;

190 i‡(
	`°ªq
(
›t
, "packbits"))

191 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

192 i‡(
	`°∫eq
(
›t
, "lzw", 3)) {

193 * 
˝
 = 
	`°rchr
(
›t
, ':');

194 i‡(
˝
)

195 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

196 
com¥essi⁄
 = 
COMPRESSION_LZW
;

197 } i‡(
	`°∫eq
(
›t
, "zip", 3)) {

198 * 
˝
 = 
	`°rchr
(
›t
, ':');

199 i‡(
˝
)

200 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

201 
com¥essi⁄
 = 
COMPRESSION_DEFLATE
;

205 
	}
}

208 
	$c⁄vît
()

210 
ch
;

211 * 
mode
 = "w";

213 i‡(!
	`checksig«tuª
())

215 
	`ªads¸ìn
();

216 (
ch
 = 
	`gëc
(
öfûe
)Ë!';' && ch !
EOF
) {

217 
ch
) {

219 ',': i‡(!
	`ªadgifimage
(
mode
))

221 
mode
 = "a";

223 '!': 
	`ªadexãnsi⁄
();

225 : 
	`Ârötf
(
°dîr
, "illegal GIF blockÅype\n");

230 
	}
}

233 
	$checksig«tuª
()

235 
buf
[6];

237 
	`‰ód
(
buf
,1,6,
öfûe
);

238 i‡(
	`°∫cmp
(
buf
,"GIF",3)) {

239 
	`Ârötf
(
°dîr
, "file isÇotá GIF file\n");

242 i‡(
	`°∫cmp
(&
buf
[3],"87a",3)) {

243 
	`Ârötf
(
°dîr
, "unknown GIF versionÇumber\n");

247 
	}
}

255 
	$ªads¸ìn
()

257 
buf
[7];

259 
	`‰ód
(
buf
,1,7,
öfûe
);

260 
globÆ
 = 
buf
[4] & 0x80;

261 i‡(
globÆ
) {

262 
globÆbôs
 = (
buf
[4] & 0x07) + 1;

263 
	`‰ód
(
globÆm≠
,3,((
size_t
)1)<<
globÆbôs
,
öfûe
);

265 
	}
}

268 
	$ªadgifimage
(* 
mode
)

270 
buf
[9];

271 
loˇl
, 
öãæóved
;

272 
loˇlm≠
[256][3];

273 
loˇlbôs
;

274 
°©us
;

276 i‡(
	`‰ód
(
buf
, 1, 9, 
öfûe
) == 0) {

277 
	`≥º‹
(
fûíame
);

280 
width
 = 
buf
[4] + (buf[5] << 8);

281 
height
 = 
buf
[6] + (buf[7] << 8);

282 
loˇl
 = 
buf
[8] & 0x80;

283 
öãæóved
 = 
buf
[8] & 0x40;

285 i‡(
loˇl
 =0 && 
globÆ
 == 0) {

286 
	`Ârötf
(
°dîr
, "no colormapÖresent for image\n");

289 i‡((
ø°î
 = (*Ë
	`_TIFFmÆloc
(
width
*
height
+
EXTRAFUDGE
)Ë=
NULL
) {

291 
	`Ârötf
(
°dîr
, "notÉnough memory for image\n");

294 i‡(
loˇl
) {

295 
loˇlbôs
 = (
buf
[8] & 0x7) + 1;

297 
	`Ârötf
(
°dîr
, "Üoˇ»cﬁ‹s: %d\n", 1<<
loˇlbôs
);

299 
	`‰ód
(
loˇlm≠
, 3, ((
size_t
)1)<<
loˇlbôs
, 
öfûe
);

300 
	`öôcﬁ‹s
(
loˇlm≠
, 1<<
loˇlbôs
);

301 } i‡(
globÆ
) {

302 
	`öôcﬁ‹s
(
globÆm≠
, 1<<
globÆbôs
);

304 i‡((
°©us
 = 
	`ªadø°î
()))

305 
	`ø°îize
(
öãæóved
, 
mode
);

306 
	`_TIFF‰ì
(
ø°î
);

307  
°©us
;

308 
	}
}

316 
	$ªadexãnsi⁄
()

318 
cou¡
;

319 
buf
[255];

321 (Ë
	`gëc
(
öfûe
);

322 (
cou¡
 = 
	`gëc
(
öfûe
)))

323 
	`‰ód
(
buf
, 1, 
cou¡
, 
öfûe
);

324 
	}
}

332 
	$ªadø°î
()

334 *
fûl
 = 
ø°î
;

335 
buf
[255];

336 
bôs
=0;

337 
d©um
=0;

338 *
ch
;

339 
cou¡
, 
code
;

340 
°©us
 = 1;

342 
d©asize
 = 
	`gëc
(
öfûe
);

343 
˛ór
 = 1 << 
d©asize
;

344 
eoi
 = 
˛ór
 + 1;

345 
avaû
 = 
˛ór
 + 2;

346 
ﬁdcode
 = -1;

347 
codesize
 = 
d©asize
 + 1;

348 
codemask
 = (1 << 
codesize
) - 1;

349 
code
 = 0; codê< 
˛ór
; code++) {

350 
¥efix
[
code
] = 0;

351 
suffix
[
code
] = code;

353 
°ackp
 = 
°ack
;

354 
cou¡
 = 
	`gëc
(
öfûe
); count > 0; count = getc(infile)) {

355 
	`‰ód
(
buf
,1,
cou¡
,
öfûe
);

356 
ch
=
buf
; 
cou¡
-- > 0; ch++) {

357 
d©um
 +(Ë*
ch
 << 
bôs
;

358 
bôs
 += 8;

359 
bôs
 >
codesize
) {

360 
code
 = 
d©um
 & 
codemask
;

361 
d©um
 >>
codesize
;

362 
bôs
 -
codesize
;

363 i‡(
code
 =
eoi
) {

364 
exôlo›
;

366 i‡(!
	`¥o˚ss
(
code
, &
fûl
)) {

367 
°©us
 = 0;

368 
exôlo›
;

372 i‡(
fûl
 >
ø°î
 + 
width
*
height
) {

373 
	`Ârötf
(
°dîr
, "raster full beforeÉoi code\n");

377 
exôlo›
:

378 i‡(
fûl
 !
ø°î
 + 
width
*
height
) {

379 
	`Ârötf
(
°dîr
, "warning: wrongÑastersize: %ld bytes\n",

380 (Ë(
fûl
-
ø°î
));

381 
	`Ârötf
(
°dîr
, " instead of %ld bytes\n",

382 (Ë
width
*
height
);

384  
°©us
;

385 
	}
}

394 
	$¥o˚ss
(
code
, ** 
fûl
)

396 
öcode
;

397 
fú°ch¨
;

399 i‡(
code
 =
˛ór
) {

400 
codesize
 = 
d©asize
 + 1;

401 
codemask
 = (1 << 
codesize
) - 1;

402 
avaû
 = 
˛ór
 + 2;

403 
ﬁdcode
 = -1;

407 i‡(
ﬁdcode
 == -1) {

408 *(*
fûl
)++ = 
suffix
[
code
];

409 
fú°ch¨
 = 
ﬁdcode
 = 
code
;

412 i‡(
code
 > 
avaû
) {

413 
	`Ârötf
(
°dîr
, "codê%dÅoÿœrgêf‹ %d\n", 
code
, 
avaû
);

417 
öcode
 = 
code
;

418 i‡(
code
 =
avaû
) {

419 *
°ackp
++ = 
fú°ch¨
;

420 
code
 = 
ﬁdcode
;

422 
code
 > 
˛ór
) {

423 *
°ackp
++ = 
suffix
[
code
];

424 
code
 = 
¥efix
[code];

427 *
°ackp
++ = 
fú°ch¨
 = 
suffix
[
code
];

428 
¥efix
[
avaû
] = 
ﬁdcode
;

429 
suffix
[
avaû
] = 
fú°ch¨
;

430 
avaû
++;

432 i‡(((
avaû
 & 
codemask
) == 0) && (avail < 4096)) {

433 
codesize
++;

434 
codemask
 +
avaû
;

436 
ﬁdcode
 = 
öcode
;

438 *(*
fûl
)++ = *--
°ackp
;

439 } 
°ackp
 > 
°ack
);

441 
	}
}

450 
	$öôcﬁ‹s
(
cﬁ‹m≠
[
COLSIZE
][3], 
ncﬁ‹s
)

452 
i
;

454 
i
 = 0; i < 
ncﬁ‹s
; i++) {

455 
ªd
[
i
] = 
gamèb
[
cﬁ‹m≠
[i][0]];

456 
gªí
[
i
] = 
gamèb
[
cﬁ‹m≠
[i][1]];

457 
blue
[
i
] = 
gamèb
[
cﬁ‹m≠
[i][2]];

459 
	}
}

462 
	$ø°îize
(
öãæóved
, * 
mode
)

464 
row
;

465 *
√wøs
;

466 *
øs
;

467 
TIFF
 *
tif
;

468 
t°rù_t
 
°rù
;

469 
tsize_t
 
°rùsize
;

471 i‡((
√wøs
 = (*Ë
	`_TIFFmÆloc
(
width
*
height
+
EXTRAFUDGE
)Ë=
NULL
) {

472 
	`Ârötf
(
°dîr
, "notÉnough memory for image\n");

475 
	#DRAWSEGMENT
(
off£t
, 
°ï
) { \

476 
row
 = 
off£t
;Ñow < 
height
;Ñow +
°ï
) { \

477 
	`_TIFFmem˝y
(
√wøs
 + 
row
*
width
, 
øs
, width);\

478 
øs
 +
width
; \

480 }

	)

481 
øs
 = 
ø°î
;

482 i‡(
öãæóved
) {

483 
	`DRAWSEGMENT
(0, 8);

484 
	`DRAWSEGMENT
(4, 8);

485 
	`DRAWSEGMENT
(2, 4);

486 
	`DRAWSEGMENT
(1, 2);

488 
	`DRAWSEGMENT
(0, 1);

489 #unde‡
DRAWSEGMENT


491 
tif
 = 
	`TIFFO≥n
(
imagíame
, 
mode
);

492 i‡(!
tif
) {

493 
	`TIFFEº‹
(
imagíame
,"CanÇot open output image");

494 
	`exô
(-1);

496 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, (
uöt32
Ë
width
);

497 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, (
uöt32
Ë
height
);

498 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_PALETTE
);

499 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

500 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, 1);

501 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 8);

502 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
,

503 
row•î°rù
 = 
	`TIFFDeÁu…SåùSize
(
tif
,Ñowsperstrip));

504 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

505 
com¥essi⁄
) {

506 
COMPRESSION_LZW
:

507 
COMPRESSION_DEFLATE
:

508 i‡(
¥edi˘‹
 != 0)

509 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

512 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COLORMAP
, 
ªd
, 
gªí
, 
blue
);

513 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_TOPLEFT
);

514 
°rù
 = 0;

515 
°rùsize
 = 
	`TIFFSåùSize
(
tif
);

516 
row
=0;Ñow<
height
;Ñow +
row•î°rù
) {

517 i‡(
row•î°rù
 > 
height
-
row
) {

518 
row•î°rù
 = 
height
-
row
;

519 
°rùsize
 = 
	`TIFFVSåùSize
(
tif
, 
row•î°rù
);

521 i‡(
	`TIFFWrôeEncodedSåù
(
tif
, 
°rù
, 
√wøs
+
row
*
width
, 
°rùsize
) < 0)

523 
°rù
++;

525 
	`TIFFClo£
(
tif
);

527 
	`_TIFF‰ì
(
√wøs
);

528 
	}
}

	@tools/pal2rgb.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<°dlib.h
>

32 
	~<˘y≥.h
>

34 #ifde‡
HAVE_UNISTD_H


35 
	~<uni°d.h
>

38 #ifde‡
NEED_LIBPORT


39 
	~"libp‹t.h
"

42 
	~"tiffio.h
"

44 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

45 
	#°∫eq
(
a
,
b
,
n
Ë(
	`°∫cmp
◊,b,nË=0)

	)

47 
ußge
();

48 
˝Tags
(
TIFF
* 
ö
, TIFF* 
out
);

51 
	$checkcm≠
(
n
, 
uöt16
* 
r
, uöt16* 
g
, uöt16* 
b
)

53 
n
-- > 0)

54 i‡(*
r
++ >256 || *
g
++ >256 || *
b
++ >= 256)

56 
	`Ârötf
(
°dîr
, "Warning,ássuming 8-bit colormap.\n");

58 
	}
}

60 
	#C›yFõld
(
èg
, 
v
) \

61 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v
)Ë
	`TIFFSëFõld
(
out
,Åag, v)

	)

62 
	#C›yFõld3
(
èg
, 
v1
, 
v2
, 
v3
) \

63 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3)

	)

65 
uöt16
 
	gcom¥essi⁄
 = (uint16) -1;

66 
uöt16
 
	g¥edi˘‹
 = 0;

67 
	gquÆôy
 = 75;

68 
	gj≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

69 
¥o˚ssCom¥essO±i⁄s
(*);

72 
	$maö
(
¨gc
, * 
¨gv
[])

74 
uöt16
 
bô•îßm∂e
, 
sh‹tv
;

75 
uöt32
 
imagewidth
, 
imagñígth
;

76 
uöt16
 
c⁄fig
 = 
PLANARCONFIG_CONTIG
;

77 
uöt32
 
row•î°rù
 = (uint32) -1;

78 
uöt16
 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

79 
uöt16
 *
rm≠
, *
gm≠
, *
bm≠
;

80 
uöt32
 
row
;

81 
cm≠
 = -1;

82 
TIFF
 *
ö
, *
out
;

83 
c
;

84 
›töd
;

85 * 
›èrg
;

87 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "C:c:p:r:")) != -1)

88 
c
) {

90 
cm≠
 = 
	`©oi
(
›èrg
);

93 i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

94 
	`ußge
();

97 i‡(
	`°ªq
(
›èrg
, "separate"))

98 
c⁄fig
 = 
PLANARCONFIG_SEPARATE
;

99 i‡(
	`°ªq
(
›èrg
, "contig"))

100 
c⁄fig
 = 
PLANARCONFIG_CONTIG
;

102 
	`ußge
();

105 
row•î°rù
 = 
	`©oi
(
›èrg
);

108 
	`ußge
();

111 i‡(
¨gc
 - 
›töd
 != 2)

112 
	`ußge
();

113 
ö
 = 
	`TIFFO≥n
(
¨gv
[
›töd
], "r");

114 i‡(
ö
 =
NULL
)

116 i‡(!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PHOTOMETRIC
, &
sh‹tv
) ||

117 
sh‹tv
 !
PHOTOMETRIC_PALETTE
) {

118 
	`Ârötf
(
°dîr
, "%s: ExpectingáÖalette image.\n",

119 
¨gv
[
›töd
]);

122 i‡(!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_COLORMAP
, &
rm≠
, &
gm≠
, &
bm≠
)) {

123 
	`Ârötf
(
°dîr
,

125 
¨gv
[
›töd
]);

128 
bô•îßm∂e
 = 0;

129 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_BITSPERSAMPLE
, &
bô•îßm∂e
);

130 i‡(
bô•îßm∂e
 != 8) {

131 
	`Ârötf
(
°dîr
, "%s: Sorry, can only handle 8-bit images.\n",

132 
¨gv
[
›töd
]);

135 
out
 = 
	`TIFFO≥n
(
¨gv
[
›töd
+1], "w");

136 i‡(
out
 =
NULL
)

138 
	`˝Tags
(
ö
, 
out
);

139 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGEWIDTH
, &
imagewidth
);

140 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
imagñígth
);

141 i‡(
com¥essi⁄
 !(
uöt16
)-1)

142 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

144 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_COMPRESSION
, &
com¥essi⁄
);

145 
com¥essi⁄
) {

146 
COMPRESSION_JPEG
:

147 i‡(
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
)

148 
phŸomëric
 = 
PHOTOMETRIC_YCBCR
;

150 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

151 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGQUALITY
, 
quÆôy
);

152 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGCOLORMODE
, 
j≥gcﬁ‹mode
);

154 
COMPRESSION_LZW
:

155 
COMPRESSION_DEFLATE
:

156 i‡(
¥edi˘‹
 != 0)

157 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

160 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric
);

161 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 3);

162 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
c⁄fig
);

163 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
,

164 
row•î°rù
 = 
	`TIFFDeÁu…SåùSize
(
out
,Ñowsperstrip));

165 (Ë
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PLANARCONFIG
, &
sh‹tv
);

166 i‡(
cm≠
 == -1)

167 
cm≠
 = 
	`checkcm≠
(1<<
bô•îßm∂e
, 
rm≠
, 
gm≠
, 
bm≠
);

168 i‡(
cm≠
 == 16) {

172 
i
;

174 
i
 = (1<<
bô•îßm∂e
)-1; i >= 0; i--) {

175 
	#CVT
(
x
Ë(((xË* 255Ë/ ((1L<<16)-1))

	)

176 
rm≠
[
i
] = 
	`CVT
(rmap[i]);

177 
gm≠
[
i
] = 
	`CVT
(gmap[i]);

178 
bm≠
[
i
] = 
	`CVT
(bmap[i]);

181 { *
ibuf
, *
obuf
;

182 * 
µ
;

183 
uöt32
 
x
;

184 
ibuf
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
ö
));

185 
obuf
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
out
));

186 
c⁄fig
) {

187 
PLANARCONFIG_CONTIG
:

188 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

189 i‡(!
	`TIFFRódSˇ∆öe
(
ö
, 
ibuf
, 
row
, 0))

190 
d⁄e
;

191 
µ
 = 
obuf
;

192 
x
 = 0; x < 
imagewidth
; x++) {

193 *
µ
++ = (Ë
rm≠
[
ibuf
[
x
]];

194 *
µ
++ = (Ë
gm≠
[
ibuf
[
x
]];

195 *
µ
++ = (Ë
bm≠
[
ibuf
[
x
]];

197 i‡(!
	`TIFFWrôeSˇ∆öe
(
out
, 
obuf
, 
row
, 0))

198 
d⁄e
;

201 
PLANARCONFIG_SEPARATE
:

202 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

203 i‡(!
	`TIFFRódSˇ∆öe
(
ö
, 
ibuf
, 
row
, 0))

204 
d⁄e
;

205 
µ
 = 
obuf
, 
x
 = 0; x < 
imagewidth
; x++)

206 *
µ
++ = (Ë
rm≠
[
ibuf
[
x
]];

207 i‡(!
	`TIFFWrôeSˇ∆öe
(
out
, 
obuf
, 
row
, 0))

208 
d⁄e
;

209 
µ
 = 
obuf
, 
x
 = 0; x < 
imagewidth
; x++)

210 *
µ
++ = (Ë
gm≠
[
ibuf
[
x
]];

211 i‡(!
	`TIFFWrôeSˇ∆öe
(
out
, 
obuf
, 
row
, 0))

212 
d⁄e
;

213 
µ
 = 
obuf
, 
x
 = 0; x < 
imagewidth
; x++)

214 *
µ
++ = (Ë
bm≠
[
ibuf
[
x
]];

215 i‡(!
	`TIFFWrôeSˇ∆öe
(
out
, 
obuf
, 
row
, 0))

216 
d⁄e
;

220 
	`_TIFF‰ì
(
ibuf
);

221 
	`_TIFF‰ì
(
obuf
);

223 
d⁄e
:

224 (Ë
	`TIFFClo£
(
ö
);

225 (Ë
	`TIFFClo£
(
out
);

227 
	}
}

230 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

232 i‡(
	`°ªq
(
›t
, "none"))

233 
com¥essi⁄
 = 
COMPRESSION_NONE
;

234 i‡(
	`°ªq
(
›t
, "packbits"))

235 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

236 i‡(
	`°∫eq
(
›t
, "jpeg", 4)) {

237 * 
˝
 = 
	`°rchr
(
›t
, ':');

239 
com¥essi⁄
 = 
COMPRESSION_JPEG
;

240  
˝
 )

242 i‡(
	`isdigô
(()
˝
[1]))

243 
quÆôy
 = 
	`©oi
(
˝
+1);

244 i‡(
˝
[1] == 'r' )

245 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

247 
	`ußge
();

249 
˝
 = 
	`°rchr
(cp+1,':');

251 } i‡(
	`°∫eq
(
›t
, "lzw", 3)) {

252 * 
˝
 = 
	`°rchr
(
›t
, ':');

253 i‡(
˝
)

254 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

255 
com¥essi⁄
 = 
COMPRESSION_LZW
;

256 } i‡(
	`°∫eq
(
›t
, "zip", 3)) {

257 * 
˝
 = 
	`°rchr
(
›t
, ':');

258 i‡(
˝
)

259 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

260 
com¥essi⁄
 = 
COMPRESSION_DEFLATE
;

264 
	}
}

266 
	#C›yFõld
(
èg
, 
v
) \

267 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v
)Ë
	`TIFFSëFõld
(
out
,Åag, v)

	)

268 
	#C›yFõld2
(
èg
, 
v1
, 
v2
) \

269 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2)

	)

270 
	#C›yFõld3
(
èg
, 
v1
, 
v2
, 
v3
) \

271 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3)

	)

272 
	#C›yFõld4
(
èg
, 
v1
, 
v2
, 
v3
, 
v4
) \

273 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
, &
v4
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3, v4)

	)

276 
	$˝Tag
(
TIFF
* 
ö
, TIFF* 
out
, 
uöt16
 
èg
, uöt16 
cou¡
, 
TIFFD©aTy≥
 
ty≥
)

278 
ty≥
) {

279 
TIFF_SHORT
:

280 i‡(
cou¡
 == 1) {

281 
uöt16
 
sh‹tv
;

282 
	`C›yFõld
(
èg
, 
sh‹tv
);

283 } i‡(
cou¡
 == 2) {

284 
uöt16
 
sh‹tv1
, 
sh‹tv2
;

285 
	`C›yFõld2
(
èg
, 
sh‹tv1
, 
sh‹tv2
);

286 } i‡(
cou¡
 == 4) {

287 
uöt16
 *
å
, *
tg
, *
tb
, *
è
;

288 
	`C›yFõld4
(
èg
, 
å
, 
tg
, 
tb
, 
è
);

289 } i‡(
cou¡
 =(
uöt16
) -1) {

290 
uöt16
 
sh‹tv1
;

291 
uöt16
* 
sh‹èv
;

292 
	`C›yFõld2
(
èg
, 
sh‹tv1
, 
sh‹èv
);

295 
TIFF_LONG
:

296 { 
uöt32
 
l⁄gv
;

297 
	`C›yFõld
(
èg
, 
l⁄gv
);

300 
TIFF_RATIONAL
:

301 i‡(
cou¡
 == 1) {

302 
Êﬂtv
;

303 
	`C›yFõld
(
èg
, 
Êﬂtv
);

304 } i‡(
cou¡
 =(
uöt16
) -1) {

305 * 
Êﬂèv
;

306 
	`C›yFõld
(
èg
, 
Êﬂèv
);

309 
TIFF_ASCII
:

310 { * 
°rögv
;

311 
	`C›yFõld
(
èg
, 
°rögv
);

314 
TIFF_DOUBLE
:

315 i‡(
cou¡
 == 1) {

316 
doubÀv
;

317 
	`C›yFõld
(
èg
, 
doubÀv
);

318 } i‡(
cou¡
 =(
uöt16
) -1) {

319 * 
doubÀav
;

320 
	`C›yFõld
(
èg
, 
doubÀav
);

324 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

326 
èg
, 
ty≥
);

328 
	}
}

330 #unde‡
C›yFõld4


331 #unde‡
C›yFõld3


332 #unde‡
C›yFõld2


333 #unde‡
C›yFõld


335 
	s˝Tag
 {

336 
uöt16
 
	mèg
;

337 
uöt16
 
	mcou¡
;

338 
TIFFD©aTy≥
 
	mty≥
;

339 } 
	gègs
[] = {

340 { 
TIFFTAG_IMAGEWIDTH
, 1, 
TIFF_LONG
 },

341 { 
TIFFTAG_IMAGELENGTH
, 1, 
TIFF_LONG
 },

342 { 
TIFFTAG_BITSPERSAMPLE
, 1, 
TIFF_SHORT
 },

343 { 
TIFFTAG_COMPRESSION
, 1, 
TIFF_SHORT
 },

344 { 
TIFFTAG_FILLORDER
, 1, 
TIFF_SHORT
 },

345 { 
TIFFTAG_ROWSPERSTRIP
, 1, 
TIFF_LONG
 },

346 { 
TIFFTAG_GROUP3OPTIONS
, 1, 
TIFF_LONG
 },

347 { 
TIFFTAG_SUBFILETYPE
, 1, 
TIFF_LONG
 },

348 { 
TIFFTAG_THRESHHOLDING
, 1, 
TIFF_SHORT
 },

349 { 
TIFFTAG_DOCUMENTNAME
, 1, 
TIFF_ASCII
 },

350 { 
TIFFTAG_IMAGEDESCRIPTION
, 1, 
TIFF_ASCII
 },

351 { 
TIFFTAG_MAKE
, 1, 
TIFF_ASCII
 },

352 { 
TIFFTAG_MODEL
, 1, 
TIFF_ASCII
 },

353 { 
TIFFTAG_ORIENTATION
, 1, 
TIFF_SHORT
 },

354 { 
TIFFTAG_MINSAMPLEVALUE
, 1, 
TIFF_SHORT
 },

355 { 
TIFFTAG_MAXSAMPLEVALUE
, 1, 
TIFF_SHORT
 },

356 { 
TIFFTAG_XRESOLUTION
, 1, 
TIFF_RATIONAL
 },

357 { 
TIFFTAG_YRESOLUTION
, 1, 
TIFF_RATIONAL
 },

358 { 
TIFFTAG_PAGENAME
, 1, 
TIFF_ASCII
 },

359 { 
TIFFTAG_XPOSITION
, 1, 
TIFF_RATIONAL
 },

360 { 
TIFFTAG_YPOSITION
, 1, 
TIFF_RATIONAL
 },

361 { 
TIFFTAG_GROUP4OPTIONS
, 1, 
TIFF_LONG
 },

362 { 
TIFFTAG_RESOLUTIONUNIT
, 1, 
TIFF_SHORT
 },

363 { 
TIFFTAG_PAGENUMBER
, 2, 
TIFF_SHORT
 },

364 { 
TIFFTAG_SOFTWARE
, 1, 
TIFF_ASCII
 },

365 { 
TIFFTAG_DATETIME
, 1, 
TIFF_ASCII
 },

366 { 
TIFFTAG_ARTIST
, 1, 
TIFF_ASCII
 },

367 { 
TIFFTAG_HOSTCOMPUTER
, 1, 
TIFF_ASCII
 },

368 { 
TIFFTAG_WHITEPOINT
, 2, 
TIFF_RATIONAL
 },

369 { 
TIFFTAG_PRIMARYCHROMATICITIES
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

370 { 
TIFFTAG_HALFTONEHINTS
, 2, 
TIFF_SHORT
 },

371 { 
TIFFTAG_BADFAXLINES
, 1, 
TIFF_LONG
 },

372 { 
TIFFTAG_CLEANFAXDATA
, 1, 
TIFF_SHORT
 },

373 { 
TIFFTAG_CONSECUTIVEBADFAXLINES
, 1, 
TIFF_LONG
 },

374 { 
TIFFTAG_INKSET
, 1, 
TIFF_SHORT
 },

375 { 
TIFFTAG_INKNAMES
, 1, 
TIFF_ASCII
 },

376 { 
TIFFTAG_DOTRANGE
, 2, 
TIFF_SHORT
 },

377 { 
TIFFTAG_TARGETPRINTER
, 1, 
TIFF_ASCII
 },

378 { 
TIFFTAG_SAMPLEFORMAT
, 1, 
TIFF_SHORT
 },

379 { 
TIFFTAG_YCBCRCOEFFICIENTS
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

380 { 
TIFFTAG_YCBCRSUBSAMPLING
, 2, 
TIFF_SHORT
 },

381 { 
TIFFTAG_YCBCRPOSITIONING
, 1, 
TIFF_SHORT
 },

382 { 
TIFFTAG_REFERENCEBLACKWHITE
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

384 
	#NTAGS
 ( (
ègs
Ë/  (ègs[0]))

	)

387 
	$˝Tags
(
TIFF
* 
ö
, TIFF* 
out
)

389 
˝Tag
 *
p
;

390 
p
 = 
ègs
;Ö < &ègs[
NTAGS
];Ö++)

391 
	`˝Tag
(
ö
, 
out
, 
p
->
èg
,Ö->
cou¡
,Ö->
ty≥
);

392 
	}
}

393 #unde‡
NTAGS


395 * 
	g°uff
[] = {

412 
NULL


416 
	$ußge
()

418 
buf
[
BUFSIZ
];

419 
i
;

421 
	`£tbuf
(
°dîr
, 
buf
);

422 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

423 
i
 = 0; 
°uff
[i] !
NULL
; i++)

424 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

425 
	`exô
(-1);

426 
	}
}

	@tools/ppm2tiff.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<˘y≥.h
>

34 #ifde‡
HAVE_UNISTD_H


35 
	~<uni°d.h
>

38 #ifde‡
HAVE_FCNTL_H


39 
	~<f˙é.h
>

42 #ifde‡
HAVE_IO_H


43 
	~<io.h
>

46 #ifde‡
NEED_LIBPORT


47 
	~"libp‹t.h
"

50 
	~"tiffio.h
"

52 #i‚de‡
HAVE_GETOPT


53 
gë›t
(, **, *);

56 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

57 
	#°∫eq
(
a
,
b
,
n
Ë(
	`°∫cmp
◊,b,nË=0)

	)

59 
uöt16
 
	gcom¥essi⁄
 = 
COMPRESSION_PACKBITS
;

60 
uöt16
 
	g¥edi˘‹
 = 0;

61 
	gquÆôy
 = 75;

62 
	gj≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

63 
uöt32
 
	gg3›ts
;

65 
ußge
();

66 
¥o˚ssCom¥essO±i⁄s
(*);

69 
	$BadPPM
(* 
fûe
)

71 
	`Ârötf
(
°dîr
, "%s: NŸá PPM fûe.\n", 
fûe
);

72 
	`exô
(-2);

73 
	}
}

76 
	$maö
(
¨gc
, * 
¨gv
[])

78 
uöt16
 
phŸomëric
 = 0;

79 
uöt32
 
row•î°rù
 = (uint32) -1;

80 
ªsﬁuti⁄
 = -1;

81 *
buf
 = 
NULL
;

82 
tsize_t
 
löebyãs
 = 0;

83 
uöt16
 
•p
 = 1;

84 
uöt16
 
bµ
 = 8;

85 
TIFF
 *
out
;

86 
FILE
 *
ö
;

87 
w
, 
h
, 
¥ec
, 
row
;

88 *
öfûe
;

89 
c
;

90 
›töd
;

91 * 
›èrg
;

93 i‡(
¨gc
 < 2) {

94 
	`Ârötf
(
°dîr
, "%s: Toÿ„wárgumíts\n", 
¨gv
[0]);

95 
	`ußge
();

97 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:r:R:")) != -1)

98 
c
) {

100 i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

101 
	`ußge
();

104 
row•î°rù
 = 
	`©oi
(
›èrg
);

107 
ªsﬁuti⁄
 = 
	`©of
(
›èrg
);

110 
	`ußge
();

114 i‡(
›töd
 + 2 < 
¨gc
) {

115 
	`Ârötf
(
°dîr
, "%s: Toÿm™yárgumíts\n", 
¨gv
[0]);

116 
	`ußge
();

123 i‡(
¨gc
 - 
›töd
 > 1) {

124 
öfûe
 = 
¨gv
[
›töd
++];

125 
ö
 = 
	`f›í
(
öfûe
, "rb");

126 i‡(
ö
 =
NULL
) {

127 
	`Ârötf
(
°dîr
, "%s: C™ÇŸ o≥n.\n", 
öfûe
);

131 
öfûe
 = "<stdin>";

132 
ö
 = 
°dö
;

133 #i‡
	`deföed
(
HAVE_SETMODE
Ë&& deföed(
O_BINARY
)

134 
	`£tmode
(
	`fûío
(
°dö
), 
O_BINARY
);

138 i‡(
	`fgëc
(
ö
) != 'P')

139 
	`BadPPM
(
öfûe
);

140 
	`fgëc
(
ö
)) {

142 
bµ
 = 1;

143 
•p
 = 1;

144 
phŸomëric
 = 
PHOTOMETRIC_MINISWHITE
;

147 
bµ
 = 8;

148 
•p
 = 1;

149 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

152 
bµ
 = 8;

153 
•p
 = 3;

154 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

155 i‡(
com¥essi⁄
 =
COMPRESSION_JPEG
 &&

156 
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
)

157 
phŸomëric
 = 
PHOTOMETRIC_YCBCR
;

160 
	`BadPPM
(
öfûe
);

165 i‡(
	`„of
(
ö
))

166 
	`BadPPM
(
öfûe
);

167 
c
 = 
	`fgëc
(
ö
);

169 i‡(
	`°rchr
(" \t\r\n", 
c
))

173 i‡(
c
 == '#') {

175 
c
 = 
	`fgëc
(
ö
);

176 } !(
	`°rchr
("\r\n", 
c
Ë|| 
	`„of
(
ö
)));

180 
	`ungëc
(
c
, 
ö
);

183 
bµ
) {

185 i‡(
	`fsˇnf
(
ö
, " %u %u", &
w
, &
h
) != 2)

186 
	`BadPPM
(
öfûe
);

187 i‡(
	`fgëc
(
ö
) != '\n')

188 
	`BadPPM
(
öfûe
);

191 i‡(
	`fsˇnf
(
ö
, " %u %u %u", &
w
, &
h
, &
¥ec
) != 3)

192 
	`BadPPM
(
öfûe
);

193 i‡(
	`fgëc
(
ö
Ë!'\n' || 
¥ec
 != 255)

194 
	`BadPPM
(
öfûe
);

197 
out
 = 
	`TIFFO≥n
(
¨gv
[
›töd
], "w");

198 i‡(
out
 =
NULL
)

200 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, (
uöt32
Ë
w
);

201 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, (
uöt32
Ë
h
);

202 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_TOPLEFT
);

203 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 
•p
);

204 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 
bµ
);

205 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

206 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric
);

207 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

208 
com¥essi⁄
) {

209 
COMPRESSION_JPEG
:

210 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGQUALITY
, 
quÆôy
);

211 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGCOLORMODE
, 
j≥gcﬁ‹mode
);

213 
COMPRESSION_LZW
:

214 
COMPRESSION_DEFLATE
:

215 i‡(
¥edi˘‹
 != 0)

216 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

218 
COMPRESSION_CCITTFAX3
:

219 
	`TIFFSëFõld
(
out
, 
TIFFTAG_GROUP3OPTIONS
, 
g3›ts
);

222 
bµ
) {

224 
löebyãs
 = (
•p
 * 
w
 + (8 - 1)) / 8;

225 i‡(
row•î°rù
 =(
uöt32
) -1) {

226 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
, 
h
);

228 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
,

229 
	`TIFFDeÁu…SåùSize
(
out
, 
row•î°rù
));

233 
löebyãs
 = 
•p
 * 
w
;

234 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
,

235 
	`TIFFDeÁu…SåùSize
(
out
, 
row•î°rù
));

238 i‡(
	`TIFFSˇ∆öeSize
(
out
Ë> 
löebyãs
)

239 
buf
 = (*)
	`_TIFFmÆloc
(
löebyãs
);

241 
buf
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
out
));

242 i‡(
ªsﬁuti⁄
 > 0) {

243 
	`TIFFSëFõld
(
out
, 
TIFFTAG_XRESOLUTION
, 
ªsﬁuti⁄
);

244 
	`TIFFSëFõld
(
out
, 
TIFFTAG_YRESOLUTION
, 
ªsﬁuti⁄
);

245 
	`TIFFSëFõld
(
out
, 
TIFFTAG_RESOLUTIONUNIT
, 
RESUNIT_INCH
);

247 
row
 = 0;Ñow < 
h
;Ñow++) {

248 i‡(
	`‰ód
(
buf
, 
löebyãs
, 1, 
ö
) != 1) {

249 
	`Ârötf
(
°dîr
, "%s: scanline %lu: ReadÉrror.\n",

250 
öfûe
, (Ë
row
);

253 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
buf
, 
row
, 0) < 0)

256 (Ë
	`TIFFClo£
(
out
);

257 i‡(
buf
)

258 
	`_TIFF‰ì
(
buf
);

260 
	}
}

263 
	$¥o˚ssG3O±i⁄s
(* 
˝
)

265 
g3›ts
 = 0;

266 if–(
˝
 = 
	`°rchr
(cp, ':')) ) {

268 
˝
++;

269 i‡(
	`°∫eq
(
˝
, "1d", 2))

270 
g3›ts
 &~
GROUP3OPT_2DENCODING
;

271 i‡(
	`°∫eq
(
˝
, "2d", 2))

272 
g3›ts
 |
GROUP3OPT_2DENCODING
;

273 i‡(
	`°∫eq
(
˝
, "fill", 4))

274 
g3›ts
 |
GROUP3OPT_FILLBITS
;

276 
	`ußge
();

277 }  (
˝
 = 
	`°rchr
(cp, ':')) );

279 
	}
}

282 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

284 i‡(
	`°ªq
(
›t
, "none"))

285 
com¥essi⁄
 = 
COMPRESSION_NONE
;

286 i‡(
	`°ªq
(
›t
, "packbits"))

287 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

288 i‡(
	`°∫eq
(
›t
, "jpeg", 4)) {

289 * 
˝
 = 
	`°rchr
(
›t
, ':');

291 
com¥essi⁄
 = 
COMPRESSION_JPEG
;

292 
˝
)

294 i‡(
	`isdigô
(()
˝
[1]))

295 
quÆôy
 = 
	`©oi
(
˝
+1);

296 i‡(
˝
[1] == 'r' )

297 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

299 
	`ußge
();

301 
˝
 = 
	`°rchr
(cp+1,':');

303 } i‡(
	`°∫eq
(
›t
, "g3", 2)) {

304 
	`¥o˚ssG3O±i⁄s
(
›t
);

305 
com¥essi⁄
 = 
COMPRESSION_CCITTFAX3
;

306 } i‡(
	`°ªq
(
›t
, "g4")) {

307 
com¥essi⁄
 = 
COMPRESSION_CCITTFAX4
;

308 } i‡(
	`°∫eq
(
›t
, "lzw", 3)) {

309 * 
˝
 = 
	`°rchr
(
›t
, ':');

310 i‡(
˝
)

311 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

312 
com¥essi⁄
 = 
COMPRESSION_LZW
;

313 } i‡(
	`°∫eq
(
›t
, "zip", 3)) {

314 * 
˝
 = 
	`°rchr
(
›t
, ':');

315 i‡(
˝
)

316 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

317 
com¥essi⁄
 = 
COMPRESSION_DEFLATE
;

321 
	}
}

323 * 
	g°uff
[] = {

343 
NULL


347 
	$ußge
()

349 
buf
[
BUFSIZ
];

350 
i
;

352 
	`£tbuf
(
°dîr
, 
buf
);

353 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

354 
i
 = 0; 
°uff
[i] !
NULL
; i++)

355 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

356 
	`exô
(-1);

357 
	}
}

	@tools/ras2tiff.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<˘y≥.h
>

34 #ifde‡
HAVE_UNISTD_H


35 
	~<uni°d.h
>

38 #ifde‡
NEED_LIBPORT


39 
	~"libp‹t.h
"

42 
	~"ø°îfûe.h
"

43 
	~"tiffio.h
"

45 #i‚de‡
howm™y


46 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

48 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

49 
	#°∫eq
(
a
,
b
,
n
Ë(
	`°∫cmp
◊,b,nË=0)

	)

51 
uöt16
 
	gcom¥essi⁄
 = (uint16) -1;

52 
	gj≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

53 
	gquÆôy
 = 75;

54 
uöt16
 
	g¥edi˘‹
 = 0;

56 
ußge
();

57 
¥o˚ssCom¥essO±i⁄s
(*);

60 
	$maö
(
¨gc
, * 
¨gv
[])

62 * 
buf
;

63 
row
;

64 
tsize_t
 
löebyãs
, 
sˇ∆öe
;

65 
TIFF
 *
out
;

66 
FILE
 *
ö
;

67 
ø°îfûe
 
h
;

68 
uöt16
 
phŸomëric
;

69 
uöt16
 
c⁄fig
 = 
PLANARCONFIG_CONTIG
;

70 
uöt32
 
row•î°rù
 = (uint32) -1;

71 
c
;

72 
›töd
;

73 * 
›èrg
;

75 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:r:h")) != -1)

76 
c
) {

78 i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

79 
	`ußge
();

82 
row•î°rù
 = 
	`©oi
(
›èrg
);

85 
	`ußge
();

88 i‡(
¨gc
 - 
›töd
 != 2)

89 
	`ußge
();

90 
ö
 = 
	`f›í
(
¨gv
[
›töd
], "rb");

91 i‡(
ö
 =
NULL
) {

92 
	`Ârötf
(
°dîr
, "%s: C™ÇŸ o≥n.\n", 
¨gv
[
›töd
]);

95 i‡(
	`‰ód
(&
h
,  (h), 1, 
ö
) != 1) {

96 
	`Ârötf
(
°dîr
, "%s: C™ÇŸÑód hódî.\n", 
¨gv
[
›töd
]);

97 
	`f˛o£
(
ö
);

100 i‡(
	`°rcmp
(
h
.
øs_magic
, 
RAS_MAGIC
) == 0) {

101 #i‚de‡
WORDS_BIGENDIAN


102 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_width
);

103 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_height
);

104 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_dïth
);

105 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_Àngth
);

106 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_ty≥
);

107 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_m≠ty≥
);

108 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_m≠Àngth
);

110 } i‡(
	`°rcmp
(
h
.
øs_magic
, 
RAS_MAGIC_INV
) == 0) {

111 #ifde‡
WORDS_BIGENDIAN


112 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_width
);

113 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_height
);

114 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_dïth
);

115 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_Àngth
);

116 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_ty≥
);

117 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_m≠ty≥
);

118 
	`TIFFSwabL⁄g
((
uöt32
 *)&
h
.
øs_m≠Àngth
);

121 
	`Ârötf
(
°dîr
, "%s: NŸáÑa°îfûe.\n", 
¨gv
[
›töd
]);

122 
	`f˛o£
(
ö
);

125 
out
 = 
	`TIFFO≥n
(
¨gv
[
›töd
+1], "w");

126 i‡(
out
 =
NULL
)

128 
	`f˛o£
(
ö
);

131 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, (
uöt32
Ë
h
.
øs_width
);

132 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, (
uöt32
Ë
h
.
øs_height
);

133 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_TOPLEFT
);

134 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 
h
.
øs_dïth
 > 8 ? 3 : 1);

135 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 
h
.
øs_dïth
 > 1 ? 8 : 1);

136 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
c⁄fig
);

137 i‡(
h
.
øs_m≠ty≥
 !
RMT_NONE
) {

138 
uöt16
* 
ªd
;

139 
uöt16
* 
m≠
;

140 
i
, 
j
;

141 
m≠size
;

143 
buf
 = (*)
	`_TIFFmÆloc
(
h
.
øs_m≠Àngth
);

144 i‡(
buf
 =
NULL
) {

145 
	`Ârötf
(
°dîr
, "No spaceÅoÑead in colormap.\n");

148 i‡(
	`‰ód
(
buf
, 
h
.
øs_m≠Àngth
, 1, 
ö
) != 1) {

149 
	`Ârötf
(
°dîr
, "%s: ReadÉrror on colormap.\n",

150 
¨gv
[
›töd
]);

153 
m≠size
 = 1<<
h
.
øs_dïth
;

154 i‡(
h
.
øs_m≠Àngth
 > 
m≠size
*3) {

155 
	`Ârötf
(
°dîr
,

157 
¨gv
[
›töd
], 
h
.
øs_m≠Àngth
, 
m≠size
*3);

160 
ªd
 = (
uöt16
*)
	`_TIFFmÆloc
(
m≠size
 * 3 *  (uint16));

161 i‡(
ªd
 =
NULL
) {

162 
	`Ârötf
(
°dîr
, "No space for colormap.\n");

165 
m≠
 = 
ªd
;

166 
j
 = 0; j < 3; j++) {

167 
	#SCALE
(
x
Ë(((x)*((1L<<16)-1))/255)

	)

168 
i
 = 
h
.
øs_m≠Àngth
/3; i-- > 0;)

169 *
m≠
++ = 
	`SCALE
(*
buf
++);

170 i‡((
i
 = 
h
.
øs_m≠Àngth
/3Ë< 
m≠size
) {

171 
i
 = 
m≠size
 - i;

172 
	`_TIFFmem£t
(
m≠
, 0, 
i
* (
uöt16
));

173 
m≠
 +
i
;

176 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COLORMAP
,

177 
ªd
,Ñed + 
m≠size
,Ñed + 2*mapsize);

178 
phŸomëric
 = 
PHOTOMETRIC_PALETTE
;

179 i‡(
com¥essi⁄
 =(
uöt16
) -1)

180 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

181 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

184 
phŸomëric
 = 
h
.
øs_dïth
 == 24 ?

185 
PHOTOMETRIC_RGB
 : 
PHOTOMETRIC_MINISBLACK
;

186 i‡(
com¥essi⁄
 =(
uöt16
) -1)

187 
com¥essi⁄
 = 
COMPRESSION_LZW
;

188 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

190 
com¥essi⁄
) {

191 
COMPRESSION_JPEG
:

192 i‡(
phŸomëric
 =
PHOTOMETRIC_RGB
 && 
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
)

193 
phŸomëric
 = 
PHOTOMETRIC_YCBCR
;

194 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGQUALITY
, 
quÆôy
);

195 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGCOLORMODE
, 
j≥gcﬁ‹mode
);

197 
COMPRESSION_LZW
:

198 
COMPRESSION_DEFLATE
:

199 i‡(
¥edi˘‹
 != 0)

200 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

203 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric
);

204 
löebyãs
 = ((
h
.
øs_dïth
*h.
øs_width
+15) >> 3) &~ 1;

205 
sˇ∆öe
 = 
	`TIFFSˇ∆öeSize
(
out
);

206 i‡(
sˇ∆öe
 > 
löebyãs
) {

207 
buf
 = (*)
	`_TIFFmÆloc
(
sˇ∆öe
);

208 
	`_TIFFmem£t
(
buf
+
löebyãs
, 0, 
sˇ∆öe
-linebytes);

210 
buf
 = (*)
	`_TIFFmÆloc
(
löebyãs
);

211 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
,

212 
	`TIFFDeÁu…SåùSize
(
out
, 
row•î°rù
));

213 
row
 = 0;Ñow < 
h
.
øs_height
;Ñow++) {

214 i‡(
	`‰ód
(
buf
, 
löebyãs
, 1, 
ö
) != 1) {

215 
	`Ârötf
(
°dîr
, "%s: scanline %ld: ReadÉrror.\n",

216 
¨gv
[
›töd
], 
row
);

219 i‡(
h
.
øs_ty≥
 =
RT_STANDARD
 && h.
øs_dïth
 == 24) {

220 
tsize_t
 
cc
 = 
h
.
øs_width
;

221 * 
˝
 = 
buf
;

222 
	#SWAP
(
a
,
b
Ë{ 
t
 = (a); (aË(b); (bËt; }

	)

224 
	`SWAP
(
˝
[0], cp[2]);

225 
˝
 += 3;

226 } --
cc
);

228 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
buf
, 
row
, 0) < 0)

231 (Ë
	`TIFFClo£
(
out
);

232 
	`f˛o£
(
ö
);

234 
	}
}

237 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

239 i‡(
	`°ªq
(
›t
, "none"))

240 
com¥essi⁄
 = 
COMPRESSION_NONE
;

241 i‡(
	`°ªq
(
›t
, "packbits"))

242 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

243 i‡(
	`°∫eq
(
›t
, "jpeg", 4)) {

244 * 
˝
 = 
	`°rchr
(
›t
, ':');

246 
com¥essi⁄
 = 
COMPRESSION_JPEG
;

247  
˝
 )

249 i‡(
	`isdigô
(()
˝
[1]))

250 
quÆôy
 = 
	`©oi
(
˝
+1);

251 i‡(
˝
[1] == 'r' )

252 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

254 
	`ußge
();

256 
˝
 = 
	`°rchr
(cp+1,':');

258 } i‡(
	`°∫eq
(
›t
, "lzw", 3)) {

259 * 
˝
 = 
	`°rchr
(
›t
, ':');

260 i‡(
˝
)

261 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

262 
com¥essi⁄
 = 
COMPRESSION_LZW
;

263 } i‡(
	`°∫eq
(
›t
, "zip", 3)) {

264 * 
˝
 = 
	`°rchr
(
›t
, ':');

265 i‡(
˝
)

266 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

267 
com¥essi⁄
 = 
COMPRESSION_DEFLATE
;

271 
	}
}

273 * 
	g°uff
[] = {

293 
NULL


297 
	$ußge
()

299 
buf
[
BUFSIZ
];

300 
i
;

302 
	`£tbuf
(
°dîr
, 
buf
);

303 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

304 
i
 = 0; 
°uff
[i] !
NULL
; i++)

305 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

306 
	`exô
(-1);

307 
	}
}

	@tools/rasterfile.h

6 
	sø°îfûe
 {

7 
	møs_magic
[4];

8 
	møs_width
;

9 
	møs_height
;

10 
	møs_dïth
;

11 
	møs_Àngth
;

12 
	møs_ty≥
;

13 
	møs_m≠ty≥
;

14 
	møs_m≠Àngth
;

17 
	#RAS_MAGIC
 "\x59\xa6\x6a\x95"

	)

18 
	#RAS_MAGIC_INV
 "\x95\x6a\xa6\x59"

	)

21 
	#RT_OLD
 0

	)

22 
	#RT_STANDARD
 1

	)

23 
	#RT_BYTE_ENCODED
 2

	)

24 
	#RT_EXPERIMENTAL
 0xfff‡

	)

27 
	#RMT_RAW
 2

	)

29 
	#RMT_NONE
 0

	)

30 
	#RMT_EQUAL_RGB
 1

	)

	@tools/raw2tiff.c

30 
	~"tif_c⁄fig.h
"

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<sys/°©.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<m©h.h
>

38 
	~<˘y≥.h
>

40 #ifde‡
HAVE_UNISTD_H


41 
	~<uni°d.h
>

44 #i‡
HAVE_FCNTL_H


45 
	~<f˙é.h
>

48 #i‡
HAVE_SYS_TYPES_H


49 
	~<sys/ty≥s.h
>

52 #i‡
HAVE_IO_H


53 
	~<io.h
>

56 #ifde‡
NEED_LIBPORT


57 
	~"libp‹t.h
"

60 
	~"tiffio.h
"

62 #i‚de‡
HAVE_GETOPT


63 
gë›t
(, **, *);

66 #i‚de‡
O_BINARY


67 
	#O_BINARY
 0

	)

71 
	mPIXEL
,

72 
	mBAND


73 } 
	tI¡îÀavögTy≥
;

75 
uöt16
 
	gcom¥essi⁄
 = (uint16) -1;

76 
	gj≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

77 
	gquÆôy
 = 75;

78 
uöt16
 
	g¥edi˘‹
 = 0;

80 
sw≠ByãsInSˇ∆öe
(*, 
uöt32
, 
TIFFD©aTy≥
);

81 
guessSize
(, 
TIFFD©aTy≥
, 
off_t
, 
uöt32
, ,

82 
uöt32
 *, uint32 *);

83 
c‹ªœti⁄
(*, *, 
uöt32
, 
TIFFD©aTy≥
);

84 
ußge
();

85 
¥o˚ssCom¥essO±i⁄s
(*);

88 
	$maö
(
¨gc
, * 
¨gv
[])

90 
uöt32
 
width
 = 0, 
Àngth
 = 0, 
löebyãs
, 
bufsize
;

91 
uöt32
 
nb™ds
 = 1;

92 
off_t
 
hdr_size
 = 0;

93 
TIFFD©aTy≥
 
dty≥
 = 
TIFF_BYTE
;

94 
öt16
 
dïth
 = 1;

95 
swab
 = 0;

96 
I¡îÀavögTy≥
 
öãæóvög
 = 0;

97 
uöt32
 
row•î°rù
 = (uint32) -1;

98 
uöt16
 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

99 
uöt16
 
c⁄fig
 = 
PLANARCONFIG_CONTIG
;

100 
uöt16
 
fûl‹dî
 = 
FILLORDER_LSB2MSB
;

101 
fd
;

102 *
outfûíame
 = 
NULL
;

103 
TIFF
 *
out
;

105 
uöt32
 
row
, 
cﬁ
, 
b™d
;

106 
c
;

107 *
buf
 = 
NULL
, *
buf1
 = NULL;

108 
›töd
;

109 * 
›èrg
;

111 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:r:H:w:l:b:d:LMp:si:o:h")) != -1) {

112 
c
) {

114 i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

115 
	`ußge
();

118 
row•î°rù
 = 
	`©oi
(
›èrg
);

121 
hdr_size
 = 
	`©oi
(
›èrg
);

124 
width
 = 
	`©oi
(
›èrg
);

127 
Àngth
 = 
	`©oi
(
›èrg
);

130 
nb™ds
 = 
	`©oi
(
›èrg
);

133 i‡(
	`°∫cmp
(
›èrg
, "byte", 4) == 0)

134 
dty≥
 = 
TIFF_BYTE
;

135 i‡(
	`°∫cmp
(
›èrg
, "short", 5) == 0)

136 
dty≥
 = 
TIFF_SHORT
;

137 i‡(
	`°∫cmp
(
›èrg
, "long", 4) == 0)

138 
dty≥
 = 
TIFF_LONG
;

139 i‡(
	`°∫cmp
(
›èrg
, "sbyte", 5) == 0)

140 
dty≥
 = 
TIFF_SBYTE
;

141 i‡(
	`°∫cmp
(
›èrg
, "sshort", 6) == 0)

142 
dty≥
 = 
TIFF_SSHORT
;

143 i‡(
	`°∫cmp
(
›èrg
, "slong", 5) == 0)

144 
dty≥
 = 
TIFF_SLONG
;

145 i‡(
	`°∫cmp
(
›èrg
, "float", 5) == 0)

146 
dty≥
 = 
TIFF_FLOAT
;

147 i‡(
	`°∫cmp
(
›èrg
, "double", 6) == 0)

148 
dty≥
 = 
TIFF_DOUBLE
;

150 
dty≥
 = 
TIFF_BYTE
;

151 
dïth
 = 
	`TIFFD©aWidth
(
dty≥
);

154 
fûl‹dî
 = 
FILLORDER_LSB2MSB
;

157 
fûl‹dî
 = 
FILLORDER_MSB2LSB
;

160 i‡(
	`°∫cmp
(
›èrg
, "miniswhite", 10) == 0)

161 
phŸomëric
 = 
PHOTOMETRIC_MINISWHITE
;

162 i‡(
	`°∫cmp
(
›èrg
, "minisblack", 10) == 0)

163 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

164 i‡(
	`°∫cmp
(
›èrg
, "rgb", 3) == 0)

165 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

166 i‡(
	`°∫cmp
(
›èrg
, "cmyk", 4) == 0)

167 
phŸomëric
 = 
PHOTOMETRIC_SEPARATED
;

168 i‡(
	`°∫cmp
(
›èrg
, "ycbcr", 5) == 0)

169 
phŸomëric
 = 
PHOTOMETRIC_YCBCR
;

170 i‡(
	`°∫cmp
(
›èrg
, "cielab", 6) == 0)

171 
phŸomëric
 = 
PHOTOMETRIC_CIELAB
;

172 i‡(
	`°∫cmp
(
›èrg
, "icclab", 6) == 0)

173 
phŸomëric
 = 
PHOTOMETRIC_ICCLAB
;

174 i‡(
	`°∫cmp
(
›èrg
, "itulab", 6) == 0)

175 
phŸomëric
 = 
PHOTOMETRIC_ITULAB
;

177 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

180 
swab
 = 1;

183 i‡(
	`°∫cmp
(
›èrg
, "pixel", 4) == 0)

184 
öãæóvög
 = 
PIXEL
;

185 i‡(
	`°∫cmp
(
›èrg
, "band", 6) == 0)

186 
öãæóvög
 = 
BAND
;

188 
öãæóvög
 = 0;

191 
outfûíame
 = 
›èrg
;

194 
	`ußge
();

200 i‡(
¨gc
 - 
›töd
 < 2)

201 
	`ußge
();

203 
fd
 = 
	`›í
(
¨gv
[
›töd
], 
O_RDONLY
|
O_BINARY
, 0);

204 i‡(
fd
 < 0) {

205 
	`Ârötf
(
°dîr
, "%s: %s: Cannot open input file.\n",

206 
¨gv
[0],árgv[
›töd
]);

210 i‡(
	`guessSize
(
fd
, 
dty≥
, 
hdr_size
, 
nb™ds
, 
swab
, &
width
, &
Àngth
) < 0)

213 i‡(
outfûíame
 =
NULL
)

214 
outfûíame
 = 
¨gv
[
›töd
+1];

215 
out
 = 
	`TIFFO≥n
(
outfûíame
, "w");

216 i‡(
out
 =
NULL
) {

217 
	`Ârötf
(
°dîr
, "%s: %s: Cannot open file for output.\n",

218 
¨gv
[0], 
outfûíame
);

221 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, 
width
);

222 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, 
Àngth
);

223 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_TOPLEFT
);

224 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 
nb™ds
);

225 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 
dïth
 * 8);

226 
	`TIFFSëFõld
(
out
, 
TIFFTAG_FILLORDER
, 
fûl‹dî
);

227 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
c⁄fig
);

228 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric
);

229 
dty≥
) {

230 
TIFF_BYTE
:

231 
TIFF_SHORT
:

232 
TIFF_LONG
:

233 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLEFORMAT
, 
SAMPLEFORMAT_UINT
);

235 
TIFF_SBYTE
:

236 
TIFF_SSHORT
:

237 
TIFF_SLONG
:

238 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLEFORMAT
, 
SAMPLEFORMAT_INT
);

240 
TIFF_FLOAT
:

241 
TIFF_DOUBLE
:

242 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLEFORMAT
, 
SAMPLEFORMAT_IEEEFP
);

245 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLEFORMAT
, 
SAMPLEFORMAT_VOID
);

248 i‡(
com¥essi⁄
 =(
uöt16
) -1)

249 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

250 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

251 
com¥essi⁄
) {

252 
COMPRESSION_JPEG
:

253 i‡(
phŸomëric
 =
PHOTOMETRIC_RGB


254 && 
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
)

255 
phŸomëric
 = 
PHOTOMETRIC_YCBCR
;

256 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGQUALITY
, 
quÆôy
);

257 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGCOLORMODE
, 
j≥gcﬁ‹mode
);

259 
COMPRESSION_LZW
:

260 
COMPRESSION_DEFLATE
:

261 i‡(
¥edi˘‹
 != 0)

262 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

265 
öãæóvög
) {

266 
BAND
:

267 
löebyãs
 = 
width
 * 
dïth
;

268 
buf
 = (*)
	`_TIFFmÆloc
(
löebyãs
);

270 
PIXEL
:

272 
löebyãs
 = 
width
 * 
nb™ds
 * 
dïth
;

275 
bufsize
 = 
width
 * 
nb™ds
 * 
dïth
;

276 
buf1
 = (*)
	`_TIFFmÆloc
(
bufsize
);

278 
row•î°rù
 = 
	`TIFFDeÁu…SåùSize
(
out
,Ñowsperstrip);

279 i‡(
row•î°rù
 > 
Àngth
) {

280 
row•î°rù
 = 
Àngth
;

282 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
 );

284 
	`l£ek
(
fd
, 
hdr_size
, 
SEEK_SET
);

285 
row
 = 0;Ñow < 
Àngth
;Ñow++) {

286 
öãæóvög
) {

287 
BAND
:

288 
b™d
 = 0; b™d < 
nb™ds
; band++) {

289 
	`l£ek
(
fd
,

290 
hdr_size
 + (
Àngth
*
b™d
+
row
)*
löebyãs
,

291 
SEEK_SET
);

292 i‡(
	`ªad
(
fd
, 
buf
, 
löebyãs
) < 0) {

293 
	`Ârötf
(
°dîr
,

295 
¨gv
[0],árgv[
›töd
],

296 (Ë
row
);

299 i‡(
swab
)

300 
	`sw≠ByãsInSˇ∆öe
(
buf
, 
width
, 
dty≥
);

301 
cﬁ
 = 0; cﬁ < 
width
; col++)

302 
	`mem˝y
(
buf1
 + (
cﬁ
*
nb™ds
+
b™d
)*
dïth
,

303 
buf
 + 
cﬁ
 * 
dïth
, depth);

306 
PIXEL
:

308 i‡(
	`ªad
(
fd
, 
buf1
, 
bufsize
) < 0) {

309 
	`Ârötf
(
°dîr
,

311 
¨gv
[0],árgv[
›töd
],

312 (Ë
row
);

315 i‡(
swab
)

316 
	`sw≠ByãsInSˇ∆öe
(
buf1
, 
width
, 
dty≥
);

320 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
buf1
, 
row
, 0) < 0) {

321 
	`Ârötf
(
°dîr
, "%s: %s: scanline %lu: WriteÉrror.\n",

322 
¨gv
[0], 
outfûíame
, (Ë
row
);

326 i‡(
buf
)

327 
	`_TIFF‰ì
(
buf
);

328 i‡(
buf1
)

329 
	`_TIFF‰ì
(
buf1
);

330 
	`TIFFClo£
(
out
);

332 
	}
}

335 
	$sw≠ByãsInSˇ∆öe
(*
buf
, 
uöt32
 
width
, 
TIFFD©aTy≥
 
dty≥
)

337 
dty≥
) {

338 
TIFF_SHORT
:

339 
TIFF_SSHORT
:

340 
	`TIFFSwabAºayOfSh‹t
((
uöt16
*)
buf
,

341 ()
width
);

343 
TIFF_LONG
:

344 
TIFF_SLONG
:

345 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*)
buf
,

346 ()
width
);

349 
TIFF_DOUBLE
:

350 
	`TIFFSwabAºayOfDoubÀ
((*)
buf
,

351 ()
width
);

356 
	}
}

359 
	$guessSize
(
fd
, 
TIFFD©aTy≥
 
dty≥
, 
off_t
 
hdr_size
, 
uöt32
 
nb™ds
,

360 
swab
, 
uöt32
 *
width
, uöt32 *
Àngth
)

362 c⁄° 
l⁄gt
 = 40.0;

363 *
buf1
, *
buf2
;

364 
°©
 
fûe°©
;

365 
uöt32
 
w
, 
h
, 
sˇ∆öesize
, 
imagesize
;

366 
uöt32
 
dïth
 = 
	`TIFFD©aWidth
(
dty≥
);

367 
c‹_c€f
 = 0, 
tmp
;

369 
	`f°©
(
fd
, &
fûe°©
);

371 i‡(
fûe°©
.
°_size
 < 
hdr_size
) {

372 
	`Ârötf
(
°dîr
, "TooÜarge header size specified.\n");

376 
imagesize
 = (
fûe°©
.
°_size
 - 
hdr_size
Ë/ 
nb™ds
 / 
dïth
;

378 i‡(*
width
 !0 && *
Àngth
 == 0) {

379 
	`Ârötf
(
°dîr
, "Image height isÇot specified.\n");

381 *
Àngth
 = 
imagesize
 / *
width
;

383 
	`Ârötf
(
°dîr
, "Height is guessedás %lu.\n",

384 ()*
Àngth
);

387 } i‡(*
width
 =0 && *
Àngth
 != 0) {

388 
	`Ârötf
(
°dîr
, "Image width isÇot specified.\n");

390 *
width
 = 
imagesize
 / *
Àngth
;

392 
	`Ârötf
(
°dîr
, "Width is guessedás %lu.\n",

393 ()*
width
);

396 } i‡(*
width
 =0 && *
Àngth
 == 0) {

397 
	`Ârötf
(
°dîr
, "Image widthánd heightáreÇot specified.\n");

399 
w
 = (
uöt32
Ë
	`sqπ
(
imagesize
 / 
l⁄gt
);

400 
w
 < 
	`sqπ
(
imagesize
 * 
l⁄gt
);

401 
w
++) {

402 i‡(
imagesize
 % 
w
 == 0) {

403 
sˇ∆öesize
 = 
w
 * 
dïth
;

404 
buf1
 = 
	`_TIFFmÆloc
(
sˇ∆öesize
);

405 
buf2
 = 
	`_TIFFmÆloc
(
sˇ∆öesize
);

406 
h
 = 
imagesize
 / 
w
;

407 
	`l£ek
(
fd
, 
hdr_size
 + ()(
h
/2)*
sˇ∆öesize
,

408 
SEEK_SET
);

409 
	`ªad
(
fd
, 
buf1
, 
sˇ∆öesize
);

410 
	`ªad
(
fd
, 
buf2
, 
sˇ∆öesize
);

411 i‡(
swab
) {

412 
	`sw≠ByãsInSˇ∆öe
(
buf1
, 
w
, 
dty≥
);

413 
	`sw≠ByãsInSˇ∆öe
(
buf2
, 
w
, 
dty≥
);

415 
tmp
 = (Ë
	`Ábs
(
	`c‹ªœti⁄
(
buf1
, 
buf2
,

416 
w
, 
dty≥
));

417 i‡(
tmp
 > 
c‹_c€f
) {

418 
c‹_c€f
 = 
tmp
;

419 *
width
 = 
w
, *
Àngth
 = 
h
;

422 
	`_TIFF‰ì
(
buf1
);

423 
	`_TIFF‰ì
(
buf2
);

427 
	`Ârötf
(
°dîr
,

429 ()*
width
, ()*
Àngth
);

433 i‡(
fûe°©
.
°_size
<(
off_t
)(
hdr_size
+(*
width
)*(*
Àngth
)*
nb™ds
*
dïth
)) {

434 
	`Ârötf
(
°dîr
, "Input fileÅoo small.\n");

440 
	}
}

444 
	$c‹ªœti⁄
(*
buf1
, *
buf2
, 
uöt32
 
n_ñem
, 
TIFFD©aTy≥
 
dty≥
)

446 
X
, 
Y
, 
M1
 = 0.0, 
M2
 = 0.0, 
D1
 = 0.0, 
D2
 = 0.0, 
K
 = 0.0;

447 
uöt32
 
i
;

449 
dty≥
) {

450 
TIFF_BYTE
:

452 
i
 = 0; i < 
n_ñem
; i++) {

453 
X
 = ((*)
buf1
)[
i
];

454 
Y
 = ((*)
buf2
)[
i
];

455 
M1
 +
X
, 
M2
 +
Y
;

456 
D1
 +
X
 * X, 
D2
 +
Y
 * Y;

457 
K
 +
X
 * 
Y
;

460 
TIFF_SBYTE
:

461 
i
 = 0; i < 
n_ñem
; i++) {

462 
X
 = ((sig√d *)
buf1
)[
i
];

463 
Y
 = ((sig√d *)
buf2
)[
i
];

464 
M1
 +
X
, 
M2
 +
Y
;

465 
D1
 +
X
 * X, 
D2
 +
Y
 * Y;

466 
K
 +
X
 * 
Y
;

469 
TIFF_SHORT
:

470 
i
 = 0; i < 
n_ñem
; i++) {

471 
X
 = ((
uöt16
 *)
buf1
)[
i
];

472 
Y
 = ((
uöt16
 *)
buf2
)[
i
];

473 
M1
 +
X
, 
M2
 +
Y
;

474 
D1
 +
X
 * X, 
D2
 +
Y
 * Y;

475 
K
 +
X
 * 
Y
;

478 
TIFF_SSHORT
:

479 
i
 = 0; i < 
n_ñem
; i++) {

480 
X
 = ((
öt16
 *)
buf1
)[
i
];

481 
Y
 = ((
öt16
 *)
buf2
)[
i
];

482 
M1
 +
X
, 
M2
 +
Y
;

483 
D1
 +
X
 * X, 
D2
 +
Y
 * Y;

484 
K
 +
X
 * 
Y
;

487 
TIFF_LONG
:

488 
i
 = 0; i < 
n_ñem
; i++) {

489 
X
 = ((
uöt32
 *)
buf1
)[
i
];

490 
Y
 = ((
uöt32
 *)
buf2
)[
i
];

491 
M1
 +
X
, 
M2
 +
Y
;

492 
D1
 +
X
 * X, 
D2
 +
Y
 * Y;

493 
K
 +
X
 * 
Y
;

496 
TIFF_SLONG
:

497 
i
 = 0; i < 
n_ñem
; i++) {

498 
X
 = ((
öt32
 *)
buf1
)[
i
];

499 
Y
 = ((
öt32
 *)
buf2
)[
i
];

500 
M1
 +
X
, 
M2
 +
Y
;

501 
D1
 +
X
 * X, 
D2
 +
Y
 * Y;

502 
K
 +
X
 * 
Y
;

505 
TIFF_FLOAT
:

506 
i
 = 0; i < 
n_ñem
; i++) {

507 
X
 = ((*)
buf1
)[
i
];

508 
Y
 = ((*)
buf2
)[
i
];

509 
M1
 +
X
, 
M2
 +
Y
;

510 
D1
 +
X
 * X, 
D2
 +
Y
 * Y;

511 
K
 +
X
 * 
Y
;

514 
TIFF_DOUBLE
:

515 
i
 = 0; i < 
n_ñem
; i++) {

516 
X
 = ((*)
buf1
)[
i
];

517 
Y
 = ((*)
buf2
)[
i
];

518 
M1
 +
X
, 
M2
 +
Y
;

519 
D1
 +
X
 * X, 
D2
 +
Y
 * Y;

520 
K
 +
X
 * 
Y
;

525 
M1
 /
n_ñem
;

526 
M2
 /
n_ñem
;

527 
D1
 -
M1
 * M1 * 
n_ñem
;

528 
D2
 -
M2
 * M2 * 
n_ñem
;

529 
K
 = (K - 
M1
 * 
M2
 * 
n_ñem
Ë/ 
	`sqπ
(
D1
 * 
D2
);

531  
K
;

532 
	}
}

535 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

537 i‡(
	`°rcmp
(
›t
, "none") == 0)

538 
com¥essi⁄
 = 
COMPRESSION_NONE
;

539 i‡(
	`°rcmp
(
›t
, "packbits") == 0)

540 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

541 i‡(
	`°∫cmp
(
›t
, "jpeg", 4) == 0) {

542 * 
˝
 = 
	`°rchr
(
›t
, ':');

544 
com¥essi⁄
 = 
COMPRESSION_JPEG
;

545  
˝
 )

547 i‡(
	`isdigô
(()
˝
[1]))

548 
quÆôy
 = 
	`©oi
(
˝
+1);

549 i‡(
˝
[1] == 'r' )

550 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

552 
	`ußge
();

554 
˝
 = 
	`°rchr
(cp+1,':');

556 } i‡(
	`°∫cmp
(
›t
, "lzw", 3) == 0) {

557 * 
˝
 = 
	`°rchr
(
›t
, ':');

558 i‡(
˝
)

559 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

560 
com¥essi⁄
 = 
COMPRESSION_LZW
;

561 } i‡(
	`°∫cmp
(
›t
, "zip", 3) == 0) {

562 * 
˝
 = 
	`°rchr
(
›t
, ':');

563 i‡(
˝
)

564 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

565 
com¥essi⁄
 = 
COMPRESSION_DEFLATE
;

569 
	}
}

571 * 
	g°uff
[] = {

628 
NULL


632 
	$ußge
()

634 
buf
[
BUFSIZ
];

635 
i
;

637 
	`£tbuf
(
°dîr
, 
buf
);

638 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

639 
i
 = 0; 
°uff
[i] !
NULL
; i++)

640 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

641 
	`exô
(-1);

642 
	}
}

	@tools/rgb2ycbcr.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<°dlib.h
>

33 #ifde‡
HAVE_UNISTD_H


34 
	~<uni°d.h
>

37 #ifde‡
NEED_LIBPORT


38 
	~"libp‹t.h
"

41 
	~"tiffi›.h
"

42 
	~"tiffio.h
"

44 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

45 
	#C›yFõld
(
èg
, 
v
) \

46 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v
)Ë
	`TIFFSëFõld
(
out
,Åag, v)

	)

48 #i‚de‡
howm™y


49 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

51 
	#roundup
(
x
, 
y
Ë(
	`howm™y
(x,y)*((
uöt32
)(y)))

	)

53 
	#LumaRed
 
ycb¸C€ffs
[0]

	)

54 
	#LumaGªí
 
ycb¸C€ffs
[1]

	)

55 
	#LumaBlue
 
ycb¸C€ffs
[2]

	)

57 
uöt16
 
	gcom¥essi⁄
 = 
COMPRESSION_PACKBITS
;

58 
uöt32
 
	grow•î°rù
 = (uint32) -1;

60 
uöt16
 
	gh‹izSubSam∂ög
 = 2;

61 
uöt16
 
	gvîtSubSam∂ög
 = 2;

62 
	gycb¸C€ffs
[3] = { .299F, .587F, .114F };

64 
	gªfBœckWhôe
[6] = { 0.F, 255.F, 128.F, 255.F, 128.F, 255.F };

66 
tiffcvt
(
TIFF
* 
ö
, TIFF* 
out
);

67 
ußge
(
code
);

68 
£tupLumaTabÀs
();

71 
	$maö
(
¨gc
, * 
¨gv
[])

73 
TIFF
 *
ö
, *
out
;

74 
c
;

75 
›töd
;

76 *
›èrg
;

78 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:h:r:v:z")) != -1)

79 
c
) {

81 i‡(
	`°ªq
(
›èrg
, "none"))

82 
com¥essi⁄
 = 
COMPRESSION_NONE
;

83 i‡(
	`°ªq
(
›èrg
, "packbits"))

84 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

85 i‡(
	`°ªq
(
›èrg
, "lzw"))

86 
com¥essi⁄
 = 
COMPRESSION_LZW
;

87 i‡(
	`°ªq
(
›èrg
, "jpeg"))

88 
com¥essi⁄
 = 
COMPRESSION_JPEG
;

89 i‡(
	`°ªq
(
›èrg
, "zip"))

90 
com¥essi⁄
 = 
COMPRESSION_ADOBE_DEFLATE
;

92 
	`ußge
(-1);

95 
h‹izSubSam∂ög
 = 
	`©oi
(
›èrg
);

98 
vîtSubSam∂ög
 = 
	`©oi
(
›èrg
);

101 
row•î°rù
 = 
	`©oi
(
›èrg
);

104 
ªfBœckWhôe
[0] = 16.;

105 
ªfBœckWhôe
[1] = 235.;

106 
ªfBœckWhôe
[2] = 128.;

107 
ªfBœckWhôe
[3] = 240.;

108 
ªfBœckWhôe
[4] = 128.;

109 
ªfBœckWhôe
[5] = 240.;

112 
	`ußge
(0);

115 i‡(
¨gc
 - 
›töd
 < 2)

116 
	`ußge
(-1);

117 
out
 = 
	`TIFFO≥n
(
¨gv
[
¨gc
-1], "w");

118 i‡(
out
 =
NULL
)

120 
	`£tupLumaTabÀs
();

121 ; 
›töd
 < 
¨gc
-1; optind++) {

122 
ö
 = 
	`TIFFO≥n
(
¨gv
[
›töd
], "r");

123 i‡(
ö
 !
NULL
) {

125 i‡(!
	`tiffcvt
(
ö
, 
out
) ||

126 !
	`TIFFWrôeDúe˘‹y
(
out
)) {

127 (Ë
	`TIFFClo£
(
out
);

130 } 
	`TIFFRódDúe˘‹y
(
ö
));

131 (Ë
	`TIFFClo£
(
ö
);

134 (Ë
	`TIFFClo£
(
out
);

136 
	}
}

138 *
	glumaRed
;

139 *
	glumaGªí
;

140 *
	glumaBlue
;

141 
	gD1
, 
	gD2
;

142 
	gYzîo
;

145 
	$£tupLuma
(
c
)

147 *
v
 = (*)
	`_TIFFmÆloc
(256 *  ());

148 
i
;

149 
i
 = 0; i < 256; i++)

150 
v
[
i
] = 
c
 * i;

151  (
v
);

152 
	}
}

155 
	$V2Code
(
f
, 
RB
, 
RW
, 
CR
)

157 
c
 = ()((((
f
)*(
RW
-
RB
)/
CR
)+RB)+.5);

158  (
c
 > 255 ? 255 : c);

159 
	}
}

162 
	$£tupLumaTabÀs
()

164 
lumaRed
 = 
	`£tupLuma
(
LumaRed
);

165 
lumaGªí
 = 
	`£tupLuma
(
LumaGªí
);

166 
lumaBlue
 = 
	`£tupLuma
(
LumaBlue
);

167 
D1
 = 1.F/(2.F - 2.F*
LumaBlue
);

168 
D2
 = 1.F/(2.F - 2.F*
LumaRed
);

169 
Yzîo
 = 
	`V2Code
(0, 
ªfBœckWhôe
[0],ÑefBlackWhite[1], 255);

170 
	}
}

173 
	$cvtClump
(* 
›
, 
uöt32
* 
ø°î
, uöt32 
ch
, uöt32 
cw
, uöt32 
w
)

175 
Y
, 
Cb
 = 0, 
Cr
 = 0;

176 
uöt32
 
j
, 
k
;

181 
k
 = 0; k < 
ch
; k++) {

182 
j
 = 0; j < 
cw
; j++) {

183 
uöt32
 
RGB
 = (
ø°î
 - 
k
*
w
)[
j
];

184 
Y
 = 
lumaRed
[
	`TIFFGëR
(
RGB
)] +

185 
lumaGªí
[
	`TIFFGëG
(
RGB
)] +

186 
lumaBlue
[
	`TIFFGëB
(
RGB
)];

188 
Cb
 +(
	`TIFFGëB
(
RGB
Ë- 
Y
Ë* 
D1
;

189 
Cr
 +(
	`TIFFGëR
(
RGB
Ë- 
Y
Ë* 
D2
;

191 *
›
++ = 
	`V2Code
(
Y
,

192 
ªfBœckWhôe
[0],ÑefBlackWhite[1], 255);

194 ; 
j
 < 
h‹izSubSam∂ög
; j++)

195 *
›
++ = 
Yzîo
;

197 ; 
k
 < 
vîtSubSam∂ög
; k++) {

198 
j
 = 0; j < 
h‹izSubSam∂ög
; j++)

199 *
›
++ = 
Yzîo
;

202 *
›
++ = 
	`V2Code
(
Cb
 / (
ch
*
cw
), 
ªfBœckWhôe
[2],ÑefBlackWhite[3], 127);

203 *
›
++ = 
	`V2Code
(
Cr
 / (
ch
*
cw
), 
ªfBœckWhôe
[4],ÑefBlackWhite[5], 127);

204 
	}
}

205 #unde‡
LumaRed


206 #unde‡
LumaGªí


207 #unde‡
LumaBlue


208 #unde‡
V2Code


215 
	$cvtSåù
(* 
›
, 
uöt32
* 
ø°î
, uöt32 
ƒows
, uöt32 
width
)

217 
uöt32
 
x
;

218 
˛umpSize
 = 
vîtSubSam∂ög
 * 
h‹izSubSam∂ög
 + 2;

219 
uöt32
 *
ç
;

221 ; 
ƒows
 >
vîtSubSam∂ög
;Çrows -= vertSubSampling) {

222 
ç
 = 
ø°î
;

223 
x
 = 
width
; x >
h‹izSubSam∂ög
; x -= horizSubSampling) {

224 
	`cvtClump
(
›
, 
ç
,

225 
vîtSubSam∂ög
, 
h‹izSubSam∂ög
, 
width
);

226 
›
 +
˛umpSize
;

227 
ç
 +
h‹izSubSam∂ög
;

229 i‡(
x
 > 0) {

230 
	`cvtClump
(
›
, 
ç
, 
vîtSubSam∂ög
, 
x
, 
width
);

231 
›
 +
˛umpSize
;

233 
ø°î
 -
vîtSubSam∂ög
*
width
;

235 i‡(
ƒows
 > 0) {

236 
ç
 = 
ø°î
;

237 
x
 = 
width
; x >
h‹izSubSam∂ög
; x -= horizSubSampling) {

238 
	`cvtClump
(
›
, 
ç
, 
ƒows
, 
h‹izSubSam∂ög
, 
width
);

239 
›
 +
˛umpSize
;

240 
ç
 +
h‹izSubSam∂ög
;

242 i‡(
x
 > 0)

243 
	`cvtClump
(
›
, 
ç
, 
ƒows
, 
x
, 
width
);

245 
	}
}

248 
	$cvtRa°î
(
TIFF
* 
tif
, 
uöt32
* 
ø°î
, uöt32 
width
, uöt32 
height
)

250 
uöt32
 
y
;

251 
t°rù_t
 
°rù
 = 0;

252 
tsize_t
 
cc
, 
acc
;

253 * 
buf
;

254 
uöt32
 
rwidth
 = 
	`roundup
(
width
, 
h‹izSubSam∂ög
);

255 
uöt32
 
rheight
 = 
	`roundup
(
height
, 
vîtSubSam∂ög
);

256 
uöt32
 
ƒows
 = (
row•î°rù
 > 
rheight
 ?Ñheight :Ñowsperstrip);

257 
uöt32
 
∫rows
 = 
	`roundup
(
ƒows
,
vîtSubSam∂ög
);

259 
cc
 = 
∫rows
*
rwidth
 +

260 2*((
∫rows
*
rwidth
Ë/ (
h‹izSubSam∂ög
*
vîtSubSam∂ög
));

261 
buf
 = (*)
	`_TIFFmÆloc
(
cc
);

263 
y
 = 
height
; (
öt32
Ëy > 0; y -
ƒows
) {

264 
uöt32
 
ƒ
 = (
y
 > 
ƒows
 ?Çrows : y);

265 
	`cvtSåù
(
buf
, 
ø°î
 + (
y
-1)*
width
, 
ƒ
, width);

266 
ƒ
 = 
	`roundup
“r, 
vîtSubSam∂ög
);

267 
acc
 = 
ƒ
*
rwidth
 +

268 2*((
ƒ
*
rwidth
)/(
h‹izSubSam∂ög
*
vîtSubSam∂ög
));

269 i‡(!
	`TIFFWrôeEncodedSåù
(
tif
, 
°rù
++, 
buf
, 
acc
)) {

270 
	`_TIFF‰ì
(
buf
);

274 
	`_TIFF‰ì
(
buf
);

276 
	}
}

279 
	$tiffcvt
(
TIFF
* 
ö
, TIFF* 
out
)

281 
uöt32
 
width
, 
height
;

282 
uöt32
* 
ø°î
;

283 
uöt16
 
sh‹tv
;

284 
Êﬂtv
;

285 *
°rögv
;

286 
uöt32
 
l⁄gv
;

287 
ªsu…
;

288 
size_t
 
pixñ_cou¡
;

290 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGEWIDTH
, &
width
);

291 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
height
);

292 
pixñ_cou¡
 = 
width
 * 
height
;

295 i‡(!
width
 || !
height
 || 
pixñ_cou¡
 / width != height) {

296 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

299 ()
width
, ()
height
);

303 
ø°î
 = (
uöt32
*)
	`_TIFFCheckMÆloc
(
ö
, 
pixñ_cou¡
, (uint32),

305 i‡(
ø°î
 == 0) {

306 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

308 ()
pixñ_cou¡
,

309 ()(
uöt32
));

313 i‡(!
	`TIFFRódRGBAImage
(
ö
, 
width
, 
height
, 
ø°î
, 0)) {

314 
	`_TIFF‰ì
(
ø°î
);

318 
	`C›yFõld
(
TIFFTAG_SUBFILETYPE
, 
l⁄gv
);

319 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, 
width
);

320 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, 
height
);

321 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 8);

322 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

323 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_YCBCR
);

324 i‡(
com¥essi⁄
 =
COMPRESSION_JPEG
)

325 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGCOLORMODE
, 
JPEGCOLORMODE_RAW
);

326 
	`C›yFõld
(
TIFFTAG_FILLORDER
, 
sh‹tv
);

327 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_TOPLEFT
);

328 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 3);

329 
	`C›yFõld
(
TIFFTAG_XRESOLUTION
, 
Êﬂtv
);

330 
	`C›yFõld
(
TIFFTAG_YRESOLUTION
, 
Êﬂtv
);

331 
	`C›yFõld
(
TIFFTAG_RESOLUTIONUNIT
, 
sh‹tv
);

332 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

333 { 
buf
[2048];

334 *
˝
 = 
	`°ºchr
(
	`TIFFFûeName
(
ö
), '/');

335 
	`•rötf
(
buf
, "YCbC∏c⁄vîsi⁄ o‡%s", 
˝
 ? cp+1 : 
	`TIFFFûeName
(
ö
));

336 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEDESCRIPTION
, 
buf
);

338 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SOFTWARE
, 
	`TIFFGëVîsi⁄
());

339 
	`C›yFõld
(
TIFFTAG_DOCUMENTNAME
, 
°rögv
);

341 
	`TIFFSëFõld
(
out
, 
TIFFTAG_REFERENCEBLACKWHITE
, 
ªfBœckWhôe
);

342 
	`TIFFSëFõld
(
out
, 
TIFFTAG_YCBCRSUBSAMPLING
,

343 
h‹izSubSam∂ög
, 
vîtSubSam∂ög
);

344 
	`TIFFSëFõld
(
out
, 
TIFFTAG_YCBCRPOSITIONING
, 
YCBCRPOSITION_CENTERED
);

345 
	`TIFFSëFõld
(
out
, 
TIFFTAG_YCBCRCOEFFICIENTS
, 
ycb¸C€ffs
);

346 
row•î°rù
 = 
	`TIFFDeÁu…SåùSize
(
out
,Ñowsperstrip);

347 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

349 
ªsu…
 = 
	`cvtRa°î
(
out
, 
ø°î
, 
width
, 
height
);

350 
	`_TIFF‰ì
(
ø°î
);

351  
ªsu…
;

352 
	}
}

354 * 
	g°uff
[] = {

366 
NULL


370 
	$ußge
(
code
)

372 
buf
[
BUFSIZ
];

373 
i
;

375 
	`£tbuf
(
°dîr
, 
buf
);

377 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

378 
i
 = 0; 
°uff
[i] !
NULL
; i++)

379 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

380 
	`exô
(
code
);

381 
	}
}

	@tools/sgi2tiff.c

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<gl/image.h
>

31 
	~<˘y≥.h
>

33 
	~"tiffio.h
"

35 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

36 
	#°∫eq
(
a
,
b
,
n
Ë(
	`°∫cmp
◊,b,nË=0)

	)

38 
	gc⁄fig
 = 
PLANARCONFIG_CONTIG
;

39 
uöt16
 
	gcom¥essi⁄
 = 
COMPRESSION_PACKBITS
;

40 
uöt16
 
	g¥edi˘‹
 = 0;

41 
uöt16
 
	gfûl‹dî
 = 0;

42 
uöt32
 
	grow•î°rù
 = (uint32) -1;

43 
	gj≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

44 
	gquÆôy
 = 75;

45 
uöt16
 
	gphŸomëric
;

47 
ußge
();

48 
˝C⁄tig
(
IMAGE
*, 
TIFF
*);

49 
˝Sï¨©e
(
IMAGE
*, 
TIFF
*);

50 
¥o˚ssCom¥essO±i⁄s
(*);

53 
IMAGE
* 
i›í
(const *, const *);

54 
i˛o£
(
IMAGE
*);

55 
gërow
(
IMAGE
*, *, , );

58 
	$maö
(
¨gc
, * 
¨gv
[])

60 
IMAGE
 *
ö
;

61 
TIFF
 *
out
;

62 
c
;

63 
›töd
;

64 * 
›èrg
;

66 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:p:r:")) != -1)

67 
c
) {

69 i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

70 
	`ußge
();

73 i‡(
	`°ªq
(
›èrg
, "lsb2msb"))

74 
fûl‹dî
 = 
FILLORDER_LSB2MSB
;

75 i‡(
	`°ªq
(
›èrg
, "msb2lsb"))

76 
fûl‹dî
 = 
FILLORDER_MSB2LSB
;

78 
	`ußge
();

81 i‡(
	`°ªq
(
›èrg
, "separate"))

82 
c⁄fig
 = 
PLANARCONFIG_SEPARATE
;

83 i‡(
	`°ªq
(
›èrg
, "contig"))

84 
c⁄fig
 = 
PLANARCONFIG_CONTIG
;

86 
	`ußge
();

89 
row•î°rù
 = 
	`©oi
(
›èrg
);

92 
	`ußge
();

95 i‡(
¨gc
 - 
›töd
 != 2)

96 
	`ußge
();

97 
ö
 = 
	`i›í
(
¨gv
[
›töd
], "r");

98 i‡(
ö
 =
NULL
)

100 
out
 = 
	`TIFFO≥n
(
¨gv
[
›töd
+1], "w");

101 i‡(
out
 =
NULL
)

103 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, (
uöt32
Ë
ö
->
xsize
);

104 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, (
uöt32
Ë
ö
->
ysize
);

105 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 8);

106 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

107 i‡(
ö
->
zsize
 == 1)

108 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

110 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

111 
com¥essi⁄
) {

112 
COMPRESSION_JPEG
:

113 i‡(
phŸomëric
 =
PHOTOMETRIC_RGB
 && 
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
)

114 
phŸomëric
 = 
PHOTOMETRIC_YCBCR
;

115 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGQUALITY
, 
quÆôy
);

116 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGCOLORMODE
, 
j≥gcﬁ‹mode
);

118 
COMPRESSION_LZW
:

119 
COMPRESSION_DEFLATE
:

120 i‡(
¥edi˘‹
 != 0)

121 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

124 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric
);

125 i‡(
fûl‹dî
 != 0)

126 
	`TIFFSëFõld
(
out
, 
TIFFTAG_FILLORDER
, 
fûl‹dî
);

127 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_TOPLEFT
);

128 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 
ö
->
zsize
);

129 i‡(
ö
->
zsize
 > 3) {

130 
uöt16
 
v
[1];

131 
v
[0] = 
EXTRASAMPLE_UNASSALPHA
;

132 
	`TIFFSëFõld
(
out
, 
TIFFTAG_EXTRASAMPLES
, 1, 
v
);

134 
	`TIFFSëFõld
(
out
, 
TIFFTAG_MINSAMPLEVALUE
, (
uöt16
Ë
ö
->
mö
);

135 
	`TIFFSëFõld
(
out
, 
TIFFTAG_MAXSAMPLEVALUE
, (
uöt16
Ë
ö
->
max
);

136 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
c⁄fig
);

137 i‡(
c⁄fig
 !
PLANARCONFIG_SEPARATE
)

138 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
,

139 
	`TIFFDeÁu…SåùSize
(
out
, 
row•î°rù
));

141 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
, 1L);

142 i‡(
ö
->
«me
[0] != '\0')

143 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEDESCRIPTION
, 
ö
->
«me
);

144 i‡(
c⁄fig
 =
PLANARCONFIG_CONTIG
)

145 
	`˝C⁄tig
(
ö
, 
out
);

147 
	`˝Sï¨©e
(
ö
, 
out
);

148 (Ë
	`i˛o£
(
ö
);

149 (Ë
	`TIFFClo£
(
out
);

151 
	}
}

154 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

156 i‡(
	`°ªq
(
›t
, "none"))

157 
com¥essi⁄
 = 
COMPRESSION_NONE
;

158 i‡(
	`°ªq
(
›t
, "packbits"))

159 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

160 i‡(
	`°∫eq
(
›t
, "jpeg", 4)) {

161 * 
˝
 = 
	`°rchr
(
›t
, ':');

163 
defcom¥essi⁄
 = 
COMPRESSION_JPEG
;

164  
˝
 )

166 i‡(
	`isdigô
(()
˝
[1]))

167 
quÆôy
 = 
	`©oi
(
˝
+1);

168 i‡(
˝
[1] == 'r' )

169 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

171 
	`ußge
();

173 
˝
 = 
	`°rchr
(cp+1,':');

175 } i‡(
	`°∫eq
(
›t
, "lzw", 3)) {

176 * 
˝
 = 
	`°rchr
(
›t
, ':');

177 i‡(
˝
)

178 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

179 
com¥essi⁄
 = 
COMPRESSION_LZW
;

180 } i‡(
	`°∫eq
(
›t
, "zip", 3)) {

181 * 
˝
 = 
	`°rchr
(
›t
, ':');

182 i‡(
˝
)

183 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

184 
com¥essi⁄
 = 
COMPRESSION_DEFLATE
;

188 
	}
}

191 
	$˝C⁄tig
(
IMAGE
* 
ö
, 
TIFF
* 
out
)

193 
td©a_t
 
buf
 = 
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
out
));

194 *
r
 = 
NULL
;

195 
x
, 
y
;

197 i‡(
ö
->
zsize
 == 3) {

198 *
g
, *
b
;

200 
r
 = (*)
	`_TIFFmÆloc
(3 * 
ö
->
xsize
 *  ());

201 
g
 = 
r
 + 
ö
->
xsize
;

202 
b
 = 
g
 + 
ö
->
xsize
;

203 
y
 = 
ö
->
ysize
-1; y >= 0; y--) {

204 
uöt8
* 
µ
 = (uöt8*Ë
buf
;

206 
	`gërow
(
ö
, 
r
, 
y
, 0);

207 
	`gërow
(
ö
, 
g
, 
y
, 1);

208 
	`gërow
(
ö
, 
b
, 
y
, 2);

209 
x
 = 0; x < 
ö
->
xsize
; x++) {

210 
µ
[0] = 
r
[
x
];

211 
µ
[1] = 
g
[
x
];

212 
µ
[2] = 
b
[
x
];

213 
µ
 += 3;

215 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
buf
, 
ö
->
ysize
-
y
-1, 0) < 0)

216 
bad
;

218 } i‡(
ö
->
zsize
 == 4) {

219 *
g
, *
b
, *
a
;

221 
r
 = (*)
	`_TIFFmÆloc
(4 * 
ö
->
xsize
 *  ());

222 
g
 = 
r
 + 
ö
->
xsize
;

223 
b
 = 
g
 + 
ö
->
xsize
;

224 
a
 = 
b
 + 
ö
->
xsize
;

225 
y
 = 
ö
->
ysize
-1; y >= 0; y--) {

226 
uöt8
* 
µ
 = (uöt8*Ë
buf
;

228 
	`gërow
(
ö
, 
r
, 
y
, 0);

229 
	`gërow
(
ö
, 
g
, 
y
, 1);

230 
	`gërow
(
ö
, 
b
, 
y
, 2);

231 
	`gërow
(
ö
, 
a
, 
y
, 3);

232 
x
 = 0; x < 
ö
->
xsize
; x++) {

233 
µ
[0] = 
r
[
x
];

234 
µ
[1] = 
g
[
x
];

235 
µ
[2] = 
b
[
x
];

236 
µ
[3] = 
a
[
x
];

237 
µ
 += 4;

239 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
buf
, 
ö
->
ysize
-
y
-1, 0) < 0)

240 
bad
;

243 
uöt8
* 
µ
 = (uöt8*Ë
buf
;

245 
r
 = (*)
	`_TIFFmÆloc
(
ö
->
xsize
 *  ());

246 
y
 = 
ö
->
ysize
-1; y >= 0; y--) {

247 
	`gërow
(
ö
, 
r
, 
y
, 0);

248 
x
 = 
ö
->
xsize
-1; x >= 0; x--)

249 
µ
[
x
] = 
r
[x];

250 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
buf
, 
ö
->
ysize
-
y
-1, 0) < 0)

251 
bad
;

254 i‡(
r
)

255 
	`_TIFF‰ì
(
r
);

256 
	`_TIFF‰ì
(
buf
);

258 
bad
:

259 i‡(
r
)

260 
	`_TIFF‰ì
(
r
);

261 
	`_TIFF‰ì
(
buf
);

263 
	}
}

266 
	$˝Sï¨©e
(
IMAGE
* 
ö
, 
TIFF
* 
out
)

268 
td©a_t
 
buf
 = 
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
out
));

269 *
r
 = (*)
	`_TIFFmÆloc
(
ö
->
xsize
 *  ());

270 
uöt8
* 
µ
 = (uöt8*Ë
buf
;

271 
x
, 
y
, 
z
;

273 
z
 = 0; z < 
ö
->
zsize
; z++) {

274 
y
 = 
ö
->
ysize
-1; y >= 0; y--) {

275 
	`gërow
(
ö
, 
r
, 
y
, 
z
);

276 
x
 = 0; x < 
ö
->
xsize
; x++)

277 
µ
[
x
] = 
r
[x];

278 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
buf
, 
ö
->
ysize
-
y
-1, 
z
) < 0)

279 
bad
;

282 
	`_TIFF‰ì
(
r
);

283 
	`_TIFF‰ì
(
buf
);

285 
bad
:

286 
	`_TIFF‰ì
(
r
);

287 
	`_TIFF‰ì
(
buf
);

289 
	}
}

291 * 
	g°uff
[] = {

315 
NULL


319 
	$ußge
()

321 
buf
[
BUFSIZ
];

322 
i
;

324 
	`£tbuf
(
°dîr
, 
buf
);

325 
i
 = 0; 
°uff
[i] !
NULL
; i++)

326 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

327 
	`exô
(-1);

328 
	}
}

	@tools/sgisv.c

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

31 
	~<gl.h
>

32 
	~<˘y≥.h
>

34 
	~"tiffio.h
"

37 
	tuöt32
;

39 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

40 
	#°∫eq
(
a
,
b
,
n
Ë(
	`°∫cmp
◊,b,nË=0)

	)

42 
uöt32
 
	grow•î°rù
 = (uint32) -1;

43 
uöt16
 
	gcom¥essi⁄
 = 
COMPRESSION_PACKBITS
;

44 
uöt16
 
	gc⁄fig
 = 
PLANARCONFIG_CONTIG
;

45 
uöt16
 
	g¥edi˘‹
 = 0;

46 
	gxmaxs¸ìn
;

47 
	gymaxs¸ìn
;

48 
uöt16
 
	gphŸomëric
 = 
PHOTOMETRIC_RGB
;

49 
	gj≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

50 
	gquÆôy
 = 75;

52 
ußge
();

53 
tiffsv
(*, , , , );

56 
	$maö
(
¨gc
, * 
¨gv
[])

58 
c
;

59 
›töd
;

60 * 
›èrg
;

62 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:p:r:")) != -1)

63 
c
) {

65 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

68 i‡(
	`°ªq
(
›èrg
, "none"))

69 
com¥essi⁄
 = 
COMPRESSION_NONE
;

70 i‡(
	`°ªq
(
›èrg
, "packbits"))

71 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

72 i‡(
	`°∫eq
(
›èrg
, "jpeg", 4)) {

73 * 
˝
 = 
	`°rchr
(
›èrg
, ':');

74 i‡(
˝
 && 
	`isdigô
(cp[1]))

75 
quÆôy
 = 
	`©oi
(
˝
+1);

76 i‡(
˝
 && 
	`°rchr
(cp, 'r'))

77 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

78 
com¥essi⁄
 = 
COMPRESSION_JPEG
;

79 } i‡(
	`°∫eq
(
›èrg
, "lzw", 3)) {

80 * 
˝
 = 
	`°rchr
(
›èrg
, ':');

81 i‡(
˝
)

82 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

83 
com¥essi⁄
 = 
COMPRESSION_LZW
;

85 
	`ußge
();

88 i‡(
	`°ªq
(
›èrg
, "separate"))

89 
c⁄fig
 = 
PLANARCONFIG_SEPARATE
;

90 i‡(
	`°ªq
(
›èrg
, "contig"))

91 
c⁄fig
 = 
PLANARCONFIG_CONTIG
;

93 
	`ußge
();

96 
row•î°rù
 = 
	`©oi
(
›èrg
);

99 
	`ußge
();

102 i‡(
¨gc
 - 
›töd
 != 1 &&árgc - optind != 5)

103 
	`ußge
();

104 
xmaxs¸ìn
 = 
	`gëgdesc
(
GD_XPMAX
)-1;

105 
ymaxs¸ìn
 = 
	`gëgdesc
(
GD_YPMAX
)-1;

106 
	`f‹eground
();

107 
	`n›‹t
();

108 
	`wö›í
("tiffsv");

109 i‡(
¨gc
 - 
›töd
 == 5)

110 
	`tiffsv
(
¨gv
[
›töd
],

111 
	`©oi
(
¨gv
[
›töd
+1]),átoi(argv[optind+2]),

112 
	`©oi
(
¨gv
[
›töd
+3]),átoi(argv[optind+4]));

114 
	`tiffsv
(
¨gv
[
›töd
], 0, 
xmaxs¸ìn
, 0, 
ymaxs¸ìn
);

116 
	}
}

118 * 
	g°uff
[] = {

138 
NULL


142 
	$ußge
()

144 
buf
[
BUFSIZ
];

145 
i
;

147 
	`£tbuf
(
°dîr
, 
buf
);

148 
i
 = 0; 
°uff
[i] !
NULL
; i++)

149 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

150 
	`exô
(-1);

151 
	}
}

154 
	$svRGBSï¨©e
(
TIFF
* 
tif
, 
uöt32
* 
ss
, 
xsize
, 
ysize
)

156 
tsize_t
 
°rùsize
 = 
	`TIFFSåùSize
(
tif
);

157 *
rbuf
 = (*)
	`_TIFFmÆloc
(3*
°rùsize
);

158 *
gbuf
 = 
rbuf
 + 
°rùsize
;

159 *
bbuf
 = 
gbuf
 + 
°rùsize
;

160 
y
;

162 
y
 = 0; y <
ysize
; y +
row•î°rù
) {

163 *
Ω
, *
gp
, *
bp
;

164 
x
;

165 
uöt32
 
n
;

167 
n
 = 
row•î°rù
;

168 i‡(
n
 > 
ysize
-
y
+1)

169 
n
 = 
ysize
-
y
+1;

170 
Ω
 = 
rbuf
; 
gp
 = 
gbuf
; 
bp
 = 
bbuf
;

172 
x
 = 0; x <
xsize
; x++) {

173 
uöt32
 
v
 = 
ss
[
x
];

174 
Ω
[
x
] = 
v
;

175 
gp
[
x
] = 
v
 >> 8;

176 
bp
[
x
] = 
v
 >> 16;

178 
Ω
 +
xsize
+1, 
gp
 +xsize+1, 
bp
 += xsize+1;

179 
ss
 +
xsize
+1;

180 } --
n
);

181 i‡(
	`TIFFWrôeEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if,
y
,0),

182 
rbuf
, 
°rùsize
) < 0)

184 i‡(
	`TIFFWrôeEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if,
y
,1),

185 
gbuf
, 
°rùsize
) < 0)

187 i‡(
	`TIFFWrôeEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if,
y
,2),

188 
bbuf
, 
°rùsize
) < 0)

191 
	`_TIFF‰ì
(
rbuf
);

192 
	}
}

195 
	$svRGBC⁄tig
(
TIFF
* 
tif
, 
uöt32
* 
ss
, 
xsize
, 
ysize
)

197 
x
, 
y
;

198 
tsize_t
 
°rùsize
 = 
	`TIFFSåùSize
(
tif
);

199 *
°rù
 = (*)
	`_TIFFmÆloc
(
°rùsize
);

201 
y
 = 0; y <
ysize
; y +
row•î°rù
) {

202 *
µ
 = 
°rù
;

203 
uöt32
 
n
;

205 
n
 = 
row•î°rù
;

206 i‡(
n
 > 
ysize
-
y
+1)

207 
n
 = 
ysize
-
y
+1;

209 
x
 = 0; x <
xsize
; x++) {

210 
uöt32
 
v
 = 
ss
[
x
];

211 
µ
[0] = 
v
;

212 
µ
[1] = 
v
 >> 8;

213 
µ
[2] = 
v
 >> 16;

214 
µ
 += 3;

216 
ss
 +
xsize
+1;

217 } --
n
);

218 i‡(
	`TIFFWrôeEncodedSåù
(
tif
, 
	`TIFFCompuãSåù
—if,
y
,0),

219 
°rù
, 
°rùsize
) < 0)

222 
	`_TIFF‰ì
(
°rù
);

223 
	}
}

225 #unde‡
RED


226 #unde‡
GREEN


227 #unde‡
BLUE


228 
	#CVT
(
x
Ë(((x)*255)/100)

	)

229 
	#RED
 
	`CVT
(28Ë

	)

230 
	#GREEN
 
	`CVT
(59Ë

	)

231 
	#BLUE
 
	`CVT
(11Ë

	)

234 
	$svGªy
(
TIFF
* 
tif
, 
uöt32
* 
ss
, 
xsize
, 
ysize
)

236 
x
, 
y
;

237 *
buf
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
tif
));

239 
y
 = 0; y <
ysize
; y++) {

240 
x
 = 0; x <
xsize
; x++) {

241 *
˝
 = (*)&
ss
[
x
];

242 
buf
[
x
] = (
RED
*
˝
[3] + 
GREEN
*˝[2] + 
BLUE
*cp[1]) >> 8;

244 i‡(
	`TIFFWrôeSˇ∆öe
(
tif
, 
buf
, (
uöt32
Ë
y
, 0) < 0)

246 
ss
 +
xsize
+1;

248 
	`_TIFF‰ì
(
buf
);

249 
	}
}

251 
	#MIN
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

252 
	#ABS
(
x
Ë((x)<0?-(x):(x))

	)

255 
	$tiffsv
(* 
«me
, 
x1
, 
x2
, 
y1
, 
y2
)

257 
TIFF
 *
tif
;

258 
xsize
, 
ysize
;

259 
x‹g
, 
y‹g
;

260 
uöt32
 *
s¸buf
;

262 
x‹g
 = 
	`MIN
(
x1
,
x2
);

263 
y‹g
 = 
	`MIN
(
y1
,
y2
);

264 i‡(
x‹g
<0)

265 
x‹g
 = 0;

266 i‡(
y‹g
<0)

267 
y‹g
 = 0;

268 
xsize
 = 
	`ABS
(
x2
-
x1
);

269 
ysize
 = 
	`ABS
(
y2
-
y1
);

270 i‡(
x‹g
+
xsize
 > 
xmaxs¸ìn
)

271 
xsize
 = 
xmaxs¸ìn
-
x‹g
;

272 i‡(
y‹g
+
ysize
 > 
ymaxs¸ìn
)

273 
ysize
 = 
ymaxs¸ìn
-
y‹g
;

274 
tif
 = 
	`TIFFO≥n
(
«me
, "w");

275 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, (
uöt32
Ë(
xsize
+1));

276 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, (
uöt32
Ë(
ysize
+1));

277 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, 8);

278 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
,

279 
phŸomëric
 =
PHOTOMETRIC_RGB
 ? 3 : 1);

280 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, 
c⁄fig
);

281 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

282 
com¥essi⁄
) {

283 
COMPRESSION_JPEG
:

284 i‡(
phŸomëric
 =
PHOTOMETRIC_RGB
 && 
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
)

285 
phŸomëric
 = 
PHOTOMETRIC_YCBCR
;

286 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_JPEGQUALITY
, 
quÆôy
);

287 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_JPEGCOLORMODE
, 
j≥gcﬁ‹mode
);

289 
COMPRESSION_LZW
:

290 i‡(
¥edi˘‹
 != 0)

291 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

294 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
phŸomëric
);

295 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_BOTLEFT
);

296 
row•î°rù
 = 
	`TIFFDeÁu…SåùSize
(
tif
,Ñowsperstrip);

297 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

298 
s¸buf
 = (
uöt32
 *)
	`_TIFFmÆloc
((
xsize
+1)*(
ysize
+1)* (uint32));

299 
	`ªaddi•œy
(
x‹g
, 
y‹g
, x‹g+
xsize
, y‹g+
ysize
, 
s¸buf
, 
RD_FREEZE
);

300 i‡(
phŸomëric
 =
PHOTOMETRIC_RGB
) {

301 i‡(
c⁄fig
 =
PLANARCONFIG_SEPARATE
)

302 
	`svRGBSï¨©e
(
tif
, 
s¸buf
, 
xsize
, 
ysize
);

304 
	`svRGBC⁄tig
(
tif
, 
s¸buf
, 
xsize
, 
ysize
);

306 
	`svGªy
(
tif
, 
s¸buf
, 
xsize
, 
ysize
);

307 (Ë
	`TIFFClo£
(
tif
);

308 
	`_TIFF‰ì
((*)
s¸buf
);

309 
	}
}

	@tools/thumbnail.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<m©h.h
>

34 #ifde‡
HAVE_UNISTD_H


35 
	~<uni°d.h
>

38 #ifde‡
NEED_LIBPORT


39 
	~"libp‹t.h
"

42 
	~"tiffio.h
"

44 #i‚de‡
HAVE_GETOPT


45 
gë›t
(, **, *);

48 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

50 #i‚de‡
TIFFhowm™y8


51 
	#TIFFhowm™y8
(
x
Ë(((x)&0x07)?((
uöt32
)(x)>>3)+1:(uöt32)(x)>>3)

	)

55 
	mEXP50
,

56 
	mEXP60
,

57 
	mEXP70
,

58 
	mEXP80
,

59 
	mEXP90
,

60 
	mEXP
,

61 
	mLINEAR


62 } 
	tC⁄åa°
;

64 
uöt32
 
	gäw
 = 216;

65 
uöt32
 
	gäh
 = 274;

66 
C⁄åa°
 
	gc⁄åa°
 = 
LINEAR
;

67 
uöt8
* 
	gthumb«û
;

69 
˝IFD
(
TIFF
*, TIFF*);

70 
gíî©eThumb«û
(
TIFF
*, TIFF*);

71 
öôSˇÀ
();

72 
ußge
();

74 * 
›èrg
;

75 
›töd
;

78 
	$maö
(
¨gc
, * 
¨gv
[])

80 
TIFF
* 
ö
;

81 
TIFF
* 
out
;

82 
c
;

84 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "w:h:c:")) != -1) {

85 
c
) {

86 'w': 
äw
 = 
	`°πoul
(
›èrg
, 
NULL
, 0); ;

87 'h': 
äh
 = 
	`°πoul
(
›èrg
, 
NULL
, 0); ;

88 'c': 
c⁄åa°
 = 
	`°ªq
(
›èrg
, "exp50"Ë? 
EXP50
 :

89 
	`°ªq
(
›èrg
, "exp60"Ë? 
EXP60
 :

90 
	`°ªq
(
›èrg
, "exp70"Ë? 
EXP70
 :

91 
	`°ªq
(
›èrg
, "exp80"Ë? 
EXP80
 :

92 
	`°ªq
(
›èrg
, "exp90"Ë? 
EXP90
 :

93 
	`°ªq
(
›èrg
, "exp"Ë? 
EXP
 :

94 
	`°ªq
(
›èrg
, "löór")? 
LINEAR
 :

95 
EXP
;

97 : 
	`ußge
();

100 i‡(
¨gc
-
›töd
 != 2)

101 
	`ußge
();

103 
out
 = 
	`TIFFO≥n
(
¨gv
[
›töd
+1], "w");

104 i‡(
out
 =
NULL
)

106 
ö
 = 
	`TIFFO≥n
(
¨gv
[
›töd
], "r");

107 if–
ö
 =
NULL
 )

110 
thumb«û
 = (
uöt8
*Ë
	`_TIFFmÆloc
(
äw
 * 
äh
);

111 i‡(!
thumb«û
) {

112 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

117 i‡(
ö
 !
NULL
) {

118 
	`öôSˇÀ
();

120 i‡(!
	`gíî©eThumb«û
(
ö
, 
out
))

121 
bad
;

122 i‡(!
	`˝IFD
(
ö
, 
out
Ë|| !
	`TIFFWrôeDúe˘‹y
(out))

123 
bad
;

124 } 
	`TIFFRódDúe˘‹y
(
ö
));

125 (Ë
	`TIFFClo£
(
ö
);

127 (Ë
	`TIFFClo£
(
out
);

129 
bad
:

130 (Ë
	`TIFFClo£
(
out
);

132 
	}
}

134 
	#C›yFõld
(
èg
, 
v
) \

135 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v
)Ë
	`TIFFSëFõld
(
out
,Åag, v)

	)

136 
	#C›yFõld2
(
èg
, 
v1
, 
v2
) \

137 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2)

	)

138 
	#C›yFõld3
(
èg
, 
v1
, 
v2
, 
v3
) \

139 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3)

	)

140 
	#C›yFõld4
(
èg
, 
v1
, 
v2
, 
v3
, 
v4
) \

141 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
, &
v4
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3, v4)

	)

144 
	$˝Tag
(
TIFF
* 
ö
, TIFF* 
out
, 
uöt16
 
èg
, uöt16 
cou¡
, 
TIFFD©aTy≥
 
ty≥
)

146 
ty≥
) {

147 
TIFF_SHORT
:

148 i‡(
cou¡
 == 1) {

149 
uöt16
 
sh‹tv
;

150 
	`C›yFõld
(
èg
, 
sh‹tv
);

151 } i‡(
cou¡
 == 2) {

152 
uöt16
 
sh‹tv1
, 
sh‹tv2
;

153 
	`C›yFõld2
(
èg
, 
sh‹tv1
, 
sh‹tv2
);

154 } i‡(
cou¡
 == 4) {

155 
uöt16
 *
å
, *
tg
, *
tb
, *
è
;

156 
	`C›yFõld4
(
èg
, 
å
, 
tg
, 
tb
, 
è
);

157 } i‡(
cou¡
 =(
uöt16
) -1) {

158 
uöt16
 
sh‹tv1
;

159 
uöt16
* 
sh‹èv
;

160 
	`C›yFõld2
(
èg
, 
sh‹tv1
, 
sh‹èv
);

163 
TIFF_LONG
:

164 { 
uöt32
 
l⁄gv
;

165 
	`C›yFõld
(
èg
, 
l⁄gv
);

168 
TIFF_LONG8
:

169 { 
uöt64
 
l⁄gv8
;

170 
	`C›yFõld
(
èg
, 
l⁄gv8
);

173 
TIFF_SLONG8
:

174 { 
öt64
 
l⁄gv8
;

175 
	`C›yFõld
(
èg
, 
l⁄gv8
);

178 
TIFF_RATIONAL
:

179 i‡(
cou¡
 == 1) {

180 
Êﬂtv
;

181 
	`C›yFõld
(
èg
, 
Êﬂtv
);

182 } i‡(
cou¡
 =(
uöt16
) -1) {

183 * 
Êﬂèv
;

184 
	`C›yFõld
(
èg
, 
Êﬂèv
);

187 
TIFF_ASCII
:

188 { * 
°rögv
;

189 
	`C›yFõld
(
èg
, 
°rögv
);

192 
TIFF_DOUBLE
:

193 i‡(
cou¡
 == 1) {

194 
doubÀv
;

195 
	`C›yFõld
(
èg
, 
doubÀv
);

196 } i‡(
cou¡
 =(
uöt16
) -1) {

197 * 
doubÀav
;

198 
	`C›yFõld
(
èg
, 
doubÀav
);

201 
TIFF_IFD8
:

202 { 
toff_t
 
ifd8
;

203 
	`C›yFõld
(
èg
, 
ifd8
);

206 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

208 
èg
, 
ty≥
);

210 
	}
}

212 #unde‡
C›yFõld4


213 #unde‡
C›yFõld3


214 #unde‡
C›yFõld2


215 #unde‡
C›yFõld


217 
	s˝Tag
 {

218 
uöt16
 
	mèg
;

219 
uöt16
 
	mcou¡
;

220 
TIFFD©aTy≥
 
	mty≥
;

221 } 
	gègs
[] = {

222 { 
TIFFTAG_IMAGEWIDTH
, 1, 
TIFF_LONG
 },

223 { 
TIFFTAG_IMAGELENGTH
, 1, 
TIFF_LONG
 },

224 { 
TIFFTAG_BITSPERSAMPLE
, 1, 
TIFF_SHORT
 },

225 { 
TIFFTAG_COMPRESSION
, 1, 
TIFF_SHORT
 },

226 { 
TIFFTAG_FILLORDER
, 1, 
TIFF_SHORT
 },

227 { 
TIFFTAG_SAMPLESPERPIXEL
, 1, 
TIFF_SHORT
 },

228 { 
TIFFTAG_ROWSPERSTRIP
, 1, 
TIFF_LONG
 },

229 { 
TIFFTAG_PLANARCONFIG
, 1, 
TIFF_SHORT
 },

230 { 
TIFFTAG_GROUP3OPTIONS
, 1, 
TIFF_LONG
 },

231 { 
TIFFTAG_SUBFILETYPE
, 1, 
TIFF_LONG
 },

232 { 
TIFFTAG_PHOTOMETRIC
, 1, 
TIFF_SHORT
 },

233 { 
TIFFTAG_THRESHHOLDING
, 1, 
TIFF_SHORT
 },

234 { 
TIFFTAG_DOCUMENTNAME
, 1, 
TIFF_ASCII
 },

235 { 
TIFFTAG_IMAGEDESCRIPTION
, 1, 
TIFF_ASCII
 },

236 { 
TIFFTAG_MAKE
, 1, 
TIFF_ASCII
 },

237 { 
TIFFTAG_MODEL
, 1, 
TIFF_ASCII
 },

238 { 
TIFFTAG_ORIENTATION
, 1, 
TIFF_SHORT
 },

239 { 
TIFFTAG_MINSAMPLEVALUE
, 1, 
TIFF_SHORT
 },

240 { 
TIFFTAG_MAXSAMPLEVALUE
, 1, 
TIFF_SHORT
 },

241 { 
TIFFTAG_XRESOLUTION
, 1, 
TIFF_RATIONAL
 },

242 { 
TIFFTAG_YRESOLUTION
, 1, 
TIFF_RATIONAL
 },

243 { 
TIFFTAG_PAGENAME
, 1, 
TIFF_ASCII
 },

244 { 
TIFFTAG_XPOSITION
, 1, 
TIFF_RATIONAL
 },

245 { 
TIFFTAG_YPOSITION
, 1, 
TIFF_RATIONAL
 },

246 { 
TIFFTAG_GROUP4OPTIONS
, 1, 
TIFF_LONG
 },

247 { 
TIFFTAG_RESOLUTIONUNIT
, 1, 
TIFF_SHORT
 },

248 { 
TIFFTAG_PAGENUMBER
, 2, 
TIFF_SHORT
 },

249 { 
TIFFTAG_SOFTWARE
, 1, 
TIFF_ASCII
 },

250 { 
TIFFTAG_DATETIME
, 1, 
TIFF_ASCII
 },

251 { 
TIFFTAG_ARTIST
, 1, 
TIFF_ASCII
 },

252 { 
TIFFTAG_HOSTCOMPUTER
, 1, 
TIFF_ASCII
 },

253 { 
TIFFTAG_WHITEPOINT
, 2, 
TIFF_RATIONAL
 },

254 { 
TIFFTAG_PRIMARYCHROMATICITIES
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

255 { 
TIFFTAG_HALFTONEHINTS
, 2, 
TIFF_SHORT
 },

256 { 
TIFFTAG_BADFAXLINES
, 1, 
TIFF_LONG
 },

257 { 
TIFFTAG_CLEANFAXDATA
, 1, 
TIFF_SHORT
 },

258 { 
TIFFTAG_CONSECUTIVEBADFAXLINES
, 1, 
TIFF_LONG
 },

259 { 
TIFFTAG_INKSET
, 1, 
TIFF_SHORT
 },

260 { 
TIFFTAG_INKNAMES
, 1, 
TIFF_ASCII
 },

261 { 
TIFFTAG_DOTRANGE
, 2, 
TIFF_SHORT
 },

262 { 
TIFFTAG_TARGETPRINTER
, 1, 
TIFF_ASCII
 },

263 { 
TIFFTAG_SAMPLEFORMAT
, 1, 
TIFF_SHORT
 },

264 { 
TIFFTAG_YCBCRCOEFFICIENTS
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

265 { 
TIFFTAG_YCBCRSUBSAMPLING
, 2, 
TIFF_SHORT
 },

266 { 
TIFFTAG_YCBCRPOSITIONING
, 1, 
TIFF_SHORT
 },

267 { 
TIFFTAG_REFERENCEBLACKWHITE
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

268 { 
TIFFTAG_EXTRASAMPLES
, (
uöt16
Ë-1, 
TIFF_SHORT
 },

270 
	#NTAGS
 ( (
ègs
Ë/  (ègs[0]))

	)

273 
	$˝Tags
(
TIFF
* 
ö
, TIFF* 
out
)

275 
˝Tag
 *
p
;

276 
p
 = 
ègs
;Ö < &ègs[
NTAGS
];Ö++)

277 
	`˝Tag
(
ö
, 
out
, 
p
->
èg
,Ö->
cou¡
,Ö->
ty≥
);

278 
	}
}

279 #unde‡
NTAGS


282 
	$˝Såùs
(
TIFF
* 
ö
, TIFF* 
out
)

284 
tsize_t
 
bufsize
 = 
	`TIFFSåùSize
(
ö
);

285 *
buf
 = (*)
	`_TIFFmÆloc
(
bufsize
);

287 i‡(
buf
) {

288 
t°rù_t
 
s
, 
ns
 = 
	`TIFFNumbîOfSåùs
(
ö
);

289 
uöt64
 *
byãcou¡s
;

291 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_STRIPBYTECOUNTS
, &
byãcou¡s
);

292 
s
 = 0; s < 
ns
; s++) {

293 i‡(
byãcou¡s
[
s
] > (
uöt64
Ë
bufsize
) {

294 
buf
 = (*)
	`_TIFFªÆloc
(buf, (
tmsize_t
)
byãcou¡s
[
s
]);

295 i‡(!
buf
)

296 
bad
;

297 
bufsize
 = (
tmsize_t
)
byãcou¡s
[
s
];

299 i‡(
	`TIFFRódRawSåù
(
ö
, 
s
, 
buf
, (
tmsize_t
)
byãcou¡s
[s]) < 0 ||

300 
	`TIFFWrôeRawSåù
(
out
, 
s
, 
buf
, (
tmsize_t
)
byãcou¡s
[s]) < 0) {

301 
	`_TIFF‰ì
(
buf
);

305 
	`_TIFF‰ì
(
buf
);

309 
bad
:

310 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

313 
	}
}

316 
	$˝Tûes
(
TIFF
* 
ö
, TIFF* 
out
)

318 
tsize_t
 
bufsize
 = 
	`TIFFTûeSize
(
ö
);

319 *
buf
 = (*)
	`_TIFFmÆloc
(
bufsize
);

321 i‡(
buf
) {

322 
âûe_t
 
t
, 
¡
 = 
	`TIFFNumbîOfTûes
(
ö
);

323 
uöt64
 *
byãcou¡s
;

325 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILEBYTECOUNTS
, &
byãcou¡s
);

326 
t
 = 0;Å < 
¡
;Å++) {

327 i‡(
byãcou¡s
[
t
] > (
uöt64
Ë
bufsize
) {

328 
buf
 = (*)
	`_TIFFªÆloc
(buf, (
tmsize_t
)
byãcou¡s
[
t
]);

329 i‡(!
buf
)

330 
bad
;

331 
bufsize
 = (
tmsize_t
)
byãcou¡s
[
t
];

333 i‡(
	`TIFFRódRawTûe
(
ö
, 
t
, 
buf
, (
tmsize_t
)
byãcou¡s
[t]) < 0 ||

334 
	`TIFFWrôeRawTûe
(
out
, 
t
, 
buf
, (
tmsize_t
)
byãcou¡s
[t]) < 0) {

335 
	`_TIFF‰ì
(
buf
);

339 
	`_TIFF‰ì
(
buf
);

343 
bad
:

344 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

347 
	}
}

350 
	$˝IFD
(
TIFF
* 
ö
, TIFF* 
out
)

352 
	`˝Tags
(
ö
, 
out
);

353 i‡(
	`TIFFIsTûed
(
ö
)) {

354 i‡(!
	`˝Tûes
(
ö
, 
out
))

357 i‡(!
	`˝Såùs
(
ö
, 
out
))

361 
	}
}

363 
uöt16
 
	gphŸomëric
;

364 
uöt16
 
	gfûãrWidth
;

365 
uöt32
 
	g°ïSrcWidth
;

366 
uöt32
 
	g°ïD°Width
;

367 
uöt8
* 
	g§c0
;

368 
uöt8
* 
	g§c1
;

369 
uöt8
* 
	g§c2
;

370 
uöt32
* 
	growoff
;

371 
uöt8
 
	gcm≠
[256];

372 
uöt8
 
	gbôs
[256];

375 
	$£tupBôsTabÀs
()

377 
i
;

378 
i
 = 0; i < 256; i++) {

379 
n
 = 0;

380 i‡(
i
&0x01Ë
n
++;

381 i‡(
i
&0x02Ë
n
++;

382 i‡(
i
&0x04Ë
n
++;

383 i‡(
i
&0x08Ë
n
++;

384 i‡(
i
&0x10Ë
n
++;

385 i‡(
i
&0x20Ë
n
++;

386 i‡(
i
&0x40Ë
n
++;

387 i‡(
i
&0x80Ë
n
++;

388 
bôs
[
i
] = 
n
;

390 
	}
}

392 
	$˛amp
(
v
, 
low
, 
high
)

393 {  (
v
 < 
low
 ?Üow : v > 
high
 ? high : ()v); 
	}
}

395 #i‚de‡
M_E


396 
	#M_E
 2.7182818284590452354

	)

400 
	$expFûl
(
p˘
[], 
uöt32
 
p
, uöt32 
n
)

402 
uöt32
 
i
;

403 
uöt32
 
c
 = (
p
 * 
n
) / 100;

404 
i
 = 1; i < 
c
; i++)

405 
p˘
[
i
] = (Ë(1-
	`exp
(i/(()(
n
-1)))/ 
M_E
);

406 ; 
i
 < 
n
; i++)

407 
p˘
[
i
] = 0.;

408 
	}
}

411 
	$£tupCm≠
()

413 
p˘
[256];

414 
uöt32
 
i
;

415 
p˘
[0] = 1;

416 
c⁄åa°
) {

417 
EXP50
: 
	`expFûl
(
p˘
, 50, 256); ;

418 
EXP60
: 
	`expFûl
(
p˘
, 60, 256); ;

419 
EXP70
: 
	`expFûl
(
p˘
, 70, 256); ;

420 
EXP80
: 
	`expFûl
(
p˘
, 80, 256); ;

421 
EXP90
: 
	`expFûl
(
p˘
, 90, 256); ;

422 
EXP
: 
	`expFûl
(
p˘
, 100, 256); ;

423 
LINEAR
:

424 
i
 = 1; i < 256; i++)

425 
p˘
[
i
] = 1-(()i)/(256-1);

428 
phŸomëric
) {

429 
PHOTOMETRIC_MINISWHITE
:

430 
i
 = 0; i < 256; i++)

431 
cm≠
[
i
] = 
	`˛amp
(255*
p˘
[(256-1)-i], 0, 255);

433 
PHOTOMETRIC_MINISBLACK
:

434 
i
 = 0; i < 256; i++)

435 
cm≠
[
i
] = 
	`˛amp
(255*
p˘
[i], 0, 255);

438 
	}
}

441 
	$öôSˇÀ
()

443 
§c0
 = (
uöt8
*Ë
	`_TIFFmÆloc
( (uöt8Ë* 
äw
);

444 
§c1
 = (
uöt8
*Ë
	`_TIFFmÆloc
( (uöt8Ë* 
äw
);

445 
§c2
 = (
uöt8
*Ë
	`_TIFFmÆloc
( (uöt8Ë* 
äw
);

446 
rowoff
 = (
uöt32
*Ë
	`_TIFFmÆloc
( (uöt32Ë* 
äw
);

447 
fûãrWidth
 = 0;

448 
°ïD°Width
 = 
°ïSrcWidth
 = 0;

449 
	`£tupBôsTabÀs
();

450 
	}
}

457 
	$£tupSãpTabÀs
(
uöt32
 
sw
)

459 i‡(
°ïSrcWidth
 !
sw
 || 
°ïD°Width
 !
äw
) {

460 
°ï
 = 
sw
;

461 
limô
 = 
äw
;

462 
îr
 = 0;

463 
uöt32
 
sx
 = 0;

464 
uöt32
 
x
;

465 
fw
;

466 
uöt8
 
b
;

467 
x
 = 0; x < 
äw
; x++) {

468 
uöt32
 
sx0
 = 
sx
;

469 
îr
 +
°ï
;

470 
îr
 >
limô
) {

471 
îr
 -
limô
;

472 
sx
++;

474 
rowoff
[
x
] = 
sx0
 >> 3;

475 
fw
 = 
sx
 - 
sx0
;

476 
b
 = (
fw
 < 8) ? 0xff<<(8-fw) : 0xff;

477 
§c0
[
x
] = 
b
 >> (
sx0
&7);

478 
fw
 -8 - (
sx0
&7);

479 i‡(
fw
 < 0)

480 
fw
 = 0;

481 
§c1
[
x
] = 
fw
 >> 3;

482 
fw
 -= (fw>>3)<<3;

483 
§c2
[
x
] = 0xf‡<< (8-
fw
);

485 
°ïSrcWidth
 = 
sw
;

486 
°ïD°Width
 = 
äw
;

488 
	}
}

491 
	$£åow
(
uöt8
* 
row
, 
uöt32
 
ƒows
, c⁄° uöt8* 
rows
[])

493 
uöt32
 
x
;

494 
uöt32
 
¨ó
 = 
ƒows
 * 
fûãrWidth
;

495 
x
 = 0; x < 
äw
; x++) {

496 
uöt32
 
mask0
 = 
§c0
[
x
];

497 
uöt32
 
fw
 = 
§c1
[
x
];

498 
uöt32
 
mask1
 = 
§c1
[
x
];

499 
uöt32
 
off
 = 
rowoff
[
x
];

500 
uöt32
 
acc
 = 0;

501 
uöt32
 
y
, 
i
;

502 
y
 = 0; y < 
ƒows
; y++) {

503 c⁄° 
uöt8
* 
§c
 = 
rows
[
y
] + 
off
;

504 
acc
 +
bôs
[*
§c
++ & 
mask0
];

505 
fw
) {

507 
i
 = 
fw
; i > 8; i--)

508 
acc
 +
bôs
[*
§c
++];

510 8: 
acc
 +
bôs
[*
§c
++];

511 7: 
acc
 +
bôs
[*
§c
++];

512 6: 
acc
 +
bôs
[*
§c
++];

513 5: 
acc
 +
bôs
[*
§c
++];

514 4: 
acc
 +
bôs
[*
§c
++];

515 3: 
acc
 +
bôs
[*
§c
++];

516 2: 
acc
 +
bôs
[*
§c
++];

517 1: 
acc
 +
bôs
[*
§c
++];

520 
acc
 +
bôs
[*
§c
 & 
mask1
];

522 *
row
++ = 
cm≠
[(255*
acc
)/
¨ó
];

524 
	}
}

533 
	$£tImage1
(c⁄° 
uöt8
* 
br
, 
uöt32
 
rw
, uöt32 
rh
)

535 
°ï
 = 
rh
;

536 
limô
 = 
äh
;

537 
îr
 = 0;

538 
b¥
 = 
	`TIFFhowm™y8
(
rw
);

539 
sy
 = 0;

540 
uöt8
* 
row
 = 
thumb«û
;

541 
uöt32
 
dy
;

542 
dy
 = 0; dy < 
äh
; dy++) {

543 c⁄° 
uöt8
* 
rows
[256];

544 
uöt32
 
ƒows
 = 1;

545 
	`Ârötf
(
°dîr
, "b¥=%d, sy=%d, b¥*sy=%d\n", 
b¥
, 
sy
, bpr*sy);

546 
rows
[0] = 
br
 + 
b¥
*
sy
;

547 
îr
 +
°ï
;

548 
îr
 >
limô
) {

549 
îr
 -
limô
;

550 
sy
++;

551 i‡(
îr
 >
limô
)

552 
rows
[
ƒows
++] = 
br
 + 
b¥
*
sy
;

554 
	`£åow
(
row
, 
ƒows
, 
rows
);

555 
row
 +
äw
;

557 
	}
}

560 
	$£tImage
(c⁄° 
uöt8
* 
br
, 
uöt32
 
rw
, uöt32 
rh
)

562 
fûãrWidth
 = (
uöt16
Ë
	`˚û
((Ë
rw
 / (Ë
äw
);

563 
	`£tupSãpTabÀs
(
rw
);

564 
	`£tImage1
(
br
, 
rw
, 
rh
);

565 
	}
}

568 
	$gíî©eThumb«û
(
TIFF
* 
ö
, TIFF* 
out
)

570 * 
ø°î
;

571 * 
Ω
;

572 
uöt32
 
sw
, 
sh
, 
Ωs
;

573 
uöt16
 
bps
, 
•p
;

574 
tsize_t
 
rowsize
, 
ø°îsize
;

575 
t°rù_t
 
s
, 
ns
 = 
	`TIFFNumbîOfSåùs
(
ö
);

576 
toff_t
 
dúoff
[1];

578 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGEWIDTH
, &
sw
);

579 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
sh
);

580 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_BITSPERSAMPLE
, &
bps
);

581 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_SAMPLESPERPIXEL
, &
•p
);

582 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_ROWSPERSTRIP
, &
Ωs
);

583 i‡(
•p
 !1 || 
bps
 != 1)

585 
rowsize
 = 
	`TIFFSˇ∆öeSize
(
ö
);

586 
ø°îsize
 = 
sh
 * 
rowsize
;

587 
	`Ârötf
(
°dîr
, "ø°îsize=%u\n", ()
ø°îsize
);

588 
ø°î
 = (*)
	`_TIFFmÆloc
(
ø°îsize
);

589 i‡(!
ø°î
) {

590 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

594 
Ω
 = 
ø°î
;

595 
s
 = 0; s < 
ns
; s++) {

596 (Ë
	`TIFFRódEncodedSåù
(
ö
, 
s
, 
Ω
, -1);

597 
Ω
 +
Ωs
 * 
rowsize
;

599 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PHOTOMETRIC
, &
phŸomëric
);

600 
	`£tupCm≠
();

601 
	`£tImage
(
ø°î
, 
sw
, 
sh
);

602 
	`_TIFF‰ì
(
ø°î
);

604 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SUBFILETYPE
, 
FILETYPE_REDUCEDIMAGE
);

605 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, (
uöt32
Ë
äw
);

606 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, (
uöt32
Ë
äh
);

607 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, (
uöt16
) 8);

608 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, (
uöt16
) 1);

609 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_PACKBITS
);

610 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_MINISWHITE
);

611 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

612 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_TOPLEFT
);

613 
	`˝Tag
(
ö
, 
out
, 
TIFFTAG_SOFTWARE
, (
uöt16
Ë-1, 
TIFF_ASCII
);

614 
	`˝Tag
(
ö
, 
out
, 
TIFFTAG_IMAGEDESCRIPTION
, (
uöt16
Ë-1, 
TIFF_ASCII
);

615 
	`˝Tag
(
ö
, 
out
, 
TIFFTAG_DATETIME
, (
uöt16
Ë-1, 
TIFF_ASCII
);

616 
	`˝Tag
(
ö
, 
out
, 
TIFFTAG_HOSTCOMPUTER
, (
uöt16
Ë-1, 
TIFF_ASCII
);

617 
dúoff
[0] = 0UL;

618 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SUBIFD
, 1, 
dúoff
);

619  (
	`TIFFWrôeEncodedSåù
(
out
, 0, 
thumb«û
, 
äw
*
äh
) != -1 &&

620 
	`TIFFWrôeDúe˘‹y
(
out
) != -1);

621 
	}
}

623 * 
	g°uff
[] = {

636 
NULL


640 
	$ußge
()

642 
buf
[
BUFSIZ
];

643 
i
;

645 
	`£tbuf
(
°dîr
, 
buf
);

646 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

647 
i
 = 0; 
°uff
[i] !
NULL
; i++)

648 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

649 
	`exô
(-1);

650 
	}
}

	@tools/tiff2bw.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<˘y≥.h
>

34 #ifde‡
HAVE_UNISTD_H


35 
	~<uni°d.h
>

38 #ifde‡
NEED_LIBPORT


39 
	~"libp‹t.h
"

42 
	~"tiffio.h
"

44 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
(◊),(b)Ë=0)

	)

45 
	#°∫eq
(
a
,
b
,
n
Ë(
	`°∫cmp
◊,b,nË=0)

	)

48 
	#PCT
(
x
Ë(((x)*255+127)/100)

	)

49 
	gRED
 = 
PCT
(30);

50 
	gGREEN
 = 
PCT
(59);

51 
	gBLUE
 = 
PCT
(11);

53 
ußge
();

54 
¥o˚ssCom¥essO±i⁄s
(*);

57 
	$com¥essc⁄tig
(* 
out
, * 
rgb
, 
uöt32
 
n
)

59 
v
, 
ªd
 = 
RED
, 
gªí
 = 
GREEN
, 
blue
 = 
BLUE
;

61 
n
-- > 0) {

62 
v
 = 
ªd
*(*
rgb
++);

63 
v
 +
gªí
*(*
rgb
++);

64 
v
 +
blue
*(*
rgb
++);

65 *
out
++ = 
v
>>8;

67 
	}
}

70 
	$com¥ess£p
(* 
out
,

71 * 
r
, * 
g
, * 
b
, 
uöt32
 
n
)

73 
uöt32
 
ªd
 = 
RED
, 
gªí
 = 
GREEN
, 
blue
 = 
BLUE
;

75 
n
-- > 0)

76 *
out
++ = ()

77 ((
ªd
*(*
r
++Ë+ 
gªí
*(*
g
++Ë+ 
blue
*(*
b
++)) >> 8);

78 
	}
}

81 
	$checkcm≠
(
TIFF
* 
tif
, 
n
, 
uöt16
* 
r
, uöt16* 
g
, uöt16* 
b
)

83 
n
-- > 0)

84 i‡(*
r
++ >256 || *
g
++ >256 || *
b
++ >= 256)

86 
	`TIFFW¨nög
(
	`TIFFFûeName
(
tif
), "Assuming 8-bit colormap");

88 
	}
}

91 
	$com¥es•Æëã
(* 
out
, * 
d©a
, 
uöt32
 
n
, 
uöt16
* 
rm≠
, uöt16* 
gm≠
, uöt16* 
bm≠
)

93 
v
, 
ªd
 = 
RED
, 
gªí
 = 
GREEN
, 
blue
 = 
BLUE
;

95 
n
-- > 0) {

96 
ix
 = *
d©a
++;

97 
v
 = 
ªd
*
rm≠
[
ix
];

98 
v
 +
gªí
*
gm≠
[
ix
];

99 
v
 +
blue
*
bm≠
[
ix
];

100 *
out
++ = 
v
>>8;

102 
	}
}

104 
uöt16
 
	gcom¥essi⁄
 = (uint16) -1;

105 
uöt16
 
	g¥edi˘‹
 = 0;

106 
	gj≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

107 
	gquÆôy
 = 75;

109 
˝Tags
(
TIFF
* 
ö
, TIFF* 
out
);

112 
	$maö
(
¨gc
, * 
¨gv
[])

114 
uöt32
 
row•î°rù
 = (uint32) -1;

115 
TIFF
 *
ö
, *
out
;

116 
uöt32
 
w
, 
h
;

117 
uöt16
 
ßm∂e•îpixñ
;

118 
uöt16
 
bô•îßm∂e
;

119 
uöt16
 
c⁄fig
;

120 
uöt16
 
phŸomëric
;

121 
uöt16
* 
ªd
;

122 
uöt16
* 
gªí
;

123 
uöt16
* 
blue
;

124 
tsize_t
 
rowsize
;

125 
uöt32
 
row
;

126 
tßm∂e_t
 
s
;

127 *
öbuf
, *
outbuf
;

128 
thög
[1024];

129 
c
;

130 
›töd
;

131 *
›èrg
;

133 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:r:R:G:B:")) != -1)

134 
c
) {

136 i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

137 
	`ußge
();

140 
row•î°rù
 = 
	`©oi
(
›èrg
);

143 
RED
 = 
	`PCT
(
	`©oi
(
›èrg
));

146 
GREEN
 = 
	`PCT
(
	`©oi
(
›èrg
));

149 
BLUE
 = 
	`PCT
(
	`©oi
(
›èrg
));

152 
	`ußge
();

155 i‡(
¨gc
 - 
›töd
 < 2)

156 
	`ußge
();

157 
ö
 = 
	`TIFFO≥n
(
¨gv
[
›töd
], "r");

158 i‡(
ö
 =
NULL
)

160 
phŸomëric
 = 0;

161 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PHOTOMETRIC
, &
phŸomëric
);

162 i‡(
phŸomëric
 !
PHOTOMETRIC_RGB
 &&ÖhŸomëri¯!
PHOTOMETRIC_PALETTE
 ) {

163 
	`Ârötf
(
°dîr
,

165 
¨gv
[
›töd
]);

168 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_SAMPLESPERPIXEL
, &
ßm∂e•îpixñ
);

169 i‡(
ßm∂e•îpixñ
 != 1 && samplesperpixel != 3) {

170 
	`Ârötf
(
°dîr
, "%s: Bad samples/pixel %u.\n",

171 
¨gv
[
›töd
], 
ßm∂e•îpixñ
);

174 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_BITSPERSAMPLE
, &
bô•îßm∂e
);

175 i‡(
bô•îßm∂e
 != 8) {

176 
	`Ârötf
(
°dîr
,

177 " %s: S‹ry, o∆y h™dÀ 8-bô sam∂es.\n", 
¨gv
[
›töd
]);

180 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGEWIDTH
, &
w
);

181 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
h
);

182 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PLANARCONFIG
, &
c⁄fig
);

184 
out
 = 
	`TIFFO≥n
(
¨gv
[
›töd
+1], "w");

185 i‡(
out
 =
NULL
)

187 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, 
w
);

188 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, 
h
);

189 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 8);

190 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 1);

191 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

192 
	`˝Tags
(
ö
, 
out
);

193 i‡(
com¥essi⁄
 !(
uöt16
) -1) {

194 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

195 
com¥essi⁄
) {

196 
COMPRESSION_JPEG
:

197 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGQUALITY
, 
quÆôy
);

198 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGCOLORMODE
, 
j≥gcﬁ‹mode
);

200 
COMPRESSION_LZW
:

201 
COMPRESSION_DEFLATE
:

202 i‡(
¥edi˘‹
 != 0)

203 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

207 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_MINISBLACK
);

208 
	`•rötf
(
thög
, "B&W vîsi⁄ o‡%s", 
¨gv
[
›töd
]);

209 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEDESCRIPTION
, 
thög
);

210 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SOFTWARE
, "tiff2bw");

211 
outbuf
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
out
));

212 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
,

213 
	`TIFFDeÁu…SåùSize
(
out
, 
row•î°rù
));

215 
	#∑ck
(
a
,
b
Ë(◊)<<8 | (b))

	)

216 
	`∑ck
(
phŸomëric
, 
c⁄fig
)) {

217 
	`∑ck
(
PHOTOMETRIC_PALETTE
, 
PLANARCONFIG_CONTIG
):

218 
	`∑ck
(
PHOTOMETRIC_PALETTE
, 
PLANARCONFIG_SEPARATE
):

219 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_COLORMAP
, &
ªd
, &
gªí
, &
blue
);

224 i‡(
	`checkcm≠
(
ö
, 1<<
bô•îßm∂e
, 
ªd
, 
gªí
, 
blue
) == 16) {

225 
i
;

226 
	#CVT
(
x
Ë(((xË* 255LË/ ((1L<<16)-1))

	)

227 
i
 = (1<<
bô•îßm∂e
)-1; i >= 0; i--) {

228 
ªd
[
i
] = 
	`CVT
(red[i]);

229 
gªí
[
i
] = 
	`CVT
(green[i]);

230 
blue
[
i
] = 
	`CVT
(blue[i]);

232 #unde‡
CVT


234 
öbuf
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
ö
));

235 
row
 = 0;Ñow < 
h
;Ñow++) {

236 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
öbuf
, 
row
, 0) < 0)

238 
	`com¥es•Æëã
(
outbuf
, 
öbuf
, 
w
, 
ªd
, 
gªí
, 
blue
);

239 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
outbuf
, 
row
, 0) < 0)

243 
	`∑ck
(
PHOTOMETRIC_RGB
, 
PLANARCONFIG_CONTIG
):

244 
öbuf
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
ö
));

245 
row
 = 0;Ñow < 
h
;Ñow++) {

246 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
öbuf
, 
row
, 0) < 0)

248 
	`com¥essc⁄tig
(
outbuf
, 
öbuf
, 
w
);

249 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
outbuf
, 
row
, 0) < 0)

253 
	`∑ck
(
PHOTOMETRIC_RGB
, 
PLANARCONFIG_SEPARATE
):

254 
rowsize
 = 
	`TIFFSˇ∆öeSize
(
ö
);

255 
öbuf
 = (*)
	`_TIFFmÆloc
(3*
rowsize
);

256 
row
 = 0;Ñow < 
h
;Ñow++) {

257 
s
 = 0; s < 3; s++)

258 i‡(
	`TIFFRódSˇ∆öe
(
ö
,

259 
öbuf
+
s
*
rowsize
, 
row
, s) < 0)

261 
	`com¥ess£p
(
outbuf
,

262 
öbuf
, inbuf+
rowsize
, inbuf+2*rowsize, 
w
);

263 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
outbuf
, 
row
, 0) < 0)

268 #unde‡
∑ck


269 
	`TIFFClo£
(
out
);

271 
	}
}

274 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

276 i‡(
	`°ªq
(
›t
, "none"))

277 
com¥essi⁄
 = 
COMPRESSION_NONE
;

278 i‡(
	`°ªq
(
›t
, "packbits"))

279 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

280 i‡(
	`°∫eq
(
›t
, "jpeg", 4)) {

281 * 
˝
 = 
	`°rchr
(
›t
, ':');

283 
com¥essi⁄
 = 
COMPRESSION_JPEG
;

284  
˝
 )

286 i‡(
	`isdigô
(()
˝
[1]))

287 
quÆôy
 = 
	`©oi
(
˝
+1);

288 i‡(
˝
[1] == 'r' )

289 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

291 
	`ußge
();

293 
˝
 = 
	`°rchr
(cp+1,':');

295 } i‡(
	`°∫eq
(
›t
, "lzw", 3)) {

296 * 
˝
 = 
	`°rchr
(
›t
, ':');

297 i‡(
˝
)

298 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

299 
com¥essi⁄
 = 
COMPRESSION_LZW
;

300 } i‡(
	`°∫eq
(
›t
, "zip", 3)) {

301 * 
˝
 = 
	`°rchr
(
›t
, ':');

302 i‡(
˝
)

303 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

304 
com¥essi⁄
 = 
COMPRESSION_DEFLATE
;

308 
	}
}

310 
	#C›yFõld
(
èg
, 
v
) \

311 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v
)Ë
	`TIFFSëFõld
(
out
,Åag, v)

	)

312 
	#C›yFõld2
(
èg
, 
v1
, 
v2
) \

313 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2)

	)

314 
	#C›yFõld3
(
èg
, 
v1
, 
v2
, 
v3
) \

315 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3)

	)

316 
	#C›yFõld4
(
èg
, 
v1
, 
v2
, 
v3
, 
v4
) \

317 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
, &
v4
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3, v4)

	)

320 
	$˝Tag
(
TIFF
* 
ö
, TIFF* 
out
, 
uöt16
 
èg
, uöt16 
cou¡
, 
TIFFD©aTy≥
 
ty≥
)

322 
ty≥
) {

323 
TIFF_SHORT
:

324 i‡(
cou¡
 == 1) {

325 
uöt16
 
sh‹tv
;

326 
	`C›yFõld
(
èg
, 
sh‹tv
);

327 } i‡(
cou¡
 == 2) {

328 
uöt16
 
sh‹tv1
, 
sh‹tv2
;

329 
	`C›yFõld2
(
èg
, 
sh‹tv1
, 
sh‹tv2
);

330 } i‡(
cou¡
 == 4) {

331 
uöt16
 *
å
, *
tg
, *
tb
, *
è
;

332 
	`C›yFõld4
(
èg
, 
å
, 
tg
, 
tb
, 
è
);

333 } i‡(
cou¡
 =(
uöt16
) -1) {

334 
uöt16
 
sh‹tv1
;

335 
uöt16
* 
sh‹èv
;

336 
	`C›yFõld2
(
èg
, 
sh‹tv1
, 
sh‹èv
);

339 
TIFF_LONG
:

340 { 
uöt32
 
l⁄gv
;

341 
	`C›yFõld
(
èg
, 
l⁄gv
);

344 
TIFF_RATIONAL
:

345 i‡(
cou¡
 == 1) {

346 
Êﬂtv
;

347 
	`C›yFõld
(
èg
, 
Êﬂtv
);

348 } i‡(
cou¡
 =(
uöt16
) -1) {

349 * 
Êﬂèv
;

350 
	`C›yFõld
(
èg
, 
Êﬂèv
);

353 
TIFF_ASCII
:

354 { * 
°rögv
;

355 
	`C›yFõld
(
èg
, 
°rögv
);

358 
TIFF_DOUBLE
:

359 i‡(
cou¡
 == 1) {

360 
doubÀv
;

361 
	`C›yFõld
(
èg
, 
doubÀv
);

362 } i‡(
cou¡
 =(
uöt16
) -1) {

363 * 
doubÀav
;

364 
	`C›yFõld
(
èg
, 
doubÀav
);

368 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

370 
èg
, 
ty≥
);

372 
	}
}

374 #unde‡
C›yFõld4


375 #unde‡
C›yFõld3


376 #unde‡
C›yFõld2


377 #unde‡
C›yFõld


379 
	s˝Tag
 {

380 
uöt16
 
	mèg
;

381 
uöt16
 
	mcou¡
;

382 
TIFFD©aTy≥
 
	mty≥
;

383 } 
	gègs
[] = {

384 { 
TIFFTAG_SUBFILETYPE
, 1, 
TIFF_LONG
 },

385 { 
TIFFTAG_THRESHHOLDING
, 1, 
TIFF_SHORT
 },

386 { 
TIFFTAG_DOCUMENTNAME
, 1, 
TIFF_ASCII
 },

387 { 
TIFFTAG_IMAGEDESCRIPTION
, 1, 
TIFF_ASCII
 },

388 { 
TIFFTAG_MAKE
, 1, 
TIFF_ASCII
 },

389 { 
TIFFTAG_MODEL
, 1, 
TIFF_ASCII
 },

390 { 
TIFFTAG_MINSAMPLEVALUE
, 1, 
TIFF_SHORT
 },

391 { 
TIFFTAG_MAXSAMPLEVALUE
, 1, 
TIFF_SHORT
 },

392 { 
TIFFTAG_XRESOLUTION
, 1, 
TIFF_RATIONAL
 },

393 { 
TIFFTAG_YRESOLUTION
, 1, 
TIFF_RATIONAL
 },

394 { 
TIFFTAG_PAGENAME
, 1, 
TIFF_ASCII
 },

395 { 
TIFFTAG_XPOSITION
, 1, 
TIFF_RATIONAL
 },

396 { 
TIFFTAG_YPOSITION
, 1, 
TIFF_RATIONAL
 },

397 { 
TIFFTAG_RESOLUTIONUNIT
, 1, 
TIFF_SHORT
 },

398 { 
TIFFTAG_SOFTWARE
, 1, 
TIFF_ASCII
 },

399 { 
TIFFTAG_DATETIME
, 1, 
TIFF_ASCII
 },

400 { 
TIFFTAG_ARTIST
, 1, 
TIFF_ASCII
 },

401 { 
TIFFTAG_HOSTCOMPUTER
, 1, 
TIFF_ASCII
 },

402 { 
TIFFTAG_WHITEPOINT
, 2, 
TIFF_RATIONAL
 },

403 { 
TIFFTAG_PRIMARYCHROMATICITIES
,(
uöt16
Ë-1,
TIFF_RATIONAL
 },

404 { 
TIFFTAG_HALFTONEHINTS
, 2, 
TIFF_SHORT
 },

405 { 
TIFFTAG_INKSET
, 1, 
TIFF_SHORT
 },

406 { 
TIFFTAG_DOTRANGE
, 2, 
TIFF_SHORT
 },

407 { 
TIFFTAG_TARGETPRINTER
, 1, 
TIFF_ASCII
 },

408 { 
TIFFTAG_SAMPLEFORMAT
, 1, 
TIFF_SHORT
 },

409 { 
TIFFTAG_YCBCRCOEFFICIENTS
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

410 { 
TIFFTAG_YCBCRSUBSAMPLING
, 2, 
TIFF_SHORT
 },

411 { 
TIFFTAG_YCBCRPOSITIONING
, 1, 
TIFF_SHORT
 },

412 { 
TIFFTAG_REFERENCEBLACKWHITE
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

413 { 
TIFFTAG_EXTRASAMPLES
, (
uöt16
Ë-1, 
TIFF_SHORT
 },

414 { 
TIFFTAG_SMINSAMPLEVALUE
, 1, 
TIFF_DOUBLE
 },

415 { 
TIFFTAG_SMAXSAMPLEVALUE
, 1, 
TIFF_DOUBLE
 },

416 { 
TIFFTAG_STONITS
, 1, 
TIFF_DOUBLE
 },

418 
	#NTAGS
 ( (
ègs
Ë/  (ègs[0]))

	)

421 
	$˝Tags
(
TIFF
* 
ö
, TIFF* 
out
)

423 
˝Tag
 *
p
;

424 
p
 = 
ègs
;Ö < &ègs[
NTAGS
];Ö++)

425 
	`˝Tag
(
ö
, 
out
, 
p
->
èg
,Ö->
cou¡
,Ö->
ty≥
);

426 
	}
}

427 #unde‡
NTAGS


429 * 
	g°uff
[] = {

448 
NULL


452 
	$ußge
()

454 
buf
[
BUFSIZ
];

455 
i
;

457 
	`£tbuf
(
°dîr
, 
buf
);

458 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

459 
i
 = 0; 
°uff
[i] !
NULL
; i++)

460 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

461 
	`exô
(-1);

462 
	}
}

	@tools/tiff2pdf.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<˘y≥.h
>

33 
	~<time.h
>

34 
	~<î∫o.h
>

36 #i‡
HAVE_UNISTD_H


37 
	~<uni°d.h
>

40 #ifde‡
HAVE_FCNTL_H


41 
	~<f˙é.h
>

44 #ifde‡
HAVE_IO_H


45 
	~<io.h
>

48 #ifde‡
NEED_LIBPORT


49 
	~"libp‹t.h
"

52 
	~"tiffi›.h
"

53 
	~"tiffio.h
"

55 #i‚de‡
HAVE_GETOPT


56 
gë›t
(, **, *);

59 #i‚de‡
EXIT_SUCCESS


60 
	#EXIT_SUCCESS
 0

	)

62 #i‚de‡
EXIT_FAILURE


63 
	#EXIT_FAILURE
 1

	)

66 
	#TIFF2PDF_MODULE
 "tiff2pdf"

	)

68 
	#PS_UNIT_SIZE
 72.0F

	)

72 
	mT2P_CS_BILEVEL
 = 0x01,

73 
	mT2P_CS_GRAY
 = 0x02,

74 
	mT2P_CS_RGB
 = 0x04,

75 
	mT2P_CS_CMYK
 = 0x08,

76 
	mT2P_CS_LAB
 = 0x10,

77 
	mT2P_CS_PALETTE
 = 0x1000,

78 
	mT2P_CS_CALGRAY
 = 0x20,

79 
	mT2P_CS_CALRGB
 = 0x40,

80 
	mT2P_CS_ICCBASED
 = 0x80

81 } 
	tt2p_cs_t
;

85 
	mT2P_COMPRESS_NONE
=0x00

86 #ifde‡
CCITT_SUPPORT


87 , 
	mT2P_COMPRESS_G4
=0x01

89 #i‡
deföed
(
JPEG_SUPPORT
Ë|| deföed(
OJPEG_SUPPORT
)

90 , 
	mT2P_COMPRESS_JPEG
=0x02

92 #ifde‡
ZIP_SUPPORT


93 , 
	mT2P_COMPRESS_ZIP
=0x04

95 } 
	tt2p_com¥ess_t
;

99 
	mT2P_TRANSCODE_RAW
=0x01,

100 
	mT2P_TRANSCODE_ENCODE
=0x02

101 } 
	tt2p_å™scode_t
;

105 
	mT2P_SAMPLE_NOTHING
=0x0000,

106 
	mT2P_SAMPLE_ABGR_TO_RGB
=0x0001,

107 
	mT2P_SAMPLE_RGBA_TO_RGB
=0x0002,

108 
	mT2P_SAMPLE_RGBAA_TO_RGB
=0x0004,

109 
	mT2P_SAMPLE_YCBCR_TO_RGB
=0x0008,

110 
	mT2P_SAMPLE_YCBCR_TO_LAB
=0x0010,

111 
	mT2P_SAMPLE_REALIZE_PALETTE
=0x0020,

112 
	mT2P_SAMPLE_SIGNED_TO_UNSIGNED
=0x0040,

113 
	mT2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
=0x0040,

114 
	mT2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
=0x0100

115 } 
	tt2p_ßm∂e_t
;

119 
	mT2P_ERR_OK
 = 0,

120 
	mT2P_ERR_ERROR
 = 1

121 } 
	tt2p_îr_t
;

125 
tdú_t
 
	m∑ge_dúe˘‹y
;

126 
uöt32
 
	m∑ge_numbî
;

127 
âûe_t
 
	m∑ge_tûecou¡
;

128 
uöt32
 
	m∑ge_exåa
;

129 } 
	tT2P_PAGE
;

133 
	mx1
;

134 
	my1
;

135 
	mx2
;

136 
	my2
;

137 
	mm©
[9];

138 } 
	tT2P_BOX
;

142 
T2P_BOX
 
	mtûe_box
;

143 } 
	tT2P_TILE
;

147 
âûe_t
 
	mtûes_tûecou¡
;

148 
uöt32
 
	mtûes_tûewidth
;

149 
uöt32
 
	mtûes_tûñígth
;

150 
uöt32
 
	mtûes_tûecou¡x
;

151 
uöt32
 
	mtûes_tûecou¡y
;

152 
uöt32
 
	mtûes_edgëûewidth
;

153 
uöt32
 
	mtûes_edgëûñígth
;

154 
T2P_TILE
* 
	mtûes_tûes
;

155 } 
	tT2P_TILES
;

159 
t2p_îr_t
 
	mt2p_îr‹
;

160 
T2P_PAGE
* 
	mtiff_∑ges
;

161 
T2P_TILES
* 
	mtiff_tûes
;

162 
tdú_t
 
	mtiff_∑gecou¡
;

163 
uöt16
 
	mtiff_com¥essi⁄
;

164 
uöt16
 
	mtiff_phŸomëric
;

165 
uöt16
 
	mtiff_fûl‹dî
;

166 
uöt16
 
	mtiff_bô•îßm∂e
;

167 
uöt16
 
	mtiff_ßm∂e•îpixñ
;

168 
uöt16
 
	mtiff_∂™¨
;

169 
uöt32
 
	mtiff_width
;

170 
uöt32
 
	mtiff_Àngth
;

171 
	mtiff_xªs
;

172 
	mtiff_yªs
;

173 
uöt16
 
	mtiff_‹õ¡©i⁄
;

174 
toff_t
 
	mtiff_d©aoff£t
;

175 
tsize_t
 
	mtiff_d©asize
;

176 
uöt16
 
	mtiff_ªsunô
;

177 
uöt16
 
	mpdf_˚¡imëîs
;

178 
uöt16
 
	mpdf_ovîridîes
;

179 
uöt16
 
	mpdf_ovîridïagesize
;

180 
	mpdf_deÁu…xªs
;

181 
	mpdf_deÁu…yªs
;

182 
	mpdf_xªs
;

183 
	mpdf_yªs
;

184 
	mpdf_deÁu…∑gewidth
;

185 
	mpdf_deÁu…∑gñígth
;

186 
	mpdf_∑gewidth
;

187 
	mpdf_∑gñígth
;

188 
	mpdf_imagewidth
;

189 
	mpdf_imagñígth
;

190 
	mpdf_image_fûÕage
;

191 
T2P_BOX
 
	mpdf_medübox
;

192 
T2P_BOX
 
	mpdf_imagebox
;

193 
uöt16
 
	mpdf_maj‹vîsi⁄
;

194 
uöt16
 
	mpdf_mö‹vîsi⁄
;

195 
uöt32
 
	mpdf_ˇèlog
;

196 
uöt32
 
	mpdf_∑ges
;

197 
uöt32
 
	mpdf_öfo
;

198 
uöt32
 
	mpdf_∑Àâecs
;

199 
uöt16
 
	mpdf_fôwödow
;

200 
uöt32
 
	mpdf_°¨txªf
;

201 
	#TIFF2PDF_FILEID_SIZE
 33

	)

202 
	mpdf_fûeid
[
TIFF2PDF_FILEID_SIZE
];

203 
	#TIFF2PDF_DATETIME_SIZE
 17

	)

204 
	mpdf_d©ëime
[
TIFF2PDF_DATETIME_SIZE
];

205 
	#TIFF2PDF_CREATOR_SIZE
 512

	)

206 
	mpdf_¸ót‹
[
TIFF2PDF_CREATOR_SIZE
];

207 
	#TIFF2PDF_AUTHOR_SIZE
 512

	)

208 
	mpdf_auth‹
[
TIFF2PDF_AUTHOR_SIZE
];

209 
	#TIFF2PDF_TITLE_SIZE
 512

	)

210 
	mpdf_tôÀ
[
TIFF2PDF_TITLE_SIZE
];

211 
	#TIFF2PDF_SUBJECT_SIZE
 512

	)

212 
	mpdf_subje˘
[
TIFF2PDF_SUBJECT_SIZE
];

213 
	#TIFF2PDF_KEYWORDS_SIZE
 512

	)

214 
	mpdf_keyw‹ds
[
TIFF2PDF_KEYWORDS_SIZE
];

215 
t2p_cs_t
 
	mpdf_cﬁ‹•a˚
;

216 
uöt16
 
	mpdf_cﬁ‹•a˚_övît
;

217 
uöt16
 
	mpdf_swôchdecode
;

218 
uöt16
 
	mpdf_∑Àâesize
;

219 * 
	mpdf_∑Àâe
;

220 
	mpdf_œbønge
[4];

221 
t2p_com¥ess_t
 
	mpdf_deÁu…com¥essi⁄
;

222 
uöt16
 
	mpdf_deÁu…com¥essi⁄quÆôy
;

223 
t2p_com¥ess_t
 
	mpdf_com¥essi⁄
;

224 
uöt16
 
	mpdf_com¥essi⁄quÆôy
;

225 
uöt16
 
	mpdf_n›as°hrough
;

226 
t2p_å™scode_t
 
	mpdf_å™scode
;

227 
t2p_ßm∂e_t
 
	mpdf_ßm∂e
;

228 
uöt32
* 
	mpdf_xªfoff£ts
;

229 
uöt32
 
	mpdf_xªfcou¡
;

230 
tdú_t
 
	mpdf_∑ge
;

231 #ifde‡
OJPEG_SUPPORT


232 
td©a_t
 
	mpdf_oj≥gd©a
;

233 
uöt32
 
	mpdf_oj≥gd©Æígth
;

234 
uöt32
 
	mpdf_oj≥giÊígth
;

236 
	mtiff_whôechrom©icôõs
[2];

237 
	mtiff_¥im¨ychrom©icôõs
[6];

238 
	mtiff_ª„ªn˚bœckwhôe
[2];

239 * 
	mtiff_å™s„rfun˘i⁄
[3];

240 
	mpdf_image_öãΩﬁ©e
;

242 
uöt16
 
	mtiff_å™s„rfun˘i⁄cou¡
;

243 
uöt32
 
	mpdf_icccs
;

244 
uöt32
 
	mtiff_ic˝rofûñígth
;

245 
td©a_t
 
	mtiff_ic˝rofûe
;

248 
FILE
 *
	mouçutfûe
;

249 
	mouçutdißbÀ
;

250 
tsize_t
 
	mouçutwrôãn
;

251 } 
	tT2P
;

255 
tiff2pdf_ußge
();

256 
tiff2pdf_m©ch_∑≥r_size
(*, *, *);

260 #ifde‡
__˝lu•lus


264 
T2P
* 
t2p_öô
();

265 
t2p_vÆid©e
(
T2P
*);

266 
tsize_t
 
t2p_wrôe_pdf
(
T2P
*, 
TIFF
*, TIFF*);

267 
t2p_‰ì
(
T2P
*);

269 #ifde‡
__˝lu•lus


273 
t2p_ªad_tiff_öô
(
T2P
*, 
TIFF
*);

274 
t2p_cmp_t2p_∑ge
(const *, const *);

275 
t2p_ªad_tiff_d©a
(
T2P
*, 
TIFF
*);

276 
t2p_ªad_tiff_size
(
T2P
*, 
TIFF
*);

277 
t2p_ªad_tiff_size_tûe
(
T2P
*, 
TIFF
*, 
âûe_t
);

278 
t2p_tûe_is_right_edge
(
T2P_TILES
, 
âûe_t
);

279 
t2p_tûe_is_bŸtom_edge
(
T2P_TILES
, 
âûe_t
);

280 
t2p_tûe_is_edge
(
T2P_TILES
, 
âûe_t
);

281 
t2p_tûe_is_c‹√r_edge
(
T2P_TILES
, 
âûe_t
);

282 
tsize_t
 
t2p_ªadwrôe_pdf_image
(
T2P
*, 
TIFF
*, TIFF*);

283 
tsize_t
 
t2p_ªadwrôe_pdf_image_tûe
(
T2P
*, 
TIFF
*, TIFF*, 
âûe_t
);

284 #ifde‡
OJPEG_SUPPORT


285 
t2p_¥o˚ss_oj≥g_èbÀs
(
T2P
*, 
TIFF
*);

287 #ifde‡
JPEG_SUPPORT


288 
t2p_¥o˚ss_j≥g_°rù
(*, 
tsize_t
*, *,Åsize_t*, 
t°rù_t
, 
uöt32
);

290 
t2p_tûe_cﬁœp£_À·
(
td©a_t
, 
tsize_t
, 
uöt32
, uint32, uint32);

291 
t2p_wrôe_adv™˚_dúe˘‹y
(
T2P
*, 
TIFF
*);

292 
tsize_t
 
t2p_ßm∂e_∂™¨_£∑øã_to_c⁄tig
(
T2P
*, *, *,Åsize_t);

293 
tsize_t
 
t2p_ßm∂e_ªÆize_∑Àâe
(
T2P
*, *);

294 
tsize_t
 
t2p_ßm∂e_abgr_to_rgb
(
td©a_t
, 
uöt32
);

295 
tsize_t
 
t2p_ßm∂e_rgba_to_rgb
(
td©a_t
, 
uöt32
);

296 
tsize_t
 
t2p_ßm∂e_rgbØ_to_rgb
(
td©a_t
, 
uöt32
);

297 
tsize_t
 
t2p_ßm∂e_œb_sig√d_to_unsig√d
(
td©a_t
, 
uöt32
);

298 
tsize_t
 
t2p_wrôe_pdf_hódî
(
T2P
*, 
TIFF
*);

299 
tsize_t
 
t2p_wrôe_pdf_obj_°¨t
(
uöt32
, 
TIFF
*);

300 
tsize_t
 
t2p_wrôe_pdf_obj_íd
(
TIFF
*);

301 
tsize_t
 
t2p_wrôe_pdf_«me
(*, 
TIFF
*);

302 
tsize_t
 
t2p_wrôe_pdf_°rög
(*, 
TIFF
*);

303 
tsize_t
 
t2p_wrôe_pdf_°ªam
(
td©a_t
,Åsize_t, 
TIFF
*);

304 
tsize_t
 
t2p_wrôe_pdf_°ªam_°¨t
(
TIFF
*);

305 
tsize_t
 
t2p_wrôe_pdf_°ªam_íd
(
TIFF
*);

306 
tsize_t
 
t2p_wrôe_pdf_°ªam_di˘
—size_t, 
uöt32
, 
TIFF
*);

307 
tsize_t
 
t2p_wrôe_pdf_°ªam_di˘_°¨t
(
TIFF
*);

308 
tsize_t
 
t2p_wrôe_pdf_°ªam_di˘_íd
(
TIFF
*);

309 
tsize_t
 
t2p_wrôe_pdf_°ªam_Àngth
—size_t, 
TIFF
*);

310 
tsize_t
 
t2p_wrôe_pdf_ˇèlog
(
T2P
*, 
TIFF
*);

311 
tsize_t
 
t2p_wrôe_pdf_öfo
(
T2P
*, 
TIFF
*, TIFF*);

312 
t2p_pdf_cuºíâime
(
T2P
*);

313 
t2p_pdf_tif·ime
(
T2P
*, 
TIFF
*);

314 
tsize_t
 
t2p_wrôe_pdf_∑ges
(
T2P
*, 
TIFF
*);

315 
tsize_t
 
t2p_wrôe_pdf_∑ge
(
uöt32
, 
T2P
*, 
TIFF
*);

316 
t2p_compo£_pdf_∑ge
(
T2P
*);

317 
t2p_compo£_pdf_∑ge_‹õ¡
(
T2P_BOX
*, 
uöt16
);

318 
t2p_compo£_pdf_∑ge_‹õ¡_Êù
(
T2P_BOX
*, 
uöt16
);

319 
tsize_t
 
t2p_wrôe_pdf_∑ge_c⁄ã¡
(
T2P
*, 
TIFF
*);

320 
tsize_t
 
t2p_wrôe_pdf_xobje˘_°ªam_di˘
(
âûe_t
, 
T2P
*, 
TIFF
*);

321 
tsize_t
 
t2p_wrôe_pdf_xobje˘_cs
(
T2P
*, 
TIFF
*);

322 
tsize_t
 
t2p_wrôe_pdf_å™s„r
(
T2P
*, 
TIFF
*);

323 
tsize_t
 
t2p_wrôe_pdf_å™s„r_di˘
(
T2P
*, 
TIFF
*, 
uöt16
);

324 
tsize_t
 
t2p_wrôe_pdf_å™s„r_°ªam
(
T2P
*, 
TIFF
*, 
uöt16
);

325 
tsize_t
 
t2p_wrôe_pdf_xobje˘_ˇlcs
(
T2P
*, 
TIFF
*);

326 
tsize_t
 
t2p_wrôe_pdf_xobje˘_icccs
(
T2P
*, 
TIFF
*);

327 
tsize_t
 
t2p_wrôe_pdf_xobje˘_icccs_di˘
(
T2P
*, 
TIFF
*);

328 
tsize_t
 
t2p_wrôe_pdf_xobje˘_icccs_°ªam
(
T2P
*, 
TIFF
*);

329 
tsize_t
 
t2p_wrôe_pdf_xobje˘_cs_°ªam
(
T2P
*, 
TIFF
*);

330 
tsize_t
 
t2p_wrôe_pdf_xobje˘_decode
(
T2P
*, 
TIFF
*);

331 
tsize_t
 
t2p_wrôe_pdf_xobje˘_°ªam_fûãr
(
âûe_t
, 
T2P
*, 
TIFF
*);

332 
tsize_t
 
t2p_wrôe_pdf_xª·abÀ
(
T2P
*, 
TIFF
*);

333 
tsize_t
 
t2p_wrôe_pdf_åaûî
(
T2P
*, 
TIFF
*);

336 
	$t2p_dißbÀ
(
TIFF
 *
tif
)

338 
T2P
 *
t2p
 = (T2P*Ë
	`TIFFClõ¡d©a
(
tif
);

339 
t2p
->
ouçutdißbÀ
 = 1;

340 
	}
}

343 
	$t2p_íabÀ
(
TIFF
 *
tif
)

345 
T2P
 *
t2p
 = (T2P*Ë
	`TIFFClõ¡d©a
(
tif
);

346 
t2p
->
ouçutdißbÀ
 = 0;

347 
	}
}

353 
tmsize_t


354 
	$t2pRódFûe
(
TIFF
 *
tif
, 
td©a_t
 
d©a
, 
tmsize_t
 
size
)

356 
th™dÀ_t
 
˛õ¡
 = 
	`TIFFClõ¡d©a
(
tif
);

357 
TIFFRódWrôeProc
 
¥oc
 = 
	`TIFFGëRódProc
(
tif
);

358 i‡(
¥oc
)

359  
	`¥oc
(
˛õ¡
, 
d©a
, 
size
);

361 
	}
}

363 
tmsize_t


364 
	$t2pWrôeFûe
(
TIFF
 *
tif
, 
td©a_t
 
d©a
, 
tmsize_t
 
size
)

366 
th™dÀ_t
 
˛õ¡
 = 
	`TIFFClõ¡d©a
(
tif
);

367 
TIFFRódWrôeProc
 
¥oc
 = 
	`TIFFGëWrôeProc
(
tif
);

368 i‡(
¥oc
)

369  
	`¥oc
(
˛õ¡
, 
d©a
, 
size
);

371 
	}
}

373 
uöt64


374 
	$t2pSìkFûe
(
TIFF
 *
tif
, 
toff_t
 
off£t
, 
whí˚
)

376 
th™dÀ_t
 
˛õ¡
 = 
	`TIFFClõ¡d©a
(
tif
);

377 
TIFFSìkProc
 
¥oc
 = 
	`TIFFGëSìkProc
(
tif
);

378 i‡(
¥oc
)

379  
	`¥oc
(
˛õ¡
, 
off£t
, 
whí˚
);

381 
	}
}

383 
tmsize_t


384 
	$t2p_ªad¥oc
(
th™dÀ_t
 
h™dÀ
, 
td©a_t
 
d©a
, 
tmsize_t
 
size
)

386 (Ë
h™dÀ
, (Ë
d©a
, (Ë
size
;

388 
	}
}

390 
tmsize_t


391 
	$t2p_wrôïroc
(
th™dÀ_t
 
h™dÀ
, 
td©a_t
 
d©a
, 
tmsize_t
 
size
)

393 
T2P
 *
t2p
 = (T2P*Ë
h™dÀ
;

394 i‡(
t2p
->
ouçutdißbÀ
 <0 &&Å2p->
ouçutfûe
) {

395 
tsize_t
 
wrôãn
 = 
	`fwrôe
(
d©a
, 1, 
size
, 
t2p
->
ouçutfûe
);

396 
t2p
->
ouçutwrôãn
 +
wrôãn
;

397  
wrôãn
;

399  
size
;

400 
	}
}

402 
uöt64


403 
	$t2p_£ek¥oc
(
th™dÀ_t
 
h™dÀ
, 
uöt64
 
off£t
, 
whí˚
)

405 
T2P
 *
t2p
 = (T2P*Ë
h™dÀ
;

406 i‡(
t2p
->
ouçutdißbÀ
 <0 &&Å2p->
ouçutfûe
)

407  
	`f£ek
(
t2p
->
ouçutfûe
, (Ë
off£t
, 
whí˚
);

408  
off£t
;

409 
	}
}

412 
	$t2p_˛o£¥oc
(
th™dÀ_t
 
h™dÀ
)

414 (Ë
h™dÀ
;

416 
	}
}

418 
uöt64


419 
	$t2p_sizïroc
(
th™dÀ_t
 
h™dÀ
)

421 (Ë
h™dÀ
;

423 
	}
}

426 
	$t2p_m≠¥oc
(
th™dÀ_t
 
h™dÀ
, **
d©a
, 
toff_t
 *
off£t
)

428 (Ë
h™dÀ
, (Ë
d©a
, (Ë
off£t
;

430 
	}
}

433 
	$t2p_unm≠¥oc
(
th™dÀ_t
 
h™dÀ
, *
d©a
, 
toff_t
 
off£t
)

435 (Ë
h™dÀ
, (Ë
d©a
, (Ë
off£t
;

436 
	}
}

559 
	$maö
(
¨gc
, ** 
¨gv
){

561 *
›èrg
;

562 
›töd
;

563 c⁄° *
outfûíame
 = 
NULL
;

564 
T2P
 *
t2p
 = 
NULL
;

565 
TIFF
 *
öput
 = 
NULL
, *
ouçut
 = NULL;

566 
c
, 
ªt
 = 
EXIT_SUCCESS
;

568 
t2p
 = 
	`t2p_öô
();

570 i‡(
t2p
 =
NULL
){

571 
	`TIFFEº‹
(
TIFF2PDF_MODULE
, "Can't initialize context");

572 
Áû
;

575 
¨gv
 &&

576 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
,

578 
c
) {

580 
outfûíame
 = 
›èrg
;

582 #ifde‡
JPEG_SUPPORT


584 
t2p
->
pdf_deÁu…com¥essi⁄
=
T2P_COMPRESS_JPEG
;

587 #i‚de‡
JPEG_SUPPORT


589 
	`TIFFW¨nög
(

590 
TIFF2PDF_MODULE
,

594 #ifde‡
ZIP_SUPPORT


596 
t2p
->
pdf_deÁu…com¥essi⁄
=
T2P_COMPRESS_ZIP
;

599 #i‚de‡
ZIP_SUPPORT


601 
	`TIFFW¨nög
(

602 
TIFF2PDF_MODULE
,

607 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
=
	`©oi
(
›èrg
);

610 
t2p
->
pdf_n›as°hrough
=1;

613 
t2p
->
pdf_deÁu…com¥essi⁄
=
T2P_COMPRESS_NONE
;

616 if(
›èrg
[0]=='m'){

617 
t2p
->
pdf_˚¡imëîs
=1;

621 
t2p
->
pdf_deÁu…xªs
 =

622 ()
	`©of
(
›èrg
Ë/ (
t2p
->
pdf_˚¡imëîs
?2.54F:1.0F);

625 
t2p
->
pdf_deÁu…yªs
 =

626 ()
	`©of
(
›èrg
Ë/ (
t2p
->
pdf_˚¡imëîs
?2.54F:1.0F);

629 
t2p
->
pdf_ovîridïagesize
=1;

630 
t2p
->
pdf_deÁu…∑gewidth
 =

631 (()
	`©of
(
›èrg
Ë* 
PS_UNIT_SIZE
Ë/ (
t2p
->
pdf_˚¡imëîs
?2.54F:1.0F);

634 
t2p
->
pdf_ovîridïagesize
=1;

635 
t2p
->
pdf_deÁu…∑gñígth
 =

636 (()
	`©of
(
›èrg
Ë* 
PS_UNIT_SIZE
Ë/ (
t2p
->
pdf_˚¡imëîs
?2.54F:1.0F);

639 if(
›èrg
[0]=='o'){

640 
t2p
->
pdf_ovîridîes
=1;

644 if(
	`tiff2pdf_m©ch_∑≥r_size
(

645 &(
t2p
->
pdf_deÁu…∑gewidth
),

646 &(
t2p
->
pdf_deÁu…∑gñígth
),

647 
›èrg
)){

648 
t2p
->
pdf_ovîridïagesize
=1;

650 
	`TIFFW¨nög
(
TIFF2PDF_MODULE
,

652 
›èrg
);

656 
t2p
->
pdf_cﬁ‹•a˚_övît
=1;

659 
t2p
->
pdf_image_fûÕage
 = 1;

662 
t2p
->
pdf_fôwödow
=1;

665 i‡(
	`°æí
(
›èrg
) == 0) {

666 
t2p
->
pdf_d©ëime
[0] = '\0';

668 
t2p
->
pdf_d©ëime
[0] = 'D';

669 
t2p
->
pdf_d©ëime
[1] = ':';

670 
	`°∫˝y
(
t2p
->
pdf_d©ëime
 + 2, 
›èrg
,

671 (
t2p
->
pdf_d©ëime
) - 3);

672 
t2p
->
pdf_d©ëime
[(t2p->pdf_datetime) - 1] = '\0';

676 
	`°∫˝y
(
t2p
->
pdf_¸ót‹
, 
›èrg
, (t2p->pdf_creator) - 1);

677 
t2p
->
pdf_¸ót‹
[(t2p->pdf_creator) - 1] = '\0';

680 
	`°∫˝y
(
t2p
->
pdf_auth‹
, 
›èrg
, (t2p->pdf_author) - 1);

681 
t2p
->
pdf_auth‹
[(t2p->pdf_author) - 1] = '\0';

684 
	`°∫˝y
(
t2p
->
pdf_tôÀ
, 
›èrg
, (t2p->pdf_title) - 1);

685 
t2p
->
pdf_tôÀ
[(t2p->pdf_title) - 1] = '\0';

688 
	`°∫˝y
(
t2p
->
pdf_subje˘
, 
›èrg
, (t2p->pdf_subject) - 1);

689 
t2p
->
pdf_subje˘
[(t2p->pdf_subject) - 1] = '\0';

692 
	`°∫˝y
(
t2p
->
pdf_keyw‹ds
, 
›èrg
, (t2p->pdf_keywords) - 1);

693 
t2p
->
pdf_keyw‹ds
[(t2p->pdf_keywords) - 1] = '\0';

696 
t2p
->
pdf_image_öãΩﬁ©e
 = 1;

700 
	`tiff2pdf_ußge
();

701 
suc˚ss
;

709 if(
¨gc
 > 
›töd
) {

710 
öput
 = 
	`TIFFO≥n
(
¨gv
[
›töd
++], "r");

711 i‡(
öput
==
NULL
) {

712 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

714 
¨gv
[
›töd
-1]);

715 
Áû
;

718 
	`TIFFEº‹
(
TIFF2PDF_MODULE
, "No input file specified");

719 
	`tiff2pdf_ußge
();

720 
Áû
;

723 if(
¨gc
 > 
›töd
) {

724 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

726 
	`tiff2pdf_ußge
();

727 
Áû
;

733 
t2p
->
ouçutdißbÀ
 = 0;

734 i‡(
outfûíame
) {

735 
t2p
->
ouçutfûe
 = 
	`f›í
(
outfûíame
, "wb");

736 i‡(
t2p
->
ouçutfûe
 =
NULL
) {

737 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

739 
outfûíame
);

740 
Áû
;

743 
outfûíame
 = "-";

744 
t2p
->
ouçutfûe
 = 
°dout
;

747 
ouçut
 = 
	`TIFFClõ¡O≥n
(
outfûíame
, "w", (
th™dÀ_t
Ë
t2p
,

748 
t2p_ªad¥oc
, 
t2p_wrôïroc
, 
t2p_£ek¥oc
,

749 
t2p_˛o£¥oc
, 
t2p_sizïroc
,

750 
t2p_m≠¥oc
, 
t2p_unm≠¥oc
);

751 i‡(
ouçut
 =
NULL
) {

752 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

754 
Áû
;

760 
	`t2p_vÆid©e
(
t2p
);

761 
	`t2pSìkFûe
(
ouçut
, (
toff_t
Ë0, 
SEEK_SET
);

766 
	`t2p_wrôe_pdf
(
t2p
, 
öput
, 
ouçut
);

767 i‡(
t2p
->
t2p_îr‹
 != 0) {

768 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

770 
Áû
;

773 
suc˚ss
;

774 
Áû
:

775 
ªt
 = 
EXIT_FAILURE
;

776 
suc˚ss
:

777 if(
öput
 !
NULL
)

778 
	`TIFFClo£
(
öput
);

779 i‡(
ouçut
 !
NULL
)

780 
	`TIFFClo£
(
ouçut
);

781 i‡(
t2p
 !
NULL
)

782 
	`t2p_‰ì
(
t2p
);

783  
ªt
;

785 
	}
}

787 
	$tiff2pdf_ußge
(){

788 * 
löes
[]={

792 #ifde‡
JPEG_SUPPORT


795 #ifde‡
ZIP_SUPPORT


819 
NULL


821 
i
=0;

823 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

824 
i
=0;
löes
[i]!=
NULL
;i++){

825 
	`Ârötf
(
°dîr
, "%s\n", 
löes
[
i
]);

829 
	}
}

831 
	$tiff2pdf_m©ch_∑≥r_size
(* 
width
, * 
Àngth
, * 
∑≥rsize
){

833 
size_t
 
i
, 
Àn
;

834 c⁄° * 
sizes
[]={

847 
NULL


849 c⁄° 
widths
[]={

862 c⁄° 
Àngths
[]={

876 
Àn
=
	`°æí
(
∑≥rsize
);

877 
i
=0;i<
Àn
;i++){

878 
∑≥rsize
[
i
]=
	`touµî
(papersize[i]);

880 
i
=0;
sizes
[i]!=
NULL
; i++){

881 i‡(
	`°rcmp
–(c⁄° *)
∑≥rsize
, 
sizes
[
i
])==0){

882 *
width
=()
widths
[
i
];

883 *
Àngth
=()
Àngths
[
i
];

889 
	}
}

895 
T2P
* 
	$t2p_öô
()

897 
T2P
* 
t2p
 = (T2P*Ë
	`_TIFFmÆloc
((T2P));

898 if(
t2p
==
NULL
){

899 
	`TIFFEº‹
(

900 
TIFF2PDF_MODULE
,

902 (Ë(
T2P
));

903 –(
T2P
*Ë
NULL
 );

905 
	`_TIFFmem£t
(
t2p
, 0x00, (
T2P
));

906 
t2p
->
pdf_maj‹vîsi⁄
=1;

907 
t2p
->
pdf_mö‹vîsi⁄
=1;

908 
t2p
->
pdf_deÁu…xªs
=300.0;

909 
t2p
->
pdf_deÁu…yªs
=300.0;

910 
t2p
->
pdf_deÁu…∑gewidth
=612.0;

911 
t2p
->
pdf_deÁu…∑gñígth
=792.0;

912 
t2p
->
pdf_xªfcou¡
=3;

914 (
t2p
);

915 
	}
}

921 
	$t2p_‰ì
(
T2P
* 
t2p
)

923 
i
 = 0;

925 i‡(
t2p
 !
NULL
) {

926 if(
t2p
->
pdf_xªfoff£ts
 !
NULL
){

927 
	`_TIFF‰ì
–(
td©a_t
Ë
t2p
->
pdf_xªfoff£ts
);

929 if(
t2p
->
tiff_∑ges
 !
NULL
){

930 
	`_TIFF‰ì
–(
td©a_t
Ë
t2p
->
tiff_∑ges
);

932 
i
=0;i<
t2p
->
tiff_∑gecou¡
;i++){

933 if(
t2p
->
tiff_tûes
[
i
].
tûes_tûes
 !
NULL
){

934 
	`_TIFF‰ì
–(
td©a_t
Ë
t2p
->
tiff_tûes
[
i
].
tûes_tûes
);

937 if(
t2p
->
tiff_tûes
 !
NULL
){

938 
	`_TIFF‰ì
–(
td©a_t
Ë
t2p
->
tiff_tûes
);

940 if(
t2p
->
pdf_∑Àâe
 !
NULL
){

941 
	`_TIFF‰ì
–(
td©a_t
Ë
t2p
->
pdf_∑Àâe
);

943 #ifde‡
OJPEG_SUPPORT


944 if(
t2p
->
pdf_oj≥gd©a
 !
NULL
){

945 
	`_TIFF‰ì
–(
td©a_t
Ë
t2p
->
pdf_oj≥gd©a
);

948 
	`_TIFF‰ì
–(
td©a_t
Ë
t2p
 );

952 
	}
}

959 
	$t2p_vÆid©e
(
T2P
* 
t2p
){

961 #ifde‡
JPEG_SUPPORT


962 if(
t2p
->
pdf_deÁu…com¥essi⁄
==
T2P_COMPRESS_JPEG
){

963 if(
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
>100 ||

964 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
<1){

965 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
=0;

969 #ifde‡
ZIP_SUPPORT


970 if(
t2p
->
pdf_deÁu…com¥essi⁄
==
T2P_COMPRESS_ZIP
){

971 
uöt16
 
m
=
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
%100;

972 if(
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
/100 > 9 ||

973 (
m
>1 && m<10) || m>15){

974 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
=0;

976 if(
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
%100 !=0){

977 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
/=100;

978 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
*=100;

979 
	`TIFFEº‹
(

980 
TIFF2PDF_MODULE
,

982 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
);

984 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
%=100;

985 if(
t2p
->
pdf_mö‹vîsi⁄
<2){t2p->pdf_minorversion=2;}

991 
	}
}

1001 
	$t2p_ªad_tiff_öô
(
T2P
* 
t2p
, 
TIFF
* 
öput
){

1003 
tdú_t
 
dúe˘‹ycou¡
=0;

1004 
tdú_t
 
i
=0;

1005 
uöt16
 
∑gí
=0;

1006 
uöt16
 
∑ged
=0;

1007 
uöt16
 
xuöt16
=0;

1009 
dúe˘‹ycou¡
=
	`TIFFNumbîOfDúe˘‹õs
(
öput
);

1010 
t2p
->
tiff_∑ges
 = (
T2P_PAGE
*Ë
	`_TIFFmÆloc
(
dúe˘‹ycou¡
 * (T2P_PAGE));

1011 if(
t2p
->
tiff_∑ges
==
NULL
){

1012 
	`TIFFEº‹
(

1013 
TIFF2PDF_MODULE
,

1015 (Ë
dúe˘‹ycou¡
 * (
T2P_PAGE
),

1016 
	`TIFFFûeName
(
öput
));

1017 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1020 
	`_TIFFmem£t
–
t2p
->
tiff_∑ges
, 0x00, 
dúe˘‹ycou¡
 * (
T2P_PAGE
));

1021 
t2p
->
tiff_tûes
 = (
T2P_TILES
*Ë
	`_TIFFmÆloc
(
dúe˘‹ycou¡
 * (T2P_TILES));

1022 if(
t2p
->
tiff_tûes
==
NULL
){

1023 
	`TIFFEº‹
(

1024 
TIFF2PDF_MODULE
,

1026 (Ë
dúe˘‹ycou¡
 * (
T2P_TILES
),

1027 
	`TIFFFûeName
(
öput
));

1028 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1031 
	`_TIFFmem£t
–
t2p
->
tiff_tûes
, 0x00, 
dúe˘‹ycou¡
 * (
T2P_TILES
));

1032 
i
=0;i<
dúe˘‹ycou¡
;i++){

1033 
uöt32
 
subfûëy≥
 = 0;

1035 if(!
	`TIFFSëDúe˘‹y
(
öput
, 
i
)){

1036 
	`TIFFEº‹
(

1037 
TIFF2PDF_MODULE
,

1039 
i
,

1040 
	`TIFFFûeName
(
öput
));

1043 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_PAGENUMBER
, &
∑gí
, &
∑ged
)){

1044 if((
∑gí
>
∑ged
) && (paged != 0)){

1045 
t2p
->
tiff_∑ges
[t2p->
tiff_∑gecou¡
].
∑ge_numbî
 =

1046 
∑ged
;

1048 
t2p
->
tiff_∑ges
[t2p->
tiff_∑gecou¡
].
∑ge_numbî
 =

1049 
∑gí
;

1051 
i•age2
;

1053 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_SUBFILETYPE
, &
subfûëy≥
)){

1054 i‡–((
subfûëy≥
 & 
FILETYPE_PAGE
) != 0)

1055 || (
subfûëy≥
 == 0)){

1056 
i•age
;

1058 
i¢Ÿ∑ge
;

1061 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_OSUBFILETYPE
, &
subfûëy≥
)){

1062 i‡((
subfûëy≥
 =
OFILETYPE_IMAGE
)

1063 || (
subfûëy≥
 =
OFILETYPE_PAGE
)

1064 || (
subfûëy≥
 == 0) ){

1065 
i•age
;

1067 
i¢Ÿ∑ge
;

1070 
i•age
:

1071 
t2p
->
tiff_∑ges
[t2p->
tiff_∑gecou¡
].
∑ge_numbî
=t2p->tiff_pagecount;

1072 
i•age2
:

1073 
t2p
->
tiff_∑ges
[t2p->
tiff_∑gecou¡
].
∑ge_dúe˘‹y
=
i
;

1074 if(
	`TIFFIsTûed
(
öput
)){

1075 
t2p
->
tiff_∑ges
[t2p->
tiff_∑gecou¡
].
∑ge_tûecou¡
 =

1076 
	`TIFFNumbîOfTûes
(
öput
);

1078 
t2p
->
tiff_∑gecou¡
++;

1079 
i¢Ÿ∑ge
:

1083 
	`qs‹t
((*Ë
t2p
->
tiff_∑ges
,Å2p->
tiff_∑gecou¡
,

1084 (
T2P_PAGE
), 
t2p_cmp_t2p_∑ge
);

1086 
i
=0;i<
t2p
->
tiff_∑gecou¡
;i++){

1087 
t2p
->
pdf_xªfcou¡
 += 5;

1088 
	`TIFFSëDúe˘‹y
(
öput
, 
t2p
->
tiff_∑ges
[
i
].
∑ge_dúe˘‹y
 );

1089 if((
	`TIFFGëFõld
(
öput
, 
TIFFTAG_PHOTOMETRIC
, &
xuöt16
)

1090 && (
xuöt16
==
PHOTOMETRIC_PALETTE
))

1091 || 
	`TIFFGëFõld
(
öput
, 
TIFFTAG_INDEXED
, &
xuöt16
)) {

1092 
t2p
->
tiff_∑ges
[
i
].
∑ge_exåa
++;

1093 
t2p
->
pdf_xªfcou¡
++;

1095 #ifde‡
ZIP_SUPPORT


1096 i‡(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_COMPRESSION
, &
xuöt16
)) {

1097 if–(
xuöt16
=
COMPRESSION_DEFLATE
 ||

1098 
xuöt16
=
COMPRESSION_ADOBE_DEFLATE
) &&

1099 ((
t2p
->
tiff_∑ges
[
i
].
∑ge_tûecou¡
 != 0)

1100 || 
	`TIFFNumbîOfSåùs
(
öput
)==1) &&

1101 (
t2p
->
pdf_n›as°hrough
==0) ){

1102 if(
t2p
->
pdf_mö‹vîsi⁄
<2){t2p->pdf_minorversion=2;}

1106 i‡(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_TRANSFERFUNCTION
,

1107 &(
t2p
->
tiff_å™s„rfun˘i⁄
[0]),

1108 &(
t2p
->
tiff_å™s„rfun˘i⁄
[1]),

1109 &(
t2p
->
tiff_å™s„rfun˘i⁄
[2]))) {

1110 if(
t2p
->
tiff_å™s„rfun˘i⁄
[1] !=

1111 
t2p
->
tiff_å™s„rfun˘i⁄
[0]) {

1112 
t2p
->
tiff_å™s„rfun˘i⁄cou¡
 = 3;

1113 
t2p
->
tiff_∑ges
[
i
].
∑ge_exåa
 += 4;

1114 
t2p
->
pdf_xªfcou¡
 += 4;

1116 
t2p
->
tiff_å™s„rfun˘i⁄cou¡
 = 1;

1117 
t2p
->
tiff_∑ges
[
i
].
∑ge_exåa
 += 2;

1118 
t2p
->
pdf_xªfcou¡
 += 2;

1120 if(
t2p
->
pdf_mö‹vîsi⁄
 < 2)

1121 
t2p
->
pdf_mö‹vîsi⁄
 = 2;

1123 
t2p
->
tiff_å™s„rfun˘i⁄cou¡
=0;

1125 if–
	`TIFFGëFõld
(

1126 
öput
,

1127 
TIFFTAG_ICCPROFILE
,

1128 &(
t2p
->
tiff_ic˝rofûñígth
),

1129 &(
t2p
->
tiff_ic˝rofûe
)) != 0){

1130 
t2p
->
tiff_∑ges
[
i
].
∑ge_exåa
++;

1131 
t2p
->
pdf_xªfcou¡
++;

1132 if(
t2p
->
pdf_mö‹vîsi⁄
<3){t2p->pdf_minorversion=3;}

1134 
t2p
->
tiff_tûes
[
i
].
tûes_tûecou¡
=

1135 
t2p
->
tiff_∑ges
[
i
].
∑ge_tûecou¡
;

1136 if–(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_PLANARCONFIG
, &
xuöt16
) != 0)

1137 && (
xuöt16
 =
PLANARCONFIG_SEPARATE
 ) ){

1138 
	`TIFFGëFõld
(
öput
, 
TIFFTAG_SAMPLESPERPIXEL
, &
xuöt16
);

1139 
t2p
->
tiff_tûes
[
i
].
tûes_tûecou¡
/
xuöt16
;

1141 if–
t2p
->
tiff_tûes
[
i
].
tûes_tûecou¡
 > 0){

1142 
t2p
->
pdf_xªfcou¡
 +=

1143 (
t2p
->
tiff_tûes
[
i
].
tûes_tûecou¡
 -1)*2;

1144 
	`TIFFGëFõld
(
öput
,

1145 
TIFFTAG_TILEWIDTH
,

1146 &–
t2p
->
tiff_tûes
[
i
].
tûes_tûewidth
) );

1147 
	`TIFFGëFõld
(
öput
,

1148 
TIFFTAG_TILELENGTH
,

1149 &–
t2p
->
tiff_tûes
[
i
].
tûes_tûñígth
) );

1150 
t2p
->
tiff_tûes
[
i
].
tûes_tûes
 =

1151 (
T2P_TILE
*Ë
	`_TIFFmÆloc
(

1152 
t2p
->
tiff_tûes
[
i
].
tûes_tûecou¡


1153 * (
T2P_TILE
) );

1154 if–
t2p
->
tiff_tûes
[
i
].
tûes_tûes
 =
NULL
){

1155 
	`TIFFEº‹
(

1156 
TIFF2PDF_MODULE
,

1158 (Ë
t2p
->
tiff_tûes
[
i
].
tûes_tûecou¡
 * (
T2P_TILE
),

1159 
	`TIFFFûeName
(
öput
));

1160 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1167 
	}
}

1174 
	$t2p_cmp_t2p_∑ge
(c⁄° * 
e1
, c⁄° * 
e2
){

1176 –((
T2P_PAGE
*)
e1
)->
∑ge_numbî
 - ((T2P_PAGE*)
e2
)->page_number );

1177 
	}
}

1191 
	$t2p_ªad_tiff_d©a
(
T2P
* 
t2p
, 
TIFF
* 
öput
){

1193 
i
=0;

1194 
uöt16
* 
r
;

1195 
uöt16
* 
g
;

1196 
uöt16
* 
b
;

1197 
uöt16
* 
a
;

1198 
uöt16
 
xuöt16
;

1199 
uöt16
* 
xuöt16p
;

1200 * 
xÊﬂç
;

1202 
t2p
->
pdf_å™scode
 = 
T2P_TRANSCODE_ENCODE
;

1203 
t2p
->
pdf_ßm∂e
 = 
T2P_SAMPLE_NOTHING
;

1204 
t2p
->
pdf_swôchdecode
 =Å2p->
pdf_cﬁ‹•a˚_övît
;

1207 
	`TIFFSëDúe˘‹y
(
öput
, 
t2p
->
tiff_∑ges
[t2p->
pdf_∑ge
].
∑ge_dúe˘‹y
);

1209 
	`TIFFGëFõld
(
öput
, 
TIFFTAG_IMAGEWIDTH
, &(
t2p
->
tiff_width
));

1210 if(
t2p
->
tiff_width
 == 0){

1211 
	`TIFFEº‹
(

1212 
TIFF2PDF_MODULE
,

1214 
	`TIFFFûeName
(
öput
) );

1215 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1219 
	`TIFFGëFõld
(
öput
, 
TIFFTAG_IMAGELENGTH
, &(
t2p
->
tiff_Àngth
));

1220 if(
t2p
->
tiff_Àngth
 == 0){

1221 
	`TIFFEº‹
(

1222 
TIFF2PDF_MODULE
,

1224 
	`TIFFFûeName
(
öput
) );

1225 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1229 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_COMPRESSION
, &(
t2p
->
tiff_com¥essi⁄
)) == 0){

1230 
	`TIFFEº‹
(

1231 
TIFF2PDF_MODULE
,

1233 
	`TIFFFûeName
(
öput
) );

1234 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1238 if–
	`TIFFIsCODECC⁄figuªd
(
t2p
->
tiff_com¥essi⁄
) == 0){

1239 
	`TIFFEº‹
(

1240 
TIFF2PDF_MODULE
,

1242 
	`TIFFFûeName
(
öput
),

1243 
t2p
->
tiff_com¥essi⁄


1245 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1250 
	`TIFFGëFõldDeÁu…ed
(
öput
, 
TIFFTAG_BITSPERSAMPLE
, &(
t2p
->
tiff_bô•îßm∂e
));

1251 
t2p
->
tiff_bô•îßm∂e
){

1258 
	`TIFFW¨nög
(

1259 
TIFF2PDF_MODULE
,

1261 
	`TIFFFûeName
(
öput
));

1262 
t2p
->
tiff_bô•îßm∂e
=1;

1265 
	`TIFFEº‹
(

1266 
TIFF2PDF_MODULE
,

1268 
	`TIFFFûeName
(
öput
),

1269 
t2p
->
tiff_bô•îßm∂e
);

1270 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1274 
	`TIFFGëFõldDeÁu…ed
(
öput
, 
TIFFTAG_SAMPLESPERPIXEL
, &(
t2p
->
tiff_ßm∂e•îpixñ
));

1275 if(
t2p
->
tiff_ßm∂e•îpixñ
>4){

1276 
	`TIFFEº‹
(

1277 
TIFF2PDF_MODULE
,

1279 
	`TIFFFûeName
(
öput
),

1280 
t2p
->
tiff_ßm∂e•îpixñ
);

1281 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1284 if(
t2p
->
tiff_ßm∂e•îpixñ
==0){

1285 
	`TIFFW¨nög
(

1286 
TIFF2PDF_MODULE
,

1288 
	`TIFFFûeName
(
öput
));

1289 
t2p
->
tiff_ßm∂e•îpixñ
=1;

1292 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_SAMPLEFORMAT
, &
xuöt16
) != 0 ){

1293 
xuöt16
){

1299 
	`TIFFEº‹
(

1300 
TIFF2PDF_MODULE
,

1302 
	`TIFFFûeName
(
öput
),

1303 
xuöt16
);

1304 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1310 
	`TIFFGëFõldDeÁu…ed
(
öput
, 
TIFFTAG_FILLORDER
, &(
t2p
->
tiff_fûl‹dî
));

1312 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_PHOTOMETRIC
, &(
t2p
->
tiff_phŸomëric
)) == 0){

1313 
	`TIFFEº‹
(

1314 
TIFF2PDF_MODULE
,

1316 
	`TIFFFûeName
(
öput
) );

1317 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1322 
t2p
->
tiff_phŸomëric
){

1323 
PHOTOMETRIC_MINISWHITE
:

1324 
PHOTOMETRIC_MINISBLACK
:

1325 i‡(
t2p
->
tiff_bô•îßm∂e
==1){

1326 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_BILEVEL
;

1327 if(
t2p
->
tiff_phŸomëric
==
PHOTOMETRIC_MINISWHITE
){

1328 
t2p
->
pdf_swôchdecode
 ^= 1;

1331 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_GRAY
;

1332 if(
t2p
->
tiff_phŸomëric
==
PHOTOMETRIC_MINISWHITE
){

1333 
t2p
->
pdf_swôchdecode
 ^= 1;

1337 
PHOTOMETRIC_RGB
:

1338 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_RGB
;

1339 if(
t2p
->
tiff_ßm∂e•îpixñ
 == 3){

1342 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_INDEXED
, &
xuöt16
)){

1343 if(
xuöt16
==1)

1344 
phŸomëric_∑Àâe
;

1346 if(
t2p
->
tiff_ßm∂e•îpixñ
 > 3) {

1347 if(
t2p
->
tiff_ßm∂e•îpixñ
 == 4) {

1348 
t2p
->
pdf_cﬁ‹•a˚
 = 
T2P_CS_RGB
;

1349 if(
	`TIFFGëFõld
(
öput
,

1350 
TIFFTAG_EXTRASAMPLES
,

1351 &
xuöt16
, &
xuöt16p
)

1352 && 
xuöt16
 == 1) {

1353 if(
xuöt16p
[0] =
EXTRASAMPLE_ASSOCALPHA
){

1354 
t2p
->
pdf_ßm∂e
=
T2P_SAMPLE_RGBAA_TO_RGB
;

1357 if(
xuöt16p
[0] =
EXTRASAMPLE_UNASSALPHA
){

1358 
t2p
->
pdf_ßm∂e
=
T2P_SAMPLE_RGBA_TO_RGB
;

1361 
	`TIFFW¨nög
(

1362 
TIFF2PDF_MODULE
,

1364 
	`TIFFFûeName
(
öput
));

1367 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_CMYK
;

1368 
t2p
->
pdf_swôchdecode
 ^= 1;

1369 
	`TIFFW¨nög
(

1370 
TIFF2PDF_MODULE
,

1372 
	`TIFFFûeName
(
öput
));

1375 
	`TIFFEº‹
(

1376 
TIFF2PDF_MODULE
,

1378 
	`TIFFFûeName
(
öput
),

1379 
t2p
->
tiff_ßm∂e•îpixñ
);

1380 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1384 
	`TIFFEº‹
(

1385 
TIFF2PDF_MODULE
,

1387 
	`TIFFFûeName
(
öput
),

1388 
t2p
->
tiff_ßm∂e•îpixñ
);

1389 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1392 
PHOTOMETRIC_PALETTE
:

1393 
phŸomëric_∑Àâe
:

1394 if(
t2p
->
tiff_ßm∂e•îpixñ
!=1){

1395 
	`TIFFEº‹
(

1396 
TIFF2PDF_MODULE
,

1398 
	`TIFFFûeName
(
öput
));

1399 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1402 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_RGB
 | 
T2P_CS_PALETTE
;

1403 
t2p
->
pdf_∑Àâesize
=0x0001<<t2p->
tiff_bô•îßm∂e
;

1404 if(!
	`TIFFGëFõld
(
öput
, 
TIFFTAG_COLORMAP
, &
r
, &
g
, &
b
)){

1405 
	`TIFFEº‹
(

1406 
TIFF2PDF_MODULE
,

1408 
	`TIFFFûeName
(
öput
));

1409 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1412 if(
t2p
->
pdf_∑Àâe
 !
NULL
){

1413 
	`_TIFF‰ì
(
t2p
->
pdf_∑Àâe
);

1414 
t2p
->
pdf_∑Àâe
=
NULL
;

1416 
t2p
->
pdf_∑Àâe
 = (*)

1417 
	`_TIFFmÆloc
(
t2p
->
pdf_∑Àâesize
*3);

1418 if(
t2p
->
pdf_∑Àâe
==
NULL
){

1419 
	`TIFFEº‹
(

1420 
TIFF2PDF_MODULE
,

1422 
t2p
->
pdf_∑Àâesize
,

1423 
	`TIFFFûeName
(
öput
));

1424 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1427 
i
=0;i<
t2p
->
pdf_∑Àâesize
;i++){

1428 
t2p
->
pdf_∑Àâe
[(
i
*3)] = (Ë(
r
[i]>>8);

1429 
t2p
->
pdf_∑Àâe
[(
i
*3)+1](Ë(
g
[i]>>8);

1430 
t2p
->
pdf_∑Àâe
[(
i
*3)+2](Ë(
b
[i]>>8);

1432 
t2p
->
pdf_∑Àâesize
 *= 3;

1434 
PHOTOMETRIC_SEPARATED
:

1435 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_INDEXED
, &
xuöt16
)){

1436 if(
xuöt16
==1){

1437 
phŸomëric_∑Àâe_cmyk
;

1440 if–
	`TIFFGëFõld
(
öput
, 
TIFFTAG_INKSET
, &
xuöt16
) ){

1441 if(
xuöt16
 !
INKSET_CMYK
){

1442 
	`TIFFEº‹
(

1443 
TIFF2PDF_MODULE
,

1445 
	`TIFFFûeName
(
öput
) );

1446 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1450 if(
t2p
->
tiff_ßm∂e•îpixñ
==4){

1451 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_CMYK
;

1453 
	`TIFFEº‹
(

1454 
TIFF2PDF_MODULE
,

1456 
	`TIFFFûeName
(
öput
),

1457 
t2p
->
tiff_ßm∂e•îpixñ
);

1458 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1462 
phŸomëric_∑Àâe_cmyk
:

1463 if(
t2p
->
tiff_ßm∂e•îpixñ
!=1){

1464 
	`TIFFEº‹
(

1465 
TIFF2PDF_MODULE
,

1467 
	`TIFFFûeName
(
öput
));

1468 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1471 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_CMYK
 | 
T2P_CS_PALETTE
;

1472 
t2p
->
pdf_∑Àâesize
=0x0001<<t2p->
tiff_bô•îßm∂e
;

1473 if(!
	`TIFFGëFõld
(
öput
, 
TIFFTAG_COLORMAP
, &
r
, &
g
, &
b
, &
a
)){

1474 
	`TIFFEº‹
(

1475 
TIFF2PDF_MODULE
,

1477 
	`TIFFFûeName
(
öput
));

1478 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1481 if(
t2p
->
pdf_∑Àâe
 !
NULL
){

1482 
	`_TIFF‰ì
(
t2p
->
pdf_∑Àâe
);

1483 
t2p
->
pdf_∑Àâe
=
NULL
;

1485 
t2p
->
pdf_∑Àâe
 = (*)

1486 
	`_TIFFmÆloc
(
t2p
->
pdf_∑Àâesize
*4);

1487 if(
t2p
->
pdf_∑Àâe
==
NULL
){

1488 
	`TIFFEº‹
(

1489 
TIFF2PDF_MODULE
,

1491 
t2p
->
pdf_∑Àâesize
,

1492 
	`TIFFFûeName
(
öput
));

1493 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1496 
i
=0;i<
t2p
->
pdf_∑Àâesize
;i++){

1497 
t2p
->
pdf_∑Àâe
[(
i
*4)] = (Ë(
r
[i]>>8);

1498 
t2p
->
pdf_∑Àâe
[(
i
*4)+1](Ë(
g
[i]>>8);

1499 
t2p
->
pdf_∑Àâe
[(
i
*4)+2](Ë(
b
[i]>>8);

1500 
t2p
->
pdf_∑Àâe
[(
i
*4)+3](Ë(
a
[i]>>8);

1502 
t2p
->
pdf_∑Àâesize
 *= 4;

1504 
PHOTOMETRIC_YCBCR
:

1505 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_RGB
;

1506 if(
t2p
->
tiff_ßm∂e•îpixñ
==1){

1507 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_GRAY
;

1508 
t2p
->
tiff_phŸomëric
=
PHOTOMETRIC_MINISBLACK
;

1511 
t2p
->
pdf_ßm∂e
=
T2P_SAMPLE_YCBCR_TO_RGB
;

1512 #ifde‡
JPEG_SUPPORT


1513 if(
t2p
->
pdf_deÁu…com¥essi⁄
==
T2P_COMPRESS_JPEG
){

1514 
t2p
->
pdf_ßm∂e
=
T2P_SAMPLE_NOTHING
;

1518 
PHOTOMETRIC_CIELAB
:

1519 
t2p
->
pdf_œbønge
[0]= -127;

1520 
t2p
->
pdf_œbønge
[1]= 127;

1521 
t2p
->
pdf_œbønge
[2]= -127;

1522 
t2p
->
pdf_œbønge
[3]= 127;

1523 
t2p
->
pdf_ßm∂e
=
T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
;

1524 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_LAB
;

1526 
PHOTOMETRIC_ICCLAB
:

1527 
t2p
->
pdf_œbønge
[0]= 0;

1528 
t2p
->
pdf_œbønge
[1]= 255;

1529 
t2p
->
pdf_œbønge
[2]= 0;

1530 
t2p
->
pdf_œbønge
[3]= 255;

1531 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_LAB
;

1533 
PHOTOMETRIC_ITULAB
:

1534 
t2p
->
pdf_œbønge
[0]=-85;

1535 
t2p
->
pdf_œbønge
[1]=85;

1536 
t2p
->
pdf_œbønge
[2]=-75;

1537 
t2p
->
pdf_œbønge
[3]=124;

1538 
t2p
->
pdf_ßm∂e
=
T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
;

1539 
t2p
->
pdf_cﬁ‹•a˚
=
T2P_CS_LAB
;

1541 
PHOTOMETRIC_LOGL
:

1542 
PHOTOMETRIC_LOGLUV
:

1543 
	`TIFFEº‹
(

1544 
TIFF2PDF_MODULE
,

1546 
	`TIFFFûeName
(
öput
));

1547 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1550 
	`TIFFEº‹
(

1551 
TIFF2PDF_MODULE
,

1553 
	`TIFFFûeName
(
öput
),

1554 
t2p
->
tiff_phŸomëric
);

1555 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1559 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_PLANARCONFIG
, &(
t2p
->
tiff_∂™¨
))){

1560 
t2p
->
tiff_∂™¨
){

1562 
	`TIFFW¨nög
(

1563 
TIFF2PDF_MODULE
,

1565 
	`TIFFFûeName
(
öput
));

1566 
t2p
->
tiff_∂™¨
=
PLANARCONFIG_CONTIG
;

1567 
PLANARCONFIG_CONTIG
:

1569 
PLANARCONFIG_SEPARATE
:

1570 
t2p
->
pdf_ßm∂e
=
T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
;

1571 if(
t2p
->
tiff_bô•îßm∂e
!=8){

1572 
	`TIFFEº‹
(

1573 
TIFF2PDF_MODULE
,

1575 
	`TIFFFûeName
(
öput
),

1576 
t2p
->
tiff_bô•îßm∂e
);

1577 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1582 
	`TIFFEº‹
(

1583 
TIFF2PDF_MODULE
,

1585 
	`TIFFFûeName
(
öput
),

1586 
t2p
->
tiff_∂™¨
);

1587 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1592 
	`TIFFGëFõldDeÁu…ed
(
öput
, 
TIFFTAG_ORIENTATION
,

1593 &(
t2p
->
tiff_‹õ¡©i⁄
));

1594 if(
t2p
->
tiff_‹õ¡©i⁄
>8){

1595 
	`TIFFW¨nög
(
TIFF2PDF_MODULE
,

1597 
	`TIFFFûeName
(
öput
), 
t2p
->
tiff_‹õ¡©i⁄
);

1598 
t2p
->
tiff_‹õ¡©i⁄
=0;

1601 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_XRESOLUTION
, &(
t2p
->
tiff_xªs
) ) == 0){

1602 
t2p
->
tiff_xªs
=0.0;

1604 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_YRESOLUTION
, &(
t2p
->
tiff_yªs
) ) == 0){

1605 
t2p
->
tiff_yªs
=0.0;

1607 
	`TIFFGëFõldDeÁu…ed
(
öput
, 
TIFFTAG_RESOLUTIONUNIT
,

1608 &(
t2p
->
tiff_ªsunô
));

1609 if(
t2p
->
tiff_ªsunô
 =
RESUNIT_CENTIMETER
) {

1610 
t2p
->
tiff_xªs
 *= 2.54F;

1611 
t2p
->
tiff_yªs
 *= 2.54F;

1612 } i‡(
t2p
->
tiff_ªsunô
 !
RESUNIT_INCH


1613 && 
t2p
->
pdf_˚¡imëîs
 != 0) {

1614 
t2p
->
tiff_xªs
 *= 2.54F;

1615 
t2p
->
tiff_yªs
 *= 2.54F;

1618 
	`t2p_compo£_pdf_∑ge
(
t2p
);

1620 
t2p
->
pdf_å™scode
 = 
T2P_TRANSCODE_ENCODE
;

1621 if(
t2p
->
pdf_n›as°hrough
==0){

1622 #ifde‡
CCITT_SUPPORT


1623 if(
t2p
->
tiff_com¥essi⁄
==
COMPRESSION_CCITTFAX4


1625 if(
	`TIFFIsTûed
(
öput
Ë|| (
	`TIFFNumbîOfSåùs
(input)==1) ){

1626 
t2p
->
pdf_å™scode
 = 
T2P_TRANSCODE_RAW
;

1627 
t2p
->
pdf_com¥essi⁄
=
T2P_COMPRESS_G4
;

1631 #ifde‡
ZIP_SUPPORT


1632 if(
t2p
->
tiff_com¥essi⁄
=
COMPRESSION_ADOBE_DEFLATE


1633 || 
t2p
->
tiff_com¥essi⁄
==
COMPRESSION_DEFLATE
){

1634 if(
	`TIFFIsTûed
(
öput
Ë|| (
	`TIFFNumbîOfSåùs
(input)==1) ){

1635 
t2p
->
pdf_å™scode
 = 
T2P_TRANSCODE_RAW
;

1636 
t2p
->
pdf_com¥essi⁄
=
T2P_COMPRESS_ZIP
;

1640 #ifde‡
OJPEG_SUPPORT


1641 if(
t2p
->
tiff_com¥essi⁄
==
COMPRESSION_OJPEG
){

1642 
t2p
->
pdf_å™scode
 = 
T2P_TRANSCODE_RAW
;

1643 
t2p
->
pdf_com¥essi⁄
=
T2P_COMPRESS_JPEG
;

1644 
	`t2p_¥o˚ss_oj≥g_èbÀs
(
t2p
, 
öput
);

1647 #ifde‡
JPEG_SUPPORT


1648 if(
t2p
->
tiff_com¥essi⁄
==
COMPRESSION_JPEG
){

1649 
t2p
->
pdf_å™scode
 = 
T2P_TRANSCODE_RAW
;

1650 
t2p
->
pdf_com¥essi⁄
=
T2P_COMPRESS_JPEG
;

1656 if(
t2p
->
pdf_å™scode
!=
T2P_TRANSCODE_RAW
){

1657 
t2p
->
pdf_com¥essi⁄
 =Å2p->
pdf_deÁu…com¥essi⁄
;

1660 #ifde‡
JPEG_SUPPORT


1661 if(
t2p
->
pdf_deÁu…com¥essi⁄
==
T2P_COMPRESS_JPEG
){

1662 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_PALETTE
){

1663 
t2p
->
pdf_ßm∂e
|=
T2P_SAMPLE_REALIZE_PALETTE
;

1664 
t2p
->
pdf_cﬁ‹•a˚
 ^
T2P_CS_PALETTE
;

1665 
t2p
->
tiff_∑ges
[t2p->
pdf_∑ge
].
∑ge_exåa
--;

1668 if(
t2p
->
tiff_com¥essi⁄
==
COMPRESSION_JPEG
){

1669 if(
t2p
->
tiff_∂™¨
==
PLANARCONFIG_SEPARATE
){

1670 
	`TIFFEº‹
(

1671 
TIFF2PDF_MODULE
,

1673 
	`TIFFFûeName
(
öput
));

1674 
t2p
->
t2p_îr‹
=
T2P_ERR_ERROR
;

1679 #ifde‡
OJPEG_SUPPORT


1680 if(
t2p
->
tiff_com¥essi⁄
==
COMPRESSION_OJPEG
){

1681 if(
t2p
->
tiff_∂™¨
==
PLANARCONFIG_SEPARATE
){

1682 
	`TIFFEº‹
(

1683 
TIFF2PDF_MODULE
,

1685 
	`TIFFFûeName
(
öput
));

1686 
t2p
->
t2p_îr‹
=
T2P_ERR_ERROR
;

1692 if(
t2p
->
pdf_ßm∂e
 & 
T2P_SAMPLE_REALIZE_PALETTE
){

1693 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_CMYK
){

1694 
t2p
->
tiff_ßm∂e•îpixñ
=4;

1695 
t2p
->
tiff_phŸomëric
=
PHOTOMETRIC_SEPARATED
;

1697 
t2p
->
tiff_ßm∂e•îpixñ
=3;

1698 
t2p
->
tiff_phŸomëric
=
PHOTOMETRIC_RGB
;

1702 i‡(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_TRANSFERFUNCTION
,

1703 &(
t2p
->
tiff_å™s„rfun˘i⁄
[0]),

1704 &(
t2p
->
tiff_å™s„rfun˘i⁄
[1]),

1705 &(
t2p
->
tiff_å™s„rfun˘i⁄
[2]))) {

1706 if(
t2p
->
tiff_å™s„rfun˘i⁄
[1] !=

1707 
t2p
->
tiff_å™s„rfun˘i⁄
[0]) {

1708 
t2p
->
tiff_å™s„rfun˘i⁄cou¡
=3;

1710 
t2p
->
tiff_å™s„rfun˘i⁄cou¡
=1;

1713 
t2p
->
tiff_å™s„rfun˘i⁄cou¡
=0;

1715 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_WHITEPOINT
, &
xÊﬂç
)!=0){

1716 
t2p
->
tiff_whôechrom©icôõs
[0]=
xÊﬂç
[0];

1717 
t2p
->
tiff_whôechrom©icôõs
[1]=
xÊﬂç
[1];

1718 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_GRAY
){

1719 
t2p
->
pdf_cﬁ‹•a˚
 |
T2P_CS_CALGRAY
;

1721 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_RGB
){

1722 
t2p
->
pdf_cﬁ‹•a˚
 |
T2P_CS_CALRGB
;

1725 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_PRIMARYCHROMATICITIES
, &
xÊﬂç
)!=0){

1726 
t2p
->
tiff_¥im¨ychrom©icôõs
[0]=
xÊﬂç
[0];

1727 
t2p
->
tiff_¥im¨ychrom©icôõs
[1]=
xÊﬂç
[1];

1728 
t2p
->
tiff_¥im¨ychrom©icôõs
[2]=
xÊﬂç
[2];

1729 
t2p
->
tiff_¥im¨ychrom©icôõs
[3]=
xÊﬂç
[3];

1730 
t2p
->
tiff_¥im¨ychrom©icôõs
[4]=
xÊﬂç
[4];

1731 
t2p
->
tiff_¥im¨ychrom©icôõs
[5]=
xÊﬂç
[5];

1732 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_RGB
){

1733 
t2p
->
pdf_cﬁ‹•a˚
 |
T2P_CS_CALRGB
;

1736 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_LAB
){

1737 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_WHITEPOINT
, &
xÊﬂç
) != 0){

1738 
t2p
->
tiff_whôechrom©icôõs
[0]=
xÊﬂç
[0];

1739 
t2p
->
tiff_whôechrom©icôõs
[1]=
xÊﬂç
[1];

1741 
t2p
->
tiff_whôechrom©icôõs
[0]=0.3457F;

1742 
t2p
->
tiff_whôechrom©icôõs
[1]=0.3585F;

1745 if(
	`TIFFGëFõld
(
öput
,

1746 
TIFFTAG_ICCPROFILE
,

1747 &(
t2p
->
tiff_ic˝rofûñígth
),

1748 &(
t2p
->
tiff_ic˝rofûe
))!=0){

1749 
t2p
->
pdf_cﬁ‹•a˚
 |
T2P_CS_ICCBASED
;

1751 
t2p
->
tiff_ic˝rofûñígth
=0;

1752 
t2p
->
tiff_ic˝rofûe
=
NULL
;

1755 #ifde‡
CCITT_SUPPORT


1756 if–
t2p
->
tiff_bô•îßm∂e
==1 &&

1757 
t2p
->
tiff_ßm∂e•îpixñ
==1){

1758 
t2p
->
pdf_com¥essi⁄
 = 
T2P_COMPRESS_G4
;

1764 
	}
}

1771 
	$t2p_ªad_tiff_size
(
T2P
* 
t2p
, 
TIFF
* 
öput
){

1773 
uöt64
* 
sbc
=
NULL
;

1774 #i‡
	`deföed
(
JPEG_SUPPORT
Ë|| deföed (
OJPEG_SUPPORT
)

1775 * 
j±
=
NULL
;

1776 
t°rù_t
 
i
=0;

1777 
t°rù_t
 
°rùcou¡
=0;

1779 #ifde‡
OJPEG_SUPPORT


1780 
tsize_t
 
k
 = 0;

1783 if(
t2p
->
pdf_å™scode
 =
T2P_TRANSCODE_RAW
){

1784 #ifde‡
CCITT_SUPPORT


1785 if(
t2p
->
pdf_com¥essi⁄
 =
T2P_COMPRESS_G4
 ){

1786 
	`TIFFGëFõld
(
öput
, 
TIFFTAG_STRIPBYTECOUNTS
, &
sbc
);

1787 
t2p
->
tiff_d©asize
=(
tmsize_t
)
sbc
[0];

1791 #ifde‡
ZIP_SUPPORT


1792 if(
t2p
->
pdf_com¥essi⁄
 =
T2P_COMPRESS_ZIP
){

1793 
	`TIFFGëFõld
(
öput
, 
TIFFTAG_STRIPBYTECOUNTS
, &
sbc
);

1794 
t2p
->
tiff_d©asize
=(
tmsize_t
)
sbc
[0];

1798 #ifde‡
OJPEG_SUPPORT


1799 if(
t2p
->
tiff_com¥essi⁄
 =
COMPRESSION_OJPEG
){

1800 if(!
	`TIFFGëFõld
(
öput
, 
TIFFTAG_STRIPBYTECOUNTS
, &
sbc
)){

1801 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

1803 
	`TIFFFûeName
(
öput
));

1804 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1807 
°rùcou¡
=
	`TIFFNumbîOfSåùs
(
öput
);

1808 
i
=0;i<
°rùcou¡
;i++){

1809 
k
 +
sbc
[
i
];

1811 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGIFOFFSET
, &(
t2p
->
tiff_d©aoff£t
))){

1812 if(
t2p
->
tiff_d©aoff£t
 != 0){

1813 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGIFBYTECOUNT
, &(
t2p
->
tiff_d©asize
))!=0){

1814 if(
t2p
->
tiff_d©asize
 < 
k
) {

1815 
t2p
->
pdf_oj≥giÊígth
Ò2p->
tiff_d©asize
;

1816 
t2p
->
tiff_d©asize
+=
k
;

1817 
t2p
->
tiff_d©asize
+=6;

1818 
t2p
->
tiff_d©asize
+=2*
°rùcou¡
;

1819 
	`TIFFW¨nög
(
TIFF2PDF_MODULE
,

1821 
	`TIFFFûeName
(
öput
));

1826 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

1828 
	`TIFFFûeName
(
öput
));

1829 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1834 
t2p
->
tiff_d©asize
+=
k
;

1835 
t2p
->
tiff_d©asize
+=2*
°rùcou¡
;

1836 
t2p
->
tiff_d©asize
+=2048;

1840 #ifde‡
JPEG_SUPPORT


1841 if(
t2p
->
tiff_com¥essi⁄
 =
COMPRESSION_JPEG
) {

1842 
uöt32
 
cou¡
 = 0;

1843 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGTABLES
, &
cou¡
, &
j±
) != 0 ){

1844 if(
cou¡
 > 4){

1845 
t2p
->
tiff_d©asize
 +
cou¡
;

1846 
t2p
->
tiff_d©asize
 -= 2;

1849 
t2p
->
tiff_d©asize
 = 2;

1851 
°rùcou¡
=
	`TIFFNumbîOfSåùs
(
öput
);

1852 if(!
	`TIFFGëFõld
(
öput
, 
TIFFTAG_STRIPBYTECOUNTS
, &
sbc
)){

1853 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

1855 
	`TIFFFûeName
(
öput
));

1856 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

1859 
i
=0;i<
°rùcou¡
;i++){

1860 
t2p
->
tiff_d©asize
 +
sbc
[
i
];

1861 
t2p
->
tiff_d©asize
 -=4;

1863 
t2p
->
tiff_d©asize
 +=2;

1869 
t2p
->
tiff_d©asize
=
	`TIFFSˇ∆öeSize
(
öput
Ë*Å2p->
tiff_Àngth
;

1870 if(
t2p
->
tiff_∂™¨
==
PLANARCONFIG_SEPARATE
){

1871 
t2p
->
tiff_d©asize
*t2p->
tiff_ßm∂e•îpixñ
;

1875 
	}
}

1882 
	$t2p_ªad_tiff_size_tûe
(
T2P
* 
t2p
, 
TIFF
* 
öput
, 
âûe_t
 
tûe
){

1884 
uöt64
* 
tbc
 = 
NULL
;

1885 
uöt16
 
edge
=0;

1886 #ifde‡
JPEG_SUPPORT


1887 * 
j±
;

1890 
edge
 |
	`t2p_tûe_is_right_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
);

1891 
edge
 |
	`t2p_tûe_is_bŸtom_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
);

1893 if(
t2p
->
pdf_å™scode
==
T2P_TRANSCODE_RAW
){

1894 if(
edge


1895 #i‡
	`deföed
(
JPEG_SUPPORT
Ë|| deföed(
OJPEG_SUPPORT
)

1896 && !(
t2p
->
pdf_com¥essi⁄
==
T2P_COMPRESS_JPEG
)

1899 
t2p
->
tiff_d©asize
=
	`TIFFTûeSize
(
öput
);

1902 
	`TIFFGëFõld
(
öput
, 
TIFFTAG_TILEBYTECOUNTS
, &
tbc
);

1903 
t2p
->
tiff_d©asize
=(
tmsize_t
)
tbc
[
tûe
];

1904 #ifde‡
OJPEG_SUPPORT


1905 if(
t2p
->
tiff_com¥essi⁄
==
COMPRESSION_OJPEG
){

1906 
t2p
->
tiff_d©asize
+=2048;

1910 #ifde‡
JPEG_SUPPORT


1911 if(
t2p
->
tiff_com¥essi⁄
==
COMPRESSION_JPEG
) {

1912 
uöt32
 
cou¡
 = 0;

1913 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGTABLES
, &
cou¡
, &
j±
)!=0){

1914 if(
cou¡
 > 4){

1915 
t2p
->
tiff_d©asize
 +
cou¡
;

1916 
t2p
->
tiff_d©asize
 -= 2;

1924 
t2p
->
tiff_d©asize
=
	`TIFFTûeSize
(
öput
);

1925 if(
t2p
->
tiff_∂™¨
==
PLANARCONFIG_SEPARATE
){

1926 
t2p
->
tiff_d©asize
*t2p->
tiff_ßm∂e•îpixñ
;

1930 
	}
}

1937 
	$t2p_tûe_is_right_edge
(
T2P_TILES
 
tûes
, 
âûe_t
 
tûe
){

1939 if–((
tûe
+1Ë% 
tûes
.
tûes_tûecou¡x
 == 0)

1940 && (
tûes
.
tûes_edgëûewidth
 != 0) ){

1945 
	}
}

1952 
	$t2p_tûe_is_bŸtom_edge
(
T2P_TILES
 
tûes
, 
âûe_t
 
tûe
){

1954 if–((
tûe
+1Ë> (
tûes
.
tûes_tûecou¡
-tûes.
tûes_tûecou¡x
) )

1955 && (
tûes
.
tûes_edgëûñígth
 != 0) ){

1960 
	}
}

1967 
	$t2p_tûe_is_edge
(
T2P_TILES
 
tûes
, 
âûe_t
 
tûe
){

1969 (
	`t2p_tûe_is_right_edge
(
tûes
, 
tûe
Ë| 
	`t2p_tûe_is_bŸtom_edge
(tiles,Åile) );

1970 
	}
}

1977 
	$t2p_tûe_is_c‹√r_edge
(
T2P_TILES
 
tûes
, 
âûe_t
 
tûe
){

1979 (
	`t2p_tûe_is_right_edge
(
tûes
, 
tûe
Ë& 
	`t2p_tûe_is_bŸtom_edge
(tiles,Åile) );

1980 
	}
}

1989 
tsize_t
 
	$t2p_ªadwrôe_pdf_image
(
T2P
* 
t2p
, 
TIFF
* 
öput
, TIFF* 
ouçut
){

1991 
tsize_t
 
wrôãn
=0;

1992 * 
buf„r
=
NULL
;

1993 * 
ßm∂ebuf„r
=
NULL
;

1994 
tsize_t
 
buf„roff£t
=0;

1995 
tsize_t
 
ßm∂ebuf„roff£t
=0;

1996 
tsize_t
 
ªad
=0;

1997 
t°rù_t
 
i
=0;

1998 
t°rù_t
 
j
=0;

1999 
t°rù_t
 
°rùcou¡
=0;

2000 
tsize_t
 
°rùsize
=0;

2001 
tsize_t
 
£p°rùcou¡
=0;

2002 
tsize_t
 
£p°rùsize
=0;

2003 #ifde‡
OJPEG_SUPPORT


2004 
toff_t
 
öputoff£t
=0;

2005 
uöt16
 
h_ßmp
=1;

2006 
uöt16
 
v_ßmp
=1;

2007 
uöt16
 
ri
=1;

2008 
uöt32
 
rows
=0;

2010 #ifde‡
JPEG_SUPPORT


2011 * 
j±
;

2012 * 
xÊﬂç
;

2013 
uöt64
* 
sbc
;

2014 * 
°rùbuf„r
;

2015 
tsize_t
 
°rùÀngth
=0;

2016 
uöt32
 
max_°rùÀngth
=0;

2019 if(
t2p
->
pdf_å™scode
 =
T2P_TRANSCODE_RAW
){

2020 #ifde‡
CCITT_SUPPORT


2021 if(
t2p
->
pdf_com¥essi⁄
 =
T2P_COMPRESS_G4
){

2022 
buf„r
 = (*)

2023 
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2024 i‡(
buf„r
 =
NULL
) {

2025 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2027 (Ë
t2p
->
tiff_d©asize
,

2028 
	`TIFFFûeName
(
öput
));

2029 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2032 
	`TIFFRódRawSåù
(
öput
, 0, (
td©a_t
Ë
buf„r
,

2033 
t2p
->
tiff_d©asize
);

2034 i‡(
t2p
->
tiff_fûl‹dî
==
FILLORDER_LSB2MSB
){

2039 
	`TIFFRevî£Bôs
(
buf„r
,

2040 
t2p
->
tiff_d©asize
);

2042 
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
,

2043 
t2p
->
tiff_d©asize
);

2044 
	`_TIFF‰ì
(
buf„r
);

2045 (
t2p
->
tiff_d©asize
);

2048 #ifde‡
ZIP_SUPPORT


2049 i‡(
t2p
->
pdf_com¥essi⁄
 =
T2P_COMPRESS_ZIP
) {

2050 
buf„r
 = (*)

2051 
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2052 if(
buf„r
 =
NULL
){

2053 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2055 (Ë
t2p
->
tiff_d©asize
,

2056 
	`TIFFFûeName
(
öput
));

2057 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2060 
	`mem£t
(
buf„r
, 0, 
t2p
->
tiff_d©asize
);

2061 
	`TIFFRódRawSåù
(
öput
, 0, (
td©a_t
Ë
buf„r
,

2062 
t2p
->
tiff_d©asize
);

2063 i‡(
t2p
->
tiff_fûl‹dî
==
FILLORDER_LSB2MSB
) {

2064 
	`TIFFRevî£Bôs
(
buf„r
,

2065 
t2p
->
tiff_d©asize
);

2067 
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
,

2068 
t2p
->
tiff_d©asize
);

2069 
	`_TIFF‰ì
(
buf„r
);

2070 (
t2p
->
tiff_d©asize
);

2073 #ifde‡
OJPEG_SUPPORT


2074 if(
t2p
->
tiff_com¥essi⁄
 =
COMPRESSION_OJPEG
) {

2076 if(
t2p
->
tiff_d©aoff£t
 != 0) {

2077 
buf„r
 = (*)

2078 
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2079 if(
buf„r
 =
NULL
) {

2080 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2082 (Ë
t2p
->
tiff_d©asize
,

2083 
	`TIFFFûeName
(
öput
));

2084 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2087 
	`mem£t
(
buf„r
, 0, 
t2p
->
tiff_d©asize
);

2088 if(
t2p
->
pdf_oj≥giÊígth
==0){

2089 
öputoff£t
=
	`t2pSìkFûe
(
öput
, 0,

2090 
SEEK_CUR
);

2091 
	`t2pSìkFûe
(
öput
,

2092 
t2p
->
tiff_d©aoff£t
,

2093 
SEEK_SET
);

2094 
	`t2pRódFûe
(
öput
, (
td©a_t
Ë
buf„r
,

2095 
t2p
->
tiff_d©asize
);

2096 
	`t2pSìkFûe
(
öput
, 
öputoff£t
,

2097 
SEEK_SET
);

2098 
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
,

2099 
t2p
->
tiff_d©asize
);

2100 
	`_TIFF‰ì
(
buf„r
);

2101 (
t2p
->
tiff_d©asize
);

2103 
öputoff£t
=
	`t2pSìkFûe
(
öput
, 0,

2104 
SEEK_CUR
);

2105 
	`t2pSìkFûe
(
öput
,

2106 
t2p
->
tiff_d©aoff£t
,

2107 
SEEK_SET
);

2108 
buf„roff£t
 = 
	`t2pRódFûe
(
öput
,

2109 (
td©a_t
Ë
buf„r
,

2110 
t2p
->
pdf_oj≥giÊígth
);

2111 
t2p
->
pdf_oj≥giÊígth
 = 0;

2112 
	`t2pSìkFûe
(
öput
, 
öputoff£t
,

2113 
SEEK_SET
);

2114 
	`TIFFGëFõld
(
öput
,

2115 
TIFFTAG_YCBCRSUBSAMPLING
,

2116 &
h_ßmp
, &
v_ßmp
);

2117 
buf„r
[
buf„roff£t
++]= 0xff;

2118 
buf„r
[
buf„roff£t
++]= 0xdd;

2119 
buf„r
[
buf„roff£t
++]= 0x00;

2120 
buf„r
[
buf„roff£t
++]= 0x04;

2121 
h_ßmp
*=8;

2122 
v_ßmp
*=8;

2123 
ri
=(
t2p
->
tiff_width
+
h_ßmp
-1) / h_samp;

2124 
	`TIFFGëFõld
(
öput
,

2125 
TIFFTAG_ROWSPERSTRIP
,

2126 &
rows
);

2127 
ri
*=(
rows
+
v_ßmp
-1)/v_samp;

2128 
buf„r
[
buf„roff£t
++](
ri
>>8) & 0xff;

2129 
buf„r
[
buf„roff£t
++]
ri
 & 0xff;

2130 
°rùcou¡
=
	`TIFFNumbîOfSåùs
(
öput
);

2131 
i
=0;i<
°rùcou¡
;i++){

2132 if(
i
 != 0 ){

2133 
buf„r
[
buf„roff£t
++]=0xff;

2134 
buf„r
[
buf„roff£t
++]=(0xd0 | ((
i
-1)%8));

2136 
buf„roff£t
+=
	`TIFFRódRawSåù
(
öput
,

2137 
i
,

2138 (
td©a_t
Ë&(((*)
buf„r
)[
buf„roff£t
]),

2141 
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buf„roff£t
);

2142 
	`_TIFF‰ì
(
buf„r
);

2143 (
buf„roff£t
);

2146 if(! 
t2p
->
pdf_oj≥gd©a
){

2147 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2149 
	`TIFFFûeName
(
öput
));

2150 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2153 
buf„r
 = (*)

2154 
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2155 if(
buf„r
==
NULL
){

2156 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2158 (Ë
t2p
->
tiff_d©asize
,

2159 
	`TIFFFûeName
(
öput
));

2160 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2163 
	`mem£t
(
buf„r
, 0, 
t2p
->
tiff_d©asize
);

2164 
	`_TIFFmem˝y
(
buf„r
, 
t2p
->
pdf_oj≥gd©a
,Å2p->
pdf_oj≥gd©Æígth
);

2165 
buf„roff£t
=
t2p
->
pdf_oj≥gd©Æígth
;

2166 
°rùcou¡
=
	`TIFFNumbîOfSåùs
(
öput
);

2167 
i
=0;i<
°rùcou¡
;i++){

2168 if(
i
 != 0){

2169 
buf„r
[
buf„roff£t
++]=0xff;

2170 
buf„r
[
buf„roff£t
++]=(0xd0 | ((
i
-1)%8));

2172 
buf„roff£t
+=
	`TIFFRódRawSåù
(
öput
,

2173 
i
,

2174 (
td©a_t
Ë&(((*)
buf„r
)[
buf„roff£t
]),

2177 if–! ( (
buf„r
[
buf„roff£t
-1]==0xd9) && (buffer[bufferoffset-2]==0xff) ) ){

2178 
buf„r
[
buf„roff£t
++]=0xff;

2179 
buf„r
[
buf„roff£t
++]=0xd9;

2181 
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buf„roff£t
);

2182 
	`_TIFF‰ì
(
buf„r
);

2183 (
buf„roff£t
);

2184 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2186 
	`TIFFFûeName
(
öput
));

2187 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2190 (
t2p
->
tiff_d©asize
);

2193 #ifde‡
JPEG_SUPPORT


2194 if(
t2p
->
tiff_com¥essi⁄
 =
COMPRESSION_JPEG
) {

2195 
uöt32
 
cou¡
 = 0;

2196 
buf„r
 = (*)

2197 
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2198 if(
buf„r
==
NULL
){

2199 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2201 (Ë
t2p
->
tiff_d©asize
,

2202 
	`TIFFFûeName
(
öput
));

2203 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2206 
	`mem£t
(
buf„r
, 0, 
t2p
->
tiff_d©asize
);

2207 i‡(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGTABLES
, &
cou¡
, &
j±
) != 0) {

2208 if(
cou¡
 > 4) {

2209 
	`_TIFFmem˝y
(
buf„r
, 
j±
, 
cou¡
);

2210 
buf„roff£t
 +
cou¡
 - 2;

2213 
°rùcou¡
=
	`TIFFNumbîOfSåùs
(
öput
);

2214 
	`TIFFGëFõld
(
öput
, 
TIFFTAG_STRIPBYTECOUNTS
, &
sbc
);

2215 
i
=0;i<
°rùcou¡
;i++){

2216 if(
sbc
[
i
]>
max_°rùÀngth
) max_striplength=sbc[i];

2218 
°rùbuf„r
 = (*)

2219 
	`_TIFFmÆloc
(
max_°rùÀngth
);

2220 if(
°rùbuf„r
==
NULL
){

2221 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2223 
max_°rùÀngth
,

2224 
	`TIFFFûeName
(
öput
));

2225 
	`_TIFF‰ì
(
buf„r
);

2226 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2229 
i
=0;i<
°rùcou¡
;i++){

2230 
°rùÀngth
=
	`TIFFRódRawSåù
(
öput
, 
i
, (
td©a_t
Ë
°rùbuf„r
, -1);

2231 if(!
	`t2p_¥o˚ss_j≥g_°rù
(

2232 
°rùbuf„r
,

2233 &
°rùÀngth
,

2234 
buf„r
,

2235 &
buf„roff£t
,

2236 
i
,

2237 
t2p
->
tiff_Àngth
)){

2238 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2240 
	`TIFFFûeName
(
öput
));

2241 
	`_TIFF‰ì
(
ßm∂ebuf„r
);

2242 
	`_TIFF‰ì
(
buf„r
);

2243 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2247 
buf„r
[
buf„roff£t
++]=0xff;

2248 
buf„r
[
buf„roff£t
++]=0xd9;

2249 
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buf„roff£t
);

2250 
	`_TIFF‰ì
(
°rùbuf„r
);

2251 
	`_TIFF‰ì
(
buf„r
);

2252 (
buf„roff£t
);

2258 if(
t2p
->
pdf_ßm∂e
==
T2P_SAMPLE_NOTHING
){

2259 
buf„r
 = (*Ë
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2260 if(
buf„r
==
NULL
){

2261 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2263 (Ë
t2p
->
tiff_d©asize
,

2264 
	`TIFFFûeName
(
öput
));

2265 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2268 
	`mem£t
(
buf„r
, 0, 
t2p
->
tiff_d©asize
);

2269 
°rùsize
=
	`TIFFSåùSize
(
öput
);

2270 
°rùcou¡
=
	`TIFFNumbîOfSåùs
(
öput
);

2271 
i
=0;i<
°rùcou¡
;i++){

2272 
ªad
 =

2273 
	`TIFFRódEncodedSåù
(
öput
,

2274 
i
,

2275 (
td©a_t
Ë&
buf„r
[
buf„roff£t
],

2276 
°rùsize
);

2277 if(
ªad
==-1){

2278 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2280 
i
,

2281 
	`TIFFFûeName
(
öput
));

2282 
	`_TIFF‰ì
(
buf„r
);

2283 
t2p
->
t2p_îr‹
=
T2P_ERR_ERROR
;

2286 
buf„roff£t
+=
ªad
;

2289 if(
t2p
->
pdf_ßm∂e
 & 
T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
){

2291 
£p°rùsize
=
	`TIFFSåùSize
(
öput
);

2292 
£p°rùcou¡
=
	`TIFFNumbîOfSåùs
(
öput
);

2294 
°rùsize
=
£p°rùsize
*
t2p
->
tiff_ßm∂e•îpixñ
;

2295 
°rùcou¡
=
£p°rùcou¡
/
t2p
->
tiff_ßm∂e•îpixñ
;

2297 
buf„r
 = (*Ë
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2298 if(
buf„r
==
NULL
){

2299 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2301 (Ë
t2p
->
tiff_d©asize
,

2302 
	`TIFFFûeName
(
öput
));

2303 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2306 
	`mem£t
(
buf„r
, 0, 
t2p
->
tiff_d©asize
);

2307 
ßm∂ebuf„r
 = (*Ë
	`_TIFFmÆloc
(
°rùsize
);

2308 if(
ßm∂ebuf„r
==
NULL
){

2309 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2311 (Ë
t2p
->
tiff_d©asize
,

2312 
	`TIFFFûeName
(
öput
));

2313 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2316 
i
=0;i<
°rùcou¡
;i++){

2317 
ßm∂ebuf„roff£t
=0;

2318 
j
=0;j<
t2p
->
tiff_ßm∂e•îpixñ
;j++){

2319 
ªad
 =

2320 
	`TIFFRódEncodedSåù
(
öput
,

2321 
i
 + 
j
*
°rùcou¡
,

2322 (
td©a_t
Ë&(
ßm∂ebuf„r
[
ßm∂ebuf„roff£t
]),

2323 
£p°rùsize
);

2324 if(
ªad
==-1){

2325 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2327 
i
 + 
j
*
°rùcou¡
,

2328 
	`TIFFFûeName
(
öput
));

2329 
	`_TIFF‰ì
(
buf„r
);

2330 
t2p
->
t2p_îr‹
=
T2P_ERR_ERROR
;

2333 
ßm∂ebuf„roff£t
+=
ªad
;

2335 
	`t2p_ßm∂e_∂™¨_£∑øã_to_c⁄tig
(

2336 
t2p
,

2337 &(
buf„r
[
buf„roff£t
]),

2338 
ßm∂ebuf„r
,

2339 
ßm∂ebuf„roff£t
);

2340 
buf„roff£t
+=
ßm∂ebuf„roff£t
;

2342 
	`_TIFF‰ì
(
ßm∂ebuf„r
);

2343 
d©¨ódy
;

2346 
buf„r
 = (*Ë
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2347 if(
buf„r
==
NULL
){

2348 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2350 (Ë
t2p
->
tiff_d©asize
,

2351 
	`TIFFFûeName
(
öput
));

2352 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2355 
	`mem£t
(
buf„r
, 0, 
t2p
->
tiff_d©asize
);

2356 
°rùsize
=
	`TIFFSåùSize
(
öput
);

2357 
°rùcou¡
=
	`TIFFNumbîOfSåùs
(
öput
);

2358 
i
=0;i<
°rùcou¡
;i++){

2359 
ªad
 =

2360 
	`TIFFRódEncodedSåù
(
öput
,

2361 
i
,

2362 (
td©a_t
Ë&
buf„r
[
buf„roff£t
],

2363 
°rùsize
);

2364 if(
ªad
==-1){

2365 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2367 
i
,

2368 
	`TIFFFûeName
(
öput
));

2369 
	`_TIFF‰ì
(
ßm∂ebuf„r
);

2370 
	`_TIFF‰ì
(
buf„r
);

2371 
t2p
->
t2p_îr‹
=
T2P_ERR_ERROR
;

2374 
buf„roff£t
+=
ªad
;

2377 if(
t2p
->
pdf_ßm∂e
 & 
T2P_SAMPLE_REALIZE_PALETTE
){

2379 
ßm∂ebuf„r
=(*)
	`_TIFFªÆloc
(

2380 (
td©a_t
Ë
buf„r
,

2381 
t2p
->
tiff_d©asize
 *Å2p->
tiff_ßm∂e•îpixñ
);

2382 if(
ßm∂ebuf„r
==
NULL
){

2383 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2385 (Ë
t2p
->
tiff_d©asize
,

2386 
	`TIFFFûeName
(
öput
));

2387 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2388 
	`_TIFF‰ì
(
buf„r
);

2390 
buf„r
=
ßm∂ebuf„r
;

2391 
t2p
->
tiff_d©asize
 *t2p->
tiff_ßm∂e•îpixñ
;

2393 
	`t2p_ßm∂e_ªÆize_∑Àâe
(
t2p
, 
buf„r
);

2396 if(
t2p
->
pdf_ßm∂e
 & 
T2P_SAMPLE_RGBA_TO_RGB
){

2397 
t2p
->
tiff_d©asize
=
	`t2p_ßm∂e_rgba_to_rgb
(

2398 (
td©a_t
)
buf„r
,

2399 
t2p
->
tiff_width
*t2p->
tiff_Àngth
);

2402 if(
t2p
->
pdf_ßm∂e
 & 
T2P_SAMPLE_RGBAA_TO_RGB
){

2403 
t2p
->
tiff_d©asize
=
	`t2p_ßm∂e_rgbØ_to_rgb
(

2404 (
td©a_t
)
buf„r
,

2405 
t2p
->
tiff_width
*t2p->
tiff_Àngth
);

2408 if(
t2p
->
pdf_ßm∂e
 & 
T2P_SAMPLE_YCBCR_TO_RGB
){

2409 
ßm∂ebuf„r
=(*)
	`_TIFFªÆloc
(

2410 (
td©a_t
)
buf„r
,

2411 
t2p
->
tiff_width
*t2p->
tiff_Àngth
*4);

2412 if(
ßm∂ebuf„r
==
NULL
){

2413 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2415 (Ë
t2p
->
tiff_d©asize
,

2416 
	`TIFFFûeName
(
öput
));

2417 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2418 
	`_TIFF‰ì
(
buf„r
);

2421 
buf„r
=
ßm∂ebuf„r
;

2423 if(!
	`TIFFRódRGBAImageOrõ¡ed
(

2424 
öput
,

2425 
t2p
->
tiff_width
,

2426 
t2p
->
tiff_Àngth
,

2427 (
uöt32
*)
buf„r
,

2428 
ORIENTATION_TOPLEFT
,

2430 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2432 
	`TIFFFûeName
(
öput
));

2433 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2436 
t2p
->
tiff_d©asize
=
	`t2p_ßm∂e_abgr_to_rgb
(

2437 (
td©a_t
Ë
buf„r
,

2438 
t2p
->
tiff_width
*t2p->
tiff_Àngth
);

2442 if(
t2p
->
pdf_ßm∂e
 & 
T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
){

2443 
t2p
->
tiff_d©asize
=
	`t2p_ßm∂e_œb_sig√d_to_unsig√d
(

2444 (
td©a_t
)
buf„r
,

2445 
t2p
->
tiff_width
*t2p->
tiff_Àngth
);

2449 
d©¨ódy
:

2451 
	`t2p_dißbÀ
(
ouçut
);

2452 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_PHOTOMETRIC
, 
t2p
->
tiff_phŸomëric
);

2453 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_BITSPERSAMPLE
, 
t2p
->
tiff_bô•îßm∂e
);

2454 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_SAMPLESPERPIXEL
, 
t2p
->
tiff_ßm∂e•îpixñ
);

2455 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_IMAGEWIDTH
, 
t2p
->
tiff_width
);

2456 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_IMAGELENGTH
, 
t2p
->
tiff_Àngth
);

2457 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_ROWSPERSTRIP
, 
t2p
->
tiff_Àngth
);

2458 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

2459 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_FILLORDER
, 
FILLORDER_MSB2LSB
);

2461 
t2p
->
pdf_com¥essi⁄
){

2462 
T2P_COMPRESS_NONE
:

2463 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_NONE
);

2465 #ifde‡
CCITT_SUPPORT


2466 
T2P_COMPRESS_G4
:

2467 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_CCITTFAX4
);

2470 #ifde‡
JPEG_SUPPORT


2471 
T2P_COMPRESS_JPEG
:

2472 if(
t2p
->
tiff_phŸomëric
==
PHOTOMETRIC_YCBCR
) {

2473 
uöt16
 
h‹
 = 0, 
vî
 = 0;

2474 i‡(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_YCBCRSUBSAMPLING
, &
h‹
, &
vî
) !=0 ) {

2475 if(
h‹
 !0 && 
vî
 != 0){

2476 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_YCBCRSUBSAMPLING
, 
h‹
, 
vî
);

2479 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_REFERENCEBLACKWHITE
, &
xÊﬂç
)!=0){

2480 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_REFERENCEBLACKWHITE
, 
xÊﬂç
);

2483 if(
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_JPEG
)==0){

2484 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2486 
	`TIFFFûeName
(
öput
),

2487 
	`TIFFFûeName
(
ouçut
));

2488 
	`_TIFF‰ì
(
buf„r
);

2489 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2492 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_JPEGTABLESMODE
, 0);

2494 if(
t2p
->
pdf_cﬁ‹•a˚
 & (
T2P_CS_RGB
 | 
T2P_CS_LAB
)){

2495 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_YCBCR
);

2496 if(
t2p
->
tiff_phŸomëric
 !
PHOTOMETRIC_YCBCR
){

2497 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_JPEGCOLORMODE
, 
JPEGCOLORMODE_RGB
);

2499 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_JPEGCOLORMODE
, 
JPEGCOLORMODE_RAW
);

2502 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_GRAY
){

2505 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_CMYK
){

2508 if(
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
 != 0){

2509 
	`TIFFSëFõld
(
ouçut
,

2510 
TIFFTAG_JPEGQUALITY
,

2511 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
);

2516 #ifde‡
ZIP_SUPPORT


2517 
T2P_COMPRESS_ZIP
:

2518 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_DEFLATE
);

2519 if(
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
%100 != 0){

2520 
	`TIFFSëFõld
(
ouçut
,

2521 
TIFFTAG_PREDICTOR
,

2522 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
 % 100);

2524 if(
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
/100 != 0){

2525 
	`TIFFSëFõld
(
ouçut
,

2526 
TIFFTAG_ZIPQUALITY
,

2527 (
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
 / 100));

2535 
	`t2p_íabÀ
(
ouçut
);

2536 
t2p
->
ouçutwrôãn
 = 0;

2537 #ifde‡
JPEG_SUPPORT


2538 if(
t2p
->
pdf_com¥essi⁄
 =
T2P_COMPRESS_JPEG


2539 && 
t2p
->
tiff_phŸomëric
 =
PHOTOMETRIC_YCBCR
){

2540 
buf„roff£t
 = 
	`TIFFWrôeEncodedSåù
(
ouçut
, (
t°rù_t
)0,

2541 
buf„r
,

2542 
°rùsize
 * 
°rùcou¡
);

2546 
buf„roff£t
 = 
	`TIFFWrôeEncodedSåù
(
ouçut
, (
t°rù_t
)0,

2547 
buf„r
,

2548 
t2p
->
tiff_d©asize
);

2550 i‡(
buf„r
 !
NULL
) {

2551 
	`_TIFF‰ì
(
buf„r
);

2552 
buf„r
=
NULL
;

2555 i‡(
buf„roff£t
 =(
tsize_t
)-1) {

2556 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2558 
	`TIFFFûeName
(
ouçut
));

2559 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2563 
wrôãn
 = 
t2p
->
ouçutwrôãn
;

2564 (
wrôãn
);

2565 
	}
}

2573 
tsize_t
 
	$t2p_ªadwrôe_pdf_image_tûe
(
T2P
* 
t2p
, 
TIFF
* 
öput
, TIFF* 
ouçut
, 
âûe_t
 
tûe
){

2575 
uöt16
 
edge
=0;

2576 
tsize_t
 
wrôãn
=0;

2577 * 
buf„r
=
NULL
;

2578 
tsize_t
 
buf„roff£t
=0;

2579 * 
ßm∂ebuf„r
=
NULL
;

2580 
tsize_t
 
ßm∂ebuf„roff£t
=0;

2581 
tsize_t
 
ªad
=0;

2582 
uöt16
 
i
=0;

2583 
âûe_t
 
tûecou¡
=0;

2584 
tsize_t
 
tûesize
=0;

2585 
âûe_t
 
£±ûecou¡
=0;

2586 
tsize_t
 
£±ûesize
=0;

2587 #ifde‡
JPEG_SUPPORT


2588 * 
j±
;

2589 * 
xÊﬂç
;

2590 
uöt32
 
xuöt32
=0;

2593 
edge
 |
	`t2p_tûe_is_right_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
);

2594 
edge
 |
	`t2p_tûe_is_bŸtom_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
);

2596 if–(
t2p
->
pdf_å™scode
 =
T2P_TRANSCODE_RAW
Ë&& ((
edge
 == 0)

2597 #i‡
	`deföed
(
JPEG_SUPPORT
Ë|| deföed(
OJPEG_SUPPORT
)

2598 || (
t2p
->
pdf_com¥essi⁄
 =
T2P_COMPRESS_JPEG
)

2602 #ifde‡
CCITT_SUPPORT


2603 if(
t2p
->
pdf_com¥essi⁄
 =
T2P_COMPRESS_G4
){

2604 
buf„r
(*Ë
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2605 if(
buf„r
==
NULL
){

2606 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2609 (Ë
t2p
->
tiff_d©asize
,

2610 
	`TIFFFûeName
(
öput
));

2611 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2614 
	`TIFFRódRawTûe
(
öput
, 
tûe
, (
td©a_t
Ë
buf„r
, 
t2p
->
tiff_d©asize
);

2615 i‡(
t2p
->
tiff_fûl‹dî
==
FILLORDER_LSB2MSB
){

2616 
	`TIFFRevî£Bôs
(
buf„r
, 
t2p
->
tiff_d©asize
);

2618 
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
t2p
->
tiff_d©asize
);

2619 
	`_TIFF‰ì
(
buf„r
);

2620 (
t2p
->
tiff_d©asize
);

2623 #ifde‡
ZIP_SUPPORT


2624 if(
t2p
->
pdf_com¥essi⁄
 =
T2P_COMPRESS_ZIP
){

2625 
buf„r
(*Ë
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2626 if(
buf„r
==
NULL
){

2627 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2630 (Ë
t2p
->
tiff_d©asize
,

2631 
	`TIFFFûeName
(
öput
));

2632 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2635 
	`TIFFRódRawTûe
(
öput
, 
tûe
, (
td©a_t
Ë
buf„r
, 
t2p
->
tiff_d©asize
);

2636 i‡(
t2p
->
tiff_fûl‹dî
==
FILLORDER_LSB2MSB
){

2637 
	`TIFFRevî£Bôs
(
buf„r
, 
t2p
->
tiff_d©asize
);

2639 
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
t2p
->
tiff_d©asize
);

2640 
	`_TIFF‰ì
(
buf„r
);

2641 (
t2p
->
tiff_d©asize
);

2644 #ifde‡
OJPEG_SUPPORT


2645 if(
t2p
->
tiff_com¥essi⁄
 =
COMPRESSION_OJPEG
){

2646 if(! 
t2p
->
pdf_oj≥gd©a
){

2647 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2650 
	`TIFFFûeName
(
öput
));

2651 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2654 
buf„r
=(*Ë
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2655 if(
buf„r
==
NULL
){

2656 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2659 (Ë
t2p
->
tiff_d©asize
,

2660 
	`TIFFFûeName
(
öput
));

2661 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2664 
	`_TIFFmem˝y
(
buf„r
, 
t2p
->
pdf_oj≥gd©a
,Å2p->
pdf_oj≥gd©Æígth
);

2665 if(
edge
!=0){

2666 if(
	`t2p_tûe_is_bŸtom_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
)){

2667 
buf„r
[7]=

2668 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûñígth
 >> 8) & 0xff;

2669 
buf„r
[8]=

2670 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûñígth
 ) & 0xff;

2672 if(
	`t2p_tûe_is_right_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
)){

2673 
buf„r
[9]=

2674 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûewidth
 >> 8) & 0xff;

2675 
buf„r
[10]=

2676 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûewidth
 ) & 0xff;

2679 
buf„roff£t
=
t2p
->
pdf_oj≥gd©Æígth
;

2680 
buf„roff£t
+=
	`TIFFRódRawTûe
(
öput
,

2681 
tûe
,

2682 (
td©a_t
Ë&(((*)
buf„r
)[
buf„roff£t
]),

2684 ((*)
buf„r
)[
buf„roff£t
++]=0xff;

2685 ((*)
buf„r
)[
buf„roff£t
++]=0xd9;

2686 
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buf„roff£t
);

2687 
	`_TIFF‰ì
(
buf„r
);

2688 (
buf„roff£t
);

2691 #ifde‡
JPEG_SUPPORT


2692 if(
t2p
->
tiff_com¥essi⁄
 =
COMPRESSION_JPEG
){

2693 
èbÀ_íd
[2];

2694 
uöt32
 
cou¡
 = 0;

2695 
buf„r
(*Ë
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2696 if(
buf„r
==
NULL
){

2697 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2700 
t2p
->
tiff_d©asize
,

2701 
	`TIFFFûeName
(
öput
));

2702 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2705 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGTABLES
, &
cou¡
, &
j±
) != 0) {

2706 i‡(
cou¡
 > 0) {

2707 
	`_TIFFmem˝y
(
buf„r
, 
j±
, 
cou¡
);

2708 
buf„roff£t
 +
cou¡
 - 2;

2709 
èbÀ_íd
[0] = 
buf„r
[
buf„roff£t
-2];

2710 
èbÀ_íd
[1] = 
buf„r
[
buf„roff£t
-1];

2712 i‡(
cou¡
 > 0) {

2713 
xuöt32
 = 
buf„roff£t
;

2714 
buf„roff£t
 +
	`TIFFRódRawTûe
(

2715 
öput
,

2716 
tûe
,

2717 (
td©a_t
Ë&(((*)
buf„r
)[
buf„roff£t
-2]),

2719 
buf„r
[
xuöt32
-2]=
èbÀ_íd
[0];

2720 
buf„r
[
xuöt32
-1]=
èbÀ_íd
[1];

2722 
buf„roff£t
 +
	`TIFFRódRawTûe
(

2723 
öput
,

2724 
tûe
,

2725 (
td©a_t
Ë&(((*)
buf„r
)[
buf„roff£t
]),

2729 
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buf„roff£t
);

2730 
	`_TIFF‰ì
(
buf„r
);

2731 (
buf„roff£t
);

2737 if(
t2p
->
pdf_ßm∂e
==
T2P_SAMPLE_NOTHING
){

2738 
buf„r
 = (*Ë
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2739 if(
buf„r
==
NULL
){

2740 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2743 (Ë
t2p
->
tiff_d©asize
,

2744 
	`TIFFFûeName
(
öput
));

2745 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2749 
ªad
 = 
	`TIFFRódEncodedTûe
(

2750 
öput
,

2751 
tûe
,

2752 (
td©a_t
Ë&
buf„r
[
buf„roff£t
],

2753 
t2p
->
tiff_d©asize
);

2754 if(
ªad
==-1){

2755 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2757 
tûe
,

2758 
	`TIFFFûeName
(
öput
));

2759 
	`_TIFF‰ì
(
buf„r
);

2760 
t2p
->
t2p_îr‹
=
T2P_ERR_ERROR
;

2766 if(
t2p
->
pdf_ßm∂e
 =
T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG
){

2767 
£±ûesize
=
	`TIFFTûeSize
(
öput
);

2768 
£±ûecou¡
=
	`TIFFNumbîOfTûes
(
öput
);

2769 
tûesize
=
£±ûesize
*
t2p
->
tiff_ßm∂e•îpixñ
;

2770 
tûecou¡
=
£±ûecou¡
/
t2p
->
tiff_ßm∂e•îpixñ
;

2771 
buf„r
 = (*Ë
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2772 if(
buf„r
==
NULL
){

2773 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2776 (Ë
t2p
->
tiff_d©asize
,

2777 
	`TIFFFûeName
(
öput
));

2778 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2781 
ßm∂ebuf„r
 = (*Ë
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2782 if(
ßm∂ebuf„r
==
NULL
){

2783 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2786 (Ë
t2p
->
tiff_d©asize
,

2787 
	`TIFFFûeName
(
öput
));

2788 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2791 
ßm∂ebuf„roff£t
=0;

2792 
i
=0;i<
t2p
->
tiff_ßm∂e•îpixñ
;i++){

2793 
ªad
 =

2794 
	`TIFFRódEncodedTûe
(
öput
,

2795 
tûe
 + 
i
*
tûecou¡
,

2796 (
td©a_t
Ë&(
ßm∂ebuf„r
[
ßm∂ebuf„roff£t
]),

2797 
£±ûesize
);

2798 if(
ªad
==-1){

2799 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2801 
tûe
 + 
i
*
tûecou¡
,

2802 
	`TIFFFûeName
(
öput
));

2803 
	`_TIFF‰ì
(
ßm∂ebuf„r
);

2804 
	`_TIFF‰ì
(
buf„r
);

2805 
t2p
->
t2p_îr‹
=
T2P_ERR_ERROR
;

2808 
ßm∂ebuf„roff£t
+=
ªad
;

2810 
	`t2p_ßm∂e_∂™¨_£∑øã_to_c⁄tig
(

2811 
t2p
,

2812 &(
buf„r
[
buf„roff£t
]),

2813 
ßm∂ebuf„r
,

2814 
ßm∂ebuf„roff£t
);

2815 
buf„roff£t
+=
ßm∂ebuf„roff£t
;

2816 
	`_TIFF‰ì
(
ßm∂ebuf„r
);

2819 if(
buf„r
==
NULL
){

2820 
buf„r
 = (*Ë
	`_TIFFmÆloc
(
t2p
->
tiff_d©asize
);

2821 if(
buf„r
==
NULL
){

2822 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2825 (Ë
t2p
->
tiff_d©asize
,

2826 
	`TIFFFûeName
(
öput
));

2827 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2830 
ªad
 = 
	`TIFFRódEncodedTûe
(

2831 
öput
,

2832 
tûe
,

2833 (
td©a_t
Ë&
buf„r
[
buf„roff£t
],

2834 
t2p
->
tiff_d©asize
);

2835 if(
ªad
==-1){

2836 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2838 
tûe
,

2839 
	`TIFFFûeName
(
öput
));

2840 
	`_TIFF‰ì
(
buf„r
);

2841 
t2p
->
t2p_îr‹
=
T2P_ERR_ERROR
;

2846 if(
t2p
->
pdf_ßm∂e
 & 
T2P_SAMPLE_RGBA_TO_RGB
){

2847 
t2p
->
tiff_d©asize
=
	`t2p_ßm∂e_rgba_to_rgb
(

2848 (
td©a_t
)
buf„r
,

2849 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûewidth


2850 *
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûñígth
);

2853 if(
t2p
->
pdf_ßm∂e
 & 
T2P_SAMPLE_RGBAA_TO_RGB
){

2854 
t2p
->
tiff_d©asize
=
	`t2p_ßm∂e_rgbØ_to_rgb
(

2855 (
td©a_t
)
buf„r
,

2856 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûewidth


2857 *
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûñígth
);

2860 if(
t2p
->
pdf_ßm∂e
 & 
T2P_SAMPLE_YCBCR_TO_RGB
){

2861 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2863 
	`TIFFFûeName
(
öput
));

2864 
	`_TIFF‰ì
(
buf„r
);

2865 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

2869 if(
t2p
->
pdf_ßm∂e
 & 
T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED
){

2870 
t2p
->
tiff_d©asize
=
	`t2p_ßm∂e_œb_sig√d_to_unsig√d
(

2871 (
td©a_t
)
buf„r
,

2872 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûewidth


2873 *
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûñígth
);

2877 if(
	`t2p_tûe_is_right_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
) != 0){

2878 
	`t2p_tûe_cﬁœp£_À·
(

2879 
buf„r
,

2880 
	`TIFFTûeRowSize
(
öput
),

2881 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûewidth
,

2882 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûewidth
,

2883 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûñígth
);

2887 
	`t2p_dißbÀ
(
ouçut
);

2888 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_PHOTOMETRIC
, 
t2p
->
tiff_phŸomëric
);

2889 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_BITSPERSAMPLE
, 
t2p
->
tiff_bô•îßm∂e
);

2890 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_SAMPLESPERPIXEL
, 
t2p
->
tiff_ßm∂e•îpixñ
);

2891 if(
	`t2p_tûe_is_right_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
) == 0){

2892 
	`TIFFSëFõld
(

2893 
ouçut
,

2894 
TIFFTAG_IMAGEWIDTH
,

2895 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûewidth
);

2897 
	`TIFFSëFõld
(

2898 
ouçut
,

2899 
TIFFTAG_IMAGEWIDTH
,

2900 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûewidth
);

2902 if(
	`t2p_tûe_is_bŸtom_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
) == 0){

2903 
	`TIFFSëFõld
(

2904 
ouçut
,

2905 
TIFFTAG_IMAGELENGTH
,

2906 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûñígth
);

2907 
	`TIFFSëFõld
(

2908 
ouçut
,

2909 
TIFFTAG_ROWSPERSTRIP
,

2910 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûñígth
);

2912 
	`TIFFSëFõld
(

2913 
ouçut
,

2914 
TIFFTAG_IMAGELENGTH
,

2915 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûñígth
);

2916 
	`TIFFSëFõld
(

2917 
ouçut
,

2918 
TIFFTAG_ROWSPERSTRIP
,

2919 
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûñígth
);

2921 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

2922 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_FILLORDER
, 
FILLORDER_MSB2LSB
);

2924 
t2p
->
pdf_com¥essi⁄
){

2925 
T2P_COMPRESS_NONE
:

2926 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_NONE
);

2928 #ifde‡
CCITT_SUPPORT


2929 
T2P_COMPRESS_G4
:

2930 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_CCITTFAX4
);

2933 #ifde‡
JPEG_SUPPORT


2934 
T2P_COMPRESS_JPEG
:

2935 i‡(
t2p
->
tiff_phŸomëric
==
PHOTOMETRIC_YCBCR
) {

2936 
uöt16
 
h‹
 = 0, 
vî
 = 0;

2937 i‡(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_YCBCRSUBSAMPLING
, &
h‹
, &
vî
)!=0) {

2938 i‡(
h‹
 !0 && 
vî
 != 0) {

2939 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_YCBCRSUBSAMPLING
, 
h‹
, 
vî
);

2942 if(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_REFERENCEBLACKWHITE
, &
xÊﬂç
)!=0){

2943 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_REFERENCEBLACKWHITE
, 
xÊﬂç
);

2946 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_JPEG
);

2947 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_JPEGTABLESMODE
, 0);

2948 if(
t2p
->
pdf_cﬁ‹•a˚
 & (
T2P_CS_RGB
 | 
T2P_CS_LAB
)){

2949 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_YCBCR
);

2950 if(
t2p
->
tiff_phŸomëric
 !
PHOTOMETRIC_YCBCR
){

2951 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_JPEGCOLORMODE
, 
JPEGCOLORMODE_RGB
);

2953 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_JPEGCOLORMODE
, 
JPEGCOLORMODE_RAW
);

2956 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_GRAY
){

2959 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_CMYK
){

2962 if(
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
 != 0){

2963 
	`TIFFSëFõld
(
ouçut
,

2964 
TIFFTAG_JPEGQUALITY
,

2965 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
);

2969 #ifde‡
ZIP_SUPPORT


2970 
T2P_COMPRESS_ZIP
:

2971 
	`TIFFSëFõld
(
ouçut
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_DEFLATE
);

2972 if(
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
%100 != 0){

2973 
	`TIFFSëFõld
(
ouçut
,

2974 
TIFFTAG_PREDICTOR
,

2975 
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
 % 100);

2977 if(
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
/100 != 0){

2978 
	`TIFFSëFõld
(
ouçut
,

2979 
TIFFTAG_ZIPQUALITY
,

2980 (
t2p
->
pdf_deÁu…com¥essi⁄quÆôy
 / 100));

2988 
	`t2p_íabÀ
(
ouçut
);

2989 
t2p
->
ouçutwrôãn
 = 0;

2990 
buf„roff£t
 = 
	`TIFFWrôeEncodedSåù
(
ouçut
, (
t°rù_t
Ë0, 
buf„r
,

2991 
	`TIFFSåùSize
(
ouçut
));

2992 i‡(
buf„r
 !
NULL
) {

2993 
	`_TIFF‰ì
(
buf„r
);

2994 
buf„r
 = 
NULL
;

2996 i‡(
buf„roff£t
 == -1) {

2997 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

2999 
	`TIFFFûeName
(
ouçut
));

3000 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

3004 
wrôãn
 = 
t2p
->
ouçutwrôãn
;

3006 (
wrôãn
);

3007 
	}
}

3009 #ifde‡
OJPEG_SUPPORT


3010 
	$t2p_¥o˚ss_oj≥g_èbÀs
(
T2P
* 
t2p
, 
TIFF
* 
öput
){

3011 
uöt16
 
¥oc
=0;

3012 * 
q
;

3013 
uöt32
 
q_Àngth
=0;

3014 * 
dc
;

3015 
uöt32
 
dc_Àngth
=0;

3016 * 
ac
;

3017 
uöt32
 
ac_Àngth
=0;

3018 
uöt16
* 
Õ
;

3019 
uöt16
* 
±
;

3020 
uöt16
 
h_ßmp
=1;

3021 
uöt16
 
v_ßmp
=1;

3022 * 
oj≥gd©a
;

3023 
uöt16
 
èbÀ_cou¡
;

3024 
uöt32
 
off£t_èbÀ
;

3025 
uöt32
 
off£t_ms_l
;

3026 
uöt32
 
code_cou¡
;

3027 
uöt32
 
i
=0;

3028 
uöt32
 
de°
=0;

3029 
uöt16
 
ri
=0;

3030 
uöt32
 
rows
=0;

3032 if(!
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGPROC
, &
¥oc
)){

3033 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

3035 
	`TIFFFûeName
(
öput
));

3036 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

3039 if(
¥oc
!=
JPEGPROC_BASELINE
 &&Öroc!=
JPEGPROC_LOSSLESS
){

3040 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

3042 
	`TIFFFûeName
(
öput
));

3043 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

3046 if(!
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGQTABLES
, &
q_Àngth
, &
q
)){

3047 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

3049 
	`TIFFFûeName
(
öput
));

3050 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

3053 if(
q_Àngth
 < (64U * 
t2p
->
tiff_ßm∂e•îpixñ
)){

3054 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

3056 
	`TIFFFûeName
(
öput
));

3057 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

3060 if(!
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGDCTABLES
, &
dc_Àngth
, &
dc
)){

3061 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

3063 
	`TIFFFûeName
(
öput
));

3064 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

3067 if(
¥oc
==
JPEGPROC_BASELINE
){

3068 if(!
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGACTABLES
, &
ac_Àngth
, &
ac
)){

3069 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

3071 
	`TIFFFûeName
(
öput
));

3072 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

3076 if(!
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGLOSSLESSPREDICTORS
, &
Õ
)){

3077 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

3079 
	`TIFFFûeName
(
öput
));

3080 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

3083 if(!
	`TIFFGëFõld
(
öput
, 
TIFFTAG_JPEGPOINTTRANSFORM
, &
±
)){

3084 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

3086 
	`TIFFFûeName
(
öput
));

3087 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

3091 if(!
	`TIFFGëFõld
(
öput
, 
TIFFTAG_YCBCRSUBSAMPLING
, &
h_ßmp
, &
v_ßmp
)){

3092 
h_ßmp
=1;

3093 
v_ßmp
=1;

3095 if(
t2p
->
pdf_oj≥gd©a
 !
NULL
){

3096 
	`_TIFF‰ì
(
t2p
->
pdf_oj≥gd©a
);

3097 
t2p
->
pdf_oj≥gd©a
=
NULL
;

3099 
t2p
->
pdf_oj≥gd©a
 = 
	`_TIFFmÆloc
(2048);

3100 if(
t2p
->
pdf_oj≥gd©a
 =
NULL
){

3101 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

3104 
	`TIFFFûeName
(
öput
));

3107 
	`_TIFFmem£t
(
t2p
->
pdf_oj≥gd©a
, 0x00, 2048);

3108 
t2p
->
pdf_oj≥gd©Æígth
 = 0;

3109 
èbÀ_cou¡
=
t2p
->
tiff_ßm∂e•îpixñ
;

3110 if(
¥oc
==
JPEGPROC_BASELINE
){

3111 if(
èbÀ_cou¡
>2)Åable_count=2;

3113 
oj≥gd©a
=(*)
t2p
->
pdf_oj≥gd©a
;

3114 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xff;

3115 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xd8;

3116 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xff;

3117 if(
¥oc
==
JPEGPROC_BASELINE
){

3118 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xc0;

3120 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xc3;

3122 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0x00;

3123 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=(8 + 3*t2p->
tiff_ßm∂e•îpixñ
);

3124 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=—2p->
tiff_bô•îßm∂e
 & 0xff);

3125 if(
	`TIFFIsTûed
(
öput
)){

3126 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=

3127 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûñígth
 >> 8) & 0xff;

3128 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=

3129 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûñígth
 ) & 0xff;

3130 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=

3131 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûewidth
 >> 8) & 0xff;

3132 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=

3133 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûewidth
 ) & 0xff;

3135 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=

3136 (
t2p
->
tiff_Àngth
 >> 8) & 0xff;

3137 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=

3138 (
t2p
->
tiff_Àngth
 ) & 0xff;

3139 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=

3140 (
t2p
->
tiff_width
 >> 8) & 0xff;

3141 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=

3142 (
t2p
->
tiff_width
 ) & 0xff;

3144 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=—2p->
tiff_ßm∂e•îpixñ
 & 0xff);

3145 
i
=0;i<
t2p
->
tiff_ßm∂e•îpixñ
;i++){

3146 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=
i
;

3147 if(
i
==0){

3148 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
] |
h_ßmp
<<4 & 0xf0;;

3149 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++] |
v_ßmp
 & 0x0f;

3151 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]= 0x11;

3153 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=
i
;

3155 
de°
=0;de°<
t2p
->
tiff_ßm∂e•îpixñ
;dest++){

3156 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xff;

3157 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xdb;

3158 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0x00;

3159 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0x43;

3160 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=
de°
;

3161 
	`_TIFFmem˝y
–&(
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]),

3162 &(((*)
q
)[64*
de°
]), 64);

3163 
t2p
->
pdf_oj≥gd©Æígth
+=64;

3165 
off£t_èbÀ
=0;

3166 
de°
=0;de°<
èbÀ_cou¡
;dest++){

3167 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xff;

3168 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xc4;

3169 
off£t_ms_l
=
t2p
->
pdf_oj≥gd©Æígth
;

3170 
t2p
->
pdf_oj≥gd©Æígth
+=2;

3171 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=
de°
 & 0x0f;

3172 
	`_TIFFmem˝y
–&(
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
]),

3173 &(((*)
dc
)[
off£t_èbÀ
]), 16);

3174 
code_cou¡
=0;

3175 
off£t_èbÀ
+=16;

3176 
i
=0;i<16;i++){

3177 
code_cou¡
+=
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++];

3179 
oj≥gd©a
[
off£t_ms_l
]=((19+
code_cou¡
)>>8) & 0xff;

3180 
oj≥gd©a
[
off£t_ms_l
+1]=(19+
code_cou¡
) & 0xff;

3181 
	`_TIFFmem˝y
–&(
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
]),

3182 &(((*)
dc
)[
off£t_èbÀ
]), 
code_cou¡
);

3183 
off£t_èbÀ
+=
code_cou¡
;

3184 
t2p
->
pdf_oj≥gd©Æígth
+=
code_cou¡
;

3186 if(
¥oc
==
JPEGPROC_BASELINE
){

3187 
off£t_èbÀ
=0;

3188 
de°
=0;de°<
èbÀ_cou¡
;dest++){

3189 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xff;

3190 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xc4;

3191 
off£t_ms_l
=
t2p
->
pdf_oj≥gd©Æígth
;

3192 
t2p
->
pdf_oj≥gd©Æígth
+=2;

3193 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
] |= 0x10;

3194 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++] |=
de°
 & 0x0f;

3195 
	`_TIFFmem˝y
–&(
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
]),

3196 &(((*)
ac
)[
off£t_èbÀ
]), 16);

3197 
code_cou¡
=0;

3198 
off£t_èbÀ
+=16;

3199 
i
=0;i<16;i++){

3200 
code_cou¡
+=
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++];

3202 
oj≥gd©a
[
off£t_ms_l
]=((19+
code_cou¡
)>>8) & 0xff;

3203 
oj≥gd©a
[
off£t_ms_l
+1]=(19+
code_cou¡
) & 0xff;

3204 
	`_TIFFmem˝y
–&(
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
]),

3205 &(((*)
ac
)[
off£t_èbÀ
]), 
code_cou¡
);

3206 
off£t_èbÀ
+=
code_cou¡
;

3207 
t2p
->
pdf_oj≥gd©Æígth
+=
code_cou¡
;

3210 if(
	`TIFFNumbîOfSåùs
(
öput
)>1){

3211 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xff;

3212 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xdd;

3213 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0x00;

3214 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0x04;

3215 
h_ßmp
*=8;

3216 
v_ßmp
*=8;

3217 
ri
=(
t2p
->
tiff_width
+
h_ßmp
-1) / h_samp;

3218 
	`TIFFGëFõld
(
öput
, 
TIFFTAG_ROWSPERSTRIP
, &
rows
);

3219 
ri
*=(
rows
+
v_ßmp
-1)/v_samp;

3220 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++](
ri
>>8) & 0xff;

3221 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]
ri
 & 0xff;

3223 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xff;

3224 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0xda;

3225 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0x00;

3226 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=(6 + 2*t2p->
tiff_ßm∂e•îpixñ
);

3227 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]Ò2p->
tiff_ßm∂e•îpixñ
 & 0xff;

3228 
i
=0;i<
t2p
->
tiff_ßm∂e•îpixñ
;i++){

3229 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]
i
 & 0xff;

3230 if(
¥oc
==
JPEGPROC_BASELINE
){

3231 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
] |=

3232 ––(
i
>(
èbÀ_cou¡
-1U)) ? (table_count-1U) : i) << 4U) & 0xf0;

3233 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++] |=

3234 –(
i
>(
èbÀ_cou¡
-1U)) ? (table_count-1U) : i) & 0x0f;

3236 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++] = (
i
 << 4) & 0xf0;

3239 if(
¥oc
==
JPEGPROC_BASELINE
){

3240 
t2p
->
pdf_oj≥gd©Æígth
++;

3241 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++]=0x3f;

3242 
t2p
->
pdf_oj≥gd©Æígth
++;

3244 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++](
Õ
[0] & 0xff);

3245 
t2p
->
pdf_oj≥gd©Æígth
++;

3246 
oj≥gd©a
[
t2p
->
pdf_oj≥gd©Æígth
++](
±
[0] & 0x0f);

3250 
	}
}

3253 #ifde‡
JPEG_SUPPORT


3254 
	$t2p_¥o˚ss_j≥g_°rù
(

3255 * 
°rù
,

3256 
tsize_t
* 
°rùÀngth
,

3257 * 
buf„r
,

3258 
tsize_t
* 
buf„roff£t
,

3259 
t°rù_t
 
no
,

3260 
uöt32
 
height
){

3262 
tsize_t
 
i
=0;

3263 
uöt16
 
ri
 =0;

3264 
uöt16
 
v_ßmp
=1;

3265 
uöt16
 
h_ßmp
=1;

3266 
j
=0;

3268 
i
++;

3270 
i
<(*
°rùÀngth
)){

3271  
°rù
[
i
] ){

3274 
	`_TIFFmem˝y
(&(
buf„r
[*
buf„roff£t
]), &(
°rù
[
i
-1]), 2);

3275 *
buf„roff£t
+=2;

3276 
i
+=2;

3283 if(
no
==0){

3284 
	`_TIFFmem˝y
(&(
buf„r
[*
buf„roff£t
]), &(
°rù
[
i
-1]), strip[i+2]+2);

3285 
j
=0;j<
buf„r
[*
buf„roff£t
+9];j++){

3286 if–(
buf„r
[*
buf„roff£t
+11+(2*
j
)]>>4Ë> 
h_ßmp
)

3287 
h_ßmp
 = (
buf„r
[*
buf„roff£t
+11+(2*
j
)]>>4);

3288 if–(
buf„r
[*
buf„roff£t
+11+(2*
j
)] & 0x0fË> 
v_ßmp
)

3289 
v_ßmp
 = (
buf„r
[*
buf„roff£t
+11+(2*
j
)] & 0x0f);

3291 
v_ßmp
*=8;

3292 
h_ßmp
*=8;

3293 
ri
=((–((
uöt16
)(
buf„r
[*
buf„roff£t
+5])<<8) |

3294 (
uöt16
)(
buf„r
[*
buf„roff£t
+6]Ë)+
v_ßmp
-1)/

3295 
v_ßmp
);

3296 
ri
*=((–((
uöt16
)(
buf„r
[*
buf„roff£t
+7])<<8) |

3297 (
uöt16
)(
buf„r
[*
buf„roff£t
+8]Ë)+
h_ßmp
-1)/

3298 
h_ßmp
);

3299 
buf„r
[*
buf„roff£t
+5]=

3300 (Ë((
height
>>8) & 0xff);

3301 
buf„r
[*
buf„roff£t
+6]=

3302 (Ë(
height
 & 0xff);

3303 *
buf„roff£t
+=
°rù
[
i
+2]+2;

3304 
i
+=
°rù
[i+2]+2;

3306 
buf„r
[(*
buf„roff£t
)++]=0xff;

3307 
buf„r
[(*
buf„roff£t
)++]=0xdd;

3308 
buf„r
[(*
buf„roff£t
)++]=0x00;

3309 
buf„r
[(*
buf„roff£t
)++]=0x04;

3310 
buf„r
[(*
buf„roff£t
)++]=(
ri
 >> 8) & 0xff;

3311 
buf„r
[(*
buf„roff£t
)++]
ri
 & 0xff;

3313 
i
+=
°rù
[i+2]+2;

3318 
	`_TIFFmem˝y
(&(
buf„r
[*
buf„roff£t
]), &(
°rù
[
i
-1]), strip[i+2]+2);

3319 *
buf„roff£t
+=
°rù
[
i
+2]+2;

3320 
i
+=
°rù
[i+2]+2;

3323 if(
no
==0){

3324 
	`_TIFFmem˝y
(&(
buf„r
[*
buf„roff£t
]), &(
°rù
[
i
-1]), strip[i+2]+2);

3325 *
buf„roff£t
+=
°rù
[
i
+2]+2;

3326 
i
+=
°rù
[i+2]+2;

3328 
buf„r
[(*
buf„roff£t
)++]=0xff;

3329 
buf„r
[(*
buf„roff£t
)++]=

3330 ()(0xd0 | ((
no
-1)%8));

3331 
i
+=
°rù
[i+2]+2;

3333 
	`_TIFFmem˝y
(&(
buf„r
[*
buf„roff£t
]), &(
°rù
[
i
-1]), (*
°rùÀngth
)-i-1);

3334 *
buf„roff£t
+=(*
°rùÀngth
)-
i
-1;

3337 
i
+=
°rù
[i+2]+2;

3343 
	}
}

3350 
	$t2p_tûe_cﬁœp£_À·
(

3351 
td©a_t
 
buf„r
,

3352 
tsize_t
 
sˇnwidth
,

3353 
uöt32
 
tûewidth
,

3354 
uöt32
 
edgëûewidth
,

3355 
uöt32
 
tûñígth
){

3357 
uöt32
 
i
=0;

3358 
tsize_t
 
edgesˇnwidth
=0;

3360 
edgesˇnwidth
 = (
sˇnwidth
 * 
edgëûewidth
 + (
tûewidth
 - 1))/Åilewidth;

3361 
i
=i;i<
tûñígth
;i++){

3362 
	`_TIFFmem˝y
(

3363 &(((*)
buf„r
)[
edgesˇnwidth
*
i
]),

3364 &(((*)
buf„r
)[
sˇnwidth
*
i
]),

3365 
edgesˇnwidth
);

3369 
	}
}

3379 
	$t2p_wrôe_adv™˚_dúe˘‹y
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
)

3381 
	`t2p_dißbÀ
(
ouçut
);

3382 if(!
	`TIFFWrôeDúe˘‹y
(
ouçut
)){

3383 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

3385 
	`TIFFFûeName
(
ouçut
));

3386 
t2p
->
t2p_îr‹
 = 
T2P_ERR_ERROR
;

3389 
	`t2p_íabÀ
(
ouçut
);

3391 
	}
}

3393 
tsize_t
 
	$t2p_ßm∂e_∂™¨_£∑øã_to_c⁄tig
(

3394 
T2P
* 
t2p
,

3395 * 
buf„r
,

3396 * 
ßm∂ebuf„r
,

3397 
tsize_t
 
ßm∂ebuf„rsize
){

3399 
tsize_t
 
°ride
=0;

3400 
tsize_t
 
i
=0;

3401 
tsize_t
 
j
=0;

3403 
°ride
=
ßm∂ebuf„rsize
/
t2p
->
tiff_ßm∂e•îpixñ
;

3404 
i
=0;i<
°ride
;i++){

3405 
j
=0;j<
t2p
->
tiff_ßm∂e•îpixñ
;j++){

3406 
buf„r
[
i
*
t2p
->
tiff_ßm∂e•îpixñ
 + 
j
] = 
ßm∂ebuf„r
[ò+ j*
°ride
];

3410 (
ßm∂ebuf„rsize
);

3411 
	}
}

3413 
tsize_t
 
	$t2p_ßm∂e_ªÆize_∑Àâe
(
T2P
* 
t2p
, * 
buf„r
){

3415 
uöt32
 
ßm∂e_cou¡
=0;

3416 
uöt16
 
comp⁄ít_cou¡
=0;

3417 
uöt32
 
∑Àâe_off£t
=0;

3418 
uöt32
 
ßm∂e_off£t
=0;

3419 
uöt32
 
i
=0;

3420 
uöt32
 
j
=0;

3421 
ßm∂e_cou¡
=
t2p
->
tiff_width
*t2p->
tiff_Àngth
;

3422 
comp⁄ít_cou¡
=
t2p
->
tiff_ßm∂e•îpixñ
;

3424 
i
=
ßm∂e_cou¡
;i>0;i--){

3425 
∑Àâe_off£t
=
buf„r
[
i
-1] * 
comp⁄ít_cou¡
;

3426 
ßm∂e_off£t
(
i
-1Ë* 
comp⁄ít_cou¡
;

3427 
j
=0;j<
comp⁄ít_cou¡
;j++){

3428 
buf„r
[
ßm∂e_off£t
+
j
]=
t2p
->
pdf_∑Àâe
[
∑Àâe_off£t
+j];

3433 
	}
}

3440 
tsize_t
 
	$t2p_ßm∂e_abgr_to_rgb
(
td©a_t
 
d©a
, 
uöt32
 
ßm∂ecou¡
)

3442 
uöt32
 
i
=0;

3443 
uöt32
 
ßm∂e
=0;

3445 
i
=0;i<
ßm∂ecou¡
;i++){

3446 
ßm∂e
=((
uöt32
*)
d©a
)[
i
];

3447 ((*)
d©a
)[
i
*3](Ë(
ßm∂e
 & 0xff);

3448 ((*)
d©a
)[
i
*3+1](Ë((
ßm∂e
>>8) & 0xff);

3449 ((*)
d©a
)[
i
*3+2](Ë((
ßm∂e
>>16) & 0xff);

3452 (
i
*3);

3453 
	}
}

3460 
tsize_t


3461 
	$t2p_ßm∂e_rgbØ_to_rgb
(
td©a_t
 
d©a
, 
uöt32
 
ßm∂ecou¡
)

3463 
uöt32
 
i
;

3465 
i
 = 0; i < 
ßm∂ecou¡
; i++)

3466 
	`mem˝y
((
uöt8
*)
d©a
 + 
i
 * 3, (uint8*)data + i * 4, 3);

3468 (
i
 * 3);

3469 
	}
}

3476 
tsize_t


3477 
	$t2p_ßm∂e_rgba_to_rgb
(
td©a_t
 
d©a
, 
uöt32
 
ßm∂ecou¡
)

3479 
uöt32
 
i
 = 0;

3480 
uöt32
 
ßm∂e
 = 0;

3481 
uöt8
 
Æpha
 = 0;

3483 
i
 = 0; i < 
ßm∂ecou¡
; i++) {

3484 
ßm∂e
=((
uöt32
*)
d©a
)[
i
];

3485 
Æpha
=(
uöt8
)((255 - ((
ßm∂e
 >> 24) & 0xff)));

3486 ((
uöt8
 *)
d©a
)[
i
 * 3] = (uöt8Ë((
ßm∂e
 >> 16Ë& 0xffË+ 
Æpha
;

3487 ((
uöt8
 *)
d©a
)[
i
 * 3 + 1] = (uöt8Ë((
ßm∂e
 >> 8Ë& 0xffË+ 
Æpha
;

3488 ((
uöt8
 *)
d©a
)[
i
 * 3 + 2] = (uöt8Ë(
ßm∂e
 & 0xffË+ 
Æpha
;

3491  (
i
 * 3);

3492 
	}
}

3499 
tsize_t
 
	$t2p_ßm∂e_œb_sig√d_to_unsig√d
(
td©a_t
 
buf„r
, 
uöt32
 
ßm∂ecou¡
){

3501 
uöt32
 
i
=0;

3503 
i
=0;i<
ßm∂ecou¡
;i++){

3504 if–(((*)
buf„r
)[(
i
*3)+1] & 0x80) !=0){

3505 ((*)
buf„r
)[(
i
*3)+1] =

3506 ()(0x80 + ((*)
buf„r
)[(
i
*3)+1]);

3508 ((*)
buf„r
)[(
i
*3)+1] |= 0x80;

3510 if–(((*)
buf„r
)[(
i
*3)+2] & 0x80) !=0){

3511 ((*)
buf„r
)[(
i
*3)+2] =

3512 ()(0x80 + ((*)
buf„r
)[(
i
*3)+2]);

3514 ((*)
buf„r
)[(
i
*3)+2] |= 0x80;

3518 (
ßm∂ecou¡
*3);

3519 
	}
}

3525 
tsize_t
 
	$t2p_wrôe_pdf_hódî
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

3527 
tsize_t
 
wrôãn
=0;

3528 
buf„r
[16];

3529 
buÊí
=0;

3531 
buÊí
=
	`•rötf
(
buf„r
, "%%PDF-%u.%u ", 
t2p
->
pdf_maj‹vîsi⁄
&0xff,Å2p->
pdf_mö‹vîsi⁄
&0xff);

3532 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

3533 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
)"\n%\342\343\317\323\n", 7);

3535 (
wrôãn
);

3536 
	}
}

3542 
tsize_t
 
	$t2p_wrôe_pdf_obj_°¨t
(
uöt32
 
numbî
, 
TIFF
* 
ouçut
){

3544 
tsize_t
 
wrôãn
=0;

3545 
buf„r
[16];

3546 
buÊí
=0;

3548 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
numbî
);

3549 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
 );

3550 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 obj\n", 7);

3552 (
wrôãn
);

3553 
	}
}

3559 
tsize_t
 
	$t2p_wrôe_pdf_obj_íd
(
TIFF
* 
ouçut
){

3561 
tsize_t
 
wrôãn
=0;

3563 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "endobj\n", 7);

3565 (
wrôãn
);

3566 
	}
}

3572 
tsize_t
 
	$t2p_wrôe_pdf_«me
(* 
«me
, 
TIFF
* 
ouçut
){

3574 
tsize_t
 
wrôãn
=0;

3575 
uöt32
 
i
=0;

3576 
buf„r
[64];

3577 
uöt16
 
√xtch¨
=0;

3578 
size_t
 
«mñí
=0;

3580 
«mñí
 = 
	`°æí
((*)
«me
);

3581 i‡(
«mñí
>126) {

3582 
«mñí
=126;

3584 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/", 1);

3585 
i
=0;i<
«mñí
;i++){

3586 i‡–(()
«me
[
i
]) < 0x21){

3587 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3588 
buf„r
[(buffer) - 1] = '\0';

3589 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3590 
√xtch¨
=1;

3592 i‡–(()
«me
[
i
]) > 0x7E){

3593 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3594 
buf„r
[(buffer) - 1] = '\0';

3595 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3596 
√xtch¨
=1;

3598 i‡(
√xtch¨
==0){

3599 
«me
[
i
]){

3601 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3602 
buf„r
[(buffer) - 1] = '\0';

3603 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3606 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3607 
buf„r
[(buffer) - 1] = '\0';

3608 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3611 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3612 
buf„r
[(buffer) - 1] = '\0';

3613 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3616 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3617 
buf„r
[(buffer) - 1] = '\0';

3618 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3621 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3622 
buf„r
[(buffer) - 1] = '\0';

3623 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3626 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3627 
buf„r
[(buffer) - 1] = '\0';

3628 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3631 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3632 
buf„r
[(buffer) - 1] = '\0';

3633 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3636 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3637 
buf„r
[(buffer) - 1] = '\0';

3638 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3641 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3642 
buf„r
[(buffer) - 1] = '\0';

3643 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3646 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3647 
buf„r
[(buffer) - 1] = '\0';

3648 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3651 
	`•rötf
(
buf„r
, "#%.2X", 
«me
[
i
]);

3652 
buf„r
[(buffer) - 1] = '\0';

3653 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 3);

3656 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë&
«me
[
i
], 1);

3659 
√xtch¨
=0;

3661 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " ", 1);

3663 (
wrôãn
);

3664 
	}
}

3670 
tsize_t
 
	$t2p_wrôe_pdf_°rög
(* 
pdf°r
, 
TIFF
* 
ouçut
)

3672 
tsize_t
 
wrôãn
 = 0;

3673 
uöt32
 
i
 = 0;

3674 
buf„r
[64];

3675 
size_t
 
Àn
 = 0;

3677 
Àn
 = 
	`°æí
(
pdf°r
);

3678 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "(", 1);

3679 
i
=0; i<
Àn
; i++) {

3680 if((
pdf°r
[
i
]&0x80) || (pdfstr[i]==127) || (pdfstr[i]<32)){

3681 
	`¢¥ötf
(
buf„r
, (buf„r), "\\%.3o", (()
pdf°r
[
i
]));

3682 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
)
buf„r
, 4);

3684 
pdf°r
[
i
]){

3686 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\\b", 2);

3689 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\\t", 2);

3692 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\\n", 2);

3695 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\\f", 2);

3698 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\\r", 2);

3701 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\\(", 2);

3704 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\\)", 2);

3707 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\\\\", 2);

3710 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë&
pdf°r
[
i
], 1);

3714 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) ") ", 1);

3716 (
wrôãn
);

3717 
	}
}

3724 
tsize_t
 
	$t2p_wrôe_pdf_°ªam
(
td©a_t
 
buf„r
, 
tsize_t
 
Àn
, 
TIFF
* 
ouçut
){

3726 
tsize_t
 
wrôãn
=0;

3728 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
Àn
);

3730 (
wrôãn
);

3731 
	}
}

3737 
tsize_t
 
	$t2p_wrôe_pdf_°ªam_°¨t
(
TIFF
* 
ouçut
){

3739 
tsize_t
 
wrôãn
=0;

3741 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "stream\n", 7);

3743 (
wrôãn
);

3744 
	}
}

3750 
tsize_t
 
	$t2p_wrôe_pdf_°ªam_íd
(
TIFF
* 
ouçut
){

3752 
tsize_t
 
wrôãn
=0;

3754 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\nendstream\n", 11);

3756 (
wrôãn
);

3757 
	}
}

3763 
tsize_t
 
	$t2p_wrôe_pdf_°ªam_di˘
(
tsize_t
 
Àn
, 
uöt32
 
numbî
, 
TIFF
* 
ouçut
){

3765 
tsize_t
 
wrôãn
=0;

3766 
buf„r
[16];

3767 
buÊí
=0;

3769 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Length ", 8);

3770 if(
Àn
!=0){

3771 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_Àngth
(
Àn
, 
ouçut
);

3773 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
numbî
);

3774 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

3775 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R \n", 6);

3778 (
wrôãn
);

3779 
	}
}

3785 
tsize_t
 
	$t2p_wrôe_pdf_°ªam_di˘_°¨t
(
TIFF
* 
ouçut
){

3787 
tsize_t
 
wrôãn
=0;

3789 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "<< \n", 4);

3791 (
wrôãn
);

3792 
	}
}

3798 
tsize_t
 
	$t2p_wrôe_pdf_°ªam_di˘_íd
(
TIFF
* 
ouçut
){

3800 
tsize_t
 
wrôãn
=0;

3802 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " >>\n", 4);

3804 (
wrôãn
);

3805 
	}
}

3811 
tsize_t
 
	$t2p_wrôe_pdf_°ªam_Àngth
(
tsize_t
 
Àn
, 
TIFF
* 
ouçut
){

3813 
tsize_t
 
wrôãn
=0;

3814 
buf„r
[16];

3815 
buÊí
=0;

3817 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
Àn
);

3818 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

3819 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

3821 (
wrôãn
);

3822 
	}
}

3828 
tsize_t
 
	$t2p_wrôe_pdf_ˇèlog
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
)

3830 
tsize_t
 
wrôãn
 = 0;

3831 
buf„r
[16];

3832 
buÊí
 = 0;

3834 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
,

3835 (
td©a_t
)"<< \n/Type /Catalog \n/Pages ",

3837 
buÊí
 = 
	`¢¥ötf
(
buf„r
, (buf„r), "%lu", ()
t2p
->
pdf_∑ges
);

3838 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
,

3839 
	`TIFFmö
((
size_t
)
buÊí
, (
buf„r
) - 1));

3840 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R \n", 6);

3841 if(
t2p
->
pdf_fôwödow
){

3842 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
,

3843 (
td©a_t
) "/ViewerPreferences <</FitWindowÅrue>>\n",

3846 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
)">>\n", 3);

3848 (
wrôãn
);

3849 
	}
}

3855 
tsize_t
 
	$t2p_wrôe_pdf_öfo
(
T2P
* 
t2p
, 
TIFF
* 
öput
, TIFF* 
ouçut
)

3857 
tsize_t
 
wrôãn
 = 0;

3858 * 
öfo
;

3859 
buf„r
[512];

3861 if(
t2p
->
pdf_d©ëime
[0] == '\0')

3862 
	`t2p_pdf_tif·ime
(
t2p
, 
öput
);

3863 i‡(
	`°æí
(
t2p
->
pdf_d©ëime
) > 0) {

3864 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "<< \n/CreationDate ", 18);

3865 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
t2p
->
pdf_d©ëime
, 
ouçut
);

3866 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n/ModDate ", 10);

3867 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
t2p
->
pdf_d©ëime
, 
ouçut
);

3869 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n/Producer ", 11);

3870 
	`_TIFFmem£t
((
td©a_t
)
buf„r
, 0x00, (buffer));

3871 
	`¢¥ötf
(
buf„r
, (buf„r), "libtif‡/Åiff2pd‡- %d", 
TIFFLIB_VERSION
);

3872 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
buf„r
, 
ouçut
);

3873 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

3874 i‡(
t2p
->
pdf_¸ót‹
[0] != '\0') {

3875 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Creator ", 9);

3876 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
t2p
->
pdf_¸ót‹
, 
ouçut
);

3877 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

3879 i‡(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_SOFTWARE
, &
öfo
) != 0 && info) {

3880 if(
	`°æí
(
öfo
Ë>(
t2p
->
pdf_¸ót‹
))

3881 
öfo
[(
t2p
->
pdf_¸ót‹
) - 1] = '\0';

3882 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Creator ", 9);

3883 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
öfo
, 
ouçut
);

3884 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

3887 i‡(
t2p
->
pdf_auth‹
[0] != '\0') {

3888 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Author ", 8);

3889 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
t2p
->
pdf_auth‹
, 
ouçut
);

3890 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

3892 i‡((
	`TIFFGëFõld
(
öput
, 
TIFFTAG_ARTIST
, &
öfo
) != 0

3893 || 
	`TIFFGëFõld
(
öput
, 
TIFFTAG_COPYRIGHT
, &
öfo
) != 0)

3894 && 
öfo
) {

3895 i‡(
	`°æí
(
öfo
Ë>(
t2p
->
pdf_auth‹
))

3896 
öfo
[(
t2p
->
pdf_auth‹
) - 1] = '\0';

3897 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Author ", 8);

3898 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
öfo
, 
ouçut
);

3899 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

3902 i‡(
t2p
->
pdf_tôÀ
[0] != '\0') {

3903 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Title ", 7);

3904 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
t2p
->
pdf_tôÀ
, 
ouçut
);

3905 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

3907 i‡(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_DOCUMENTNAME
, &
öfo
) != 0){

3908 if(
	`°æí
(
öfo
) > 511) {

3909 
öfo
[512] = '\0';

3911 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Title ", 7);

3912 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
öfo
, 
ouçut
);

3913 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

3916 i‡(
t2p
->
pdf_subje˘
[0] != '\0') {

3917 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Subject ", 9);

3918 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
t2p
->
pdf_subje˘
, 
ouçut
);

3919 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

3921 i‡(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_IMAGEDESCRIPTION
, &
öfo
) != 0 && info) {

3922 i‡(
	`°æí
(
öfo
Ë>(
t2p
->
pdf_subje˘
))

3923 
öfo
[(
t2p
->
pdf_subje˘
) - 1] = '\0';

3924 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Subject ", 9);

3925 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
öfo
, 
ouçut
);

3926 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

3929 i‡(
t2p
->
pdf_keyw‹ds
[0] != '\0') {

3930 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Keywords ", 10);

3931 
wrôãn
 +
	`t2p_wrôe_pdf_°rög
(
t2p
->
pdf_keyw‹ds
, 
ouçut
);

3932 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

3934 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) ">> \n", 4);

3936 (
wrôãn
);

3937 
	}
}

3944 
	$t2p_pdf_cuºíâime
(
T2P
* 
t2p
)

3946 
tm
* 
cuºíâime
;

3947 
time_t
 
timíow
;

3949 i‡(
	`time
(&
timíow
Ë=(
time_t
) -1) {

3950 
	`TIFFEº‹
(
TIFF2PDF_MODULE
,

3951 "C™'àgëÅhêcuºíàtime: %s", 
	`°ªº‹
(
î∫o
));

3952 
timíow
 = (
time_t
) 0;

3955 
cuºíâime
 = 
	`loˇ…ime
(&
timíow
);

3956 
	`¢¥ötf
(
t2p
->
pdf_d©ëime
, (t2p->pdf_datetime),

3958 (
cuºíâime
->
tm_yór
 + 1900) % 65536,

3959 (
cuºíâime
->
tm_m⁄
 + 1) % 256,

3960 (
cuºíâime
->
tm_mday
) % 256,

3961 (
cuºíâime
->
tm_hour
) % 256,

3962 (
cuºíâime
->
tm_mö
) % 256,

3963 (
cuºíâime
->
tm_£c
) % 256);

3966 
	}
}

3973 
	$t2p_pdf_tif·ime
(
T2P
* 
t2p
, 
TIFF
* 
öput
)

3975 * 
d©ëime
;

3977 i‡(
	`TIFFGëFõld
(
öput
, 
TIFFTAG_DATETIME
, &
d©ëime
) != 0

3978 && (
	`°æí
(
d©ëime
) >= 19) ){

3979 
t2p
->
pdf_d©ëime
[0]='D';

3980 
t2p
->
pdf_d©ëime
[1]=':';

3981 
t2p
->
pdf_d©ëime
[2]=
d©ëime
[0];

3982 
t2p
->
pdf_d©ëime
[3]=
d©ëime
[1];

3983 
t2p
->
pdf_d©ëime
[4]=
d©ëime
[2];

3984 
t2p
->
pdf_d©ëime
[5]=
d©ëime
[3];

3985 
t2p
->
pdf_d©ëime
[6]=
d©ëime
[5];

3986 
t2p
->
pdf_d©ëime
[7]=
d©ëime
[6];

3987 
t2p
->
pdf_d©ëime
[8]=
d©ëime
[8];

3988 
t2p
->
pdf_d©ëime
[9]=
d©ëime
[9];

3989 
t2p
->
pdf_d©ëime
[10]=
d©ëime
[11];

3990 
t2p
->
pdf_d©ëime
[11]=
d©ëime
[12];

3991 
t2p
->
pdf_d©ëime
[12]=
d©ëime
[14];

3992 
t2p
->
pdf_d©ëime
[13]=
d©ëime
[15];

3993 
t2p
->
pdf_d©ëime
[14]=
d©ëime
[17];

3994 
t2p
->
pdf_d©ëime
[15]=
d©ëime
[18];

3995 
t2p
->
pdf_d©ëime
[16] = '\0';

3997 
	`t2p_pdf_cuºíâime
(
t2p
);

4001 
	}
}

4007 
tsize_t
 
	$t2p_wrôe_pdf_∑ges
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
)

4009 
tsize_t
 
wrôãn
=0;

4010 
tdú_t
 
i
=0;

4011 
buf„r
[16];

4012 
buÊí
=0;

4014 
∑ge
=0;

4015 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
,

4016 (
td©a_t
) "<< \n/Type /Pages \n/Kids [ ", 26);

4017 
∑ge
 = 
t2p
->
pdf_∑ges
+1;

4018 
i
=0;i<
t2p
->
tiff_∑gecou¡
;i++){

4019 
buÊí
=
	`•rötf
(
buf„r
, "%d", 
∑ge
);

4020 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4021 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R ", 5);

4022 i‡–((
i
+1)%8)==0 ) {

4023 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

4025 
∑ge
 +=3;

4026 
∑ge
 +
t2p
->
tiff_∑ges
[
i
].
∑ge_exåa
;

4027 if(
t2p
->
tiff_∑ges
[
i
].
∑ge_tûecou¡
>0){

4028 
∑ge
 +(2 * 
t2p
->
tiff_∑ges
[
i
].
∑ge_tûecou¡
);

4030 
∑ge
 +=2;

4033 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "] \n/Count ", 10);

4034 
	`_TIFFmem£t
(
buf„r
, 0x00, 16);

4035 
buÊí
=
	`•rötf
(
buf„r
, "%d", 
t2p
->
tiff_∑gecou¡
);

4036 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4037 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " \n>> \n", 6);

4039 (
wrôãn
);

4040 
	}
}

4046 
tsize_t
 
	$t2p_wrôe_pdf_∑ge
(
uöt32
 
obje˘
, 
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

4048 
i
=0;

4049 
tsize_t
 
wrôãn
=0;

4050 
buf„r
[16];

4051 
buÊí
=0;

4053 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "<<\n/Type /Page \n/Parent ", 24);

4054 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
t2p
->
pdf_∑ges
);

4055 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4056 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R \n", 6);

4057 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/MediaBox [", 11);

4058 
buÊí
=
	`•rötf
(
buf„r
, "%.4f",
t2p
->
pdf_medübox
.
x1
);

4059 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4060 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " ", 1);

4061 
buÊí
=
	`•rötf
(
buf„r
, "%.4f",
t2p
->
pdf_medübox
.
y1
);

4062 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4063 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " ", 1);

4064 
buÊí
=
	`•rötf
(
buf„r
, "%.4f",
t2p
->
pdf_medübox
.
x2
);

4065 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4066 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " ", 1);

4067 
buÊí
=
	`•rötf
(
buf„r
, "%.4f",
t2p
->
pdf_medübox
.
y2
);

4068 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4069 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "] \n", 3);

4070 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Contents ", 10);

4071 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()(
obje˘
 + 1));

4072 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4073 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R \n", 6);

4074 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Resources << \n", 15);

4075 if–
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûecou¡
 != 0 ){

4076 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/XObject <<\n", 12);

4077 
i
=0;i<
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûecou¡
;i++){

4078 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Im", 3);

4079 
buÊí
 = 
	`•rötf
(
buf„r
, "%u", 
t2p
->
pdf_∑ge
+1);

4080 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4081 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "_", 1);

4082 
buÊí
 = 
	`•rötf
(
buf„r
, "%u", 
i
+1);

4083 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4084 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " ", 1);

4085 
buÊí
 = 
	`•rötf
(

4086 
buf„r
,

4088 ()(
obje˘
+3+(2*
i
)+
t2p
->
tiff_∑ges
[t2p->
pdf_∑ge
].
∑ge_exåa
));

4089 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4090 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R ", 5);

4091 if(
i
%4==3){

4092 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n", 1);

4095 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) ">>\n", 3);

4097 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/XObject <<\n", 12);

4098 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Im", 3);

4099 
buÊí
 = 
	`•rötf
(
buf„r
, "%u", 
t2p
->
pdf_∑ge
+1);

4100 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4101 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " ", 1);

4102 
buÊí
 = 
	`•rötf
(

4103 
buf„r
,

4105 ()(
obje˘
+3+(2*
i
)+
t2p
->
tiff_∑ges
[t2p->
pdf_∑ge
].
∑ge_exåa
));

4106 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4107 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R ", 5);

4108 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) ">>\n", 3);

4110 if(
t2p
->
tiff_å™s„rfun˘i⁄cou¡
 != 0) {

4111 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/ExtGState <<", 13);

4112 
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/GS1 ", 5);

4113 
buÊí
 = 
	`•rötf
(

4114 
buf„r
,

4116 ()(
obje˘
 + 3));

4117 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4118 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R ", 5);

4119 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) ">> \n", 4);

4121 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/ProcSet [ ", 11);

4122 if(
t2p
->
pdf_cﬁ‹•a˚
 =
T2P_CS_BILEVEL


4123 || 
t2p
->
pdf_cﬁ‹•a˚
 =
T2P_CS_GRAY


4125 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/ImageB ", 8);

4127 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/ImageC ", 8);

4128 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_PALETTE
){

4129 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/ImageI ", 8);

4132 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "]\n>>\n>>\n", 8);

4134 (
wrôãn
);

4135 
	}
}

4141 
	$t2p_compo£_pdf_∑ge
(
T2P
* 
t2p
){

4143 
uöt32
 
i
=0;

4144 
uöt32
 
i2
=0;

4145 
T2P_TILE
* 
tûes
=
NULL
;

4146 
T2P_BOX
* 
boxp
=
NULL
;

4147 
uöt32
 
tûecou¡x
=0;

4148 
uöt32
 
tûecou¡y
=0;

4149 
uöt32
 
tûewidth
=0;

4150 
uöt32
 
tûñígth
=0;

4151 
i°ûed
=0;

4152 
f
=0;

4153 
width_øtio
=0;

4154 
Àngth_øtio
=0;

4156 
t2p
->
pdf_xªs
 =Å2p->
tiff_xªs
;

4157 
t2p
->
pdf_yªs
 =Å2p->
tiff_yªs
;

4158 if(
t2p
->
pdf_ovîridîes
) {

4159 
t2p
->
pdf_xªs
 =Å2p->
pdf_deÁu…xªs
;

4160 
t2p
->
pdf_yªs
 =Å2p->
pdf_deÁu…yªs
;

4162 if(
t2p
->
pdf_xªs
 == 0.0)

4163 
t2p
->
pdf_xªs
 =Å2p->
pdf_deÁu…xªs
;

4164 if(
t2p
->
pdf_yªs
 == 0.0)

4165 
t2p
->
pdf_yªs
 =Å2p->
pdf_deÁu…yªs
;

4166 i‡(
t2p
->
pdf_image_fûÕage
) {

4167 
width_øtio
 = 
t2p
->
pdf_deÁu…∑gewidth
/t2p->
tiff_width
;

4168 
Àngth_øtio
 = 
t2p
->
pdf_deÁu…∑gñígth
/t2p->
tiff_Àngth
;

4169 i‡(
width_øtio
 < 
Àngth_øtio
 ) {

4170 
t2p
->
pdf_imagewidth
 =Å2p->
pdf_deÁu…∑gewidth
;

4171 
t2p
->
pdf_imagñígth
 =Å2p->
tiff_Àngth
 * 
width_øtio
;

4173 
t2p
->
pdf_imagewidth
 =Å2p->
tiff_width
 * 
Àngth_øtio
;

4174 
t2p
->
pdf_imagñígth
 =Å2p->
pdf_deÁu…∑gñígth
;

4176 } i‡(
t2p
->
tiff_ªsunô
 !
RESUNIT_CENTIMETER


4177 && 
t2p
->
tiff_ªsunô
 !
RESUNIT_INCH
) {

4178 
t2p
->
pdf_imagewidth
 = (()—2p->
tiff_width
))/t2p->
pdf_xªs
;

4179 
t2p
->
pdf_imagñígth
 = (()—2p->
tiff_Àngth
))/t2p->
pdf_yªs
;

4181 
t2p
->
pdf_imagewidth
 =

4182 (()(
t2p
->
tiff_width
))*
PS_UNIT_SIZE
/t2p->
pdf_xªs
;

4183 
t2p
->
pdf_imagñígth
 =

4184 (()(
t2p
->
tiff_Àngth
))*
PS_UNIT_SIZE
/t2p->
pdf_yªs
;

4186 if(
t2p
->
pdf_ovîridïagesize
 != 0) {

4187 
t2p
->
pdf_∑gewidth
 =Å2p->
pdf_deÁu…∑gewidth
;

4188 
t2p
->
pdf_∑gñígth
 =Å2p->
pdf_deÁu…∑gñígth
;

4190 
t2p
->
pdf_∑gewidth
 =Å2p->
pdf_imagewidth
;

4191 
t2p
->
pdf_∑gñígth
 =Å2p->
pdf_imagñígth
;

4193 
t2p
->
pdf_medübox
.
x1
=0.0;

4194 
t2p
->
pdf_medübox
.
y1
=0.0;

4195 
t2p
->
pdf_medübox
.
x2
Ò2p->
pdf_∑gewidth
;

4196 
t2p
->
pdf_medübox
.
y2
Ò2p->
pdf_∑gñígth
;

4197 
t2p
->
pdf_imagebox
.
x1
=0.0;

4198 
t2p
->
pdf_imagebox
.
y1
=0.0;

4199 
t2p
->
pdf_imagebox
.
x2
Ò2p->
pdf_imagewidth
;

4200 
t2p
->
pdf_imagebox
.
y2
Ò2p->
pdf_imagñígth
;

4201 if(
t2p
->
pdf_ovîridïagesize
!=0){

4202 
t2p
->
pdf_imagebox
.
x1
+=(—2p->
pdf_∑gewidth
-t2p->
pdf_imagewidth
)/2.0F);

4203 
t2p
->
pdf_imagebox
.
y1
+=(—2p->
pdf_∑gñígth
-t2p->
pdf_imagñígth
)/2.0F);

4204 
t2p
->
pdf_imagebox
.
x2
+=(—2p->
pdf_∑gewidth
-t2p->
pdf_imagewidth
)/2.0F);

4205 
t2p
->
pdf_imagebox
.
y2
+=(—2p->
pdf_∑gñígth
-t2p->
pdf_imagñígth
)/2.0F);

4207 if(
t2p
->
tiff_‹õ¡©i⁄
 > 4){

4208 
f
=
t2p
->
pdf_medübox
.
x2
;

4209 
t2p
->
pdf_medübox
.
x2
Ò2p->pdf_medübox.
y2
;

4210 
t2p
->
pdf_medübox
.
y2
=
f
;

4212 
i°ûed
=((
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
]).
tûes_tûecou¡
==0) ? 0 : 1;

4213 if(
i°ûed
==0){

4214 
	`t2p_compo£_pdf_∑ge_‹õ¡
(&(
t2p
->
pdf_imagebox
),Å2p->
tiff_‹õ¡©i⁄
);

4217 
tûewidth
=(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
]).
tûes_tûewidth
;

4218 
tûñígth
=(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
]).
tûes_tûñígth
;

4219 
tûecou¡x
=(
t2p
->
tiff_width
 +

4220 
tûewidth
 -1)/

4221 
tûewidth
;

4222 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
]).
tûes_tûecou¡x
=
tûecou¡x
;

4223 
tûecou¡y
=(
t2p
->
tiff_Àngth
 +

4224 
tûñígth
 -1)/

4225 
tûñígth
;

4226 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
]).
tûes_tûecou¡y
=
tûecou¡y
;

4227 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
]).
tûes_edgëûewidth
=

4228 
t2p
->
tiff_width
 % 
tûewidth
;

4229 (
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
]).
tûes_edgëûñígth
=

4230 
t2p
->
tiff_Àngth
 % 
tûñígth
;

4231 
tûes
=(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
]).
tûes_tûes
;

4232 
i2
=0;i2<
tûecou¡y
-1;i2++){

4233 
i
=0;i<
tûecou¡x
-1;i++){

4234 
boxp
=&(
tûes
[
i2
*
tûecou¡x
+
i
].
tûe_box
);

4235 
boxp
->
x1
 =

4236 
t2p
->
pdf_imagebox
.
x1


4237 + (()(
t2p
->
pdf_imagewidth
 * 
i
 * 
tûewidth
)

4238 / ()
t2p
->
tiff_width
);

4239 
boxp
->
x2
 =

4240 
t2p
->
pdf_imagebox
.
x1


4241 + (()(
t2p
->
pdf_imagewidth
 * (
i
+1Ë* 
tûewidth
)

4242 / ()
t2p
->
tiff_width
);

4243 
boxp
->
y1
 =

4244 
t2p
->
pdf_imagebox
.
y2


4245 - (()(
t2p
->
pdf_imagñígth
 * (
i2
+1Ë* 
tûñígth
)

4246 / ()
t2p
->
tiff_Àngth
);

4247 
boxp
->
y2
 =

4248 
t2p
->
pdf_imagebox
.
y2


4249 - (()(
t2p
->
pdf_imagñígth
 * 
i2
 * 
tûñígth
)

4250 / ()
t2p
->
tiff_Àngth
);

4252 
boxp
=&(
tûes
[
i2
*
tûecou¡x
+
i
].
tûe_box
);

4253 
boxp
->
x1
 =

4254 
t2p
->
pdf_imagebox
.
x1


4255 + (()(
t2p
->
pdf_imagewidth
 * 
i
 * 
tûewidth
)

4256 / ()
t2p
->
tiff_width
);

4257 
boxp
->
x2
 = 
t2p
->
pdf_imagebox
.x2;

4258 
boxp
->
y1
 =

4259 
t2p
->
pdf_imagebox
.
y2


4260 - (()(
t2p
->
pdf_imagñígth
 * (
i2
+1Ë* 
tûñígth
)

4261 / ()
t2p
->
tiff_Àngth
);

4262 
boxp
->
y2
 =

4263 
t2p
->
pdf_imagebox
.
y2


4264 - (()(
t2p
->
pdf_imagñígth
 * 
i2
 * 
tûñígth
)

4265 / ()
t2p
->
tiff_Àngth
);

4267 
i
=0;i<
tûecou¡x
-1;i++){

4268 
boxp
=&(
tûes
[
i2
*
tûecou¡x
+
i
].
tûe_box
);

4269 
boxp
->
x1
 =

4270 
t2p
->
pdf_imagebox
.
x1


4271 + (()(
t2p
->
pdf_imagewidth
 * 
i
 * 
tûewidth
)

4272 / ()
t2p
->
tiff_width
);

4273 
boxp
->
x2
 =

4274 
t2p
->
pdf_imagebox
.
x1


4275 + (()(
t2p
->
pdf_imagewidth
 * (
i
+1Ë* 
tûewidth
)

4276 / ()
t2p
->
tiff_width
);

4277 
boxp
->
y1
 = 
t2p
->
pdf_imagebox
.y1;

4278 
boxp
->
y2
 =

4279 
t2p
->
pdf_imagebox
.
y2


4280 - (()(
t2p
->
pdf_imagñígth
 * 
i2
 * 
tûñígth
)

4281 / ()
t2p
->
tiff_Àngth
);

4283 
boxp
=&(
tûes
[
i2
*
tûecou¡x
+
i
].
tûe_box
);

4284 
boxp
->
x1
 =

4285 
t2p
->
pdf_imagebox
.
x1


4286 + (()(
t2p
->
pdf_imagewidth
 * 
i
 * 
tûewidth
)

4287 / ()
t2p
->
tiff_width
);

4288 
boxp
->
x2
 = 
t2p
->
pdf_imagebox
.x2;

4289 
boxp
->
y1
 = 
t2p
->
pdf_imagebox
.y1;

4290 
boxp
->
y2
 =

4291 
t2p
->
pdf_imagebox
.
y2


4292 - (()(
t2p
->
pdf_imagñígth
 * 
i2
 * 
tûñígth
)

4293 / ()
t2p
->
tiff_Àngth
);

4295 if(
t2p
->
tiff_‹õ¡©i⁄
==0 ||Å2p->tiff_orientation==1){

4296 
i
=0;i<(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
]).
tûes_tûecou¡
;i++){

4297 
	`t2p_compo£_pdf_∑ge_‹õ¡
–&(
tûes
[
i
].
tûe_box
) , 0);

4301 
i
=0;i<(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
]).
tûes_tûecou¡
;i++){

4302 
boxp
=&(
tûes
[
i
].
tûe_box
);

4303 
boxp
->
x1
 -
t2p
->
pdf_imagebox
.x1;

4304 
boxp
->
x2
 -
t2p
->
pdf_imagebox
.
x1
;

4305 
boxp
->
y1
 -
t2p
->
pdf_imagebox
.y1;

4306 
boxp
->
y2
 -
t2p
->
pdf_imagebox
.
y1
;

4307 if(
t2p
->
tiff_‹õ¡©i⁄
==2 ||Å2p->tiff_orientation==3){

4308 
boxp
->
x1
 = 
t2p
->
pdf_imagebox
.
x2
 -Å2p->pdf_imagebox.x1 - boxp->x1;

4309 
boxp
->
x2
 = 
t2p
->
pdf_imagebox
.x2 -Å2p->pdf_imagebox.
x1
 - boxp->x2;

4311 if(
t2p
->
tiff_‹õ¡©i⁄
==3 ||Å2p->tiff_orientation==4){

4312 
boxp
->
y1
 = 
t2p
->
pdf_imagebox
.
y2
 -Å2p->pdf_imagebox.y1 - boxp->y1;

4313 
boxp
->
y2
 = 
t2p
->
pdf_imagebox
.y2 -Å2p->pdf_imagebox.
y1
 - boxp->y2;

4315 if(
t2p
->
tiff_‹õ¡©i⁄
==8 ||Å2p->tiff_orientation==5){

4316 
boxp
->
y1
 = 
t2p
->
pdf_imagebox
.
y2
 -Å2p->pdf_imagebox.y1 - boxp->y1;

4317 
boxp
->
y2
 = 
t2p
->
pdf_imagebox
.y2 -Å2p->pdf_imagebox.
y1
 - boxp->y2;

4319 if(
t2p
->
tiff_‹õ¡©i⁄
==5 ||Å2p->tiff_orientation==6){

4320 
boxp
->
x1
 = 
t2p
->
pdf_imagebox
.
x2
 -Å2p->pdf_imagebox.x1 - boxp->x1;

4321 
boxp
->
x2
 = 
t2p
->
pdf_imagebox
.x2 -Å2p->pdf_imagebox.
x1
 - boxp->x2;

4323 if(
t2p
->
tiff_‹õ¡©i⁄
 > 4){

4324 
f
=
boxp
->
x1
;

4325 
boxp
->
x1
 = boxp->
y1
;

4326 
boxp
->
y1
 = 
f
;

4327 
f
=
boxp
->
x2
;

4328 
boxp
->
x2
 = boxp->
y2
;

4329 
boxp
->
y2
 = 
f
;

4330 
	`t2p_compo£_pdf_∑ge_‹õ¡_Êù
(
boxp
, 
t2p
->
tiff_‹õ¡©i⁄
);

4332 
	`t2p_compo£_pdf_∑ge_‹õ¡
(
boxp
, 
t2p
->
tiff_‹õ¡©i⁄
);

4338 
	}
}

4340 
	$t2p_compo£_pdf_∑ge_‹õ¡
(
T2P_BOX
* 
boxp
, 
uöt16
 
‹õ¡©i⁄
){

4342 
m1
[9];

4343 
f
=0.0;

4345 if–
boxp
->
x1
 > boxp->
x2
){

4346 
f
=
boxp
->
x1
;

4347 
boxp
->
x1
=boxp->
x2
;

4348 
boxp
->
x2
 = 
f
;

4350 if–
boxp
->
y1
 > boxp->
y2
){

4351 
f
=
boxp
->
y1
;

4352 
boxp
->
y1
=boxp->
y2
;

4353 
boxp
->
y2
 = 
f
;

4355 
boxp
->
m©
[0]=
m1
[0]=boxp->
x2
-boxp->
x1
;

4356 
boxp
->
m©
[1]=
m1
[1]=0.0;

4357 
boxp
->
m©
[2]=
m1
[2]=0.0;

4358 
boxp
->
m©
[3]=
m1
[3]=0.0;

4359 
boxp
->
m©
[4]=
m1
[4]=boxp->
y2
-boxp->
y1
;

4360 
boxp
->
m©
[5]=
m1
[5]=0.0;

4361 
boxp
->
m©
[6]=
m1
[6]=boxp->
x1
;

4362 
boxp
->
m©
[7]=
m1
[7]=boxp->
y1
;

4363 
boxp
->
m©
[8]=
m1
[8]=1.0;

4364 
‹õ¡©i⁄
){

4369 
boxp
->
m©
[0]=0.0F-
m1
[0];

4370 
boxp
->
m©
[6]+=
m1
[0];

4373 
boxp
->
m©
[0]=0.0F-
m1
[0];

4374 
boxp
->
m©
[4]=0.0F-
m1
[4];

4375 
boxp
->
m©
[6]+=
m1
[0];

4376 
boxp
->
m©
[7]+=
m1
[4];

4379 
boxp
->
m©
[4]=0.0F-
m1
[4];

4380 
boxp
->
m©
[7]+=
m1
[4];

4383 
boxp
->
m©
[0]=0.0F;

4384 
boxp
->
m©
[1]=0.0F-
m1
[0];

4385 
boxp
->
m©
[3]=0.0F-
m1
[4];

4386 
boxp
->
m©
[4]=0.0F;

4387 
boxp
->
m©
[6]+=
m1
[4];

4388 
boxp
->
m©
[7]+=
m1
[0];

4391 
boxp
->
m©
[0]=0.0F;

4392 
boxp
->
m©
[1]=0.0F-
m1
[0];

4393 
boxp
->
m©
[3]=
m1
[4];

4394 
boxp
->
m©
[4]=0.0F;

4395 
boxp
->
m©
[7]+=
m1
[0];

4398 
boxp
->
m©
[0]=0.0F;

4399 
boxp
->
m©
[1]=
m1
[0];

4400 
boxp
->
m©
[3]=
m1
[4];

4401 
boxp
->
m©
[4]=0.0F;

4404 
boxp
->
m©
[0]=0.0F;

4405 
boxp
->
m©
[1]=
m1
[0];

4406 
boxp
->
m©
[3]=0.0F-
m1
[4];

4407 
boxp
->
m©
[4]=0.0F;

4408 
boxp
->
m©
[6]+=
m1
[4];

4413 
	}
}

4415 
	$t2p_compo£_pdf_∑ge_‹õ¡_Êù
(
T2P_BOX
* 
boxp
, 
uöt16
 
‹õ¡©i⁄
){

4417 
m1
[9];

4418 
f
=0.0;

4420 if–
boxp
->
x1
 > boxp->
x2
){

4421 
f
=
boxp
->
x1
;

4422 
boxp
->
x1
=boxp->
x2
;

4423 
boxp
->
x2
 = 
f
;

4425 if–
boxp
->
y1
 > boxp->
y2
){

4426 
f
=
boxp
->
y1
;

4427 
boxp
->
y1
=boxp->
y2
;

4428 
boxp
->
y2
 = 
f
;

4430 
boxp
->
m©
[0]=
m1
[0]=boxp->
x2
-boxp->
x1
;

4431 
boxp
->
m©
[1]=
m1
[1]=0.0F;

4432 
boxp
->
m©
[2]=
m1
[2]=0.0F;

4433 
boxp
->
m©
[3]=
m1
[3]=0.0F;

4434 
boxp
->
m©
[4]=
m1
[4]=boxp->
y2
-boxp->
y1
;

4435 
boxp
->
m©
[5]=
m1
[5]=0.0F;

4436 
boxp
->
m©
[6]=
m1
[6]=boxp->
x1
;

4437 
boxp
->
m©
[7]=
m1
[7]=boxp->
y1
;

4438 
boxp
->
m©
[8]=
m1
[8]=1.0F;

4439 
‹õ¡©i⁄
){

4441 
boxp
->
m©
[0]=0.0F;

4442 
boxp
->
m©
[1]=0.0F-
m1
[4];

4443 
boxp
->
m©
[3]=0.0F-
m1
[0];

4444 
boxp
->
m©
[4]=0.0F;

4445 
boxp
->
m©
[6]+=
m1
[0];

4446 
boxp
->
m©
[7]+=
m1
[4];

4449 
boxp
->
m©
[0]=0.0F;

4450 
boxp
->
m©
[1]=0.0F-
m1
[4];

4451 
boxp
->
m©
[3]=
m1
[0];

4452 
boxp
->
m©
[4]=0.0F;

4453 
boxp
->
m©
[7]+=
m1
[4];

4456 
boxp
->
m©
[0]=0.0F;

4457 
boxp
->
m©
[1]=
m1
[4];

4458 
boxp
->
m©
[3]=
m1
[0];

4459 
boxp
->
m©
[4]=0.0F;

4462 
boxp
->
m©
[0]=0.0F;

4463 
boxp
->
m©
[1]=
m1
[4];

4464 
boxp
->
m©
[3]=0.0F-
m1
[0];

4465 
boxp
->
m©
[4]=0.0F;

4466 
boxp
->
m©
[6]+=
m1
[0];

4471 
	}
}

4477 
tsize_t
 
	$t2p_wrôe_pdf_∑ge_c⁄ã¡_°ªam
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

4479 
tsize_t
 
wrôãn
=0;

4480 
âûe_t
 
i
=0;

4481 
buf„r
[512];

4482 
buÊí
=0;

4483 
T2P_BOX
 
box
;

4485 if(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûecou¡
>0){

4486 
i
=0;i<
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûecou¡
; i++){

4487 
box
=
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûes
[
i
].
tûe_box
;

4488 
buÊí
=
	`•rötf
(
buf„r
,

4490 
t2p
->
tiff_å™s„rfun˘i⁄cou¡
?"/GS1 gs ":"",

4491 
box
.
m©
[0],

4492 
box
.
m©
[1],

4493 
box
.
m©
[3],

4494 
box
.
m©
[4],

4495 
box
.
m©
[6],

4496 
box
.
m©
[7],

4497 
t2p
->
pdf_∑ge
 + 1,

4498 ()(
i
 + 1));

4499 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam
(
buf„r
, 
buÊí
, 
ouçut
);

4502 
box
=
t2p
->
pdf_imagebox
;

4503 
buÊí
=
	`•rötf
(
buf„r
,

4505 
t2p
->
tiff_å™s„rfun˘i⁄cou¡
?"/GS1 gs ":"",

4506 
box
.
m©
[0],

4507 
box
.
m©
[1],

4508 
box
.
m©
[3],

4509 
box
.
m©
[4],

4510 
box
.
m©
[6],

4511 
box
.
m©
[7],

4512 
t2p
->
pdf_∑ge
+1);

4513 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam
(
buf„r
, 
buÊí
, 
ouçut
);

4516 (
wrôãn
);

4517 
	}
}

4523 
tsize_t
 
	$t2p_wrôe_pdf_xobje˘_°ªam_di˘
(
âûe_t
 
tûe
,

4524 
T2P
* 
t2p
,

4525 
TIFF
* 
ouçut
){

4527 
tsize_t
 
wrôãn
=0;

4528 
buf„r
[16];

4529 
buÊí
=0;

4531 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘
(0, 
t2p
->
pdf_xªfcou¡
+1, 
ouçut
);

4532 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
,

4533 (
td©a_t
) "/Type /XObject \n/Subtype /Image \n/Name /Im",

4535 
buÊí
=
	`•rötf
(
buf„r
, "%u", 
t2p
->
pdf_∑ge
+1);

4536 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4537 if(
tûe
 != 0){

4538 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "_", 1);

4539 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
tûe
);

4540 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4542 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n/Width ", 8);

4543 
	`_TIFFmem£t
((
td©a_t
)
buf„r
, 0x00, 16);

4544 if(
tûe
==0){

4545 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
t2p
->
tiff_width
);

4547 if(
	`t2p_tûe_is_right_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
-1)!=0){

4548 
buÊí
=
	`•rötf
(

4549 
buf„r
,

4551 ()
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûewidth
);

4553 
buÊí
=
	`•rötf
(

4554 
buf„r
,

4556 ()
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûewidth
);

4559 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4560 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n/Height ", 9);

4561 
	`_TIFFmem£t
((
td©a_t
)
buf„r
, 0x00, 16);

4562 if(
tûe
==0){

4563 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
t2p
->
tiff_Àngth
);

4565 if(
	`t2p_tûe_is_bŸtom_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
-1)!=0){

4566 
buÊí
=
	`•rötf
(

4567 
buf„r
,

4569 ()
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûñígth
);

4571 
buÊí
=
	`•rötf
(

4572 
buf„r
,

4574 ()
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûñígth
);

4577 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4578 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n/BitsPerComponent ", 19);

4579 
	`_TIFFmem£t
((
td©a_t
)
buf„r
, 0x00, 16);

4580 
buÊí
=
	`•rötf
(
buf„r
, "%u", 
t2p
->
tiff_bô•îßm∂e
);

4581 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4582 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n/ColorSpace ", 13);

4583 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_cs
(
t2p
, 
ouçut
);

4584 i‡(
t2p
->
pdf_image_öãΩﬁ©e
)

4585 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
,

4586 (
td©a_t
) "\n/InterpolateÅrue", 18);

4587 if–(
t2p
->
pdf_swôchdecode
 != 0)

4588 #ifde‡
CCITT_SUPPORT


4589 && ! (
t2p
->
pdf_cﬁ‹•a˚
 =
T2P_CS_BILEVEL


4590 && 
t2p
->
pdf_com¥essi⁄
 =
T2P_COMPRESS_G4
)

4593 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_decode
(
t2p
, 
ouçut
);

4595 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_°ªam_fûãr
(
tûe
, 
t2p
, 
ouçut
);

4597 (
wrôãn
);

4598 
	}
}

4605 
tsize_t
 
	$t2p_wrôe_pdf_xobje˘_cs
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

4607 
tsize_t
 
wrôãn
=0;

4608 
buf„r
[128];

4609 
buÊí
=0;

4611 
X_W
=1.0;

4612 
Y_W
=1.0;

4613 
Z_W
=1.0;

4615 if–(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_ICCBASED
) != 0){

4616 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_icccs
(
t2p
, 
ouçut
);

4617 (
wrôãn
);

4619 if–(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_PALETTE
) != 0){

4620 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "[ /Indexed ", 11);

4621 
t2p
->
pdf_cﬁ‹•a˚
 ^
T2P_CS_PALETTE
;

4622 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_cs
(
t2p
, 
ouçut
);

4623 
t2p
->
pdf_cﬁ‹•a˚
 |
T2P_CS_PALETTE
;

4624 
buÊí
=
	`•rötf
(
buf„r
, "%u", (0x0001 << 
t2p
->
tiff_bô•îßm∂e
)-1 );

4625 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4626 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " ", 1);

4627 
	`_TIFFmem£t
(
buf„r
, 0x00, 16);

4628 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
t2p
->
pdf_∑Àâecs
 );

4629 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4630 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R ]\n", 7);

4631 (
wrôãn
);

4633 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_BILEVEL
){

4634 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/DeviceGray \n", 13);

4636 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_GRAY
){

4637 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_CALGRAY
){

4638 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_ˇlcs
(
t2p
, 
ouçut
);

4640 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/DeviceGray \n", 13);

4643 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_RGB
){

4644 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_CALRGB
){

4645 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_ˇlcs
(
t2p
, 
ouçut
);

4647 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/DeviceRGB \n", 12);

4650 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_CMYK
){

4651 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/DeviceCMYK \n", 13);

4653 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_LAB
){

4654 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "[/Lab << \n", 10);

4655 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/WhitePoint ", 12);

4656 
X_W
 = 
t2p
->
tiff_whôechrom©icôõs
[0];

4657 
Y_W
 = 
t2p
->
tiff_whôechrom©icôõs
[1];

4658 
Z_W
 = 1.0F - (
X_W
 + 
Y_W
);

4659 
X_W
 /
Y_W
;

4660 
Z_W
 /
Y_W
;

4661 
Y_W
 = 1.0F;

4662 
buÊí
=
	`•rötf
(
buf„r
, "[%.4‡%.4‡%.4f] \n", 
X_W
, 
Y_W
, 
Z_W
);

4663 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4664 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Range ", 7);

4665 
buÊí
=
	`•rötf
(
buf„r
, "[%d %d %d %d] \n",

4666 
t2p
->
pdf_œbønge
[0],

4667 
t2p
->
pdf_œbønge
[1],

4668 
t2p
->
pdf_œbønge
[2],

4669 
t2p
->
pdf_œbønge
[3]);

4670 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4671 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) ">>] \n", 5);

4675 (
wrôãn
);

4676 
	}
}

4678 
tsize_t
 
	$t2p_wrôe_pdf_å™s„r
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

4680 
tsize_t
 
wrôãn
=0;

4681 
buf„r
[16];

4682 
buÊí
=0;

4684 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "<< /Type /ExtGState \n/TR ", 25);

4685 if(
t2p
->
tiff_å™s„rfun˘i⁄cou¡
 == 1){

4686 
buÊí
=
	`•rötf
(
buf„r
, "%lu",

4687 ()(
t2p
->
pdf_xªfcou¡
 + 1));

4688 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4689 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R ", 5);

4691 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "[ ", 2);

4692 
buÊí
=
	`•rötf
(
buf„r
, "%lu",

4693 ()(
t2p
->
pdf_xªfcou¡
 + 1));

4694 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4695 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R ", 5);

4696 
buÊí
=
	`•rötf
(
buf„r
, "%lu",

4697 ()(
t2p
->
pdf_xªfcou¡
 + 2));

4698 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4699 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R ", 5);

4700 
buÊí
=
	`•rötf
(
buf„r
, "%lu",

4701 ()(
t2p
->
pdf_xªfcou¡
 + 3));

4702 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4703 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R ", 5);

4704 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Identity ] ", 12);

4707 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " >> \n", 5);

4709 (
wrôãn
);

4710 
	}
}

4712 
tsize_t
 
	$t2p_wrôe_pdf_å™s„r_di˘
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
, 
uöt16
 
i
){

4714 
tsize_t
 
wrôãn
=0;

4715 
buf„r
[32];

4716 
buÊí
=0;

4717 ()
i
;

4719 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/FunctionType 0 \n", 17);

4720 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Domain [0.0 1.0] \n", 19);

4721 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Range [0.0 1.0] \n", 18);

4722 
buÊí
=
	`•rötf
(
buf„r
, "/Sizê[%u] \n", (1<<
t2p
->
tiff_bô•îßm∂e
));

4723 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4724 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/BitsPerSample 16 \n", 19);

4725 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘
(((
tsize_t
)1)<<(
t2p
->
tiff_bô•îßm∂e
+1), 0, 
ouçut
);

4727 (
wrôãn
);

4728 
	}
}

4730 
tsize_t
 
	$t2p_wrôe_pdf_å™s„r_°ªam
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
, 
uöt16
 
i
){

4732 
tsize_t
 
wrôãn
=0;

4734 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam
(

4735 
t2p
->
tiff_å™s„rfun˘i⁄
[
i
],

4736 (((
tsize_t
)1)<<(
t2p
->
tiff_bô•îßm∂e
+1)),

4737 
ouçut
);

4739 (
wrôãn
);

4740 
	}
}

4746 
tsize_t
 
	$t2p_wrôe_pdf_xobje˘_ˇlcs
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

4748 
tsize_t
 
wrôãn
=0;

4749 
buf„r
[128];

4750 
buÊí
=0;

4752 
X_W
=0.0;

4753 
Y_W
=0.0;

4754 
Z_W
=0.0;

4755 
X_R
=0.0;

4756 
Y_R
=0.0;

4757 
Z_R
=0.0;

4758 
X_G
=0.0;

4759 
Y_G
=0.0;

4760 
Z_G
=0.0;

4761 
X_B
=0.0;

4762 
Y_B
=0.0;

4763 
Z_B
=0.0;

4764 
x_w
=0.0;

4765 
y_w
=0.0;

4766 
z_w
=0.0;

4767 
x_r
=0.0;

4768 
y_r
=0.0;

4769 
x_g
=0.0;

4770 
y_g
=0.0;

4771 
x_b
=0.0;

4772 
y_b
=0.0;

4773 
R
=1.0;

4774 
G
=1.0;

4775 
B
=1.0;

4777 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "[", 1);

4778 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_CALGRAY
){

4779 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/CalGray ", 9);

4780 
X_W
 = 
t2p
->
tiff_whôechrom©icôõs
[0];

4781 
Y_W
 = 
t2p
->
tiff_whôechrom©icôõs
[1];

4782 
Z_W
 = 1.0F - (
X_W
 + 
Y_W
);

4783 
X_W
 /
Y_W
;

4784 
Z_W
 /
Y_W
;

4785 
Y_W
 = 1.0F;

4787 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_CALRGB
){

4788 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/CalRGB ", 8);

4789 
x_w
 = 
t2p
->
tiff_whôechrom©icôõs
[0];

4790 
y_w
 = 
t2p
->
tiff_whôechrom©icôõs
[1];

4791 
x_r
 = 
t2p
->
tiff_¥im¨ychrom©icôõs
[0];

4792 
y_r
 = 
t2p
->
tiff_¥im¨ychrom©icôõs
[1];

4793 
x_g
 = 
t2p
->
tiff_¥im¨ychrom©icôõs
[2];

4794 
y_g
 = 
t2p
->
tiff_¥im¨ychrom©icôõs
[3];

4795 
x_b
 = 
t2p
->
tiff_¥im¨ychrom©icôõs
[4];

4796 
y_b
 = 
t2p
->
tiff_¥im¨ychrom©icôõs
[5];

4797 
z_w
 = 
y_w
 * ((
x_g
 - 
x_b
)*
y_r
 - (
x_r
-x_b)*
y_g
 + (x_r-x_g)*
y_b
);

4798 
Y_R
 = (
y_r
/
R
Ë* ((
x_g
-
x_b
)*
y_w
 - (
x_w
-x_b)*
y_g
 + (x_w-x_g)*
y_b
Ë/ 
z_w
;

4799 
X_R
 = 
Y_R
 * 
x_r
 / 
y_r
;

4800 
Z_R
 = 
Y_R
 * (((1-
x_r
)/
y_r
)-1);

4801 
Y_G
 = ((0.0F-(
y_g
))/
G
Ë* ((
x_r
-
x_b
)*
y_w
 - (
x_w
-x_b)*
y_r
 + (x_w-x_r)*
y_b
Ë/ 
z_w
;

4802 
X_G
 = 
Y_G
 * 
x_g
 / 
y_g
;

4803 
Z_G
 = 
Y_G
 * (((1-
x_g
)/
y_g
)-1);

4804 
Y_B
 = (
y_b
/
B
Ë* ((
x_r
-
x_g
)*
y_w
 - (
x_w
-x_g)*
y_r
 + (x_w-x_r)*
y_g
Ë/ 
z_w
;

4805 
X_B
 = 
Y_B
 * 
x_b
 / 
y_b
;

4806 
Z_B
 = 
Y_B
 * (((1-
x_b
)/
y_b
)-1);

4807 
X_W
 = (
X_R
 * 
R
Ë+ (
X_G
 * 
G
Ë+ (
X_B
 * 
B
);

4808 
Y_W
 = (
Y_R
 * 
R
Ë+ (
Y_G
 * 
G
Ë+ (
Y_B
 * 
B
);

4809 
Z_W
 = (
Z_R
 * 
R
Ë+ (
Z_G
 * 
G
Ë+ (
Z_B
 * 
B
);

4810 
X_W
 /
Y_W
;

4811 
Z_W
 /
Y_W
;

4812 
Y_W
 = 1.0;

4814 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "<< \n", 4);

4815 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_CALGRAY
){

4816 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/WhitePoint ", 12);

4817 
buÊí
=
	`•rötf
(
buf„r
, "[%.4‡%.4‡%.4f] \n", 
X_W
, 
Y_W
, 
Z_W
);

4818 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4819 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Gamma 2.2 \n", 12);

4821 if(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_CALRGB
){

4822 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/WhitePoint ", 12);

4823 
buÊí
=
	`•rötf
(
buf„r
, "[%.4‡%.4‡%.4f] \n", 
X_W
, 
Y_W
, 
Z_W
);

4824 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4825 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Matrix ", 8);

4826 
buÊí
=
	`•rötf
(
buf„r
, "[%.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f] \n",

4827 
X_R
, 
Y_R
, 
Z_R
,

4828 
X_G
, 
Y_G
, 
Z_G
,

4829 
X_B
, 
Y_B
, 
Z_B
);

4830 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4831 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Gamma [2.2 2.2 2.2] \n", 22);

4833 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) ">>] \n", 5);

4835 (
wrôãn
);

4836 
	}
}

4842 
tsize_t
 
	$t2p_wrôe_pdf_xobje˘_icccs
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

4844 
tsize_t
 
wrôãn
=0;

4845 
buf„r
[16];

4846 
buÊí
=0;

4848 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "[/ICCBased ", 11);

4849 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
t2p
->
pdf_icccs
);

4850 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4851 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R] \n", 7);

4853 (
wrôãn
);

4854 
	}
}

4856 
tsize_t
 
	$t2p_wrôe_pdf_xobje˘_icccs_di˘
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

4858 
tsize_t
 
wrôãn
=0;

4859 
buf„r
[16];

4860 
buÊí
=0;

4862 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/N ", 3);

4863 
buÊí
=
	`•rötf
(
buf„r
, "%u \n", 
t2p
->
tiff_ßm∂e•îpixñ
);

4864 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4865 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Alternate ", 11);

4866 
t2p
->
pdf_cﬁ‹•a˚
 ^
T2P_CS_ICCBASED
;

4867 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_cs
(
t2p
, 
ouçut
);

4868 
t2p
->
pdf_cﬁ‹•a˚
 |
T2P_CS_ICCBASED
;

4869 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘
(
t2p
->
tiff_ic˝rofûñígth
, 0, 
ouçut
);

4871 (
wrôãn
);

4872 
	}
}

4874 
tsize_t
 
	$t2p_wrôe_pdf_xobje˘_icccs_°ªam
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

4876 
tsize_t
 
wrôãn
=0;

4878 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam
(

4879 (
td©a_t
Ë
t2p
->
tiff_ic˝rofûe
,

4880 (
tsize_t
Ë
t2p
->
tiff_ic˝rofûñígth
,

4881 
ouçut
);

4883 (
wrôãn
);

4884 
	}
}

4890 
tsize_t
 
	$t2p_wrôe_pdf_xobje˘_∑Àâecs_°ªam
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

4892 
tsize_t
 
wrôãn
=0;

4894 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam
(

4895 (
td©a_t
Ë
t2p
->
pdf_∑Àâe
,

4896 (
tsize_t
Ë
t2p
->
pdf_∑Àâesize
,

4897 
ouçut
);

4899 (
wrôãn
);

4900 
	}
}

4906 
tsize_t
 
	$t2p_wrôe_pdf_xobje˘_decode
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

4908 
tsize_t
 
wrôãn
=0;

4909 
i
=0;

4911 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Decode [ ", 10);

4912 
i
=0;i<
t2p
->
tiff_ßm∂e•îpixñ
;i++){

4913 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "1 0 ", 4);

4915 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "]\n", 2);

4917 (
wrôãn
);

4918 
	}
}

4925 
tsize_t
 
	$t2p_wrôe_pdf_xobje˘_°ªam_fûãr
(
âûe_t
 
tûe
, 
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

4927 
tsize_t
 
wrôãn
=0;

4928 
buf„r
[16];

4929 
buÊí
=0;

4931 if(
t2p
->
pdf_com¥essi⁄
==
T2P_COMPRESS_NONE
){

4932 (
wrôãn
);

4934 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Filter ", 8);

4935 
t2p
->
pdf_com¥essi⁄
){

4936 #ifde‡
CCITT_SUPPORT


4937 
T2P_COMPRESS_G4
:

4938 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/CCITTFaxDecode ", 16);

4939 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/DecodeParms ", 13);

4940 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "<< /K -1 ", 9);

4941 if(
tûe
==0){

4942 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Columns ", 9);

4943 
buÊí
=
	`•rötf
(
buf„r
, "%lu",

4944 ()
t2p
->
tiff_width
);

4945 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4946 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " /Rows ", 7);

4947 
buÊí
=
	`•rötf
(
buf„r
, "%lu",

4948 ()
t2p
->
tiff_Àngth
);

4949 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4951 if(
	`t2p_tûe_is_right_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
-1)==0){

4952 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Columns ", 9);

4953 
buÊí
=
	`•rötf
(

4954 
buf„r
,

4956 ()
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûewidth
);

4957 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4959 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/Columns ", 9);

4960 
buÊí
=
	`•rötf
(

4961 
buf„r
,

4963 ()
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûewidth
);

4964 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4966 if(
	`t2p_tûe_is_bŸtom_edge
(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
], 
tûe
-1)==0){

4967 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " /Rows ", 7);

4968 
buÊí
=
	`•rötf
(

4969 
buf„r
,

4971 ()
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûñígth
);

4972 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4974 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " /Rows ", 7);

4975 
buÊí
=
	`•rötf
(

4976 
buf„r
,

4978 ()
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_edgëûñígth
);

4979 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

4982 if(
t2p
->
pdf_swôchdecode
 == 0){

4983 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " /BlackIs1Årue ", 16);

4985 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) ">>\n", 3);

4988 #ifde‡
JPEG_SUPPORT


4989 
T2P_COMPRESS_JPEG
:

4990 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/DCTDecode ", 11);

4992 if(
t2p
->
tiff_phŸomëric
 !
PHOTOMETRIC_YCBCR
) {

4993 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/DecodeParms ", 13);

4994 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "<< /ColorTransform 0 >>\n", 24);

4998 #ifde‡
ZIP_SUPPORT


4999 
T2P_COMPRESS_ZIP
:

5000 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/FlateDecode ", 13);

5001 if(
t2p
->
pdf_com¥essi⁄quÆôy
%100){

5002 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "/DecodeParms ", 13);

5003 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "<< /Predictor ", 14);

5004 
	`_TIFFmem£t
(
buf„r
, 0x00, 16);

5005 
buÊí
=
	`•rötf
(
buf„r
, "%u", 
t2p
->
pdf_com¥essi⁄quÆôy
%100);

5006 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

5007 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " /Columns ", 10);

5008 
	`_TIFFmem£t
(
buf„r
, 0x00, 16);

5009 
buÊí
 = 
	`•rötf
(
buf„r
, "%lu",

5010 ()
t2p
->
tiff_width
);

5011 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

5012 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " /Colors ", 9);

5013 
	`_TIFFmem£t
(
buf„r
, 0x00, 16);

5014 
buÊí
=
	`•rötf
(
buf„r
, "%u", 
t2p
->
tiff_ßm∂e•îpixñ
);

5015 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

5016 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " /BitsPerComponent ", 19);

5017 
	`_TIFFmem£t
(
buf„r
, 0x00, 16);

5018 
buÊí
=
	`•rötf
(
buf„r
, "%u", 
t2p
->
tiff_bô•îßm∂e
);

5019 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

5020 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) ">>\n", 3);

5028 (
wrôãn
);

5029 
	}
}

5035 
tsize_t
 
	$t2p_wrôe_pdf_xª·abÀ
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
){

5037 
tsize_t
 
wrôãn
=0;

5038 
buf„r
[21];

5039 
buÊí
=0;

5040 
uöt32
 
i
=0;

5042 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "xref\n0 ", 7);

5043 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()(
t2p
->
pdf_xªfcou¡
 + 1));

5044 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

5045 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " \n0000000000 65535 f \n", 22);

5046 
i
=0;i<
t2p
->
pdf_xªfcou¡
;i++){

5047 
	`•rötf
(
buf„r
, "%.10lu 00000Ç \n",

5048 ()
t2p
->
pdf_xªfoff£ts
[
i
]);

5049 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 20);

5052 (
wrôãn
);

5053 
	}
}

5059 
tsize_t
 
	$t2p_wrôe_pdf_åaûî
(
T2P
* 
t2p
, 
TIFF
* 
ouçut
)

5062 
tsize_t
 
wrôãn
 = 0;

5063 
buf„r
[32];

5064 
buÊí
 = 0;

5065 
size_t
 
i
 = 0;

5067 
i
 = 0; i < (
t2p
->
pdf_fûeid
) - 8; i += 8)

5068 
	`¢¥ötf
(
t2p
->
pdf_fûeid
 + 
i
, 9, "%.8X", 
	`ønd
());

5070 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "trailer\n<<\n/Size ", 17);

5071 
buÊí
 = 
	`•rötf
(
buf„r
, "%lu", ()(
t2p
->
pdf_xªfcou¡
+1));

5072 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

5073 
	`_TIFFmem£t
(
buf„r
, 0x00, 32);

5074 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n/Root ", 7);

5075 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
t2p
->
pdf_ˇèlog
);

5076 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

5077 
	`_TIFFmem£t
(
buf„r
, 0x00, 32);

5078 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R \n/Info ", 12);

5079 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
t2p
->
pdf_öfo
);

5080 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

5081 
	`_TIFFmem£t
(
buf„r
, 0x00, 32);

5082 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) " 0 R \n/ID[<", 11);

5083 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
t2p
->
pdf_fûeid
,

5084 (
t2p
->
pdf_fûeid
) - 1);

5085 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "><", 2);

5086 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
t2p
->
pdf_fûeid
,

5087 (
t2p
->
pdf_fûeid
) - 1);

5088 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) ">]\n>>\nstartxref\n", 16);

5089 
buÊí
=
	`•rötf
(
buf„r
, "%lu", ()
t2p
->
pdf_°¨txªf
);

5090 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
Ë
buf„r
, 
buÊí
);

5091 
	`_TIFFmem£t
(
buf„r
, 0x00, 32);

5092 
wrôãn
 +
	`t2pWrôeFûe
(
ouçut
, (
td©a_t
) "\n%%EOF\n", 7);

5094 (
wrôãn
);

5095 
	}
}

5137 
tsize_t
 
	$t2p_wrôe_pdf
(
T2P
* 
t2p
, 
TIFF
* 
öput
, TIFF* 
ouçut
){

5139 
tsize_t
 
wrôãn
=0;

5140 
âûe_t
 
i2
=0;

5141 
tsize_t
 
°ªamÀn
=0;

5142 
uöt16
 
i
=0;

5144 
	`t2p_ªad_tiff_öô
(
t2p
, 
öput
);

5145 if(
t2p
->
t2p_îr‹
!=
T2P_ERR_OK
){(0);}

5146 
t2p
->
pdf_xªfoff£ts
(
uöt32
*Ë
	`_TIFFmÆloc
—2p->
pdf_xªfcou¡
 * (uint32) );

5147 if(
t2p
->
pdf_xªfoff£ts
==
NULL
){

5148 
	`TIFFEº‹
(

5149 
TIFF2PDF_MODULE
,

5151 (Ë(
t2p
->
pdf_xªfcou¡
 * (
uöt32
)) );

5152 (
wrôãn
);

5154 
t2p
->
pdf_xªfcou¡
=0;

5155 
t2p
->
pdf_ˇèlog
=1;

5156 
t2p
->
pdf_öfo
=2;

5157 
t2p
->
pdf_∑ges
=3;

5158 
wrôãn
 +
	`t2p_wrôe_pdf_hódî
(
t2p
, 
ouçut
);

5159 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5160 
t2p
->
pdf_ˇèlog
Ò2p->
pdf_xªfcou¡
;

5161 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5162 
wrôãn
 +
	`t2p_wrôe_pdf_ˇèlog
(
t2p
, 
ouçut
);

5163 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5164 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5165 
t2p
->
pdf_öfo
Ò2p->
pdf_xªfcou¡
;

5166 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5167 
wrôãn
 +
	`t2p_wrôe_pdf_öfo
(
t2p
, 
öput
, 
ouçut
);

5168 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5169 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5170 
t2p
->
pdf_∑ges
Ò2p->
pdf_xªfcou¡
;

5171 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5172 
wrôãn
 +
	`t2p_wrôe_pdf_∑ges
(
t2p
, 
ouçut
);

5173 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5174 
t2p
->
pdf_∑ge
=0;t2p->pdf_∑ge<t2p->
tiff_∑gecou¡
;t2p->pdf_page++){

5175 
	`t2p_ªad_tiff_d©a
(
t2p
, 
öput
);

5176 if(
t2p
->
t2p_îr‹
!=
T2P_ERR_OK
){(0);}

5177 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5178 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5179 
wrôãn
 +
	`t2p_wrôe_pdf_∑ge
(
t2p
->
pdf_xªfcou¡
,Å2p, 
ouçut
);

5180 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5181 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5182 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5183 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_°¨t
(
ouçut
);

5184 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘
(0, 
t2p
->
pdf_xªfcou¡
+1, 
ouçut
);

5185 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_íd
(
ouçut
);

5186 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_°¨t
(
ouçut
);

5187 
°ªamÀn
=
wrôãn
;

5188 
wrôãn
 +
	`t2p_wrôe_pdf_∑ge_c⁄ã¡_°ªam
(
t2p
, 
ouçut
);

5189 
°ªamÀn
=
wrôãn
-streamlen;

5190 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_íd
(
ouçut
);

5191 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5192 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5193 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5194 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_Àngth
(
°ªamÀn
, 
ouçut
);

5195 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5196 if(
t2p
->
tiff_å™s„rfun˘i⁄cou¡
 != 0){

5197 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5198 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5199 
wrôãn
 +
	`t2p_wrôe_pdf_å™s„r
(
t2p
, 
ouçut
);

5200 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5201 
i
=0; i < 
t2p
->
tiff_å™s„rfun˘i⁄cou¡
; i++){

5202 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5203 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5204 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_°¨t
(
ouçut
);

5205 
wrôãn
 +
	`t2p_wrôe_pdf_å™s„r_di˘
(
t2p
, 
ouçut
, 
i
);

5206 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_íd
(
ouçut
);

5207 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_°¨t
(
ouçut
);

5208 
°ªamÀn
=
wrôãn
;

5209 
wrôãn
 +
	`t2p_wrôe_pdf_å™s„r_°ªam
(
t2p
, 
ouçut
, 
i
);

5210 
°ªamÀn
=
wrôãn
-streamlen;

5211 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_íd
(
ouçut
);

5212 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5215 if–(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_PALETTE
) != 0){

5216 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5217 
t2p
->
pdf_∑Àâecs
Ò2p->
pdf_xªfcou¡
;

5218 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5219 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_°¨t
(
ouçut
);

5220 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘
(
t2p
->
pdf_∑Àâesize
, 0, 
ouçut
);

5221 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_íd
(
ouçut
);

5222 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_°¨t
(
ouçut
);

5223 
°ªamÀn
=
wrôãn
;

5224 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_∑Àâecs_°ªam
(
t2p
, 
ouçut
);

5225 
°ªamÀn
=
wrôãn
-streamlen;

5226 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_íd
(
ouçut
);

5227 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5229 if–(
t2p
->
pdf_cﬁ‹•a˚
 & 
T2P_CS_ICCBASED
) != 0){

5230 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5231 
t2p
->
pdf_icccs
Ò2p->
pdf_xªfcou¡
;

5232 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5233 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_°¨t
(
ouçut
);

5234 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_icccs_di˘
(
t2p
, 
ouçut
);

5235 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_íd
(
ouçut
);

5236 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_°¨t
(
ouçut
);

5237 
°ªamÀn
=
wrôãn
;

5238 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_icccs_°ªam
(
t2p
, 
ouçut
);

5239 
°ªamÀn
=
wrôãn
-streamlen;

5240 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_íd
(
ouçut
);

5241 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5243 if(
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûecou¡
 !=0){

5244 
i2
=0;i2<
t2p
->
tiff_tûes
[t2p->
pdf_∑ge
].
tûes_tûecou¡
;i2++){

5245 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5246 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5247 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_°¨t
(
ouçut
);

5248 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_°ªam_di˘
(

5249 
i2
+1,

5250 
t2p
,

5251 
ouçut
);

5252 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_íd
(
ouçut
);

5253 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_°¨t
(
ouçut
);

5254 
°ªamÀn
=
wrôãn
;

5255 
	`t2p_ªad_tiff_size_tûe
(
t2p
, 
öput
, 
i2
);

5256 
wrôãn
 +
	`t2p_ªadwrôe_pdf_image_tûe
(
t2p
, 
öput
, 
ouçut
, 
i2
);

5257 
	`t2p_wrôe_adv™˚_dúe˘‹y
(
t2p
, 
ouçut
);

5258 if(
t2p
->
t2p_îr‹
!=
T2P_ERR_OK
){(0);}

5259 
°ªamÀn
=
wrôãn
-streamlen;

5260 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_íd
(
ouçut
);

5261 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5262 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5263 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5264 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_Àngth
(
°ªamÀn
, 
ouçut
);

5265 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5268 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5269 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5270 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_°¨t
(
ouçut
);

5271 
wrôãn
 +
	`t2p_wrôe_pdf_xobje˘_°ªam_di˘
(

5273 
t2p
,

5274 
ouçut
);

5275 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_di˘_íd
(
ouçut
);

5276 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_°¨t
(
ouçut
);

5277 
°ªamÀn
=
wrôãn
;

5278 
	`t2p_ªad_tiff_size
(
t2p
, 
öput
);

5279 
wrôãn
 +
	`t2p_ªadwrôe_pdf_image
(
t2p
, 
öput
, 
ouçut
);

5280 
	`t2p_wrôe_adv™˚_dúe˘‹y
(
t2p
, 
ouçut
);

5281 if(
t2p
->
t2p_îr‹
!=
T2P_ERR_OK
){(0);}

5282 
°ªamÀn
=
wrôãn
-streamlen;

5283 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_íd
(
ouçut
);

5284 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5285 
t2p
->
pdf_xªfoff£ts
[t2p->
pdf_xªfcou¡
++]=
wrôãn
;

5286 
wrôãn
 +
	`t2p_wrôe_pdf_obj_°¨t
(
t2p
->
pdf_xªfcou¡
, 
ouçut
);

5287 
wrôãn
 +
	`t2p_wrôe_pdf_°ªam_Àngth
(
°ªamÀn
, 
ouçut
);

5288 
wrôãn
 +
	`t2p_wrôe_pdf_obj_íd
(
ouçut
);

5291 
t2p
->
pdf_°¨txªf
 = 
wrôãn
;

5292 
wrôãn
 +
	`t2p_wrôe_pdf_xª·abÀ
(
t2p
, 
ouçut
);

5293 
wrôãn
 +
	`t2p_wrôe_pdf_åaûî
(
t2p
, 
ouçut
);

5294 
	`t2p_dißbÀ
(
ouçut
);

5296 (
wrôãn
);

5297 
	}
}

	@tools/tiff2ps.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<m©h.h
>

32 
	~<time.h
>

33 
	~<°rög.h
>

35 #ifde‡
HAVE_UNISTD_H


36 
	~<uni°d.h
>

39 #ifde‡
NEED_LIBPORT


40 
	~"libp‹t.h
"

43 
	~"tiffio.h
"

164 
	#EXP_ASCII85ENCODER


	)

169 #i‚de‡
TRUE


170 
	#TRUE
 1

	)

171 
	#FALSE
 0

	)

174 
	gascii85
 = 
FALSE
;

175 
	göãΩﬁ©e
 = 
TRUE
;

176 
	gÀvñ2
 = 
FALSE
;

177 
	gÀvñ3
 = 
FALSE
;

178 
	g¥ötAŒ
 = 
FALSE
;

179 
	ggíî©eEPSF
 = 
TRUE
;

180 
	gPSdu∂ex
 = 
FALSE
;

181 
	gPStumbÀ
 = 
FALSE
;

182 
	gPSavoiddódz⁄e
 = 
TRUE
;

183 
	gmaxPageHeight
 = 0;

184 
	gmaxPageWidth
 = 0;

185 
	g•lôOvîœp
 = 0;

186 
	grŸ©i⁄
 = 0;

187 
	gauto_rŸ©e
 = 0;

188 *
	gfûíame
 = 
NULL
;

189 *
	gtôÀ
 = 
NULL
;

190 *
	g¸ót‹
 = 
NULL
;

191 
	g∑geOrõ¡©i⁄
[12];

192 
	gu£Imagemask
 = 
FALSE
;

193 
uöt16
 
	gªs_unô
 = 0;

198 
	gascii85buf
[10];

199 
	gascii85cou¡
;

200 
	gascii85bªakÀn
;

202 
TIFF2PS
(
FILE
*, 
TIFF
*, , , , , );

203 
PS∑ge
(
FILE
*, 
TIFF
*, 
uöt32
, uint32);

204 
PSCﬁ‹C⁄tigPªambÀ
(
FILE
*, 
uöt32
, uint32, );

205 
PSCﬁ‹Sï¨©ePªambÀ
(
FILE
*, 
uöt32
, uint32, );

206 
PSD©aCﬁ‹C⁄tig
(
FILE
*, 
TIFF
*, 
uöt32
, uint32, );

207 
PSD©aCﬁ‹Sï¨©e
(
FILE
*, 
TIFF
*, 
uöt32
, uint32, );

208 
PSD©aPÆëã
(
FILE
*, 
TIFF
*, 
uöt32
, uint32);

209 
PSD©aBW
(
FILE
*, 
TIFF
*, 
uöt32
, uint32);

210 
PSRawD©aBW
(
FILE
*, 
TIFF
*, 
uöt32
, uint32);

211 
Ascii85Inô
();

212 
Ascii85Put
(
code
, 
FILE
* 
fd
);

213 
Ascii85Flush
(
FILE
* 
fd
);

214 
PSHód
(
FILE
*, , , , );

215 
PSTaû
(
FILE
*, );

216 
psSèπ
(
FILE
 *, , , *, *, , , ,

218 
psPageSize
(
FILE
 *, , , , , , , );

219 
psRŸ©eImage
(
FILE
 *, , , , , );

220 
psMaskImage
(
FILE
 *, 
TIFF
 *, , , *, , ,

222 
psSˇÀImage
(
FILE
 *, , , , , , , ,

224 
gë_võwp‹t
 (, , , , *, *, );

225 
exp‹tMaskedImage
(
FILE
 *, , , , , , ,

228 #if 
deföed
–
EXP_ASCII85ENCODER
)

229 
tsize_t
 
Ascii85EncodeBlock
–
uöt8
 * 
ascii85_p
, 
f_eod
, c⁄° uöt8 * 
øw_p
,Åsize_à
øw_l
 );

232 
ußge
();

235 
	$maö
(
¨gc
, * 
¨gv
[])

237 
dúnum
 = -1, 
c
, 
≈
 = 0;

238 
˚¡îed
 = 0;

239 
bŸtomm¨gö
 = 0;

240 
À·m¨gö
 = 0;

241 
∑geWidth
 = 0;

242 
∑geHeight
 = 0;

243 
uöt32
 
dúoff
 = 0;

244 *
›èrg
;

245 
›töd
;

246 
FILE
* 
ouçut
 = 
°dout
;

248 
∑geOrõ¡©i⁄
[0] = '\0';

250 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "b:d:h:H:W:L:i:w:l:o:O:P:C:r:t:acemxyzps1238DT")) != -1)

251 
c
) {

253 
bŸtomm¨gö
 = 
	`©of
(
›èrg
);

256 
˚¡îed
 = 1;

259 
¸ót‹
 = 
›èrg
;

262 
dúnum
 = 
	`©oi
(
›èrg
);

265 
PSdu∂ex
 = 
TRUE
;

268 
öãΩﬁ©e
 = 
	`©oi
(
›èrg
Ë? 
TRUE
:
FALSE
;

271 
PStumbÀ
 = 
TRUE
;

274 
PSavoiddódz⁄e
 = 
FALSE
;

275 
gíî©eEPSF
 = 
TRUE
;

278 
∑geHeight
 = 
	`©of
(
›èrg
);

281 
maxPageHeight
 = 
	`©of
(
›èrg
);

284 
maxPageWidth
 = 
	`©of
(
›èrg
);

287 
•lôOvîœp
 = 
	`©of
(
›èrg
);

290 
u£Imagemask
 = 
TRUE
;

293 
›èrg
[0])

304 '9': 
dúoff
 = (
uöt32
Ë
	`°πoul
(
›èrg
, 
NULL
, 0);

306 : 
	`TIFFEº‹
 ("-o", "Offset must beáÇumeric value.");

307 
	`exô
 (1);

311 
ouçut
 = 
	`f›í
(
›èrg
, "w");

312 i‡(
ouçut
 =
NULL
) {

313 
	`Ârötf
(
°dîr
,

315 
¨gv
[0], 
›èrg
);

316 
	`exô
(-2);

320 
›èrg
[0])

323 'L': 
	`°r˝y
 (
∑geOrõ¡©i⁄
, "Landscape");

326 'P': 
	`°r˝y
 (
∑geOrõ¡©i⁄
, "Portrait");

328 : 
	`TIFFEº‹
 ("-P", "Page orientation must be Landscape or Portrait");

329 
	`exô
 (-1);

333 
À·m¨gö
 = 
	`©of
(
›èrg
);

336 
¥ötAŒ
 = 
TRUE
;

339 
gíî©eEPSF
 = 
FALSE
;

342 i‡(
	`°rcmp
 (
›èrg
, "auto") == 0)

344 
rŸ©i⁄
 = 0;

345 
auto_rŸ©e
 = 
TRUE
;

349 
rŸ©i⁄
 = 
	`©oi
(
›èrg
);

350 
auto_rŸ©e
 = 
FALSE
;

352 
rŸ©i⁄
)

360 
	`Ârötf
 (
°dîr
, "Rotationángle must be 90, 180, 270 (degrees ccw) oráuto\n");

361 
	`exô
 (-1);

365 
¥ötAŒ
 = 
FALSE
;

368 
tôÀ
 = 
›èrg
;

371 
∑geWidth
 = 
	`©of
(
›èrg
);

374 
PSavoiddódz⁄e
 = 
FALSE
;

377 
Àvñ2
 = 
FALSE
;

378 
Àvñ3
 = 
FALSE
;

379 
ascii85
 = 
FALSE
;

382 
Àvñ2
 = 
TRUE
;

383 
ascii85
 = 
TRUE
;

386 
Àvñ3
 = 
TRUE
;

387 
ascii85
 = 
TRUE
;

390 
ascii85
 = 
FALSE
;

393 
ªs_unô
 = 
RESUNIT_CENTIMETER
;

396 
ªs_unô
 = 
RESUNIT_INCH
;

399 
	`ußge
(-1);

402 i‡(
u£Imagemask
 =
TRUE
)

404 i‡((
Àvñ2
 =
FALSE
Ë&& (
Àvñ3
 == FALSE))

406 
	`TIFFEº‹
 ("-m "," imagemask operatorÑequres Postscript Level2 or Level3");

407 
	`exô
 (1);

411 i‡(
∑geWidth
 && (
maxPageWidth
 >ÖageWidth))

413 
	`TIFFEº‹
 ("-W", "Max viewport width cannotÉxceedÖage width");

414 
	`exô
 (1);

417 i‡(
∑geHeight
 && (
maxPageHeight
 >ÖageHeight))

419 
	`TIFFEº‹
 ("-H", "Max viewport height cannotÉxceedÖage height");

420 
	`exô
 (1);

424 i‡(
auto_rŸ©e
 =
TRUE
)

426 i‡((
∑geWidth
 =0Ë|| (
∑geHeight
 == 0))

427 
	`TIFFW¨nög
 ("-ráuto", "ÑequiresÖage heightánd width specified with -hánd -w");

429 i‡((
maxPageWidth
 > 0Ë|| (
maxPageHeight
 > 0))

431 
	`TIFFEº‹
 ("-ráuto", " is incompatible with maximumÖage width/height specified by -H or -W");

432 
	`exô
 (1);

435 i‡((
maxPageWidth
 > 0Ë&& (
maxPageHeight
 > 0))

437 
	`TIFFEº‹
 ("-Hánd -W", " Use only one of -H or -WÅo defineá viewport");

438 
	`exô
 (1);

441 i‡((
gíî©eEPSF
 =
TRUE
Ë&& (
¥ötAŒ
 == TRUE))

443 
	`TIFFEº‹
(" -eánd -a", "Warning: Cannot generate Encapsulated Postscript for multiple images");

444 
gíî©eEPSF
 = 
FALSE
;

447 i‡((
gíî©eEPSF
 =
TRUE
Ë&& (
PSdu∂ex
 == TRUE))

449 
	`TIFFEº‹
(" -eánd -D", "Warning: Encapsulated Postscript doesÇot support Duplex option");

450 
PSdu∂ex
 = 
FALSE
;

453 i‡((
gíî©eEPSF
 =
TRUE
Ë&& (
PStumbÀ
 == TRUE))

455 
	`TIFFEº‹
(" -eánd -T", "Warning: Encapsulated Postscript doesÇot support Top Edge Binding option");

456 
PStumbÀ
 = 
FALSE
;

459 i‡((
gíî©eEPSF
 =
TRUE
Ë&& (
PSavoiddódz⁄e
 == TRUE))

460 
PSavoiddódz⁄e
 = 
FALSE
;

462 ; 
¨gc
 - 
›töd
 > 0; optind++) {

463 
TIFF
* 
tif
 = 
	`TIFFO≥n
(
fûíame
 = 
¨gv
[
›töd
], "r");

464 i‡(
tif
 !
NULL
) {

465 i‡(
dúnum
 != -1

466 && !
	`TIFFSëDúe˘‹y
(
tif
, (
tdú_t
)
dúnum
))

468 i‡(
dúoff
 != 0 &&

469 !
	`TIFFSëSubDúe˘‹y
(
tif
, 
dúoff
))

471 
≈
 = 
	`TIFF2PS
(
ouçut
, 
tif
, 
∑geWidth
, 
∑geHeight
,

472 
À·m¨gö
, 
bŸtomm¨gö
, 
˚¡îed
);

473 i‡(
≈
 < 0)

475 
	`TIFFEº‹
("Eº‹", "U«bÀÅÿ¥o˚s†%s", 
fûíame
);

477 
	`TIFFClo£
(
tif
);

480 i‡(
≈
)

481 
	`PSTaû
(
ouçut
, 
≈
);

483 
	`ußge
(-1);

484 i‡(
ouçut
 !
°dout
)

485 
	`f˛o£
(
ouçut
);

487 
	}
}

489 
uöt16
 
	gßm∂e•îpixñ
;

490 
uöt16
 
	gbô•îßm∂e
;

491 
uöt16
 
	g∂™¨c⁄figuøti⁄
;

492 
uöt16
 
	gphŸomëric
;

493 
uöt16
 
	gcom¥essi⁄
;

494 
uöt16
 
	gexåaßm∂es
;

495 
	gÆpha
;

498 
	$checkImage
(
TIFF
* 
tif
)

500 
phŸomëric
) {

501 
PHOTOMETRIC_YCBCR
:

502 i‡((
com¥essi⁄
 =
COMPRESSION_JPEG
 || com¥essi⁄ =
COMPRESSION_OJPEG
)

503 && 
∂™¨c⁄figuøti⁄
 =
PLANARCONFIG_CONTIG
) {

505 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_JPEGCOLORMODE
,

506 
JPEGCOLORMODE_RGB
);

507 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

509 i‡(
Àvñ2
 || 
Àvñ3
)

511 
	`TIFFEº‹
(
fûíame
, "CanÇot handle image with %s",

516 
PHOTOMETRIC_RGB
:

517 i‡(
Æpha
 && 
bô•îßm∂e
 != 8) {

518 
	`TIFFEº‹
(
fûíame
,

520 
bô•îßm∂e
);

524 
PHOTOMETRIC_SEPARATED
:

525 
PHOTOMETRIC_PALETTE
:

526 
PHOTOMETRIC_MINISBLACK
:

527 
PHOTOMETRIC_MINISWHITE
:

529 
PHOTOMETRIC_LOGL
:

530 
PHOTOMETRIC_LOGLUV
:

531 i‡(
com¥essi⁄
 !
COMPRESSION_SGILOG
 &&

532 
com¥essi⁄
 !
COMPRESSION_SGILOG24
) {

533 
	`TIFFEº‹
(
fûíame
,

535 (
phŸomëric
 =
PHOTOMETRIC_LOGL
) ?

541 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_SGILOGDATAFMT
, 
SGILOGDATAFMT_8BIT
);

542 
phŸomëric
 = (phŸomëri¯=
PHOTOMETRIC_LOGL
) ?

543 
PHOTOMETRIC_MINISBLACK
 : 
PHOTOMETRIC_RGB
;

544 
bô•îßm∂e
 = 8;

546 
PHOTOMETRIC_CIELAB
:

549 
	`TIFFEº‹
(
fûíame
,

551 
phŸomëric
);

554 
bô•îßm∂e
) {

560 
	`TIFFEº‹
(
fûíame
, "CanÇot handle %d-bit/sample image",

561 
bô•îßm∂e
);

564 i‡(
∂™¨c⁄figuøti⁄
 =
PLANARCONFIG_SEPARATE
 && 
exåaßm∂es
 > 0)

565 
	`TIFFW¨nög
(
fûíame
, "IgnoringÉxtra samples");

567 
	}
}

569 
	#PS_UNIT_SIZE
 72.0F

	)

570 
	#PSUNITS
(
≈ix
,
ªs
Ë(“pixË* (
PS_UNIT_SIZE
 / (ªs)))

	)

572 
	gRGBcﬁ‹image
[] = "\
/bwproc {\n\
\n\
Üength 3 idiv string 0 3 0\n\
5 -1Ñoll {\n\
 2 1Ñoll 1 sub dup 0Éq {\n\
 3 idiv\n\
3 -1Ñoll\n\
 4 -1Ñoll\n\
 3 1Ñoll\n\
5 -1ÑollÖut\n\
1ádd 3 0\n\
} { 2 1Ñoll } ifelse\n\
} forall\n\
ÖopÖop\n\
} def\n\
/colorimage where {pop} {\n\
/colorimage {popÖop /rgbprocÉxch def {bwproc} image} bind def\n\
} ifelse\n\
";

602 
	$PhŸosh›B™√r
(
FILE
* 
fd
, 
uöt32
 
w
, uöt32 
h
, 
bs
, 
nc
, * 
°¨éöe
)

604 
	`Ârötf
(
fd
, "%%ImageData: %ld %ld %d %d 0 %d 2 \"",

605 (Ë
w
, (Ë
h
, 
bô•îßm∂e
, 
nc
, 
bs
);

606 
	`Ârötf
(
fd
, 
°¨éöe
, 
nc
);

607 
	`Ârötf
(
fd
, "\"\n");

608 
	}
}

618 
	$£tupPageSèã
(
TIFF
* 
tif
, 
uöt32
* 
pw
, uöt32* 
ph
, * 
µrw
, * 
µrh
)

620 
xªs
 = 0.0F, 
yªs
 = 0.0F;

622 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, 
pw
);

623 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, 
ph
);

624 i‡(
ªs_unô
 == 0)

625 i‡(!
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_RESOLUTIONUNIT
, &
ªs_unô
))

626 
ªs_unô
 = 
RESUNIT_INCH
;

630 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_XRESOLUTION
, &
xªs
)

631 || 
	`Ábs
(
xªs
) < 0.0000001)

632 
xªs
 = 
PS_UNIT_SIZE
;

633 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_YRESOLUTION
, &
yªs
)

634 || 
	`Ábs
(
yªs
) < 0.0000001)

635 
yªs
 = 
PS_UNIT_SIZE
;

636 
ªs_unô
) {

637 
RESUNIT_CENTIMETER
:

638 
xªs
 *2.54F, 
yªs
 *= 2.54F;

640 
RESUNIT_INCH
:

642 
RESUNIT_NONE
:

643 
ªs_unô
 = 
RESUNIT_INCH
;

656 i‡((
xªs
 > 1.0Ë&& (xª†!
PS_UNIT_SIZE
))

657 *
µrw
 = 
	`PSUNITS
(*
pw
, 
xªs
);

659 *
µrw
 = 
	`PSUNITS
(*
pw
, 
PS_UNIT_SIZE
);

660 i‡((
yªs
 > 1.0Ë&& (yª†!
PS_UNIT_SIZE
))

661 *
µrh
 = 
	`PSUNITS
(*
ph
, 
yªs
);

663 *
µrh
 = 
	`PSUNITS
(*
ph
, 
PS_UNIT_SIZE
);

664 
	}
}

667 
	$isCCITTCom¥essi⁄
(
TIFF
* 
tif
)

669 
uöt16
 
com¥ess
;

670 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, &
com¥ess
);

671  (
com¥ess
 =
COMPRESSION_CCITTFAX3
 ||

672 
com¥ess
 =
COMPRESSION_CCITTFAX4
 ||

673 
com¥ess
 =
COMPRESSION_CCITTRLE
 ||

674 
com¥ess
 =
COMPRESSION_CCITTRLEW
);

675 
	}
}

677 
tsize_t
 
	gtf_byã•îrow
;

678 
tsize_t
 
	gps_byã•îrow
;

679 
tsize_t
 
	gtf_row•î°rù
;

680 
tsize_t
 
	gtf_numbî°rùs
;

681 *
	ghex
 = "0123456789abcdef";

692 
	$gë_subimage_cou¡
(
∑gewidth
, 
∑geheight
,

693 
imagewidth
, 
imageheight
,

694 *
ximages
, *
yimages
,

695 
rŸ©i⁄
, 
sˇÀ
)

697 
∑ges
 = 1;

698 
•lôheight
 = 0;

699 
•lôwidth
 = 0;

700 
ovîœp
 = 0;

702 
•lôheight
 = 
maxPageHeight
 * 
PS_UNIT_SIZE
;

703 
•lôwidth
 = 
maxPageWidth
 * 
PS_UNIT_SIZE
;

704 
ovîœp
 = 
•lôOvîœp
 * 
PS_UNIT_SIZE
;

705 
∑gewidth
 *
PS_UNIT_SIZE
;

706 
∑geheight
 *
PS_UNIT_SIZE
;

708 i‡((
imagewidth
 < 1.0Ë|| (
imageheight
 < 1.0))

710 
	`TIFFEº‹
("get_subimage_count", "Invalid image width or height");

714 
rŸ©i⁄
)

717 180: i‡(
•lôheight
 > 0)

719 i‡(
imageheight
 > 
•lôheight
)

721 i‡(
∑gewidth
)

722 *
ximages
 = ()
	`˚û
((
sˇÀ
 * 
imagewidth
Ë/ (
∑gewidth
 - 
ovîœp
));

724 *
ximages
 = 1;

725 *
yimages
 = ()
	`˚û
((
sˇÀ
 * 
imageheight
Ë/ (
•lôheight
 - 
ovîœp
));

729 i‡(
∑gewidth
)

730 *
ximages
 = ()
	`˚û
((
sˇÀ
 * 
imagewidth
Ë/ (
∑gewidth
 - 
ovîœp
));

732 *
ximages
 = 1;

733 *
yimages
 = 1;

738 i‡(
•lôwidth
 > 0)

740 i‡(
imagewidth
 >
•lôwidth
)

742 *
ximages
 = ()
	`˚û
((
sˇÀ
 * 
imagewidth
Ë/ (
•lôwidth
 - 
ovîœp
));

743 i‡(
∑geheight
)

744 *
yimages
 = ()
	`˚û
((
sˇÀ
 * 
imageheight
Ë/ (
∑geheight
 - 
ovîœp
));

746 *
yimages
 = 1;

750 *
ximages
 = 1;

751 i‡(
∑geheight
)

752 *
yimages
 = ()
	`˚û
((
sˇÀ
 * 
imageheight
Ë/ (
∑geheight
 - 
ovîœp
));

754 *
yimages
 = 1;

759 *
ximages
 = 1;

760 *
yimages
 = 1;

765 270: i‡(
•lôheight
 > 0)

767 i‡(
imagewidth
 > 
•lôheight
)

769 *
yimages
 = ()
	`˚û
((
sˇÀ
 * 
imagewidth
Ë/ (
•lôheight
 - 
ovîœp
));

770 i‡(
∑gewidth
)

771 *
ximages
 = ()
	`˚û
((
sˇÀ
 * 
imageheight
Ë/ (
∑gewidth
 - 
ovîœp
));

773 *
ximages
 = 1;

777 *
yimages
 = 1;

778 i‡(
∑gewidth
)

779 *
ximages
 = ()
	`˚û
((
sˇÀ
 * 
imageheight
Ë/ (
∑gewidth
 - 
ovîœp
));

781 *
ximages
 = 1;

786 i‡(
•lôwidth
 > 0)

788 i‡(
imageheight
 > 
•lôwidth
)

790 i‡(
∑geheight
)

791 *
yimages
 = ()
	`˚û
((
sˇÀ
 * 
imagewidth
Ë/ (
∑geheight
 - 
ovîœp
));

793 *
yimages
 = 1;

794 *
ximages
 = ()
	`˚û
((
sˇÀ
 * 
imageheight
Ë/ (
•lôwidth
 - 
ovîœp
));

798 i‡(
∑geheight
)

799 *
yimages
 = ()
	`˚û
((
sˇÀ
 * 
imagewidth
Ë/ (
∑geheight
 - 
ovîœp
));

801 *
yimages
 = 1;

802 *
ximages
 = 1;

807 *
ximages
 = 1;

808 *
yimages
 = 1;

812 : *
ximages
 = 1;

813 *
yimages
 = 1;

815 
∑ges
 = (*
ximages
Ë* (*
yimages
);

816  (
∑ges
);

817 
	}
}

822 
	$exp‹tMaskedImage
(
FILE
 *
Â
, 
∑gewidth
, 
∑geheight
,

823 
imagewidth
, 
imageheight
,

824 
row
, 
cﬁumn
,

825 
À·_off£t
, 
bŸt_off£t
,

826 
sˇÀ
, 
˚¡î
, 
rŸ©i⁄
)

828 
xå™
 = 0.0;

829 
yå™
 = 0.0;

831 
xsˇÀ
 = 1.0;

832 
ysˇÀ
 = 1.0;

834 
•lôheight
 = 0;

835 
•lôwidth
 = 0;

836 
ovîœp
 = 0;

837 
subimage_height
 = 0.0;

839 
•lôheight
 = 
maxPageHeight
 * 
PS_UNIT_SIZE
;

840 
•lôwidth
 = 
maxPageWidth
 * 
PS_UNIT_SIZE
;

841 
ovîœp
 = 
•lôOvîœp
 * 
PS_UNIT_SIZE
;

842 
xsˇÀ
 = 
sˇÀ
 * 
imagewidth
;

843 
ysˇÀ
 = 
sˇÀ
 * 
imageheight
;

845 i‡((
xsˇÀ
 < 0.0Ë|| (
ysˇÀ
 < 0.0))

847 
	`TIFFEº‹
("exportMaskedImage", "InvalidÖarameters.");

854 
rŸ©i⁄
)

857 180: i‡(
•lôheight
 > 0)

859 i‡(
•lôheight
 < 
imageheight
)

861 
xå™
 = -1.0 * 
cﬁumn
 * (
∑gewidth
 - 
ovîœp
);

862 
subimage_height
 = 
imageheight
 - ((
•lôheight
 - 
ovîœp
Ë* 
row
);

863 
yå™
 = 
∑geheight
 - 
subimage_height
 * (∑geheighà/ 
•lôheight
);

867 
xå™
 = -1.0 * 
cﬁumn
 * (
∑gewidth
 - 
ovîœp
);

868 
yå™
 = 
•lôheight
 - 
imageheight
;

873 i‡(
•lôwidth
 > 0)

875 i‡(
•lôwidth
 < 
imagewidth
)

877 
xå™
 = -1.0 * 
cﬁumn
 * 
•lôwidth
;

878 
yå™
 = -1.0 * 
row
 * (
∑geheight
 - 
ovîœp
);

882 
yå™
 = -1.0 * 
row
 * (
∑geheight
 - 
ovîœp
);

883 
xå™
 = 0;

888 
yå™
 = 
∑geheight
 - 
imageheight
;

889 
xå™
 = 0;

892 
bŸt_off£t
 +
yå™
 / (
˚¡î
 ? 2 : 1);

893 
À·_off£t
 +
xå™
 / (
˚¡î
 ? 2 : 1);

896 270: i‡(
•lôheight
 > 0)

898 i‡(
•lôheight
 < 
imagewidth
)

900 
xå™
 = -1.0 * 
cﬁumn
 * (
∑geheight
 - 
ovîœp
);

904 i‡(
row
 == 0)

905 
yå™
 = -1.0 * (
imagewidth
 - 
•lôheight
);

907 
yå™
 = -1.0 * (
imagewidth
 - (
•lôheight
 - 
ovîœp
Ë* (
row
 + 1));

911 
xå™
 = -1.0 * 
cﬁumn
 * (
∑geheight
 - 
ovîœp
);

912 
yå™
 = 
•lôheight
 - 
imagewidth
;

917 i‡(
•lôwidth
 > 0)

919 i‡(
•lôwidth
 < 
imageheight
)

921 
xå™
 = -1.0 * 
cﬁumn
 * 
•lôwidth
;

922 
yå™
 = -1.0 * 
row
 * (
∑gewidth
 - 
ovîœp
);

926 
yå™
 = -1.0 * 
row
 * (
∑gewidth
 - 
ovîœp
);

927 
xå™
 = 0;

932 
yå™
 = 
∑geheight
 - 
imageheight
;

933 
xå™
 = 0;

936 
bŸt_off£t
 +
yå™
 / (
˚¡î
 ? 2 : 1);

937 
À·_off£t
 +
xå™
 / (
˚¡î
 ? 2 : 1);

939 : 
xå™
 = 0;

940 
yå™
 = 0;

943 
rŸ©i⁄
)

945 0: 
	`Ârötf
(
Â
, "%‡%‡å™¶©e\n", 
À·_off£t
, 
bŸt_off£t
);

946 
	`Ârötf
(
Â
, "%‡%‡sˇÀ\n", 
xsˇÀ
, 
ysˇÀ
);

948 180: 
	`Ârötf
(
Â
, "%‡%‡å™¶©e\n", 
À·_off£t
, 
bŸt_off£t
);

949 
	`Ârötf
(
Â
, "%‡%‡sˇÀ\n1 1Åøn¶©ê180ÑŸ©e\n", 
xsˇÀ
, 
ysˇÀ
);

951 90: 
	`Ârötf
(
Â
, "%‡%‡å™¶©e\n", 
À·_off£t
, 
bŸt_off£t
);

952 
	`Ârötf
(
Â
, "%‡%‡sˇÀ\n1 0Åøn¶©ê90ÑŸ©e\n", 
ysˇÀ
, 
xsˇÀ
);

954 270: 
	`Ârötf
(
Â
, "%‡%‡å™¶©e\n", 
À·_off£t
, 
bŸt_off£t
);

955 
	`Ârötf
(
Â
, "%‡%‡sˇÀ\n0 1Åøn¶©ê270ÑŸ©e\n", 
ysˇÀ
, 
xsˇÀ
);

957 : 
	`TIFFEº‹
 ("exp‹tMaskedImage", "Unsuµ‹ãdÑŸ©i⁄ángÀ %d. NÿrŸ©i⁄", 
rŸ©i⁄
);

958 
	`Ârötf
–
Â
, "%‡%‡sˇÀ\n", 
xsˇÀ
, 
ysˇÀ
);

963 
	}
}

966 
	$psRŸ©eImage
 (
FILE
 * 
fd
, 
rŸ©i⁄
, 
pswidth
, 
psheight
,

967 
À·_off£t
, 
bŸtom_off£t
)

969 i‡((
À·_off£t
 !0.0Ë|| (
bŸtom_off£t
 != 0))

970 
	`Ârötf
 (
fd
, "%‡%‡å™¶©e\n", 
À·_off£t
, 
bŸtom_off£t
);

973 
rŸ©i⁄
)

975 0: 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n", 
pswidth
, 
psheight
);

977 90: 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n1 0Åøn¶©ê90ÑŸ©e\n", 
psheight
, 
pswidth
);

979 180: 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n1 1Åøn¶©ê180ÑŸ©e\n", 
pswidth
, 
psheight
);

981 270: 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n0 1Åøn¶©ê270ÑŸ©e\n", 
psheight
, 
pswidth
);

983 : 
	`TIFFEº‹
 ("psRŸ©eImage", "Unsuµ‹ãdÑŸ©i⁄ %d.", 
rŸ©i⁄
);

984 
	`Ârötf
–
fd
, "%‡%‡sˇÀ\n", 
pswidth
, 
psheight
);

988 
	}
}

991 
	$psSˇÀImage
(
FILE
 * 
fd
, 
sˇÀ
, 
rŸ©i⁄
, 
˚¡î
,

992 
ªqwidth
, 
ªqheight
, 
pswidth
, 
psheight
,

993 
À·_off£t
, 
bŸtom_off£t
)

995 
h˚¡î
 = 0.0, 
v˚¡î
 = 0.0;

998 i‡(
˚¡î
)

1000 
rŸ©i⁄
)

1002 90: 
v˚¡î
 = (
ªqheight
 - 
pswidth
 * 
sˇÀ
) / 2;

1003 
h˚¡î
 = (
ªqwidth
 - 
psheight
 * 
sˇÀ
) / 2;

1004 
	`Ârötf
 (
fd
, "%‡%‡å™¶©e\n", 
h˚¡î
, 
v˚¡î
);

1005 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n1 0Åøn¶©ê90ÑŸ©e\n", 
psheight
 * 
sˇÀ
, 
pswidth
 * scale);

1007 180: 
h˚¡î
 = (
ªqwidth
 - 
pswidth
 * 
sˇÀ
) / 2;

1008 
v˚¡î
 = (
ªqheight
 - 
psheight
 * 
sˇÀ
) / 2;

1009 
	`Ârötf
 (
fd
, "%‡%‡å™¶©e\n", 
h˚¡î
, 
v˚¡î
);

1010 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n1 1Åøn¶©ê180ÑŸ©e\n", 
pswidth
 * 
sˇÀ
, 
psheight
 * scale);

1012 270: 
v˚¡î
 = (
ªqheight
 - 
pswidth
 * 
sˇÀ
) / 2;

1013 
h˚¡î
 = (
ªqwidth
 - 
psheight
 * 
sˇÀ
) / 2;

1014 
	`Ârötf
 (
fd
, "%‡%‡å™¶©e\n", 
h˚¡î
, 
v˚¡î
);

1015 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n0 1Åøn¶©ê270ÑŸ©e\n", 
psheight
 * 
sˇÀ
, 
pswidth
 * scale);

1018 : 
h˚¡î
 = (
ªqwidth
 - 
pswidth
 * 
sˇÀ
) / 2;

1019 
v˚¡î
 = (
ªqheight
 - 
psheight
 * 
sˇÀ
) / 2;

1020 
	`Ârötf
 (
fd
, "%‡%‡å™¶©e\n", 
h˚¡î
, 
v˚¡î
);

1021 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n", 
pswidth
 * 
sˇÀ
, 
psheight
 * scale);

1027 
rŸ©i⁄
)

1029 0: 
	`Ârötf
 (
fd
, "%‡%‡å™¶©e\n", 
À·_off£t
 ?Üeft_offset : 0.0,

1030 
bŸtom_off£t
 ? bŸtom_off£à: 
ªqheight
 - (
psheight
 * 
sˇÀ
));

1031 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n", 
pswidth
 * 
sˇÀ
, 
psheight
 * scale);

1033 90: 
	`Ârötf
 (
fd
, "%‡%‡å™¶©e\n", 
À·_off£t
 ?Üeft_offset : 0.0,

1034 
bŸtom_off£t
 ? bŸtom_off£à: 
ªqheight
 - (
pswidth
 * 
sˇÀ
));

1035 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n1 0Åøn¶©ê90ÑŸ©e\n", 
psheight
 * 
sˇÀ
, 
pswidth
 * scale);

1037 180: 
	`Ârötf
 (
fd
, "%‡%‡å™¶©e\n", 
À·_off£t
 ?Üeft_offset : 0.0,

1038 
bŸtom_off£t
 ? bŸtom_off£à: 
ªqheight
 - (
psheight
 * 
sˇÀ
));

1039 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n1 1Åøn¶©ê180ÑŸ©e\n", 
pswidth
 * 
sˇÀ
, 
psheight
 * scale);

1041 270: 
	`Ârötf
 (
fd
, "%‡%‡å™¶©e\n", 
À·_off£t
 ?Üeft_offset : 0.0,

1042 
bŸtom_off£t
 ? bŸtom_off£à: 
ªqheight
 - (
pswidth
 * 
sˇÀ
));

1043 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n0 1Åøn¶©ê270ÑŸ©e\n", 
psheight
 * 
sˇÀ
, 
pswidth
 * scale);

1045 : 
	`TIFFEº‹
 ("psSˇÀImage", "Unsuµ‹ãdÑŸ©i⁄ %d", 
rŸ©i⁄
);

1046 
	`Ârötf
 (
fd
, "%‡%‡sˇÀ\n", 
pswidth
 * 
sˇÀ
, 
psheight
 * scale);

1052 
	}
}

1057 
	$psPageSize
 (
FILE
 * 
fd
, 
rŸ©i⁄
, 
pgwidth
, 
pgheight
,

1058 
ªqwidth
, 
ªqheight
, 
pswidth
, 
psheight
)

1060 
xsˇÀ
 = 1.0, 
ysˇÀ
 = 1.0, 
sˇÀ
 = 1.0;

1061 
•lôheight
;

1062 
•lôwidth
;

1063 
√w_width
;

1064 
√w_height
;

1066 
•lôheight
 = 
maxPageHeight
 * 
PS_UNIT_SIZE
;

1067 
•lôwidth
 = 
maxPageWidth
 * 
PS_UNIT_SIZE
;

1069 
rŸ©i⁄
)

1072 180: i‡((
•lôheight
 > 0Ë|| (
•lôwidth
 > 0))

1074 i‡(
pgwidth
 !0 || 
pgheight
 != 0)

1076 
xsˇÀ
 = 
ªqwidth
 / (
•lôwidth
 ? s∂ôwidth : 
pswidth
);

1077 
ysˇÀ
 = 
ªqheight
 / (
•lôheight
 ? s∂ôheighà: 
psheight
);

1078 
sˇÀ
 = (
xsˇÀ
 < 
ysˇÀ
) ? xscale : yscale;

1080 
√w_width
 = 
•lôwidth
 ? s∂ôwidth : 
sˇÀ
 * 
pswidth
;

1081 
√w_height
 = 
•lôheight
 ? s∂ôheighà: 
sˇÀ
 * 
psheight
;

1082 i‡(
	`°æí
(
∑geOrõ¡©i⁄
))

1083 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", 
∑geOrõ¡©i⁄
);

1085 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", (
√w_width
 > 
√w_height
) ? "Landscape" : "Portrait");

1086 
	`Ârötf
 (
fd
, "%%%%PageBoundögBox: 0 0 %ld %ld\n", ()
√w_width
, ()
√w_height
);

1087 
	`Ârötf
 (
fd
, "1 dict begin /PageSize [ %f %f ] def currentdictÉnd setpagedevice\n",

1088 
√w_width
, 
√w_height
);

1092 i‡((
pgwidth
 =0Ë&& (
pgheight
 == 0))

1094 i‡(
	`°æí
(
∑geOrõ¡©i⁄
))

1095 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", 
∑geOrõ¡©i⁄
);

1097 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", (
pswidth
 > 
psheight
) ? "Landscape" : "Portrait");

1098 
	`Ârötf
 (
fd
, "%%%%PageBoundögBox: 0 0 %ld %ld\n", ()
pswidth
, ()
psheight
);

1099 
	`Ârötf
(
fd
, "1 dict begin /PageSize [ %f %f ] def currentdictÉnd setpagedevice\n",

1100 
pswidth
, 
psheight
);

1104 i‡(
	`°æí
(
∑geOrõ¡©i⁄
))

1105 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", 
∑geOrõ¡©i⁄
);

1107 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", (
ªqwidth
 > 
ªqheight
) ? "Landscape" : "Portrait");

1108 
	`Ârötf
 (
fd
, "%%%%PageBoundögBox: 0 0 %ld %ld\n", ()
ªqwidth
, ()
ªqheight
);

1109 
	`Ârötf
(
fd
, "1 dict begin /PageSize [ %f %f ] def currentdictÉnd setpagedevice\n",

1110 
ªqwidth
, 
ªqheight
);

1115 270: i‡((
•lôheight
 > 0Ë|| (
•lôwidth
 > 0))

1117 i‡(
pgwidth
 !0 || 
pgheight
 != 0)

1119 
xsˇÀ
 = 
ªqwidth
 / (
•lôwidth
 ? s∂ôwidth : 
pswidth
);

1120 
ysˇÀ
 = 
ªqheight
 / (
•lôheight
 ? s∂ôheighà: 
psheight
);

1121 
sˇÀ
 = (
xsˇÀ
 < 
ysˇÀ
) ? xscale : yscale;

1123 
√w_width
 = 
•lôwidth
 ? s∂ôwidth : 
sˇÀ
 * 
psheight
;

1124 
√w_height
 = 
•lôheight
 ? s∂ôheighà: 
sˇÀ
 * 
pswidth
;

1126 i‡(
	`°æí
(
∑geOrõ¡©i⁄
))

1127 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", 
∑geOrõ¡©i⁄
);

1129 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", (
√w_width
 > 
√w_height
) ? "Landscape" : "Portrait");

1130 
	`Ârötf
 (
fd
, "%%%%PageBoundögBox: 0 0 %ld %ld\n", ()
√w_width
, ()
√w_height
);

1131 
	`Ârötf
 (
fd
, "1 dict begin /PageSize [ %f %f ] def currentdictÉnd setpagedevice\n",

1132 
√w_width
, 
√w_height
);

1136 i‡((
pgwidth
 =0Ë&& (
pgheight
 == 0))

1138 i‡(
	`°æí
(
∑geOrõ¡©i⁄
))

1139 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", 
∑geOrõ¡©i⁄
);

1141 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", (
psheight
 > 
pswidth
) ? "Landscape" : "Portrait");

1142 
	`Ârötf
 (
fd
, "%%%%PageBoundögBox: 0 0 %ld %ld\n", ()
psheight
, ()
pswidth
);

1143 
	`Ârötf
(
fd
, "1 dict begin /PageSize [ %f %f ] def currentdictÉnd setpagedevice\n",

1144 
psheight
, 
pswidth
);

1148 i‡(
	`°æí
(
∑geOrõ¡©i⁄
))

1149 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", 
∑geOrõ¡©i⁄
);

1151 
	`Ârötf
 (
fd
, "%%%%PageOrõ¡©i⁄: %s\n", (
ªqwidth
 > 
ªqheight
) ? "Landscape" : "Portrait");

1152 
	`Ârötf
 (
fd
, "%%%%PageBoundögBox: 0 0 %ld %ld\n", ()
ªqwidth
, ()
ªqheight
);

1153 
	`Ârötf
(
fd
, "1 dict begin /PageSize [ %f %f ] def currentdictÉnd setpagedevice\n",

1154 
ªqwidth
, 
ªqheight
);

1158 : 
	`TIFFEº‹
 ("psPageSize", "InvÆidÑŸ©i⁄ %d", 
rŸ©i⁄
);

1161 
	`Âuts
("<<\¿ /Pﬁicõ†<<\¿ /PageSizê3\¿ >>\n>> së∑gedevi˚\n", 
fd
);

1164 
	}
}

1169 
	$psMaskImage
(
FILE
 *
fd
, 
TIFF
 *
tif
, 
rŸ©i⁄
, 
˚¡î
,

1170 *
≈ages
, 
pixwidth
, 
pixheight
,

1171 
À·_m¨gö
, 
bŸtom_m¨gö
,

1172 
pgwidth
, 
pgheight
,

1173 
pswidth
, 
psheight
, 
sˇÀ
)

1175 
i
, 
j
;

1176 
ximages
 = 1, 
yimages
 = 1;

1177 
∑ges
 = *
≈ages
;

1178 
võw_width
 = 0;

1179 
võw_height
 = 0;

1181 i‡(
	`gë_võwp‹t
 (
pgwidth
, 
pgheight
, 
pswidth
, 
psheight
, &
võw_width
, &
võw_height
, 
rŸ©i⁄
))

1183 
	`TIFFEº‹
 ("get_viewport", "UnableÅo set image viewport");

1187 i‡(
	`gë_subimage_cou¡
(
pgwidth
, 
pgheight
, 
pswidth
, 
psheight
,

1188 &
ximages
, &
yimages
, 
rŸ©i⁄
, 
sˇÀ
) < 1)

1190 
	`TIFFEº‹
("gë_subimage_cou¡", "InvÆid imagêcou¡: %d cﬁumns, %dÑows", 
ximages
, 
yimages
);

1194 
i
 = 0; i < 
yimages
; i++)

1196 
j
 = 0; j < 
ximages
; j++)

1198 
∑ges
++;

1199 *
≈ages
 = 
∑ges
;

1200 
	`Ârötf
(
fd
, "%%%%Page: %d %d\n", 
∑ges
,Öages);

1203 i‡(!
gíî©eEPSF
 && ( 
Àvñ2
 || 
Àvñ3
 ))

1205 i‡(
	`psPageSize
(
fd
, 
rŸ©i⁄
, 
pgwidth
, 
pgheight
,

1206 
võw_width
, 
võw_height
, 
pswidth
, 
psheight
))

1209 
	`Ârötf
(
fd
, "gsave\n");

1210 
	`Ârötf
(
fd
, "100 dict begin\n");

1211 i‡(
	`exp‹tMaskedImage
(
fd
, 
võw_width
, 
võw_height
, 
pswidth
, 
psheight
,

1212 
i
, 
j
, 
À·_m¨gö
, 
bŸtom_m¨gö
,

1213 
sˇÀ
, 
˚¡î
, 
rŸ©i⁄
))

1215 
	`TIFFEº‹
("exportMaskedImage", "Invalid imageÖarameters.");

1218 
	`PS∑ge
(
fd
, 
tif
, 
pixwidth
, 
pixheight
);

1219 
	`Ârötf
(
fd
, "end\n");

1220 
	`Ârötf
(
fd
, "grestore\n");

1221 
	`Ârötf
(
fd
, "showpage\n");

1225  (
∑ges
);

1226 
	}
}

1229 
	$psSèπ
(
FILE
 *
fd
, 
≈ages
, 
auto_rŸ©e
, *
rŸ©i⁄
, *
sˇÀ
,

1230 
ox
, 
oy
, 
pgwidth
, 
pgheight
,

1231 
ªqwidth
, 
ªqheight
, 
pswidth
, 
psheight
,

1232 
À·_off£t
, 
bŸtom_off£t
)

1234 
maxsour˚
 = 0.0;

1235 
maxèrgë
 = 0.0;

1236 
xsˇÀ
 = 1.0, 
ysˇÀ
 = 1.0;

1237 
•lôheight
;

1238 
•lôwidth
;

1239 
võw_width
 = 0.0, 
võw_height
 = 0.0;

1240 
∑ge_width
 = 0.0, 
∑ge_height
 = 0.0;

1243 
•lôheight
 = 
maxPageHeight
 * 
PS_UNIT_SIZE
;

1244 
•lôwidth
 = 
maxPageWidth
 * 
PS_UNIT_SIZE
;

1246 
∑ge_width
 = 
pgwidth
 * 
PS_UNIT_SIZE
;

1247 
∑ge_height
 = 
pgheight
 * 
PS_UNIT_SIZE
;

1254 i‡(
auto_rŸ©e
)

1256 i‡((
•lôheight
 !0Ë|| (
•lôwidth
 != 0))

1258 
	`TIFFEº‹
 ("psStart", "Auto-rotate is incompatible withÖage splitting ");

1263 
maxsour˚
 = (
pswidth
 >
psheight
) ?Öswidth :Ösheight;

1264 
maxèrgë
 = (
ªqwidth
 >
ªqheight
) ?Ñeqwidth :Ñeqheight;

1266 i‡(((
maxsour˚
 =
pswidth
Ë&& (
maxèrgë
 !
ªqwidth
)) ||

1267 ((
maxsour˚
 =
psheight
Ë&& (
maxèrgë
 !
ªqheight
)))

1269 *
rŸ©i⁄
 = 90;

1270 
xsˇÀ
 = (
ªqwidth
 - 
À·_off£t
)/
psheight
;

1271 
ysˇÀ
 = (
ªqheight
 - 
bŸtom_off£t
)/
pswidth
;

1275 
xsˇÀ
 = (
ªqwidth
 - 
À·_off£t
)/
pswidth
;

1276 
ysˇÀ
 = (
ªqheight
 - 
bŸtom_off£t
)/
psheight
;

1278 *
sˇÀ
 = (
xsˇÀ
 < 
ysˇÀ
) ? xscale : yscale;

1281 i‡(*
sˇÀ
 > 1.0)

1282 *
sˇÀ
 = 1.0;

1287 i‡(!
≈ages
)

1288 
	`PSHód
(
fd
, 
ªqwidth
, 
ªqheight
, 
ox
, 
oy
);

1297 *
rŸ©i⁄
)

1300 180: i‡((
•lôheight
 !0Ë|| (
•lôwidth
 != 0))

1302 i‡((
∑ge_width
 !0Ë|| (
∑ge_height
 != 0))

1304 
xsˇÀ
 = (
ªqwidth
 - 
À·_off£t
Ë/ (
∑ge_width
 ?Öage_width : 
pswidth
);

1305 
ysˇÀ
 = (
ªqheight
 - 
bŸtom_off£t
Ë/ (
∑ge_height
 ?Öage_heighà: 
psheight
);

1306 *
sˇÀ
 = (
xsˇÀ
 < 
ysˇÀ
) ? xscale : yscale;

1313 *
sˇÀ
 = 1.0;

1315 
võw_width
 = 
•lôwidth
 ? s∂ôwidth : *
sˇÀ
 * 
pswidth
;

1316 
võw_height
 = 
•lôheight
 ? s∂ôheight: *
sˇÀ
 * 
psheight
;

1320 i‡((
∑ge_width
 !0Ë|| (
∑ge_height
 != 0))

1322 
xsˇÀ
 = (
ªqwidth
 - 
À·_off£t
Ë/ 
pswidth
;

1323 
ysˇÀ
 = (
ªqheight
 - 
bŸtom_off£t
Ë/ 
psheight
;

1325 
võw_width
 = 
ªqwidth
;

1326 
võw_height
 = 
ªqheight
;

1330 
xsˇÀ
 = (
pswidth
 - 
À·_off£t
)/pswidth;

1331 
ysˇÀ
 = (
psheight
 - 
bŸtom_off£t
)/psheight;

1333 
võw_width
 = 
pswidth
;

1334 
võw_height
 = 
psheight
;

1339 270: i‡((
•lôheight
 !0Ë|| (
•lôwidth
 != 0))

1341 i‡((
∑ge_width
 !0Ë|| (
∑ge_height
 != 0))

1343 
xsˇÀ
 = (
ªqwidth
 - 
À·_off£t
)/ 
psheight
;

1344 
ysˇÀ
 = (
ªqheight
 - 
bŸtom_off£t
)/ 
pswidth
;

1345 *
sˇÀ
 = (
xsˇÀ
 < 
ysˇÀ
) ? xscale : yscale;

1352 *
sˇÀ
 = 1.0;

1353 
võw_width
 = 
•lôwidth
 ? s∂ôwidth : *
sˇÀ
 * 
psheight
;

1354 
võw_height
 = 
•lôheight
 ? s∂ôheighà: *
sˇÀ
 * 
pswidth
;

1358 i‡((
∑ge_width
 !0Ë|| (
∑ge_height
 != 0))

1360 
xsˇÀ
 = (
ªqwidth
 - 
À·_off£t
Ë/ 
psheight
;

1361 
ysˇÀ
 = (
ªqheight
 - 
bŸtom_off£t
Ë/ 
pswidth
;

1363 
võw_width
 = 
ªqwidth
;

1364 
võw_height
 = 
ªqheight
;

1368 
xsˇÀ
 = (
pswidth
 - 
À·_off£t
)/ 
psheight
;

1369 
ysˇÀ
 = (
psheight
 - 
bŸtom_off£t
)/ 
pswidth
;

1371 
võw_width
 = 
psheight
;

1372 
võw_height
 = 
pswidth
;

1376 : 
	`TIFFEº‹
 ("psPageSize", "InvÆidÑŸ©i⁄ %d", *
rŸ©i⁄
);

1380 i‡(!
≈ages
)

1381 
	`PSHód
(
fd
, (
∑ge_width
 ?Öage_width : 
võw_width
), (
∑ge_height
 ?Öage_heighà: 
võw_height
), 
ox
, 
oy
);

1383 *
sˇÀ
 = (
xsˇÀ
 < 
ysˇÀ
) ? xscale : yscale;

1384 i‡(*
sˇÀ
 > 1.0)

1385 *
sˇÀ
 = 1.0;

1388 
	}
}

1390 
	$gë_võwp‹t
 (
pgwidth
, 
pgheight
, 
pswidth
, 
psheight
,

1391 *
võw_width
, *
võw_height
, 
rŸ©i⁄
)

1394 i‡(
maxPageHeight
 != 0)

1396 *
võw_height
 = 
maxPageHeight
 * 
PS_UNIT_SIZE
;

1404 i‡(
pgheight
 != 0)

1406 *
võw_height
 = 
pgheight
 * 
PS_UNIT_SIZE
;

1412 
rŸ©i⁄
)

1416 180: *
võw_height
 = 
psheight
;

1419 270: *
võw_height
 = 
pswidth
;

1424 i‡(
maxPageWidth
 != 0)

1426 *
võw_width
 = 
maxPageWidth
 * 
PS_UNIT_SIZE
;

1433 i‡(
pgwidth
 != 0)

1435 *
võw_width
 = 
pgwidth
 * 
PS_UNIT_SIZE
;

1441 
rŸ©i⁄
)

1445 180: *
võw_width
 = 
pswidth
;

1448 270: *
võw_width
 = 
psheight
;

1454 
	}
}

1463 
	$TIFF2PS
(
FILE
* 
fd
, 
TIFF
* 
tif
, 
pgwidth
, 
pgheight
, 
lm
, 
bm
, 
˚¡î
)

1465 
uöt32
 
pixwidth
 = 0, 
pixheight
 = 0;

1466 
ox
 = 0.0, 
oy
 = 0.0;

1467 
pswidth
, 
psheight
;

1468 
võw_width
, 
võw_height
;

1469 
sˇÀ
 = 1.0;

1470 
À·_off£t
 = 
lm
 * 
PS_UNIT_SIZE
;

1471 
bŸtom_off£t
 = 
bm
 * 
PS_UNIT_SIZE
;

1472 
uöt32
 
subfûëy≥
;

1473 
uöt16
* 
ßm∂eöfo
;

1474 
≈ages
 = 0;

1476 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_XPOSITION
, &
ox
))

1477 
ox
 = 0;

1478 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_YPOSITION
, &
oy
))

1479 
oy
 = 0;

1483 
tf_numbî°rùs
 = 
	`TIFFNumbîOfSåùs
(
tif
);

1484 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
tf_row•î°rù
);

1485 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_BITSPERSAMPLE
, &
bô•îßm∂e
);

1486 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, &
ßm∂e•îpixñ
);

1487 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_PLANARCONFIG
, &
∂™¨c⁄figuøti⁄
);

1488 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COMPRESSION
, &
com¥essi⁄
);

1489 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_EXTRASAMPLES
, &
exåaßm∂es
, &
ßm∂eöfo
);

1490 
Æpha
 = (
exåaßm∂es
 =1 && 
ßm∂eöfo
[0] =
EXTRASAMPLE_ASSOCALPHA
);

1491 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, &
phŸomëric
))

1493 
ßm∂e•îpixñ
 - 
exåaßm∂es
)

1495 1: i‡(
	`isCCITTCom¥essi⁄
(
tif
))

1496 
phŸomëric
 = 
PHOTOMETRIC_MINISWHITE
;

1498 
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

1500 3: 
phŸomëric
 = 
PHOTOMETRIC_RGB
;

1502 4: 
phŸomëric
 = 
PHOTOMETRIC_SEPARATED
;

1510 
	`£tupPageSèã
(
tif
, &
pixwidth
, &
pixheight
, &
pswidth
, &
psheight
);

1511 
võw_width
 = 
pswidth
;

1512 
võw_height
 = 
psheight
;

1514 i‡(
	`gë_võwp‹t
 (
pgwidth
, 
pgheight
, 
pswidth
, 
psheight
, &
võw_width
, &
võw_height
, 
rŸ©i⁄
))

1516 
	`TIFFEº‹
("get_viewport", "UnableÅo set image viewport");

1521 i‡(
	`psSèπ
(
fd
, 
≈ages
, 
auto_rŸ©e
, &
rŸ©i⁄
, &
sˇÀ
, 
ox
, 
oy
,

1522 
pgwidth
, 
pgheight
, 
võw_width
, 
võw_height
, 
pswidth
, 
psheight
,

1523 
À·_off£t
, 
bŸtom_off£t
))

1526 i‡(
	`checkImage
(
tif
))

1528 
tf_byã•îrow
 = 
	`TIFFSˇ∆öeSize
(
tif
);

1531 i‡((
maxPageHeight
Ë|| (
maxPageWidth
Ë|| (
pgwidth
 !0Ë|| (
pgheight
 != 0))

1533 i‡((
maxPageHeight
Ë|| (
maxPageWidth
))

1535 i‡(
	`psMaskImage
(
fd
, 
tif
, 
rŸ©i⁄
, 
˚¡î
, &
≈ages
, 
pixwidth
, 
pixheight
,

1536 
À·_off£t
, 
bŸtom_off£t
, 
pgwidth
, 
pgheight
,

1537 
pswidth
, 
psheight
, 
sˇÀ
) < 0)

1542 i‡(
pgwidth
 !0 || 
pgheight
 != 0)

1547 
≈ages
++;

1548 
	`Ârötf
(
fd
, "%%%%Page: %d %d\n", 
≈ages
,Çpages);

1550 i‡(!
gíî©eEPSF
 && ( 
Àvñ2
 || 
Àvñ3
 ))

1553 i‡(
	`psPageSize
(
fd
, 
rŸ©i⁄
, 
pgwidth
, 
pgheight
,

1554 
võw_width
, 
võw_height
, 
pswidth
, 
psheight
))

1557 
	`Ârötf
(
fd
, "gsave\n");

1558 
	`Ârötf
(
fd
, "100 dict begin\n");

1559 i‡(
	`psSˇÀImage
(
fd
, 
sˇÀ
, 
rŸ©i⁄
, 
˚¡î
, 
võw_width
, 
võw_height
,

1560 
pswidth
, 
psheight
, 
À·_off£t
, 
bŸtom_off£t
))

1563 
	`PS∑ge
(
fd
, 
tif
, 
pixwidth
, 
pixheight
);

1564 
	`Ârötf
(
fd
, "end\n");

1565 
	`Ârötf
(
fd
, "grestore\n");

1566 
	`Ârötf
(
fd
, "showpage\n");

1572 
≈ages
++;

1573 
	`Ârötf
(
fd
, "%%%%Page: %d %d\n", 
≈ages
,Çpages);

1575 i‡(!
gíî©eEPSF
 && ( 
Àvñ2
 || 
Àvñ3
 ))

1578 i‡(
	`psPageSize
(
fd
, 
rŸ©i⁄
, 
pgwidth
, 
pgheight
,

1579 
võw_width
, 
võw_height
, 
pswidth
, 
psheight
))

1582 
	`Ârötf
(
fd
, "gsave\n");

1583 
	`Ârötf
(
fd
, "100 dict begin\n");

1584 i‡(
	`psRŸ©eImage
(
fd
, 
rŸ©i⁄
, 
pswidth
, 
psheight
, 
À·_off£t
, 
bŸtom_off£t
))

1587 
	`PS∑ge
(
fd
, 
tif
, 
pixwidth
, 
pixheight
);

1588 
	`Ârötf
(
fd
, "end\n");

1589 
	`Ârötf
(
fd
, "grestore\n");

1590 
	`Ârötf
(
fd
, "showpage\n");

1593 i‡(
gíî©eEPSF
)

1595 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_SUBFILETYPE
, &
subfûëy≥
);

1596 } ((
subfûëy≥
 & 
FILETYPE_PAGE
Ë|| 
¥ötAŒ
Ë&& 
	`TIFFRódDúe˘‹y
(
tif
));

1598 (
≈ages
);

1599 
	}
}

1601 
	gDu∂exPªambÀ
[] = "\
%%BeginFeature: *Duplex True\n\
 begin\n\
/languagelevel where {ÖopÜanguagelevel } { 1 } ifelse\n\
2 ge { 1 dict dup /DuplexÅrueÖut setpagedevice }\n\
{ statusdict /setduplex known { statusdict begin setduplexÅrueÉnd } if\n\
} ifelse\n\
\n\
%%EndFeature\n\
";

1612 
	gTumbÀPªambÀ
[] = "\
%%BeginFeature: *Tumble True\n\
 begin\n\
/languagelevel where {ÖopÜanguagelevel } { 1 } ifelse\n\
2 ge { 1 dict dup /TumbleÅrueÖut setpagedevice }\n\
{ statusdict /settumble known { statusdict beginÅrue settumbleÉnd } if\n\
} ifelse\n\
\n\
%%EndFeature\n\
";

1623 
	gAvoidDódZ⁄ePªambÀ
[] = "\
Çewpath clippathÖathbbox grestore\n\
4 2Ñoll 2 copyÅranslate\n\
 3 1Ñoll sub 3 1Ñoll subÉxch\n\
 /PageSize getáloadÖop\n\
 3 1Ñoll div 3 1Ñoll divábsÉxchábs\n\
2 copy gt {Éxch } ifÖop\n\
 1Üt { dup scale } {Öop } ifelse\n\
";

1634 
	$PSHód
(
FILE
 *
fd
, 
∑gewidth
, 
∑geheight
, 
xoff
, 
yoff
)

1636 
time_t
 
t
;

1638 
t
 = 
	`time
(0);

1639 
	`Ârötf
(
fd
, "%%!PS-Adobe-3.0%s\n", 
gíî©eEPSF
 ? " EPSF-3.0" : "");

1640 
	`Ârötf
(
fd
, "%%%%Cª©‹: %s\n", 
¸ót‹
 ? creator : "tiff2ps");

1641 
	`Ârötf
(
fd
, "%%%%TôÀ: %s\n", 
tôÀ
 ?ÅôÀ : 
fûíame
);

1642 
	`Ârötf
(
fd
, "%%%%Cª©i⁄D©e: %s", 
	`˘ime
(&
t
));

1643 
	`Ârötf
(
fd
, "%%%%DocumentData: Clean7Bit\n");

1647 
	`Ârötf
(
fd
, "%%%%Origö: %ld %ld\n", (Ë
xoff
, (Ë
yoff
);

1648 
	`Ârötf
(
fd
, "%%%%BoundingBox: 0 0 %ld %ld\n",

1649 (Ë
	`˚û
(
∑gewidth
), (Ë˚û(
∑geheight
));

1651 
	`Ârötf
(
fd
, "%%%%L™guageLevñ: %d\n", (
Àvñ3
 ? 3 : (
Àvñ2
 ? 2 : 1)));

1652 i‡(
gíî©eEPSF
 =
TRUE
)

1653 
	`Ârötf
(
fd
, "%%%%Pages: 1 1\n");

1655 
	`Ârötf
(
fd
, "%%%%Pages: (atend)\n");

1656 
	`Ârötf
(
fd
, "%%%%EndComments\n");

1657 i‡(
gíî©eEPSF
 =
FALSE
)

1659 
	`Ârötf
(
fd
, "%%%%BeginSetup\n");

1660 i‡(
PSdu∂ex
)

1661 
	`Ârötf
(
fd
, "%s", 
Du∂exPªambÀ
);

1662 i‡(
PStumbÀ
)

1663 
	`Ârötf
(
fd
, "%s", 
TumbÀPªambÀ
);

1664 i‡(
PSavoiddódz⁄e
 && (
Àvñ2
 || 
Àvñ3
))

1665 
	`Ârötf
(
fd
, "%s", 
AvoidDódZ⁄ePªambÀ
);

1666 
	`Ârötf
(
fd
, "%%%%EndSetup\n");

1668 
	}
}

1671 
	$PSTaû
(
FILE
 *
fd
, 
≈ages
)

1673 
	`Ârötf
(
fd
, "%%%%Trailer\n");

1674 i‡(
gíî©eEPSF
 =
FALSE
)

1675 
	`Ârötf
(
fd
, "%%%%Pages: %d\n", 
≈ages
);

1676 
	`Ârötf
(
fd
, "%%%%EOF\n");

1677 
	}
}

1680 
	$checkcm≠
(
TIFF
* 
tif
, 
n
, 
uöt16
* 
r
, uöt16* 
g
, uöt16* 
b
)

1682 (Ë
tif
;

1683 
n
-- > 0)

1684 i‡(*
r
++ >256 || *
g
++ >256 || *
b
++ >= 256)

1686 
	`TIFFW¨nög
(
fûíame
, "Assuming 8-bit colormap");

1688 
	}
}

1691 
	$PS_Lvl2cﬁ‹•a˚
(
FILE
* 
fd
, 
TIFF
* 
tif
)

1693 
uöt16
 *
rm≠
, *
gm≠
, *
bm≠
;

1694 
i
, 
num_cﬁ‹s
;

1695 c⁄° * 
cﬁ‹•a˚_p
;

1697  
phŸomëric
 )

1699 
PHOTOMETRIC_SEPARATED
:

1700 
cﬁ‹•a˚_p
 = "CMYK";

1703 
PHOTOMETRIC_RGB
:

1704 
cﬁ‹•a˚_p
 = "RGB";

1708 
cﬁ‹•a˚_p
 = "Gray";

1715 
	`Âuts
("% Po°S¸ùàLevñ 2 o∆y.\n", 
fd
);

1716 i‡(
phŸomëric
 !
PHOTOMETRIC_PALETTE
) {

1717 i‡(
phŸomëric
 =
PHOTOMETRIC_YCBCR
) {

1720 
	`Ârötf
(
fd
, "/Devi˚%†£tcﬁ‹•a˚\n", 
cﬁ‹•a˚_p
 );

1727 
num_cﬁ‹s
 = (1 << 
bô•îßm∂e
);

1728 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COLORMAP
, &
rm≠
, &
gm≠
, &
bm≠
)) {

1729 
	`TIFFEº‹
(
fûíame
,

1733 i‡(
	`checkcm≠
(
tif
, 
num_cﬁ‹s
, 
rm≠
, 
gm≠
, 
bm≠
) == 16) {

1737 
	#CVT
(
x
Ë(((xË* 255Ë/ ((1L<<16)-1))

	)

1738 
i
 = 0; i < 
num_cﬁ‹s
; i++) {

1739 
rm≠
[
i
] = 
	`CVT
(rmap[i]);

1740 
gm≠
[
i
] = 
	`CVT
(gmap[i]);

1741 
bm≠
[
i
] = 
	`CVT
(bmap[i]);

1743 #unde‡
CVT


1745 
	`Ârötf
(
fd
, "[ /Indexed /Devi˚RGB %d", 
num_cﬁ‹s
 - 1);

1746 i‡(
ascii85
) {

1747 
	`Ascii85Inô
();

1748 
	`Âuts
("\n<~", 
fd
);

1749 
ascii85bªakÀn
 -= 2;

1751 
	`Âuts
(" <", 
fd
);

1752 
i
 = 0; i < 
num_cﬁ‹s
; i++) {

1753 i‡(
ascii85
) {

1754 
	`Ascii85Put
(()
rm≠
[
i
], 
fd
);

1755 
	`Ascii85Put
(()
gm≠
[
i
], 
fd
);

1756 
	`Ascii85Put
(()
bm≠
[
i
], 
fd
);

1758 
	`Âuts
((
i
 % 8Ë? " " : "\¿ ", 
fd
);

1759 
	`Ârötf
(
fd
, "%02x%02x%02x",

1760 
rm≠
[
i
], 
gm≠
[i], 
bm≠
[i]);

1763 i‡(
ascii85
)

1764 
	`Ascii85Flush
(
fd
);

1766 
	`Âuts
(">\n", 
fd
);

1767 
	`Âuts
("] sëcﬁ‹•a˚\n", 
fd
);

1768 
	}
}

1771 
	$PS_Lvl2ImageDi˘
(
FILE
* 
fd
, 
TIFF
* 
tif
, 
uöt32
 
w
, uöt32 
h
)

1773 
u£_øwd©a
;

1774 
uöt32
 
tûe_width
, 
tûe_height
;

1775 
uöt16
 
¥edi˘‹
, 
mößm∂evÆue
, 
maxßm∂evÆue
;

1776 
ª≥©_cou¡
;

1777 
im_h
[64], 
im_x
[64], 
im_y
[64];

1778 * 
imageOp
 = "image";

1780 i‡–
u£Imagemask
 && (
bô•îßm∂e
 == 1) )

1781 
imageOp
 = "imagemask";

1783 ()
	`°r˝y
(
im_x
, "0");

1784 ()
	`•rötf
(
im_y
, "%lu", (Ë
h
);

1785 ()
	`•rötf
(
im_h
, "%lu", (Ë
h
);

1786 
tûe_width
 = 
w
;

1787 
tûe_height
 = 
h
;

1788 i‡(
	`TIFFIsTûed
(
tif
)) {

1789 
ª≥©_cou¡
 = 
	`TIFFNumbîOfTûes
(
tif
);

1790 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILEWIDTH
, &
tûe_width
);

1791 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILELENGTH
, &
tûe_height
);

1792 i‡(
tûe_width
 > 
w
 || 
tûe_height
 > 
h
 ||

1793 (
w
 % 
tûe_width
Ë!0 || (
h
 % 
tûe_height
 != 0)) {

1798 
	`Âuts
("0 0 1 1Ñe˘˛ù\n", 
fd
);

1800 i‡(
tûe_width
 < 
w
) {

1801 
	`Âuts
("/im_x 0 def\n", 
fd
);

1802 ()
	`°r˝y
(
im_x
, "im_xÇeg");

1804 i‡(
tûe_height
 < 
h
) {

1805 
	`Âuts
("/im_y 0 def\n", 
fd
);

1806 ()
	`•rötf
(
im_y
, "%lu im_y sub", (Ë
h
);

1809 
ª≥©_cou¡
 = 
tf_numbî°rùs
;

1810 
tûe_height
 = 
tf_row•î°rù
;

1811 i‡(
tûe_height
 > 
h
)

1812 
tûe_height
 = 
h
;

1813 i‡(
ª≥©_cou¡
 > 1) {

1814 
	`Âuts
("/im_y 0 def\n", 
fd
);

1815 
	`Ârötf
(
fd
, "/im_h %lu def\n",

1816 (Ë
tûe_height
);

1817 ()
	`°r˝y
(
im_h
, "im_h");

1818 ()
	`•rötf
(
im_y
, "%lu im_y sub", (Ë
h
);

1825 
	`Âuts
("{ %Éxec\n", 
fd
);

1827 i‡(
ª≥©_cou¡
 > 1)

1828 
	`Ârötf
(
fd
, "%d { %%Ñïót\n", 
ª≥©_cou¡
);

1833 i‡(
ascii85
)

1834 
	`Âuts
(" /im_stream currentfile /ASCII85Decode filter def\n",

1835 
fd
);

1836 
	`Âuts
(" <<\n", 
fd
);

1837 
	`Âuts
(" /ImageTy≥ 1\n", 
fd
);

1838 
	`Ârötf
(
fd
, " /Width %lu\n", (Ë
tûe_width
);

1849 i‡(
	`TIFFIsTûed
(
tif
Ë|| 
tf_numbî°rùs
 == 1)

1850 
	`Ârötf
(
fd
, " /Heighà%lu\n", (Ë
tûe_height
);

1852 
	`Ârötf
(
fd
, " /Height im_h\n");

1854 i‡(
∂™¨c⁄figuøti⁄
 =
PLANARCONFIG_SEPARATE
 && 
ßm∂e•îpixñ
 > 1)

1855 
	`Âuts
(" /Mu…ùÀD©aSour˚†åue\n", 
fd
);

1856 
	`Ârötf
(
fd
, " /ImageMatrix [ %lu 0 0 %ld %s %s ]\n",

1857 (Ë
w
, - ()
h
, 
im_x
, 
im_y
);

1858 
	`Ârötf
(
fd
, " /BôsPîComp⁄íà%d\n", 
bô•îßm∂e
);

1859 
	`Ârötf
(
fd
, " /I¡îpﬁ©ê%s\n", 
öãΩﬁ©e
 ? "true" : "false");

1861 
ßm∂e•îpixñ
 - 
exåaßm∂es
) {

1863 
phŸomëric
) {

1864 
PHOTOMETRIC_MINISBLACK
:

1865 
	`Âuts
(" /Decodê[0 1]\n", 
fd
);

1867 
PHOTOMETRIC_MINISWHITE
:

1868 
com¥essi⁄
) {

1869 
COMPRESSION_CCITTRLE
:

1870 
COMPRESSION_CCITTRLEW
:

1871 
COMPRESSION_CCITTFAX3
:

1872 
COMPRESSION_CCITTFAX4
:

1877 
	`Âuts
(" /Decodê[0 1]\n", 
fd
);

1883 
	`Âuts
(" /Decodê[1 0]\n", 
fd
);

1887 
PHOTOMETRIC_PALETTE
:

1888 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_MINSAMPLEVALUE
,

1889 &
mößm∂evÆue
);

1890 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_MAXSAMPLEVALUE
,

1891 &
maxßm∂evÆue
);

1892 
	`Ârötf
(
fd
, " /Decode [%u %u]\n",

1893 
mößm∂evÆue
, 
maxßm∂evÆue
);

1899 
	`Âuts
(" /Decodê[0 1]\n", 
fd
);

1904 
phŸomëric
) {

1905 
PHOTOMETRIC_RGB
:

1906 
	`Âuts
(" /Decodê[0 1 0 1 0 1]\n", 
fd
);

1908 
PHOTOMETRIC_MINISWHITE
:

1909 
PHOTOMETRIC_MINISBLACK
:

1914 
	`Âuts
(" /Decodê[0 1 0 1 0 1]\n", 
fd
);

1922 
	`Âuts
(" /Decodê[0 1 0 1 0 1 0 1]\n", 
fd
);

1925 
	`Âuts
(" /D©aSour˚", 
fd
);

1926 i‡(
∂™¨c⁄figuøti⁄
 =
PLANARCONFIG_SEPARATE
 &&

1927 
ßm∂e•îpixñ
 > 1)

1928 
	`Âuts
(" [", 
fd
);

1929 i‡(
ascii85
)

1930 
	`Âuts
(" im_°ªam", 
fd
);

1932 
	`Âuts
(" cuºítfûê/ASCIIHexDecodêfûãr", 
fd
);

1934 
u£_øwd©a
 = 
TRUE
;

1935 
com¥essi⁄
) {

1936 
COMPRESSION_NONE
:

1938 
COMPRESSION_CCITTRLE
:

1939 
COMPRESSION_CCITTRLEW
:

1940 
COMPRESSION_CCITTFAX3
:

1941 
COMPRESSION_CCITTFAX4
:

1942 
	`Âuts
("\n\t<<\n", 
fd
);

1943 i‡(
com¥essi⁄
 =
COMPRESSION_CCITTFAX3
) {

1944 
uöt32
 
g3_›ti⁄s
;

1946 
	`Âuts
("\à/EndOfLöêåue\n", 
fd
);

1947 
	`Âuts
("\à/EndOfBlock fÆ£\n", 
fd
);

1948 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_GROUP3OPTIONS
,

1949 &
g3_›ti⁄s
))

1950 
g3_›ti⁄s
 = 0;

1951 i‡(
g3_›ti⁄s
 & 
GROUP3OPT_2DENCODING
)

1952 
	`Ârötf
(
fd
, "\à/K %s\n", 
im_h
);

1953 i‡(
g3_›ti⁄s
 & 
GROUP3OPT_UNCOMPRESSED
)

1954 
	`Âuts
("\à/Uncom¥es£dÅrue\n", 
fd
);

1955 i‡(
g3_›ti⁄s
 & 
GROUP3OPT_FILLBITS
)

1956 
	`Âuts
("\à/EncodedByãAlig¿åue\n", 
fd
);

1958 i‡(
com¥essi⁄
 =
COMPRESSION_CCITTFAX4
) {

1959 
uöt32
 
g4_›ti⁄s
;

1961 
	`Âuts
("\à/K -1\n", 
fd
);

1962 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_GROUP4OPTIONS
,

1963 &
g4_›ti⁄s
);

1964 i‡(
g4_›ti⁄s
 & 
GROUP4OPT_UNCOMPRESSED
)

1965 
	`Âuts
("\à/Uncom¥es£dÅrue\n", 
fd
);

1967 i‡(!(
tûe_width
 =
w
 && w == 1728U))

1968 
	`Ârötf
(
fd
, "\t /Columns %lu\n",

1969 (Ë
tûe_width
);

1970 
	`Ârötf
(
fd
, "\à/Row†%s\n", 
im_h
);

1971 i‡(
com¥essi⁄
 =
COMPRESSION_CCITTRLE
 ||

1972 
com¥essi⁄
 =
COMPRESSION_CCITTRLEW
) {

1973 
	`Âuts
("\à/EncodedByãAlig¿åue\n", 
fd
);

1974 
	`Âuts
("\à/EndOfBlock fÆ£\n", 
fd
);

1976 i‡(
phŸomëric
 =
PHOTOMETRIC_MINISBLACK
)

1977 
	`Âuts
("\à/BœckIs1Årue\n", 
fd
);

1978 
	`Ârötf
(
fd
, "\t>> /CCITTFaxDecode filter");

1980 
COMPRESSION_LZW
:

1981 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_PREDICTOR
, &
¥edi˘‹
);

1982 i‡(
¥edi˘‹
 == 2) {

1983 
	`Âuts
("\n\t<<\n", 
fd
);

1984 
	`Ârötf
(
fd
, "\à/Pªdi˘‹ %u\n", 
¥edi˘‹
);

1985 
	`Ârötf
(
fd
, "\t /Columns %lu\n",

1986 (Ë
tûe_width
);

1987 
	`Ârötf
(
fd
, "\à/Cﬁ‹†%u\n", 
ßm∂e•îpixñ
);

1988 
	`Ârötf
(
fd
, "\t /BitsPerComponent %u\n",

1989 
bô•îßm∂e
);

1990 
	`Âuts
("\t>>", 
fd
);

1992 
	`Âuts
(" /LZWDecodêfûãr", 
fd
);

1994 
COMPRESSION_DEFLATE
:

1995 
COMPRESSION_ADOBE_DEFLATE
:

1996 i‡–
Àvñ3
 ) {

1997 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_PREDICTOR
, &
¥edi˘‹
);

1998 i‡(
¥edi˘‹
 > 1) {

1999 
	`Ârötf
(
fd
, "\t %% PostScript Level 3 only.");

2000 
	`Âuts
("\n\t<<\n", 
fd
);

2001 
	`Ârötf
(
fd
, "\à/Pªdi˘‹ %u\n", 
¥edi˘‹
);

2002 
	`Ârötf
(
fd
, "\t /Columns %lu\n",

2003 (Ë
tûe_width
);

2004 
	`Ârötf
(
fd
, "\à/Cﬁ‹†%u\n", 
ßm∂e•îpixñ
);

2005 
	`Ârötf
(
fd
, "\t /BitsPerComponent %u\n",

2006 
bô•îßm∂e
);

2007 
	`Âuts
("\t>>", 
fd
);

2009 
	`Âuts
(" /FœãDecodêfûãr", 
fd
);

2011 
u£_øwd©a
 = 
FALSE
 ;

2014 
COMPRESSION_PACKBITS
:

2015 
	`Âuts
(" /RunLígthDecodêfûãr", 
fd
);

2016 
u£_øwd©a
 = 
TRUE
;

2018 
COMPRESSION_OJPEG
:

2019 
COMPRESSION_JPEG
:

2020 #ifde‡
nŸdef


2024 
	`Âuts
(" /DCTDecodêfûãr", 
fd
);

2025 
u£_øwd©a
 = 
TRUE
;

2027 
u£_øwd©a
 = 
FALSE
;

2030 
COMPRESSION_NEXT
:

2031 
COMPRESSION_THUNDERSCAN
:

2032 
COMPRESSION_PIXARFILM
:

2033 
COMPRESSION_JBIG
:

2034 
u£_øwd©a
 = 
FALSE
;

2036 
COMPRESSION_SGILOG
:

2037 
COMPRESSION_SGILOG24
:

2038 
u£_øwd©a
 = 
FALSE
;

2044 
u£_øwd©a
 = 
FALSE
;

2047 i‡(
∂™¨c⁄figuøti⁄
 =
PLANARCONFIG_SEPARATE
 &&

2048 
ßm∂e•îpixñ
 > 1) {

2049 
uöt16
 
i
;

2054 
i
 = 1; i < 
ßm∂e•îpixñ
; i++)

2055 
	`Âuts
(" dup", 
fd
);

2056 
	`Âuts
(" ]", 
fd
);

2059 
	`Ârötf
–
fd
, "\¿>> %s\n", 
imageOp
 );

2060 i‡(
ascii85
)

2061 
	`Âuts
(" im_°ªam sètu†{ im_°ªam flushfûê} if\n", 
fd
);

2062 i‡(
ª≥©_cou¡
 > 1) {

2063 i‡(
tûe_width
 < 
w
) {

2064 
	`Ârötf
(
fd
, " /im_x im_x %luádd def\n",

2065 (Ë
tûe_width
);

2066 i‡(
tûe_height
 < 
h
) {

2067 
	`Ârötf
(
fd
, " im_x %lu ge {\n",

2068 (Ë
w
);

2069 
	`Âuts
(" /im_x 0 def\n", 
fd
);

2070 
	`Ârötf
(
fd
, " /im_y im_y %luádd def\n",

2071 (Ë
tûe_height
);

2072 
	`Âuts
(" } if\n", 
fd
);

2075 i‡(
tûe_height
 < 
h
) {

2076 i‡(
tûe_width
 >
w
) {

2077 
	`Ârötf
(
fd
, " /im_y im_y %luádd def\n",

2078 (Ë
tûe_height
);

2079 i‡(!
	`TIFFIsTûed
(
tif
)) {

2080 
	`Ârötf
(
fd
, " /im_h %lu im_y sub",

2081 (Ë
h
);

2082 
	`Ârötf
(
fd
, " dup %lu gt {Öop",

2083 (Ë
tûe_height
);

2084 
	`Ârötf
(
fd
, " %lu } if def\n",

2085 (Ë
tûe_height
);

2089 
	`Âuts
("}Ñïót\n", 
fd
);

2094 
	`Âuts
("}\n", 
fd
);

2096 (
u£_øwd©a
);

2097 
	}
}

2101 
	$PS_FlùByãs
(* 
buf
, 
tsize_t
 
cou¡
)

2103 
i
;

2104 
ãmp
;

2106 i‡(
cou¡
 <0 || 
bô•îßm∂e
 <= 8) {

2110 
cou¡
--;

2112 
i
 = 0; i < 
cou¡
; i += 2) {

2113 
ãmp
 = 
buf
[
i
];

2114 
buf
[
i
] = buf[i + 1];

2115 
buf
[
i
 + 1] = 
ãmp
;

2117 
	}
}

2119 
	#MAXLINE
 36

	)

2122 
	$PS_Lvl2∑ge
(
FILE
* 
fd
, 
TIFF
* 
tif
, 
uöt32
 
w
, uöt32 
h
)

2124 
uöt16
 
fûl‹dî
;

2125 
u£_øwd©a
, 
tûed_image
, 
bªakÀn
 = 
MAXLINE
;

2126 
uöt32
 
chunk_no
, 
num_chunks
;

2127 
uöt64
 *
bc
;

2128 *
buf_d©a
, *
˝
;

2129 
tsize_t
 
chunk_size
, 
byã_cou¡
;

2131 #i‡
	`deföed
–
EXP_ASCII85ENCODER
 )

2132 
tsize_t
 
ascii85_l
;

2133 
uöt8
 * 
ascii85_p
 = 0;

2136 
	`PS_Lvl2cﬁ‹•a˚
(
fd
, 
tif
);

2137 
u£_øwd©a
 = 
	`PS_Lvl2ImageDi˘
(
fd
, 
tif
, 
w
, 
h
);

2140 #ifde‡
ENABLE_BROKEN_BEGINENDDATA


2141 
	`Âuts
("%%BegöD©a:\n", 
fd
);

2143 
	`Âuts
("exec\n", 
fd
);

2145 
tûed_image
 = 
	`TIFFIsTûed
(
tif
);

2146 i‡(
tûed_image
) {

2147 
num_chunks
 = 
	`TIFFNumbîOfTûes
(
tif
);

2148 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILEBYTECOUNTS
, &
bc
);

2150 
num_chunks
 = 
	`TIFFNumbîOfSåùs
(
tif
);

2151 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_STRIPBYTECOUNTS
, &
bc
);

2154 i‡(
u£_øwd©a
) {

2155 
chunk_size
 = (
tsize_t
Ë
bc
[0];

2156 
chunk_no
 = 1; chunk_nÿ< 
num_chunks
; chunk_no++)

2157 i‡((
tsize_t
Ë
bc
[
chunk_no
] > 
chunk_size
)

2158 
chunk_size
 = (
tsize_t
Ë
bc
[
chunk_no
];

2160 i‡(
tûed_image
)

2161 
chunk_size
 = 
	`TIFFTûeSize
(
tif
);

2163 
chunk_size
 = 
	`TIFFSåùSize
(
tif
);

2165 
buf_d©a
 = (*)
	`_TIFFmÆloc
(
chunk_size
);

2166 i‡(!
buf_d©a
) {

2167 
	`TIFFEº‹
(
fûíame
, "Can'tálloc %lu bytes for %s.",

2168 (Ë
chunk_size
, 
tûed_image
 ? "tiles" : "strips");

2169 (
FALSE
);

2172 #i‡
	`deföed
–
EXP_ASCII85ENCODER
 )

2173 i‡–
ascii85
 ) {

2183 
ascii85_p
 = 
	`_TIFFmÆloc
–(
chunk_size
+(chunk_size/2)) + 8 );

2185 i‡–!
ascii85_p
 ) {

2186 
	`_TIFF‰ì
–
buf_d©a
 );

2188 
	`TIFFEº‹
–
fûíame
, "Cannotállocate ASCII85Éncoding buffer." );

2189  ( 
FALSE
 );

2194 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_FILLORDER
, &
fûl‹dî
);

2195 
chunk_no
 = 0; chunk_nÿ< 
num_chunks
; chunk_no++) {

2196 i‡(
ascii85
)

2197 
	`Ascii85Inô
();

2199 
bªakÀn
 = 
MAXLINE
;

2200 i‡(
u£_øwd©a
) {

2201 i‡(
tûed_image
)

2202 
byã_cou¡
 = 
	`TIFFRódRawTûe
(
tif
, 
chunk_no
,

2203 
buf_d©a
, 
chunk_size
);

2205 
byã_cou¡
 = 
	`TIFFRódRawSåù
(
tif
, 
chunk_no
,

2206 
buf_d©a
, 
chunk_size
);

2207 i‡(
fûl‹dî
 =
FILLORDER_LSB2MSB
)

2208 
	`TIFFRevî£Bôs
(
buf_d©a
, 
byã_cou¡
);

2210 i‡(
tûed_image
)

2211 
byã_cou¡
 = 
	`TIFFRódEncodedTûe
(
tif
,

2212 
chunk_no
, 
buf_d©a
,

2213 
chunk_size
);

2215 
byã_cou¡
 = 
	`TIFFRódEncodedSåù
(
tif
,

2216 
chunk_no
, 
buf_d©a
,

2217 
chunk_size
);

2219 i‡(
byã_cou¡
 < 0) {

2220 
	`TIFFEº‹
(
fûíame
, "Can'tÑead %s %d.",

2221 
tûed_image
 ? "tûe" : "°rù", 
chunk_no
);

2222 i‡(
ascii85
)

2223 
	`Ascii85Put
('\0', 
fd
);

2229 i‡(
bô•îßm∂e
 =16 && !
	`TIFFIsBigEndün
(
tif
)) {

2230 
	`PS_FlùByãs
(
buf_d©a
, 
byã_cou¡
);

2239 i‡(
Æpha
) {

2240 
adju°
, 
i
, 
j
 = 0;

2241 
ncomps
 = 
ßm∂e•îpixñ
 - 
exåaßm∂es
;

2242 
i
 = 0; i < 
byã_cou¡
; i+=
ßm∂e•îpixñ
) {

2243 
adju°
 = 255 - 
buf_d©a
[
i
 + 
ncomps
];

2244 
ncomps
) {

2246 
buf_d©a
[
j
++] = buf_d©a[
i
] + 
adju°
;

2249 
buf_d©a
[
j
++] = buf_d©a[
i
] + 
adju°
;

2250 
buf_d©a
[
j
++] = buf_d©a[
i
+1] + 
adju°
;

2253 
buf_d©a
[
j
++] = buf_d©a[
i
] + 
adju°
;

2254 
buf_d©a
[
j
++] = buf_d©a[
i
+1] + 
adju°
;

2255 
buf_d©a
[
j
++] = buf_d©a[
i
+2] + 
adju°
;

2259 
byã_cou¡
 -
j
;

2262 i‡(
ascii85
) {

2263 #i‡
	`deföed
–
EXP_ASCII85ENCODER
 )

2264 
ascii85_l
 = 
	`Ascii85EncodeBlock
(
ascii85_p
, 1, 
buf_d©a
, 
byã_cou¡
 );

2266 i‡–
ascii85_l
 > 0 )

2267 
	`fwrôe
–
ascii85_p
, 
ascii85_l
, 1, 
fd
 );

2269 
˝
 = 
buf_d©a
; 
byã_cou¡
 > 0; byte_count--)

2270 
	`Ascii85Put
(*
˝
++, 
fd
);

2275 
˝
 = 
buf_d©a
; 
byã_cou¡
 > 0; byte_count--) {

2276 
	`putc
(
hex
[((*
˝
)>>4)&0xf], 
fd
);

2277 
	`putc
(
hex
[(*
˝
)&0xf], 
fd
);

2278 
˝
++;

2280 i‡(--
bªakÀn
 <= 0) {

2281 
	`putc
('\n', 
fd
);

2282 
bªakÀn
 = 
MAXLINE
;

2287 i‡–!
ascii85
 ) {

2288 i‡–
Àvñ2
 || 
Àvñ3
 )

2289 
	`putc
–'>', 
fd
 );

2290 
	`putc
('\n', 
fd
);

2292 #i‡!
	`deföed
–
EXP_ASCII85ENCODER
 )

2294 
	`Ascii85Flush
(
fd
);

2298 #i‡
	`deföed
–
EXP_ASCII85ENCODER
 )

2299 i‡–
ascii85_p
 )

2300 
	`_TIFF‰ì
–
ascii85_p
 );

2303 
	`_TIFF‰ì
(
buf_d©a
);

2304 #ifde‡
ENABLE_BROKEN_BEGINENDDATA


2305 
	`Âuts
("%%EndD©a\n", 
fd
);

2307 (
TRUE
);

2308 
	}
}

2311 
	$PS∑ge
(
FILE
* 
fd
, 
TIFF
* 
tif
, 
uöt32
 
w
, uöt32 
h
)

2313 * 
imageOp
 = "image";

2315 i‡–
u£Imagemask
 && (
bô•îßm∂e
 == 1) )

2316 
imageOp
 = "imagemask";

2318 i‡((
Àvñ2
 || 
Àvñ3
Ë&& 
	`PS_Lvl2∑ge
(
fd
, 
tif
, 
w
, 
h
))

2320 
ps_byã•îrow
 = 
tf_byã•îrow
 - (
exåaßm∂es
 * 
bô•îßm∂e
 / 8)*
w
;

2321 
phŸomëric
) {

2322 
PHOTOMETRIC_RGB
:

2323 i‡(
∂™¨c⁄figuøti⁄
 =
PLANARCONFIG_CONTIG
) {

2324 
	`Ârötf
(
fd
, "%s", 
RGBcﬁ‹image
);

2325 
	`PSCﬁ‹C⁄tigPªambÀ
(
fd
, 
w
, 
h
, 3);

2326 
	`PSD©aCﬁ‹C⁄tig
(
fd
, 
tif
, 
w
, 
h
, 3);

2328 
	`PSCﬁ‹Sï¨©ePªambÀ
(
fd
, 
w
, 
h
, 3);

2329 
	`PSD©aCﬁ‹Sï¨©e
(
fd
, 
tif
, 
w
, 
h
, 3);

2332 
PHOTOMETRIC_SEPARATED
:

2334 i‡(
∂™¨c⁄figuøti⁄
 =
PLANARCONFIG_CONTIG
) {

2335 
	`PSCﬁ‹C⁄tigPªambÀ
(
fd
, 
w
, 
h
, 4);

2336 
	`PSD©aCﬁ‹C⁄tig
(
fd
, 
tif
, 
w
, 
h
, 4);

2338 
	`PSCﬁ‹Sï¨©ePªambÀ
(
fd
, 
w
, 
h
, 4);

2339 
	`PSD©aCﬁ‹Sï¨©e
(
fd
, 
tif
, 
w
, 
h
, 4);

2342 
PHOTOMETRIC_PALETTE
:

2343 
	`Ârötf
(
fd
, "%s", 
RGBcﬁ‹image
);

2344 
	`PhŸosh›B™√r
(
fd
, 
w
, 
h
, 1, 3, "false 3 colorimage");

2345 
	`Ârötf
(
fd
, "/scanLine %ld string def\n",

2346 (Ë
ps_byã•îrow
 * 3L);

2347 
	`Ârötf
(
fd
, "%lu %lu 8\n",

2348 (Ë
w
, (Ë
h
);

2349 
	`Ârötf
(
fd
, "[%lu 0 0 -%lu 0 %lu]\n",

2350 (Ë
w
, (Ë
h
, () h);

2351 
	`Ârötf
(
fd
, "{currentfile scanLineÑeadhexstringÖop} bind\n");

2352 
	`Ârötf
(
fd
, "false 3 colorimage\n");

2353 
	`PSD©aPÆëã
(
fd
, 
tif
, 
w
, 
h
);

2355 
PHOTOMETRIC_MINISBLACK
:

2356 
PHOTOMETRIC_MINISWHITE
:

2357 
	`PhŸosh›B™√r
(
fd
, 
w
, 
h
, 1, 1, 
imageOp
);

2358 
	`Ârötf
(
fd
, "/scanLine %ld string def\n",

2359 (Ë
ps_byã•îrow
);

2360 
	`Ârötf
(
fd
, "%lu %lu %d\n",

2361 (Ë
w
, (Ë
h
, 
bô•îßm∂e
);

2362 
	`Ârötf
(
fd
, "[%lu 0 0 -%lu 0 %lu]\n",

2363 (Ë
w
, (Ë
h
, () h);

2364 
	`Ârötf
(
fd
,

2366 
	`Ârötf
(
fd
, "%s\n", 
imageOp
);

2367 
	`PSD©aBW
(
fd
, 
tif
, 
w
, 
h
);

2370 
	`putc
('\n', 
fd
);

2371 
	}
}

2374 
	$PSCﬁ‹C⁄tigPªambÀ
(
FILE
* 
fd
, 
uöt32
 
w
, uöt32 
h
, 
nc
)

2376 
ps_byã•îrow
 = 
nc
 * (
tf_byã•îrow
 / 
ßm∂e•îpixñ
);

2377 
	`PhŸosh›B™√r
(
fd
, 
w
, 
h
, 1, 
nc
, "false %d colorimage");

2378 
	`Ârötf
(
fd
, "/löê%ld såög def\n", (Ë
ps_byã•îrow
);

2379 
	`Ârötf
(
fd
, "%lu %lu %d\n",

2380 (Ë
w
, (Ë
h
, 
bô•îßm∂e
);

2381 
	`Ârötf
(
fd
, "[%lu 0 0 -%lu 0 %lu]\n",

2382 (Ë
w
, (Ë
h
, () h);

2383 
	`Ârötf
(
fd
, "{currentfileÜineÑeadhexstringÖop} bind\n");

2384 
	`Ârötf
(
fd
, "Ál£ %d cﬁ‹image\n", 
nc
);

2385 
	}
}

2388 
	$PSCﬁ‹Sï¨©ePªambÀ
(
FILE
* 
fd
, 
uöt32
 
w
, uöt32 
h
, 
nc
)

2390 
i
;

2392 
	`PhŸosh›B™√r
(
fd
, 
w
, 
h
, 
ps_byã•îrow
, 
nc
, "true %d colorimage");

2393 
i
 = 0; i < 
nc
; i++)

2394 
	`Ârötf
(
fd
, "/line%d %ld string def\n",

2395 
i
, (Ë
ps_byã•îrow
);

2396 
	`Ârötf
(
fd
, "%lu %lu %d\n",

2397 (Ë
w
, (Ë
h
, 
bô•îßm∂e
);

2398 
	`Ârötf
(
fd
, "[%lu 0 0 -%lu 0 %lu] \n",

2399 (Ë
w
, (Ë
h
, () h);

2400 
i
 = 0; i < 
nc
; i++)

2401 
	`Ârötf
(
fd
, "{cuºítfûêlöe%dÑódhex°rögÖ›}böd\n", 
i
);

2402 
	`Ârötf
(
fd
, "åuê%d cﬁ‹image\n", 
nc
);

2403 
	}
}

2405 
	#DOBREAK
(
Àn
, 
howm™y
, 
fd
) \

2406 i‡(((
Àn
Ë-(
howm™y
)) <= 0) { \

2407 
	`putc
('\n', 
fd
); \

2408 (
Àn
Ë
MAXLINE
-(
howm™y
); \

2409 }

	)

2410 
	#PUTHEX
(
c
,
fd
Ë
	`putc
(
hex
[((c)>>4)&0xf],fd);Öutc(hex[(c)&0xf],fd)

	)

2413 
	$PSD©aCﬁ‹C⁄tig
(
FILE
* 
fd
, 
TIFF
* 
tif
, 
uöt32
 
w
, uöt32 
h
, 
nc
)

2415 
uöt32
 
row
;

2416 
bªakÀn
 = 
MAXLINE
, 
es
 = 
ßm∂e•îpixñ
 - 
nc
;

2417 
tsize_t
 
cc
;

2418 *
tf_buf
;

2419 *
˝
, 
c
;

2421 (Ë
w
;

2422 
tf_buf
 = (*Ë
	`_TIFFmÆloc
(
tf_byã•îrow
);

2423 i‡(
tf_buf
 =
NULL
) {

2424 
	`TIFFEº‹
(
fûíame
, "No space for scanline buffer");

2427 
row
 = 0;Ñow < 
h
;Ñow++) {

2428 i‡(
	`TIFFRódSˇ∆öe
(
tif
, 
tf_buf
, 
row
, 0) < 0)

2430 
˝
 = 
tf_buf
;

2435 i‡(
bô•îßm∂e
 =16 && !
HOST_BIGENDIAN
) {

2436 
	`PS_FlùByãs
(
˝
, 
tf_byã•îrow
);

2438 i‡(
Æpha
) {

2439 
adju°
;

2440 
cc
 = 0;

2441 ; 
cc
 < 
tf_byã•îrow
; c¯+
ßm∂e•îpixñ
) {

2442 
	`DOBREAK
(
bªakÀn
, 
nc
, 
fd
);

2449 
adju°
 = 255 - 
˝
[
nc
];

2450 
nc
) {

2451 4: 
c
 = *
˝
++ + 
adju°
; 
	`PUTHEX
(c,
fd
);

2452 3: 
c
 = *
˝
++ + 
adju°
; 
	`PUTHEX
(c,
fd
);

2453 2: 
c
 = *
˝
++ + 
adju°
; 
	`PUTHEX
(c,
fd
);

2454 1: 
c
 = *
˝
++ + 
adju°
; 
	`PUTHEX
(c,
fd
);

2456 
˝
 +
es
;

2459 
cc
 = 0;

2460 ; 
cc
 < 
tf_byã•îrow
; c¯+
ßm∂e•îpixñ
) {

2461 
	`DOBREAK
(
bªakÀn
, 
nc
, 
fd
);

2462 
nc
) {

2463 4: 
c
 = *
˝
++; 
	`PUTHEX
(c,
fd
);

2464 3: 
c
 = *
˝
++; 
	`PUTHEX
(c,
fd
);

2465 2: 
c
 = *
˝
++; 
	`PUTHEX
(c,
fd
);

2466 1: 
c
 = *
˝
++; 
	`PUTHEX
(c,
fd
);

2468 
˝
 +
es
;

2472 
	`_TIFF‰ì
((*Ë
tf_buf
);

2473 
	}
}

2476 
	$PSD©aCﬁ‹Sï¨©e
(
FILE
* 
fd
, 
TIFF
* 
tif
, 
uöt32
 
w
, uöt32 
h
, 
nc
)

2478 
uöt32
 
row
;

2479 
bªakÀn
 = 
MAXLINE
;

2480 
tsize_t
 
cc
;

2481 
tßm∂e_t
 
s
, 
maxs
;

2482 *
tf_buf
;

2483 *
˝
, 
c
;

2485 (Ë
w
;

2486 
tf_buf
 = (*Ë
	`_TIFFmÆloc
(
tf_byã•îrow
);

2487 i‡(
tf_buf
 =
NULL
) {

2488 
	`TIFFEº‹
(
fûíame
, "No space for scanline buffer");

2491 
maxs
 = (
ßm∂e•îpixñ
 > 
nc
 ?Çc : samplesperpixel);

2492 
row
 = 0;Ñow < 
h
;Ñow++) {

2493 
s
 = 0; s < 
maxs
; s++) {

2494 i‡(
	`TIFFRódSˇ∆öe
(
tif
, 
tf_buf
, 
row
, 
s
) < 0)

2496 
˝
 = 
tf_buf
, 
cc
 = 0; c¯< 
tf_byã•îrow
; cc++) {

2497 
	`DOBREAK
(
bªakÀn
, 1, 
fd
);

2498 
c
 = *
˝
++;

2499 
	`PUTHEX
(
c
,
fd
);

2503 
	`_TIFF‰ì
((*Ë
tf_buf
);

2504 
	}
}

2506 
	#PUTRGBHEX
(
c
,
fd
) \

2507 
	`PUTHEX
(
rm≠
[
c
],
fd
); PUTHEX(
gm≠
[c],fd); PUTHEX(
bm≠
[c],fd)

	)

2510 
	$PSD©aPÆëã
(
FILE
* 
fd
, 
TIFF
* 
tif
, 
uöt32
 
w
, uöt32 
h
)

2512 
uöt16
 *
rm≠
, *
gm≠
, *
bm≠
;

2513 
uöt32
 
row
;

2514 
bªakÀn
 = 
MAXLINE
, 
nc
;

2515 
tsize_t
 
cc
;

2516 *
tf_buf
;

2517 *
˝
, 
c
;

2519 (Ë
w
;

2520 i‡(!
	`TIFFGëFõld
(
tif
, 
TIFFTAG_COLORMAP
, &
rm≠
, &
gm≠
, &
bm≠
)) {

2521 
	`TIFFEº‹
(
fûíame
, "Palette image w/o \"Colormap\"Åag");

2524 
bô•îßm∂e
) {

2528 
	`TIFFEº‹
(
fûíame
, "Dïth %dÇŸ suµ‹ãd", 
bô•îßm∂e
);

2531 
nc
 = 3 * (8 / 
bô•îßm∂e
);

2532 
tf_buf
 = (*Ë
	`_TIFFmÆloc
(
tf_byã•îrow
);

2533 i‡(
tf_buf
 =
NULL
) {

2534 
	`TIFFEº‹
(
fûíame
, "No space for scanline buffer");

2537 i‡(
	`checkcm≠
(
tif
, 1<<
bô•îßm∂e
, 
rm≠
, 
gm≠
, 
bm≠
) == 16) {

2538 
i
;

2539 
	#CVT
(
x
Ë((Ë(((xË* 255Ë/ ((1U<<16)-1)))

	)

2540 
i
 = (1<<
bô•îßm∂e
)-1; i >= 0; i--) {

2541 
rm≠
[
i
] = 
	`CVT
(rmap[i]);

2542 
gm≠
[
i
] = 
	`CVT
(gmap[i]);

2543 
bm≠
[
i
] = 
	`CVT
(bmap[i]);

2545 #unde‡
CVT


2547 
row
 = 0;Ñow < 
h
;Ñow++) {

2548 i‡(
	`TIFFRódSˇ∆öe
(
tif
, 
tf_buf
, 
row
, 0) < 0)

2550 
˝
 = 
tf_buf
, 
cc
 = 0; c¯< 
tf_byã•îrow
; cc++) {

2551 
	`DOBREAK
(
bªakÀn
, 
nc
, 
fd
);

2552 
bô•îßm∂e
) {

2554 
c
 = *
˝
++; 
	`PUTRGBHEX
(c, 
fd
);

2557 
c
 = *
˝
++; 
	`PUTRGBHEX
(c&0xf, 
fd
);

2558 
c
 >>4; 
	`PUTRGBHEX
(c, 
fd
);

2561 
c
 = *
˝
++; 
	`PUTRGBHEX
(c&0x3, 
fd
);

2562 
c
 >>2; 
	`PUTRGBHEX
(c&0x3, 
fd
);

2563 
c
 >>2; 
	`PUTRGBHEX
(c&0x3, 
fd
);

2564 
c
 >>2; 
	`PUTRGBHEX
(c, 
fd
);

2567 
c
 = *
˝
++; 
	`PUTRGBHEX
(c&0x1, 
fd
);

2568 
c
 >>1; 
	`PUTRGBHEX
(c&0x1, 
fd
);

2569 
c
 >>1; 
	`PUTRGBHEX
(c&0x1, 
fd
);

2570 
c
 >>1; 
	`PUTRGBHEX
(c&0x1, 
fd
);

2571 
c
 >>1; 
	`PUTRGBHEX
(c&0x1, 
fd
);

2572 
c
 >>1; 
	`PUTRGBHEX
(c&0x1, 
fd
);

2573 
c
 >>1; 
	`PUTRGBHEX
(c&0x1, 
fd
);

2574 
c
 >>1; 
	`PUTRGBHEX
(c, 
fd
);

2579 
	`_TIFF‰ì
((*Ë
tf_buf
);

2580 
	}
}

2583 
	$PSD©aBW
(
FILE
* 
fd
, 
TIFF
* 
tif
, 
uöt32
 
w
, uöt32 
h
)

2585 
bªakÀn
 = 
MAXLINE
;

2586 * 
tf_buf
;

2587 * 
˝
;

2588 
tsize_t
 
°rùsize
 = 
	`TIFFSåùSize
(
tif
);

2589 
t°rù_t
 
s
;

2591 #i‡
	`deföed
–
EXP_ASCII85ENCODER
 )

2592 
tsize_t
 
ascii85_l
;

2593 
uöt8
 *
ascii85_p
 = 0;

2596 (Ë
w
; (Ë
h
;

2597 
tf_buf
 = (*Ë
	`_TIFFmÆloc
(
°rùsize
);

2598 i‡(
tf_buf
 =
NULL
) {

2599 
	`TIFFEº‹
(
fûíame
, "No space for scanline buffer");

2604 
	`mem£t
(
tf_buf
, 0, 
°rùsize
);

2606 #i‡
	`deföed
–
EXP_ASCII85ENCODER
 )

2607 i‡–
ascii85
 ) {

2617 
ascii85_p
 = 
	`_TIFFmÆloc
–(
°rùsize
+(stripsize/2)) + 8 );

2619 i‡–!
ascii85_p
 ) {

2620 
	`_TIFF‰ì
–
tf_buf
 );

2622 
	`TIFFEº‹
–
fûíame
, "Cannotállocate ASCII85Éncoding buffer." );

2628 i‡(
ascii85
)

2629 
	`Ascii85Inô
();

2631 
s
 = 0; s < 
	`TIFFNumbîOfSåùs
(
tif
); s++) {

2632 
tmsize_t
 
cc
 = 
	`TIFFRódEncodedSåù
(
tif
, 
s
, 
tf_buf
, 
°rùsize
);

2633 i‡(
cc
 < 0) {

2634 
	`TIFFEº‹
(
fûíame
, "Can'tÑead strip");

2637 
˝
 = 
tf_buf
;

2638 i‡(
phŸomëric
 =
PHOTOMETRIC_MINISWHITE
) {

2639 
˝
 +
cc
; --˝ >
tf_buf
;)

2640 *
˝
 = ~*cp;

2641 
˝
++;

2647 i‡(
bô•îßm∂e
 =16 && !
HOST_BIGENDIAN
) {

2648 
	`PS_FlùByãs
(
˝
, 
cc
);

2650 i‡(
ascii85
) {

2651 #i‡
	`deföed
–
EXP_ASCII85ENCODER
 )

2652 i‡(
Æpha
) {

2653 
adju°
, 
i
;

2654 
i
 = 0; i < 
cc
; i+=2) {

2655 
adju°
 = 255 - 
˝
[
i
 + 1];

2656 
˝
[
i
 / 2] = cp[i] + 
adju°
;

2658 
cc
 /= 2;

2661 
ascii85_l
 = 
	`Ascii85EncodeBlock
–
ascii85_p
, 1, 
˝
, 
cc
 );

2663 i‡–
ascii85_l
 > 0 )

2664 
	`fwrôe
–
ascii85_p
, 
ascii85_l
, 1, 
fd
 );

2666 
cc
-- > 0)

2667 
	`Ascii85Put
(*
˝
++, 
fd
);

2670 
c
;

2672 i‡(
Æpha
) {

2673 
adju°
;

2674 
cc
-- > 0) {

2675 
	`DOBREAK
(
bªakÀn
, 1, 
fd
);

2682 
adju°
 = 255 - 
˝
[1];

2683 
c
 = *
˝
++ + 
adju°
; 
	`PUTHEX
(c,
fd
);

2684 
˝
++, 
cc
--;

2687 
cc
-- > 0) {

2688 
c
 = *
˝
++;

2689 
	`DOBREAK
(
bªakÀn
, 1, 
fd
);

2690 
	`PUTHEX
(
c
, 
fd
);

2696 i‡–!
ascii85
 )

2698 i‡–
Àvñ2
 || 
Àvñ3
)

2699 
	`Âuts
(">\n", 
fd
);

2701 #i‡!
	`deföed
–
EXP_ASCII85ENCODER
 )

2703 
	`Ascii85Flush
(
fd
);

2705 i‡–
ascii85_p
 )

2706 
	`_TIFF‰ì
–
ascii85_p
 );

2709 
	`_TIFF‰ì
(
tf_buf
);

2710 
	}
}

2713 
	$PSRawD©aBW
(
FILE
* 
fd
, 
TIFF
* 
tif
, 
uöt32
 
w
, uöt32 
h
)

2715 
uöt64
 *
bc
;

2716 
uöt32
 
bufsize
;

2717 
bªakÀn
 = 
MAXLINE
;

2718 
tmsize_t
 
cc
;

2719 
uöt16
 
fûl‹dî
;

2720 *
tf_buf
;

2721 *
˝
, 
c
;

2722 
t°rù_t
 
s
;

2724 #i‡
	`deföed
–
EXP_ASCII85ENCODER
 )

2725 
tsize_t
 
ascii85_l
;

2726 
uöt8
 * 
ascii85_p
 = 0;

2729 (Ë
w
; (Ë
h
;

2730 
	`TIFFGëFõldDeÁu…ed
(
tif
, 
TIFFTAG_FILLORDER
, &
fûl‹dî
);

2731 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_STRIPBYTECOUNTS
, &
bc
);

2737 
bufsize
 = (
uöt32
Ë
bc
[0];

2739  
s
 = 0; ++†< (
t°rù_t
)
tf_numbî°rùs
; ) {

2740 i‡–
bc
[
s
] > 
bufsize
 )

2741 
bufsize
 = (
uöt32
Ë
bc
[
s
];

2744 
tf_buf
 = (*Ë
	`_TIFFmÆloc
(
bufsize
);

2745 i‡(
tf_buf
 =
NULL
) {

2746 
	`TIFFEº‹
(
fûíame
, "No space for strip buffer");

2750 #i‡
	`deföed
–
EXP_ASCII85ENCODER
 )

2751 i‡–
ascii85
 ) {

2761 
ascii85_p
 = 
	`_TIFFmÆloc
–(
bufsize
+(bufsize/2)) + 8 );

2763 i‡–!
ascii85_p
 ) {

2764 
	`_TIFF‰ì
–
tf_buf
 );

2766 
	`TIFFEº‹
–
fûíame
, "Cannotállocate ASCII85Éncoding buffer." );

2772 
s
 = 0; s < (
t°rù_t
Ë
tf_numbî°rùs
; s++) {

2773 
cc
 = 
	`TIFFRódRawSåù
(
tif
, 
s
, 
tf_buf
, (
tmsize_t
Ë
bc
[s]);

2774 i‡(
cc
 < 0) {

2775 
	`TIFFEº‹
(
fûíame
, "Can'tÑead strip");

2778 i‡(
fûl‹dî
 =
FILLORDER_LSB2MSB
)

2779 
	`TIFFRevî£Bôs
(
tf_buf
, 
cc
);

2780 i‡(!
ascii85
) {

2781 
˝
 = 
tf_buf
; 
cc
 > 0; cc--) {

2782 
	`DOBREAK
(
bªakÀn
, 1, 
fd
);

2783 
c
 = *
˝
++;

2784 
	`PUTHEX
(
c
, 
fd
);

2786 
	`Âuts
(">\n", 
fd
);

2787 
bªakÀn
 = 
MAXLINE
;

2789 
	`Ascii85Inô
();

2790 #i‡
	`deföed
–
EXP_ASCII85ENCODER
 )

2791 
ascii85_l
 = 
	`Ascii85EncodeBlock
–
ascii85_p
, 1, 
tf_buf
, 
cc
 );

2793 i‡–
ascii85_l
 > 0 )

2794 
	`fwrôe
–
ascii85_p
, 
ascii85_l
, 1, 
fd
 );

2796 
˝
 = 
tf_buf
; 
cc
 > 0; cc--)

2797 
	`Ascii85Put
(*
˝
++, 
fd
);

2798 
	`Ascii85Flush
(
fd
);

2802 
	`_TIFF‰ì
((*Ë
tf_buf
);

2804 #i‡
	`deföed
–
EXP_ASCII85ENCODER
 )

2805 i‡–
ascii85_p
 )

2806 
	`_TIFF‰ì
–
ascii85_p
 );

2808 
	}
}

2811 
	$Ascii85Inô
()

2813 
ascii85bªakÀn
 = 2*
MAXLINE
;

2814 
ascii85cou¡
 = 0;

2815 
	}
}

2818 
	$Ascii85Encode
(* 
øw
)

2820 
ícoded
[6];

2821 
uöt32
 
w‹d
;

2823 
w‹d
 = (((
øw
[0]<<8)+raw[1])<<16) + (raw[2]<<8) +Ñaw[3];

2824 i‡(
w‹d
 != 0L) {

2825 
uöt32
 
q
;

2826 
uöt16
 
w1
;

2828 
q
 = 
w‹d
 / (85L*85*85*85);

2829 
ícoded
[0] = (Ë(
q
 + '!');

2831 
w‹d
 -
q
 * (85L*85*85*85); q = word / (85L*85*85);

2832 
ícoded
[1] = (Ë(
q
 + '!');

2834 
w‹d
 -
q
 * (85L*85*85); q = word / (85*85);

2835 
ícoded
[2] = (Ë(
q
 + '!');

2837 
w1
 = (
uöt16
Ë(
w‹d
 - 
q
*(85L*85));

2838 
ícoded
[3] = (Ë((
w1
 / 85) + '!');

2839 
ícoded
[4] = (Ë((
w1
 % 85) + '!');

2840 
ícoded
[5] = '\0';

2842 
ícoded
[0] = 'z',Éncoded[1] = '\0';

2843  (
ícoded
);

2844 
	}
}

2847 
	$Ascii85Put
(
code
, 
FILE
* 
fd
)

2849 
ascii85buf
[
ascii85cou¡
++] = 
code
;

2850 i‡(
ascii85cou¡
 >= 4) {

2851 * 
p
;

2852 
n
;

2854 
n
 = 
ascii85cou¡
, 
p
 = 
ascii85buf
;Ç >= 4;Ç -= 4,Ö += 4) {

2855 * 
˝
;

2856 
˝
 = 
	`Ascii85Encode
(
p
); *cp; cp++) {

2857 
	`putc
(*
˝
, 
fd
);

2858 i‡(--
ascii85bªakÀn
 == 0) {

2859 
	`putc
('\n', 
fd
);

2860 
ascii85bªakÀn
 = 2*
MAXLINE
;

2864 
	`_TIFFmem˝y
(
ascii85buf
, 
p
, 
n
);

2865 
ascii85cou¡
 = 
n
;

2867 
	}
}

2870 
	$Ascii85Flush
(
FILE
* 
fd
)

2872 i‡(
ascii85cou¡
 > 0) {

2873 * 
ªs
;

2874 
	`_TIFFmem£t
(&
ascii85buf
[
ascii85cou¡
], 0, 3);

2875 
ªs
 = 
	`Ascii85Encode
(
ascii85buf
);

2876 
	`fwrôe
(
ªs
[0] ='z' ? "!!!!" :Ñes, 
ascii85cou¡
 + 1, 1, 
fd
);

2878 
	`Âuts
("~>\n", 
fd
);

2879 
	}
}

2880 #if 
deföed
–
EXP_ASCII85ENCODER
)

2882 
	#A85BREAKCNTR
 
ascii85bªakÀn


	)

2883 
	#A85BREAKLEN
 (2*
MAXLINE
)

	)

2923 
tsize_t
 
	$Ascii85EncodeBlock
–
uöt8
 * 
ascii85_p
, 
f_eod
, c⁄° uöt8 * 
øw_p
, 
tsize_t
 
øw_l
 )

2926 
ascii85
[5];

2927 
tsize_t
 
ascii85_l
;

2928 
rc
;

2929 
uöt32
 
vÆ32
;

2931 
ascii85_l
 = 0;

2933 i‡–
øw_p
 )

2935 --
øw_p
;

2937  ; 
øw_l
 > 3;Ñaw_l -= 4 )

2939 
vÆ32
 = *(++
øw_p
) << 24;

2940 
vÆ32
 +*(++
øw_p
) << 16;

2941 
vÆ32
 +*(++
øw_p
) << 8;

2942 
vÆ32
 +*(++
øw_p
);

2944 i‡–
vÆ32
 == 0 )

2946 
ascii85_p
[
ascii85_l
] = 'z';

2947 
rc
 = 1;

2952 
ascii85
[4] = (Ë((
vÆ32
 % 85) + 33);

2953 
vÆ32
 /= 85;

2955 
ascii85
[3] = (Ë((
vÆ32
 % 85) + 33);

2956 
vÆ32
 /= 85;

2958 
ascii85
[2] = (Ë((
vÆ32
 % 85) + 33);

2959 
vÆ32
 /= 85;

2961 
ascii85
[1] = (Ë((
vÆ32
 % 85) + 33);

2962 
ascii85
[0] = (Ë((
vÆ32
 / 85) + 33);

2964 
	`_TIFFmem˝y
–&
ascii85_p
[
ascii85_l
], 
ascii85
, (ascii85) );

2965 
rc
 = (
ascii85
);

2968 
ascii85_l
 +
rc
;

2970 i‡–(
A85BREAKCNTR
 -
rc
) <= 0 )

2972 
ascii85_p
[
ascii85_l
] = '\n';

2973 ++
ascii85_l
;

2974 
A85BREAKCNTR
 = 
A85BREAKLEN
;

2982 i‡–
øw_l
 > 0 )

2984 
tsize_t
 
Àn
;

2986 
Àn
 = 
øw_l
 + 1;

2987 
vÆ32
 = *++
øw_p
 << 24;

2989 i‡–--
øw_l
 > 0 ) 
vÆ32
 +*(++
øw_p
) << 16;

2990 i‡–--
øw_l
 > 0 ) 
vÆ32
 +*(++
øw_p
) << 8;

2992 
vÆ32
 /= 85;

2994 
ascii85
[3] = (Ë((
vÆ32
 % 85) + 33);

2995 
vÆ32
 /= 85;

2997 
ascii85
[2] = (Ë((
vÆ32
 % 85) + 33);

2998 
vÆ32
 /= 85;

3000 
ascii85
[1] = (Ë((
vÆ32
 % 85) + 33);

3001 
ascii85
[0] = (Ë((
vÆ32
 / 85) + 33);

3003 
	`_TIFFmem˝y
–&
ascii85_p
[
ascii85_l
], 
ascii85
, 
Àn
 );

3004 
ascii85_l
 +
Àn
;

3012 i‡–
f_eod
 )

3014 
ascii85_p
[
ascii85_l
++] = '~';

3015 
ascii85_p
[
ascii85_l
++] = '>';

3016 
ascii85_p
[
ascii85_l
++] = '\n';

3019  ( 
ascii85_l
 );

3021 
	}
}

3026 * 
	g°uff
[] = {

3058 
NULL


3062 
	$ußge
(
code
)

3064 
buf
[
BUFSIZ
];

3065 
i
;

3067 
	`£tbuf
(
°dîr
, 
buf
);

3068 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

3069 
i
 = 0; 
°uff
[i] !
NULL
; i++)

3070 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

3071 
	`exô
(
code
);

3072 
	}
}

	@tools/tiff2rgba.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<°dlib.h
>

33 #ifde‡
HAVE_UNISTD_H


34 
	~<uni°d.h
>

37 #ifde‡
NEED_LIBPORT


38 
	~"libp‹t.h
"

41 
	~"tiffi›.h
"

42 
	~"tiffio.h
"

44 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

45 
	#C›yFõld
(
èg
, 
v
) \

46 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v
)Ë
	`TIFFSëFõld
(
out
,Åag, v)

	)

48 #i‚de‡
howm™y


49 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

51 
	#roundup
(
x
, 
y
Ë(
	`howm™y
(x,y)*((
uöt32
)(y)))

	)

53 
uöt16
 
	gcom¥essi⁄
 = 
COMPRESSION_PACKBITS
;

54 
uöt32
 
	grow•î°rù
 = (uint32) -1;

55 
	g¥o˚ss_by_block
 = 0;

56 
	gno_Æpha
 = 0;

57 
	gbigtiff_ouçut
 = 0;

60 
tiffcvt
(
TIFF
* 
ö
, TIFF* 
out
);

61 
ußge
(
code
);

64 
	$maö
(
¨gc
, * 
¨gv
[])

66 
TIFF
 *
ö
, *
out
;

67 
c
;

68 
›töd
;

69 *
›èrg
;

71 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:r:t:bn8")) != -1)

72 
c
) {

74 
¥o˚ss_by_block
 = 1;

78 i‡(
	`°ªq
(
›èrg
, "none"))

79 
com¥essi⁄
 = 
COMPRESSION_NONE
;

80 i‡(
	`°ªq
(
›èrg
, "packbits"))

81 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

82 i‡(
	`°ªq
(
›èrg
, "lzw"))

83 
com¥essi⁄
 = 
COMPRESSION_LZW
;

84 i‡(
	`°ªq
(
›èrg
, "jpeg"))

85 
com¥essi⁄
 = 
COMPRESSION_JPEG
;

86 i‡(
	`°ªq
(
›èrg
, "zip"))

87 
com¥essi⁄
 = 
COMPRESSION_DEFLATE
;

89 
	`ußge
(-1);

93 
row•î°rù
 = 
	`©oi
(
›èrg
);

97 
row•î°rù
 = 
	`©oi
(
›èrg
);

101 
no_Æpha
 = 1;

105 
bigtiff_ouçut
 = 1;

109 
	`ußge
(0);

113 i‡(
¨gc
 - 
›töd
 < 2)

114 
	`ußge
(-1);

116 
out
 = 
	`TIFFO≥n
(
¨gv
[
¨gc
-1], 
bigtiff_ouçut
?"w8":"w");

117 i‡(
out
 =
NULL
)

120 ; 
›töd
 < 
¨gc
-1; optind++) {

121 
ö
 = 
	`TIFFO≥n
(
¨gv
[
›töd
], "r");

122 i‡(
ö
 !
NULL
) {

124 i‡(!
	`tiffcvt
(
ö
, 
out
) ||

125 !
	`TIFFWrôeDúe˘‹y
(
out
)) {

126 (Ë
	`TIFFClo£
(
out
);

127 (Ë
	`TIFFClo£
(
ö
);

130 } 
	`TIFFRódDúe˘‹y
(
ö
));

131 (Ë
	`TIFFClo£
(
ö
);

134 (Ë
	`TIFFClo£
(
out
);

136 
	}
}

139 
	$cvt_by_tûe
–
TIFF
 *
ö
, TIFF *
out
 )

142 
uöt32
* 
ø°î
;

143 
uöt32
 
width
, 
height
;

144 
uöt32
 
tûe_width
, 
tûe_height
;

145 
uöt32
 
row
, 
cﬁ
;

146 
uöt32
 *
wrk_löe
;

147 
ok
 = 1;

149 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGEWIDTH
, &
width
);

150 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
height
);

152 if–!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILEWIDTH
, &
tûe_width
)

153 || !
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILELENGTH
, &
tûe_height
) ) {

154 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
), "Source imageÇotÅiled");

158 
	`TIFFSëFõld
(
out
, 
TIFFTAG_TILEWIDTH
, 
tûe_width
 );

159 
	`TIFFSëFõld
(
out
, 
TIFFTAG_TILELENGTH
, 
tûe_height
 );

164 
ø°î
 = (
uöt32
*)
	`_TIFFmÆloc
(
tûe_width
 * 
tûe_height
 *  (uint32));

165 i‡(
ø°î
 == 0) {

166 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
), "No space forÑaster buffer");

174 
wrk_löe
 = (
uöt32
*)
	`_TIFFmÆloc
(
tûe_width
 *  (uint32));

175 i‡(!
wrk_löe
) {

176 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
), "No space forÑaster scanline buffer");

177 
ok
 = 0;

183  
row
 = 0; 
ok
 &&Ñow < 
height
;Ñow +
tûe_height
 )

185  
cﬁ
 = 0; 
ok
 && cﬁ < 
width
; cﬁ +
tûe_width
 )

187 
uöt32
 
i_row
;

190 i‡(!
	`TIFFRódRGBATûe
(
ö
, 
cﬁ
, 
row
, 
ø°î
)) {

191 
ok
 = 0;

200 #i‡
HOST_BIGENDIAN


201 
	`TIFFSwabAºayOfL⁄g
(
ø°î
, 
tûe_width
 * 
tûe_height
);

208  
i_row
 = 0; i_row < 
tûe_height
 / 2; i_row++ )

210 
uöt32
 *
t›_löe
, *
bŸtom_löe
;

212 
t›_löe
 = 
ø°î
 + 
tûe_width
 * 
i_row
;

213 
bŸtom_löe
 = 
ø°î
 + 
tûe_width
 * (
tûe_height
-
i_row
-1);

215 
	`_TIFFmem˝y
(
wrk_löe
, 
t›_löe
, 4*
tûe_width
);

216 
	`_TIFFmem˝y
(
t›_löe
, 
bŸtom_löe
, 4*
tûe_width
);

217 
	`_TIFFmem˝y
(
bŸtom_löe
, 
wrk_löe
, 4*
tûe_width
);

224 if–
	`TIFFWrôeEncodedTûe
–
out
,

225 
	`TIFFCompuãTûe
–
out
, 
cﬁ
, 
row
, 0, 0),

226 
ø°î
,

227 4 * 
tûe_width
 * 
tûe_height
 ) == -1 )

229 
ok
 = 0;

235 
	`_TIFF‰ì
–
ø°î
 );

236 
	`_TIFF‰ì
–
wrk_löe
 );

238  
ok
;

239 
	}
}

242 
	$cvt_by_°rù
–
TIFF
 *
ö
, TIFF *
out
 )

245 
uöt32
* 
ø°î
;

246 
uöt32
 
width
, 
height
;

247 
uöt32
 
row
;

248 
uöt32
 *
wrk_löe
;

249 
ok
 = 1;

251 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGEWIDTH
, &
width
);

252 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
height
);

254 if–!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
) ) {

255 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
), "Source imageÇot in strips");

259 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

264 
ø°î
 = (
uöt32
*)
	`_TIFFmÆloc
(
width
 * 
row•î°rù
 *  (uint32));

265 i‡(
ø°î
 == 0) {

266 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
), "No space forÑaster buffer");

274 
wrk_löe
 = (
uöt32
*)
	`_TIFFmÆloc
(
width
 *  (uint32));

275 i‡(!
wrk_löe
) {

276 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
), "No space forÑaster scanline buffer");

277 
ok
 = 0;

283  
row
 = 0; 
ok
 &&Ñow < 
height
;Ñow +
row•î°rù
 )

285 
rows_to_wrôe
, 
i_row
;

288 i‡(!
	`TIFFRódRGBASåù
(
ö
, 
row
, 
ø°î
)) {

289 
ok
 = 0;

297 #i‡
HOST_BIGENDIAN


298 
	`TIFFSwabAºayOfL⁄g
(
ø°î
, 
width
 * 
row•î°rù
);

304 if–
row
 + 
row•î°rù
 > 
height
 )

305 
rows_to_wrôe
 = 
height
 - 
row
;

307 
rows_to_wrôe
 = 
row•î°rù
;

314  
i_row
 = 0; i_row < 
rows_to_wrôe
 / 2; i_row++ )

316 
uöt32
 *
t›_löe
, *
bŸtom_löe
;

318 
t›_löe
 = 
ø°î
 + 
width
 * 
i_row
;

319 
bŸtom_löe
 = 
ø°î
 + 
width
 * (
rows_to_wrôe
-
i_row
-1);

321 
	`_TIFFmem˝y
(
wrk_löe
, 
t›_löe
, 4*
width
);

322 
	`_TIFFmem˝y
(
t›_löe
, 
bŸtom_löe
, 4*
width
);

323 
	`_TIFFmem˝y
(
bŸtom_löe
, 
wrk_löe
, 4*
width
);

330 if–
	`TIFFWrôeEncodedSåù
–
out
, 
row
 / 
row•î°rù
, 
ø°î
,

331 4 * 
rows_to_wrôe
 * 
width
 ) == -1 )

333 
ok
 = 0;

338 
	`_TIFF‰ì
–
ø°î
 );

339 
	`_TIFF‰ì
–
wrk_löe
 );

341  
ok
;

342 
	}
}

353 
	$cvt_whﬁe_image
–
TIFF
 *
ö
, TIFF *
out
 )

356 
uöt32
* 
ø°î
;

357 
uöt32
 
width
, 
height
;

358 
uöt32
 
row
;

359 
size_t
 
pixñ_cou¡
;

361 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGEWIDTH
, &
width
);

362 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
height
);

363 
pixñ_cou¡
 = 
width
 * 
height
;

366 i‡(!
width
 || !
height
 || 
pixñ_cou¡
 / width != height) {

367 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

369 ()
width
, ()
height
);

373 
row•î°rù
 = 
	`TIFFDeÁu…SåùSize
(
out
,Ñowsperstrip);

374 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

376 
ø°î
 = (
uöt32
*)
	`_TIFFCheckMÆloc
(
ö
, 
pixñ_cou¡
, (uint32), "raster buffer");

377 i‡(
ø°î
 == 0) {

378 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
), "FailedÅoállocate buffer (%luÉlements of %luÉach)",

379 ()
pixñ_cou¡
, ()(
uöt32
));

384 i‡(!
	`TIFFRódRGBAImageOrõ¡ed
(
ö
, 
width
, 
height
, 
ø°î
,

385 
ORIENTATION_TOPLEFT
, 0)) {

386 
	`_TIFF‰ì
(
ø°î
);

394 #i‡
HOST_BIGENDIAN


395 
	`TIFFSwabAºayOfL⁄g
(
ø°î
, 
width
 * 
height
);

401 i‡(
no_Æpha
)

403 
size_t
 
cou¡
 = 
pixñ_cou¡
;

404 *
§c
, *
d°
;

406 
§c
 = 
d°
 = (*Ë
ø°î
;

407 
cou¡
 > 0)

409 *(
d°
++Ë*(
§c
++);

410 *(
d°
++Ë*(
§c
++);

411 *(
d°
++Ë*(
§c
++);

412 
§c
++;

413 
cou¡
--;

420 
row
 = 0;Ñow < 
height
;Ñow +
row•î°rù
)

422 * 
ø°î_°rù
;

423 
rows_to_wrôe
;

424 
byãs_≥r_pixñ
;

426 i‡(
no_Æpha
)

428 
ø°î_°rù
 = ((*Ë
ø°î
Ë+ 3 * 
row
 * 
width
;

429 
byãs_≥r_pixñ
 = 3;

433 
ø°î_°rù
 = (*Ë(
ø°î
 + 
row
 * 
width
);

434 
byãs_≥r_pixñ
 = 4;

437 if–
row
 + 
row•î°rù
 > 
height
 )

438 
rows_to_wrôe
 = 
height
 - 
row
;

440 
rows_to_wrôe
 = 
row•î°rù
;

442 if–
	`TIFFWrôeEncodedSåù
–
out
, 
row
 / 
row•î°rù
, 
ø°î_°rù
,

443 
byãs_≥r_pixñ
 * 
rows_to_wrôe
 * 
width
 ) == -1 )

445 
	`_TIFF‰ì
–
ø°î
 );

450 
	`_TIFF‰ì
–
ø°î
 );

453 
	}
}

457 
	$tiffcvt
(
TIFF
* 
ö
, TIFF* 
out
)

459 
uöt32
 
width
, 
height
;

460 
uöt16
 
sh‹tv
;

461 
Êﬂtv
;

462 *
°rögv
;

463 
uöt32
 
l⁄gv
;

464 
uöt16
 
v
[1];

466 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGEWIDTH
, &
width
);

467 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
height
);

469 
	`C›yFõld
(
TIFFTAG_SUBFILETYPE
, 
l⁄gv
);

470 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, 
width
);

471 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, 
height
);

472 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 8);

473 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

474 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_RGB
);

476 
	`C›yFõld
(
TIFFTAG_FILLORDER
, 
sh‹tv
);

477 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
ORIENTATION_TOPLEFT
);

479 if–
no_Æpha
 )

480 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 3);

482 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 4);

484 if–!
no_Æpha
 )

486 
v
[0] = 
EXTRASAMPLE_ASSOCALPHA
;

487 
	`TIFFSëFõld
(
out
, 
TIFFTAG_EXTRASAMPLES
, 1, 
v
);

490 
	`C›yFõld
(
TIFFTAG_XRESOLUTION
, 
Êﬂtv
);

491 
	`C›yFõld
(
TIFFTAG_YRESOLUTION
, 
Êﬂtv
);

492 
	`C›yFõld
(
TIFFTAG_RESOLUTIONUNIT
, 
sh‹tv
);

493 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

494 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SOFTWARE
, 
	`TIFFGëVîsi⁄
());

495 
	`C›yFõld
(
TIFFTAG_DOCUMENTNAME
, 
°rögv
);

497 if–
¥o˚ss_by_block
 && 
	`TIFFIsTûed
–
ö
 ) )

498 –
	`cvt_by_tûe
–
ö
, 
out
 ) );

499 if–
¥o˚ss_by_block
 )

500 –
	`cvt_by_°rù
–
ö
, 
out
 ) );

502 –
	`cvt_whﬁe_image
–
ö
, 
out
 ) );

503 
	}
}

505 * 
	g°uff
[] = {

518 
NULL


522 
	$ußge
(
code
)

524 
buf
[
BUFSIZ
];

525 
i
;

527 
	`£tbuf
(
°dîr
, 
buf
);

528 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

529 
i
 = 0; 
°uff
[i] !
NULL
; i++)

530 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

531 
	`exô
(
code
);

532 
	}
}

	@tools/tiffcmp.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<m©h.h
>

34 #ifde‡
HAVE_UNISTD_H


35 
	~<uni°d.h
>

38 #ifde‡
NEED_LIBPORT


39 
	~"libp‹t.h
"

42 
	~"tiffio.h
"

44 #i‚de‡
HAVE_GETOPT


45 
gë›t
(, **, *);

48 
	g°›⁄diff
 = 1;

49 
	g°›⁄fú°èg
 = 1;

50 
uöt16
 
	gbô•îßm∂e
 = 1;

51 
uöt16
 
	gßm∂e•îpixñ
 = 1;

52 
uöt16
 
	gßm∂ef‹m©
 = 
SAMPLEFORMAT_UINT
;

53 
uöt32
 
	gimagewidth
;

54 
uöt32
 
	gimagñígth
;

56 
ußge
();

57 
tiffcmp
(
TIFF
*, TIFF*);

58 
cm±ags
(
TIFF
*, TIFF*);

59 
C⁄tigCom∑ª
(, 
uöt32
, *, *, 
tsize_t
);

60 
Sï¨©eCom∑ª
(, , 
uöt32
, *, *);

61 
PrötI¡Diff
(
uöt32
, , uint32, uint32, uint32);

62 
PrötFlﬂtDiff
(
uöt32
, , uint32, , );

64 
Àof
(c⁄° *, 
uöt32
, );

67 
	$maö
(
¨gc
, * 
¨gv
[])

69 
TIFF
 *
tif1
, *
tif2
;

70 
c
, 
dúnum
;

71 
›töd
;

72 * 
›èrg
;

74 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "ltz:")) != -1)

75 
c
) {

77 
°›⁄diff
 = 0;

80 
°›⁄diff
 = 
	`©oi
(
›èrg
);

83 
°›⁄fú°èg
 = 0;

86 
	`ußge
();

89 i‡(
¨gc
 - 
›töd
 < 2)

90 
	`ußge
();

91 
tif1
 = 
	`TIFFO≥n
(
¨gv
[
›töd
], "r");

92 i‡(
tif1
 =
NULL
)

94 
tif2
 = 
	`TIFFO≥n
(
¨gv
[
›töd
+1], "r");

95 i‡(
tif2
 =
NULL
)

97 
dúnum
 = 0;

98 
	`tiffcmp
(
tif1
, 
tif2
)) {

99 i‡(!
	`TIFFRódDúe˘‹y
(
tif1
)) {

100 i‡(!
	`TIFFRódDúe˘‹y
(
tif2
))

102 
	`¥ötf
("No more directories for %s\n",

103 
	`TIFFFûeName
(
tif1
));

105 } i‡(!
	`TIFFRódDúe˘‹y
(
tif2
)) {

106 
	`¥ötf
("No more directories for %s\n",

107 
	`TIFFFûeName
(
tif2
));

110 
	`¥ötf
("Dúe˘‹y %d:\n", ++
dúnum
);

113 
	`TIFFClo£
(
tif1
);

114 
	`TIFFClo£
(
tif2
);

116 
	}
}

118 * 
	g°uff
[] = {

124 
NULL


128 
	$ußge
()

130 
buf
[
BUFSIZ
];

131 
i
;

133 
	`£tbuf
(
°dîr
, 
buf
);

134 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

135 
i
 = 0; 
°uff
[i] !
NULL
; i++)

136 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

137 
	`exô
(-1);

138 
	}
}

140 
	#checkEOF
(
tif
, 
row
, 
ßm∂e
) { \

141 
	`Àof
(
	`TIFFFûeName
(
tif
), 
row
, 
ßm∂e
); \

142 
bad
; \

143 }

	)

145 
CheckSh‹tTag
(
TIFF
*, TIFF*, , *);

146 
CheckSh‹t2Tag
(
TIFF
*, TIFF*, , *);

147 
CheckSh‹tAºayTag
(
TIFF
*, TIFF*, , *);

148 
CheckL⁄gTag
(
TIFF
*, TIFF*, , *);

149 
CheckFlﬂtTag
(
TIFF
*, TIFF*, , *);

150 
CheckSåögTag
(
TIFF
*, TIFF*, , *);

153 
	$tiffcmp
(
TIFF
* 
tif1
, TIFF* 
tif2
)

155 
uöt16
 
c⁄fig1
, 
c⁄fig2
;

156 
tsize_t
 
size1
;

157 
uöt32
 
row
;

158 
tßm∂e_t
 
s
;

159 *
buf1
, *
buf2
;

161 i‡(!
	`CheckSh‹tTag
(
tif1
, 
tif2
, 
TIFFTAG_BITSPERSAMPLE
, "BitsPerSample"))

163 i‡(!
	`CheckSh‹tTag
(
tif1
, 
tif2
, 
TIFFTAG_SAMPLESPERPIXEL
, "SamplesPerPixel"))

165 i‡(!
	`CheckL⁄gTag
(
tif1
, 
tif2
, 
TIFFTAG_IMAGEWIDTH
, "ImageWidth"))

167 i‡(!
	`cm±ags
(
tif1
, 
tif2
))

169 (Ë
	`TIFFGëFõld
(
tif1
, 
TIFFTAG_BITSPERSAMPLE
, &
bô•îßm∂e
);

170 (Ë
	`TIFFGëFõld
(
tif1
, 
TIFFTAG_SAMPLESPERPIXEL
, &
ßm∂e•îpixñ
);

171 (Ë
	`TIFFGëFõld
(
tif1
, 
TIFFTAG_SAMPLEFORMAT
, &
ßm∂ef‹m©
);

172 (Ë
	`TIFFGëFõld
(
tif1
, 
TIFFTAG_IMAGEWIDTH
, &
imagewidth
);

173 (Ë
	`TIFFGëFõld
(
tif1
, 
TIFFTAG_IMAGELENGTH
, &
imagñígth
);

174 (Ë
	`TIFFGëFõld
(
tif1
, 
TIFFTAG_PLANARCONFIG
, &
c⁄fig1
);

175 (Ë
	`TIFFGëFõld
(
tif2
, 
TIFFTAG_PLANARCONFIG
, &
c⁄fig2
);

176 
buf1
 = (*)
	`_TIFFmÆloc
(
size1
 = 
	`TIFFSˇ∆öeSize
(
tif1
));

177 
buf2
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
tif2
));

178 i‡(
buf1
 =
NULL
 || 
buf2
 == NULL) {

179 
	`Ârötf
(
°dîr
, "No space for scanline buffers\n");

180 
	`exô
(-1);

182 i‡(
c⁄fig1
 !
c⁄fig2
 && 
bô•îßm∂e
 !8 && 
ßm∂e•îpixñ
 > 1) {

183 
	`Ârötf
(
°dîr
,

185 
bad
;

187 
	#∑ck
(
a
,
b
Ë(◊)<<8)|(b)

	)

188 
	`∑ck
(
c⁄fig1
, 
c⁄fig2
)) {

189 
	`∑ck
(
PLANARCONFIG_SEPARATE
, 
PLANARCONFIG_CONTIG
):

190 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

191 i‡(
	`TIFFRódSˇ∆öe
(
tif2
, 
buf2
, 
row
, 0) < 0)

192 
	`checkEOF
(
tif2
, 
row
, -1)

193 
s
 = 0; s < 
ßm∂e•îpixñ
; s++) {

194 i‡(
	`TIFFRódSˇ∆öe
(
tif1
, 
buf1
, 
row
, 
s
) < 0)

195 
	`checkEOF
(
tif1
, 
row
, 
s
)

196 i‡(
	`Sï¨©eCom∑ª
(1, 
s
, 
row
, 
buf2
, 
buf1
) < 0)

197 
bad1
;

201 
	`∑ck
(
PLANARCONFIG_CONTIG
, 
PLANARCONFIG_SEPARATE
):

202 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

203 i‡(
	`TIFFRódSˇ∆öe
(
tif1
, 
buf1
, 
row
, 0) < 0)

204 
	`checkEOF
(
tif1
, 
row
, -1)

205 
s
 = 0; s < 
ßm∂e•îpixñ
; s++) {

206 i‡(
	`TIFFRódSˇ∆öe
(
tif2
, 
buf2
, 
row
, 
s
) < 0)

207 
	`checkEOF
(
tif2
, 
row
, 
s
)

208 i‡(
	`Sï¨©eCom∑ª
(0, 
s
, 
row
, 
buf1
, 
buf2
) < 0)

209 
bad1
;

213 
	`∑ck
(
PLANARCONFIG_SEPARATE
, PLANARCONFIG_SEPARATE):

214 
s
 = 0; s < 
ßm∂e•îpixñ
; s++)

215 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

216 i‡(
	`TIFFRódSˇ∆öe
(
tif1
, 
buf1
, 
row
, 
s
) < 0)

217 
	`checkEOF
(
tif1
, 
row
, 
s
)

218 i‡(
	`TIFFRódSˇ∆öe
(
tif2
, 
buf2
, 
row
, 
s
) < 0)

219 
	`checkEOF
(
tif2
, 
row
, 
s
)

220 i‡(
	`C⁄tigCom∑ª
(
s
, 
row
, 
buf1
, 
buf2
, 
size1
) < 0)

221 
bad1
;

224 
	`∑ck
(
PLANARCONFIG_CONTIG
, PLANARCONFIG_CONTIG):

225 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

226 i‡(
	`TIFFRódSˇ∆öe
(
tif1
, 
buf1
, 
row
, 0) < 0)

227 
	`checkEOF
(
tif1
, 
row
, -1)

228 i‡(
	`TIFFRódSˇ∆öe
(
tif2
, 
buf2
, 
row
, 0) < 0)

229 
	`checkEOF
(
tif2
, 
row
, -1)

230 i‡(
	`C⁄tigCom∑ª
(-1, 
row
, 
buf1
, 
buf2
, 
size1
) < 0)

231 
bad1
;

235 i‡(
buf1
Ë
	`_TIFF‰ì
(buf1);

236 i‡(
buf2
Ë
	`_TIFF‰ì
(buf2);

238 
bad
:

239 i‡(
°›⁄diff
)

240 
	`exô
(1);

241 
bad1
:

242 i‡(
buf1
Ë
	`_TIFF‰ì
(buf1);

243 i‡(
buf2
Ë
	`_TIFF‰ì
(buf2);

245 
	}
}

247 
	#CmpSh‹tFõld
(
èg
, 
«me
) \

248 i‡(!
	`CheckSh‹tTag
(
tif1
, 
tif2
, 
èg
, 
«me
Ë&& 
°›⁄fú°èg
Ë (0)

	)

249 
	#CmpSh‹tFõld2
(
èg
, 
«me
) \

250 i‡(!
	`CheckSh‹t2Tag
(
tif1
, 
tif2
, 
èg
, 
«me
Ë&& 
°›⁄fú°èg
Ë (0)

	)

251 
	#CmpL⁄gFõld
(
èg
, 
«me
) \

252 i‡(!
	`CheckL⁄gTag
(
tif1
, 
tif2
, 
èg
, 
«me
Ë&& 
°›⁄fú°èg
Ë (0)

	)

253 
	#CmpFlﬂtFõld
(
èg
, 
«me
) \

254 i‡(!
	`CheckFlﬂtTag
(
tif1
, 
tif2
, 
èg
, 
«me
Ë&& 
°›⁄fú°èg
Ë (0)

	)

255 
	#CmpSåögFõld
(
èg
, 
«me
) \

256 i‡(!
	`CheckSåögTag
(
tif1
, 
tif2
, 
èg
, 
«me
Ë&& 
°›⁄fú°èg
Ë (0)

	)

257 
	#CmpSh‹tAºayFõld
(
èg
, 
«me
) \

258 i‡(!
	`CheckSh‹tAºayTag
(
tif1
, 
tif2
, 
èg
, 
«me
Ë&& 
°›⁄fú°èg
Ë (0)

	)

261 
	$cm±ags
(
TIFF
* 
tif1
, TIFF* 
tif2
)

263 
	`CmpL⁄gFõld
(
TIFFTAG_SUBFILETYPE
, "SubFileType");

264 
	`CmpL⁄gFõld
(
TIFFTAG_IMAGEWIDTH
, "ImageWidth");

265 
	`CmpL⁄gFõld
(
TIFFTAG_IMAGELENGTH
, "ImageLength");

266 
	`CmpSh‹tFõld
(
TIFFTAG_BITSPERSAMPLE
, "BitsPerSample");

267 
	`CmpSh‹tFõld
(
TIFFTAG_COMPRESSION
, "Compression");

268 
	`CmpSh‹tFõld
(
TIFFTAG_PREDICTOR
, "Predictor");

269 
	`CmpSh‹tFõld
(
TIFFTAG_PHOTOMETRIC
, "PhotometricInterpretation");

270 
	`CmpSh‹tFõld
(
TIFFTAG_THRESHHOLDING
, "Thresholding");

271 
	`CmpSh‹tFõld
(
TIFFTAG_FILLORDER
, "FillOrder");

272 
	`CmpSh‹tFõld
(
TIFFTAG_ORIENTATION
, "Orientation");

273 
	`CmpSh‹tFõld
(
TIFFTAG_SAMPLESPERPIXEL
, "SamplesPerPixel");

274 
	`CmpSh‹tFõld
(
TIFFTAG_MINSAMPLEVALUE
, "MinSampleValue");

275 
	`CmpSh‹tFõld
(
TIFFTAG_MAXSAMPLEVALUE
, "MaxSampleValue");

276 
	`CmpSh‹tFõld
(
TIFFTAG_SAMPLEFORMAT
, "SampleFormat");

277 
	`CmpFlﬂtFõld
(
TIFFTAG_XRESOLUTION
, "XResolution");

278 
	`CmpFlﬂtFõld
(
TIFFTAG_YRESOLUTION
, "YResolution");

279 
	`CmpL⁄gFõld
(
TIFFTAG_GROUP3OPTIONS
, "Group3Options");

280 
	`CmpL⁄gFõld
(
TIFFTAG_GROUP4OPTIONS
, "Group4Options");

281 
	`CmpSh‹tFõld
(
TIFFTAG_RESOLUTIONUNIT
, "ResolutionUnit");

282 
	`CmpSh‹tFõld
(
TIFFTAG_PLANARCONFIG
, "PlanarConfiguration");

283 
	`CmpL⁄gFõld
(
TIFFTAG_ROWSPERSTRIP
, "RowsPerStrip");

284 
	`CmpFlﬂtFõld
(
TIFFTAG_XPOSITION
, "XPosition");

285 
	`CmpFlﬂtFõld
(
TIFFTAG_YPOSITION
, "YPosition");

286 
	`CmpSh‹tFõld
(
TIFFTAG_GRAYRESPONSEUNIT
, "GrayResponseUnit");

287 
	`CmpSh‹tFõld
(
TIFFTAG_COLORRESPONSEUNIT
, "ColorResponseUnit");

288 #ifde‡
nŸdef


289 { 
uöt16
 *
gøycurve
;

290 
	`CmpFõld
(
TIFFTAG_GRAYRESPONSECURVE
, 
gøycurve
);

292 { 
uöt16
 *
ªd
, *
gªí
, *
blue
;

293 
	`CmpFõld3
(
TIFFTAG_COLORRESPONSECURVE
, 
ªd
, 
gªí
, 
blue
);

295 { 
uöt16
 *
ªd
, *
gªí
, *
blue
;

296 
	`CmpFõld3
(
TIFFTAG_COLORMAP
, 
ªd
, 
gªí
, 
blue
);

299 
	`CmpSh‹tFõld2
(
TIFFTAG_PAGENUMBER
, "PageNumber");

300 
	`CmpSåögFõld
(
TIFFTAG_ARTIST
, "Artist");

301 
	`CmpSåögFõld
(
TIFFTAG_IMAGEDESCRIPTION
,"ImageDescription");

302 
	`CmpSåögFõld
(
TIFFTAG_MAKE
, "Make");

303 
	`CmpSåögFõld
(
TIFFTAG_MODEL
, "Model");

304 
	`CmpSåögFõld
(
TIFFTAG_SOFTWARE
, "Software");

305 
	`CmpSåögFõld
(
TIFFTAG_DATETIME
, "DateTime");

306 
	`CmpSåögFõld
(
TIFFTAG_HOSTCOMPUTER
, "HostComputer");

307 
	`CmpSåögFõld
(
TIFFTAG_PAGENAME
, "PageName");

308 
	`CmpSåögFõld
(
TIFFTAG_DOCUMENTNAME
, "DocumentName");

309 
	`CmpSh‹tFõld
(
TIFFTAG_MATTEING
, "Matteing");

310 
	`CmpSh‹tAºayFõld
(
TIFFTAG_EXTRASAMPLES
,"ExtraSamples");

312 
	}
}

315 
	$C⁄tigCom∑ª
(
ßm∂e
, 
uöt32
 
row
,

316 * 
p1
, * 
p2
, 
tsize_t
 
size
)

318 
uöt32
 
pix
;

319 
µb
 = 8 / 
bô•îßm∂e
;

320 
ßm∂es_to_ã°
;

322 i‡(
	`memcmp
(
p1
, 
p2
, 
size
) == 0)

325 
ßm∂es_to_ã°
 = (
ßm∂e
 =-1Ë? 
ßm∂e•îpixñ
 : 1;

327 
bô•îßm∂e
) {

330 *
pix1
 = 
p1
, *
pix2
 = 
p2
;

332 
pix
 = 0;Öix < 
imagewidth
;Öix +
µb
) {

333 
s
;

335 
s
 = 0; s < 
ßm∂es_to_ã°
; s++) {

336 i‡(*
pix1
 !*
pix2
) {

337 if–
ßm∂e
 == -1 )

338 
	`PrötI¡Diff
(
row
, 
s
, 
pix
, *
pix1
, *
pix2
);

340 
	`PrötI¡Diff
(
row
, 
ßm∂e
, 
pix
, *
pix1
, *
pix2
);

343 
pix1
++;

344 
pix2
++;

351 
uöt16
 *
pix1
 = (uöt16 *)
p1
, *
pix2
 = (uöt16 *)
p2
;

353 
pix
 = 0;Öix < 
imagewidth
;Öix++) {

354 
s
;

356 
s
 = 0; s < 
ßm∂es_to_ã°
; s++) {

357 i‡(*
pix1
 !*
pix2
)

358 
	`PrötI¡Diff
(
row
, 
ßm∂e
, 
pix
, *
pix1
, *
pix2
);

360 
pix1
++;

361 
pix2
++;

367 i‡(
ßm∂ef‹m©
 =
SAMPLEFORMAT_UINT


368 || 
ßm∂ef‹m©
 =
SAMPLEFORMAT_INT
) {

369 
uöt32
 *
pix1
 = (uöt32 *)
p1
, *
pix2
 = (uöt32 *)
p2
;

371 
pix
 = 0;Öix < 
imagewidth
;Öix++) {

372 
s
;

374 
s
 = 0; s < 
ßm∂es_to_ã°
; s++) {

375 i‡(*
pix1
 !*
pix2
) {

376 
	`PrötI¡Diff
(
row
, 
ßm∂e
, 
pix
,

377 *
pix1
, *
pix2
);

380 
pix1
++;

381 
pix2
++;

384 } i‡(
ßm∂ef‹m©
 =
SAMPLEFORMAT_IEEEFP
) {

385 *
pix1
 = (*)
p1
, *
pix2
 = (*)
p2
;

387 
pix
 = 0;Öix < 
imagewidth
;Öix++) {

388 
s
;

390 
s
 = 0; s < 
ßm∂es_to_ã°
; s++) {

391 i‡(
	`Ábs
(*
pix1
 - *
pix2
) < 0.000000000001) {

392 
	`PrötFlﬂtDiff
(
row
, 
ßm∂e
, 
pix
,

393 *
pix1
, *
pix2
);

396 
pix1
++;

397 
pix2
++;

401 
	`Ârötf
(
°dîr
, "Sample format %d isÇot supported.\n",

402 
ßm∂ef‹m©
);

407 
	`Ârötf
(
°dîr
, "Bô dïth %d i†nŸ suµ‹ãd.\n", 
bô•îßm∂e
);

412 
	}
}

415 
	$PrötI¡Diff
(
uöt32
 
row
, 
ßm∂e
, uöt32 
pix
, uöt32 
w1
, uöt32 
w2
)

417 i‡(
ßm∂e
 < 0)

418 
ßm∂e
 = 0;

419 
bô•îßm∂e
) {

424 
öt32
 
mask1
, 
mask2
, 
s
;

426 
mask1
 = ~((-1Ë<< 
bô•îßm∂e
);

427 
s
 = (8 - 
bô•îßm∂e
);

428 
mask2
 = 
mask1
 << 
s
;

429 ; 
mask2
 && 
pix
 < 
imagewidth
;

430 
mask2
 >>
bô•îßm∂e
, 
s
 -bô•îßm∂e, 
pix
++) {

431 i‡((
w1
 & 
mask2
Ë^ (
w2
 & mask2)) {

432 
	`¥ötf
(

434 (Ë
row
,

435 (Ë
pix
,

436 
ßm∂e
,

437 ()((
w1
 >> 
s
Ë& 
mask1
),

438 ()((
w2
 >> 
s
Ë& 
mask1
));

439 i‡(--
°›⁄diff
 == 0)

440 
	`exô
(1);

446 
	`¥ötf
("Scanline %lu,Öixel %lu, sample %d: %02x %02x\n",

447 (Ë
row
, (Ë
pix
, 
ßm∂e
,

448 (Ë
w1
, (Ë
w2
);

449 i‡(--
°›⁄diff
 == 0)

450 
	`exô
(1);

453 
	`¥ötf
("Scanline %lu,Öixel %lu, sample %d: %04x %04x\n",

454 (Ë
row
, (Ë
pix
, 
ßm∂e
,

455 (Ë
w1
, (Ë
w2
);

456 i‡(--
°›⁄diff
 == 0)

457 
	`exô
(1);

460 
	`¥ötf
("Scanline %lu,Öixel %lu, sample %d: %08x %08x\n",

461 (Ë
row
, (Ë
pix
, 
ßm∂e
,

462 (Ë
w1
, (Ë
w2
);

463 i‡(--
°›⁄diff
 == 0)

464 
	`exô
(1);

469 
	}
}

472 
	$PrötFlﬂtDiff
(
uöt32
 
row
, 
ßm∂e
, uöt32 
pix
, 
w1
, 
w2
)

474 i‡(
ßm∂e
 < 0)

475 
ßm∂e
 = 0;

476 
bô•îßm∂e
) {

478 
	`¥ötf
("Scanline %lu,Öixel %lu, sample %d: %g %g\n",

479 (Ë
row
, (Ë
pix
, 
ßm∂e
, 
w1
, 
w2
);

480 i‡(--
°›⁄diff
 == 0)

481 
	`exô
(1);

486 
	}
}

489 
	$Sï¨©eCom∑ª
(
ªvî£d
, 
ßm∂e
, 
uöt32
 
row
,

490 * 
˝1
, * 
p2
)

492 
uöt32
 
≈ixñs
 = 
imagewidth
;

493 
pixñ
;

495 
˝1
 +
ßm∂e
;

496 
pixñ
 = 0; 
≈ixñs
-- > 0;Öixñ++, 
˝1
 +
ßm∂e•îpixñ
, 
p2
++) {

497 i‡(*
˝1
 !*
p2
) {

498 
	`¥ötf
("Scanline %lu,Öixel %lu, sample %ld: ",

499 (Ë
row
, (Ë
pixñ
, (Ë
ßm∂e
);

500 i‡(
ªvî£d
)

501 
	`¥ötf
("%02x %02x\n", *
p2
, *
˝1
);

503 
	`¥ötf
("%02x %02x\n", *
˝1
, *
p2
);

504 i‡(--
°›⁄diff
 == 0)

505 
	`exô
(1);

510 
	}
}

513 
	$checkTag
(
TIFF
* 
tif1
, TIFF* 
tif2
, 
èg
, * 
«me
, * 
p1
, * 
p2
)

516 i‡(
	`TIFFGëFõld
(
tif1
, 
èg
, 
p1
)) {

517 i‡(!
	`TIFFGëFõld
(
tif2
, 
èg
, 
p2
)) {

518 
	`¥ötf
("%sÅagáppears only in %s\n",

519 
«me
, 
	`TIFFFûeName
(
tif1
));

523 } i‡(
	`TIFFGëFõld
(
tif2
, 
èg
, 
p2
)) {

524 
	`¥ötf
("%†ègáµór†⁄ly i¿%s\n", 
«me
, 
	`TIFFFûeName
(
tif2
));

528 
	}
}

530 
	#CHECK
(
cmp
, 
fmt
) { \

531 
	`checkTag
(
tif1
,
tif2
,
èg
,
«me
,&
v1
,&
v2
)) { \

532 1: i‡(
cmp
) \

534 
	`¥ötf
(
fmt
, 
«me
, 
v1
, 
v2
); \

537 }

	)

540 
	$CheckSh‹tTag
(
TIFF
* 
tif1
, TIFF* 
tif2
, 
èg
, * 
«me
)

542 
uöt16
 
v1
, 
v2
;

543 
	`CHECK
(
v1
 =
v2
, "%s: %u %u\n");

544 
	}
}

547 
	$CheckSh‹t2Tag
(
TIFF
* 
tif1
, TIFF* 
tif2
, 
èg
, * 
«me
)

549 
uöt16
 
v11
, 
v12
, 
v21
, 
v22
;

551 i‡(
	`TIFFGëFõld
(
tif1
, 
èg
, &
v11
, &
v12
)) {

552 i‡(!
	`TIFFGëFõld
(
tif2
, 
èg
, &
v21
, &
v22
)) {

553 
	`¥ötf
("%sÅagáppears only in %s\n",

554 
«me
, 
	`TIFFFûeName
(
tif1
));

557 i‡(
v11
 =
v21
 && 
v12
 =
v22
)

559 
	`¥ötf
("%s: <%u,%u> <%u,%u>\n", 
«me
, 
v11
, 
v12
, 
v21
, 
v22
);

560 } i‡(
	`TIFFGëFõld
(
tif2
, 
èg
, &
v21
, &
v22
))

561 
	`¥ötf
("%†ègáµór†⁄ly i¿%s\n", 
«me
, 
	`TIFFFûeName
(
tif2
));

565 
	}
}

568 
	$CheckSh‹tAºayTag
(
TIFF
* 
tif1
, TIFF* 
tif2
, 
èg
, * 
«me
)

570 
uöt16
 
n1
, *
a1
;

571 
uöt16
 
n2
, *
a2
;

573 i‡(
	`TIFFGëFõld
(
tif1
, 
èg
, &
n1
, &
a1
)) {

574 i‡(!
	`TIFFGëFõld
(
tif2
, 
èg
, &
n2
, &
a2
)) {

575 
	`¥ötf
("%sÅagáppears only in %s\n",

576 
«me
, 
	`TIFFFûeName
(
tif1
));

579 i‡(
n1
 =
n2
) {

580 * 
£p
;

581 
uöt16
 
i
;

583 i‡(
	`memcmp
(
a1
, 
a2
, 
n1
 * (
uöt16
)) == 0)

585 
	`¥ötf
("%s: vÆuêmism©ch, <%u:", 
«me
, 
n1
);

586 
£p
 = "";

587 
i
 = 0; i < 
n1
; i++)

588 
	`¥ötf
("%s%u", 
£p
, 
a1
[
i
]), sep = ",";

589 
	`¥ötf
(">ánd <%u: ", 
n2
);

590 
£p
 = "";

591 
i
 = 0; i < 
n2
; i++)

592 
	`¥ötf
("%s%u", 
£p
, 
a2
[
i
]), sep = ",";

593 
	`¥ötf
(">\n");

595 
	`¥ötf
("%s: %u iãm†ö %s, %u iãm†ö %s", 
«me
,

596 
n1
, 
	`TIFFFûeName
(
tif1
),

597 
n2
, 
	`TIFFFûeName
(
tif2
)

599 } i‡(
	`TIFFGëFõld
(
tif2
, 
èg
, &
n2
, &
a2
))

600 
	`¥ötf
("%†ègáµór†⁄ly i¿%s\n", 
«me
, 
	`TIFFFûeName
(
tif2
));

604 
	}
}

607 
	$CheckL⁄gTag
(
TIFF
* 
tif1
, TIFF* 
tif2
, 
èg
, * 
«me
)

609 
uöt32
 
v1
, 
v2
;

610 
	`CHECK
(
v1
 =
v2
, "%s: %u %u\n");

611 
	}
}

614 
	$CheckFlﬂtTag
(
TIFF
* 
tif1
, TIFF* 
tif2
, 
èg
, * 
«me
)

616 
v1
, 
v2
;

617 
	`CHECK
(
v1
 =
v2
, "%s: %g %g\n");

618 
	}
}

621 
	$CheckSåögTag
(
TIFF
* 
tif1
, TIFF* 
tif2
, 
èg
, * 
«me
)

623 *
v1
, *
v2
;

624 
	`CHECK
(
	`°rcmp
(
v1
, 
v2
) == 0, "%s: \"%s\" \"%s\"\n");

625 
	}
}

628 
	$Àof
(c⁄° * 
«me
, 
uöt32
 
row
, 
s
)

631 
	`¥ötf
("%s: EOFáàsˇ∆öê%lu", 
«me
, ()
row
);

632 i‡(
s
 >= 0)

633 
	`¥ötf
(", sam∂ê%d", 
s
);

634 
	`¥ötf
("\n");

635 
	}
}

	@tools/tiffcp.c

41 
	~"tif_c⁄fig.h
"

43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

47 
	~<˘y≥.h
>

48 
	~<as£π.h
>

50 #ifde‡
HAVE_UNISTD_H


51 
	~<uni°d.h
>

54 
	~"tiffio.h
"

56 #i‚de‡
HAVE_GETOPT


57 
gë›t
(, **, *);

60 #i‡
deföed
(
VMS
)

61 
	#u∆ök
 
dñëe


	)

64 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

65 
	#°∫eq
(
a
,
b
,
n
Ë(
	`°∫cmp
◊,b,nË=0)

	)

67 
	#TRUE
 1

	)

68 
	#FALSE
 0

	)

70 
	gouâûed
 = -1;

71 
uöt32
 
	gtûewidth
;

72 
uöt32
 
	gtûñígth
;

74 
uöt16
 
	gc⁄fig
;

75 
uöt16
 
	gcom¥essi⁄
;

76 
uöt16
 
	g¥edi˘‹
;

77 
	g¥e£t
;

78 
uöt16
 
	gfûl‹dî
;

79 
uöt16
 
	g‹õ¡©i⁄
;

80 
uöt32
 
	grow•î°rù
;

81 
uöt32
 
	gg3›ts
;

82 
	gign‹e
 = 
FALSE
;

83 
uöt32
 
	gdefg3›ts
 = (uint32) -1;

84 
	gquÆôy
 = 75;

85 
	gj≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

86 
uöt16
 
	gdefcom¥essi⁄
 = (uint16) -1;

87 
uöt16
 
	gdeÂªdi˘‹
 = (uint16) -1;

88 
	gdeÂª£t
 = -1;

90 
tiff˝
(
TIFF
*, TIFF*);

91 
¥o˚ssCom¥essO±i⁄s
(*);

92 
ußge
();

94 
	gcomma
 = ',';

95 
TIFF
* 
	gbüs
 = 
NULL
;

96 
	g∑geNum
 = 0;

97 
	g∑geInSeq
 = 0;

99 
	$√xtSrcImage
 (
TIFF
 *
tif
, **
imageS≥c
)

106 i‡(**
imageS≥c
 =
comma
) {

107 *
°¨t
 = *
imageS≥c
 + 1;

108 
tdú_t
 
√xtImage
 = (tdú_t)
	`°πﬁ
(
°¨t
, 
imageS≥c
, 0);

109 i‡(
°¨t
 =*
imageS≥c
Ë
√xtImage
 = 
	`TIFFCuºítDúe˘‹y
 (
tif
);

110 i‡(**
imageS≥c
)

112 i‡(**
imageS≥c
 =
comma
) {

114 i‡((*
imageS≥c
)[1] ='\0'Ë*imageS≥¯
NULL
;

116 
	`Ârötf
 (
°dîr
,

118 
comma
, 
	`TIFFFûeName
 (
tif
));

119 
	`exô
 (-4);

122 i‡(
	`TIFFSëDúe˘‹y
 (
tif
, 
√xtImage
))  1;

123 
	`Ârötf
 (
°dîr
, "%s%c%dÇot found!\n",

124 
	`TIFFFûeName
(
tif
), 
comma
, (Ë
√xtImage
);

127 
	}
}

130 
TIFF
* 
	$›íSrcImage
 (**
imageS≥c
)

137 
TIFF
 *
tif
;

138 *
‚
 = *
imageS≥c
;

139 *
imageS≥c
 = 
	`°rchr
 (
‚
, 
comma
);

140 i‡(*
imageS≥c
) {

141 **
imageS≥c
 = '\0';

142 
tif
 = 
	`TIFFO≥n
 (
‚
, "r");

144 i‡(!(*
imageS≥c
)[1]Ë{*imageS≥¯
NULL
;  
tif
;}

145 i‡(
tif
) {

146 **
imageS≥c
 = 
comma
;

147 i‡(!
	`√xtSrcImage
(
tif
, 
imageS≥c
)) {

148 
	`TIFFClo£
 (
tif
);

149 
tif
 = 
NULL
;

153 
tif
 = 
	`TIFFO≥n
 (
‚
, "r");

154  
tif
;

155 
	}
}

158 
	$maö
(
¨gc
, * 
¨gv
[])

160 
uöt16
 
defc⁄fig
 = (uint16) -1;

161 
uöt16
 
deffûl‹dî
 = 0;

162 
uöt32
 
de·ûewidth
 = (uint32) -1;

163 
uöt32
 
de·ûñígth
 = (uint32) -1;

164 
uöt32
 
de‰ow•î°rù
 = (uint32) 0;

165 
uöt64
 
dúoff
 = 0;

166 
TIFF
* 
ö
;

167 
TIFF
* 
out
;

168 
mode
[10];

169 * 
mp
 = 
mode
;

170 
c
;

171 
›töd
;

172 * 
›èrg
;

174 *
mp
++ = 'w';

175 *
mp
 = '\0';

176 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, ",:b:c:f:l:o:z:p:r:w:aistBLMC8x")) != -1)

177 
c
) {

179 i‡(
›èrg
[0] !'='Ë
	`ußge
();

180 
comma
 = 
›èrg
[1];

183 i‡(
büs
) {

184 
	`Âuts
 ("O∆y 1 bü†imagêmay bê•ecifõd\n", 
°dîr
);

185 
	`exô
 (-2);

188 
uöt16
 
ßm∂es
 = (uint16) -1;

189 **
büsFn
 = &
›èrg
;

190 
büs
 = 
	`›íSrcImage
 (
büsFn
);

191 i‡(!
büs
Ë
	`exô
 (-5);

192 i‡(
	`TIFFIsTûed
 (
büs
)) {

193 
	`Âuts
 ("Bü†imagêmu° bê‹g™ized i¿°rùs\n", 
°dîr
);

194 
	`exô
 (-7);

196 
	`TIFFGëFõld
(
büs
, 
TIFFTAG_SAMPLESPERPIXEL
, &
ßm∂es
);

197 i‡(
ßm∂es
 != 1) {

198 
	`Âuts
 ("Bü†imagêmu° bêm⁄ochrome\n", 
°dîr
);

199 
	`exô
 (-7);

204 
mode
[0] = 'a';

207 i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

208 
	`ußge
();

211 i‡(
	`°ªq
(
›èrg
, "lsb2msb"))

212 
deffûl‹dî
 = 
FILLORDER_LSB2MSB
;

213 i‡(
	`°ªq
(
›èrg
, "msb2lsb"))

214 
deffûl‹dî
 = 
FILLORDER_MSB2LSB
;

216 
	`ußge
();

219 
ign‹e
 = 
TRUE
;

222 
ouâûed
 = 
TRUE
;

223 
de·ûñígth
 = 
	`©oi
(
›èrg
);

226 
dúoff
 = 
	`°πoul
(
›èrg
, 
NULL
, 0);

229 i‡(
	`°ªq
(
›èrg
, "separate"))

230 
defc⁄fig
 = 
PLANARCONFIG_SEPARATE
;

231 i‡(
	`°ªq
(
›èrg
, "contig"))

232 
defc⁄fig
 = 
PLANARCONFIG_CONTIG
;

234 
	`ußge
();

237 
de‰ow•î°rù
 = 
	`©ﬁ
(
›èrg
);

240 
ouâûed
 = 
FALSE
;

243 
ouâûed
 = 
TRUE
;

246 
ouâûed
 = 
TRUE
;

247 
de·ûewidth
 = 
	`©oi
(
›èrg
);

250 *
mp
++ = 'b'; *mp = '\0';

253 *
mp
++ = 'l'; *mp = '\0';

256 *
mp
++ = 'm'; *mp = '\0';

259 *
mp
++ = 'c'; *mp = '\0';

262 *
mp
++ = '8'; *mp = '\0';

265 
∑geInSeq
 = 1;

268 
	`ußge
();

271 i‡(
¨gc
 - 
›töd
 < 2)

272 
	`ußge
();

273 
out
 = 
	`TIFFO≥n
(
¨gv
[
¨gc
-1], 
mode
);

274 i‡(
out
 =
NULL
)

276 i‡((
¨gc
 - 
›töd
) == 2)

277 
∑geNum
 = -1;

278 ; 
›töd
 < 
¨gc
-1 ; optind++) {

279 *
imageCurs‹
 = 
¨gv
[
›töd
];

280 
ö
 = 
	`›íSrcImage
 (&
imageCurs‹
);

281 i‡(
ö
 =
NULL
) {

282 (Ë
	`TIFFClo£
(
out
);

285 i‡(
dúoff
 !0 && !
	`TIFFSëSubDúe˘‹y
(
ö
, diroff)) {

286 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

287 "Eº‹, sëtög subdúe˘‹yáà" 
TIFF_UINT64_FORMAT
, 
dúoff
);

288 (Ë
	`TIFFClo£
(
ö
);

289 (Ë
	`TIFFClo£
(
out
);

293 
c⁄fig
 = 
defc⁄fig
;

294 
com¥essi⁄
 = 
defcom¥essi⁄
;

295 
¥edi˘‹
 = 
deÂªdi˘‹
;

296 
¥e£t
 = 
deÂª£t
;

297 
fûl‹dî
 = 
deffûl‹dî
;

298 
row•î°rù
 = 
de‰ow•î°rù
;

299 
tûewidth
 = 
de·ûewidth
;

300 
tûñígth
 = 
de·ûñígth
;

301 
g3›ts
 = 
defg3›ts
;

302 i‡(!
	`tiff˝
(
ö
, 
out
Ë|| !
	`TIFFWrôeDúe˘‹y
(out)) {

303 (Ë
	`TIFFClo£
(
ö
);

304 (Ë
	`TIFFClo£
(
out
);

307 i‡(
imageCurs‹
) {

308 i‡(!
	`√xtSrcImage
(
ö
, &
imageCurs‹
)) ;

310 i‡(!
	`TIFFRódDúe˘‹y
(
ö
)) ;

312 (Ë
	`TIFFClo£
(
ö
);

315 (Ë
	`TIFFClo£
(
out
);

317 
	}
}

320 
	$¥o˚ssZIPO±i⁄s
(* 
˝
)

322 i‡–(
˝
 = 
	`°rchr
(cp, ':')) ) {

324 
˝
++;

325 i‡(
	`isdigô
(()*
˝
))

326 
deÂªdi˘‹
 = 
	`©oi
(
˝
);

327 i‡(*
˝
 == 'p')

328 
deÂª£t
 = 
	`©oi
(++
˝
);

330 
	`ußge
();

331 }  (
˝
 = 
	`°rchr
(cp, ':')) );

333 
	}
}

336 
	$¥o˚ssG3O±i⁄s
(* 
˝
)

338 if–(
˝
 = 
	`°rchr
(cp, ':')) ) {

339 i‡(
defg3›ts
 =(
uöt32
) -1)

340 
defg3›ts
 = 0;

342 
˝
++;

343 i‡(
	`°∫eq
(
˝
, "1d", 2))

344 
defg3›ts
 &~
GROUP3OPT_2DENCODING
;

345 i‡(
	`°∫eq
(
˝
, "2d", 2))

346 
defg3›ts
 |
GROUP3OPT_2DENCODING
;

347 i‡(
	`°∫eq
(
˝
, "fill", 4))

348 
defg3›ts
 |
GROUP3OPT_FILLBITS
;

350 
	`ußge
();

351 }  (
˝
 = 
	`°rchr
(cp, ':')) );

353 
	}
}

356 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

358 i‡(
	`°ªq
(
›t
, "none")) {

359 
defcom¥essi⁄
 = 
COMPRESSION_NONE
;

360 } i‡(
	`°ªq
(
›t
, "packbits")) {

361 
defcom¥essi⁄
 = 
COMPRESSION_PACKBITS
;

362 } i‡(
	`°∫eq
(
›t
, "jpeg", 4)) {

363 * 
˝
 = 
	`°rchr
(
›t
, ':');

365 
defcom¥essi⁄
 = 
COMPRESSION_JPEG
;

366  
˝
 )

368 i‡(
	`isdigô
(()
˝
[1]))

369 
quÆôy
 = 
	`©oi
(
˝
+1);

370 i‡(
˝
[1] == 'r' )

371 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

373 
	`ußge
();

375 
˝
 = 
	`°rchr
(cp+1,':');

377 } i‡(
	`°∫eq
(
›t
, "g3", 2)) {

378 
	`¥o˚ssG3O±i⁄s
(
›t
);

379 
defcom¥essi⁄
 = 
COMPRESSION_CCITTFAX3
;

380 } i‡(
	`°ªq
(
›t
, "g4")) {

381 
defcom¥essi⁄
 = 
COMPRESSION_CCITTFAX4
;

382 } i‡(
	`°∫eq
(
›t
, "lzw", 3)) {

383 * 
˝
 = 
	`°rchr
(
›t
, ':');

384 i‡(
˝
)

385 
deÂªdi˘‹
 = 
	`©oi
(
˝
+1);

386 
defcom¥essi⁄
 = 
COMPRESSION_LZW
;

387 } i‡(
	`°∫eq
(
›t
, "zip", 3)) {

388 
	`¥o˚ssZIPO±i⁄s
(
›t
);

389 
defcom¥essi⁄
 = 
COMPRESSION_ADOBE_DEFLATE
;

390 } i‡(
	`°∫eq
(
›t
, "lzma", 4)) {

391 
	`¥o˚ssZIPO±i⁄s
(
›t
);

392 
defcom¥essi⁄
 = 
COMPRESSION_LZMA
;

393 } i‡(
	`°∫eq
(
›t
, "jbig", 4)) {

394 
defcom¥essi⁄
 = 
COMPRESSION_JBIG
;

395 } i‡(
	`°∫eq
(
›t
, "sgilog", 6)) {

396 
defcom¥essi⁄
 = 
COMPRESSION_SGILOG
;

400 
	}
}

402 * 
	g°uff
[] = {

457 
NULL


461 
	$ußge
()

463 
buf
[
BUFSIZ
];

464 
i
;

466 
	`£tbuf
(
°dîr
, 
buf
);

467 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

468 
i
 = 0; 
°uff
[i] !
NULL
; i++)

469 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

470 
	`exô
(-1);

471 
	}
}

473 
	#C›yFõld
(
èg
, 
v
) \

474 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v
)Ë
	`TIFFSëFõld
(
out
,Åag, v)

	)

475 
	#C›yFõld2
(
èg
, 
v1
, 
v2
) \

476 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2)

	)

477 
	#C›yFõld3
(
èg
, 
v1
, 
v2
, 
v3
) \

478 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3)

	)

479 
	#C›yFõld4
(
èg
, 
v1
, 
v2
, 
v3
, 
v4
) \

480 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
, &
v4
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3, v4)

	)

483 
	$˝Tag
(
TIFF
* 
ö
, TIFF* 
out
, 
uöt16
 
èg
, uöt16 
cou¡
, 
TIFFD©aTy≥
 
ty≥
)

485 
ty≥
) {

486 
TIFF_SHORT
:

487 i‡(
cou¡
 == 1) {

488 
uöt16
 
sh‹tv
;

489 
	`C›yFõld
(
èg
, 
sh‹tv
);

490 } i‡(
cou¡
 == 2) {

491 
uöt16
 
sh‹tv1
, 
sh‹tv2
;

492 
	`C›yFõld2
(
èg
, 
sh‹tv1
, 
sh‹tv2
);

493 } i‡(
cou¡
 == 4) {

494 
uöt16
 *
å
, *
tg
, *
tb
, *
è
;

495 
	`C›yFõld4
(
èg
, 
å
, 
tg
, 
tb
, 
è
);

496 } i‡(
cou¡
 =(
uöt16
) -1) {

497 
uöt16
 
sh‹tv1
;

498 
uöt16
* 
sh‹èv
;

499 
	`C›yFõld2
(
èg
, 
sh‹tv1
, 
sh‹èv
);

502 
TIFF_LONG
:

503 { 
uöt32
 
l⁄gv
;

504 
	`C›yFõld
(
èg
, 
l⁄gv
);

507 
TIFF_RATIONAL
:

508 i‡(
cou¡
 == 1) {

509 
Êﬂtv
;

510 
	`C›yFõld
(
èg
, 
Êﬂtv
);

511 } i‡(
cou¡
 =(
uöt16
) -1) {

512 * 
Êﬂèv
;

513 
	`C›yFõld
(
èg
, 
Êﬂèv
);

516 
TIFF_ASCII
:

517 { * 
°rögv
;

518 
	`C›yFõld
(
èg
, 
°rögv
);

521 
TIFF_DOUBLE
:

522 i‡(
cou¡
 == 1) {

523 
doubÀv
;

524 
	`C›yFõld
(
èg
, 
doubÀv
);

525 } i‡(
cou¡
 =(
uöt16
) -1) {

526 * 
doubÀav
;

527 
	`C›yFõld
(
èg
, 
doubÀav
);

531 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

533 
èg
, 
ty≥
);

535 
	}
}

537 
	s˝Tag
 {

538 
uöt16
 
	mèg
;

539 
uöt16
 
	mcou¡
;

540 
TIFFD©aTy≥
 
	mty≥
;

541 } 
	gègs
[] = {

542 { 
TIFFTAG_SUBFILETYPE
, 1, 
TIFF_LONG
 },

543 { 
TIFFTAG_THRESHHOLDING
, 1, 
TIFF_SHORT
 },

544 { 
TIFFTAG_DOCUMENTNAME
, 1, 
TIFF_ASCII
 },

545 { 
TIFFTAG_IMAGEDESCRIPTION
, 1, 
TIFF_ASCII
 },

546 { 
TIFFTAG_MAKE
, 1, 
TIFF_ASCII
 },

547 { 
TIFFTAG_MODEL
, 1, 
TIFF_ASCII
 },

548 { 
TIFFTAG_MINSAMPLEVALUE
, 1, 
TIFF_SHORT
 },

549 { 
TIFFTAG_MAXSAMPLEVALUE
, 1, 
TIFF_SHORT
 },

550 { 
TIFFTAG_XRESOLUTION
, 1, 
TIFF_RATIONAL
 },

551 { 
TIFFTAG_YRESOLUTION
, 1, 
TIFF_RATIONAL
 },

552 { 
TIFFTAG_PAGENAME
, 1, 
TIFF_ASCII
 },

553 { 
TIFFTAG_XPOSITION
, 1, 
TIFF_RATIONAL
 },

554 { 
TIFFTAG_YPOSITION
, 1, 
TIFF_RATIONAL
 },

555 { 
TIFFTAG_RESOLUTIONUNIT
, 1, 
TIFF_SHORT
 },

556 { 
TIFFTAG_SOFTWARE
, 1, 
TIFF_ASCII
 },

557 { 
TIFFTAG_DATETIME
, 1, 
TIFF_ASCII
 },

558 { 
TIFFTAG_ARTIST
, 1, 
TIFF_ASCII
 },

559 { 
TIFFTAG_HOSTCOMPUTER
, 1, 
TIFF_ASCII
 },

560 { 
TIFFTAG_WHITEPOINT
, (
uöt16
Ë-1, 
TIFF_RATIONAL
 },

561 { 
TIFFTAG_PRIMARYCHROMATICITIES
,(
uöt16
Ë-1,
TIFF_RATIONAL
 },

562 { 
TIFFTAG_HALFTONEHINTS
, 2, 
TIFF_SHORT
 },

563 { 
TIFFTAG_INKSET
, 1, 
TIFF_SHORT
 },

564 { 
TIFFTAG_DOTRANGE
, 2, 
TIFF_SHORT
 },

565 { 
TIFFTAG_TARGETPRINTER
, 1, 
TIFF_ASCII
 },

566 { 
TIFFTAG_SAMPLEFORMAT
, 1, 
TIFF_SHORT
 },

567 { 
TIFFTAG_YCBCRCOEFFICIENTS
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

568 { 
TIFFTAG_YCBCRSUBSAMPLING
, 2, 
TIFF_SHORT
 },

569 { 
TIFFTAG_YCBCRPOSITIONING
, 1, 
TIFF_SHORT
 },

570 { 
TIFFTAG_REFERENCEBLACKWHITE
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

571 { 
TIFFTAG_EXTRASAMPLES
, (
uöt16
Ë-1, 
TIFF_SHORT
 },

572 { 
TIFFTAG_SMINSAMPLEVALUE
, 1, 
TIFF_DOUBLE
 },

573 { 
TIFFTAG_SMAXSAMPLEVALUE
, 1, 
TIFF_DOUBLE
 },

574 { 
TIFFTAG_STONITS
, 1, 
TIFF_DOUBLE
 },

576 
	#NTAGS
 ( (
ègs
Ë/  (ègs[0]))

	)

578 
	#C›yTag
(
èg
, 
cou¡
, 
ty≥
Ë
	`˝Tag
(
ö
, 
out
,Åag, cou¡,Åy≥)

	)

580 (*
	tc›yFunc
)

581 (
	tTIFF
* 
	tö
, TIFF* 
	tout
, 
	tuöt32
 
	tl
, uöt32 
	tw
, 
	tuöt16
 
	tßm∂e•îpixñ
);

582 
c›yFunc
 
	`pickC›yFunc
(
TIFF
*, TIFF*, 
uöt16
, uint16);

587 
	$tiff˝
(
TIFF
* 
ö
, TIFF* 
out
)

589 
uöt16
 
bô•îßm∂e
, 
ßm∂e•îpixñ
;

590 
uöt16
 
öput_com¥essi⁄
, 
öput_phŸomëric
;

591 
c›yFunc
 
cf
;

592 
uöt32
 
width
, 
Àngth
;

593 
˝Tag
* 
p
;

595 
	`C›yFõld
(
TIFFTAG_IMAGEWIDTH
, 
width
);

596 
	`C›yFõld
(
TIFFTAG_IMAGELENGTH
, 
Àngth
);

597 
	`C›yFõld
(
TIFFTAG_BITSPERSAMPLE
, 
bô•îßm∂e
);

598 
	`C›yFõld
(
TIFFTAG_SAMPLESPERPIXEL
, 
ßm∂e•îpixñ
);

599 i‡(
com¥essi⁄
 !(
uöt16
)-1)

600 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

602 
	`C›yFõld
(
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

603 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_COMPRESSION
, &
öput_com¥essi⁄
);

604 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_PHOTOMETRIC
, &
öput_phŸomëric
);

605 i‡(
öput_com¥essi⁄
 =
COMPRESSION_JPEG
) {

607 
	`TIFFSëFõld
(
ö
, 
TIFFTAG_JPEGCOLORMODE
, 
JPEGCOLORMODE_RGB
);

608 } i‡(
öput_phŸomëric
 =
PHOTOMETRIC_YCBCR
) {

610 
uöt16
 
subßm∂ögh‹
,
subßm∂ögvî
;

612 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_YCBCRSUBSAMPLING
,

613 &
subßm∂ögh‹
, &
subßm∂ögvî
);

614 i‡(
subßm∂ögh‹
!=1 || 
subßm∂ögvî
!=1) {

615 
	`Ârötf
(
°dîr
, "tiffcp: %s: Can't copy/convert subsampled image.\n",

616 
	`TIFFFûeName
(
ö
));

617  
FALSE
;

620 i‡(
com¥essi⁄
 =
COMPRESSION_JPEG
) {

621 i‡(
öput_phŸomëric
 =
PHOTOMETRIC_RGB
 &&

622 
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
)

623 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_YCBCR
);

625 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
öput_phŸomëric
);

627 i‡(
com¥essi⁄
 =
COMPRESSION_SGILOG


628 || 
com¥essi⁄
 =
COMPRESSION_SGILOG24
)

629 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
,

630 
ßm∂e•îpixñ
 == 1 ?

631 
PHOTOMETRIC_LOGL
 : 
PHOTOMETRIC_LOGLUV
);

633 
	`C›yTag
(
TIFFTAG_PHOTOMETRIC
, 1, 
TIFF_SHORT
);

634 i‡(
fûl‹dî
 != 0)

635 
	`TIFFSëFõld
(
out
, 
TIFFTAG_FILLORDER
, 
fûl‹dî
);

637 
	`C›yTag
(
TIFFTAG_FILLORDER
, 1, 
TIFF_SHORT
);

641 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_ORIENTATION
, &
‹õ¡©i⁄
);

642 
‹õ¡©i⁄
) {

643 
ORIENTATION_BOTRIGHT
:

644 
ORIENTATION_RIGHTBOT
:

645 
	`TIFFW¨nög
(
	`TIFFFûeName
(
ö
), "using bottom-left orientation");

646 
‹õ¡©i⁄
 = 
ORIENTATION_BOTLEFT
;

648 
ORIENTATION_LEFTBOT
:

649 
ORIENTATION_BOTLEFT
:

651 
ORIENTATION_TOPRIGHT
:

652 
ORIENTATION_RIGHTTOP
:

654 
	`TIFFW¨nög
(
	`TIFFFûeName
(
ö
), "usingÅop-left orientation");

655 
‹õ¡©i⁄
 = 
ORIENTATION_TOPLEFT
;

657 
ORIENTATION_LEFTTOP
:

658 
ORIENTATION_TOPLEFT
:

661 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
‹õ¡©i⁄
);

667 i‡(
ouâûed
 == -1)

668 
ouâûed
 = 
	`TIFFIsTûed
(
ö
);

669 i‡(
ouâûed
) {

676 i‡(
tûewidth
 =(
uöt32
) -1)

677 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILEWIDTH
, &
tûewidth
);

678 i‡(
tûñígth
 =(
uöt32
) -1)

679 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILELENGTH
, &
tûñígth
);

680 
	`TIFFDeÁu…TûeSize
(
out
, &
tûewidth
, &
tûñígth
);

681 
	`TIFFSëFõld
(
out
, 
TIFFTAG_TILEWIDTH
, 
tûewidth
);

682 
	`TIFFSëFõld
(
out
, 
TIFFTAG_TILELENGTH
, 
tûñígth
);

689 i‡(
row•î°rù
 =(
uöt32
) 0) {

690 i‡(!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_ROWSPERSTRIP
,

691 &
row•î°rù
)) {

692 
row•î°rù
 =

693 
	`TIFFDeÁu…SåùSize
(
out
, 
row•î°rù
);

695 i‡(
row•î°rù
 > 
Àngth
 &&Ñow•î°rù !(
uöt32
)-1)

696 
row•î°rù
 = 
Àngth
;

698 i‡(
row•î°rù
 =(
uöt32
) -1)

699 
row•î°rù
 = 
Àngth
;

700 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

702 i‡(
c⁄fig
 !(
uöt16
) -1)

703 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
c⁄fig
);

705 
	`C›yFõld
(
TIFFTAG_PLANARCONFIG
, 
c⁄fig
);

706 i‡(
ßm∂e•îpixñ
 <= 4)

707 
	`C›yTag
(
TIFFTAG_TRANSFERFUNCTION
, 4, 
TIFF_SHORT
);

708 
	`C›yTag
(
TIFFTAG_COLORMAP
, 4, 
TIFF_SHORT
);

710 
com¥essi⁄
) {

711 
COMPRESSION_JPEG
:

712 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGQUALITY
, 
quÆôy
);

713 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGCOLORMODE
, 
j≥gcﬁ‹mode
);

715 
COMPRESSION_JBIG
:

716 
	`C›yTag
(
TIFFTAG_FAXRECVPARAMS
, 1, 
TIFF_LONG
);

717 
	`C›yTag
(
TIFFTAG_FAXRECVTIME
, 1, 
TIFF_LONG
);

718 
	`C›yTag
(
TIFFTAG_FAXSUBADDRESS
, 1, 
TIFF_ASCII
);

719 
	`C›yTag
(
TIFFTAG_FAXDCS
, 1, 
TIFF_ASCII
);

721 
COMPRESSION_LZW
:

722 
COMPRESSION_ADOBE_DEFLATE
:

723 
COMPRESSION_DEFLATE
:

724 
COMPRESSION_LZMA
:

725 i‡(
¥edi˘‹
 !(
uöt16
)-1)

726 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

728 
	`C›yFõld
(
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

729 i‡(
¥e£t
 != -1) {

730 i‡(
com¥essi⁄
 =
COMPRESSION_ADOBE_DEFLATE


731 || 
com¥essi⁄
 =
COMPRESSION_DEFLATE
)

732 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ZIPQUALITY
, 
¥e£t
);

733 i‡(
com¥essi⁄
 =
COMPRESSION_LZMA
)

734 
	`TIFFSëFõld
(
out
, 
TIFFTAG_LZMAPRESET
, 
¥e£t
);

737 
COMPRESSION_CCITTFAX3
:

738 
COMPRESSION_CCITTFAX4
:

739 i‡(
com¥essi⁄
 =
COMPRESSION_CCITTFAX3
) {

740 i‡(
g3›ts
 !(
uöt32
) -1)

741 
	`TIFFSëFõld
(
out
, 
TIFFTAG_GROUP3OPTIONS
,

742 
g3›ts
);

744 
	`C›yFõld
(
TIFFTAG_GROUP3OPTIONS
, 
g3›ts
);

746 
	`C›yTag
(
TIFFTAG_GROUP4OPTIONS
, 1, 
TIFF_LONG
);

747 
	`C›yTag
(
TIFFTAG_BADFAXLINES
, 1, 
TIFF_LONG
);

748 
	`C›yTag
(
TIFFTAG_CLEANFAXDATA
, 1, 
TIFF_LONG
);

749 
	`C›yTag
(
TIFFTAG_CONSECUTIVEBADFAXLINES
, 1, 
TIFF_LONG
);

750 
	`C›yTag
(
TIFFTAG_FAXRECVPARAMS
, 1, 
TIFF_LONG
);

751 
	`C›yTag
(
TIFFTAG_FAXRECVTIME
, 1, 
TIFF_LONG
);

752 
	`C›yTag
(
TIFFTAG_FAXSUBADDRESS
, 1, 
TIFF_ASCII
);

756 
uöt32
 
Àn32
;

757 ** 
d©a
;

758 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_ICCPROFILE
, &
Àn32
, &
d©a
))

759 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ICCPROFILE
, 
Àn32
, 
d©a
);

762 
uöt16
 
nöks
;

763 c⁄° * 
ök«mes
;

764 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_NUMBEROFINKS
, &
nöks
)) {

765 
	`TIFFSëFõld
(
out
, 
TIFFTAG_NUMBEROFINKS
, 
nöks
);

766 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_INKNAMES
, &
ök«mes
)) {

767 
ök«me¶í
 = 
	`°æí
(
ök«mes
) + 1;

768 c⁄° * 
˝
 = 
ök«mes
;

769 
nöks
 > 1) {

770 
˝
 = 
	`°rchr
(cp, '\0');

771 
˝
++;

772 
ök«me¶í
 +(
	`°æí
(
˝
) + 1);

773 
nöks
--;

775 
	`TIFFSëFõld
(
out
, 
TIFFTAG_INKNAMES
, 
ök«me¶í
, 
ök«mes
);

780 
pg0
, 
pg1
;

782 i‡(
∑geInSeq
 == 1) {

783 i‡(
∑geNum
 < 0) {

784 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PAGENUMBER
, &
pg0
, &
pg1
))

785 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PAGENUMBER
, 
pg0
, 
pg1
);

787 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PAGENUMBER
, 
∑geNum
++, 0);

790 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PAGENUMBER
, &
pg0
, &
pg1
)) {

791 i‡(
∑geNum
 < 0)

792 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PAGENUMBER
, 
pg0
, 
pg1
);

794 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PAGENUMBER
, 
∑geNum
++, 0);

799 
p
 = 
ègs
;Ö < &ègs[
NTAGS
];Ö++)

800 
	`C›yTag
(
p
->
èg
,Ö->
cou¡
,Ö->
ty≥
);

802 
cf
 = 
	`pickC›yFunc
(
ö
, 
out
, 
bô•îßm∂e
, 
ßm∂e•îpixñ
);

803  (
cf
 ? (*cf)(
ö
, 
out
, 
Àngth
, 
width
, 
ßm∂e•îpixñ
Ë: 
FALSE
);

804 
	}
}

809 
	#DECLARE˝Func
(
x
) \

810 
	`x
(
TIFF
* 
ö
, TIFF* 
out
, \

811 
uöt32
 
imagñígth
, uöt32 
imagewidth
, 
tßm∂e_t
 
•p
)

	)

813 
	#DECLAREªadFunc
(
x
) \

814 
	`x
(
TIFF
* 
ö
, \

815 
uöt8
* 
buf
, 
uöt32
 
imagñígth
, uöt32 
imagewidth
, 
tßm∂e_t
 
•p
)

	)

816 (*
	tªadFunc
)(
	tTIFF
*, 
	tuöt8
*, 
	tuöt32
, uöt32, 
	ttßm∂e_t
);

818 
	#DECLAREwrôeFunc
(
x
) \

819 
	`x
(
TIFF
* 
out
, \

820 
uöt8
* 
buf
, 
uöt32
 
imagñígth
, uöt32 
imagewidth
, 
tßm∂e_t
 
•p
)

	)

821 (*
	twrôeFunc
)(
	tTIFF
*, 
	tuöt8
*, 
	tuöt32
, uöt32, 
	ttßm∂e_t
);

826 
	$DECLARE˝Func
(
˝C⁄tig2C⁄tigByRow
)

828 
tsize_t
 
sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(
ö
);

829 
td©a_t
 
buf
;

830 
uöt32
 
row
;

832 
buf
 = 
	`_TIFFmÆloc
(
sˇ∆öesize
);

833 i‡(!
buf
)

835 
	`_TIFFmem£t
(
buf
, 0, 
sˇ∆öesize
);

836 (Ë
imagewidth
; (Ë
•p
;

837 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

838 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
buf
, 
row
, 0Ë< 0 && !
ign‹e
) {

839 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

841 (Ë
row
);

842 
bad
;

844 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
buf
, 
row
, 0) < 0) {

845 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
),

847 (Ë
row
);

848 
bad
;

851 
	`_TIFF‰ì
(
buf
);

853 
bad
:

854 
	`_TIFF‰ì
(
buf
);

856 
	}
}

859 
	tbüsFn
 (*
	timage
, *
	tbüs
, 
	tuöt32
 
	tpixñs
);

861 
	#subåa˘
(
bôs
) \

862 
subåa˘
##
	`bôs
 (*
i
, *
b
, 
uöt32
 
pixñs
)\

864 
uöt
##
bôs
 *
image
 = 
i
;\

865 
uöt
##
bôs
 *
büs
 = 
b
;\

866 
pixñs
--) {\

867 *
image
 = *imagê> *
büs
 ? *image-*bias : 0;\

868 
image
++, 
büs
++; \

870 }

	)

872 
	$subåa˘
(8)

873 
	$subåa˘
(16)

874 
	$subåa˘
(32)

876 
büsFn
 *
	$löeSubåa˘Fn
 (
bôs
)

878 
bôs
) {

879 8:  
subåa˘8
;

880 16:  
subåa˘16
;

881 32:  
subåa˘32
;

883  
NULL
;

884 
	}
}

889 
	$DECLARE˝Func
(
˝Bü£dC⁄tig2C⁄tig
)

891 i‡(
•p
 == 1) {

892 
tsize_t
 
büsSize
 = 
	`TIFFSˇ∆öeSize
(
büs
);

893 
tsize_t
 
bufSize
 = 
	`TIFFSˇ∆öeSize
(
ö
);

894 
td©a_t
 
buf
, 
büsBuf
;

895 
uöt32
 
büsWidth
 = 0, 
büsLígth
 = 0;

896 
	`TIFFGëFõld
(
büs
, 
TIFFTAG_IMAGEWIDTH
, &
büsWidth
);

897 
	`TIFFGëFõld
(
büs
, 
TIFFTAG_IMAGELENGTH
, &
büsLígth
);

898 i‡(
büsSize
 =
bufSize
 &&

899 
imagñígth
 =
büsLígth
 && 
imagewidth
 =
büsWidth
) {

900 
uöt16
 
ßm∂eBôs
 = 0;

901 
büsFn
 *
subåa˘Löe
;

902 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_BITSPERSAMPLE
, &
ßm∂eBôs
);

903 
subåa˘Löe
 = 
	`löeSubåa˘Fn
 (
ßm∂eBôs
);

904 i‡(
subåa˘Löe
) {

905 
uöt32
 
row
;

906 
buf
 = 
	`_TIFFmÆloc
(
bufSize
);

907 
büsBuf
 = 
	`_TIFFmÆloc
(
bufSize
);

908 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

909 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
buf
, 
row
, 0) < 0

910 && !
ign‹e
) {

911 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

913 (Ë
row
);

914 
bad
;

916 i‡(
	`TIFFRódSˇ∆öe
(
büs
, 
büsBuf
, 
row
, 0) < 0

917 && !
ign‹e
) {

918 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

920 (Ë
row
);

921 
bad
;

923 
	`subåa˘Löe
 (
buf
, 
büsBuf
, 
imagewidth
);

924 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
buf
, 
row
, 0) < 0) {

925 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
),

927 (Ë
row
);

928 
bad
;

932 
	`_TIFF‰ì
(
buf
);

933 
	`_TIFF‰ì
(
büsBuf
);

934 
	`TIFFSëDúe˘‹y
(
büs
,

935 
	`TIFFCuºítDúe˘‹y
(
büs
));

937 
bad
:

938 
	`_TIFF‰ì
(
buf
);

939 
	`_TIFF‰ì
(
büsBuf
);

942 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

944 
ßm∂eBôs
);

948 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

950 
	`TIFFFûeName
(
büs
), 
	`TIFFCuºítDúe˘‹y
(bias),

951 
	`TIFFFûeName
(
ö
), 
	`TIFFCuºítDúe˘‹y
(in));

954 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

956 
	`TIFFFûeName
(
ö
), 
	`TIFFCuºítDúe˘‹y
(in));

960 
	}
}

966 
	$DECLARE˝Func
(
˝DecodedSåùs
)

968 
tsize_t
 
°rùsize
 = 
	`TIFFSåùSize
(
ö
);

969 
td©a_t
 
buf
 = 
	`_TIFFmÆloc
(
°rùsize
);

971 (Ë
imagewidth
; (Ë
•p
;

972 i‡(
buf
) {

973 
t°rù_t
 
s
, 
ns
 = 
	`TIFFNumbîOfSåùs
(
ö
);

974 
uöt32
 
row
 = 0;

975 
	`_TIFFmem£t
(
buf
, 0, 
°rùsize
);

976 
s
 = 0; s < 
ns
; s++) {

977 
tsize_t
 
cc
 = (
row
 + 
row•î°rù
 > 
imagñígth
) ?

978 
	`TIFFVSåùSize
(
ö
, 
imagñígth
 - 
row
Ë: 
°rùsize
;

979 i‡(
	`TIFFRódEncodedSåù
(
ö
, 
s
, 
buf
, 
cc
) < 0

980 && !
ign‹e
) {

981 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

983 (Ë
s
);

984 
bad
;

986 i‡(
	`TIFFWrôeEncodedSåù
(
out
, 
s
, 
buf
, 
cc
) < 0) {

987 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
),

989 (Ë
s
);

990 
bad
;

992 
row
 +
row•î°rù
;

994 
	`_TIFF‰ì
(
buf
);

997 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

999 "tÿªad såùs", (Ë
°rùsize
);

1003 
bad
:

1004 
	`_TIFF‰ì
(
buf
);

1006 
	}
}

1011 
	$DECLARE˝Func
(
˝Sï¨©e2Sï¨©eByRow
)

1013 
tsize_t
 
sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(
ö
);

1014 
td©a_t
 
buf
;

1015 
uöt32
 
row
;

1016 
tßm∂e_t
 
s
;

1018 (Ë
imagewidth
;

1019 
buf
 = 
	`_TIFFmÆloc
(
sˇ∆öesize
);

1020 i‡(!
buf
)

1022 
	`_TIFFmem£t
(
buf
, 0, 
sˇ∆öesize
);

1023 
s
 = 0; s < 
•p
; s++) {

1024 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

1025 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
buf
, 
row
, 
s
Ë< 0 && !
ign‹e
) {

1026 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

1028 (Ë
row
);

1029 
bad
;

1031 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
buf
, 
row
, 
s
) < 0) {

1032 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
),

1034 (Ë
row
);

1035 
bad
;

1039 
	`_TIFF‰ì
(
buf
);

1041 
bad
:

1042 
	`_TIFF‰ì
(
buf
);

1044 
	}
}

1049 
	$DECLARE˝Func
(
˝C⁄tig2Sï¨©eByRow
)

1051 
tsize_t
 
sˇ∆öesizeö
 = 
	`TIFFSˇ∆öeSize
(
ö
);

1052 
tsize_t
 
sˇ∆öesizeout
 = 
	`TIFFSˇ∆öeSize
(
out
);

1053 
td©a_t
 
öbuf
;

1054 
td©a_t
 
outbuf
;

1055 
uöt8
 *
öp
, *
ouç
;

1056 
uöt32
 
n
;

1057 
uöt32
 
row
;

1058 
tßm∂e_t
 
s
;

1060 
öbuf
 = 
	`_TIFFmÆloc
(
sˇ∆öesizeö
);

1061 
outbuf
 = 
	`_TIFFmÆloc
(
sˇ∆öesizeout
);

1062 i‡(!
öbuf
 || !
outbuf
)

1064 
	`_TIFFmem£t
(
öbuf
, 0, 
sˇ∆öesizeö
);

1065 
	`_TIFFmem£t
(
outbuf
, 0, 
sˇ∆öesizeout
);

1067 
s
 = 0; s < 
•p
; s++) {

1068 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

1069 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
öbuf
, 
row
, 0) < 0

1070 && !
ign‹e
) {

1071 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

1073 (Ë
row
);

1074 
bad
;

1076 
öp
 = ((
uöt8
*)
öbuf
Ë+ 
s
;

1077 
ouç
 = (
uöt8
*)
outbuf
;

1078 
n
 = 
imagewidth
;Ç-- > 0;) {

1079 *
ouç
++ = *
öp
;

1080 
öp
 +
•p
;

1082 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
outbuf
, 
row
, 
s
) < 0) {

1083 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
),

1085 (Ë
row
);

1086 
bad
;

1090 i‡(
öbuf
Ë
	`_TIFF‰ì
(inbuf);

1091 i‡(
outbuf
Ë
	`_TIFF‰ì
(outbuf);

1093 
bad
:

1094 i‡(
öbuf
Ë
	`_TIFF‰ì
(inbuf);

1095 i‡(
outbuf
Ë
	`_TIFF‰ì
(outbuf);

1097 
	}
}

1102 
	$DECLARE˝Func
(
˝Sï¨©e2C⁄tigByRow
)

1104 
tsize_t
 
sˇ∆öesizeö
 = 
	`TIFFSˇ∆öeSize
(
ö
);

1105 
tsize_t
 
sˇ∆öesizeout
 = 
	`TIFFSˇ∆öeSize
(
out
);

1106 
td©a_t
 
öbuf
;

1107 
td©a_t
 
outbuf
;

1108 
uöt8
 *
öp
, *
ouç
;

1109 
uöt32
 
n
;

1110 
uöt32
 
row
;

1111 
tßm∂e_t
 
s
;

1113 
öbuf
 = 
	`_TIFFmÆloc
(
sˇ∆öesizeö
);

1114 
outbuf
 = 
	`_TIFFmÆloc
(
sˇ∆öesizeout
);

1115 i‡(!
öbuf
 || !
outbuf
)

1117 
	`_TIFFmem£t
(
öbuf
, 0, 
sˇ∆öesizeö
);

1118 
	`_TIFFmem£t
(
outbuf
, 0, 
sˇ∆öesizeout
);

1119 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

1121 
s
 = 0; s < 
•p
; s++) {

1122 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
öbuf
, 
row
, 
s
) < 0

1123 && !
ign‹e
) {

1124 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

1126 (Ë
row
);

1127 
bad
;

1129 
öp
 = (
uöt8
*)
öbuf
;

1130 
ouç
 = ((
uöt8
*)
outbuf
Ë+ 
s
;

1131 
n
 = 
imagewidth
;Ç-- > 0;) {

1132 *
ouç
 = *
öp
++;

1133 
ouç
 +
•p
;

1136 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
outbuf
, 
row
, 0) < 0) {

1137 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
),

1139 (Ë
row
);

1140 
bad
;

1143 i‡(
öbuf
Ë
	`_TIFF‰ì
(inbuf);

1144 i‡(
outbuf
Ë
	`_TIFF‰ì
(outbuf);

1146 
bad
:

1147 i‡(
öbuf
Ë
	`_TIFF‰ì
(inbuf);

1148 i‡(
outbuf
Ë
	`_TIFF‰ì
(outbuf);

1150 
	}
}

1153 
	$˝SåùToTûe
(
uöt8
* 
out
, uöt8* 
ö
,

1154 
uöt32
 
rows
, uöt32 
cﬁs
, 
outskew
, 
öskew
)

1156 
rows
-- > 0) {

1157 
uöt32
 
j
 = 
cﬁs
;

1158 
j
-- > 0)

1159 *
out
++ = *
ö
++;

1160 
out
 +
outskew
;

1161 
ö
 +
öskew
;

1163 
	}
}

1166 
	$˝C⁄tigBufToSï¨©eBuf
(
uöt8
* 
out
, uöt8* 
ö
,

1167 
uöt32
 
rows
, uöt32 
cﬁs
, 
outskew
, 
öskew
, 
tßm∂e_t
 
•p
,

1168 
byãs_≥r_ßm∂e
 )

1170 
rows
-- > 0) {

1171 
uöt32
 
j
 = 
cﬁs
;

1172 
j
-- > 0)

1174 
n
 = 
byãs_≥r_ßm∂e
;

1176  
n
-- ) {

1177 *
out
++ = *
ö
++;

1179 
ö
 +(
•p
-1Ë* 
byãs_≥r_ßm∂e
;

1181 
out
 +
outskew
;

1182 
ö
 +
öskew
;

1184 
	}
}

1187 
	$˝Sï¨©eBufToC⁄tigBuf
(
uöt8
* 
out
, uöt8* 
ö
,

1188 
uöt32
 
rows
, uöt32 
cﬁs
, 
outskew
, 
öskew
, 
tßm∂e_t
 
•p
,

1189 
byãs_≥r_ßm∂e
)

1191 
rows
-- > 0) {

1192 
uöt32
 
j
 = 
cﬁs
;

1193 
j
-- > 0) {

1194 
n
 = 
byãs_≥r_ßm∂e
;

1196  
n
-- ) {

1197 *
out
++ = *
ö
++;

1199 
out
 +(
•p
-1)*
byãs_≥r_ßm∂e
;

1201 
out
 +
outskew
;

1202 
ö
 +
öskew
;

1204 
	}
}

1207 
	$˝Image
(
TIFF
* 
ö
, TIFF* 
out
, 
ªadFunc
 
fö
, 
wrôeFunc
 
fout
,

1208 
uöt32
 
imagñígth
, uöt32 
imagewidth
, 
tßm∂e_t
 
•p
)

1210 
°©us
 = 0;

1211 
td©a_t
 
buf
 = 
NULL
;

1212 
tsize_t
 
sˇ∆öesize
 = 
	`TIFFRa°îSˇ∆öeSize
(
ö
);

1213 
tsize_t
 
byãs
 = 
sˇ∆öesize
 * (tsize_t)
imagñígth
;

1217 i‡(
sˇ∆öesize


1218 && 
imagñígth


1219 && 
byãs
 / (
tsize_t
)
imagñígth
 =
sˇ∆öesize
) {

1220 
buf
 = 
	`_TIFFmÆloc
(
byãs
);

1221 i‡(
buf
) {

1222 i‡((*
fö
)(
ö
, (
uöt8
*)
buf
, 
imagñígth
,

1223 
imagewidth
, 
•p
)) {

1224 
°©us
 = (*
fout
)(
out
, (
uöt8
*)
buf
,

1225 
imagñígth
, 
imagewidth
, 
•p
);

1227 
	`_TIFF‰ì
(
buf
);

1229 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

1233 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
), "Error,Ço space for image buffer");

1236  
°©us
;

1237 
	}
}

1239 
	$DECLAREªadFunc
(
ªadC⁄tigSåùsI¡oBuf„r
)

1241 
tsize_t
 
sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(
ö
);

1242 
uöt8
* 
buÂ
 = 
buf
;

1243 
uöt32
 
row
;

1245 (Ë
imagewidth
; (Ë
•p
;

1246 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

1247 i‡(
	`TIFFRódSˇ∆öe
(
ö
, (
td©a_t
Ë
buÂ
, 
row
, 0) < 0

1248 && !
ign‹e
) {

1249 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

1251 (Ë
row
);

1254 
buÂ
 +
sˇ∆öesize
;

1258 
	}
}

1260 
	$DECLAREªadFunc
(
ªadSï¨©eSåùsI¡oBuf„r
)

1262 
°©us
 = 1;

1263 
tsize_t
 
sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(
ö
);

1264 
td©a_t
 
sˇ∆öe
;

1265 i‡(!
sˇ∆öesize
)

1268 
sˇ∆öe
 = 
	`_TIFFmÆloc
(
sˇ∆öesize
);

1269 i‡(!
sˇ∆öe
)

1271 
	`_TIFFmem£t
(
sˇ∆öe
, 0, 
sˇ∆öesize
);

1272 (Ë
imagewidth
;

1273 i‡(
sˇ∆öe
) {

1274 
uöt8
* 
buÂ
 = (uöt8*Ë
buf
;

1275 
uöt32
 
row
;

1276 
tßm∂e_t
 
s
;

1277 
row
 = 0;Ñow < 
imagñígth
;Ñow++) {

1279 
s
 = 0; s < 
•p
; s++) {

1280 
uöt8
* 
bp
 = 
buÂ
 + 
s
;

1281 
tsize_t
 
n
 = 
sˇ∆öesize
;

1282 
uöt8
* 
sbuf
 = 
sˇ∆öe
;

1284 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
sˇ∆öe
, 
row
, 
s
) < 0

1285 && !
ign‹e
) {

1286 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

1288 (Ë
row
);

1289 
°©us
 = 0;

1290 
d⁄e
;

1292 
n
-- > 0)

1293 *
bp
 = *
sbuf
++, b∞+
•p
;

1295 
buÂ
 +
sˇ∆öesize
 * 
•p
;

1299 
d⁄e
:

1300 
	`_TIFF‰ì
(
sˇ∆öe
);

1301  
°©us
;

1302 
	}
}

1304 
	$DECLAREªadFunc
(
ªadC⁄tigTûesI¡oBuf„r
)

1306 
°©us
 = 1;

1307 
tsize_t
 
tûesize
 = 
	`TIFFTûeSize
(
ö
);

1308 
td©a_t
 
tûebuf
;

1309 
uöt32
 
imagew
 = 
	`TIFFSˇ∆öeSize
(
ö
);

1310 
uöt32
 
tûew
 = 
	`TIFFTûeRowSize
(
ö
);

1311 
iskew
 = 
imagew
 - 
tûew
;

1312 
uöt8
* 
buÂ
 = (uöt8*Ë
buf
;

1313 
uöt32
 
tw
, 
é
;

1314 
uöt32
 
row
;

1316 (Ë
•p
;

1317 
tûebuf
 = 
	`_TIFFmÆloc
(
tûesize
);

1318 i‡(
tûebuf
 == 0)

1320 
	`_TIFFmem£t
(
tûebuf
, 0, 
tûesize
);

1321 (Ë
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILEWIDTH
, &
tw
);

1322 (Ë
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILELENGTH
, &
é
);

1324 
row
 = 0;Ñow < 
imagñígth
;Ñow +
é
) {

1325 
uöt32
 
ƒow
 = (
row
+
é
 > 
imagñígth
) ? imagelength-row :Ål;

1326 
uöt32
 
cﬁb
 = 0;

1327 
uöt32
 
cﬁ
;

1329 
cﬁ
 = 0; cﬁ < 
imagewidth
; cﬁ +
tw
) {

1330 i‡(
	`TIFFRódTûe
(
ö
, 
tûebuf
, 
cﬁ
, 
row
, 0, 0) < 0

1331 && !
ign‹e
) {

1332 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

1334 (Ë
cﬁ
,

1335 (Ë
row
);

1336 
°©us
 = 0;

1337 
d⁄e
;

1339 i‡(
cﬁb
 + 
tûew
 > 
imagew
) {

1340 
uöt32
 
width
 = 
imagew
 - 
cﬁb
;

1341 
uöt32
 
oskew
 = 
tûew
 - 
width
;

1342 
	`˝SåùToTûe
(
buÂ
 + 
cﬁb
,

1343 
tûebuf
, 
ƒow
, 
width
,

1344 
oskew
 + 
iskew
, oskew );

1346 
	`˝SåùToTûe
(
buÂ
 + 
cﬁb
,

1347 
tûebuf
, 
ƒow
, 
tûew
,

1348 
iskew
, 0);

1349 
cﬁb
 +
tûew
;

1351 
buÂ
 +
imagew
 * 
ƒow
;

1353 
d⁄e
:

1354 
	`_TIFF‰ì
(
tûebuf
);

1355  
°©us
;

1356 
	}
}

1358 
	$DECLAREªadFunc
(
ªadSï¨©eTûesI¡oBuf„r
)

1360 
°©us
 = 1;

1361 
uöt32
 
imagew
 = 
	`TIFFRa°îSˇ∆öeSize
(
ö
);

1362 
uöt32
 
tûew
 = 
	`TIFFTûeRowSize
(
ö
);

1363 
iskew
 = 
imagew
 - 
tûew
*
•p
;

1364 
tsize_t
 
tûesize
 = 
	`TIFFTûeSize
(
ö
);

1365 
td©a_t
 
tûebuf
;

1366 
uöt8
* 
buÂ
 = (uöt8*Ë
buf
;

1367 
uöt32
 
tw
, 
é
;

1368 
uöt32
 
row
;

1369 
uöt16
 
bps
, 
byãs_≥r_ßm∂e
;

1371 
tûebuf
 = 
	`_TIFFmÆloc
(
tûesize
);

1372 i‡(
tûebuf
 == 0)

1374 
	`_TIFFmem£t
(
tûebuf
, 0, 
tûesize
);

1375 (Ë
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILEWIDTH
, &
tw
);

1376 (Ë
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILELENGTH
, &
é
);

1377 (Ë
	`TIFFGëFõld
(
ö
, 
TIFFTAG_BITSPERSAMPLE
, &
bps
);

1378 
	`as£π
–
bps
 % 8 == 0 );

1379 
byãs_≥r_ßm∂e
 = 
bps
/8;

1381 
row
 = 0;Ñow < 
imagñígth
;Ñow +
é
) {

1382 
uöt32
 
ƒow
 = (
row
+
é
 > 
imagñígth
) ? imagelength-row :Ål;

1383 
uöt32
 
cﬁb
 = 0;

1384 
uöt32
 
cﬁ
;

1386 
cﬁ
 = 0; cﬁ < 
imagewidth
; cﬁ +
tw
) {

1387 
tßm∂e_t
 
s
;

1389 
s
 = 0; s < 
•p
; s++) {

1390 i‡(
	`TIFFRódTûe
(
ö
, 
tûebuf
, 
cﬁ
, 
row
, 0, 
s
) < 0

1391 && !
ign‹e
) {

1392 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

1395 (Ë
cﬁ
,

1396 (Ë
row
,

1397 (Ë
s
);

1398 
°©us
 = 0;

1399 
d⁄e
;

1405 i‡(
cﬁb
 + 
tûew
*
•p
 > 
imagew
) {

1406 
uöt32
 
width
 = 
imagew
 - 
cﬁb
;

1407 
oskew
 = 
tûew
*
•p
 - 
width
;

1408 
	`˝Sï¨©eBufToC⁄tigBuf
(

1409 
buÂ
+
cﬁb
+
s
*
byãs_≥r_ßm∂e
,

1410 
tûebuf
, 
ƒow
,

1411 
width
/(
•p
*
byãs_≥r_ßm∂e
),

1412 
oskew
 + 
iskew
,

1413 
oskew
/
•p
, spp,

1414 
byãs_≥r_ßm∂e
);

1416 
	`˝Sï¨©eBufToC⁄tigBuf
(

1417 
buÂ
+
cﬁb
+
s
*
byãs_≥r_ßm∂e
,

1418 
tûebuf
, 
ƒow
, 
tw
,

1419 
iskew
, 0, 
•p
,

1420 
byãs_≥r_ßm∂e
);

1422 
cﬁb
 +
tûew
*
•p
;

1424 
buÂ
 +
imagew
 * 
ƒow
;

1426 
d⁄e
:

1427 
	`_TIFF‰ì
(
tûebuf
);

1428  
°©us
;

1429 
	}
}

1431 
	$DECLAREwrôeFunc
(
wrôeBuf„rToC⁄tigSåùs
)

1433 
uöt32
 
row
, 
row•î°rù
;

1434 
t°rù_t
 
°rù
 = 0;

1436 (Ë
imagewidth
; (Ë
•p
;

1437 (Ë
	`TIFFGëFõldDeÁu…ed
(
out
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

1438 
row
 = 0;Ñow < 
imagñígth
;Ñow +
row•î°rù
) {

1439 
uöt32
 
ƒows
 = (
row
+
row•î°rù
 > 
imagñígth
) ?

1440 
imagñígth
-
row
 : 
row•î°rù
;

1441 
tsize_t
 
°rùsize
 = 
	`TIFFVSåùSize
(
out
, 
ƒows
);

1442 i‡(
	`TIFFWrôeEncodedSåù
(
out
, 
°rù
++, 
buf
, 
°rùsize
) < 0) {

1443 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
),

1444 "Eº‹, c™'àwrôê°rù %u", 
°rù
 - 1);

1447 
buf
 +
°rùsize
;

1450 
	}
}

1452 
	$DECLAREwrôeFunc
(
wrôeBuf„rToSï¨©eSåùs
)

1454 
uöt32
 
rowsize
 = 
imagewidth
 * 
•p
;

1455 
uöt32
 
row•î°rù
;

1456 
tsize_t
 
°rùsize
 = 
	`TIFFSåùSize
(
out
);

1457 
td©a_t
 
obuf
;

1458 
t°rù_t
 
°rù
 = 0;

1459 
tßm∂e_t
 
s
;

1461 
obuf
 = 
	`_TIFFmÆloc
(
°rùsize
);

1462 i‡(
obuf
 =
NULL
)

1464 
	`_TIFFmem£t
(
obuf
, 0, 
°rùsize
);

1465 (Ë
	`TIFFGëFõldDeÁu…ed
(
out
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

1466 
s
 = 0; s < 
•p
; s++) {

1467 
uöt32
 
row
;

1468 
row
 = 0;Ñow < 
imagñígth
;Ñow +
row•î°rù
) {

1469 
uöt32
 
ƒows
 = (
row
+
row•î°rù
 > 
imagñígth
) ?

1470 
imagñígth
-
row
 : 
row•î°rù
;

1471 
tsize_t
 
°rùsize
 = 
	`TIFFVSåùSize
(
out
, 
ƒows
);

1473 
	`˝C⁄tigBufToSï¨©eBuf
(

1474 
obuf
, (
uöt8
*Ë
buf
 + 
row
*
rowsize
 + 
s
,

1475 
ƒows
, 
imagewidth
, 0, 0, 
•p
, 1);

1476 i‡(
	`TIFFWrôeEncodedSåù
(
out
, 
°rù
++, 
obuf
, 
°rùsize
) < 0) {

1477 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
),

1479 
°rù
 - 1);

1480 
	`_TIFF‰ì
(
obuf
);

1485 
	`_TIFF‰ì
(
obuf
);

1488 
	}
}

1490 
	$DECLAREwrôeFunc
(
wrôeBuf„rToC⁄tigTûes
)

1492 
uöt32
 
imagew
 = 
	`TIFFSˇ∆öeSize
(
out
);

1493 
uöt32
 
tûew
 = 
	`TIFFTûeRowSize
(
out
);

1494 
iskew
 = 
imagew
 - 
tûew
;

1495 
tsize_t
 
tûesize
 = 
	`TIFFTûeSize
(
out
);

1496 
td©a_t
 
obuf
;

1497 
uöt8
* 
buÂ
 = (uöt8*Ë
buf
;

1498 
uöt32
 
é
, 
tw
;

1499 
uöt32
 
row
;

1501 (Ë
•p
;

1503 
obuf
 = 
	`_TIFFmÆloc
(
	`TIFFTûeSize
(
out
));

1504 i‡(
obuf
 =
NULL
)

1506 
	`_TIFFmem£t
(
obuf
, 0, 
tûesize
);

1507 (Ë
	`TIFFGëFõld
(
out
, 
TIFFTAG_TILELENGTH
, &
é
);

1508 (Ë
	`TIFFGëFõld
(
out
, 
TIFFTAG_TILEWIDTH
, &
tw
);

1509 
row
 = 0;Ñow < 
imagñígth
;Ñow +
tûñígth
) {

1510 
uöt32
 
ƒow
 = (
row
+
é
 > 
imagñígth
) ? imagelength-row :Ål;

1511 
uöt32
 
cﬁb
 = 0;

1512 
uöt32
 
cﬁ
;

1514 
cﬁ
 = 0; cﬁ < 
imagewidth
; cﬁ +
tw
) {

1519 i‡(
cﬁb
 + 
tûew
 > 
imagew
) {

1520 
uöt32
 
width
 = 
imagew
 - 
cﬁb
;

1521 
oskew
 = 
tûew
 - 
width
;

1522 
	`˝SåùToTûe
(
obuf
, 
buÂ
 + 
cﬁb
, 
ƒow
, 
width
,

1523 
oskew
, oskew + 
iskew
);

1525 
	`˝SåùToTûe
(
obuf
, 
buÂ
 + 
cﬁb
, 
ƒow
, 
tûew
,

1526 0, 
iskew
);

1527 i‡(
	`TIFFWrôeTûe
(
out
, 
obuf
, 
cﬁ
, 
row
, 0, 0) < 0) {

1528 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
),

1530 (Ë
cﬁ
,

1531 (Ë
row
);

1532 
	`_TIFF‰ì
(
obuf
);

1535 
cﬁb
 +
tûew
;

1537 
buÂ
 +
ƒow
 * 
imagew
;

1539 
	`_TIFF‰ì
(
obuf
);

1541 
	}
}

1543 
	$DECLAREwrôeFunc
(
wrôeBuf„rToSï¨©eTûes
)

1545 
uöt32
 
imagew
 = 
	`TIFFSˇ∆öeSize
(
out
);

1546 
tsize_t
 
tûew
 = 
	`TIFFTûeRowSize
(
out
);

1547 
uöt32
 
iimagew
 = 
	`TIFFRa°îSˇ∆öeSize
(
out
);

1548 
iskew
 = 
iimagew
 - 
tûew
*
•p
;

1549 
tsize_t
 
tûesize
 = 
	`TIFFTûeSize
(
out
);

1550 
td©a_t
 
obuf
;

1551 
uöt8
* 
buÂ
 = (uöt8*Ë
buf
;

1552 
uöt32
 
é
, 
tw
;

1553 
uöt32
 
row
;

1554 
uöt16
 
bps
, 
byãs_≥r_ßm∂e
;

1556 
obuf
 = 
	`_TIFFmÆloc
(
	`TIFFTûeSize
(
out
));

1557 i‡(
obuf
 =
NULL
)

1559 
	`_TIFFmem£t
(
obuf
, 0, 
tûesize
);

1560 (Ë
	`TIFFGëFõld
(
out
, 
TIFFTAG_TILELENGTH
, &
é
);

1561 (Ë
	`TIFFGëFõld
(
out
, 
TIFFTAG_TILEWIDTH
, &
tw
);

1562 (Ë
	`TIFFGëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, &
bps
);

1563 
	`as£π
–
bps
 % 8 == 0 );

1564 
byãs_≥r_ßm∂e
 = 
bps
/8;

1566 
row
 = 0;Ñow < 
imagñígth
;Ñow +
é
) {

1567 
uöt32
 
ƒow
 = (
row
+
é
 > 
imagñígth
) ? imagelength-row :Ål;

1568 
uöt32
 
cﬁb
 = 0;

1569 
uöt32
 
cﬁ
;

1571 
cﬁ
 = 0; cﬁ < 
imagewidth
; cﬁ +
tw
) {

1572 
tßm∂e_t
 
s
;

1573 
s
 = 0; s < 
•p
; s++) {

1578 i‡(
cﬁb
 + 
tûew
 > 
imagew
) {

1579 
uöt32
 
width
 = (
imagew
 - 
cﬁb
);

1580 
oskew
 = 
tûew
 - 
width
;

1582 
	`˝C⁄tigBufToSï¨©eBuf
(
obuf
,

1583 
buÂ
 + (
cﬁb
*
•p
Ë+ 
s
,

1584 
ƒow
, 
width
/
byãs_≥r_ßm∂e
,

1585 
oskew
, (oskew*
•p
)+
iskew
, spp,

1586 
byãs_≥r_ßm∂e
);

1588 
	`˝C⁄tigBufToSï¨©eBuf
(
obuf
,

1589 
buÂ
 + (
cﬁb
*
•p
Ë+ 
s
,

1590 
ƒow
, 
tûewidth
,

1591 0, 
iskew
, 
•p
,

1592 
byãs_≥r_ßm∂e
);

1593 i‡(
	`TIFFWrôeTûe
(
out
, 
obuf
, 
cﬁ
, 
row
, 0, 
s
) < 0) {

1594 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
),

1597 (Ë
cﬁ
,

1598 (Ë
row
,

1599 (Ë
s
);

1600 
	`_TIFF‰ì
(
obuf
);

1604 
cﬁb
 +
tûew
;

1606 
buÂ
 +
ƒow
 * 
iimagew
;

1608 
	`_TIFF‰ì
(
obuf
);

1610 
	}
}

1615 
	$DECLARE˝Func
(
˝C⁄tigSåùs2C⁄tigTûes
)

1617  
	`˝Image
(
ö
, 
out
,

1618 
ªadC⁄tigSåùsI¡oBuf„r
,

1619 
wrôeBuf„rToC⁄tigTûes
,

1620 
imagñígth
, 
imagewidth
, 
•p
);

1621 
	}
}

1626 
	$DECLARE˝Func
(
˝C⁄tigSåùs2Sï¨©eTûes
)

1628  
	`˝Image
(
ö
, 
out
,

1629 
ªadC⁄tigSåùsI¡oBuf„r
,

1630 
wrôeBuf„rToSï¨©eTûes
,

1631 
imagñígth
, 
imagewidth
, 
•p
);

1632 
	}
}

1637 
	$DECLARE˝Func
(
˝Sï¨©eSåùs2C⁄tigTûes
)

1639  
	`˝Image
(
ö
, 
out
,

1640 
ªadSï¨©eSåùsI¡oBuf„r
,

1641 
wrôeBuf„rToC⁄tigTûes
,

1642 
imagñígth
, 
imagewidth
, 
•p
);

1643 
	}
}

1648 
	$DECLARE˝Func
(
˝Sï¨©eSåùs2Sï¨©eTûes
)

1650  
	`˝Image
(
ö
, 
out
,

1651 
ªadSï¨©eSåùsI¡oBuf„r
,

1652 
wrôeBuf„rToSï¨©eTûes
,

1653 
imagñígth
, 
imagewidth
, 
•p
);

1654 
	}
}

1659 
	$DECLARE˝Func
(
˝C⁄tigTûes2C⁄tigTûes
)

1661  
	`˝Image
(
ö
, 
out
,

1662 
ªadC⁄tigTûesI¡oBuf„r
,

1663 
wrôeBuf„rToC⁄tigTûes
,

1664 
imagñígth
, 
imagewidth
, 
•p
);

1665 
	}
}

1670 
	$DECLARE˝Func
(
˝C⁄tigTûes2Sï¨©eTûes
)

1672  
	`˝Image
(
ö
, 
out
,

1673 
ªadC⁄tigTûesI¡oBuf„r
,

1674 
wrôeBuf„rToSï¨©eTûes
,

1675 
imagñígth
, 
imagewidth
, 
•p
);

1676 
	}
}

1681 
	$DECLARE˝Func
(
˝Sï¨©eTûes2C⁄tigTûes
)

1683  
	`˝Image
(
ö
, 
out
,

1684 
ªadSï¨©eTûesI¡oBuf„r
,

1685 
wrôeBuf„rToC⁄tigTûes
,

1686 
imagñígth
, 
imagewidth
, 
•p
);

1687 
	}
}

1692 
	$DECLARE˝Func
(
˝Sï¨©eTûes2Sï¨©eTûes
)

1694  
	`˝Image
(
ö
, 
out
,

1695 
ªadSï¨©eTûesI¡oBuf„r
,

1696 
wrôeBuf„rToSï¨©eTûes
,

1697 
imagñígth
, 
imagewidth
, 
•p
);

1698 
	}
}

1703 
	$DECLARE˝Func
(
˝C⁄tigTûes2C⁄tigSåùs
)

1705  
	`˝Image
(
ö
, 
out
,

1706 
ªadC⁄tigTûesI¡oBuf„r
,

1707 
wrôeBuf„rToC⁄tigSåùs
,

1708 
imagñígth
, 
imagewidth
, 
•p
);

1709 
	}
}

1714 
	$DECLARE˝Func
(
˝C⁄tigTûes2Sï¨©eSåùs
)

1716  
	`˝Image
(
ö
, 
out
,

1717 
ªadC⁄tigTûesI¡oBuf„r
,

1718 
wrôeBuf„rToSï¨©eSåùs
,

1719 
imagñígth
, 
imagewidth
, 
•p
);

1720 
	}
}

1725 
	$DECLARE˝Func
(
˝Sï¨©eTûes2C⁄tigSåùs
)

1727  
	`˝Image
(
ö
, 
out
,

1728 
ªadSï¨©eTûesI¡oBuf„r
,

1729 
wrôeBuf„rToC⁄tigSåùs
,

1730 
imagñígth
, 
imagewidth
, 
•p
);

1731 
	}
}

1736 
	$DECLARE˝Func
(
˝Sï¨©eTûes2Sï¨©eSåùs
)

1738  
	`˝Image
(
ö
, 
out
,

1739 
ªadSï¨©eTûesI¡oBuf„r
,

1740 
wrôeBuf„rToSï¨©eSåùs
,

1741 
imagñígth
, 
imagewidth
, 
•p
);

1742 
	}
}

1747 
c›yFunc


1748 
	$pickC›yFunc
(
TIFF
* 
ö
, TIFF* 
out
, 
uöt16
 
bô•îßm∂e
, uöt16 
ßm∂e•îpixñ
)

1750 
uöt16
 
sh‹tv
;

1751 
uöt32
 
w
, 
l
, 
tw
, 
é
;

1752 
bychunk
;

1754 (Ë
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PLANARCONFIG
, &
sh‹tv
);

1755 i‡(
sh‹tv
 !
c⁄fig
 && 
bô•îßm∂e
 !8 && 
ßm∂e•îpixñ
 > 1) {

1756 
	`Ârötf
(
°dîr
,

1758 
	`TIFFFûeName
(
ö
));

1759  (
NULL
);

1761 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGEWIDTH
, &
w
);

1762 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
l
);

1763 i‡(!(
	`TIFFIsTûed
(
out
Ë|| TIFFIsTûed(
ö
))) {

1764 
uöt32
 
úps
 = (uint32) -1L;

1765 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_ROWSPERSTRIP
, &
úps
);

1767 
bychunk
 = !
büs
 && (
row•î°rù
 =
úps
);

1769 i‡(
büs
) {

1770 
	`Ârötf
(
°dîr
,

1772 
	`TIFFFûeName
(
ö
));

1773  (
NULL
);

1775 i‡(
	`TIFFIsTûed
(
out
)) {

1776 i‡(!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILEWIDTH
, &
tw
))

1777 
tw
 = 
w
;

1778 i‡(!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILELENGTH
, &
é
))

1779 
é
 = 
l
;

1780 
bychunk
 = (
tw
 =
tûewidth
 && 
é
 =
tûñígth
);

1782 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILEWIDTH
, &
tw
);

1783 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILELENGTH
, &
é
);

1784 
bychunk
 = (
tw
 =
w
 && 
é
 =
row•î°rù
);

1787 
	#T
 1

	)

1788 
	#F
 0

	)

1789 
	#∑ck
(
a
,
b
,
c
,
d
,
e
Ë(()((◊)<<11)|((b)<<3)|((c)<<2)|((d)<<1)|”)))

	)

1790 
	`∑ck
(
sh‹tv
,
c⁄fig
,
	`TIFFIsTûed
(
ö
),TIFFIsTûed(
out
),
bychunk
)) {

1792 
	`∑ck
(
PLANARCONFIG_CONTIG
, PLANARCONFIG_CONTIG, 
F
,
T
,F):

1793 
	`∑ck
(
PLANARCONFIG_CONTIG
, PLANARCONFIG_CONTIG, 
F
,
T
,T):

1794  
˝C⁄tigSåùs2C⁄tigTûes
;

1795 
	`∑ck
(
PLANARCONFIG_CONTIG
, 
PLANARCONFIG_SEPARATE
, 
F
,
T
,F):

1796 
	`∑ck
(
PLANARCONFIG_CONTIG
, 
PLANARCONFIG_SEPARATE
, 
F
,
T
,T):

1797  
˝C⁄tigSåùs2Sï¨©eTûes
;

1798 
	`∑ck
(
PLANARCONFIG_SEPARATE
, 
PLANARCONFIG_CONTIG
, 
F
,
T
,F):

1799 
	`∑ck
(
PLANARCONFIG_SEPARATE
, 
PLANARCONFIG_CONTIG
, 
F
,
T
,T):

1800  
˝Sï¨©eSåùs2C⁄tigTûes
;

1801 
	`∑ck
(
PLANARCONFIG_SEPARATE
, PLANARCONFIG_SEPARATE, 
F
,
T
,F):

1802 
	`∑ck
(
PLANARCONFIG_SEPARATE
, PLANARCONFIG_SEPARATE, 
F
,
T
,T):

1803  
˝Sï¨©eSåùs2Sï¨©eTûes
;

1805 
	`∑ck
(
PLANARCONFIG_CONTIG
, PLANARCONFIG_CONTIG, 
T
,T,
F
):

1806 
	`∑ck
(
PLANARCONFIG_CONTIG
, PLANARCONFIG_CONTIG, 
T
,T,T):

1807  
˝C⁄tigTûes2C⁄tigTûes
;

1808 
	`∑ck
(
PLANARCONFIG_CONTIG
, 
PLANARCONFIG_SEPARATE
, 
T
,T,
F
):

1809 
	`∑ck
(
PLANARCONFIG_CONTIG
, 
PLANARCONFIG_SEPARATE
, 
T
,T,T):

1810  
˝C⁄tigTûes2Sï¨©eTûes
;

1811 
	`∑ck
(
PLANARCONFIG_SEPARATE
, 
PLANARCONFIG_CONTIG
, 
T
,T,
F
):

1812 
	`∑ck
(
PLANARCONFIG_SEPARATE
, 
PLANARCONFIG_CONTIG
, 
T
,T,T):

1813  
˝Sï¨©eTûes2C⁄tigTûes
;

1814 
	`∑ck
(
PLANARCONFIG_SEPARATE
, PLANARCONFIG_SEPARATE, 
T
,T,
F
):

1815 
	`∑ck
(
PLANARCONFIG_SEPARATE
, PLANARCONFIG_SEPARATE, 
T
,T,T):

1816  
˝Sï¨©eTûes2Sï¨©eTûes
;

1818 
	`∑ck
(
PLANARCONFIG_CONTIG
, PLANARCONFIG_CONTIG, 
T
,
F
,F):

1819 
	`∑ck
(
PLANARCONFIG_CONTIG
, PLANARCONFIG_CONTIG, 
T
,
F
,T):

1820  
˝C⁄tigTûes2C⁄tigSåùs
;

1821 
	`∑ck
(
PLANARCONFIG_CONTIG
, 
PLANARCONFIG_SEPARATE
, 
T
,
F
,F):

1822 
	`∑ck
(
PLANARCONFIG_CONTIG
, 
PLANARCONFIG_SEPARATE
, 
T
,
F
,T):

1823  
˝C⁄tigTûes2Sï¨©eSåùs
;

1824 
	`∑ck
(
PLANARCONFIG_SEPARATE
, 
PLANARCONFIG_CONTIG
, 
T
,
F
,F):

1825 
	`∑ck
(
PLANARCONFIG_SEPARATE
, 
PLANARCONFIG_CONTIG
, 
T
,
F
,T):

1826  
˝Sï¨©eTûes2C⁄tigSåùs
;

1827 
	`∑ck
(
PLANARCONFIG_SEPARATE
, PLANARCONFIG_SEPARATE, 
T
,
F
,F):

1828 
	`∑ck
(
PLANARCONFIG_SEPARATE
, PLANARCONFIG_SEPARATE, 
T
,
F
,T):

1829  
˝Sï¨©eTûes2Sï¨©eSåùs
;

1831 
	`∑ck
(
PLANARCONFIG_CONTIG
, PLANARCONFIG_CONTIG, 
F
,F,F):

1832  
büs
 ? 
˝Bü£dC⁄tig2C⁄tig
 : 
˝C⁄tig2C⁄tigByRow
;

1833 
	`∑ck
(
PLANARCONFIG_CONTIG
, PLANARCONFIG_CONTIG, 
F
,F,
T
):

1834  
˝DecodedSåùs
;

1835 
	`∑ck
(
PLANARCONFIG_CONTIG
, 
PLANARCONFIG_SEPARATE
, 
F
,F,F):

1836 
	`∑ck
(
PLANARCONFIG_CONTIG
, 
PLANARCONFIG_SEPARATE
, 
F
,F,
T
):

1837  
˝C⁄tig2Sï¨©eByRow
;

1838 
	`∑ck
(
PLANARCONFIG_SEPARATE
, 
PLANARCONFIG_CONTIG
, 
F
,F,F):

1839 
	`∑ck
(
PLANARCONFIG_SEPARATE
, 
PLANARCONFIG_CONTIG
, 
F
,F,
T
):

1840  
˝Sï¨©e2C⁄tigByRow
;

1841 
	`∑ck
(
PLANARCONFIG_SEPARATE
, PLANARCONFIG_SEPARATE, 
F
,F,F):

1842 
	`∑ck
(
PLANARCONFIG_SEPARATE
, PLANARCONFIG_SEPARATE, 
F
,F,
T
):

1843  
˝Sï¨©e2Sï¨©eByRow
;

1845 #unde‡
∑ck


1846 #unde‡
F


1847 #unde‡
T


1848 
	`Ârötf
(
°dîr
, "tiffcp: %s: Don't know howÅo copy/convert image.\n",

1849 
	`TIFFFûeName
(
ö
));

1850  (
NULL
);

1851 
	}
}

	@tools/tiffcrop.c

110 
	gtiff¸›_vîsi⁄_id
[] = "2.4";

111 
	gtiff¸›_ªv_d©e
[] = "12-13-2010";

113 
	~"tif_c⁄fig.h
"

114 
	~"tiffi›.h
"

116 
	~<°dio.h
>

117 
	~<°dlib.h
>

118 
	~<°rög.h
>

119 
	~<m©h.h
>

120 
	~<˘y≥.h
>

121 
	~<limôs.h
>

122 
	~<sys/°©.h
>

123 
	~<as£π.h
>

125 #ifde‡
HAVE_UNISTD_H


126 
	~<uni°d.h
>

129 #ifde‡
HAVE_STDINT_H


130 
	~<°döt.h
>

133 #i‚de‡
HAVE_GETOPT


134 
gë›t
(, **, *);

137 #ifde‡
NEED_LIBPORT


138 
	~"libp‹t.h
"

141 
	~"tiffio.h
"

143 #i‡
deföed
(
VMS
)

144 
	#u∆ök
 
dñëe


	)

147 #i‚de‡
PATH_MAX


148 
	#PATH_MAX
 1024

	)

151 #i‚de‡
°ªq


152 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
(◊),(b)Ë=0)

	)

154 
	#°∫eq
(
a
,
b
,
n
Ë(
	`°∫cmp
(◊),(b),“)Ë=0)

	)

156 
	#TRUE
 1

	)

157 
	#FALSE
 0

	)

159 #i‚de‡
TIFFhowm™y


160 
	#TIFFhowm™y
(
x
, 
y
Ë((((
uöt32
)(x))+(((uöt32)(y))-1))/((uöt32)(y)))

	)

161 
	#TIFFhowm™y8
(
x
Ë(((x)&0x07)?((
uöt32
)(x)>>3)+1:(uöt32)(x)>>3)

	)

169 
	#EDGE_TOP
 1

	)

170 
	#EDGE_LEFT
 2

	)

171 
	#EDGE_BOTTOM
 3

	)

172 
	#EDGE_RIGHT
 4

	)

173 
	#EDGE_CENTER
 5

	)

175 
	#MIRROR_HORIZ
 1

	)

176 
	#MIRROR_VERT
 2

	)

177 
	#MIRROR_BOTH
 3

	)

178 
	#ROTATECW_90
 8

	)

179 
	#ROTATECW_180
 16

	)

180 
	#ROTATECW_270
 32

	)

181 
	#ROTATE_ANY
 
ROTATECW_90
 || 
ROTATECW_180
 || 
ROTATECW_270


	)

183 
	#CROP_NONE
 0

	)

184 
	#CROP_MARGINS
 1

	)

185 
	#CROP_WIDTH
 2

	)

186 
	#CROP_LENGTH
 4

	)

187 
	#CROP_ZONES
 8

	)

188 
	#CROP_REGIONS
 16

	)

189 
	#CROP_ROTATE
 32

	)

190 
	#CROP_MIRROR
 64

	)

191 
	#CROP_INVERT
 128

	)

194 
	#ONE_FILE_COMPOSITE
 0

	)

195 
	#ONE_FILE_SEPARATED
 1

	)

196 
	#FILE_PER_IMAGE_COMPOSITE
 2

	)

197 
	#FILE_PER_IMAGE_SEPARATED
 3

	)

198 
	#FILE_PER_SELECTION
 4

	)

200 
	#COMPOSITE_IMAGES
 0

	)

201 
	#SEPARATED_IMAGES
 1

	)

203 
	#STRIP
 1

	)

204 
	#TILE
 2

	)

206 
	#MAX_REGIONS
 8

	)

207 
	#MAX_OUTBUFFS
 8

	)

208 
	#MAX_SECTIONS
 32

	)

209 
	#MAX_IMAGES
 2048

	)

210 
	#MAX_SAMPLES
 8

	)

211 
	#MAX_BITS_PER_SAMPLE
 64

	)

212 
	#MAX_EXPORT_PAGES
 999999

	)

214 
	#DUMP_NONE
 0

	)

215 
	#DUMP_TEXT
 1

	)

216 
	#DUMP_RAW
 2

	)

219 
	soff£t
 {

220 
uöt32
 
	mtm¨gö
;

221 
uöt32
 
	mlm¨gö
;

222 
uöt32
 
	mbm¨gö
;

223 
uöt32
 
	mrm¨gö
;

224 
uöt32
 
	m¸›_width
;

225 
uöt32
 
	m¸›_Àngth
;

226 
uöt32
 
	m°¨tx
;

227 
uöt32
 
	mídx
;

228 
uöt32
 
	m°¨ty
;

229 
uöt32
 
	mídy
;

238 
	sbufföfo
 {

239 
uöt32
 
	msize
;

240 *
	mbuf„r
;

243 
	sz⁄e
 {

244 
	mposôi⁄
;

245 
	mtŸÆ
;

248 
	s∑ge£g
 {

249 
uöt32
 
	mx1
;

250 
uöt32
 
	mx2
;

251 
uöt32
 
	my1
;

252 
uöt32
 
	my2
;

253 
	mposôi⁄
;

254 
	mtŸÆ
;

255 
uöt32
 
	mbuffsize
;

258 
	sco‹d∑ús
 {

259 
	mX1
;

260 
	mX2
;

261 
	mY1
;

262 
	mY2
;

265 
	sªgi⁄
 {

266 
uöt32
 
	mx1
;

267 
uöt32
 
	mx2
;

268 
uöt32
 
	my1
;

269 
uöt32
 
	my2
;

270 
uöt32
 
	mwidth
;

271 
uöt32
 
	mÀngth
;

272 
uöt32
 
	mbuffsize
;

273 *
	mbufÂå
;

280 
	s¸›_mask
 {

281 
	mwidth
;

282 
	mÀngth
;

283 
	mm¨gös
[4];

284 
	mxªs
;

285 
	myªs
;

286 
uöt32
 
	mcomböed_width
;

287 
uöt32
 
	mcomböed_Àngth
;

288 
uöt32
 
	mbuf·ŸÆ
;

289 
uöt16
 
	mimg_mode
;

290 
uöt16
 
	mexp_mode
;

291 
uöt16
 
	m¸›_mode
;

292 
uöt16
 
	mªs_unô
;

293 
uöt16
 
	medge_ªf
;

294 
uöt16
 
	mrŸ©i⁄
;

295 
uöt16
 
	mmúr‹
;

296 
uöt16
 
	mövît
;

297 
uöt16
 
	mphŸomëric
;

298 
uöt16
 
	m£À˘i⁄s
;

299 
uöt16
 
	mªgi⁄s
;

300 
ªgi⁄
 
	mªgi⁄li°
[
MAX_REGIONS
];

301 
uöt16
 
	mz⁄es
;

302 
z⁄e
 
	mz⁄ñi°
[
MAX_REGIONS
];

303 
co‹d∑ús
 
	mc‹√rs
[
MAX_REGIONS
];

306 
	#MAX_PAPERNAMES
 49

	)

307 
	#MAX_PAPERNAME_LENGTH
 15

	)

308 
	#DEFAULT_RESUNIT
 
RESUNIT_INCH


	)

309 
	#DEFAULT_PAGE_HEIGHT
 14.0

	)

310 
	#DEFAULT_PAGE_WIDTH
 8.5

	)

311 
	#DEFAULT_RESOLUTION
 300

	)

312 
	#DEFAULT_PAPER_SIZE
 "ÀgÆ"

	)

314 
	#ORIENTATION_NONE
 0

	)

315 
	#ORIENTATION_PORTRAIT
 1

	)

316 
	#ORIENTATION_LANDSCAPE
 2

	)

317 
	#ORIENTATION_SEASCAPE
 4

	)

318 
	#ORIENTATION_AUTO
 16

	)

320 
	#PAGE_MODE_NONE
 0

	)

321 
	#PAGE_MODE_RESOLUTION
 1

	)

322 
	#PAGE_MODE_PAPERSIZE
 2

	)

323 
	#PAGE_MODE_MARGINS
 4

	)

324 
	#PAGE_MODE_ROWSCOLS
 8

	)

326 
	#INVERT_DATA_ONLY
 10

	)

327 
	#INVERT_DATA_AND_TAG
 11

	)

329 
	s∑≥rdef
 {

330 
	m«me
[
MAX_PAPERNAME_LENGTH
];

331 
	mwidth
;

332 
	mÀngth
;

333 
	ma§©io
;

339 
∑≥rdef
 
	gP≠îTabÀ
[
MAX_PAPERNAMES
] = {

392 
	simage_d©a
 {

393 
	mxªs
;

394 
	myªs
;

395 
uöt32
 
	mwidth
;

396 
uöt32
 
	mÀngth
;

397 
uöt16
 
	mªs_unô
;

398 
uöt16
 
	mbps
;

399 
uöt16
 
	m•p
;

400 
uöt16
 
	m∂™¨
;

401 
uöt16
 
	mphŸomëric
;

402 
uöt16
 
	m‹õ¡©i⁄
;

403 
uöt16
 
	mcom¥essi⁄
;

404 
uöt16
 
	madju°míts
;

408 
	s∑gedef
 {

409 
	m«me
[16];

410 
	mwidth
;

411 
	mÀngth
;

412 
	mhm¨gö
;

413 
	mvm¨gö
;

414 
	mhªs
;

415 
	mvªs
;

416 
uöt32
 
	mmode
;

417 
uöt16
 
	mªs_unô
;

418 
	mrows
;

419 
	mcﬁs
;

420 
	m‹õ¡
;

423 
	sdump_›ts
 {

424 
	mdebug
;

425 
	mf‹m©
;

426 
	mÀvñ
;

427 
	mmode
[4];

428 
	möfûíame
[
PATH_MAX
 + 1];

429 
	moutfûíame
[
PATH_MAX
 + 1];

430 
FILE
 *
	möfûe
;

431 
FILE
 *
	moutfûe
;

435 
	gouâûed
 = -1;

436 
uöt32
 
	gtûewidth
 = 0;

437 
uöt32
 
	gtûñígth
 = 0;

439 
uöt16
 
	gc⁄fig
 = 0;

440 
uöt16
 
	gcom¥essi⁄
 = 0;

441 
uöt16
 
	g¥edi˘‹
 = 0;

442 
uöt16
 
	gfûl‹dî
 = 0;

443 
uöt32
 
	grow•î°rù
 = 0;

444 
uöt32
 
	gg3›ts
 = 0;

445 
	gign‹e
 = 
FALSE
;

446 
uöt32
 
	gdefg3›ts
 = (uint32) -1;

447 
	gquÆôy
 = 100;

449 
	gj≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

450 
uöt16
 
	gdefcom¥essi⁄
 = (uint16) -1;

451 
uöt16
 
	gdeÂªdi˘‹
 = (uint16) -1;

452 
	g∑geNum
 = 0;

453 
	glôée_ídün
 = 1;

456 
ªadC⁄tigSåùsI¡oBuf„r
 (
TIFF
*, 
uöt8
*);

457 
ªadSï¨©eSåùsI¡oBuf„r
 (
TIFF
*, 
uöt8
*, 
uöt32
, uöt32, 
tßm∂e_t
, 
dump_›ts
 *);

458 
ªadC⁄tigTûesI¡oBuf„r
 (
TIFF
*, 
uöt8
*, 
uöt32
, uöt32, uöt32, uöt32, 
tßm∂e_t
, 
uöt16
);

459 
ªadSï¨©eTûesI¡oBuf„r
 (
TIFF
*, 
uöt8
*, 
uöt32
, uöt32, uöt32, uöt32, 
tßm∂e_t
, 
uöt16
);

460 
wrôeBuf„rToC⁄tigSåùs
 (
TIFF
*, 
uöt8
*, 
uöt32
);

461 
wrôeBuf„rToC⁄tigTûes
 (
TIFF
*, 
uöt8
*, 
uöt32
, uöt32, 
tßm∂e_t
, 
dump_›ts
 *);

462 
wrôeBuf„rToSï¨©eSåùs
 (
TIFF
*, 
uöt8
*, 
uöt32
, uöt32, 
tßm∂e_t
, 
dump_›ts
 *);

463 
wrôeBuf„rToSï¨©eTûes
 (
TIFF
*, 
uöt8
*, 
uöt32
, uöt32, 
tßm∂e_t
, 
dump_›ts
 *);

464 
exåa˘C⁄tigSam∂esToBuf„r
 (
uöt8
 *, uöt8 *, 
uöt32
, uöt32, 
tßm∂e_t
,

465 
uöt16
, uöt16, 
dump_›ts
 *);

466 
¥o˚ssCom¥essO±i⁄s
(*);

467 
ußge
();

470 
öôImageD©a
 (
image_d©a
 *);

471 
öôCr›Masks
 (
¸›_mask
 *);

472 
öôPageSëup
 (
∑gedef
 *, 
∑ge£g
 *, 
bufföfo
 []);

473 
öôDumpO±i⁄s
(
dump_›ts
 *);

476 
¥o˚ss_comm™d_›ts
 (, *[], *, *, 
uöt32
 *,

477 
uöt16
 *, uöt16 *, 
uöt32
 *, uint32 *, uint32 *,

478 
¸›_mask
 *, 
∑gedef
 *,

479 
dump_›ts
 *,

481 
upd©e_ouçut_fûe
 (
TIFF
 **, *, , *, *);

485 
gë_∑ge_geomëry
 (*, 
∑gedef
*);

486 
compuãI≈utPixñOff£ts
(
¸›_mask
 *, 
image_d©a
 *,

487 
off£t
 *);

488 
compuãOuçutPixñOff£ts
 (
¸›_mask
 *, 
image_d©a
 *,

489 
∑gedef
 *, 
∑ge£g
 *,

490 
dump_›ts
 *);

491 
lﬂdImage
(
TIFF
 *, 
image_d©a
 *, 
dump_›ts
 *, **);

492 
c‹ª˘_‹õ¡©i⁄
(
image_d©a
 *, **);

493 
gëCr›Off£ts
(
image_d©a
 *, 
¸›_mask
 *, 
dump_›ts
 *);

494 
¥o˚ssCr›Sñe˘i⁄s
(
image_d©a
 *, 
¸›_mask
 *,

495 **, 
bufföfo
 []);

496 
wrôeSñe˘i⁄s
(
TIFF
 *, TIFF **, 
¸›_mask
 *, 
image_d©a
 *,

497 
dump_›ts
 *, 
bufföfo
 [],

501 
¸óãImageSe˘i⁄
(
uöt32
, **);

502 
exåa˘ImageSe˘i⁄
(
image_d©a
 *, 
∑ge£g
 *,

504 
wrôeSögÀSe˘i⁄
(
TIFF
 *, TIFF *, 
image_d©a
 *,

505 
dump_›ts
 *, 
uöt32
, uint32,

507 
wrôeImageSe˘i⁄s
(
TIFF
 *, TIFF *, 
image_d©a
 *,

508 
∑gedef
 *, 
∑ge£g
 *,

509 
dump_›ts
 *, *,

512 
¸óãCr›≥dImage
(
image_d©a
 *, 
¸›_mask
 *,

514 
wrôeCr›≥dImage
(
TIFF
 *, TIFF *, 
image_d©a
 *
image
,

515 
dump_›ts
 * 
dump
,

516 
uöt32
, uint32, *, , );

519 
rŸ©eC⁄tigSam∂es8bôs
(
uöt16
, uöt16, uöt16, 
uöt32
,

520 
uöt32
, uöt32, 
uöt8
 *, uint8 *);

521 
rŸ©eC⁄tigSam∂es16bôs
(
uöt16
, uöt16, uöt16, 
uöt32
,

522 
uöt32
, uöt32, 
uöt8
 *, uint8 *);

523 
rŸ©eC⁄tigSam∂es24bôs
(
uöt16
, uöt16, uöt16, 
uöt32
,

524 
uöt32
, uöt32, 
uöt8
 *, uint8 *);

525 
rŸ©eC⁄tigSam∂es32bôs
(
uöt16
, uöt16, uöt16, 
uöt32
,

526 
uöt32
, uöt32, 
uöt8
 *, uint8 *);

527 
rŸ©eImage
(
uöt16
, 
image_d©a
 *, 
uöt32
 *, uint32 *,

529 
múr‹Image
(
uöt16
, uöt16, uöt16, 
uöt32
, uint32,

531 
övîtImage
(
uöt16
, uöt16, uöt16, 
uöt32
, uint32,

535 
ªvî£Sam∂es8bôs
 (
uöt16
, uöt16, 
uöt32
, 
uöt8
 *, uint8 *);

536 
ªvî£Sam∂es16bôs
 (
uöt16
, uöt16, 
uöt32
, 
uöt8
 *, uint8 *);

537 
ªvî£Sam∂es24bôs
 (
uöt16
, uöt16, 
uöt32
, 
uöt8
 *, uint8 *);

538 
ªvî£Sam∂es32bôs
 (
uöt16
, uöt16, 
uöt32
, 
uöt8
 *, uint8 *);

539 
ªvî£Sam∂esByãs
 (
uöt16
, uöt16, 
uöt32
, 
uöt8
 *, uint8 *);

542 
exåa˘Sï¨©eRegi⁄
(
image_d©a
 *, 
¸›_mask
 *,

544 
exåa˘ComposôeRegi⁄s
(
image_d©a
 *, 
¸›_mask
 *,

546 
exåa˘C⁄tigSam∂es8bôs
 (
uöt8
 *, uöt8 *, 
uöt32
,

547 
tßm∂e_t
, 
uöt16
, uint16,

548 
tßm∂e_t
, 
uöt32
, uint32);

549 
exåa˘C⁄tigSam∂es16bôs
 (
uöt8
 *, uöt8 *, 
uöt32
,

550 
tßm∂e_t
, 
uöt16
, uint16,

551 
tßm∂e_t
, 
uöt32
, uint32);

552 
exåa˘C⁄tigSam∂es24bôs
 (
uöt8
 *, uöt8 *, 
uöt32
,

553 
tßm∂e_t
, 
uöt16
, uint16,

554 
tßm∂e_t
, 
uöt32
, uint32);

555 
exåa˘C⁄tigSam∂es32bôs
 (
uöt8
 *, uöt8 *, 
uöt32
,

556 
tßm∂e_t
, 
uöt16
, uint16,

557 
tßm∂e_t
, 
uöt32
, uint32);

558 
exåa˘C⁄tigSam∂esByãs
 (
uöt8
 *, uöt8 *, 
uöt32
,

559 
tßm∂e_t
, 
uöt16
, uint16,

560 
tßm∂e_t
, 
uöt32
, uint32);

561 
exåa˘C⁄tigSam∂esShi·ed8bôs
 (
uöt8
 *, uöt8 *, 
uöt32
,

562 
tßm∂e_t
, 
uöt16
, uint16,

563 
tßm∂e_t
, 
uöt32
, uint32,

565 
exåa˘C⁄tigSam∂esShi·ed16bôs
 (
uöt8
 *, uöt8 *, 
uöt32
,

566 
tßm∂e_t
, 
uöt16
, uint16,

567 
tßm∂e_t
, 
uöt32
, uint32,

569 
exåa˘C⁄tigSam∂esShi·ed24bôs
 (
uöt8
 *, uöt8 *, 
uöt32
,

570 
tßm∂e_t
, 
uöt16
, uint16,

571 
tßm∂e_t
, 
uöt32
, uint32,

573 
exåa˘C⁄tigSam∂esShi·ed32bôs
 (
uöt8
 *, uöt8 *, 
uöt32
,

574 
tßm∂e_t
, 
uöt16
, uint16,

575 
tßm∂e_t
, 
uöt32
, uint32,

577 
exåa˘C⁄tigSam∂esToTûeBuf„r
(
uöt8
 *, uöt8 *, 
uöt32
, uint32,

578 
uöt32
, uöt32, 
tßm∂e_t
, 
uöt16
,

579 
uöt16
, uöt16, 
dump_›ts
 *);

582 
comböeSï¨©eSam∂es8bôs
 (
uöt8
 *[], uöt8 *, 
uöt32
, uint32,

583 
uöt16
, uöt16, 
FILE
 *, , );

584 
comböeSï¨©eSam∂es16bôs
 (
uöt8
 *[], uöt8 *, 
uöt32
, uint32,

585 
uöt16
, uöt16, 
FILE
 *, , );

586 
comböeSï¨©eSam∂es24bôs
 (
uöt8
 *[], uöt8 *, 
uöt32
, uint32,

587 
uöt16
, uöt16, 
FILE
 *, , );

588 
comböeSï¨©eSam∂es32bôs
 (
uöt8
 *[], uöt8 *, 
uöt32
, uint32,

589 
uöt16
, uöt16, 
FILE
 *, , );

590 
comböeSï¨©eSam∂esByãs
 (*[], *,

591 
uöt32
, uöt32, 
tßm∂e_t
, 
uöt16
,

592 
FILE
 *, , );

594 
comböeSï¨©eTûeSam∂es8bôs
 (
uöt8
 *[], uöt8 *, 
uöt32
, uint32,

595 
uöt32
, uöt32, 
uöt16
, uint16,

596 
FILE
 *, , );

597 
comböeSï¨©eTûeSam∂es16bôs
 (
uöt8
 *[], uöt8 *, 
uöt32
, uint32,

598 
uöt32
, uöt32, 
uöt16
, uint16,

599 
FILE
 *, , );

600 
comböeSï¨©eTûeSam∂es24bôs
 (
uöt8
 *[], uöt8 *, 
uöt32
, uint32,

601 
uöt32
, uöt32, 
uöt16
, uint16,

602 
FILE
 *, , );

603 
comböeSï¨©eTûeSam∂es32bôs
 (
uöt8
 *[], uöt8 *, 
uöt32
, uint32,

604 
uöt32
, uöt32, 
uöt16
, uint16,

605 
FILE
 *, , );

606 
comböeSï¨©eTûeSam∂esByãs
 (*[], *,

607 
uöt32
, uint32, uint32, uint32,

608 
tßm∂e_t
, 
uöt16
, 
FILE
 *, , );

611 
dump_öfo
 (
FILE
 *, , *, *, ...);

612 
dump_d©a
 (
FILE
 *, , *, *, 
uöt32
);

613 
dump_byã
 (
FILE
 *, , *, );

614 
dump_sh‹t
 (
FILE
 *, , *, 
uöt16
);

615 
dump_l⁄g
 (
FILE
 *, , *, 
uöt32
);

616 
dump_wide
 (
FILE
 *, , *, 
uöt64
);

617 
dump_buf„r
 (
FILE
 *, , 
uöt32
, uint32, uint32, *);

623 * 
	gußge_öfo
[] = {

755 
NULL


763 
	$ªadC⁄tigTûesI¡oBuf„r
 (
TIFF
* 
ö
, 
uöt8
* 
buf
,

764 
uöt32
 
imagñígth
,

765 
uöt32
 
imagewidth
,

766 
uöt32
 
tw
, uöt32 
é
,

767 
tßm∂e_t
 
•p
, 
uöt16
 
bps
)

769 
°©us
 = 1;

770 
tßm∂e_t
 
ßm∂e
 = 0;

771 
tßm∂e_t
 
cou¡
 = 
•p
;

772 
uöt32
 
row
, 
cﬁ
, 
åow
;

773 
uöt32
 
ƒow
, 
ncﬁ
;

774 
uöt32
 
d°_rowsize
, 
shi·_width
;

775 
uöt32
 
byãs_≥r_ßm∂e
, 
byãs_≥r_pixñ
;

776 
uöt32
 
åaûög_bôs
, 
¥ev_åaûög_bôs
;

777 
uöt32
 
tûe_rowsize
 = 
	`TIFFTûeRowSize
(
ö
);

778 
uöt32
 
§c_off£t
, 
d°_off£t
;

779 
uöt32
 
row_off£t
, 
cﬁ_off£t
;

780 
uöt8
 *
buÂ
 = (uöt8*Ë
buf
;

781 *
§c
 = 
NULL
;

782 *
d°
 = 
NULL
;

783 
tsize_t
 
tbyãs
 = 0, 
tûe_buffsize
 = 0;

784 
tsize_t
 
tûesize
 = 
	`TIFFTûeSize
(
ö
);

785 *
tûebuf
 = 
NULL
;

787 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

788 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

790 i‡((
bps
 % 8) == 0)

791 
shi·_width
 = 0;

794 i‡(
byãs_≥r_pixñ
 < (
byãs_≥r_ßm∂e
 + 1))

795 
shi·_width
 = 
byãs_≥r_pixñ
;

797 
shi·_width
 = 
byãs_≥r_ßm∂e
 + 1;

800 
tûe_buffsize
 = 
tûesize
;

802 i‡(
tûesize
 < (
tsize_t
)(
é
 * 
tûe_rowsize
))

804 #ifde‡
DEBUG2


805 
	`TIFFEº‹
("readContigTilesIntoBuffer",

807 
tûesize
, 
é
 * 
tûe_rowsize
);

809 
tûe_buffsize
 = 
é
 * 
tûe_rowsize
;

812 
tûebuf
 = 
	`_TIFFmÆloc
(
tûe_buffsize
);

813 i‡(
tûebuf
 == 0)

816 
d°_rowsize
 = ((
imagewidth
 * 
bps
 * 
•p
) + 7) / 8;

817 
row
 = 0;Ñow < 
imagñígth
;Ñow +
é
)

819 
ƒow
 = (
row
 + 
é
 > 
imagñígth
) ? imagelength -Ñow :Ål;

820 
cﬁ
 = 0; cﬁ < 
imagewidth
; cﬁ +
tw
)

822 
tbyãs
 = 
	`TIFFRódTûe
(
ö
, 
tûebuf
, 
cﬁ
, 
row
, 0, 0);

823 i‡(
tbyãs
 < 
tûesize
 && !
ign‹e
)

825 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

827 (Ë
cﬁ
, (Ë
row
, ()
tbyãs
,

828 ()
tûesize
);

829 
°©us
 = 0;

830 
	`_TIFF‰ì
(
tûebuf
);

831  
°©us
;

834 
row_off£t
 = 
row
 * 
d°_rowsize
;

835 
cﬁ_off£t
 = ((
cﬁ
 * 
bps
 * 
•p
) + 7)/ 8;

836 
buÂ
 = 
buf
 + 
row_off£t
 + 
cﬁ_off£t
;

838 i‡(
cﬁ
 + 
tw
 > 
imagewidth
)

839 
ncﬁ
 = 
imagewidth
 - 
cﬁ
;

841 
ncﬁ
 = 
tw
;

849 i‡(((
bps
 % 8Ë=0Ë&& (
cou¡
 =
•p
))

851 
åow
 = 0;Årow < 
ƒow
;Årow++)

853 
§c_off£t
 = 
åow
 * 
tûe_rowsize
;

854 
	`_TIFFmem˝y
 (
buÂ
, 
tûebuf
 + 
§c_off£t
, (
ncﬁ
 * 
•p
 * 
bps
) / 8);

855 
buÂ
 +(
imagewidth
 * 
bps
 * 
•p
) / 8;

861 
¥ev_åaûög_bôs
 = 
åaûög_bôs
 = 0;

862 
åaûög_bôs
 = (
ncﬁ
 * 
bps
 * 
•p
) % 8;

865 
åow
 = 0;Årow < 
ƒow
;Årow++)

867 
§c_off£t
 = 
åow
 * 
tûe_rowsize
;

868 
§c
 = 
tûebuf
 + 
§c_off£t
;

869 
d°_off£t
 = (
row
 + 
åow
Ë* 
d°_rowsize
;

870 
d°
 = 
buf
 + 
d°_off£t
 + 
cﬁ_off£t
;

871 
shi·_width
)

873 0: i‡(
	`exåa˘C⁄tigSam∂esByãs
 (
§c
, 
d°
, 
ncﬁ
, 
ßm∂e
,

874 
•p
, 
bps
, 
cou¡
, 0, 
ncﬁ
))

876 
	`TIFFEº‹
("readContigTilesIntoBuffer",

878 
row
, ()
	`TIFFCuºítTûe
(
ö
));

882 1: i‡(
bps
 == 1)

884 i‡(
	`exåa˘C⁄tigSam∂esShi·ed8bôs
 (
§c
, 
d°
, 
ncﬁ
,

885 
ßm∂e
, 
•p
,

886 
bps
, 
cou¡
,

887 0, 
ncﬁ
,

888 
¥ev_åaûög_bôs
))

890 
	`TIFFEº‹
("readContigTilesIntoBuffer",

892 
row
, ()
	`TIFFCuºítTûe
(
ö
));

898 i‡(
	`exåa˘C⁄tigSam∂esShi·ed16bôs
 (
§c
, 
d°
, 
ncﬁ
,

899 
ßm∂e
, 
•p
,

900 
bps
, 
cou¡
,

901 0, 
ncﬁ
,

902 
¥ev_åaûög_bôs
))

904 
	`TIFFEº‹
("readContigTilesIntoBuffer",

906 
row
, ()
	`TIFFCuºítTûe
(
ö
));

910 2: i‡(
	`exåa˘C⁄tigSam∂esShi·ed24bôs
 (
§c
, 
d°
, 
ncﬁ
,

911 
ßm∂e
, 
•p
,

912 
bps
, 
cou¡
,

913 0, 
ncﬁ
,

914 
¥ev_åaûög_bôs
))

916 
	`TIFFEº‹
("readContigTilesIntoBuffer",

918 
row
, ()
	`TIFFCuºítTûe
(
ö
));

924 5: i‡(
	`exåa˘C⁄tigSam∂esShi·ed32bôs
 (
§c
, 
d°
, 
ncﬁ
,

925 
ßm∂e
, 
•p
,

926 
bps
, 
cou¡
,

927 0, 
ncﬁ
,

928 
¥ev_åaûög_bôs
))

930 
	`TIFFEº‹
("readContigTilesIntoBuffer",

932 
row
, ()
	`TIFFCuºítTûe
(
ö
));

936 : 
	`TIFFEº‹
("ªadC⁄tigTûesI¡oBuf„r", "Unsuµ‹ãd bô dïth %d", 
bps
);

940 
¥ev_åaûög_bôs
 +
åaûög_bôs
;

941 i‡(
¥ev_åaûög_bôs
 > 7)

942 
¥ev_åaûög_bôs
-= 8;

947 
	`_TIFF‰ì
(
tûebuf
);

948  
°©us
;

949 
	}
}

951 
	$ªadSï¨©eTûesI¡oBuf„r
 (
TIFF
* 
ö
, 
uöt8
 *
obuf
,

952 
uöt32
 
imagñígth
, uöt32 
imagewidth
,

953 
uöt32
 
tw
, uöt32 
é
,

954 
uöt16
 
•p
, uöt16 
bps
)

956 
i
, 
°©us
 = 1, 
ßm∂e
;

957 
shi·_width
, 
byãs_≥r_pixñ
;

958 
uöt16
 
byãs_≥r_ßm∂e
;

959 
uöt32
 
row
, 
cﬁ
;

960 
uöt32
 
ƒow
, 
ncﬁ
;

961 
uöt32
 
row_off£t
, 
cﬁ_off£t
;

962 
tsize_t
 
tbyãs
 = 0, 
tûesize
 = 
	`TIFFTûeSize
(
ö
);

963 
tßm∂e_t
 
s
;

964 
uöt8
* 
buÂ
 = (uöt8*)
obuf
;

965 *
§cbuffs
[
MAX_SAMPLES
];

966 *
tbuff
 = 
NULL
;

968 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

970 
ßm∂e
 = 0; (ßm∂ê< 
•p
Ë&& (ßm∂ê< 
MAX_SAMPLES
); sample++)

972 
§cbuffs
[
ßm∂e
] = 
NULL
;

973 
tbuff
 = (*)
	`_TIFFmÆloc
(
tûesize
 + 8);

974 i‡(!
tbuff
)

976 
	`TIFFEº‹
 ("readSeparateTilesIntoBuffer",

977 "U«bÀÅÿÆloˇãÅûêªad buf„∏f‹ sam∂ê%d", 
ßm∂e
);

978 
i
 = 0; i < 
ßm∂e
; i++)

979 
	`_TIFF‰ì
 (
§cbuffs
[
i
]);

982 
§cbuffs
[
ßm∂e
] = 
tbuff
;

987 
row
 = 0;Ñow < 
imagñígth
;Ñow +
é
)

989 
ƒow
 = (
row
 + 
é
 > 
imagñígth
) ? imagelength -Ñow :Ål;

990 
cﬁ
 = 0; cﬁ < 
imagewidth
; cﬁ +
tw
)

992 
s
 = 0; s < 
•p
; s++)

994 
tbyãs
 = 
	`TIFFRódTûe
(
ö
, 
§cbuffs
[
s
], 
cﬁ
, 
row
, 0, s);

995 i‡(
tbyãs
 < 0 && !
ign‹e
)

997 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

1000 (Ë
cﬁ
, (Ë
row
,

1001 (Ë
s
);

1002 
°©us
 = 0;

1003 
ßm∂e
 = 0; (ßm∂ê< 
•p
Ë&& (ßm∂ê< 
MAX_SAMPLES
); sample++)

1005 
tbuff
 = 
§cbuffs
[
ßm∂e
];

1006 i‡(
tbuff
 !
NULL
)

1007 
	`_TIFF‰ì
(
tbuff
);

1009  
°©us
;

1016 i‡(
cﬁ
 + 
tw
 > 
imagewidth
)

1017 
ncﬁ
 = 
imagewidth
 - 
cﬁ
;

1019 
ncﬁ
 = 
tw
;

1021 
row_off£t
 = 
row
 * (((
imagewidth
 * 
•p
 * 
bps
) + 7) / 8);

1022 
cﬁ_off£t
 = ((
cﬁ
 * 
•p
 * 
bps
) + 7) / 8;

1023 
buÂ
 = 
obuf
 + 
row_off£t
 + 
cﬁ_off£t
;

1025 i‡((
bps
 % 8) == 0)

1027 i‡(
	`comböeSï¨©eTûeSam∂esByãs
(
§cbuffs
, 
buÂ
, 
ncﬁ
, 
ƒow
, 
imagewidth
,

1028 
tw
, 
•p
, 
bps
, 
NULL
, 0, 0))

1030 
°©us
 = 0;

1036 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

1037 i‡(
byãs_≥r_pixñ
 < (
byãs_≥r_ßm∂e
 + 1))

1038 
shi·_width
 = 
byãs_≥r_pixñ
;

1040 
shi·_width
 = 
byãs_≥r_ßm∂e
 + 1;

1042 
shi·_width
)

1044 1: i‡(
	`comböeSï¨©eTûeSam∂es8bôs
 (
§cbuffs
, 
buÂ
, 
ncﬁ
, 
ƒow
,

1045 
imagewidth
, 
tw
, 
•p
, 
bps
,

1046 
NULL
, 0, 0))

1048 
°©us
 = 0;

1052 2: i‡(
	`comböeSï¨©eTûeSam∂es16bôs
 (
§cbuffs
, 
buÂ
, 
ncﬁ
, 
ƒow
,

1053 
imagewidth
, 
tw
, 
•p
, 
bps
,

1054 
NULL
, 0, 0))

1056 
°©us
 = 0;

1060 3: i‡(
	`comböeSï¨©eTûeSam∂es24bôs
 (
§cbuffs
, 
buÂ
, 
ncﬁ
, 
ƒow
,

1061 
imagewidth
, 
tw
, 
•p
, 
bps
,

1062 
NULL
, 0, 0))

1064 
°©us
 = 0;

1072 8: i‡(
	`comböeSï¨©eTûeSam∂es32bôs
 (
§cbuffs
, 
buÂ
, 
ncﬁ
, 
ƒow
,

1073 
imagewidth
, 
tw
, 
•p
, 
bps
,

1074 
NULL
, 0, 0))

1076 
°©us
 = 0;

1080 : 
	`TIFFEº‹
 ("ªadSï¨©eTûesI¡oBuf„r", "Unsuµ‹ãd bô dïth: %d", 
bps
);

1081 
°©us
 = 0;

1088 
ßm∂e
 = 0; (ßm∂ê< 
•p
Ë&& (ßm∂ê< 
MAX_SAMPLES
); sample++)

1090 
tbuff
 = 
§cbuffs
[
ßm∂e
];

1091 i‡(
tbuff
 !
NULL
)

1092 
	`_TIFF‰ì
(
tbuff
);

1095  
°©us
;

1096 
	}
}

1098 
	$wrôeBuf„rToC⁄tigSåùs
(
TIFF
* 
out
, 
uöt8
* 
buf
, 
uöt32
 
imagñígth
)

1100 
uöt32
 
row
, 
ƒows
, 
row•î°rù
;

1101 
t°rù_t
 
°rù
 = 0;

1102 
tsize_t
 
°rùsize
;

1104 
	`TIFFGëFõldDeÁu…ed
(
out
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

1105 
row
 = 0;Ñow < 
imagñígth
;Ñow +
row•î°rù
)

1107 
ƒows
 = (
row
 + 
row•î°rù
 > 
imagñígth
) ?

1108 
imagñígth
 - 
row
 : 
row•î°rù
;

1109 
°rùsize
 = 
	`TIFFVSåùSize
(
out
, 
ƒows
);

1110 i‡(
	`TIFFWrôeEncodedSåù
(
out
, 
°rù
++, 
buf
, 
°rùsize
) < 0)

1112 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
), "Eº‹, c™'àwrôê°rù %u", 
°rù
 - 1);

1115 
buf
 +
°rùsize
;

1119 
	}
}

1130 
	$wrôeBuf„rToSï¨©eSåùs
 (
TIFF
* 
out
, 
uöt8
* 
buf
,

1131 
uöt32
 
Àngth
, uöt32 
width
, 
uöt16
 
•p
,

1132 
dump_›ts
 *
dump
)

1134 
uöt8
 *
§c
;

1135 
uöt16
 
bps
;

1136 
uöt32
 
row
, 
ƒows
, 
rowsize
, 
row•î°rù
;

1137 
uöt32
 
byãs_≥r_ßm∂e
;

1138 
tßm∂e_t
 
s
;

1139 
t°rù_t
 
°rù
 = 0;

1140 
tsize_t
 
°rùsize
 = 
	`TIFFSåùSize
(
out
);

1141 
tsize_t
 
row°rùsize
, 
sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(
out
);

1142 
tsize_t
 
tŸÆ_byãs
 = 0;

1143 
td©a_t
 
obuf
;

1145 (Ë
	`TIFFGëFõldDeÁu…ed
(
out
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

1146 (Ë
	`TIFFGëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, &
bps
);

1147 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

1148 
rowsize
 = ((
bps
 * 
•p
 * 
width
) + 7) / 8;

1149 
row°rùsize
 = 
row•î°rù
 * 
byãs_≥r_ßm∂e
 * (
width
 + 1);

1151 
obuf
 = 
	`_TIFFmÆloc
 (
row°rùsize
);

1152 i‡(
obuf
 =
NULL
)

1155 
s
 = 0; s < 
•p
; s++)

1157 
row
 = 0;Ñow < 
Àngth
;Ñow +
row•î°rù
)

1159 
ƒows
 = (
row
 + 
row•î°rù
 > 
Àngth
) ?Üength -Ñow :Ñowsperstrip;

1161 
°rùsize
 = 
	`TIFFVSåùSize
(
out
, 
ƒows
);

1162 
§c
 = 
buf
 + (
row
 * 
rowsize
);

1163 
tŸÆ_byãs
 +
°rùsize
;

1164 
	`mem£t
 (
obuf
, '\0', 
row°rùsize
);

1165 i‡(
	`exåa˘C⁄tigSam∂esToBuf„r
(
obuf
, 
§c
, 
ƒows
, 
width
, 
s
, 
•p
, 
bps
, 
dump
))

1167 
	`_TIFF‰ì
(
obuf
);

1170 i‡((
dump
->
outfûe
 !
NULL
Ë&& (dump->
Àvñ
 == 1))

1172 
	`dump_öfo
(
dump
->
outfûe
, dump->
f‹m©
,"",

1174 
s
 + 1, 
°rù
 + 1, 
°rùsize
, 
row
 + 1, 
sˇ∆öesize
, 
§c
 - 
buf
);

1175 
	`dump_buf„r
(
dump
->
outfûe
, dump->
f‹m©
, 
ƒows
, 
sˇ∆öesize
, 
row
, 
obuf
);

1178 i‡(
	`TIFFWrôeEncodedSåù
(
out
, 
°rù
++, 
obuf
, 
°rùsize
) < 0)

1180 
	`TIFFEº‹
(
	`TIFFFûeName
(
out
), "Eº‹, c™'àwrôê°rù %u", 
°rù
 - 1);

1181 
	`_TIFF‰ì
(
obuf
);

1187 
	`_TIFF‰ì
(
obuf
);

1189 
	}
}

1194 
	$wrôeBuf„rToC⁄tigTûes
 (
TIFF
* 
out
, 
uöt8
* 
buf
, 
uöt32
 
imagñígth
,

1195 
uöt32
 
imagewidth
, 
tßm∂e_t
 
•p
,

1196 
dump_›ts
* 
dump
)

1198 
uöt16
 
bps
;

1199 
uöt32
 
é
, 
tw
;

1200 
uöt32
 
row
, 
cﬁ
, 
ƒow
, 
ncﬁ
;

1201 
uöt32
 
§c_rowsize
, 
cﬁ_off£t
;

1202 
uöt32
 
tûe_rowsize
 = 
	`TIFFTûeRowSize
(
out
);

1203 
uöt8
* 
buÂ
 = (uöt8*Ë
buf
;

1204 
tsize_t
 
tûe_buffsize
 = 0;

1205 
tsize_t
 
tûesize
 = 
	`TIFFTûeSize
(
out
);

1206 *
tûebuf
 = 
NULL
;

1208 
	`TIFFGëFõld
(
out
, 
TIFFTAG_TILELENGTH
, &
é
);

1209 
	`TIFFGëFõld
(
out
, 
TIFFTAG_TILEWIDTH
, &
tw
);

1210 
	`TIFFGëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, &
bps
);

1212 
tûe_buffsize
 = 
tûesize
;

1213 i‡(
tûesize
 < (
tsize_t
)(
é
 * 
tûe_rowsize
))

1215 #ifde‡
DEBUG2


1216 
	`TIFFEº‹
("writeBufferToContigTiles",

1218 
tûesize
, 
é
 * 
tûe_rowsize
);

1220 
tûe_buffsize
 = 
é
 * 
tûe_rowsize
;

1223 
tûebuf
 = 
	`_TIFFmÆloc
(
tûe_buffsize
);

1224 i‡(
tûebuf
 == 0)

1227 
§c_rowsize
 = ((
imagewidth
 * 
•p
 * 
bps
) + 7) / 8;

1228 
row
 = 0;Ñow < 
imagñígth
;Ñow +
é
)

1230 
ƒow
 = (
row
 + 
é
 > 
imagñígth
) ? imagelength -Ñow :Ål;

1231 
cﬁ
 = 0; cﬁ < 
imagewidth
; cﬁ +
tw
)

1234 i‡(
cﬁ
 + 
tw
 > 
imagewidth
)

1235 
ncﬁ
 = 
imagewidth
 - 
cﬁ
;

1237 
ncﬁ
 = 
tw
;

1239 
cﬁ_off£t
 = (((
cﬁ
 * 
bps
 * 
•p
) + 7) / 8);

1240 
buÂ
 = 
buf
 + (
row
 * 
§c_rowsize
Ë+ 
cﬁ_off£t
;

1241 i‡(
	`exåa˘C⁄tigSam∂esToTûeBuf„r
(
tûebuf
, 
buÂ
, 
ƒow
, 
ncﬁ
, 
imagewidth
,

1242 
tw
, 0, 
•p
, sµ, 
bps
, 
dump
) > 0)

1244 
	`TIFFEº‹
("writeBufferToContigTiles",

1246 (Ë
row
, ()
cﬁ
);

1247 
	`_TIFF‰ì
(
tûebuf
);

1251 i‡(
	`TIFFWrôeTûe
(
out
, 
tûebuf
, 
cﬁ
, 
row
, 0, 0) < 0)

1253 
	`TIFFEº‹
("writeBufferToContigTiles",

1255 (Ë
cﬁ
, (Ë
row
);

1256 
	`_TIFF‰ì
(
tûebuf
);

1261 
	`_TIFF‰ì
(
tûebuf
);

1264 
	}
}

1269 
	$wrôeBuf„rToSï¨©eTûes
 (
TIFF
* 
out
, 
uöt8
* 
buf
, 
uöt32
 
imagñígth
,

1270 
uöt32
 
imagewidth
, 
tßm∂e_t
 
•p
,

1271 
dump_›ts
 * 
dump
)

1273 
td©a_t
 
obuf
 = 
	`_TIFFmÆloc
(
	`TIFFTûeSize
(
out
));

1274 
uöt32
 
é
, 
tw
;

1275 
uöt32
 
row
, 
cﬁ
, 
ƒow
, 
ncﬁ
;

1276 
uöt32
 
§c_rowsize
, 
cﬁ_off£t
;

1277 
uöt16
 
bps
;

1278 
tßm∂e_t
 
s
;

1279 
uöt8
* 
buÂ
 = (uöt8*Ë
buf
;

1281 i‡(
obuf
 =
NULL
)

1284 
	`TIFFGëFõld
(
out
, 
TIFFTAG_TILELENGTH
, &
é
);

1285 
	`TIFFGëFõld
(
out
, 
TIFFTAG_TILEWIDTH
, &
tw
);

1286 
	`TIFFGëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, &
bps
);

1287 
§c_rowsize
 = ((
imagewidth
 * 
•p
 * 
bps
) + 7) / 8;

1289 
row
 = 0;Ñow < 
imagñígth
;Ñow +
é
)

1291 
ƒow
 = (
row
 + 
é
 > 
imagñígth
) ? imagelength -Ñow :Ål;

1292 
cﬁ
 = 0; cﬁ < 
imagewidth
; cﬁ +
tw
)

1295 i‡(
cﬁ
 + 
tw
 > 
imagewidth
)

1296 
ncﬁ
 = 
imagewidth
 - 
cﬁ
;

1298 
ncﬁ
 = 
tw
;

1300 
cﬁ_off£t
 = (((
cﬁ
 * 
bps
 * 
•p
) + 7) / 8);

1301 
buÂ
 = 
buf
 + (
row
 * 
§c_rowsize
Ë+ 
cﬁ_off£t
;

1303 
s
 = 0; s < 
•p
; s++)

1305 i‡(
	`exåa˘C⁄tigSam∂esToTûeBuf„r
(
obuf
, 
buÂ
, 
ƒow
, 
ncﬁ
, 
imagewidth
,

1306 
tw
, 
s
, 1, 
•p
, 
bps
, 
dump
) > 0)

1308 
	`TIFFEº‹
("writeBufferToSeparateTiles",

1310 (Ë
row
, ()
cﬁ
, ()
s
);

1311 
	`_TIFF‰ì
(
obuf
);

1315 i‡(
	`TIFFWrôeTûe
(
out
, 
obuf
, 
cﬁ
, 
row
, 0, 
s
) < 0)

1317 
	`TIFFEº‹
("writeBufferToseparateTiles",

1319 (Ë
cﬁ
, (Ë
row
,

1320 (Ë
s
);

1321 
	`_TIFF‰ì
(
obuf
);

1327 
	`_TIFF‰ì
(
obuf
);

1330 
	}
}

1333 
	$¥o˚ssG3O±i⁄s
(* 
˝
)

1335 if–(
˝
 = 
	`°rchr
(cp, ':')) ) {

1336 i‡(
defg3›ts
 =(
uöt32
) -1)

1337 
defg3›ts
 = 0;

1339 
˝
++;

1340 i‡(
	`°∫eq
(
˝
, "1d", 2))

1341 
defg3›ts
 &~
GROUP3OPT_2DENCODING
;

1342 i‡(
	`°∫eq
(
˝
, "2d", 2))

1343 
defg3›ts
 |
GROUP3OPT_2DENCODING
;

1344 i‡(
	`°∫eq
(
˝
, "fill", 4))

1345 
defg3›ts
 |
GROUP3OPT_FILLBITS
;

1347 
	`ußge
();

1348 }  (
˝
 = 
	`°rchr
(cp, ':')) );

1350 
	}
}

1353 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

1355 * 
˝
 = 
NULL
;

1357 i‡(
	`°∫eq
(
›t
, "none",4))

1359 
defcom¥essi⁄
 = 
COMPRESSION_NONE
;

1361 i‡(
	`°ªq
(
›t
, "packbits"))

1363 
defcom¥essi⁄
 = 
COMPRESSION_PACKBITS
;

1365 i‡(
	`°∫eq
(
›t
, "jpeg", 4))

1367 
˝
 = 
	`°rchr
(
›t
, ':');

1368 
defcom¥essi⁄
 = 
COMPRESSION_JPEG
;

1370 
˝
)

1372 i‡(
	`isdigô
(()
˝
[1]))

1373 
quÆôy
 = 
	`©oi
(
˝
 + 1);

1374 i‡(
	`°∫eq
(
˝
 + 1, "raw", 3 ))

1375 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

1376 i‡(
	`°∫eq
(
˝
 + 1, "rgb", 3 ))

1377 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

1379 
	`ußge
();

1380 
˝
 = 
	`°rchr
(cp + 1, ':');

1383 i‡(
	`°∫eq
(
›t
, "g3", 2))

1385 
	`¥o˚ssG3O±i⁄s
(
›t
);

1386 
defcom¥essi⁄
 = 
COMPRESSION_CCITTFAX3
;

1388 i‡(
	`°ªq
(
›t
, "g4"))

1390 
defcom¥essi⁄
 = 
COMPRESSION_CCITTFAX4
;

1392 i‡(
	`°∫eq
(
›t
, "lzw", 3))

1394 
˝
 = 
	`°rchr
(
›t
, ':');

1395 i‡(
˝
)

1396 
deÂªdi˘‹
 = 
	`©oi
(
˝
+1);

1397 
defcom¥essi⁄
 = 
COMPRESSION_LZW
;

1399 i‡(
	`°∫eq
(
›t
, "zip", 3))

1401 
˝
 = 
	`°rchr
(
›t
, ':');

1402 i‡(
˝
)

1403 
deÂªdi˘‹
 = 
	`©oi
(
˝
+1);

1404 
defcom¥essi⁄
 = 
COMPRESSION_ADOBE_DEFLATE
;

1410 
	}
}

1413 
	$ußge
()

1415 
i
;

1417 
	`Ârötf
(
°dîr
, "\n%s\n", 
	`TIFFGëVîsi⁄
());

1418 
i
 = 0; 
ußge_öfo
[i] !
NULL
; i++)

1419 
	`Ârötf
(
°dîr
, "%s\n", 
ußge_öfo
[
i
]);

1420 
	`exô
(-1);

1421 
	}
}

1423 
	#C›yFõld
(
èg
, 
v
) \

1424 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v
)Ë
	`TIFFSëFõld
(
out
,Åag, v)

	)

1425 
	#C›yFõld2
(
èg
, 
v1
, 
v2
) \

1426 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2)

	)

1427 
	#C›yFõld3
(
èg
, 
v1
, 
v2
, 
v3
) \

1428 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3)

	)

1429 
	#C›yFõld4
(
èg
, 
v1
, 
v2
, 
v3
, 
v4
) \

1430 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
, &
v4
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3, v4)

	)

1433 
	$˝Tag
(
TIFF
* 
ö
, TIFF* 
out
, 
uöt16
 
èg
, uöt16 
cou¡
, 
TIFFD©aTy≥
 
ty≥
)

1435 
ty≥
) {

1436 
TIFF_SHORT
:

1437 i‡(
cou¡
 == 1) {

1438 
uöt16
 
sh‹tv
;

1439 
	`C›yFõld
(
èg
, 
sh‹tv
);

1440 } i‡(
cou¡
 == 2) {

1441 
uöt16
 
sh‹tv1
, 
sh‹tv2
;

1442 
	`C›yFõld2
(
èg
, 
sh‹tv1
, 
sh‹tv2
);

1443 } i‡(
cou¡
 == 4) {

1444 
uöt16
 *
å
, *
tg
, *
tb
, *
è
;

1445 
	`C›yFõld4
(
èg
, 
å
, 
tg
, 
tb
, 
è
);

1446 } i‡(
cou¡
 =(
uöt16
) -1) {

1447 
uöt16
 
sh‹tv1
;

1448 
uöt16
* 
sh‹èv
;

1449 
	`C›yFõld2
(
èg
, 
sh‹tv1
, 
sh‹èv
);

1452 
TIFF_LONG
:

1453 { 
uöt32
 
l⁄gv
;

1454 
	`C›yFõld
(
èg
, 
l⁄gv
);

1457 
TIFF_RATIONAL
:

1458 i‡(
cou¡
 == 1) {

1459 
Êﬂtv
;

1460 
	`C›yFõld
(
èg
, 
Êﬂtv
);

1461 } i‡(
cou¡
 =(
uöt16
) -1) {

1462 * 
Êﬂèv
;

1463 
	`C›yFõld
(
èg
, 
Êﬂèv
);

1466 
TIFF_ASCII
:

1467 { * 
°rögv
;

1468 
	`C›yFõld
(
èg
, 
°rögv
);

1471 
TIFF_DOUBLE
:

1472 i‡(
cou¡
 == 1) {

1473 
doubÀv
;

1474 
	`C›yFõld
(
èg
, 
doubÀv
);

1475 } i‡(
cou¡
 =(
uöt16
) -1) {

1476 * 
doubÀav
;

1477 
	`C›yFõld
(
èg
, 
doubÀav
);

1481 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

1483 
èg
, 
ty≥
);

1485 
	}
}

1487 
	s˝Tag
 {

1488 
uöt16
 
	mèg
;

1489 
uöt16
 
	mcou¡
;

1490 
TIFFD©aTy≥
 
	mty≥
;

1491 } 
	gègs
[] = {

1492 { 
TIFFTAG_SUBFILETYPE
, 1, 
TIFF_LONG
 },

1493 { 
TIFFTAG_THRESHHOLDING
, 1, 
TIFF_SHORT
 },

1494 { 
TIFFTAG_DOCUMENTNAME
, 1, 
TIFF_ASCII
 },

1495 { 
TIFFTAG_IMAGEDESCRIPTION
, 1, 
TIFF_ASCII
 },

1496 { 
TIFFTAG_MAKE
, 1, 
TIFF_ASCII
 },

1497 { 
TIFFTAG_MODEL
, 1, 
TIFF_ASCII
 },

1498 { 
TIFFTAG_MINSAMPLEVALUE
, 1, 
TIFF_SHORT
 },

1499 { 
TIFFTAG_MAXSAMPLEVALUE
, 1, 
TIFF_SHORT
 },

1500 { 
TIFFTAG_XRESOLUTION
, 1, 
TIFF_RATIONAL
 },

1501 { 
TIFFTAG_YRESOLUTION
, 1, 
TIFF_RATIONAL
 },

1502 { 
TIFFTAG_PAGENAME
, 1, 
TIFF_ASCII
 },

1503 { 
TIFFTAG_XPOSITION
, 1, 
TIFF_RATIONAL
 },

1504 { 
TIFFTAG_YPOSITION
, 1, 
TIFF_RATIONAL
 },

1505 { 
TIFFTAG_RESOLUTIONUNIT
, 1, 
TIFF_SHORT
 },

1506 { 
TIFFTAG_SOFTWARE
, 1, 
TIFF_ASCII
 },

1507 { 
TIFFTAG_DATETIME
, 1, 
TIFF_ASCII
 },

1508 { 
TIFFTAG_ARTIST
, 1, 
TIFF_ASCII
 },

1509 { 
TIFFTAG_HOSTCOMPUTER
, 1, 
TIFF_ASCII
 },

1510 { 
TIFFTAG_WHITEPOINT
, (
uöt16
Ë-1, 
TIFF_RATIONAL
 },

1511 { 
TIFFTAG_PRIMARYCHROMATICITIES
,(
uöt16
Ë-1,
TIFF_RATIONAL
 },

1512 { 
TIFFTAG_HALFTONEHINTS
, 2, 
TIFF_SHORT
 },

1513 { 
TIFFTAG_INKSET
, 1, 
TIFF_SHORT
 },

1514 { 
TIFFTAG_DOTRANGE
, 2, 
TIFF_SHORT
 },

1515 { 
TIFFTAG_TARGETPRINTER
, 1, 
TIFF_ASCII
 },

1516 { 
TIFFTAG_SAMPLEFORMAT
, 1, 
TIFF_SHORT
 },

1517 { 
TIFFTAG_YCBCRCOEFFICIENTS
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

1518 { 
TIFFTAG_YCBCRSUBSAMPLING
, 2, 
TIFF_SHORT
 },

1519 { 
TIFFTAG_YCBCRPOSITIONING
, 1, 
TIFF_SHORT
 },

1520 { 
TIFFTAG_REFERENCEBLACKWHITE
, (
uöt16
Ë-1,
TIFF_RATIONAL
 },

1521 { 
TIFFTAG_EXTRASAMPLES
, (
uöt16
Ë-1, 
TIFF_SHORT
 },

1522 { 
TIFFTAG_SMINSAMPLEVALUE
, 1, 
TIFF_DOUBLE
 },

1523 { 
TIFFTAG_SMAXSAMPLEVALUE
, 1, 
TIFF_DOUBLE
 },

1524 { 
TIFFTAG_STONITS
, 1, 
TIFF_DOUBLE
 },

1526 
	#NTAGS
 ( (
ègs
Ë/  (ègs[0]))

	)

1528 
	#C›yTag
(
èg
, 
cou¡
, 
ty≥
Ë
	`˝Tag
(
ö
, 
out
,Åag, cou¡,Åy≥)

	)

1531 
	$¥o˚ss_comm™d_›ts
 (
¨gc
, *
¨gv
[], *
mp
, *
mode
, 
uöt32
 *
dúnum
,

1532 
uöt16
 *
defc⁄fig
, uöt16 *
deffûl‹dî
, 
uöt32
 *
de·ûewidth
,

1533 
uöt32
 *
de·ûñígth
, uöt32 *
de‰ow•î°rù
,

1534 
¸›_mask
 *
¸›_d©a
, 
∑gedef
 *
∑ge
,

1535 
dump_›ts
 *
dump
,

1536 *
imagñi°
, *
image_cou¡
 )

1538 
c
, 
good_¨gs
 = 0;

1539 *
›t_off£t
 = 
NULL
;

1540 *
›t_±r
 = 
NULL
;

1541 *
£p
 = 
NULL
;

1542 
i
, 
j
, 
°¨t
, 
íd
;

1543 
›töd
;

1544 * 
›èrg
;

1546 *
mp
++ = 'w';

1547 *
mp
 = '\0';

1548 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
,

1551 
good_¨gs
++;

1552 
c
) {

1553 'a': 
mode
[0] = 'a';

1555 'c': i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

1557 
	`TIFFEº‹
 ("Unknow¿com¥essi⁄ o±i⁄", "%s", 
›èrg
);

1558 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1559 
	`exô
 (-1);

1562 'd': 
°¨t
 = 
	`°πoul
(
›èrg
, 
NULL
, 0);

1563 i‡(
°¨t
 == 0)

1565 
	`TIFFEº‹
 ("","Directory offset must be greaterÅhan zero");

1566 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1567 
	`exô
 (-1);

1569 *
dúnum
 = 
°¨t
 - 1;

1571 'e': 
	`tﬁowî
(
›èrg
[0]))

1573 'c': 
¸›_d©a
->
exp_mode
 = 
ONE_FILE_COMPOSITE
;

1574 
¸›_d©a
->
img_mode
 = 
COMPOSITE_IMAGES
;

1576 'd': 
¸›_d©a
->
exp_mode
 = 
ONE_FILE_SEPARATED
;

1577 
¸›_d©a
->
img_mode
 = 
SEPARATED_IMAGES
;

1579 'i': 
¸›_d©a
->
exp_mode
 = 
FILE_PER_IMAGE_COMPOSITE
;

1580 
¸›_d©a
->
img_mode
 = 
COMPOSITE_IMAGES
;

1582 'm': 
¸›_d©a
->
exp_mode
 = 
FILE_PER_IMAGE_SEPARATED
;

1583 
¸›_d©a
->
img_mode
 = 
SEPARATED_IMAGES
;

1585 's': 
¸›_d©a
->
exp_mode
 = 
FILE_PER_SELECTION
;

1586 
¸›_d©a
->
img_mode
 = 
SEPARATED_IMAGES
;

1588 : 
	`TIFFEº‹
 ("Unknow¿exp‹àmode","%s", 
›èrg
);

1589 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1590 
	`exô
 (-1);

1593 'f': i‡(
	`°ªq
(
›èrg
, "lsb2msb"))

1594 *
deffûl‹dî
 = 
FILLORDER_LSB2MSB
;

1595 i‡(
	`°ªq
(
›èrg
, "msb2lsb"))

1596 *
deffûl‹dî
 = 
FILLORDER_MSB2LSB
;

1599 
	`TIFFEº‹
 ("Unknow¿fû»‹dî", "%s", 
›èrg
);

1600 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1601 
	`exô
 (-1);

1604 'h': 
	`ußge
();

1606 'i': 
ign‹e
 = 
TRUE
;

1608 'l': 
ouâûed
 = 
TRUE
;

1609 *
de·ûñígth
 = 
	`©oi
(
›èrg
);

1612 i‡(
	`°ªq
(
›èrg
, "separate"))

1613 *
defc⁄fig
 = 
PLANARCONFIG_SEPARATE
;

1614 i‡(
	`°ªq
(
›èrg
, "contig"))

1615 *
defc⁄fig
 = 
PLANARCONFIG_CONTIG
;

1618 
	`TIFFEº‹
 ("Unkow¿∂™¨ c⁄figuøti⁄", "%s", 
›èrg
);

1619 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1620 
	`exô
 (-1);

1624 *
de‰ow•î°rù
 = 
	`©ﬁ
(
›èrg
);

1627 
ouâûed
 = 
FALSE
;

1630 
ouâûed
 = 
TRUE
;

1632 'v': 
	`TIFFEº‹
("Libøry Rñó£", "%s", 
	`TIFFGëVîsi⁄
());

1633 
	`TIFFEº‹
 ("Tiffcrop version", "%s,Üast updated: %s",

1634 
tiff¸›_vîsi⁄_id
, 
tiff¸›_ªv_d©e
);

1635 
	`TIFFEº‹
 ("Tiffcp code", "Copyright (c) 1988-1997 Sam Leffler");

1636 
	`TIFFEº‹
 (" ", "Copyright (c) 1991-1997 Silicon Graphics, Inc");

1637 
	`TIFFEº‹
 ("Tiffcropádditions", "Copyright (c) 2007-2010 Richard Nolde");

1638 
	`exô
 (0);

1641 
ouâûed
 = 
TRUE
;

1642 *
de·ûewidth
 = 
	`©oi
(
›èrg
);

1645 
¸›_d©a
->
¸›_mode
 |
CROP_REGIONS
;

1646 
i
 = 0, 
›t_±r
 = 
	`°πok
 (
›èrg
, ":");

1647 ((
›t_±r
 !
NULL
Ë&& (
i
 < 
MAX_REGIONS
));

1648 (
›t_±r
 = 
	`°πok
 (
NULL
, ":")), 
i
++)

1650 
¸›_d©a
->
ªgi⁄s
++;

1651 i‡(
	`ssˇnf
(
›t_±r
, "%lf,%lf,%lf,%lf",

1652 &
¸›_d©a
->
c‹√rs
[
i
].
X1
, &¸›_d©a->c‹√rs[i].
Y1
,

1653 &
¸›_d©a
->
c‹√rs
[
i
].
X2
, &¸›_d©a->c‹√rs[i].
Y2
) != 4)

1655 
	`TIFFEº‹
 ("U«bÀÅÿ∑r£ co‹dö©e†f‹Ñegi⁄", "%d %s", 
i
, 
›èrg
);

1656 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1657 
	`exô
 (-1);

1661 i‡((
›t_±r
 !
NULL
Ë&& (
i
 >
MAX_REGIONS
))

1663 
	`TIFFEº‹
 ("Regi⁄Üi°Éx˚ed†limô of", "%dÑegi⁄†%s", 
MAX_REGIONS
, 
›èrg
);

1664 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1665 
	`exô
 (-1);;

1669 'B': *
mp
++ = 'b'; *mp = '\0';

1671 'L': *
mp
++ = 'l'; *mp = '\0';

1673 'M': *
mp
++ = 'm'; *mp = '\0';

1675 'C': *
mp
++ = 'c'; *mp = '\0';

1678 'D': 
i
 = 0, 
›t_±r
 = 
	`°πok
 (
›èrg
, ",");

1679 (
›t_±r
 !
NULL
);

1680 (
›t_±r
 = 
	`°πok
 (
NULL
, ",")), 
i
++)

1682 
›t_off£t
 = 
	`°Ωbrk
(
›t_±r
, ":=");

1683 i‡(
›t_off£t
 =
NULL
)

1685 
	`TIFFEº‹
("InvÆid dum∞›ti⁄", "%s", 
›èrg
);

1686 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1687 
	`exô
 (-1);

1690 *
›t_off£t
 = '\0';

1692 
íd
 = 
	`°æí
 (
›t_±r
);

1693 
i
 = 0; i < 
íd
; i++)

1694 *(
›t_±r
 + 
i
Ë
	`tﬁowî
(*(opt_ptr + i));

1696 i‡(
	`°∫cmp
(
›t_±r
, "for", 3) == 0)

1699 
íd
 = 
	`°æí
 (
›t_off£t
 + 1);

1700 
i
 = 1; i <
íd
; i++)

1701 *(
›t_off£t
 + 
i
Ë
	`tﬁowî
(*(opt_offset + i));

1703 i‡(
	`°∫cmp
 (
›t_off£t
 + 1, "txt", 3) == 0)

1705 
dump
->
f‹m©
 = 
DUMP_TEXT
;

1706 
	`°r˝y
 (
dump
->
mode
, "w");

1710 i‡(
	`°∫cmp
(
›t_off£t
 + 1, "raw", 3) == 0)

1712 
dump
->
f‹m©
 = 
DUMP_RAW
;

1713 
	`°r˝y
 (
dump
->
mode
, "wb");

1717 
	`TIFFEº‹
("∑r£_comm™d_›ts", "Unknow¿dum∞f‹m© %s", 
›t_off£t
 + 1);

1718 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1719 
	`exô
 (-1);

1725 i‡(
	`°∫cmp
 (
›t_±r
, "lev", 3) == 0)

1726 
dump
->
Àvñ
 = 
	`©oi
(
›t_off£t
 + 1);

1728 i‡(
	`°∫cmp
 (
›t_±r
, "in", 2) == 0)

1730 
	`°∫˝y
 (
dump
->
öfûíame
, 
›t_off£t
 + 1, 
PATH_MAX
 - 20);

1731 
dump
->
öfûíame
[
PATH_MAX
 - 20] = '\0';

1734 i‡(
	`°∫cmp
 (
›t_±r
, "out", 3) == 0)

1736 
	`°∫˝y
 (
dump
->
outfûíame
, 
›t_off£t
 + 1, 
PATH_MAX
 - 20);

1737 
dump
->
outfûíame
[
PATH_MAX
 - 20] = '\0';

1739 i‡(
	`°∫cmp
 (
›t_±r
, "deb", 3) == 0)

1740 
dump
->
debug
 = 
	`©oi
(
›t_off£t
 + 1);

1743 i‡((
	`°æí
(
dump
->
öfûíame
)Ë|| (°æí(dump->
outfûíame
)))

1745 i‡(
dump
->
Àvñ
 == 1)

1746 
	`TIFFEº‹
("","DefaultingÅo dumpÜevel 1,Ço data.");

1747 i‡(
dump
->
f‹m©
 =
DUMP_NONE
)

1749 
	`TIFFEº‹
("", "You must specifyá dump format for dump files");

1750 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1751 
	`exô
 (-1);

1759 
¸›_d©a
->
¸›_mode
 |
CROP_MARGINS
;

1760 
i
 = 0, 
›t_±r
 = 
	`°πok
 (
›èrg
, ",:");

1761 ((
›t_±r
 !
NULL
Ë&& (
i
 < 4));

1762 (
›t_±r
 = 
	`°πok
 (
NULL
, ",:")), 
i
++)

1764 
¸›_d©a
->
m¨gös
[
i
] = 
	`©of
(
›t_±r
);

1768 
	`tﬁowî
(
›èrg
[0]))

1770 't': 
¸›_d©a
->
edge_ªf
 = 
EDGE_TOP
;

1772 'b': 
¸›_d©a
->
edge_ªf
 = 
EDGE_BOTTOM
;

1774 'l': 
¸›_d©a
->
edge_ªf
 = 
EDGE_LEFT
;

1776 'r': 
¸›_d©a
->
edge_ªf
 = 
EDGE_RIGHT
;

1778 : 
	`TIFFEº‹
 ("Edgêª„ªn˚ mu° bêt›, bŸtom,Üe·, o∏right", "%s", 
›èrg
);

1779 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1780 
	`exô
 (-1);

1784 
¸›_d©a
->
¸›_mode
 |
CROP_MIRROR
;

1785 
	`tﬁowî
(
›èrg
[0]))

1787 'h': 
¸›_d©a
->
múr‹
 = 
MIRROR_HORIZ
;

1789 'v': 
¸›_d©a
->
múr‹
 = 
MIRROR_VERT
;

1791 'b': 
¸›_d©a
->
múr‹
 = 
MIRROR_BOTH
;

1793 : 
	`TIFFEº‹
 ("Flù modêmu° bêh‹iz, vît, o∏bŸh", "%s", 
›èrg
);

1794 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1795 
	`exô
 (-1);

1799 
∑ge
->
hªs
 = 
	`©of
 (
›èrg
);

1800 
∑ge
->
mode
 |
PAGE_MODE_RESOLUTION
;

1803 
¸›_d©a
->
¸›_mode
 |
CROP_INVERT
;

1805 i‡(
	`°ªq
(
›èrg
, "black"))

1807 
¸›_d©a
->
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

1810 i‡(
	`°ªq
(
›èrg
, "white"))

1812 
¸›_d©a
->
phŸomëric
 = 
PHOTOMETRIC_MINISWHITE
;

1815 i‡(
	`°ªq
(
›èrg
, "data"))

1817 
¸›_d©a
->
phŸomëric
 = 
INVERT_DATA_ONLY
;

1820 i‡(
	`°ªq
(
›èrg
, "both"))

1822 
¸›_d©a
->
phŸomëric
 = 
INVERT_DATA_AND_TAG
;

1826 
	`TIFFEº‹
("Missög o∏unknow¿›ti⁄ f‹ invîtög PHOTOMETRIC_INTERPRETATION", "%s", 
›èrg
);

1827 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1828 
	`exô
 (-1);

1831 
∑ge
->
hm¨gö
 = 
	`©of
(
›èrg
);

1832 
∑ge
->
mode
 |
PAGE_MODE_MARGINS
;

1835 
∑ge
->
vm¨gö
 = 
	`©of
(
›èrg
);

1836 
∑ge
->
mode
 |
PAGE_MODE_MARGINS
;

1839 
i
 = 0, 
›t_±r
 = 
	`°πok
 (
›èrg
, ",");

1840 ((
›t_±r
 !
NULL
Ë&& (
i
 < 
MAX_IMAGES
));

1841 (
›t_±r
 = 
	`°πok
 (
NULL
, ",")))

1848 i‡(
	`°ªq
(
›t_±r
, "odd"))

1850 
j
 = 1; j <
MAX_IMAGES
; j += 2)

1851 
imagñi°
[
i
++] = 
j
;

1852 *
image_cou¡
 = (
MAX_IMAGES
 - 1) / 2;

1857 i‡(
	`°ªq
(
›t_±r
, "even"))

1859 
j
 = 2; j <
MAX_IMAGES
; j += 2)

1860 
imagñi°
[
i
++] = 
j
;

1861 *
image_cou¡
 = 
MAX_IMAGES
 / 2;

1866 i‡(
	`°ªq
(
›t_±r
, "last"))

1867 
imagñi°
[
i
++] = 
MAX_IMAGES
;

1870 
£p
 = 
	`°Ωbrk
(
›t_±r
, ":-");

1871 i‡(!
£p
)

1872 
imagñi°
[
i
++] = 
	`©oi
(
›t_±r
);

1875 *
£p
 = '\0';

1876 
°¨t
 = 
	`©oi
 (
›t_±r
);

1877 i‡(!
	`°rcmp
((
£p
 + 1), "last"))

1878 
íd
 = 
MAX_IMAGES
;

1880 
íd
 = 
	`©oi
 (
£p
 + 1);

1881 
j
 = 
°¨t
; j <
íd
 && j - sèπ + 
i
 < 
MAX_IMAGES
; j++)

1882 
imagñi°
[
i
++] = 
j
;

1888 *
image_cou¡
 = 
i
;

1891 
	`tﬁowî
(
›èrg
[0]))

1893 'a': 
∑ge
->
‹õ¡
 = 
ORIENTATION_AUTO
;

1895 'p': 
∑ge
->
‹õ¡
 = 
ORIENTATION_PORTRAIT
;

1897 'l': 
∑ge
->
‹õ¡
 = 
ORIENTATION_LANDSCAPE
;

1899 : 
	`TIFFEº‹
 ("Orõ¡©i⁄ mu° bêp‹åaô,Ü™dsˇ≥, o∏auto.", "%s", 
›èrg
);

1900 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1901 
	`exô
 (-1);

1905 i‡(
	`ssˇnf
(
›èrg
, "%lfx%lf", &
∑ge
->
width
, &∑ge->
Àngth
) == 2)

1907 
	`°r˝y
 (
∑ge
->
«me
, "Custom");

1908 
∑ge
->
mode
 |
PAGE_MODE_PAPERSIZE
;

1911 i‡(
	`gë_∑ge_geomëry
 (
›èrg
, 
∑ge
))

1913 i‡(!
	`°rcmp
(
›èrg
, "list"))

1915 
	`TIFFEº‹
("", "Name Width Length (in inches)");

1916 
i
 = 0; i < 
MAX_PAPERNAMES
 - 1; i++)

1917 
	`TIFFEº‹
 ("", "%-15.15s %5.2f %5.2f",

1918 
P≠îTabÀ
[
i
].
«me
, P≠îTabÀ[i].
width
,

1919 
P≠îTabÀ
[
i
].
Àngth
);

1920 
	`exô
 (-1);

1923 
	`TIFFEº‹
 ("InvÆidÖ≠î size", "%s", 
›èrg
);

1924 
	`TIFFEº‹
 ("", "Select one of:");

1925 
	`TIFFEº‹
("", "Name Width Length (in inches)");

1926 
i
 = 0; i < 
MAX_PAPERNAMES
 - 1; i++)

1927 
	`TIFFEº‹
 ("", "%-15.15s %5.2f %5.2f",

1928 
P≠îTabÀ
[
i
].
«me
, P≠îTabÀ[i].
width
,

1929 
P≠îTabÀ
[
i
].
Àngth
);

1930 
	`exô
 (-1);

1934 
∑ge
->
mode
 |
PAGE_MODE_PAPERSIZE
;

1938 
¸›_d©a
->
¸›_mode
 |
CROP_ROTATE
;

1939 
	`°πoul
(
›èrg
, 
NULL
, 0))

1941 90: 
¸›_d©a
->
rŸ©i⁄
 = (
uöt16
)90;

1943 180: 
¸›_d©a
->
rŸ©i⁄
 = (
uöt16
)180;

1945 270: 
¸›_d©a
->
rŸ©i⁄
 = (
uöt16
)270;

1947 : 
	`TIFFEº‹
 ("RŸ©i⁄ mu° bê90, 180, o∏270 degªe†˛ockwi£", "%s", 
›èrg
);

1948 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1949 
	`exô
 (-1);

1953 
£p
 = 
	`°Ωbrk
(
›èrg
, ",:");

1954 i‡(
£p
)

1956 *
£p
 = '\0';

1957 
∑ge
->
cﬁs
 = 
	`©oi
(
›èrg
);

1958 
∑ge
->
rows
 = 
	`©oi
(
£p
 +1);

1962 
∑ge
->
cﬁs
 = 
	`©oi
(
›èrg
);

1963 
∑ge
->
rows
 = 
	`©oi
(
›èrg
);

1965 i‡((
∑ge
->
cﬁs
 *Öage->
rows
Ë> 
MAX_SECTIONS
)

1967 
	`TIFFEº‹
 ("Limô f‹ subdivisi⁄s, iêrow†x cﬁumns,Éx˚eded", "%d", 
MAX_SECTIONS
);

1968 
	`exô
 (-1);

1970 
∑ge
->
mode
 |
PAGE_MODE_ROWSCOLS
;

1973 i‡(
	`°ªq
(
›èrg
, "in"))

1975 
¸›_d©a
->
ªs_unô
 = 
RESUNIT_INCH
;

1976 
∑ge
->
ªs_unô
 = 
RESUNIT_INCH
;

1978 i‡(
	`°ªq
(
›èrg
, "cm"))

1980 
¸›_d©a
->
ªs_unô
 = 
RESUNIT_CENTIMETER
;

1981 
∑ge
->
ªs_unô
 = 
RESUNIT_CENTIMETER
;

1983 i‡(
	`°ªq
(
›èrg
, "px"))

1985 
¸›_d©a
->
ªs_unô
 = 
RESUNIT_NONE
;

1986 
∑ge
->
ªs_unô
 = 
RESUNIT_NONE
;

1990 
	`TIFFEº‹
 ("IŒegÆ unô o‡mósuª","%s", 
›èrg
);

1991 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

1992 
	`exô
 (-1);

1996 
∑ge
->
vªs
 = 
	`©of
 (
›èrg
);

1997 
∑ge
->
mode
 |
PAGE_MODE_RESOLUTION
;

2000 
¸›_d©a
->
¸›_mode
 |
CROP_WIDTH
;

2001 
¸›_d©a
->
width
 = 
	`©of
(
›èrg
);

2004 
¸›_d©a
->
¸›_mode
 |
CROP_LENGTH
;

2005 
¸›_d©a
->
Àngth
 = 
	`©of
(
›èrg
);

2008 
¸›_d©a
->
¸›_mode
 |
CROP_ZONES
;

2009 
i
 = 0, 
›t_±r
 = 
	`°πok
 (
›èrg
, ",");

2010 ((
›t_±r
 !
NULL
Ë&& (
i
 < 
MAX_REGIONS
));

2011 (
›t_±r
 = 
	`°πok
 (
NULL
, ",")), 
i
++)

2013 
¸›_d©a
->
z⁄es
++;

2014 
›t_off£t
 = 
	`°rchr
(
›t_±r
, ':');

2015 *
›t_off£t
 = '\0';

2016 
¸›_d©a
->
z⁄ñi°
[
i
].
posôi⁄
 = 
	`©oi
(
›t_±r
);

2017 
¸›_d©a
->
z⁄ñi°
[
i
].
tŸÆ
 = 
	`©oi
(
›t_off£t
 + 1);

2020 i‡((
›t_±r
 !
NULL
Ë&& (
i
 >
MAX_REGIONS
))

2022 
	`TIFFEº‹
("Z⁄êli°Éx˚ed†ªgi⁄Üimô", "%d", 
MAX_REGIONS
);

2023 
	`exô
 (-1);

2026 '?': 
	`TIFFEº‹
 ("For valid optionsÅype", "tiffcrop -h");

2027 
	`exô
 (-1);

2031 
	}
}

2038 
	$upd©e_ouçut_fûe
 (
TIFF
 **
tiffout
, *
mode
, 
autoödex
,

2039 *
ouäame
, *
∑ge
)

2041 
födex
 = 0;

2042 *
£p
;

2043 
fûíum
[16];

2044 
exp‹t_ext
[16];

2045 
exp‹äame
[
PATH_MAX
];

2047 i‡(
autoödex
 && (*
tiffout
 !
NULL
))

2050 
	`TIFFClo£
 (*
tiffout
);

2051 *
tiffout
 = 
NULL
;

2054 
	`°r˝y
 (
exp‹t_ext
, ".tiff");

2055 
	`mem£t
 (
exp‹äame
, '\0', 
PATH_MAX
);

2058 
	`°∫˝y
 (
exp‹äame
, 
ouäame
, 
PATH_MAX
 - 16);

2059 i‡(*
tiffout
 =
NULL
)

2061 i‡(
autoödex
)

2063 
födex
++;

2064 i‡((
£p
 = 
	`°r°r
(
exp‹äame
, ".tif")) || (sep = strstr(exportname, ".TIF")))

2066 
	`°∫˝y
 (
exp‹t_ext
, 
£p
, 5);

2067 *
£p
 = '\0';

2070 
	`°∫˝y
 (
exp‹t_ext
, ".tiff", 5);

2071 
exp‹t_ext
[5] = '\0';

2074 i‡(
födex
 > 
MAX_EXPORT_PAGES
)

2076 
	`TIFFEº‹
("upd©e_ouçut_fûe", "Maximum o‡%dÖage†≥∏fûêex˚eded", 
MAX_EXPORT_PAGES
);

2080 
	`•rötf
 (
fûíum
, "-%03d%s", 
födex
, 
exp‹t_ext
);

2081 
fûíum
[14] = '\0';

2082 
	`°∫ˇt
 (
exp‹äame
, 
fûíum
, 15);

2084 
exp‹äame
[
PATH_MAX
 - 1] = '\0';

2086 *
tiffout
 = 
	`TIFFO≥n
(
exp‹äame
, 
mode
);

2087 i‡(*
tiffout
 =
NULL
)

2089 
	`TIFFEº‹
("upd©e_ouçut_fûe", "U«bÀÅÿ›í ouçuàfûê%s", 
exp‹äame
);

2092 *
∑ge
 = 0;

2097 (*
∑ge
)++;

2100 
	}
}

2104 
	$maö
(
¨gc
, * 
¨gv
[])

2106 
›töd
;

2107 
uöt16
 
defc⁄fig
 = (uint16) -1;

2108 
uöt16
 
deffûl‹dî
 = 0;

2109 
uöt32
 
de·ûewidth
 = (uint32) 0;

2110 
uöt32
 
de·ûñígth
 = (uint32) 0;

2111 
uöt32
 
de‰ow•î°rù
 = (uint32) 0;

2112 
uöt32
 
dúnum
 = 0;

2114 
TIFF
 *
ö
 = 
NULL
;

2115 
TIFF
 *
out
 = 
NULL
;

2116 
mode
[10];

2117 *
mp
 = 
mode
;

2120 
image_d©a
 
image
;

2121 
¸›_mask
 
¸›
;

2122 
∑gedef
 
∑ge
;

2123 
∑ge£g
 
£˘i⁄s
[
MAX_SECTIONS
];

2124 
bufföfo
 
£g_buffs
[
MAX_SECTIONS
];

2125 
dump_›ts
 
dump
;

2126 *
ªad_buff
 = 
NULL
;

2127 *
¸›_buff
 = 
NULL
;

2128 *
£˘_buff
 = 
NULL
;

2129 *
£˘_§c
 = 
NULL
;

2130 
imagñi°
[
MAX_IMAGES
 + 1];

2131 
image_cou¡
 = 0;

2132 
dump_images
 = 0;

2133 
√xt_image
 = 0;

2134 
√xt_∑ge
 = 0;

2135 
tŸÆ_∑ges
 = 0;

2136 
tŸÆ_images
 = 0;

2137 
íd_of_öput
 = 
FALSE
;

2138 
£g
, 
Àngth
;

2139 
ãmp_fûíame
[
PATH_MAX
 + 1];

2141 
lôée_ídün
 = *((*)&little_endian) & '1';

2143 
	`öôImageD©a
(&
image
);

2144 
	`öôCr›Masks
(&
¸›
);

2145 
	`öôPageSëup
(&
∑ge
, 
£˘i⁄s
, 
£g_buffs
);

2146 
	`öôDumpO±i⁄s
(&
dump
);

2148 
	`¥o˚ss_comm™d_›ts
 (
¨gc
, 
¨gv
, 
mp
, 
mode
, &
dúnum
, &
defc⁄fig
,

2149 &
deffûl‹dî
, &
de·ûewidth
, &
de·ûñígth
, &
de‰ow•î°rù
,

2150 &
¸›
, &
∑ge
, &
dump
, 
imagñi°
, &
image_cou¡
);

2152 i‡(
¨gc
 - 
›töd
 < 2)

2153 
	`ußge
();

2155 i‡((
¨gc
 - 
›töd
) == 2)

2156 
∑geNum
 = -1;

2158 
tŸÆ_images
 = 0;

2160 
›töd
 < 
¨gc
 - 1)

2162 
ö
 = 
	`TIFFO≥n
 (
¨gv
[
›töd
], "r");

2163 i‡(
ö
 =
NULL
)

2167 
tŸÆ_images
 = 
	`TIFFNumbîOfDúe˘‹õs
(
ö
);

2168 i‡(
image_cou¡
 == 0)

2170 
dúnum
 = 0;

2171 
tŸÆ_∑ges
 = 
tŸÆ_images
;

2175 
dúnum
 = (
tdú_t
)(
imagñi°
[
√xt_image
] - 1);

2176 
√xt_image
++;

2181 i‡(
image_cou¡
 > 
tŸÆ_images
)

2182 
image_cou¡
 = 
tŸÆ_images
;

2184 
tŸÆ_∑ges
 = 
image_cou¡
;

2188 i‡(
dúnum
 =(
MAX_IMAGES
 - 1))

2189 
dúnum
 = 
tŸÆ_images
 - 1;

2191 i‡(
dúnum
 > (
tŸÆ_images
))

2193 
	`TIFFEº‹
 (
	`TIFFFûeName
(
ö
),

2195 ()
dúnum
 + 1, 
tŸÆ_images
);

2196 i‡(
out
 !
NULL
)

2197 (Ë
	`TIFFClo£
(
out
);

2201 i‡(
dúnum
 !0 && !
	`TIFFSëDúe˘‹y
(
ö
, (
tdú_t
)dirnum))

2203 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),"Eº‹, sëtög subdúe˘‹yáà%d", 
dúnum
);

2204 i‡(
out
 !
NULL
)

2205 (Ë
	`TIFFClo£
(
out
);

2209 
íd_of_öput
 = 
FALSE
;

2210 
íd_of_öput
 =
FALSE
)

2212 
c⁄fig
 = 
defc⁄fig
;

2213 
com¥essi⁄
 = 
defcom¥essi⁄
;

2214 
¥edi˘‹
 = 
deÂªdi˘‹
;

2215 
fûl‹dî
 = 
deffûl‹dî
;

2216 
row•î°rù
 = 
de‰ow•î°rù
;

2217 
tûewidth
 = 
de·ûewidth
;

2218 
tûñígth
 = 
de·ûñígth
;

2219 
g3›ts
 = 
defg3›ts
;

2221 i‡(
dump
.
f‹m©
 !
DUMP_NONE
)

2224 
dump_images
++;

2225 
Àngth
 = 
	`°æí
(
dump
.
öfûíame
);

2226 i‡(
Àngth
 > 0)

2228 i‡(
dump
.
öfûe
 !
NULL
)

2229 
	`f˛o£
 (
dump
.
öfûe
);

2233 
	`mem£t
 (
ãmp_fûíame
, '\0', 
PATH_MAX
 + 1);

2234 
	`•rötf
 (
ãmp_fûíame
, "%s-ªad-%03d.%s", 
dump
.
öfûíame
, 
dump_images
,

2235 (
dump
.
f‹m©
 =
DUMP_TEXT
) ? "txt" : "raw");

2236 i‡((
dump
.
öfûe
 = 
	`f›í
(
ãmp_fûíame
, dump.
mode
)Ë=
NULL
)

2238 
	`TIFFEº‹
 ("U«bÀÅÿ›í dum∞fûêf‹ wrôög", "%s", 
ãmp_fûíame
);

2239 
	`exô
 (-1);

2241 
	`dump_öfo
(
dump
.
öfûe
, dump.
f‹m©
, "Reading image","%d from %s",

2242 
dump_images
, 
	`TIFFFûeName
(
ö
));

2244 
Àngth
 = 
	`°æí
(
dump
.
outfûíame
);

2245 i‡(
Àngth
 > 0)

2247 i‡(
dump
.
outfûe
 !
NULL
)

2248 
	`f˛o£
 (
dump
.
outfûe
);

2252 
	`mem£t
 (
ãmp_fûíame
, '\0', 
PATH_MAX
 + 1);

2253 
	`•rötf
 (
ãmp_fûíame
, "%s-wrôe-%03d.%s", 
dump
.
outfûíame
, 
dump_images
,

2254 (
dump
.
f‹m©
 =
DUMP_TEXT
) ? "txt" : "raw");

2255 i‡((
dump
.
outfûe
 = 
	`f›í
(
ãmp_fûíame
, dump.
mode
)Ë=
NULL
)

2257 
	`TIFFEº‹
 ("U«bÀÅÿ›í dum∞fûêf‹ wrôög", "%s", 
ãmp_fûíame
);

2258 
	`exô
 (-1);

2260 
	`dump_öfo
(
dump
.
outfûe
, dump.
f‹m©
, "Writing image","%d from %s",

2261 
dump_images
, 
	`TIFFFûeName
(
ö
));

2265 i‡(
dump
.
debug
)

2266 
	`TIFFEº‹
("maö", "Ródög imagê%4d o‡%4dÅŸÆÖages.", 
dúnum
 + 1, 
tŸÆ_∑ges
);

2268 i‡(
	`lﬂdImage
(
ö
, &
image
, &
dump
, &
ªad_buff
))

2270 
	`TIFFEº‹
("main", "UnableÅoÜoad source image");

2271 
	`exô
 (-1);

2276 i‡(
image
.
adju°míts
 != 0)

2278 i‡(
	`c‹ª˘_‹õ¡©i⁄
(&
image
, &
ªad_buff
))

2279 
	`TIFFEº‹
("main", "UnableÅo correct image orientation");

2282 i‡(
	`gëCr›Off£ts
(&
image
, &
¸›
, &
dump
))

2284 
	`TIFFEº‹
("main", "UnableÅo define cropÑegions");

2285 
	`exô
 (-1);

2288 i‡(
¸›
.
£À˘i⁄s
 > 0)

2290 i‡(
	`¥o˚ssCr›Sñe˘i⁄s
(&
image
, &
¸›
, &
ªad_buff
, 
£g_buffs
))

2292 
	`TIFFEº‹
("main", "UnableÅoÖrocess image selections");

2293 
	`exô
 (-1);

2298 i‡(
	`¸óãCr›≥dImage
(&
image
, &
¸›
, &
ªad_buff
, &
¸›_buff
))

2300 
	`TIFFEº‹
("main", "UnableÅo create output image");

2301 
	`exô
 (-1);

2304 i‡(
∑ge
.
mode
 =
PAGE_MODE_NONE
)

2306 i‡(
¸›
.
£À˘i⁄s
 > 0)

2308 
	`wrôeSñe˘i⁄s
(
ö
, &
out
, &
¸›
, &
image
, &
dump
, 
£g_buffs
,

2309 
mp
, 
¨gv
[
¨gc
 - 1], &
√xt_∑ge
, 
tŸÆ_∑ges
);

2313 i‡(
	`upd©e_ouçut_fûe
 (&
out
, 
mp
, 
¸›
.
exp_mode
, 
¨gv
[
¨gc
 - 1],

2314 &
√xt_∑ge
))

2315 
	`exô
 (1);

2316 i‡(
	`wrôeCr›≥dImage
(
ö
, 
out
, &
image
, &
dump
,
¸›
.
comböed_width
,

2317 
¸›
.
comböed_Àngth
, 
¸›_buff
, 
√xt_∑ge
, 
tŸÆ_∑ges
))

2319 
	`TIFFEº‹
("main", "UnableÅo writeÇew image");

2320 
	`exô
 (-1);

2329 i‡(
¸›_buff
 !
NULL
)

2330 
£˘_§c
 = 
¸›_buff
;

2332 
£˘_§c
 = 
ªad_buff
;

2334 i‡(
	`compuãOuçutPixñOff£ts
(&
¸›
, &
image
, &
∑ge
, 
£˘i⁄s
, &
dump
))

2336 
	`TIFFEº‹
("main", "UnableÅo compute output section data");

2337 
	`exô
 (-1);

2342 i‡(
	`upd©e_ouçut_fûe
 (&
out
, 
mp
, 
¸›
.
exp_mode
, 
¨gv
[
¨gc
 - 1], &
√xt_∑ge
))

2343 
	`exô
 (1);

2345 i‡(
	`wrôeImageSe˘i⁄s
(
ö
, 
out
, &
image
, &
∑ge
, 
£˘i⁄s
, &
dump
, 
£˘_§c
, &
£˘_buff
))

2347 
	`TIFFEº‹
("main", "UnableÅo write image sections");

2348 
	`exô
 (-1);

2353 i‡(
image_cou¡
 == 0)

2354 
dúnum
++;

2357 
dúnum
 = (
tdú_t
)(
imagñi°
[
√xt_image
] - 1);

2358 
√xt_image
++;

2361 i‡(
dúnum
 =
MAX_IMAGES
 - 1)

2362 
dúnum
 = 
	`TIFFNumbîOfDúe˘‹õs
(
ö
) - 1;

2364 i‡(!
	`TIFFSëDúe˘‹y
(
ö
, (
tdú_t
)
dúnum
))

2365 
íd_of_öput
 = 
TRUE
;

2367 
	`TIFFClo£
(
ö
);

2368 
›töd
++;

2372 i‡(
ªad_buff
)

2373 
	`_TIFF‰ì
(
ªad_buff
);

2375 i‡(
¸›_buff
)

2376 
	`_TIFF‰ì
(
¸›_buff
);

2378 i‡(
£˘_buff
)

2379 
	`_TIFF‰ì
(
£˘_buff
);

2382 
£g
 = 0; seg < 
¸›
.
£À˘i⁄s
; seg++)

2383 
	`_TIFF‰ì
 (
£g_buffs
[
£g
].
buf„r
);

2385 i‡(
dump
.
f‹m©
 !
DUMP_NONE
)

2387 i‡(
dump
.
öfûe
 !
NULL
)

2388 
	`f˛o£
 (
dump
.
öfûe
);

2390 i‡(
dump
.
outfûe
 !
NULL
)

2392 
	`dump_öfo
 (
dump
.
outfûe
, dump.
f‹m©
, "", "Com∂ëedÑu¿f‹ %s", 
	`TIFFFûeName
(
out
));

2393 
	`f˛o£
 (
dump
.
outfûe
);

2397 
	`TIFFClo£
(
out
);

2400 
	}
}

2404 
	$dump_d©a
 (
FILE
 *
dumpfûe
, 
f‹m©
, *
dump_èg
, *
d©a
, 
uöt32
 
cou¡
)

2406 
j
, 
k
;

2407 
uöt32
 
i
;

2408 
dump_¨øy
[10];

2409 
bô£t
;

2411 i‡(
dumpfûe
 =
NULL
)

2413 
	`TIFFEº‹
 ("", "Invalid FILEÖointer for dump file");

2417 i‡(
f‹m©
 =
DUMP_TEXT
)

2419 
	`Ârötf
 (
dumpfûe
," %† ", 
dump_èg
);

2420 
i
 = 0; i < 
cou¡
; i++)

2422 
j
 = 0, 
k
 = 7; j < 8; j++, k--)

2424 
bô£t
 = (*(
d©a
 + 
i
)Ë& ((()1 << 
k
)) ? 1 : 0;

2425 
	`•rötf
(&
dump_¨øy
[
j
], (
bô£t
) ? "1" : "0");

2427 
dump_¨øy
[8] = '\0';

2428 
	`Ârötf
 (
dumpfûe
," %s", 
dump_¨øy
);

2430 
	`Ârötf
 (
dumpfûe
,"\n");

2434 i‡((
	`fwrôe
 (
d©a
, 1, 
cou¡
, 
dumpfûe
)) != count)

2436 
	`TIFFEº‹
 ("", "UnableÅo write binary dataÅo dump file");

2442 
	}
}

2444 
	$dump_byã
 (
FILE
 *
dumpfûe
, 
f‹m©
, *
dump_èg
, 
d©a
)

2446 
j
, 
k
;

2447 
dump_¨øy
[10];

2448 
bô£t
;

2450 i‡(
dumpfûe
 =
NULL
)

2452 
	`TIFFEº‹
 ("", "Invalid FILEÖointer for dump file");

2456 i‡(
f‹m©
 =
DUMP_TEXT
)

2458 
	`Ârötf
 (
dumpfûe
," %† ", 
dump_èg
);

2459 
j
 = 0, 
k
 = 7; j < 8; j++, k--)

2461 
bô£t
 = 
d©a
 & ((()1 << 
k
)) ? 1 : 0;

2462 
	`•rötf
(&
dump_¨øy
[
j
], (
bô£t
) ? "1" : "0");

2464 
dump_¨øy
[8] = '\0';

2465 
	`Ârötf
 (
dumpfûe
," %s\n", 
dump_¨øy
);

2469 i‡((
	`fwrôe
 (&
d©a
, 1, 1, 
dumpfûe
)) != 1)

2471 
	`TIFFEº‹
 ("", "UnableÅo write binary dataÅo dump file");

2477 
	}
}

2479 
	$dump_sh‹t
 (
FILE
 *
dumpfûe
, 
f‹m©
, *
dump_èg
, 
uöt16
 
d©a
)

2481 
j
, 
k
;

2482 
dump_¨øy
[20];

2483 
bô£t
;

2485 i‡(
dumpfûe
 =
NULL
)

2487 
	`TIFFEº‹
 ("", "Invalid FILEÖointer for dump file");

2491 i‡(
f‹m©
 =
DUMP_TEXT
)

2493 
	`Ârötf
 (
dumpfûe
," %† ", 
dump_èg
);

2494 
j
 = 0, 
k
 = 15; k >= 0; j++, k--)

2496 
bô£t
 = 
d©a
 & ((()1 << 
k
)) ? 1 : 0;

2497 
	`•rötf
(&
dump_¨øy
[
j
], (
bô£t
) ? "1" : "0");

2498 i‡((
k
 % 8) == 0)

2499 
	`•rötf
(&
dump_¨øy
[++
j
], " ");

2501 
dump_¨øy
[17] = '\0';

2502 
	`Ârötf
 (
dumpfûe
," %s\n", 
dump_¨øy
);

2506 i‡((
	`fwrôe
 (&
d©a
, 2, 1, 
dumpfûe
)) != 2)

2508 
	`TIFFEº‹
 ("", "UnableÅo write binary dataÅo dump file");

2514 
	}
}

2516 
	$dump_l⁄g
 (
FILE
 *
dumpfûe
, 
f‹m©
, *
dump_èg
, 
uöt32
 
d©a
)

2518 
j
, 
k
;

2519 
dump_¨øy
[40];

2520 
bô£t
;

2522 i‡(
dumpfûe
 =
NULL
)

2524 
	`TIFFEº‹
 ("", "Invalid FILEÖointer for dump file");

2528 i‡(
f‹m©
 =
DUMP_TEXT
)

2530 
	`Ârötf
 (
dumpfûe
," %† ", 
dump_èg
);

2531 
j
 = 0, 
k
 = 31; k >= 0; j++, k--)

2533 
bô£t
 = 
d©a
 & (((
uöt32
)1 << 
k
)) ? 1 : 0;

2534 
	`•rötf
(&
dump_¨øy
[
j
], (
bô£t
) ? "1" : "0");

2535 i‡((
k
 % 8) == 0)

2536 
	`•rötf
(&
dump_¨øy
[++
j
], " ");

2538 
dump_¨øy
[35] = '\0';

2539 
	`Ârötf
 (
dumpfûe
," %s\n", 
dump_¨øy
);

2543 i‡((
	`fwrôe
 (&
d©a
, 4, 1, 
dumpfûe
)) != 4)

2545 
	`TIFFEº‹
 ("", "UnableÅo write binary dataÅo dump file");

2550 
	}
}

2552 
	$dump_wide
 (
FILE
 *
dumpfûe
, 
f‹m©
, *
dump_èg
, 
uöt64
 
d©a
)

2554 
j
, 
k
;

2555 
dump_¨øy
[80];

2556 
bô£t
;

2558 i‡(
dumpfûe
 =
NULL
)

2560 
	`TIFFEº‹
 ("", "Invalid FILEÖointer for dump file");

2564 i‡(
f‹m©
 =
DUMP_TEXT
)

2566 
	`Ârötf
 (
dumpfûe
," %† ", 
dump_èg
);

2567 
j
 = 0, 
k
 = 63; k >= 0; j++, k--)

2569 
bô£t
 = 
d©a
 & (((
uöt64
)1 << 
k
)) ? 1 : 0;

2570 
	`•rötf
(&
dump_¨øy
[
j
], (
bô£t
) ? "1" : "0");

2571 i‡((
k
 % 8) == 0)

2572 
	`•rötf
(&
dump_¨øy
[++
j
], " ");

2574 
dump_¨øy
[71] = '\0';

2575 
	`Ârötf
 (
dumpfûe
," %s\n", 
dump_¨øy
);

2579 i‡((
	`fwrôe
 (&
d©a
, 8, 1, 
dumpfûe
)) != 8)

2581 
	`TIFFEº‹
 ("", "UnableÅo write binary dataÅo dump file");

2587 
	}
}

2589 
	$dump_öfo
(
FILE
 *
dumpfûe
, 
f‹m©
, *
¥efix
, *
msg
, ...)

2591 i‡(
f‹m©
 =
DUMP_TEXT
)

2593 
va_li°
 
≠
;

2594 
	`va_°¨t
(
≠
, 
msg
);

2595 
	`Ârötf
(
dumpfûe
, "%†", 
¥efix
);

2596 
	`vÂrötf
(
dumpfûe
, 
msg
, 
≠
);

2597 
	`Ârötf
(
dumpfûe
, "\n");

2599 
	}
}

2601 
	$dump_buf„r
 (
FILE
* 
dumpfûe
, 
f‹m©
, 
uöt32
 
rows
, uöt32 
width
,

2602 
uöt32
 
row
, *
buff
)

2604 
j
, 
k
;

2605 
uöt32
 
i
;

2606 * 
dump_±r
;

2608 i‡(
dumpfûe
 =
NULL
)

2610 
	`TIFFEº‹
 ("", "Invalid FILEÖointer for dump file");

2614 
i
 = 0; i < 
rows
; i++)

2616 
dump_±r
 = 
buff
 + (
i
 * 
width
);

2617 i‡(
f‹m©
 =
DUMP_TEXT
)

2618 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

2620 
row
 + 
i
 + 1, 
width
,Ñow * width);

2622 
j
 = 0, 
k
 = 
width
; k >10; j +10, k -10, 
dump_±r
 += 10)

2623 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "", 
dump_±r
, 10);

2624 i‡(
k
 > 0)

2625 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "", 
dump_±r
, 
k
);

2628 
	}
}

2637 
	$exåa˘C⁄tigSam∂esByãs
 (
uöt8
 *
ö
, uöt8 *
out
, 
uöt32
 
cﬁs
,

2638 
tßm∂e_t
 
ßm∂e
, 
uöt16
 
•p
, uöt16 
bps
,

2639 
tßm∂e_t
 
cou¡
, 
uöt32
 
°¨t
, uöt32 
íd
)

2641 
i
, 
byãs_≥r_ßm∂e
, 
södex
;

2642 
uöt32
 
cﬁ
, 
d°_rowsize
, 
bô_off£t
;

2643 
uöt32
 
§c_byã
, 
§c_bô
;

2644 
uöt8
 *
§c
 = 
ö
;

2645 
uöt8
 *
d°
 = 
out
;

2647 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

2649 
	`TIFFEº‹
("extractContigSamplesBytes","Invalid input or output buffer");

2653 i‡((
°¨t
 > 
íd
Ë|| (°¨à> 
cﬁs
))

2655 
	`TIFFEº‹
 ("extractContigSamplesBytes",

2656 "InvÆid sèπ cﬁum¿vÆuê%d ign‹ed", 
°¨t
);

2657 
°¨t
 = 0;

2659 i‡((
íd
 =0Ë|| (íd > 
cﬁs
))

2661 
	`TIFFEº‹
 ("extractContigSamplesBytes",

2662 "InvÆidÉnd cﬁum¿vÆuê%d ign‹ed", 
íd
);

2663 
íd
 = 
cﬁs
;

2666 
d°_rowsize
 = (
bps
 * (
íd
 - 
°¨t
Ë* 
cou¡
) / 8;

2668 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

2670 i‡(
cou¡
 =
•p
)

2672 
§c
 = 
ö
 + (
°¨t
 * 
•p
 * 
byãs_≥r_ßm∂e
);

2673 
	`_TIFFmem˝y
 (
d°
, 
§c
, 
d°_rowsize
);

2677 
cﬁ
 = 
°¨t
; cﬁ < 
íd
; col++)

2679 
södex
 = 
ßm∂e
; (södex < 
•p
Ë&& (södex < (ßm∂ê+ 
cou¡
)); sindex++)

2681 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

2682 i‡(
södex
 == 0)

2684 
§c_byã
 = 
bô_off£t
 / 8;

2685 
§c_bô
 = 
bô_off£t
 % 8;

2689 
§c_byã
 = (
bô_off£t
 + (
södex
 * 
bps
)) / 8;

2690 
§c_bô
 = (
bô_off£t
 + (
södex
 * 
bps
)) % 8;

2692 
§c
 = 
ö
 + 
§c_byã
;

2693 
i
 = 0; i < 
byãs_≥r_ßm∂e
; i++)

2694 *
d°
++ = *
§c
++;

2700 
	}
}

2703 
	$exåa˘C⁄tigSam∂es8bôs
 (
uöt8
 *
ö
, uöt8 *
out
, 
uöt32
 
cﬁs
,

2704 
tßm∂e_t
 
ßm∂e
, 
uöt16
 
•p
, uöt16 
bps
,

2705 
tßm∂e_t
 
cou¡
, 
uöt32
 
°¨t
, uöt32 
íd
)

2707 
ªady_bôs
 = 0, 
södex
 = 0;

2708 
uöt32
 
cﬁ
, 
§c_byã
, 
§c_bô
, 
bô_off£t
;

2709 
uöt8
 
maskbôs
 = 0, 
m©chbôs
 = 0;

2710 
uöt8
 
buff1
 = 0, 
buff2
 = 0;

2711 
uöt8
 *
§c
 = 
ö
;

2712 
uöt8
 *
d°
 = 
out
;

2714 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

2716 
	`TIFFEº‹
("extractContigSamples8bits","Invalid input or output buffer");

2720 i‡((
°¨t
 > 
íd
Ë|| (°¨à> 
cﬁs
))

2722 
	`TIFFEº‹
 ("extractContigSamples8bits",

2723 "InvÆid sèπ cﬁum¿vÆuê%d ign‹ed", 
°¨t
);

2724 
°¨t
 = 0;

2726 i‡((
íd
 =0Ë|| (íd > 
cﬁs
))

2728 
	`TIFFEº‹
 ("extractContigSamples8bits",

2729 "InvÆidÉnd cﬁum¿vÆuê%d ign‹ed", 
íd
);

2730 
íd
 = 
cﬁs
;

2733 
ªady_bôs
 = 0;

2734 
maskbôs
 = (
uöt8
)-1 >> ( 8 - 
bps
);

2735 
buff1
 = 
buff2
 = 0;

2736 
cﬁ
 = 
°¨t
; cﬁ < 
íd
; col++)

2738 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

2739 
södex
 = 
ßm∂e
; (södex < 
•p
Ë&& (södex < (ßm∂ê+ 
cou¡
)); sindex++)

2741 i‡(
södex
 == 0)

2743 
§c_byã
 = 
bô_off£t
 / 8;

2744 
§c_bô
 = 
bô_off£t
 % 8;

2748 
§c_byã
 = (
bô_off£t
 + (
södex
 * 
bps
)) / 8;

2749 
§c_bô
 = (
bô_off£t
 + (
södex
 * 
bps
)) % 8;

2752 
§c
 = 
ö
 + 
§c_byã
;

2753 
m©chbôs
 = 
maskbôs
 << (8 - 
§c_bô
 - 
bps
);

2754 
buff1
 = ((*
§c
Ë& 
m©chbôs
Ë<< (
§c_bô
);

2757 i‡(
ªady_bôs
 >= 8)

2759 *
d°
++ = 
buff2
;

2760 
buff2
 = 
buff1
;

2761 
ªady_bôs
 -= 8;

2764 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

2765 
ªady_bôs
 +
bps
;

2769 
ªady_bôs
 > 0)

2771 
buff1
 = (
buff2
 & (()255 << (8 - 
ªady_bôs
)));

2772 *
d°
++ = 
buff1
;

2773 
ªady_bôs
 -= 8;

2777 
	}
}

2780 
	$exåa˘C⁄tigSam∂es16bôs
 (
uöt8
 *
ö
, uöt8 *
out
, 
uöt32
 
cﬁs
,

2781 
tßm∂e_t
 
ßm∂e
, 
uöt16
 
•p
, uöt16 
bps
,

2782 
tßm∂e_t
 
cou¡
, 
uöt32
 
°¨t
, uöt32 
íd
)

2784 
ªady_bôs
 = 0, 
södex
 = 0;

2785 
uöt32
 
cﬁ
, 
§c_byã
, 
§c_bô
, 
bô_off£t
;

2786 
uöt16
 
maskbôs
 = 0, 
m©chbôs
 = 0;

2787 
uöt16
 
buff1
 = 0, 
buff2
 = 0;

2788 
uöt8
 
byãbuff
 = 0;

2789 
uöt8
 *
§c
 = 
ö
;

2790 
uöt8
 *
d°
 = 
out
;

2792 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

2794 
	`TIFFEº‹
("extractContigSamples16bits","Invalid input or output buffer");

2798 i‡((
°¨t
 > 
íd
Ë|| (°¨à> 
cﬁs
))

2800 
	`TIFFEº‹
 ("extractContigSamples16bits",

2801 "InvÆid sèπ cﬁum¿vÆuê%d ign‹ed", 
°¨t
);

2802 
°¨t
 = 0;

2804 i‡((
íd
 =0Ë|| (íd > 
cﬁs
))

2806 
	`TIFFEº‹
 ("extractContigSamples16bits",

2807 "InvÆidÉnd cﬁum¿vÆuê%d ign‹ed", 
íd
);

2808 
íd
 = 
cﬁs
;

2811 
ªady_bôs
 = 0;

2812 
maskbôs
 = (
uöt16
)-1 >> (16 - 
bps
);

2814 
cﬁ
 = 
°¨t
; cﬁ < 
íd
; col++)

2816 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

2817 
södex
 = 
ßm∂e
; (södex < 
•p
Ë&& (södex < (ßm∂ê+ 
cou¡
)); sindex++)

2819 i‡(
södex
 == 0)

2821 
§c_byã
 = 
bô_off£t
 / 8;

2822 
§c_bô
 = 
bô_off£t
 % 8;

2826 
§c_byã
 = (
bô_off£t
 + (
södex
 * 
bps
)) / 8;

2827 
§c_bô
 = (
bô_off£t
 + (
södex
 * 
bps
)) % 8;

2830 
§c
 = 
ö
 + 
§c_byã
;

2831 
m©chbôs
 = 
maskbôs
 << (16 - 
§c_bô
 - 
bps
);

2833 i‡(
lôée_ídün
)

2834 
buff1
 = (
§c
[0] << 8) | src[1];

2836 
buff1
 = (
§c
[1] << 8) | src[0];

2838 
buff1
 = (buff1 & 
m©chbôs
Ë<< (
§c_bô
);

2839 i‡(
ªady_bôs
 < 8)

2841 
byãbuff
 = 0;

2842 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

2846 
byãbuff
 = (
buff2
 >> 8);

2847 *
d°
++ = 
byãbuff
;

2848 
ªady_bôs
 -= 8;

2850 
buff2
 = ((buff2 << 8Ë| (
buff1
 >> 
ªady_bôs
));

2852 
ªady_bôs
 +
bps
;

2857 
ªady_bôs
 > 0)

2859 
byãbuff
 = (
buff2
 >> 8);

2860 *
d°
++ = 
byãbuff
;

2861 
ªady_bôs
 -= 8;

2865 
	}
}

2869 
	$exåa˘C⁄tigSam∂es24bôs
 (
uöt8
 *
ö
, uöt8 *
out
, 
uöt32
 
cﬁs
,

2870 
tßm∂e_t
 
ßm∂e
, 
uöt16
 
•p
, uöt16 
bps
,

2871 
tßm∂e_t
 
cou¡
, 
uöt32
 
°¨t
, uöt32 
íd
)

2873 
ªady_bôs
 = 0, 
södex
 = 0;

2874 
uöt32
 
cﬁ
, 
§c_byã
, 
§c_bô
, 
bô_off£t
;

2875 
uöt32
 
maskbôs
 = 0, 
m©chbôs
 = 0;

2876 
uöt32
 
buff1
 = 0, 
buff2
 = 0;

2877 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0;

2878 
uöt8
 *
§c
 = 
ö
;

2879 
uöt8
 *
d°
 = 
out
;

2881 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

2883 
	`TIFFEº‹
("extractContigSamples24bits","Invalid input or output buffer");

2887 i‡((
°¨t
 > 
íd
Ë|| (°¨à> 
cﬁs
))

2889 
	`TIFFEº‹
 ("extractContigSamples24bits",

2890 "InvÆid sèπ cﬁum¿vÆuê%d ign‹ed", 
°¨t
);

2891 
°¨t
 = 0;

2893 i‡((
íd
 =0Ë|| (íd > 
cﬁs
))

2895 
	`TIFFEº‹
 ("extractContigSamples24bits",

2896 "InvÆidÉnd cﬁum¿vÆuê%d ign‹ed", 
íd
);

2897 
íd
 = 
cﬁs
;

2900 
ªady_bôs
 = 0;

2901 
maskbôs
 = (
uöt32
)-1 >> ( 32 - 
bps
);

2902 
cﬁ
 = 
°¨t
; cﬁ < 
íd
; col++)

2905 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

2906 
södex
 = 
ßm∂e
; (södex < 
•p
Ë&& (södex < (ßm∂ê+ 
cou¡
)); sindex++)

2908 i‡(
södex
 == 0)

2910 
§c_byã
 = 
bô_off£t
 / 8;

2911 
§c_bô
 = 
bô_off£t
 % 8;

2915 
§c_byã
 = (
bô_off£t
 + (
södex
 * 
bps
)) / 8;

2916 
§c_bô
 = (
bô_off£t
 + (
södex
 * 
bps
)) % 8;

2919 
§c
 = 
ö
 + 
§c_byã
;

2920 
m©chbôs
 = 
maskbôs
 << (32 - 
§c_bô
 - 
bps
);

2921 i‡(
lôée_ídün
)

2922 
buff1
 = (
§c
[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];

2924 
buff1
 = (
§c
[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];

2925 
buff1
 = (buff1 & 
m©chbôs
Ë<< (
§c_bô
);

2927 i‡(
ªady_bôs
 < 16)

2929 
byãbuff1
 = 
byãbuff2
 = 0;

2930 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

2934 
byãbuff1
 = (
buff2
 >> 24);

2935 *
d°
++ = 
byãbuff1
;

2936 
byãbuff2
 = (
buff2
 >> 16);

2937 *
d°
++ = 
byãbuff2
;

2938 
ªady_bôs
 -= 16;

2941 
buff2
 = ((buff2 << 16Ë| (
buff1
 >> 
ªady_bôs
));

2943 
ªady_bôs
 +
bps
;

2948 
ªady_bôs
 > 0)

2950 
byãbuff1
 = (
buff2
 >> 24);

2951 *
d°
++ = 
byãbuff1
;

2953 
buff2
 = (buff2 << 8);

2954 
byãbuff2
 = 
byãbuff1
;

2955 
ªady_bôs
 -= 8;

2959 
	}
}

2962 
	$exåa˘C⁄tigSam∂es32bôs
 (
uöt8
 *
ö
, uöt8 *
out
, 
uöt32
 
cﬁs
,

2963 
tßm∂e_t
 
ßm∂e
, 
uöt16
 
•p
, uöt16 
bps
,

2964 
tßm∂e_t
 
cou¡
, 
uöt32
 
°¨t
, uöt32 
íd
)

2966 
ªady_bôs
 = 0, 
södex
 = 0, 
shi·_width
 = 0;

2967 
uöt32
 
cﬁ
, 
§c_byã
, 
§c_bô
, 
bô_off£t
;

2968 
uöt32
 
l⁄gbuff1
 = 0, 
l⁄gbuff2
 = 0;

2969 
uöt64
 
maskbôs
 = 0, 
m©chbôs
 = 0;

2970 
uöt64
 
buff1
 = 0, 
buff2
 = 0, 
buff3
 = 0;

2971 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0, 
byãbuff3
 = 0, 
byãbuff4
 = 0;

2972 
uöt8
 *
§c
 = 
ö
;

2973 
uöt8
 *
d°
 = 
out
;

2975 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

2977 
	`TIFFEº‹
("extractContigSamples32bits","Invalid input or output buffer");

2982 i‡((
°¨t
 > 
íd
Ë|| (°¨à> 
cﬁs
))

2984 
	`TIFFEº‹
 ("extractContigSamples32bits",

2985 "InvÆid sèπ cﬁum¿vÆuê%d ign‹ed", 
°¨t
);

2986 
°¨t
 = 0;

2988 i‡((
íd
 =0Ë|| (íd > 
cﬁs
))

2990 
	`TIFFEº‹
 ("extractContigSamples32bits",

2991 "InvÆidÉnd cﬁum¿vÆuê%d ign‹ed", 
íd
);

2992 
íd
 = 
cﬁs
;

2995 
shi·_width
 = ((
bps
 + 7) / 8) + 1;

2996 
ªady_bôs
 = 0;

2997 
maskbôs
 = (
uöt64
)-1 >> ( 64 - 
bps
);

2998 
cﬁ
 = 
°¨t
; cﬁ < 
íd
; col++)

3001 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

3002 
södex
 = 
ßm∂e
; (södex < 
•p
Ë&& (södex < (ßm∂ê+ 
cou¡
)); sindex++)

3004 i‡(
södex
 == 0)

3006 
§c_byã
 = 
bô_off£t
 / 8;

3007 
§c_bô
 = 
bô_off£t
 % 8;

3011 
§c_byã
 = (
bô_off£t
 + (
södex
 * 
bps
)) / 8;

3012 
§c_bô
 = (
bô_off£t
 + (
södex
 * 
bps
)) % 8;

3015 
§c
 = 
ö
 + 
§c_byã
;

3016 
m©chbôs
 = 
maskbôs
 << (64 - 
§c_bô
 - 
bps
);

3017 i‡(
lôée_ídün
)

3019 
l⁄gbuff1
 = (
§c
[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];

3020 
l⁄gbuff2
 = 
l⁄gbuff1
;

3024 
l⁄gbuff1
 = (
§c
[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];

3025 
l⁄gbuff2
 = 
l⁄gbuff1
;

3028 
buff3
 = ((
uöt64
)
l⁄gbuff1
 << 32Ë| 
l⁄gbuff2
;

3029 
buff1
 = (
buff3
 & 
m©chbôs
Ë<< (
§c_bô
);

3032 i‡(
ªady_bôs
 >= 32)

3034 
byãbuff1
 = (
buff2
 >> 56);

3035 *
d°
++ = 
byãbuff1
;

3036 
byãbuff2
 = (
buff2
 >> 48);

3037 *
d°
++ = 
byãbuff2
;

3038 
byãbuff3
 = (
buff2
 >> 40);

3039 *
d°
++ = 
byãbuff3
;

3040 
byãbuff4
 = (
buff2
 >> 32);

3041 *
d°
++ = 
byãbuff4
;

3042 
ªady_bôs
 -= 32;

3045 
buff2
 = ((buff2 << 32Ë| (
buff1
 >> 
ªady_bôs
));

3049 
byãbuff1
 = 
byãbuff2
 = 
byãbuff3
 = 
byãbuff4
 = 0;

3050 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

3052 
ªady_bôs
 +
bps
;

3055 
ªady_bôs
 > 0)

3057 
byãbuff1
 = (
buff2
 >> 56);

3058 *
d°
++ = 
byãbuff1
;

3059 
buff2
 = (buff2 << 8);

3060 
ªady_bôs
 -= 8;

3064 
	}
}

3067 
	$exåa˘C⁄tigSam∂esShi·ed8bôs
 (
uöt8
 *
ö
, uöt8 *
out
, 
uöt32
 
cﬁs
,

3068 
tßm∂e_t
 
ßm∂e
, 
uöt16
 
•p
, uöt16 
bps
,

3069 
tßm∂e_t
 
cou¡
, 
uöt32
 
°¨t
, uöt32 
íd
,

3070 
shi·
)

3072 
ªady_bôs
 = 0, 
södex
 = 0;

3073 
uöt32
 
cﬁ
, 
§c_byã
, 
§c_bô
, 
bô_off£t
;

3074 
uöt8
 
maskbôs
 = 0, 
m©chbôs
 = 0;

3075 
uöt8
 
buff1
 = 0, 
buff2
 = 0;

3076 
uöt8
 *
§c
 = 
ö
;

3077 
uöt8
 *
d°
 = 
out
;

3079 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

3081 
	`TIFFEº‹
("extractContigSamplesShifted8bits","Invalid input or output buffer");

3085 i‡((
°¨t
 > 
íd
Ë|| (°¨à> 
cﬁs
))

3087 
	`TIFFEº‹
 ("extractContigSamplesShifted8bits",

3088 "InvÆid sèπ cﬁum¿vÆuê%d ign‹ed", 
°¨t
);

3089 
°¨t
 = 0;

3091 i‡((
íd
 =0Ë|| (íd > 
cﬁs
))

3093 
	`TIFFEº‹
 ("extractContigSamplesShifted8bits",

3094 "InvÆidÉnd cﬁum¿vÆuê%d ign‹ed", 
íd
);

3095 
íd
 = 
cﬁs
;

3098 
ªady_bôs
 = 
shi·
;

3099 
maskbôs
 = (
uöt8
)-1 >> ( 8 - 
bps
);

3100 
buff1
 = 
buff2
 = 0;

3101 
cﬁ
 = 
°¨t
; cﬁ < 
íd
; col++)

3103 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

3104 
södex
 = 
ßm∂e
; (södex < 
•p
Ë&& (södex < (ßm∂ê+ 
cou¡
)); sindex++)

3106 i‡(
södex
 == 0)

3108 
§c_byã
 = 
bô_off£t
 / 8;

3109 
§c_bô
 = 
bô_off£t
 % 8;

3113 
§c_byã
 = (
bô_off£t
 + (
södex
 * 
bps
)) / 8;

3114 
§c_bô
 = (
bô_off£t
 + (
södex
 * 
bps
)) % 8;

3117 
§c
 = 
ö
 + 
§c_byã
;

3118 
m©chbôs
 = 
maskbôs
 << (8 - 
§c_bô
 - 
bps
);

3119 
buff1
 = ((*
§c
Ë& 
m©chbôs
Ë<< (
§c_bô
);

3120 i‡((
cﬁ
 =
°¨t
Ë&& (
södex
 =
ßm∂e
))

3121 
buff2
 = *
§c
 & ((
uöt8
)-1Ë<< (
shi·
);

3124 i‡(
ªady_bôs
 >= 8)

3126 *
d°
++ |
buff2
;

3127 
buff2
 = 
buff1
;

3128 
ªady_bôs
 -= 8;

3131 
buff2
 = buff2 | (
buff1
 >> 
ªady_bôs
);

3132 
ªady_bôs
 +
bps
;

3136 
ªady_bôs
 > 0)

3138 
buff1
 = (
buff2
 & (()255 << (8 - 
ªady_bôs
)));

3139 *
d°
++ = 
buff1
;

3140 
ªady_bôs
 -= 8;

3144 
	}
}

3147 
	$exåa˘C⁄tigSam∂esShi·ed16bôs
 (
uöt8
 *
ö
, uöt8 *
out
, 
uöt32
 
cﬁs
,

3148 
tßm∂e_t
 
ßm∂e
, 
uöt16
 
•p
, uöt16 
bps
,

3149 
tßm∂e_t
 
cou¡
, 
uöt32
 
°¨t
, uöt32 
íd
,

3150 
shi·
)

3152 
ªady_bôs
 = 0, 
södex
 = 0;

3153 
uöt32
 
cﬁ
, 
§c_byã
, 
§c_bô
, 
bô_off£t
;

3154 
uöt16
 
maskbôs
 = 0, 
m©chbôs
 = 0;

3155 
uöt16
 
buff1
 = 0, 
buff2
 = 0;

3156 
uöt8
 
byãbuff
 = 0;

3157 
uöt8
 *
§c
 = 
ö
;

3158 
uöt8
 *
d°
 = 
out
;

3160 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

3162 
	`TIFFEº‹
("extractContigSamplesShifted16bits","Invalid input or output buffer");

3166 i‡((
°¨t
 > 
íd
Ë|| (°¨à> 
cﬁs
))

3168 
	`TIFFEº‹
 ("extractContigSamplesShifted16bits",

3169 "InvÆid sèπ cﬁum¿vÆuê%d ign‹ed", 
°¨t
);

3170 
°¨t
 = 0;

3172 i‡((
íd
 =0Ë|| (íd > 
cﬁs
))

3174 
	`TIFFEº‹
 ("extractContigSamplesShifted16bits",

3175 "InvÆidÉnd cﬁum¿vÆuê%d ign‹ed", 
íd
);

3176 
íd
 = 
cﬁs
;

3179 
ªady_bôs
 = 
shi·
;

3180 
maskbôs
 = (
uöt16
)-1 >> (16 - 
bps
);

3181 
cﬁ
 = 
°¨t
; cﬁ < 
íd
; col++)

3183 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

3184 
södex
 = 
ßm∂e
; (södex < 
•p
Ë&& (södex < (ßm∂ê+ 
cou¡
)); sindex++)

3186 i‡(
södex
 == 0)

3188 
§c_byã
 = 
bô_off£t
 / 8;

3189 
§c_bô
 = 
bô_off£t
 % 8;

3193 
§c_byã
 = (
bô_off£t
 + (
södex
 * 
bps
)) / 8;

3194 
§c_bô
 = (
bô_off£t
 + (
södex
 * 
bps
)) % 8;

3197 
§c
 = 
ö
 + 
§c_byã
;

3198 
m©chbôs
 = 
maskbôs
 << (16 - 
§c_bô
 - 
bps
);

3199 i‡(
lôée_ídün
)

3200 
buff1
 = (
§c
[0] << 8) | src[1];

3202 
buff1
 = (
§c
[1] << 8) | src[0];

3204 i‡((
cﬁ
 =
°¨t
Ë&& (
södex
 =
ßm∂e
))

3205 
buff2
 = 
buff1
 & ((
uöt16
)-1Ë<< (8 - 
shi·
);

3207 
buff1
 = (buff1 & 
m©chbôs
Ë<< (
§c_bô
);

3209 i‡(
ªady_bôs
 < 8)

3210 
buff2
 = buff2 | (
buff1
 >> 
ªady_bôs
);

3213 
byãbuff
 = (
buff2
 >> 8);

3214 *
d°
++ = 
byãbuff
;

3215 
ªady_bôs
 -= 8;

3217 
buff2
 = ((buff2 << 8Ë| (
buff1
 >> 
ªady_bôs
));

3220 
ªady_bôs
 +
bps
;

3225 
ªady_bôs
 > 0)

3227 
byãbuff
 = (
buff2
 >> 8);

3228 *
d°
++ = 
byãbuff
;

3229 
ªady_bôs
 -= 8;

3233 
	}
}

3237 
	$exåa˘C⁄tigSam∂esShi·ed24bôs
 (
uöt8
 *
ö
, uöt8 *
out
, 
uöt32
 
cﬁs
,

3238 
tßm∂e_t
 
ßm∂e
, 
uöt16
 
•p
, uöt16 
bps
,

3239 
tßm∂e_t
 
cou¡
, 
uöt32
 
°¨t
, uöt32 
íd
,

3240 
shi·
)

3242 
ªady_bôs
 = 0, 
södex
 = 0;

3243 
uöt32
 
cﬁ
, 
§c_byã
, 
§c_bô
, 
bô_off£t
;

3244 
uöt32
 
maskbôs
 = 0, 
m©chbôs
 = 0;

3245 
uöt32
 
buff1
 = 0, 
buff2
 = 0;

3246 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0;

3247 
uöt8
 *
§c
 = 
ö
;

3248 
uöt8
 *
d°
 = 
out
;

3250 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

3252 
	`TIFFEº‹
("extractContigSamplesShifted24bits","Invalid input or output buffer");

3256 i‡((
°¨t
 > 
íd
Ë|| (°¨à> 
cﬁs
))

3258 
	`TIFFEº‹
 ("extractContigSamplesShifted24bits",

3259 "InvÆid sèπ cﬁum¿vÆuê%d ign‹ed", 
°¨t
);

3260 
°¨t
 = 0;

3262 i‡((
íd
 =0Ë|| (íd > 
cﬁs
))

3264 
	`TIFFEº‹
 ("extractContigSamplesShifted24bits",

3265 "InvÆidÉnd cﬁum¿vÆuê%d ign‹ed", 
íd
);

3266 
íd
 = 
cﬁs
;

3269 
ªady_bôs
 = 
shi·
;

3270 
maskbôs
 = (
uöt32
)-1 >> ( 32 - 
bps
);

3271 
cﬁ
 = 
°¨t
; cﬁ < 
íd
; col++)

3274 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

3275 
södex
 = 
ßm∂e
; (södex < 
•p
Ë&& (södex < (ßm∂ê+ 
cou¡
)); sindex++)

3277 i‡(
södex
 == 0)

3279 
§c_byã
 = 
bô_off£t
 / 8;

3280 
§c_bô
 = 
bô_off£t
 % 8;

3284 
§c_byã
 = (
bô_off£t
 + (
södex
 * 
bps
)) / 8;

3285 
§c_bô
 = (
bô_off£t
 + (
södex
 * 
bps
)) % 8;

3288 
§c
 = 
ö
 + 
§c_byã
;

3289 
m©chbôs
 = 
maskbôs
 << (32 - 
§c_bô
 - 
bps
);

3290 i‡(
lôée_ídün
)

3291 
buff1
 = (
§c
[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];

3293 
buff1
 = (
§c
[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];

3295 i‡((
cﬁ
 =
°¨t
Ë&& (
södex
 =
ßm∂e
))

3296 
buff2
 = 
buff1
 & ((
uöt32
)-1Ë<< (16 - 
shi·
);

3298 
buff1
 = (buff1 & 
m©chbôs
Ë<< (
§c_bô
);

3300 i‡(
ªady_bôs
 < 16)

3302 
byãbuff1
 = 
byãbuff2
 = 0;

3303 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

3307 
byãbuff1
 = (
buff2
 >> 24);

3308 *
d°
++ = 
byãbuff1
;

3309 
byãbuff2
 = (
buff2
 >> 16);

3310 *
d°
++ = 
byãbuff2
;

3311 
ªady_bôs
 -= 16;

3314 
buff2
 = ((buff2 << 16Ë| (
buff1
 >> 
ªady_bôs
));

3316 
ªady_bôs
 +
bps
;

3321 
ªady_bôs
 > 0)

3323 
byãbuff1
 = (
buff2
 >> 24);

3324 *
d°
++ = 
byãbuff1
;

3326 
buff2
 = (buff2 << 8);

3327 
byãbuff2
 = 
byãbuff1
;

3328 
ªady_bôs
 -= 8;

3332 
	}
}

3335 
	$exåa˘C⁄tigSam∂esShi·ed32bôs
 (
uöt8
 *
ö
, uöt8 *
out
, 
uöt32
 
cﬁs
,

3336 
tßm∂e_t
 
ßm∂e
, 
uöt16
 
•p
, uöt16 
bps
,

3337 
tßm∂e_t
 
cou¡
, 
uöt32
 
°¨t
, uöt32 
íd
,

3338 
shi·
)

3340 
ªady_bôs
 = 0, 
södex
 = 0, 
shi·_width
 = 0;

3341 
uöt32
 
cﬁ
, 
§c_byã
, 
§c_bô
, 
bô_off£t
;

3342 
uöt32
 
l⁄gbuff1
 = 0, 
l⁄gbuff2
 = 0;

3343 
uöt64
 
maskbôs
 = 0, 
m©chbôs
 = 0;

3344 
uöt64
 
buff1
 = 0, 
buff2
 = 0, 
buff3
 = 0;

3345 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0, 
byãbuff3
 = 0, 
byãbuff4
 = 0;

3346 
uöt8
 *
§c
 = 
ö
;

3347 
uöt8
 *
d°
 = 
out
;

3349 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

3351 
	`TIFFEº‹
("extractContigSamplesShifted32bits","Invalid input or output buffer");

3356 i‡((
°¨t
 > 
íd
Ë|| (°¨à> 
cﬁs
))

3358 
	`TIFFEº‹
 ("extractContigSamplesShifted32bits",

3359 "InvÆid sèπ cﬁum¿vÆuê%d ign‹ed", 
°¨t
);

3360 
°¨t
 = 0;

3362 i‡((
íd
 =0Ë|| (íd > 
cﬁs
))

3364 
	`TIFFEº‹
 ("extractContigSamplesShifted32bits",

3365 "InvÆidÉnd cﬁum¿vÆuê%d ign‹ed", 
íd
);

3366 
íd
 = 
cﬁs
;

3369 
shi·_width
 = ((
bps
 + 7) / 8) + 1;

3370 
ªady_bôs
 = 
shi·
;

3371 
maskbôs
 = (
uöt64
)-1 >> ( 64 - 
bps
);

3372 
cﬁ
 = 
°¨t
; cﬁ < 
íd
; col++)

3375 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

3376 
södex
 = 
ßm∂e
; (södex < 
•p
Ë&& (södex < (ßm∂ê+ 
cou¡
)); sindex++)

3378 i‡(
södex
 == 0)

3380 
§c_byã
 = 
bô_off£t
 / 8;

3381 
§c_bô
 = 
bô_off£t
 % 8;

3385 
§c_byã
 = (
bô_off£t
 + (
södex
 * 
bps
)) / 8;

3386 
§c_bô
 = (
bô_off£t
 + (
södex
 * 
bps
)) % 8;

3389 
§c
 = 
ö
 + 
§c_byã
;

3390 
m©chbôs
 = 
maskbôs
 << (64 - 
§c_bô
 - 
bps
);

3391 i‡(
lôée_ídün
)

3393 
l⁄gbuff1
 = (
§c
[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];

3394 
l⁄gbuff2
 = 
l⁄gbuff1
;

3398 
l⁄gbuff1
 = (
§c
[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];

3399 
l⁄gbuff2
 = 
l⁄gbuff1
;

3402 
buff3
 = ((
uöt64
)
l⁄gbuff1
 << 32Ë| 
l⁄gbuff2
;

3403 i‡((
cﬁ
 =
°¨t
Ë&& (
södex
 =
ßm∂e
))

3404 
buff2
 = 
buff3
 & ((
uöt64
)-1Ë<< (32 - 
shi·
);

3406 
buff1
 = (
buff3
 & 
m©chbôs
Ë<< (
§c_bô
);

3408 i‡(
ªady_bôs
 < 32)

3410 
byãbuff1
 = 
byãbuff2
 = 
byãbuff3
 = 
byãbuff4
 = 0;

3411 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

3415 
byãbuff1
 = (
buff2
 >> 56);

3416 *
d°
++ = 
byãbuff1
;

3417 
byãbuff2
 = (
buff2
 >> 48);

3418 *
d°
++ = 
byãbuff2
;

3419 
byãbuff3
 = (
buff2
 >> 40);

3420 *
d°
++ = 
byãbuff3
;

3421 
byãbuff4
 = (
buff2
 >> 32);

3422 *
d°
++ = 
byãbuff4
;

3423 
ªady_bôs
 -= 32;

3426 
buff2
 = ((buff2 << 32Ë| (
buff1
 >> 
ªady_bôs
));

3428 
ªady_bôs
 +
bps
;

3431 
ªady_bôs
 > 0)

3433 
byãbuff1
 = (
buff2
 >> 56);

3434 *
d°
++ = 
byãbuff1
;

3435 
buff2
 = (buff2 << 8);

3436 
ªady_bôs
 -= 8;

3440 
	}
}

3443 
	$exåa˘C⁄tigSam∂esToBuf„r
(
uöt8
 *
out
, uöt8 *
ö
, 
uöt32
 
rows
, uöt32 
cﬁs
,

3444 
tßm∂e_t
 
ßm∂e
, 
uöt16
 
•p
, uöt16 
bps
,

3445 
dump_›ts
 *
dump
)

3447 
shi·_width
, 
byãs_≥r_ßm∂e
, 
byãs_≥r_pixñ
;

3448 
uöt32
 
§c_rowsize
, 
§c_off£t
, 
row
, 
fú°_cﬁ
 = 0;

3449 
uöt32
 
d°_rowsize
, 
d°_off£t
;

3450 
tßm∂e_t
 
cou¡
 = 1;

3451 
uöt8
 *
§c
, *
d°
;

3453 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

3454 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

3455 i‡((
bps
 % 8) == 0)

3456 
shi·_width
 = 0;

3459 i‡(
byãs_≥r_pixñ
 < (
byãs_≥r_ßm∂e
 + 1))

3460 
shi·_width
 = 
byãs_≥r_pixñ
;

3462 
shi·_width
 = 
byãs_≥r_ßm∂e
 + 1;

3464 
§c_rowsize
 = ((
bps
 * 
•p
 * 
cﬁs
) + 7) / 8;

3465 
d°_rowsize
 = ((
bps
 * 
cﬁs
) + 7) / 8;

3467 i‡((
dump
->
outfûe
 !
NULL
Ë&& (dump->
Àvñ
 == 4))

3469 
	`dump_öfo
 (
dump
->
outfûe
, dump->
f‹m©
, "extractContigSamplesToBuffer",

3470 "Sam∂ê%d, %dÑows", 
ßm∂e
 + 1, 
rows
 + 1);

3472 
row
 = 0;Ñow < 
rows
;Ñow++)

3474 
§c_off£t
 = 
row
 * 
§c_rowsize
;

3475 
d°_off£t
 = 
row
 * 
d°_rowsize
;

3476 
§c
 = 
ö
 + 
§c_off£t
;

3477 
d°
 = 
out
 + 
d°_off£t
;

3480 
shi·_width
)

3482 0: i‡(
	`exåa˘C⁄tigSam∂esByãs
 (
§c
, 
d°
, 
cﬁs
, 
ßm∂e
,

3483 
•p
, 
bps
, 
cou¡
, 
fú°_cﬁ
, 
cﬁs
))

3486 1: i‡(
bps
 == 1)

3488 i‡(
	`exåa˘C⁄tigSam∂es8bôs
 (
§c
, 
d°
, 
cﬁs
, 
ßm∂e
,

3489 
•p
, 
bps
, 
cou¡
, 
fú°_cﬁ
, 
cﬁs
))

3494 i‡(
	`exåa˘C⁄tigSam∂es16bôs
 (
§c
, 
d°
, 
cﬁs
, 
ßm∂e
,

3495 
•p
, 
bps
, 
cou¡
, 
fú°_cﬁ
, 
cﬁs
))

3498 2: i‡(
	`exåa˘C⁄tigSam∂es24bôs
 (
§c
, 
d°
, 
cﬁs
, 
ßm∂e
,

3499 
•p
, 
bps
, 
cou¡
, 
fú°_cﬁ
, 
cﬁs
))

3504 5: i‡(
	`exåa˘C⁄tigSam∂es32bôs
 (
§c
, 
d°
, 
cﬁs
, 
ßm∂e
,

3505 
•p
, 
bps
, 
cou¡
, 
fú°_cﬁ
, 
cﬁs
))

3508 : 
	`TIFFEº‹
 ("exåa˘C⁄tigSam∂esToBuf„r", "Unsuµ‹ãd bô dïth: %d", 
bps
);

3511 i‡((
dump
->
outfûe
 !
NULL
Ë&& (dump->
Àvñ
 == 4))

3512 
	`dump_buf„r
(
dump
->
outfûe
, dump->
f‹m©
, 1, 
d°_rowsize
, 
row
, 
d°
);

3516 
	}
}

3519 
	$exåa˘C⁄tigSam∂esToTûeBuf„r
(
uöt8
 *
out
, uöt8 *
ö
, 
uöt32
 
rows
, uöt32 
cﬁs
,

3520 
uöt32
 
imagewidth
, uöt32 
tûewidth
, 
tßm∂e_t
 
ßm∂e
,

3521 
uöt16
 
cou¡
, uöt16 
•p
, uöt16 
bps
, 
dump_›ts
 *
dump
)

3523 
shi·_width
, 
byãs_≥r_ßm∂e
, 
byãs_≥r_pixñ
;

3524 
uöt32
 
§c_rowsize
, 
§c_off£t
, 
row
;

3525 
uöt32
 
d°_rowsize
, 
d°_off£t
;

3526 
uöt8
 *
§c
, *
d°
;

3528 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

3529 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

3530 i‡((
bps
 % 8) == 0)

3531 
shi·_width
 = 0;

3534 i‡(
byãs_≥r_pixñ
 < (
byãs_≥r_ßm∂e
 + 1))

3535 
shi·_width
 = 
byãs_≥r_pixñ
;

3537 
shi·_width
 = 
byãs_≥r_ßm∂e
 + 1;

3540 i‡((
dump
->
outfûe
 !
NULL
Ë&& (dump->
Àvñ
 == 4))

3542 
	`dump_öfo
 (
dump
->
outfûe
, dump->
f‹m©
, "extractContigSamplesToTileBuffer",

3543 "Sam∂ê%d, %dÑows", 
ßm∂e
 + 1, 
rows
 + 1);

3546 
§c_rowsize
 = ((
bps
 * 
•p
 * 
imagewidth
) + 7) / 8;

3547 
d°_rowsize
 = ((
bps
 * 
tûewidth
 * 
cou¡
) + 7) / 8;

3549 
row
 = 0;Ñow < 
rows
;Ñow++)

3551 
§c_off£t
 = 
row
 * 
§c_rowsize
;

3552 
d°_off£t
 = 
row
 * 
d°_rowsize
;

3553 
§c
 = 
ö
 + 
§c_off£t
;

3554 
d°
 = 
out
 + 
d°_off£t
;

3557 
shi·_width
)

3559 0: i‡(
	`exåa˘C⁄tigSam∂esByãs
 (
§c
, 
d°
, 
cﬁs
, 
ßm∂e
,

3560 
•p
, 
bps
, 
cou¡
, 0, 
cﬁs
))

3563 1: i‡(
bps
 == 1)

3565 i‡(
	`exåa˘C⁄tigSam∂es8bôs
 (
§c
, 
d°
, 
cﬁs
, 
ßm∂e
,

3566 
•p
, 
bps
, 
cou¡
, 0, 
cﬁs
))

3571 i‡(
	`exåa˘C⁄tigSam∂es16bôs
 (
§c
, 
d°
, 
cﬁs
, 
ßm∂e
,

3572 
•p
, 
bps
, 
cou¡
, 0, 
cﬁs
))

3575 2: i‡(
	`exåa˘C⁄tigSam∂es24bôs
 (
§c
, 
d°
, 
cﬁs
, 
ßm∂e
,

3576 
•p
, 
bps
, 
cou¡
, 0, 
cﬁs
))

3581 5: i‡(
	`exåa˘C⁄tigSam∂es32bôs
 (
§c
, 
d°
, 
cﬁs
, 
ßm∂e
,

3582 
•p
, 
bps
, 
cou¡
, 0, 
cﬁs
))

3585 : 
	`TIFFEº‹
 ("exåa˘C⁄tigSam∂esToTûeBuf„r", "Unsuµ‹ãd bô dïth: %d", 
bps
);

3588 i‡((
dump
->
outfûe
 !
NULL
Ë&& (dump->
Àvñ
 == 4))

3589 
	`dump_buf„r
(
dump
->
outfûe
, dump->
f‹m©
, 1, 
d°_rowsize
, 
row
, 
d°
);

3593 
	}
}

3595 
	$ªadC⁄tigSåùsI¡oBuf„r
 (
TIFF
* 
ö
, 
uöt8
* 
buf
)

3597 
uöt8
* 
buÂ
 = 
buf
;

3598 
öt32
 
byãs_ªad
 = 0;

3599 
uöt16
 
°rù
, 
n°rùs
 = 
	`TIFFNumbîOfSåùs
(
ö
);

3600 
uöt32
 
°rùsize
 = 
	`TIFFSåùSize
(
ö
);

3601 
uöt32
 
rows
 = 0;

3602 
uöt32
 
Ωs
 = 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_ROWSPERSTRIP
, &rps);

3603 
tsize_t
 
sˇ∆öe_size
 = 
	`TIFFSˇ∆öeSize
(
ö
);

3605 
°rù
 = 0; såù < 
n°rùs
; strip++)

3607 
byãs_ªad
 = 
	`TIFFRódEncodedSåù
 (
ö
, 
°rù
, 
buÂ
, -1);

3608 
rows
 = 
byãs_ªad
 / 
sˇ∆öe_size
;

3609 i‡((
°rù
 < (
n°rùs
 - 1)Ë&& (
byãs_ªad
 !(
öt32
)
°rùsize
))

3610 
	`TIFFEº‹
("", "Strip %d:Ñead %lu bytes, strip size %lu",

3611 ()
°rù
 + 1, (Ë
byãs_ªad
, ()
°rùsize
);

3613 i‡(
byãs_ªad
 < 0 && !
ign‹e
)

3615 
	`TIFFEº‹
("", "ErrorÑeading strip %luáfter %luÑows",

3616 (Ë
°rù
, ()
rows
);

3619 
buÂ
 +
byãs_ªad
;

3623 
	}
}

3626 
	$comböeSï¨©eSam∂esByãs
 (*
§cbuffs
[], *
out
,

3627 
uöt32
 
cﬁs
, uöt32 
rows
, 
uöt16
 
•p
, uöt16 
bps
,

3628 
FILE
 *
dumpfûe
, 
f‹m©
, 
Àvñ
)

3630 
i
, 
byãs_≥r_ßm∂e
;

3631 
uöt32
 
row
, 
cﬁ
, 
cﬁ_off£t
, 
§c_rowsize
, 
d°_rowsize
, 
row_off£t
;

3632 *
§c
;

3633 *
d°
;

3634 
tßm∂e_t
 
s
;

3636 
§c
 = 
§cbuffs
[0];

3637 
d°
 = 
out
;

3638 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

3640 
	`TIFFEº‹
("combineSeparateSamplesBytes","Invalid bufferáddress");

3644 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

3646 
§c_rowsize
 = ((
bps
 * 
cﬁs
) + 7) / 8;

3647 
d°_rowsize
 = ((
bps
 * 
•p
 * 
cﬁs
) + 7) / 8;

3648 
row
 = 0;Ñow < 
rows
;Ñow++)

3650 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 2))

3652 
s
 = 0; s < 
•p
; s++)

3654 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "comböeSï¨©eSam∂esByãs","I≈uàd©a, Sam∂ê%d", 
s
);

3655 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
cﬁs
, 
row
, 
§cbuffs
[
s
] + (row * 
§c_rowsize
));

3658 
d°
 = 
out
 + (
row
 * 
d°_rowsize
);

3659 
row_off£t
 = 
row
 * 
§c_rowsize
;

3660 
cﬁ
 = 0; cﬁ < 
cﬁs
; col++)

3662 
cﬁ_off£t
 = 
row_off£t
 + (
cﬁ
 * (
bps
 / 8));

3663 
s
 = 0; (†< 
•p
Ë&& (†< 
MAX_SAMPLES
); s++)

3665 
§c
 = 
§cbuffs
[
s
] + 
cﬁ_off£t
;

3666 
i
 = 0; i < 
byãs_≥r_ßm∂e
; i++)

3667 *(
d°
 + 
i
Ë*(
§c
 + i);

3668 
§c
 +
byãs_≥r_ßm∂e
;

3669 
d°
 +
byãs_≥r_ßm∂e
;

3673 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 2))

3675 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "combineSeparateSamplesBytes","Output data, combined samples");

3676 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
d°_rowsize
, 
row
, 
out
 + (row * dst_rowsize));

3681 
	}
}

3684 
	$comböeSï¨©eSam∂es8bôs
 (
uöt8
 *
ö
[], uöt8 *
out
, 
uöt32
 
cﬁs
,

3685 
uöt32
 
rows
, 
uöt16
 
•p
, uöt16 
bps
,

3686 
FILE
 *
dumpfûe
, 
f‹m©
, 
Àvñ
)

3688 
ªady_bôs
 = 0;

3689 
byãs_≥r_ßm∂e
 = 0;

3690 
uöt32
 
§c_rowsize
, 
d°_rowsize
, 
§c_off£t
;

3691 
uöt32
 
bô_off£t
;

3692 
uöt32
 
row
, 
cﬁ
, 
§c_byã
 = 0, 
§c_bô
 = 0;

3693 
uöt8
 
maskbôs
 = 0, 
m©chbôs
 = 0;

3694 
uöt8
 
buff1
 = 0, 
buff2
 = 0;

3695 
tßm∂e_t
 
s
;

3696 *
§c
 = 
ö
[0];

3697 *
d°
 = 
out
;

3698 
a˘i⁄
[32];

3700 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

3702 
	`TIFFEº‹
("combineSeparateSamples8bits","Invalid input or output buffer");

3706 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

3707 
§c_rowsize
 = ((
bps
 * 
cﬁs
) + 7) / 8;

3708 
d°_rowsize
 = ((
bps
 * 
cﬁs
 * 
•p
) + 7) / 8;

3709 
maskbôs
 = (
uöt8
)-1 >> ( 8 - 
bps
);

3711 
row
 = 0;Ñow < 
rows
;Ñow++)

3713 
ªady_bôs
 = 0;

3714 
buff1
 = 
buff2
 = 0;

3715 
d°
 = 
out
 + (
row
 * 
d°_rowsize
);

3716 
§c_off£t
 = 
row
 * 
§c_rowsize
;

3717 
cﬁ
 = 0; cﬁ < 
cﬁs
; col++)

3720 
bô_off£t
 = 
cﬁ
 * 
bps
;

3721 
§c_byã
 = 
bô_off£t
 / 8;

3722 
§c_bô
 = 
bô_off£t
 % 8;

3724 
m©chbôs
 = 
maskbôs
 << (8 - 
§c_bô
 - 
bps
);

3726 
s
 = 0; s < 
•p
; s++)

3728 
§c
 = 
ö
[
s
] + 
§c_off£t
 + 
§c_byã
;

3729 
buff1
 = ((*
§c
Ë& 
m©chbôs
Ë<< (
§c_bô
);

3732 i‡(
ªady_bôs
 >= 8)

3734 *
d°
++ = 
buff2
;

3735 
buff2
 = 
buff1
;

3736 
ªady_bôs
 -= 8;

3737 
	`°r˝y
 (
a˘i⁄
, "Flush");

3741 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

3742 
	`°r˝y
 (
a˘i⁄
, "Update");

3744 
ªady_bôs
 +
bps
;

3746 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

3748 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

3750 
row
 + 1, 
cﬁ
 + 1, 
s
, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

3751 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "M©ch bôs", 
m©chbôs
);

3752 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Sr¯ bôs", *
§c
);

3753 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Buff1 bôs", 
buff1
);

3754 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Buff2 bôs", 
buff2
);

3755 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "","%s", 
a˘i⁄
);

3760 i‡(
ªady_bôs
 > 0)

3762 
buff1
 = (
buff2
 & (()255 << (8 - 
ªady_bôs
)));

3763 *
d°
++ = 
buff1
;

3764 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

3766 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

3768 
row
 + 1, 
cﬁ
 + 1, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

3769 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "FöÆ bôs", 
buff1
);

3773 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 >= 2))

3775 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "combineSeparateSamples8bits","Output data");

3776 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
d°_rowsize
, 
row
, 
out
 + (row * dst_rowsize));

3781 
	}
}

3784 
	$comböeSï¨©eSam∂es16bôs
 (
uöt8
 *
ö
[], uöt8 *
out
, 
uöt32
 
cﬁs
,

3785 
uöt32
 
rows
, 
uöt16
 
•p
, uöt16 
bps
,

3786 
FILE
 *
dumpfûe
, 
f‹m©
, 
Àvñ
)

3788 
ªady_bôs
 = 0, 
byãs_≥r_ßm∂e
 = 0;

3789 
uöt32
 
§c_rowsize
, 
d°_rowsize
;

3790 
uöt32
 
bô_off£t
, 
§c_off£t
;

3791 
uöt32
 
row
, 
cﬁ
, 
§c_byã
 = 0, 
§c_bô
 = 0;

3792 
uöt16
 
maskbôs
 = 0, 
m©chbôs
 = 0;

3793 
uöt16
 
buff1
 = 0, 
buff2
 = 0;

3794 
uöt8
 
byãbuff
 = 0;

3795 
tßm∂e_t
 
s
;

3796 *
§c
 = 
ö
[0];

3797 *
d°
 = 
out
;

3798 
a˘i⁄
[8];

3800 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

3802 
	`TIFFEº‹
("combineSeparateSamples16bits","Invalid input or output buffer");

3806 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

3807 
§c_rowsize
 = ((
bps
 * 
cﬁs
) + 7) / 8;

3808 
d°_rowsize
 = ((
bps
 * 
cﬁs
 * 
•p
) + 7) / 8;

3809 
maskbôs
 = (
uöt16
)-1 >> (16 - 
bps
);

3811 
row
 = 0;Ñow < 
rows
;Ñow++)

3813 
ªady_bôs
 = 0;

3814 
buff1
 = 
buff2
 = 0;

3815 
d°
 = 
out
 + (
row
 * 
d°_rowsize
);

3816 
§c_off£t
 = 
row
 * 
§c_rowsize
;

3817 
cﬁ
 = 0; cﬁ < 
cﬁs
; col++)

3820 
bô_off£t
 = 
cﬁ
 * 
bps
;

3821 
§c_byã
 = 
bô_off£t
 / 8;

3822 
§c_bô
 = 
bô_off£t
 % 8;

3824 
m©chbôs
 = 
maskbôs
 << (16 - 
§c_bô
 - 
bps
);

3825 
s
 = 0; s < 
•p
; s++)

3827 
§c
 = 
ö
[
s
] + 
§c_off£t
 + 
§c_byã
;

3828 i‡(
lôée_ídün
)

3829 
buff1
 = (
§c
[0] << 8) | src[1];

3831 
buff1
 = (
§c
[1] << 8) | src[0];

3833 
buff1
 = (buff1 & 
m©chbôs
Ë<< (
§c_bô
);

3836 i‡(
ªady_bôs
 >= 8)

3838 
byãbuff
 = (
buff2
 >> 8);

3839 *
d°
++ = 
byãbuff
;

3840 
ªady_bôs
 -= 8;

3842 
buff2
 = ((buff2 << 8Ë| (
buff1
 >> 
ªady_bôs
));

3843 
	`°r˝y
 (
a˘i⁄
, "Flush");

3847 
byãbuff
 = 0;

3848 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

3849 
	`°r˝y
 (
a˘i⁄
, "Update");

3851 
ªady_bôs
 +
bps
;

3853 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

3855 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

3857 
row
 + 1, 
cﬁ
 + 1, 
s
, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

3859 
	`dump_sh‹t
 (
dumpfûe
, 
f‹m©
, "M©ch bôs", 
m©chbôs
);

3860 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "Sr¯ bôs", 
§c
, 2);

3861 
	`dump_sh‹t
 (
dumpfûe
, 
f‹m©
, "Buff1 bôs", 
buff1
);

3862 
	`dump_sh‹t
 (
dumpfûe
, 
f‹m©
, "Buff2 bôs", 
buff2
);

3863 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbyã", 
byãbuff
);

3864 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "","Ródy bôs: %d, %s", 
ªady_bôs
, 
a˘i⁄
);

3870 i‡(
ªady_bôs
 > 0)

3872 
byãbuff
 = (
buff2
 >> 8);

3873 *
d°
++ = 
byãbuff
;

3874 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

3876 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

3878 
row
 + 1, 
cﬁ
 + 1, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

3879 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "FöÆ bôs", 
byãbuff
);

3883 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 2))

3885 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "combineSeparateSamples16bits","Output data");

3886 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
d°_rowsize
, 
row
, 
out
 + (row * dst_rowsize));

3891 
	}
}

3894 
	$comböeSï¨©eSam∂es24bôs
 (
uöt8
 *
ö
[], uöt8 *
out
, 
uöt32
 
cﬁs
,

3895 
uöt32
 
rows
, 
uöt16
 
•p
, uöt16 
bps
,

3896 
FILE
 *
dumpfûe
, 
f‹m©
, 
Àvñ
)

3898 
ªady_bôs
 = 0, 
byãs_≥r_ßm∂e
 = 0;

3899 
uöt32
 
§c_rowsize
, 
d°_rowsize
;

3900 
uöt32
 
bô_off£t
, 
§c_off£t
;

3901 
uöt32
 
row
, 
cﬁ
, 
§c_byã
 = 0, 
§c_bô
 = 0;

3902 
uöt32
 
maskbôs
 = 0, 
m©chbôs
 = 0;

3903 
uöt32
 
buff1
 = 0, 
buff2
 = 0;

3904 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0;

3905 
tßm∂e_t
 
s
;

3906 *
§c
 = 
ö
[0];

3907 *
d°
 = 
out
;

3908 
a˘i⁄
[8];

3910 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

3912 
	`TIFFEº‹
("combineSeparateSamples24bits","Invalid input or output buffer");

3916 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

3917 
§c_rowsize
 = ((
bps
 * 
cﬁs
) + 7) / 8;

3918 
d°_rowsize
 = ((
bps
 * 
cﬁs
 * 
•p
) + 7) / 8;

3919 
maskbôs
 = (
uöt32
)-1 >> ( 32 - 
bps
);

3921 
row
 = 0;Ñow < 
rows
;Ñow++)

3923 
ªady_bôs
 = 0;

3924 
buff1
 = 
buff2
 = 0;

3925 
d°
 = 
out
 + (
row
 * 
d°_rowsize
);

3926 
§c_off£t
 = 
row
 * 
§c_rowsize
;

3927 
cﬁ
 = 0; cﬁ < 
cﬁs
; col++)

3930 
bô_off£t
 = 
cﬁ
 * 
bps
;

3931 
§c_byã
 = 
bô_off£t
 / 8;

3932 
§c_bô
 = 
bô_off£t
 % 8;

3934 
m©chbôs
 = 
maskbôs
 << (32 - 
§c_bô
 - 
bps
);

3935 
s
 = 0; s < 
•p
; s++)

3937 
§c
 = 
ö
[
s
] + 
§c_off£t
 + 
§c_byã
;

3938 i‡(
lôée_ídün
)

3939 
buff1
 = (
§c
[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];

3941 
buff1
 = (
§c
[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];

3942 
buff1
 = (buff1 & 
m©chbôs
Ë<< (
§c_bô
);

3945 i‡(
ªady_bôs
 >= 16)

3947 
byãbuff1
 = (
buff2
 >> 24);

3948 *
d°
++ = 
byãbuff1
;

3949 
byãbuff2
 = (
buff2
 >> 16);

3950 *
d°
++ = 
byãbuff2
;

3951 
ªady_bôs
 -= 16;

3954 
buff2
 = ((buff2 << 16Ë| (
buff1
 >> 
ªady_bôs
));

3955 
	`°r˝y
 (
a˘i⁄
, "Flush");

3959 
byãbuff1
 = 
byãbuff2
 = 0;

3960 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

3961 
	`°r˝y
 (
a˘i⁄
, "Update");

3963 
ªady_bôs
 +
bps
;

3965 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

3967 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

3969 
row
 + 1, 
cﬁ
 + 1, 
s
, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

3970 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "M©ch bô†", 
m©chbôs
);

3971 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "Sr¯ bô†", 
§c
, 4);

3972 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff1 bô†", 
buff1
);

3973 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff2 bô†", 
buff2
);

3974 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs1", 
byãbuff1
);

3975 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs2", 
byãbuff2
);

3976 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "","Ródy bôs: %d, %s", 
ªady_bôs
, 
a˘i⁄
);

3982 
ªady_bôs
 > 0)

3984 
byãbuff1
 = (
buff2
 >> 24);

3985 *
d°
++ = 
byãbuff1
;

3987 
buff2
 = (buff2 << 8);

3988 
byãbuff2
 = 
byãbuff1
;

3989 
ªady_bôs
 -= 8;

3992 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

3994 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

3996 
row
 + 1, 
cﬁ
 + 1, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

3998 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "M©ch bô†", 
m©chbôs
);

3999 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "Sr¯ bô†", 
§c
, 4);

4000 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff1 bô†", 
buff1
);

4001 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff2 bô†", 
buff2
);

4002 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs1", 
byãbuff1
);

4003 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs2", 
byãbuff2
);

4004 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "", "Ródy bôs: %2d", 
ªady_bôs
);

4007 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 2))

4009 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "combineSeparateSamples24bits","Output data");

4010 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
d°_rowsize
, 
row
, 
out
 + (row * dst_rowsize));

4015 
	}
}

4018 
	$comböeSï¨©eSam∂es32bôs
 (
uöt8
 *
ö
[], uöt8 *
out
, 
uöt32
 
cﬁs
,

4019 
uöt32
 
rows
, 
uöt16
 
•p
, uöt16 
bps
,

4020 
FILE
 *
dumpfûe
, 
f‹m©
, 
Àvñ
)

4022 
ªady_bôs
 = 0, 
byãs_≥r_ßm∂e
 = 0, 
shi·_width
 = 0;

4023 
uöt32
 
§c_rowsize
, 
d°_rowsize
, 
bô_off£t
, 
§c_off£t
;

4024 
uöt32
 
§c_byã
 = 0, 
§c_bô
 = 0;

4025 
uöt32
 
row
, 
cﬁ
;

4026 
uöt32
 
l⁄gbuff1
 = 0, 
l⁄gbuff2
 = 0;

4027 
uöt64
 
maskbôs
 = 0, 
m©chbôs
 = 0;

4028 
uöt64
 
buff1
 = 0, 
buff2
 = 0, 
buff3
 = 0;

4029 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0, 
byãbuff3
 = 0, 
byãbuff4
 = 0;

4030 
tßm∂e_t
 
s
;

4031 *
§c
 = 
ö
[0];

4032 *
d°
 = 
out
;

4033 
a˘i⁄
[8];

4035 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

4037 
	`TIFFEº‹
("combineSeparateSamples32bits","Invalid input or output buffer");

4041 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

4042 
§c_rowsize
 = ((
bps
 * 
cﬁs
) + 7) / 8;

4043 
d°_rowsize
 = ((
bps
 * 
cﬁs
 * 
•p
) + 7) / 8;

4044 
maskbôs
 = (
uöt64
)-1 >> ( 64 - 
bps
);

4045 
shi·_width
 = ((
bps
 + 7) / 8) + 1;

4047 
row
 = 0;Ñow < 
rows
;Ñow++)

4049 
ªady_bôs
 = 0;

4050 
buff1
 = 
buff2
 = 0;

4051 
d°
 = 
out
 + (
row
 * 
d°_rowsize
);

4052 
§c_off£t
 = 
row
 * 
§c_rowsize
;

4053 
cﬁ
 = 0; cﬁ < 
cﬁs
; col++)

4056 
bô_off£t
 = 
cﬁ
 * 
bps
;

4057 
§c_byã
 = 
bô_off£t
 / 8;

4058 
§c_bô
 = 
bô_off£t
 % 8;

4060 
m©chbôs
 = 
maskbôs
 << (64 - 
§c_bô
 - 
bps
);

4061 
s
 = 0; s < 
•p
; s++)

4063 
§c
 = 
ö
[
s
] + 
§c_off£t
 + 
§c_byã
;

4064 i‡(
lôée_ídün
)

4066 
l⁄gbuff1
 = (
§c
[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];

4067 
l⁄gbuff2
 = 
l⁄gbuff1
;

4071 
l⁄gbuff1
 = (
§c
[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];

4072 
l⁄gbuff2
 = 
l⁄gbuff1
;

4074 
buff3
 = ((
uöt64
)
l⁄gbuff1
 << 32Ë| 
l⁄gbuff2
;

4075 
buff1
 = (
buff3
 & 
m©chbôs
Ë<< (
§c_bô
);

4078 i‡(
ªady_bôs
 >= 32)

4080 
byãbuff1
 = (
buff2
 >> 56);

4081 *
d°
++ = 
byãbuff1
;

4082 
byãbuff2
 = (
buff2
 >> 48);

4083 *
d°
++ = 
byãbuff2
;

4084 
byãbuff3
 = (
buff2
 >> 40);

4085 *
d°
++ = 
byãbuff3
;

4086 
byãbuff4
 = (
buff2
 >> 32);

4087 *
d°
++ = 
byãbuff4
;

4088 
ªady_bôs
 -= 32;

4091 
buff2
 = ((buff2 << 32Ë| (
buff1
 >> 
ªady_bôs
));

4092 
	`°r˝y
 (
a˘i⁄
, "Flush");

4096 
byãbuff1
 = 
byãbuff2
 = 
byãbuff3
 = 
byãbuff4
 = 0;

4097 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

4098 
	`°r˝y
 (
a˘i⁄
, "Update");

4100 
ªady_bôs
 +
bps
;

4102 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

4104 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

4106 
row
 + 1, 
cﬁ
 + 1, 
s
, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

4107 
	`dump_wide
 (
dumpfûe
, 
f‹m©
, "M©ch bô†", 
m©chbôs
);

4108 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "Sr¯ bô†", 
§c
, 8);

4109 
	`dump_wide
 (
dumpfûe
, 
f‹m©
, "Buff1 bô†", 
buff1
);

4110 
	`dump_wide
 (
dumpfûe
, 
f‹m©
, "Buff2 bô†", 
buff2
);

4111 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "", "Ródy bôs: %d, %s", 
ªady_bôs
, 
a˘i⁄
);

4115 
ªady_bôs
 > 0)

4117 
byãbuff1
 = (
buff2
 >> 56);

4118 *
d°
++ = 
byãbuff1
;

4119 
buff2
 = (buff2 << 8);

4120 
ªady_bôs
 -= 8;

4123 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

4125 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

4127 
row
 + 1, 
cﬁ
 + 1, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

4129 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "M©ch bô†", 
m©chbôs
);

4130 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "Sr¯ bô†", 
§c
, 4);

4131 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff1 bô†", 
buff1
);

4132 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff2 bô†", 
buff2
);

4133 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs1", 
byãbuff1
);

4134 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs2", 
byãbuff2
);

4135 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "", "Ródy bôs: %2d", 
ªady_bôs
);

4138 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 2))

4140 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "combineSeparateSamples32bits","Output data");

4141 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
d°_rowsize
, 
row
, 
out
);

4146 
	}
}

4149 
	$comböeSï¨©eTûeSam∂esByãs
 (*
§cbuffs
[], *
out
,

4150 
uöt32
 
cﬁs
, uöt32 
rows
, uöt32 
imagewidth
,

4151 
uöt32
 
tw
, 
uöt16
 
•p
, uöt16 
bps
,

4152 
FILE
 *
dumpfûe
, 
f‹m©
, 
Àvñ
)

4154 
i
, 
byãs_≥r_ßm∂e
;

4155 
uöt32
 
row
, 
cﬁ
, 
cﬁ_off£t
, 
§c_rowsize
, 
d°_rowsize
, 
§c_off£t
;

4156 *
§c
;

4157 *
d°
;

4158 
tßm∂e_t
 
s
;

4160 
§c
 = 
§cbuffs
[0];

4161 
d°
 = 
out
;

4162 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

4164 
	`TIFFEº‹
("combineSeparateTileSamplesBytes","Invalid bufferáddress");

4168 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

4169 
§c_rowsize
 = ((
bps
 * 
tw
) + 7) / 8;

4170 
d°_rowsize
 = 
imagewidth
 * 
byãs_≥r_ßm∂e
 * 
•p
;

4171 
row
 = 0;Ñow < 
rows
;Ñow++)

4173 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 2))

4175 
s
 = 0; s < 
•p
; s++)

4177 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "comböeSï¨©eTûeSam∂esByãs","I≈uàd©a, Sam∂ê%d", 
s
);

4178 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
cﬁs
, 
row
, 
§cbuffs
[
s
] + (row * 
§c_rowsize
));

4181 
d°
 = 
out
 + (
row
 * 
d°_rowsize
);

4182 
§c_off£t
 = 
row
 * 
§c_rowsize
;

4183 #ifde‡
DEVELMODE


4184 
	`TIFFEº‹
("","TileÑow %4d, Src offset %6d Dst offset %6d",

4185 
row
, 
§c_off£t
, 
d°
 - 
out
);

4187 
cﬁ
 = 0; cﬁ < 
cﬁs
; col++)

4189 
cﬁ_off£t
 = 
§c_off£t
 + (
cﬁ
 * (
bps
 / 8));

4190 
s
 = 0; (†< 
•p
Ë&& (†< 
MAX_SAMPLES
); s++)

4192 
§c
 = 
§cbuffs
[
s
] + 
cﬁ_off£t
;

4193 
i
 = 0; i < 
byãs_≥r_ßm∂e
; i++)

4194 *(
d°
 + 
i
Ë*(
§c
 + i);

4195 
d°
 +
byãs_≥r_ßm∂e
;

4199 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 2))

4201 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "combineSeparateTileSamplesBytes","Output data, combined samples");

4202 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
d°_rowsize
, 
row
, 
out
 + (row * dst_rowsize));

4207 
	}
}

4210 
	$comböeSï¨©eTûeSam∂es8bôs
 (
uöt8
 *
ö
[], uöt8 *
out
, 
uöt32
 
cﬁs
,

4211 
uöt32
 
rows
, uöt32 
imagewidth
,

4212 
uöt32
 
tw
, 
uöt16
 
•p
, uöt16 
bps
,

4213 
FILE
 *
dumpfûe
, 
f‹m©
, 
Àvñ
)

4215 
ªady_bôs
 = 0;

4216 
uöt32
 
§c_rowsize
, 
d°_rowsize
, 
§c_off£t
;

4217 
uöt32
 
bô_off£t
;

4218 
uöt32
 
row
, 
cﬁ
, 
§c_byã
 = 0, 
§c_bô
 = 0;

4219 
uöt8
 
maskbôs
 = 0, 
m©chbôs
 = 0;

4220 
uöt8
 
buff1
 = 0, 
buff2
 = 0;

4221 
tßm∂e_t
 
s
;

4222 *
§c
 = 
ö
[0];

4223 *
d°
 = 
out
;

4224 
a˘i⁄
[32];

4226 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

4228 
	`TIFFEº‹
("combineSeparateTileSamples8bits","Invalid input or output buffer");

4232 
§c_rowsize
 = ((
bps
 * 
tw
) + 7) / 8;

4233 
d°_rowsize
 = ((
imagewidth
 * 
bps
 * 
•p
) + 7) / 8;

4234 
maskbôs
 = (
uöt8
)-1 >> ( 8 - 
bps
);

4236 
row
 = 0;Ñow < 
rows
;Ñow++)

4238 
ªady_bôs
 = 0;

4239 
buff1
 = 
buff2
 = 0;

4240 
d°
 = 
out
 + (
row
 * 
d°_rowsize
);

4241 
§c_off£t
 = 
row
 * 
§c_rowsize
;

4242 
cﬁ
 = 0; cﬁ < 
cﬁs
; col++)

4245 
bô_off£t
 = 
cﬁ
 * 
bps
;

4246 
§c_byã
 = 
bô_off£t
 / 8;

4247 
§c_bô
 = 
bô_off£t
 % 8;

4249 
m©chbôs
 = 
maskbôs
 << (8 - 
§c_bô
 - 
bps
);

4251 
s
 = 0; s < 
•p
; s++)

4253 
§c
 = 
ö
[
s
] + 
§c_off£t
 + 
§c_byã
;

4254 
buff1
 = ((*
§c
Ë& 
m©chbôs
Ë<< (
§c_bô
);

4257 i‡(
ªady_bôs
 >= 8)

4259 *
d°
++ = 
buff2
;

4260 
buff2
 = 
buff1
;

4261 
ªady_bôs
 -= 8;

4262 
	`°r˝y
 (
a˘i⁄
, "Flush");

4266 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

4267 
	`°r˝y
 (
a˘i⁄
, "Update");

4269 
ªady_bôs
 +
bps
;

4271 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

4273 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

4275 
row
 + 1, 
cﬁ
 + 1, 
s
, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

4276 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "M©ch bôs", 
m©chbôs
);

4277 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Sr¯ bôs", *
§c
);

4278 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Buff1 bôs", 
buff1
);

4279 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Buff2 bôs", 
buff2
);

4280 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "","%s", 
a˘i⁄
);

4285 i‡(
ªady_bôs
 > 0)

4287 
buff1
 = (
buff2
 & (()255 << (8 - 
ªady_bôs
)));

4288 *
d°
++ = 
buff1
;

4289 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

4291 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

4293 
row
 + 1, 
cﬁ
 + 1, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

4294 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "FöÆ bôs", 
buff1
);

4298 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 >= 2))

4300 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "combineSeparateTileSamples8bits","Output data");

4301 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
d°_rowsize
, 
row
, 
out
 + (row * dst_rowsize));

4306 
	}
}

4309 
	$comböeSï¨©eTûeSam∂es16bôs
 (
uöt8
 *
ö
[], uöt8 *
out
, 
uöt32
 
cﬁs
,

4310 
uöt32
 
rows
, uöt32 
imagewidth
,

4311 
uöt32
 
tw
, 
uöt16
 
•p
, uöt16 
bps
,

4312 
FILE
 *
dumpfûe
, 
f‹m©
, 
Àvñ
)

4314 
ªady_bôs
 = 0;

4315 
uöt32
 
§c_rowsize
, 
d°_rowsize
;

4316 
uöt32
 
bô_off£t
, 
§c_off£t
;

4317 
uöt32
 
row
, 
cﬁ
, 
§c_byã
 = 0, 
§c_bô
 = 0;

4318 
uöt16
 
maskbôs
 = 0, 
m©chbôs
 = 0;

4319 
uöt16
 
buff1
 = 0, 
buff2
 = 0;

4320 
uöt8
 
byãbuff
 = 0;

4321 
tßm∂e_t
 
s
;

4322 *
§c
 = 
ö
[0];

4323 *
d°
 = 
out
;

4324 
a˘i⁄
[8];

4326 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

4328 
	`TIFFEº‹
("combineSeparateTileSamples16bits","Invalid input or output buffer");

4332 
§c_rowsize
 = ((
bps
 * 
tw
) + 7) / 8;

4333 
d°_rowsize
 = ((
imagewidth
 * 
bps
 * 
•p
) + 7) / 8;

4334 
maskbôs
 = (
uöt16
)-1 >> (16 - 
bps
);

4336 
row
 = 0;Ñow < 
rows
;Ñow++)

4338 
ªady_bôs
 = 0;

4339 
buff1
 = 
buff2
 = 0;

4340 
d°
 = 
out
 + (
row
 * 
d°_rowsize
);

4341 
§c_off£t
 = 
row
 * 
§c_rowsize
;

4342 
cﬁ
 = 0; cﬁ < 
cﬁs
; col++)

4345 
bô_off£t
 = 
cﬁ
 * 
bps
;

4346 
§c_byã
 = 
bô_off£t
 / 8;

4347 
§c_bô
 = 
bô_off£t
 % 8;

4349 
m©chbôs
 = 
maskbôs
 << (16 - 
§c_bô
 - 
bps
);

4350 
s
 = 0; s < 
•p
; s++)

4352 
§c
 = 
ö
[
s
] + 
§c_off£t
 + 
§c_byã
;

4353 i‡(
lôée_ídün
)

4354 
buff1
 = (
§c
[0] << 8) | src[1];

4356 
buff1
 = (
§c
[1] << 8) | src[0];

4357 
buff1
 = (buff1 & 
m©chbôs
Ë<< (
§c_bô
);

4360 i‡(
ªady_bôs
 >= 8)

4362 
byãbuff
 = (
buff2
 >> 8);

4363 *
d°
++ = 
byãbuff
;

4364 
ªady_bôs
 -= 8;

4366 
buff2
 = ((buff2 << 8Ë| (
buff1
 >> 
ªady_bôs
));

4367 
	`°r˝y
 (
a˘i⁄
, "Flush");

4371 
byãbuff
 = 0;

4372 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

4373 
	`°r˝y
 (
a˘i⁄
, "Update");

4375 
ªady_bôs
 +
bps
;

4377 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

4379 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

4381 
row
 + 1, 
cﬁ
 + 1, 
s
, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

4383 
	`dump_sh‹t
 (
dumpfûe
, 
f‹m©
, "M©ch bôs", 
m©chbôs
);

4384 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "Sr¯ bôs", 
§c
, 2);

4385 
	`dump_sh‹t
 (
dumpfûe
, 
f‹m©
, "Buff1 bôs", 
buff1
);

4386 
	`dump_sh‹t
 (
dumpfûe
, 
f‹m©
, "Buff2 bôs", 
buff2
);

4387 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbyã", 
byãbuff
);

4388 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "","Ródy bôs: %d, %s", 
ªady_bôs
, 
a˘i⁄
);

4394 i‡(
ªady_bôs
 > 0)

4396 
byãbuff
 = (
buff2
 >> 8);

4397 *
d°
++ = 
byãbuff
;

4398 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

4400 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

4402 
row
 + 1, 
cﬁ
 + 1, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

4403 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "FöÆ bôs", 
byãbuff
);

4407 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 2))

4409 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "combineSeparateTileSamples16bits","Output data");

4410 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
d°_rowsize
, 
row
, 
out
 + (row * dst_rowsize));

4415 
	}
}

4418 
	$comböeSï¨©eTûeSam∂es24bôs
 (
uöt8
 *
ö
[], uöt8 *
out
, 
uöt32
 
cﬁs
,

4419 
uöt32
 
rows
, uöt32 
imagewidth
,

4420 
uöt32
 
tw
, 
uöt16
 
•p
, uöt16 
bps
,

4421 
FILE
 *
dumpfûe
, 
f‹m©
, 
Àvñ
)

4423 
ªady_bôs
 = 0;

4424 
uöt32
 
§c_rowsize
, 
d°_rowsize
;

4425 
uöt32
 
bô_off£t
, 
§c_off£t
;

4426 
uöt32
 
row
, 
cﬁ
, 
§c_byã
 = 0, 
§c_bô
 = 0;

4427 
uöt32
 
maskbôs
 = 0, 
m©chbôs
 = 0;

4428 
uöt32
 
buff1
 = 0, 
buff2
 = 0;

4429 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0;

4430 
tßm∂e_t
 
s
;

4431 *
§c
 = 
ö
[0];

4432 *
d°
 = 
out
;

4433 
a˘i⁄
[8];

4435 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

4437 
	`TIFFEº‹
("combineSeparateTileSamples24bits","Invalid input or output buffer");

4441 
§c_rowsize
 = ((
bps
 * 
tw
) + 7) / 8;

4442 
d°_rowsize
 = ((
imagewidth
 * 
bps
 * 
•p
) + 7) / 8;

4443 
maskbôs
 = (
uöt32
)-1 >> ( 32 - 
bps
);

4445 
row
 = 0;Ñow < 
rows
;Ñow++)

4447 
ªady_bôs
 = 0;

4448 
buff1
 = 
buff2
 = 0;

4449 
d°
 = 
out
 + (
row
 * 
d°_rowsize
);

4450 
§c_off£t
 = 
row
 * 
§c_rowsize
;

4451 
cﬁ
 = 0; cﬁ < 
cﬁs
; col++)

4454 
bô_off£t
 = 
cﬁ
 * 
bps
;

4455 
§c_byã
 = 
bô_off£t
 / 8;

4456 
§c_bô
 = 
bô_off£t
 % 8;

4458 
m©chbôs
 = 
maskbôs
 << (32 - 
§c_bô
 - 
bps
);

4459 
s
 = 0; s < 
•p
; s++)

4461 
§c
 = 
ö
[
s
] + 
§c_off£t
 + 
§c_byã
;

4462 i‡(
lôée_ídün
)

4463 
buff1
 = (
§c
[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];

4465 
buff1
 = (
§c
[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];

4466 
buff1
 = (buff1 & 
m©chbôs
Ë<< (
§c_bô
);

4469 i‡(
ªady_bôs
 >= 16)

4471 
byãbuff1
 = (
buff2
 >> 24);

4472 *
d°
++ = 
byãbuff1
;

4473 
byãbuff2
 = (
buff2
 >> 16);

4474 *
d°
++ = 
byãbuff2
;

4475 
ªady_bôs
 -= 16;

4478 
buff2
 = ((buff2 << 16Ë| (
buff1
 >> 
ªady_bôs
));

4479 
	`°r˝y
 (
a˘i⁄
, "Flush");

4483 
byãbuff1
 = 
byãbuff2
 = 0;

4484 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

4485 
	`°r˝y
 (
a˘i⁄
, "Update");

4487 
ªady_bôs
 +
bps
;

4489 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

4491 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

4493 
row
 + 1, 
cﬁ
 + 1, 
s
, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

4494 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "M©ch bô†", 
m©chbôs
);

4495 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "Sr¯ bô†", 
§c
, 4);

4496 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff1 bô†", 
buff1
);

4497 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff2 bô†", 
buff2
);

4498 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs1", 
byãbuff1
);

4499 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs2", 
byãbuff2
);

4500 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "","Ródy bôs: %d, %s", 
ªady_bôs
, 
a˘i⁄
);

4506 
ªady_bôs
 > 0)

4508 
byãbuff1
 = (
buff2
 >> 24);

4509 *
d°
++ = 
byãbuff1
;

4511 
buff2
 = (buff2 << 8);

4512 
byãbuff2
 = 
byãbuff1
;

4513 
ªady_bôs
 -= 8;

4516 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

4518 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

4520 
row
 + 1, 
cﬁ
 + 1, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

4522 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "M©ch bô†", 
m©chbôs
);

4523 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "Sr¯ bô†", 
§c
, 4);

4524 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff1 bô†", 
buff1
);

4525 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff2 bô†", 
buff2
);

4526 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs1", 
byãbuff1
);

4527 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs2", 
byãbuff2
);

4528 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "", "Ródy bôs: %2d", 
ªady_bôs
);

4531 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 2))

4533 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "combineSeparateTileSamples24bits","Output data");

4534 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
d°_rowsize
, 
row
, 
out
 + (row * dst_rowsize));

4539 
	}
}

4542 
	$comböeSï¨©eTûeSam∂es32bôs
 (
uöt8
 *
ö
[], uöt8 *
out
, 
uöt32
 
cﬁs
,

4543 
uöt32
 
rows
, uöt32 
imagewidth
,

4544 
uöt32
 
tw
, 
uöt16
 
•p
, uöt16 
bps
,

4545 
FILE
 *
dumpfûe
, 
f‹m©
, 
Àvñ
)

4547 
ªady_bôs
 = 0, 
shi·_width
 = 0;

4548 
uöt32
 
§c_rowsize
, 
d°_rowsize
, 
bô_off£t
, 
§c_off£t
;

4549 
uöt32
 
§c_byã
 = 0, 
§c_bô
 = 0;

4550 
uöt32
 
row
, 
cﬁ
;

4551 
uöt32
 
l⁄gbuff1
 = 0, 
l⁄gbuff2
 = 0;

4552 
uöt64
 
maskbôs
 = 0, 
m©chbôs
 = 0;

4553 
uöt64
 
buff1
 = 0, 
buff2
 = 0, 
buff3
 = 0;

4554 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0, 
byãbuff3
 = 0, 
byãbuff4
 = 0;

4555 
tßm∂e_t
 
s
;

4556 *
§c
 = 
ö
[0];

4557 *
d°
 = 
out
;

4558 
a˘i⁄
[8];

4560 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

4562 
	`TIFFEº‹
("combineSeparateTileSamples32bits","Invalid input or output buffer");

4566 
§c_rowsize
 = ((
bps
 * 
tw
) + 7) / 8;

4567 
d°_rowsize
 = ((
imagewidth
 * 
bps
 * 
•p
) + 7) / 8;

4568 
maskbôs
 = (
uöt64
)-1 >> ( 64 - 
bps
);

4569 
shi·_width
 = ((
bps
 + 7) / 8) + 1;

4571 
row
 = 0;Ñow < 
rows
;Ñow++)

4573 
ªady_bôs
 = 0;

4574 
buff1
 = 
buff2
 = 0;

4575 
d°
 = 
out
 + (
row
 * 
d°_rowsize
);

4576 
§c_off£t
 = 
row
 * 
§c_rowsize
;

4577 
cﬁ
 = 0; cﬁ < 
cﬁs
; col++)

4580 
bô_off£t
 = 
cﬁ
 * 
bps
;

4581 
§c_byã
 = 
bô_off£t
 / 8;

4582 
§c_bô
 = 
bô_off£t
 % 8;

4584 
m©chbôs
 = 
maskbôs
 << (64 - 
§c_bô
 - 
bps
);

4585 
s
 = 0; s < 
•p
; s++)

4587 
§c
 = 
ö
[
s
] + 
§c_off£t
 + 
§c_byã
;

4588 i‡(
lôée_ídün
)

4590 
l⁄gbuff1
 = (
§c
[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];

4591 
l⁄gbuff2
 = 
l⁄gbuff1
;

4595 
l⁄gbuff1
 = (
§c
[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];

4596 
l⁄gbuff2
 = 
l⁄gbuff1
;

4599 
buff3
 = ((
uöt64
)
l⁄gbuff1
 << 32Ë| 
l⁄gbuff2
;

4600 
buff1
 = (
buff3
 & 
m©chbôs
Ë<< (
§c_bô
);

4603 i‡(
ªady_bôs
 >= 32)

4605 
byãbuff1
 = (
buff2
 >> 56);

4606 *
d°
++ = 
byãbuff1
;

4607 
byãbuff2
 = (
buff2
 >> 48);

4608 *
d°
++ = 
byãbuff2
;

4609 
byãbuff3
 = (
buff2
 >> 40);

4610 *
d°
++ = 
byãbuff3
;

4611 
byãbuff4
 = (
buff2
 >> 32);

4612 *
d°
++ = 
byãbuff4
;

4613 
ªady_bôs
 -= 32;

4616 
buff2
 = ((buff2 << 32Ë| (
buff1
 >> 
ªady_bôs
));

4617 
	`°r˝y
 (
a˘i⁄
, "Flush");

4621 
byãbuff1
 = 
byãbuff2
 = 
byãbuff3
 = 
byãbuff4
 = 0;

4622 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

4623 
	`°r˝y
 (
a˘i⁄
, "Update");

4625 
ªady_bôs
 +
bps
;

4627 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

4629 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

4631 
row
 + 1, 
cﬁ
 + 1, 
s
, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

4632 
	`dump_wide
 (
dumpfûe
, 
f‹m©
, "M©ch bô†", 
m©chbôs
);

4633 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "Sr¯ bô†", 
§c
, 8);

4634 
	`dump_wide
 (
dumpfûe
, 
f‹m©
, "Buff1 bô†", 
buff1
);

4635 
	`dump_wide
 (
dumpfûe
, 
f‹m©
, "Buff2 bô†", 
buff2
);

4636 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "", "Ródy bôs: %d, %s", 
ªady_bôs
, 
a˘i⁄
);

4640 
ªady_bôs
 > 0)

4642 
byãbuff1
 = (
buff2
 >> 56);

4643 *
d°
++ = 
byãbuff1
;

4644 
buff2
 = (buff2 << 8);

4645 
ªady_bôs
 -= 8;

4648 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 3))

4650 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "",

4652 
row
 + 1, 
cﬁ
 + 1, 
§c_byã
, 
§c_bô
, 
d°
 - 
out
);

4654 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "M©ch bô†", 
m©chbôs
);

4655 
	`dump_d©a
 (
dumpfûe
, 
f‹m©
, "Sr¯ bô†", 
§c
, 4);

4656 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff1 bô†", 
buff1
);

4657 
	`dump_l⁄g
 (
dumpfûe
, 
f‹m©
, "Buff2 bô†", 
buff2
);

4658 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs1", 
byãbuff1
);

4659 
	`dump_byã
 (
dumpfûe
, 
f‹m©
, "Wrôêbôs2", 
byãbuff2
);

4660 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "", "Ródy bôs: %2d", 
ªady_bôs
);

4663 i‡((
dumpfûe
 !
NULL
Ë&& (
Àvñ
 == 2))

4665 
	`dump_öfo
 (
dumpfûe
, 
f‹m©
, "combineSeparateTileSamples32bits","Output data");

4666 
	`dump_buf„r
(
dumpfûe
, 
f‹m©
, 1, 
d°_rowsize
, 
row
, 
out
);

4671 
	}
}

4674 
	$ªadSï¨©eSåùsI¡oBuf„r
 (
TIFF
 *
ö
, 
uöt8
 *
obuf
, 
uöt32
 
Àngth
,

4675 
uöt32
 
width
, 
uöt16
 
•p
,

4676 
dump_›ts
 *
dump
)

4678 
i
, 
j
, 
byãs_≥r_ßm∂e
, 
byãs_≥r_pixñ
, 
shi·_width
, 
ªsu…
 = 1;

4679 
öt32
 
byãs_ªad
 = 0;

4680 
uöt16
 
bps
, 
n°rùs
, 
∂™¨
, 
°rùs_≥r_ßm∂e
;

4681 
uöt32
 
§c_rowsize
, 
d°_rowsize
, 
rows_¥o˚s£d
, 
Ωs
;

4682 
uöt32
 
rows_this_°rù
 = 0;

4683 
tßm∂e_t
 
s
;

4684 
t°rù_t
 
°rù
;

4685 
tsize_t
 
sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(
ö
);

4686 
tsize_t
 
°rùsize
 = 
	`TIFFSåùSize
(
ö
);

4687 *
§cbuffs
[
MAX_SAMPLES
];

4688 *
buff
 = 
NULL
;

4689 *
d°
 = 
NULL
;

4691 i‡(
obuf
 =
NULL
)

4693 
	`TIFFEº‹
("readSeparateStripsIntoBuffer","Invalid bufferárgument");

4697 
	`mem£t
 (
§cbuffs
, '\0', (srcbuffs));

4698 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_BITSPERSAMPLE
, &
bps
);

4699 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_PLANARCONFIG
, &
∂™¨
);

4700 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_ROWSPERSTRIP
, &
Ωs
);

4701 i‡(
Ωs
 > 
Àngth
)

4702 
Ωs
 = 
Àngth
;

4704 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

4705 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

4706 i‡(
byãs_≥r_pixñ
 < (
byãs_≥r_ßm∂e
 + 1))

4707 
shi·_width
 = 
byãs_≥r_pixñ
;

4709 
shi·_width
 = 
byãs_≥r_ßm∂e
 + 1;

4711 
§c_rowsize
 = ((
bps
 * 
width
) + 7) / 8;

4712 
d°_rowsize
 = ((
bps
 * 
width
 * 
•p
) + 7) / 8;

4713 
d°
 = 
obuf
;

4715 i‡((
dump
->
öfûe
 !
NULL
Ë&& (dump->
Àvñ
 == 3))

4717 
	`dump_öfo
 (
dump
->
öfûe
, dump->
f‹m©
, "",

4719 
width
, 
Àngth
, 
sˇ∆öesize
);

4720 
	`dump_öfo
 (
dump
->
öfûe
, dump->
f‹m©
, "",

4722 
bps
, 
•p
, 
shi·_width
);

4730 
n°rùs
 = 
	`TIFFNumbîOfSåùs
(
ö
);

4731 
°rùs_≥r_ßm∂e
 = 
n°rùs
 /
•p
;

4733 
s
 = 0; (†< 
•p
Ë&& (†< 
MAX_SAMPLES
); s++)

4735 
§cbuffs
[
s
] = 
NULL
;

4736 
buff
 = 
	`_TIFFmÆloc
(
°rùsize
);

4737 i‡(!
buff
)

4739 
	`TIFFEº‹
 ("readSeparateStripsIntoBuffer",

4740 "U«bÀÅÿÆloˇã såùÑód buf„∏f‹ sam∂ê%d", 
s
);

4741 
i
 = 0; i < 
s
; i++)

4742 
	`_TIFF‰ì
 (
§cbuffs
[
i
]);

4745 
§cbuffs
[
s
] = 
buff
;

4748 
rows_¥o˚s£d
 = 0;

4749 
j
 = 0; (j < 
°rùs_≥r_ßm∂e
Ë&& (
ªsu…
 == 1); j++)

4751 
s
 = 0; (†< 
•p
Ë&& (†< 
MAX_SAMPLES
); s++)

4753 
buff
 = 
§cbuffs
[
s
];

4754 
°rù
 = (
s
 * 
°rùs_≥r_ßm∂e
Ë+ 
j
;

4755 
byãs_ªad
 = 
	`TIFFRódEncodedSåù
 (
ö
, 
°rù
, 
buff
, 
°rùsize
);

4756 
rows_this_°rù
 = 
byãs_ªad
 / 
§c_rowsize
;

4757 i‡(
byãs_ªad
 < 0 && !
ign‹e
)

4759 
	`TIFFEº‹
(
	`TIFFFûeName
(
ö
),

4761 (Ë
°rù
, 
s
 + 1);

4762 
ªsu…
 = 0;

4765 #ifde‡
DEVELMODE


4766 
	`TIFFEº‹
("", "Strip %2d,Ñead %5d bytes for %4d scanlines, shift width %d",

4767 
°rù
, 
byãs_ªad
, 
rows_this_°rù
, 
shi·_width
);

4771 i‡(
Ωs
 > 
rows_this_°rù
)

4772 
Ωs
 = 
rows_this_°rù
;

4773 
d°
 = 
obuf
 + (
d°_rowsize
 * 
rows_¥o˚s£d
);

4774 i‡((
bps
 % 8) == 0)

4776 i‡(
	`comböeSï¨©eSam∂esByãs
 (
§cbuffs
, 
d°
, 
width
, 
Ωs
,

4777 
•p
, 
bps
, 
dump
->
öfûe
,

4778 
dump
->
f‹m©
, dump->
Àvñ
))

4780 
ªsu…
 = 0;

4786 
shi·_width
)

4788 1: i‡(
	`comböeSï¨©eSam∂es8bôs
 (
§cbuffs
, 
d°
, 
width
, 
Ωs
,

4789 
•p
, 
bps
, 
dump
->
öfûe
,

4790 
dump
->
f‹m©
, dump->
Àvñ
))

4792 
ªsu…
 = 0;

4796 2: i‡(
	`comböeSï¨©eSam∂es16bôs
 (
§cbuffs
, 
d°
, 
width
, 
Ωs
,

4797 
•p
, 
bps
, 
dump
->
öfûe
,

4798 
dump
->
f‹m©
, dump->
Àvñ
))

4800 
ªsu…
 = 0;

4804 3: i‡(
	`comböeSï¨©eSam∂es24bôs
 (
§cbuffs
, 
d°
, 
width
, 
Ωs
,

4805 
•p
, 
bps
, 
dump
->
öfûe
,

4806 
dump
->
f‹m©
, dump->
Àvñ
))

4808 
ªsu…
 = 0;

4816 8: i‡(
	`comböeSï¨©eSam∂es32bôs
 (
§cbuffs
, 
d°
, 
width
, 
Ωs
,

4817 
•p
, 
bps
, 
dump
->
öfûe
,

4818 
dump
->
f‹m©
, dump->
Àvñ
))

4820 
ªsu…
 = 0;

4824 : 
	`TIFFEº‹
 ("ªadSï¨©eSåùsI¡oBuf„r", "Unsuµ‹ãd bô dïth: %d", 
bps
);

4825 
ªsu…
 = 0;

4830 i‡((
rows_¥o˚s£d
 + 
Ωs
Ë> 
Àngth
)

4832 
rows_¥o˚s£d
 = 
Àngth
;

4833 
Ωs
 = 
Àngth
 - 
rows_¥o˚s£d
;

4836 
rows_¥o˚s£d
 +
Ωs
;

4842 
s
 = 0; (†< 
•p
Ë&& (†< 
MAX_SAMPLES
); s++)

4844 
buff
 = 
§cbuffs
[
s
];

4845 i‡(
buff
 !
NULL
)

4846 
	`_TIFF‰ì
(
buff
);

4849  (
ªsu…
);

4850 
	}
}

4853 
	$gë_∑ge_geomëry
 (*
«me
, 
∑gedef
 *
∑ge
)

4855 *
±r
;

4856 
n
;

4858 
±r
 = 
«me
; *ptr;Ötr++)

4859 *
±r
 = ()
	`tﬁowî
(()*ptr);

4861 
n
 = 0;Ç < 
MAX_PAPERNAMES
;Ç++)

4863 i‡(
	`°rcmp
(
«me
, 
P≠îTabÀ
[
n
].name) == 0)

4865 
∑ge
->
width
 = 
P≠îTabÀ
[
n
].width;

4866 
∑ge
->
Àngth
 = 
P≠îTabÀ
[
n
].length;

4867 
	`°∫˝y
 (
∑ge
->
«me
, 
P≠îTabÀ
[
n
].name, 15);

4868 
∑ge
->
«me
[15] = '\0';

4874 
	}
}

4878 
	$öôPageSëup
 (
∑gedef
 *
∑ge
, 
∑ge£g
 *
∑gñi°
,

4879 
bufföfo
 
£g_buffs
[])

4881 
i
;

4883 
	`°r˝y
 (
∑ge
->
«me
, "");

4884 
∑ge
->
mode
 = 
PAGE_MODE_NONE
;

4885 
∑ge
->
ªs_unô
 = 
RESUNIT_NONE
;

4886 
∑ge
->
hªs
 = 0.0;

4887 
∑ge
->
vªs
 = 0.0;

4888 
∑ge
->
width
 = 0.0;

4889 
∑ge
->
Àngth
 = 0.0;

4890 
∑ge
->
hm¨gö
 = 0.0;

4891 
∑ge
->
vm¨gö
 = 0.0;

4892 
∑ge
->
rows
 = 0;

4893 
∑ge
->
cﬁs
 = 0;

4894 
∑ge
->
‹õ¡
 = 
ORIENTATION_NONE
;

4896 
i
 = 0; i < 
MAX_SECTIONS
; i++)

4898 
∑gñi°
[
i
].
x1
 = (
uöt32
)0;

4899 
∑gñi°
[
i
].
x2
 = (
uöt32
)0;

4900 
∑gñi°
[
i
].
y1
 = (
uöt32
)0;

4901 
∑gñi°
[
i
].
y2
 = (
uöt32
)0;

4902 
∑gñi°
[
i
].
buffsize
 = (
uöt32
)0;

4903 
∑gñi°
[
i
].
posôi⁄
 = 0;

4904 
∑gñi°
[
i
].
tŸÆ
 = 0;

4907 
i
 = 0; i < 
MAX_OUTBUFFS
; i++)

4909 
£g_buffs
[
i
].
size
 = 0;

4910 
£g_buffs
[
i
].
buf„r
 = 
NULL
;

4912 
	}
}

4915 
	$öôImageD©a
 (
image_d©a
 *
image
)

4917 
image
->
xªs
 = 0.0;

4918 
image
->
yªs
 = 0.0;

4919 
image
->
width
 = 0;

4920 
image
->
Àngth
 = 0;

4921 
image
->
ªs_unô
 = 
RESUNIT_NONE
;

4922 
image
->
bps
 = 0;

4923 
image
->
•p
 = 0;

4924 
image
->
∂™¨
 = 0;

4925 
image
->
phŸomëric
 = 0;

4926 
image
->
‹õ¡©i⁄
 = 0;

4927 
image
->
com¥essi⁄
 = 
COMPRESSION_NONE
;

4928 
image
->
adju°míts
 = 0;

4929 
	}
}

4932 
	$öôCr›Masks
 (
¸›_mask
 *
˝s
)

4934 
i
;

4936 
˝s
->
¸›_mode
 = 
CROP_NONE
;

4937 
˝s
->
ªs_unô
 = 
RESUNIT_NONE
;

4938 
˝s
->
edge_ªf
 = 
EDGE_TOP
;

4939 
˝s
->
width
 = 0;

4940 
˝s
->
Àngth
 = 0;

4941 
i
 = 0; i < 4; i++)

4942 
˝s
->
m¨gös
[
i
] = 0.0;

4943 
˝s
->
buf·ŸÆ
 = (
uöt32
)0;

4944 
˝s
->
comböed_width
 = (
uöt32
)0;

4945 
˝s
->
comböed_Àngth
 = (
uöt32
)0;

4946 
˝s
->
rŸ©i⁄
 = (
uöt16
)0;

4947 
˝s
->
phŸomëric
 = 
INVERT_DATA_AND_TAG
;

4948 
˝s
->
múr‹
 = (
uöt16
)0;

4949 
˝s
->
övît
 = (
uöt16
)0;

4950 
˝s
->
z⁄es
 = (
uöt32
)0;

4951 
˝s
->
ªgi⁄s
 = (
uöt32
)0;

4952 
i
 = 0; i < 
MAX_REGIONS
; i++)

4954 
˝s
->
c‹√rs
[
i
].
X1
 = 0.0;

4955 
˝s
->
c‹√rs
[
i
].
X2
 = 0.0;

4956 
˝s
->
c‹√rs
[
i
].
Y1
 = 0.0;

4957 
˝s
->
c‹√rs
[
i
].
Y2
 = 0.0;

4958 
˝s
->
ªgi⁄li°
[
i
].
x1
 = 0;

4959 
˝s
->
ªgi⁄li°
[
i
].
x2
 = 0;

4960 
˝s
->
ªgi⁄li°
[
i
].
y1
 = 0;

4961 
˝s
->
ªgi⁄li°
[
i
].
y2
 = 0;

4962 
˝s
->
ªgi⁄li°
[
i
].
width
 = 0;

4963 
˝s
->
ªgi⁄li°
[
i
].
Àngth
 = 0;

4964 
˝s
->
ªgi⁄li°
[
i
].
buffsize
 = 0;

4965 
˝s
->
ªgi⁄li°
[
i
].
bufÂå
 = 
NULL
;

4966 
˝s
->
z⁄ñi°
[
i
].
posôi⁄
 = 0;

4967 
˝s
->
z⁄ñi°
[
i
].
tŸÆ
 = 0;

4969 
˝s
->
exp_mode
 = 
ONE_FILE_COMPOSITE
;

4970 
˝s
->
img_mode
 = 
COMPOSITE_IMAGES
;

4971 
	}
}

4973 
	$öôDumpO±i⁄s
(
dump_›ts
 *
dump
)

4975 
dump
->
debug
 = 0;

4976 
dump
->
f‹m©
 = 
DUMP_NONE
;

4977 
dump
->
Àvñ
 = 1;

4978 
	`•rötf
 (
dump
->
mode
, "w");

4979 
	`mem£t
 (
dump
->
öfûíame
, '\0', 
PATH_MAX
 + 1);

4980 
	`mem£t
 (
dump
->
outfûíame
, '\0',
PATH_MAX
 + 1);

4981 
dump
->
öfûe
 = 
NULL
;

4982 
dump
->
outfûe
 = 
NULL
;

4983 
	}
}

4987 
	$compuãI≈utPixñOff£ts
(
¸›_mask
 *
¸›
, 
image_d©a
 *
image
,

4988 
off£t
 *
off
)

4990 
sˇÀ
;

4991 
xªs
, 
yªs
;

4994 
uöt32
 
tm¨gö
, 
bm¨gö
, 
lm¨gö
, 
rm¨gö
;

4995 
uöt32
 
°¨tx
, 
ídx
;

4996 
uöt32
 
°¨ty
, 
ídy
;

4997 
uöt32
 
width
, 
Àngth
, 
¸›_width
, 
¸›_Àngth
;

4998 
uöt32
 
i
, 
max_width
, 
max_Àngth
, 
zwidth
, 
zÀngth
, 
buffsize
;

4999 
uöt32
 
x1
, 
x2
, 
y1
, 
y2
;

5001 i‡(
image
->
ªs_unô
 !
RESUNIT_INCH
 && image->ªs_unô !
RESUNIT_CENTIMETER
)

5003 
xªs
 = 1.0;

5004 
yªs
 = 1.0;

5008 i‡(((
image
->
xªs
 =0Ë|| (image->
yªs
 == 0)) &&

5009 (
¸›
->
ªs_unô
 !
RESUNIT_NONE
) &&

5010 ((
¸›
->
¸›_mode
 & 
CROP_REGIONS
Ë|| (¸›->¸›_modê& 
CROP_MARGINS
) ||

5011 (
¸›
->
¸›_mode
 & 
CROP_LENGTH
Ë|| (¸›->¸›_modê& 
CROP_WIDTH
)))

5013 
	`TIFFEº‹
("computeInputPixelOffsets", "Cannot compute margins or fixed size sections without imageÑesolution");

5014 
	`TIFFEº‹
("computeInputPixelOffsets", "Specify units inÖixelsándÅryágain");

5017 
xªs
 = 
image
->xres;

5018 
yªs
 = 
image
->yres;

5022 
sˇÀ
 = 1.0;

5023 
¸›
->
ªs_unô
) {

5024 
RESUNIT_CENTIMETER
:

5025 i‡(
image
->
ªs_unô
 =
RESUNIT_INCH
)

5026 
sˇÀ
 = 1.0/2.54;

5028 
RESUNIT_INCH
:

5029 i‡(
image
->
ªs_unô
 =
RESUNIT_CENTIMETER
)

5030 
sˇÀ
 = 2.54;

5032 
RESUNIT_NONE
:

5037 i‡(
¸›
->
¸›_mode
 & 
CROP_REGIONS
)

5039 
max_width
 = 
max_Àngth
 = 0;

5040 
i
 = 0; i < 
¸›
->
ªgi⁄s
; i++)

5042 i‡((
¸›
->
ªs_unô
 =
RESUNIT_INCH
Ë|| (¸›->ªs_unô =
RESUNIT_CENTIMETER
))

5044 
x1
 = (
uöt32
Ë(
¸›
->
c‹√rs
[
i
].
X1
 * 
sˇÀ
 * 
xªs
);

5045 
x2
 = (
uöt32
Ë(
¸›
->
c‹√rs
[
i
].
X2
 * 
sˇÀ
 * 
xªs
);

5046 
y1
 = (
uöt32
Ë(
¸›
->
c‹√rs
[
i
].
Y1
 * 
sˇÀ
 * 
yªs
);

5047 
y2
 = (
uöt32
Ë(
¸›
->
c‹√rs
[
i
].
Y2
 * 
sˇÀ
 * 
yªs
);

5051 
x1
 = (
uöt32
Ë(
¸›
->
c‹√rs
[
i
].
X1
);

5052 
x2
 = (
uöt32
Ë(
¸›
->
c‹√rs
[
i
].
X2
);

5053 
y1
 = (
uöt32
Ë(
¸›
->
c‹√rs
[
i
].
Y1
);

5054 
y2
 = (
uöt32
Ë(
¸›
->
c‹√rs
[
i
].
Y2
);

5056 i‡(
x1
 < 1)

5057 
¸›
->
ªgi⁄li°
[
i
].
x1
 = 0;

5059 
¸›
->
ªgi⁄li°
[
i
].
x1
 = (
uöt32
) (x1 - 1);

5061 i‡(
x2
 > 
image
->
width
 - 1)

5062 
¸›
->
ªgi⁄li°
[
i
].
x2
 = 
image
->
width
 - 1;

5064 
¸›
->
ªgi⁄li°
[
i
].
x2
 = (
uöt32
) (x2 - 1);

5065 
zwidth
 = 
¸›
->
ªgi⁄li°
[
i
].
x2
 - cr›->ªgi⁄li°[i].
x1
 + 1;

5067 i‡(
y1
 < 1)

5068 
¸›
->
ªgi⁄li°
[
i
].
y1
 = 0;

5070 
¸›
->
ªgi⁄li°
[
i
].
y1
 = (
uöt32
) (y1 - 1);

5072 i‡(
y2
 > 
image
->
Àngth
 - 1)

5073 
¸›
->
ªgi⁄li°
[
i
].
y2
 = 
image
->
Àngth
 - 1;

5075 
¸›
->
ªgi⁄li°
[
i
].
y2
 = (
uöt32
) (y2 - 1);

5077 
zÀngth
 = 
¸›
->
ªgi⁄li°
[
i
].
y2
 - cr›->ªgi⁄li°[i].
y1
 + 1;

5079 i‡(
zwidth
 > 
max_width
)

5080 
max_width
 = 
zwidth
;

5081 i‡(
zÀngth
 > 
max_Àngth
)

5082 
max_Àngth
 = 
zÀngth
;

5084 
buffsize
 = (
uöt32
)

5085 (((
zwidth
 * 
image
->
bps
 * image->
•p
 + 7 ) / 8Ë* (
zÀngth
 + 1));

5087 
¸›
->
ªgi⁄li°
[
i
].
buffsize
 = buffsize;

5088 
¸›
->
buf·ŸÆ
 +
buffsize
;

5089 i‡(
¸›
->
img_mode
 =
COMPOSITE_IMAGES
)

5091 
¸›
->
edge_ªf
)

5093 
EDGE_LEFT
:

5094 
EDGE_RIGHT
:

5095 
¸›
->
comböed_Àngth
 = 
zÀngth
;

5096 
¸›
->
comböed_width
 +
zwidth
;

5098 
EDGE_BOTTOM
:

5099 
EDGE_TOP
:

5101 
¸›
->
comböed_width
 = 
zwidth
;

5102 
¸›
->
comböed_Àngth
 +
zÀngth
;

5113 i‡(
¸›
->
¸›_mode
 & 
CROP_MARGINS
)

5115 i‡(
¸›
->
ªs_unô
 !
RESUNIT_INCH
 && cr›->ªs_unô !
RESUNIT_CENTIMETER
)

5117 
tm¨gö
 = (
uöt32
)(
¸›
->
m¨gös
[0]);

5118 
lm¨gö
 = (
uöt32
)(
¸›
->
m¨gös
[1]);

5119 
bm¨gö
 = (
uöt32
)(
¸›
->
m¨gös
[2]);

5120 
rm¨gö
 = (
uöt32
)(
¸›
->
m¨gös
[3]);

5124 
tm¨gö
 = (
uöt32
)(
¸›
->
m¨gös
[0] * 
sˇÀ
 * 
yªs
);

5125 
lm¨gö
 = (
uöt32
)(
¸›
->
m¨gös
[1] * 
sˇÀ
 * 
xªs
);

5126 
bm¨gö
 = (
uöt32
)(
¸›
->
m¨gös
[2] * 
sˇÀ
 * 
yªs
);

5127 
rm¨gö
 = (
uöt32
)(
¸›
->
m¨gös
[3] * 
sˇÀ
 * 
xªs
);

5130 i‡((
lm¨gö
 + 
rm¨gö
Ë> 
image
->
width
)

5132 
	`TIFFEº‹
("computeInputPixelOffsets", "CombinedÜeftándÑight marginsÉxceed image width");

5133 
lm¨gö
 = (
uöt32
) 0;

5134 
rm¨gö
 = (
uöt32
) 0;

5137 i‡((
tm¨gö
 + 
bm¨gö
Ë> 
image
->
Àngth
)

5139 
	`TIFFEº‹
("computeInputPixelOffsets", "CombinedÅopánd bottom marginsÉxceed imageÜength");

5140 
tm¨gö
 = (
uöt32
) 0;

5141 
bm¨gö
 = (
uöt32
) 0;

5147 
tm¨gö
 = (
uöt32
) 0;

5148 
lm¨gö
 = (
uöt32
) 0;

5149 
bm¨gö
 = (
uöt32
) 0;

5150 
rm¨gö
 = (
uöt32
) 0;

5154 i‡(
¸›
->
ªs_unô
 !
RESUNIT_INCH
 && cr›->ªs_unô !
RESUNIT_CENTIMETER
)

5156 i‡(
¸›
->
¸›_mode
 & 
CROP_WIDTH
)

5157 
width
 = (
uöt32
)
¸›
->width;

5159 
width
 = 
image
->width - 
lm¨gö
 - 
rm¨gö
;

5161 i‡(
¸›
->
¸›_mode
 & 
CROP_LENGTH
)

5162 
Àngth
 = (
uöt32
)
¸›
->length;

5164 
Àngth
 = 
image
->Àngth - 
tm¨gö
 - 
bm¨gö
;

5168 i‡(
¸›
->
¸›_mode
 & 
CROP_WIDTH
)

5169 
width
 = (
uöt32
)(
¸›
->width * 
sˇÀ
 * 
image
->
xªs
);

5171 
width
 = 
image
->width - 
lm¨gö
 - 
rm¨gö
;

5173 i‡(
¸›
->
¸›_mode
 & 
CROP_LENGTH
)

5174 
Àngth
 = (
uöt32
)(
¸›
->Àngth * 
sˇÀ
 * 
image
->
yªs
);

5176 
Àngth
 = 
image
->Àngth - 
tm¨gö
 - 
bm¨gö
;

5179 
off
->
tm¨gö
 =Åmargin;

5180 
off
->
bm¨gö
 = bmargin;

5181 
off
->
lm¨gö
 =Ümargin;

5182 
off
->
rm¨gö
 =Ñmargin;

5187 
¸›
->
edge_ªf
) {

5188 
EDGE_BOTTOM
:

5189 
°¨tx
 = 
lm¨gö
;

5190 i‡((
°¨tx
 + 
width
Ë>(
image
->width - 
rm¨gö
))

5191 
ídx
 = 
image
->
width
 - 
rm¨gö
 - 1;

5193 
ídx
 = 
°¨tx
 + 
width
 - 1;

5195 
ídy
 = 
image
->
Àngth
 - 
bm¨gö
 - 1;

5196 i‡((
ídy
 - 
Àngth
Ë<
tm¨gö
)

5197 
°¨ty
 = 
tm¨gö
;

5199 
°¨ty
 = 
ídy
 - 
Àngth
 + 1;

5201 
EDGE_RIGHT
:

5202 
ídx
 = 
image
->
width
 - 
rm¨gö
 - 1;

5203 i‡((
ídx
 - 
width
Ë<
lm¨gö
)

5204 
°¨tx
 = 
lm¨gö
;

5206 
°¨tx
 = 
ídx
 - 
width
 + 1;

5208 
°¨ty
 = 
tm¨gö
;

5209 i‡((
°¨ty
 + 
Àngth
Ë>(
image
->Àngth - 
bm¨gö
))

5210 
ídy
 = 
image
->
Àngth
 - 
bm¨gö
 - 1;

5212 
ídy
 = 
°¨ty
 + 
Àngth
 - 1;

5214 
EDGE_TOP
:

5215 
EDGE_LEFT
:

5217 
°¨tx
 = 
lm¨gö
;

5218 i‡((
°¨tx
 + 
width
Ë>(
image
->width - 
rm¨gö
))

5219 
ídx
 = 
image
->
width
 - 
rm¨gö
 - 1;

5221 
ídx
 = 
°¨tx
 + 
width
 - 1;

5223 
°¨ty
 = 
tm¨gö
;

5224 i‡((
°¨ty
 + 
Àngth
Ë>(
image
->Àngth - 
bm¨gö
))

5225 
ídy
 = 
image
->
Àngth
 - 
bm¨gö
 - 1;

5227 
ídy
 = 
°¨ty
 + 
Àngth
 - 1;

5230 
off
->
°¨tx
 = startx;

5231 
off
->
°¨ty
 = starty;

5232 
off
->
ídx
 =Éndx;

5233 
off
->
ídy
 =Éndy;

5235 
¸›_width
 = 
ídx
 - 
°¨tx
 + 1;

5236 
¸›_Àngth
 = 
ídy
 - 
°¨ty
 + 1;

5238 i‡(
¸›_width
 <= 0)

5240 
	`TIFFEº‹
("computeInputPixelOffsets",

5244 i‡(
¸›_width
 > 
image
->
width
)

5245 
¸›_width
 = 
image
->
width
;

5247 i‡(
¸›_Àngth
 <= 0)

5249 
	`TIFFEº‹
("computeInputPixelOffsets",

5253 i‡(
¸›_Àngth
 > 
image
->
Àngth
)

5254 
¸›_Àngth
 = 
image
->
Àngth
;

5256 
off
->
¸›_width
 = crop_width;

5257 
off
->
¸›_Àngth
 = crop_length;

5260 
	}
}

5274 
	$gëCr›Off£ts
(
image_d©a
 *
image
, 
¸›_mask
 *
¸›
, 
dump_›ts
 *
dump
)

5276 
off£t
 
off£ts
;

5277 
i
;

5278 
öt32
 
ã°
;

5279 
uöt32
 
£g
, 
tŸÆ
, 
√ed_buff
 = 0;

5280 
uöt32
 
buffsize
;

5281 
uöt32
 
zwidth
, 
zÀngth
;

5283 
	`mem£t
(&
off£ts
, '\0', (
off£t
));

5284 
¸›
->
buf·ŸÆ
 = 0;

5285 
¸›
->
comböed_width
 = (
uöt32
)0;

5286 
¸›
->
comböed_Àngth
 = (
uöt32
)0;

5287 
¸›
->
£À˘i⁄s
 = 0;

5290 i‡((
¸›
->
¸›_mode
 & 
CROP_MARGINS
) ||

5291 (
¸›
->
¸›_mode
 & 
CROP_REGIONS
) ||

5292 (
¸›
->
¸›_mode
 & 
CROP_LENGTH
) ||

5293 (
¸›
->
¸›_mode
 & 
CROP_WIDTH
))

5295 i‡(
	`compuãI≈utPixñOff£ts
(
¸›
, 
image
, &
off£ts
))

5297 
	`TIFFEº‹
 ("getCropOffsets", "UnableÅo compute crop margins");

5300 
√ed_buff
 = 
TRUE
;

5301 
¸›
->
£À˘i⁄s
 = cr›->
ªgi⁄s
;

5303 i‡(
¸›
->
¸›_mode
 & 
CROP_REGIONS
)

5308 
off£ts
.
tm¨gö
 = 0;

5309 
off£ts
.
lm¨gö
 = 0;

5310 
off£ts
.
bm¨gö
 = 0;

5311 
off£ts
.
rm¨gö
 = 0;

5312 
off£ts
.
¸›_width
 = 
image
->
width
;

5313 
off£ts
.
¸›_Àngth
 = 
image
->
Àngth
;

5314 
off£ts
.
°¨tx
 = 0;

5315 
off£ts
.
ídx
 = 
image
->
width
 - 1;

5316 
off£ts
.
°¨ty
 = 0;

5317 
off£ts
.
ídy
 = 
image
->
Àngth
 - 1;

5318 
√ed_buff
 = 
FALSE
;

5321 i‡(
dump
->
outfûe
 !
NULL
)

5323 
	`dump_öfo
 (
dump
->
outfûe
, dump->
f‹m©
, "", "Margins: Top: %d Left: %d Bottom: %d Right: %d",

5324 
off£ts
.
tm¨gö
, off£ts.
lm¨gö
, off£ts.
bm¨gö
, off£ts.
rm¨gö
);

5325 
	`dump_öfo
 (
dump
->
outfûe
, dump->
f‹m©
, "", "CropÑegion within margins: Adjusted Width: %6d Length: %6d",

5326 
off£ts
.
¸›_width
, off£ts.
¸›_Àngth
);

5329 i‡(!(
¸›
->
¸›_mode
 & 
CROP_ZONES
))

5331 i‡(
√ed_buff
 =
FALSE
)

5333 
¸›
->
£À˘i⁄s
 = 0;

5334 
¸›
->
comböed_width
 = 
image
->
width
;

5335 
¸›
->
comböed_Àngth
 = 
image
->
Àngth
;

5343 
¸›
->
£À˘i⁄s
 = 1;

5344 
¸›
->
z⁄es
 = 1;

5345 
¸›
->
z⁄ñi°
[0].
tŸÆ
 = 1;

5346 
¸›
->
z⁄ñi°
[0].
posôi⁄
 = 1;

5350 
¸›
->
£À˘i⁄s
 = cr›->
z⁄es
;

5352 
i
 = 0; i < 
¸›
->
z⁄es
; i++)

5354 
£g
 = 
¸›
->
z⁄ñi°
[
i
].
posôi⁄
;

5355 
tŸÆ
 = 
¸›
->
z⁄ñi°
[
i
].total;

5357 
¸›
->
edge_ªf
)

5359 
EDGE_LEFT
:

5360 
zÀngth
 = 
off£ts
.
¸›_Àngth
;

5361 
¸›
->
ªgi⁄li°
[
i
].
y1
 = 
off£ts
.
°¨ty
;

5362 
¸›
->
ªgi⁄li°
[
i
].
y2
 = 
off£ts
.
ídy
;

5364 
¸›
->
ªgi⁄li°
[
i
].
x1
 = 
off£ts
.
°¨tx
 +

5365 (
uöt32
)(
off£ts
.
¸›_width
 * 1.0 * (
£g
 - 1Ë/ 
tŸÆ
);

5366 
ã°
 = (
öt32
)
off£ts
.
°¨tx
 +

5367 (
öt32
)(
off£ts
.
¸›_width
 * 1.0 * 
£g
 / 
tŸÆ
);

5368 i‡(
ã°
 < 1 )

5369 
¸›
->
ªgi⁄li°
[
i
].
x2
 = 0;

5372 i‡(
ã°
 > (
öt32
)(
image
->
width
 - 1))

5373 
¸›
->
ªgi⁄li°
[
i
].
x2
 = 
image
->
width
 - 1;

5375 
¸›
->
ªgi⁄li°
[
i
].
x2
 = 
ã°
 - 1;

5377 
zwidth
 = 
¸›
->
ªgi⁄li°
[
i
].
x2
 - cr›->ªgi⁄li°[i].
x1
 + 1;

5380 
¸›
->
comböed_Àngth
 = (
uöt32
)
zÀngth
;

5381 i‡(
¸›
->
exp_mode
 =
COMPOSITE_IMAGES
)

5382 
¸›
->
comböed_width
 +(
uöt32
)
zwidth
;

5384 
¸›
->
comböed_width
 = (
uöt32
)
zwidth
;

5386 
EDGE_BOTTOM
:

5387 
zwidth
 = 
off£ts
.
¸›_width
;

5388 
¸›
->
ªgi⁄li°
[
i
].
x1
 = 
off£ts
.
°¨tx
;

5389 
¸›
->
ªgi⁄li°
[
i
].
x2
 = 
off£ts
.
ídx
;

5391 
ã°
 = 
off£ts
.
ídy
 - (
uöt32
)(off£ts.
¸›_Àngth
 * 1.0 * 
£g
 / 
tŸÆ
);

5392 i‡(
ã°
 < 1 )

5393 
¸›
->
ªgi⁄li°
[
i
].
y1
 = 0;

5395 
¸›
->
ªgi⁄li°
[
i
].
y1
 = 
ã°
 + 1;

5397 
ã°
 = 
off£ts
.
ídy
 - (off£ts.
¸›_Àngth
 * 1.0 * (
£g
 - 1Ë/ 
tŸÆ
);

5398 i‡(
ã°
 < 1 )

5399 
¸›
->
ªgi⁄li°
[
i
].
y2
 = 0;

5402 i‡(
ã°
 > (
öt32
)(
image
->
Àngth
 - 1))

5403 
¸›
->
ªgi⁄li°
[
i
].
y2
 = 
image
->
Àngth
 - 1;

5405 
¸›
->
ªgi⁄li°
[
i
].
y2
 = 
ã°
;

5407 
zÀngth
 = 
¸›
->
ªgi⁄li°
[
i
].
y2
 - cr›->ªgi⁄li°[i].
y1
 + 1;

5410 i‡(
¸›
->
exp_mode
 =
COMPOSITE_IMAGES
)

5411 
¸›
->
comböed_Àngth
 +(
uöt32
)
zÀngth
;

5413 
¸›
->
comböed_Àngth
 = (
uöt32
)
zÀngth
;

5414 
¸›
->
comböed_width
 = (
uöt32
)
zwidth
;

5416 
EDGE_RIGHT
:

5417 
zÀngth
 = 
off£ts
.
¸›_Àngth
;

5418 
¸›
->
ªgi⁄li°
[
i
].
y1
 = 
off£ts
.
°¨ty
;

5419 
¸›
->
ªgi⁄li°
[
i
].
y2
 = 
off£ts
.
ídy
;

5421 
¸›
->
ªgi⁄li°
[
i
].
x1
 = 
off£ts
.
°¨tx
 +

5422 (
uöt32
)(
off£ts
.
¸›_width
 * (
tŸÆ
 - 
£g
) * 1.0 /Åotal);

5423 
ã°
 = 
off£ts
.
°¨tx
 +

5424 (
off£ts
.
¸›_width
 * (
tŸÆ
 - 
£g
 + 1) * 1.0 /Åotal);

5425 i‡(
ã°
 < 1 )

5426 
¸›
->
ªgi⁄li°
[
i
].
x2
 = 0;

5429 i‡(
ã°
 > (
öt32
)(
image
->
width
 - 1))

5430 
¸›
->
ªgi⁄li°
[
i
].
x2
 = 
image
->
width
 - 1;

5432 
¸›
->
ªgi⁄li°
[
i
].
x2
 = 
ã°
 - 1;

5434 
zwidth
 = 
¸›
->
ªgi⁄li°
[
i
].
x2
 - cr›->ªgi⁄li°[i].
x1
 + 1;

5437 
¸›
->
comböed_Àngth
 = (
uöt32
)
zÀngth
;

5438 i‡(
¸›
->
exp_mode
 =
COMPOSITE_IMAGES
)

5439 
¸›
->
comböed_width
 +(
uöt32
)
zwidth
;

5441 
¸›
->
comböed_width
 = (
uöt32
)
zwidth
;

5443 
EDGE_TOP
:

5445 
zwidth
 = 
off£ts
.
¸›_width
;

5446 
¸›
->
ªgi⁄li°
[
i
].
x1
 = 
off£ts
.
°¨tx
;

5447 
¸›
->
ªgi⁄li°
[
i
].
x2
 = 
off£ts
.
ídx
;

5449 
¸›
->
ªgi⁄li°
[
i
].
y1
 = 
off£ts
.
°¨ty
 + (
uöt32
)(off£ts.
¸›_Àngth
 * 1.0 * (
£g
 - 1Ë/ 
tŸÆ
);

5450 
ã°
 = 
off£ts
.
°¨ty
 + (
uöt32
)(off£ts.
¸›_Àngth
 * 1.0 * 
£g
 / 
tŸÆ
);

5451 i‡(
ã°
 < 1 )

5452 
¸›
->
ªgi⁄li°
[
i
].
y2
 = 0;

5455 i‡(
ã°
 > (
öt32
)(
image
->
Àngth
 - 1))

5456 
¸›
->
ªgi⁄li°
[
i
].
y2
 = 
image
->
Àngth
 - 1;

5458 
¸›
->
ªgi⁄li°
[
i
].
y2
 = 
ã°
 - 1;

5460 
zÀngth
 = 
¸›
->
ªgi⁄li°
[
i
].
y2
 - cr›->ªgi⁄li°[i].
y1
 + 1;

5463 i‡(
¸›
->
exp_mode
 =
COMPOSITE_IMAGES
)

5464 
¸›
->
comböed_Àngth
 +(
uöt32
)
zÀngth
;

5466 
¸›
->
comböed_Àngth
 = (
uöt32
)
zÀngth
;

5467 
¸›
->
comböed_width
 = (
uöt32
)
zwidth
;

5471 
buffsize
 = (
uöt32
)

5472 ((((
zwidth
 * 
image
->
bps
 * image->
•p
Ë+ 7 ) / 8Ë* (
zÀngth
 + 1));

5473 
¸›
->
ªgi⁄li°
[
i
].
width
 = (
uöt32
Ë
zwidth
;

5474 
¸›
->
ªgi⁄li°
[
i
].
Àngth
 = (
uöt32
Ë
zÀngth
;

5475 
¸›
->
ªgi⁄li°
[
i
].
buffsize
 = buffsize;

5476 
¸›
->
buf·ŸÆ
 +
buffsize
;

5479 i‡(
dump
->
outfûe
 !
NULL
)

5480 
	`dump_öfo
 (
dump
->
outfûe
, dump->
f‹m©
, "", "Zone %d, width: %4d,Üength: %4d, x1: %4d x2: %4d y1: %4d y2: %4d",

5481 
i
 + 1, (
uöt32
)
zwidth
, (uöt32)
zÀngth
,

5482 
¸›
->
ªgi⁄li°
[
i
].
x1
, cr›->ªgi⁄li°[i].
x2
,

5483 
¸›
->
ªgi⁄li°
[
i
].
y1
, cr›->ªgi⁄li°[i].
y2
);

5487 
	}
}

5491 
	$compuãOuçutPixñOff£ts
 (
¸›_mask
 *
¸›
, 
image_d©a
 *
image
,

5492 
∑gedef
 *
∑ge
, 
∑ge£g
 *
£˘i⁄s
,

5493 
dump_›ts
* 
dump
)

5495 
sˇÀ
;

5496 
pwidth
, 
∂ígth
;

5497 
uöt32
 
iwidth
, 
ûígth
;

5498 
uöt32
 
owidth
, 
ﬁígth
;

5499 
uöt32
 
‹ows
, 
ocﬁs
;

5500 
uöt32
 
hm¨gö
, 
vm¨gö
;

5501 
uöt32
 
x1
, 
x2
, 
y1
, 
y2
, 
löe_byãs
;

5502 
‹õ¡©i⁄
;

5503 
uöt32
 
i
, 
j
, 
k
;

5505 
sˇÀ
 = 1.0;

5506 i‡(
∑ge
->
ªs_unô
 =
RESUNIT_NONE
)

5507 
∑ge
->
ªs_unô
 = 
image
->res_unit;

5509 
image
->
ªs_unô
) {

5510 
RESUNIT_CENTIMETER
:

5511 i‡(
∑ge
->
ªs_unô
 =
RESUNIT_INCH
)

5512 
sˇÀ
 = 1.0/2.54;

5514 
RESUNIT_INCH
:

5515 i‡(
∑ge
->
ªs_unô
 =
RESUNIT_CENTIMETER
)

5516 
sˇÀ
 = 2.54;

5518 
RESUNIT_NONE
:

5524 i‡(
¸›
->
comböed_width
 > 0)

5525 
iwidth
 = 
¸›
->
comböed_width
;

5527 
iwidth
 = 
image
->
width
;

5528 i‡(
¸›
->
comböed_Àngth
 > 0)

5529 
ûígth
 = 
¸›
->
comböed_Àngth
;

5531 
ûígth
 = 
image
->
Àngth
;

5533 i‡(
∑ge
->
hªs
 <= 1.0)

5534 
∑ge
->
hªs
 = 
image
->
xªs
;

5535 i‡(
∑ge
->
vªs
 <= 1.0)

5536 
∑ge
->
vªs
 = 
image
->
yªs
;

5538 i‡((
∑ge
->
hªs
 < 1.0Ë|| (∑ge->
vªs
 < 1.0))

5540 
	`TIFFEº‹
("computeOutputPixelOffsets",

5548 i‡(
∑ge
->
width
 <= 0)

5549 
pwidth
 = 
iwidth
;

5551 
pwidth
 = 
∑ge
->
width
;

5553 i‡(
∑ge
->
Àngth
 <= 0)

5554 
∂ígth
 = 
ûígth
;

5556 
∂ígth
 = 
∑ge
->
Àngth
;

5558 i‡(
dump
->
debug
)

5560 
	`TIFFEº‹
("", "Page size: %s, Vres: %3.2f, Hres: %3.2f, "

5562 
∑ge
->
«me
,Öage->
vªs
,Öage->
hªs
,

5563 
∑ge
->
hm¨gö
,Öage->
vm¨gö
);

5564 
	`TIFFEº‹
("", "Res_unit: %d, Scale: %3.2f, Page width: %3.2f,Üength: %3.2f",

5565 
∑ge
->
ªs_unô
, 
sˇÀ
, 
pwidth
, 
∂ígth
);

5569 i‡(
∑ge
->
mode
 & 
PAGE_MODE_MARGINS
)

5571 i‡(
∑ge
->
ªs_unô
 =
RESUNIT_INCH
 ||Öage->ªs_unô =
RESUNIT_CENTIMETER
)

5573 
hm¨gö
 = (
uöt32
)(
∑ge
->hm¨gö * 
sˇÀ
 *Öage->
hªs
 * ((
image
->
bps
 + 7)/ 8));

5574 
vm¨gö
 = (
uöt32
)(
∑ge
->vm¨gö * 
sˇÀ
 *Öage->
vªs
 * ((
image
->
bps
 + 7)/ 8));

5578 
hm¨gö
 = (
uöt32
)(
∑ge
->hm¨gö * 
sˇÀ
 * ((
image
->
bps
 + 7)/ 8));

5579 
vm¨gö
 = (
uöt32
)(
∑ge
->vm¨gö * 
sˇÀ
 * ((
image
->
bps
 + 7)/ 8));

5582 i‡((
hm¨gö
 * 2.0Ë> (
pwidth
 * 
∑ge
->
hªs
))

5584 
	`TIFFEº‹
("computeOutputPixelOffsets",

5586 
hm¨gö
 = (
uöt32
) 0;

5589 i‡((
vm¨gö
 * 2.0Ë> (
∂ígth
 * 
∑ge
->
vªs
))

5591 
	`TIFFEº‹
("computeOutputPixelOffsets",

5593 
vm¨gö
 = (
uöt32
) 0;

5599 
hm¨gö
 = 0;

5600 
vm¨gö
 = 0;

5603 i‡(
∑ge
->
mode
 & 
PAGE_MODE_ROWSCOLS
 )

5606 i‡(
∑ge
->
mode
 & 
PAGE_MODE_MARGINS
)

5607 
	`TIFFEº‹
("computeOutputPixelOffsets",

5610 
owidth
 = 
	`TIFFhowm™y
(
iwidth
, 
∑ge
->
cﬁs
);

5611 
ﬁígth
 = 
	`TIFFhowm™y
(
ûígth
, 
∑ge
->
rows
);

5615 i‡(
∑ge
->
mode
 & 
PAGE_MODE_PAPERSIZE
 )

5617 
owidth
 = (
uöt32
)((
pwidth
 * 
∑ge
->
hªs
Ë- (
hm¨gö
 * 2));

5618 
ﬁígth
 = (
uöt32
)((
∂ígth
 * 
∑ge
->
vªs
Ë- (
vm¨gö
 * 2));

5622 
owidth
 = (
uöt32
)(
iwidth
 - (
hm¨gö
 * 2 * 
∑ge
->
hªs
));

5623 
ﬁígth
 = (
uöt32
)(
ûígth
 - (
vm¨gö
 * 2 * 
∑ge
->
vªs
));

5627 i‡(
owidth
 > 
iwidth
)

5628 
owidth
 = 
iwidth
;

5629 i‡(
ﬁígth
 > 
ûígth
)

5630 
ﬁígth
 = 
ûígth
;

5633 
∑ge
->
‹õ¡
)

5635 
ORIENTATION_NONE
:

5636 
ORIENTATION_PORTRAIT
:

5637 
ocﬁs
 = 
	`TIFFhowm™y
(
iwidth
, 
owidth
);

5638 
‹ows
 = 
	`TIFFhowm™y
(
ûígth
, 
ﬁígth
);

5639 
‹õ¡©i⁄
 = 
ORIENTATION_PORTRAIT
;

5642 
ORIENTATION_LANDSCAPE
:

5643 
ocﬁs
 = 
	`TIFFhowm™y
(
iwidth
, 
ﬁígth
);

5644 
‹ows
 = 
	`TIFFhowm™y
(
ûígth
, 
owidth
);

5645 
x1
 = 
ﬁígth
;

5646 
ﬁígth
 = 
owidth
;

5647 
owidth
 = 
x1
;

5648 
‹õ¡©i⁄
 = 
ORIENTATION_LANDSCAPE
;

5651 
ORIENTATION_AUTO
:

5653 
x1
 = 
	`TIFFhowm™y
(
iwidth
, 
owidth
);

5654 
x2
 = 
	`TIFFhowm™y
(
ûígth
, 
ﬁígth
);

5655 
y1
 = 
	`TIFFhowm™y
(
iwidth
, 
ﬁígth
);

5656 
y2
 = 
	`TIFFhowm™y
(
ûígth
, 
owidth
);

5658 i‡–(
x1
 * 
x2
Ë< (
y1
 * 
y2
))

5660 
ocﬁs
 = 
x1
;

5661 
‹ows
 = 
x2
;

5662 
‹õ¡©i⁄
 = 
ORIENTATION_PORTRAIT
;

5666 
ocﬁs
 = 
y1
;

5667 
‹ows
 = 
y2
;

5668 
x1
 = 
ﬁígth
;

5669 
ﬁígth
 = 
owidth
;

5670 
owidth
 = 
x1
;

5671 
‹õ¡©i⁄
 = 
ORIENTATION_LANDSCAPE
;

5675 i‡(
ocﬁs
 < 1)

5676 
ocﬁs
 = 1;

5677 i‡(
‹ows
 < 1)

5678 
‹ows
 = 1;

5681 i‡(
∑ge
->
rows
 < 1)

5682 
∑ge
->
rows
 = 
‹ows
;

5683 i‡(
∑ge
->
cﬁs
 < 1)

5684 
∑ge
->
cﬁs
 = 
ocﬁs
;

5686 
löe_byãs
 = 
	`TIFFhowm™y8
(
owidth
 * 
image
->
bps
Ë* image->
•p
;

5688 i‡((
∑ge
->
rows
 *Öage->
cﬁs
Ë> 
MAX_SECTIONS
)

5690 
	`TIFFEº‹
("computeOutputPixelOffsets",

5696 
k
 = 0, 
i
 = 0 && k <
MAX_SECTIONS
; i < 
‹ows
; i++)

5698 
y1
 = (
uöt32
)(
ﬁígth
 * 
i
);

5699 
y2
 = (
uöt32
)(
ﬁígth
 * (
i
 + 1) - 1);

5700 i‡(
y2
 >
ûígth
)

5701 
y2
 = 
ûígth
 - 1;

5702 
j
 = 0; j < 
ocﬁs
; j++, 
k
++)

5704 
x1
 = (
uöt32
)(
owidth
 * 
j
);

5705 
x2
 = (
uöt32
)(
owidth
 * (
j
 + 1) - 1);

5706 i‡(
x2
 >
iwidth
)

5707 
x2
 = 
iwidth
 - 1;

5708 
£˘i⁄s
[
k
].
x1
 = x1;

5709 
£˘i⁄s
[
k
].
x2
 = x2;

5710 
£˘i⁄s
[
k
].
y1
 = y1;

5711 
£˘i⁄s
[
k
].
y2
 = y2;

5712 
£˘i⁄s
[
k
].
buffsize
 = 
löe_byãs
 * 
ﬁígth
;

5713 
£˘i⁄s
[
k
].
posôi⁄
 = k + 1;

5714 
£˘i⁄s
[
k
].
tŸÆ
 = 
‹ows
 * 
ocﬁs
;

5718 
	}
}

5721 
	$lﬂdImage
(
TIFF
* 
ö
, 
image_d©a
 *
image
, 
dump_›ts
 *
dump
, **
ªad_±r
)

5723 
uöt32
 
i
;

5724 
xªs
 = 0.0, 
yªs
 = 0.0;

5725 
uöt16
 
n°rùs
 = 0, 
¡ûes
 = 0, 
∂™¨
 = 0;

5726 
uöt16
 
bps
 = 0, 
•p
 = 0, 
ªs_unô
 = 0;

5727 
uöt16
 
‹õ¡©i⁄
 = 0;

5728 
uöt16
 
öput_com¥essi⁄
 = 0, 
öput_phŸomëric
 = 0;

5729 
uöt16
 
subßm∂ög_h‹iz
, 
subßm∂ög_vît
;

5730 
uöt32
 
width
 = 0, 
Àngth
 = 0;

5731 
uöt32
 
°size
 = 0, 
ésize
 = 0, 
buffsize
 = 0, 
sˇ∆öesize
 = 0;

5732 
uöt32
 
tw
 = 0, 
é
 = 0;

5733 
uöt32
 
tûe_rowsize
 = 0;

5734 *
ªad_buff
 = 
NULL
;

5735 *
√w_buff
 = 
NULL
;

5736 
ªadunô
 = 0;

5737 
uöt32
 
¥ev_ªadsize
 = 0;

5739 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_BITSPERSAMPLE
, &
bps
);

5740 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_SAMPLESPERPIXEL
, &
•p
);

5741 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_PLANARCONFIG
, &
∂™¨
);

5742 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_ORIENTATION
, &
‹õ¡©i⁄
);

5743 i‡(! 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_PHOTOMETRIC
, &
öput_phŸomëric
))

5744 
	`TIFFEº‹
("loadImage","ImageÜacks Photometric interpreationÅag");

5745 i‡(! 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGEWIDTH
, &
width
))

5746 
	`TIFFEº‹
("loadimage","ImageÜacks image widthÅag");

5747 if(! 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
Àngth
))

5748 
	`TIFFEº‹
("loadimage","ImageÜacks imageÜengthÅag");

5749 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_XRESOLUTION
, &
xªs
);

5750 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_YRESOLUTION
, &
yªs
);

5751 i‡(!
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_RESOLUTIONUNIT
, &
ªs_unô
))

5752 
ªs_unô
 = 
RESUNIT_INCH
;

5753 i‡(!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_COMPRESSION
, &
öput_com¥essi⁄
))

5754 
öput_com¥essi⁄
 = 
COMPRESSION_NONE
;

5756 #ifde‡
DEBUG2


5757 
com¥essi⁄id
[16];

5759 
öput_com¥essi⁄
)

5761 
COMPRESSION_NONE
:

5762 
	`°r˝y
 (
com¥essi⁄id
, "None/dump");

5764 
COMPRESSION_CCITTRLE
:

5765 
	`°r˝y
 (
com¥essi⁄id
, "Huffman RLE");

5767 
COMPRESSION_CCITTFAX3
:

5768 
	`°r˝y
 (
com¥essi⁄id
, "Group3 Fax");

5770 
COMPRESSION_CCITTFAX4
:

5771 
	`°r˝y
 (
com¥essi⁄id
, "Group4 Fax");

5773 
COMPRESSION_LZW
:

5774 
	`°r˝y
 (
com¥essi⁄id
, "LZW");

5776 
COMPRESSION_OJPEG
:

5777 
	`°r˝y
 (
com¥essi⁄id
, "Old Jpeg");

5779 
COMPRESSION_JPEG
:

5780 
	`°r˝y
 (
com¥essi⁄id
, "New Jpeg");

5782 
COMPRESSION_NEXT
:

5783 
	`°r˝y
 (
com¥essi⁄id
, "Next RLE");

5785 
COMPRESSION_CCITTRLEW
:

5786 
	`°r˝y
 (
com¥essi⁄id
, "CITTRLEW");

5788 
COMPRESSION_PACKBITS
:

5789 
	`°r˝y
 (
com¥essi⁄id
, "Mac Packbits");

5791 
COMPRESSION_THUNDERSCAN
:

5792 
	`°r˝y
 (
com¥essi⁄id
, "Thunderscan");

5794 
COMPRESSION_IT8CTPAD
:

5795 
	`°r˝y
 (
com¥essi⁄id
, "IT8Öadded");

5797 
COMPRESSION_IT8LW
:

5798 
	`°r˝y
 (
com¥essi⁄id
, "IT8 RLE");

5800 
COMPRESSION_IT8MP
:

5801 
	`°r˝y
 (
com¥essi⁄id
, "IT8 mono");

5803 
COMPRESSION_IT8BL
:

5804 
	`°r˝y
 (
com¥essi⁄id
, "IT8Üineart");

5806 
COMPRESSION_PIXARFILM
:

5807 
	`°r˝y
 (
com¥essi⁄id
, "Pixar 10 bit");

5809 
COMPRESSION_PIXARLOG
:

5810 
	`°r˝y
 (
com¥essi⁄id
, "Pixar 11bit");

5812 
COMPRESSION_DEFLATE
:

5813 
	`°r˝y
 (
com¥essi⁄id
, "Deflate");

5815 
COMPRESSION_ADOBE_DEFLATE
:

5816 
	`°r˝y
 (
com¥essi⁄id
, "Adobe deflate");

5819 
	`°r˝y
 (
com¥essi⁄id
, "None/unknown");

5822 
	`TIFFEº‹
("lﬂdImage", "I≈uàcom¥essi⁄ %s", 
com¥essi⁄id
);

5825 
sˇ∆öesize
 = 
	`TIFFSˇ∆öeSize
(
ö
);

5826 
image
->
bps
 = bps;

5827 
image
->
•p
 = spp;

5828 
image
->
∂™¨
 =Ölanar;

5829 
image
->
width
 = width;

5830 
image
->
Àngth
 =Üength;

5831 
image
->
xªs
 = xres;

5832 
image
->
yªs
 = yres;

5833 
image
->
ªs_unô
 =Ñes_unit;

5834 
image
->
com¥essi⁄
 = 
öput_com¥essi⁄
;

5835 
image
->
phŸomëric
 = 
öput_phŸomëric
;

5836 #ifde‡
DEBUG2


5837 
phŸomëricid
[12];

5839 
öput_phŸomëric
)

5841 
PHOTOMETRIC_MINISWHITE
:

5842 
	`°r˝y
 (
phŸomëricid
, "MinIsWhite");

5844 
PHOTOMETRIC_MINISBLACK
:

5845 
	`°r˝y
 (
phŸomëricid
, "MinIsBlack");

5847 
PHOTOMETRIC_RGB
:

5848 
	`°r˝y
 (
phŸomëricid
, "RGB");

5850 
PHOTOMETRIC_PALETTE
:

5851 
	`°r˝y
 (
phŸomëricid
, "Palette");

5853 
PHOTOMETRIC_MASK
:

5854 
	`°r˝y
 (
phŸomëricid
, "Mask");

5856 
PHOTOMETRIC_SEPARATED
:

5857 
	`°r˝y
 (
phŸomëricid
, "Separated");

5859 
PHOTOMETRIC_YCBCR
:

5860 
	`°r˝y
 (
phŸomëricid
, "YCBCR");

5862 
PHOTOMETRIC_CIELAB
:

5863 
	`°r˝y
 (
phŸomëricid
, "CIELab");

5865 
PHOTOMETRIC_ICCLAB
:

5866 
	`°r˝y
 (
phŸomëricid
, "ICCLab");

5868 
PHOTOMETRIC_ITULAB
:

5869 
	`°r˝y
 (
phŸomëricid
, "ITULab");

5871 
PHOTOMETRIC_LOGL
:

5872 
	`°r˝y
 (
phŸomëricid
, "LogL");

5874 
PHOTOMETRIC_LOGLUV
:

5875 
	`°r˝y
 (
phŸomëricid
, "LOGLuv");

5878 
	`°r˝y
 (
phŸomëricid
, "Unknown");

5881 
	`TIFFEº‹
("lﬂdImage", "I≈uàphŸomëri¯öãΩªèti⁄ %s", 
phŸomëricid
);

5884 
image
->
‹õ¡©i⁄
 = orientation;

5885 
‹õ¡©i⁄
)

5888 
ORIENTATION_TOPLEFT
:

5889 
image
->
adju°míts
 = 0;

5891 
ORIENTATION_TOPRIGHT
:

5892 
image
->
adju°míts
 = 
MIRROR_HORIZ
;

5894 
ORIENTATION_BOTRIGHT
:

5895 
image
->
adju°míts
 = 
ROTATECW_180
;

5897 
ORIENTATION_BOTLEFT
:

5898 
image
->
adju°míts
 = 
MIRROR_VERT
;

5900 
ORIENTATION_LEFTTOP
:

5901 
image
->
adju°míts
 = 
MIRROR_VERT
 | 
ROTATECW_90
;

5903 
ORIENTATION_RIGHTTOP
:

5904 
image
->
adju°míts
 = 
ROTATECW_90
;

5906 
ORIENTATION_RIGHTBOT
:

5907 
image
->
adju°míts
 = 
MIRROR_VERT
 | 
ROTATECW_270
;

5909 
ORIENTATION_LEFTBOT
:

5910 
image
->
adju°míts
 = 
ROTATECW_270
;

5913 
image
->
adju°míts
 = 0;

5914 
image
->
‹õ¡©i⁄
 = 
ORIENTATION_TOPLEFT
;

5917 i‡((
bps
 =0Ë|| (
•p
 == 0))

5919 
	`TIFFEº‹
("loadImage", "Invalid samplesÖerÖixel (%d) or bitsÖer sample (%d)",

5920 
•p
, 
bps
);

5924 i‡(
	`TIFFIsTûed
(
ö
))

5926 
ªadunô
 = 
TILE
;

5927 
ésize
 = 
	`TIFFTûeSize
(
ö
);

5928 
¡ûes
 = 
	`TIFFNumbîOfTûes
(
ö
);

5929 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILEWIDTH
, &
tw
);

5930 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILELENGTH
, &
é
);

5932 
tûe_rowsize
 = 
	`TIFFTûeRowSize
(
ö
);

5933 
buffsize
 = 
ésize
 * 
¡ûes
;

5936 i‡(
buffsize
 < (
uöt32
)(
¡ûes
 * 
é
 * 
tûe_rowsize
))

5938 
buffsize
 = 
¡ûes
 * 
é
 * 
tûe_rowsize
;

5939 #ifde‡
DEBUG2


5940 
	`TIFFEº‹
("loadImage",

5942 
ésize
, ()
buffsize
);

5946 i‡(
dump
->
öfûe
 !
NULL
)

5947 
	`dump_öfo
 (
dump
->
öfûe
, dump->
f‹m©
, "",

5949 
ésize
, 
¡ûes
, 
tûe_rowsize
);

5953 
ªadunô
 = 
STRIP
;

5954 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

5955 
°size
 = 
	`TIFFSåùSize
(
ö
);

5956 
n°rùs
 = 
	`TIFFNumbîOfSåùs
(
ö
);

5957 
buffsize
 = 
°size
 * 
n°rùs
;

5959 i‡(
buffsize
 < (
uöt32
Ë(((
Àngth
 * 
width
 * 
•p
 * 
bps
) + 7) / 8))

5961 
buffsize
 = ((
Àngth
 * 
width
 * 
•p
 * 
bps
) + 7) / 8;

5962 #ifde‡
DEBUG2


5963 
	`TIFFEº‹
("loadImage",

5965 
°size
, ()
buffsize
);

5969 i‡(
dump
->
öfûe
 !
NULL
)

5970 
	`dump_öfo
 (
dump
->
öfûe
, dump->
f‹m©
, "",

5972 
°size
, 
n°rùs
, 
row•î°rù
, 
sˇ∆öesize
);

5975 i‡(
öput_com¥essi⁄
 =
COMPRESSION_JPEG
)

5977 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RGB
;

5978 
	`TIFFSëFõld
(
ö
, 
TIFFTAG_JPEGCOLORMODE
, 
JPEGCOLORMODE_RGB
);

5983 i‡(
öput_phŸomëric
 =
PHOTOMETRIC_YCBCR
)

5985 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_YCBCRSUBSAMPLING
,

5986 &
subßm∂ög_h‹iz
, &
subßm∂ög_vît
);

5987 i‡(
subßm∂ög_h‹iz
 !1 || 
subßm∂ög_vît
 != 1)

5989 
	`TIFFEº‹
("loadImage",

5991 
subßm∂ög_h‹iz
, 
subßm∂ög_vît
);

5997 
ªad_buff
 = *
ªad_±r
;

5998 i‡(!
ªad_buff
)

5999 
ªad_buff
 = (*)
	`_TIFFmÆloc
(
buffsize
);

6002 i‡(
¥ev_ªadsize
 < 
buffsize
)

6004 
√w_buff
 = 
	`_TIFFªÆloc
(
ªad_buff
, 
buffsize
);

6005 i‡(!
√w_buff
)

6007 
	`‰ì
 (
ªad_buff
);

6008 
ªad_buff
 = (*)
	`_TIFFmÆloc
(
buffsize
);

6011 
ªad_buff
 = 
√w_buff
;

6015 i‡(!
ªad_buff
)

6017 
	`TIFFEº‹
("loadImage", "UnableÅoállocate/reallocateÑead buffer");

6021 
¥ev_ªadsize
 = 
buffsize
;

6022 *
ªad_±r
 = 
ªad_buff
;

6028 
ªadunô
) {

6029 
STRIP
:

6030 i‡(
∂™¨
 =
PLANARCONFIG_CONTIG
)

6032 i‡(!(
	`ªadC⁄tigSåùsI¡oBuf„r
(
ö
, 
ªad_buff
)))

6034 
	`TIFFEº‹
("loadImage", "UnableÅoÑead contiguous strips into buffer");

6040 i‡(!(
	`ªadSï¨©eSåùsI¡oBuf„r
(
ö
, 
ªad_buff
, 
Àngth
, 
width
, 
•p
, 
dump
)))

6042 
	`TIFFEº‹
("loadImage", "UnableÅoÑead separate strips into buffer");

6048 
TILE
:

6049 i‡(
∂™¨
 =
PLANARCONFIG_CONTIG
)

6051 i‡(!(
	`ªadC⁄tigTûesI¡oBuf„r
(
ö
, 
ªad_buff
, 
Àngth
, 
width
, 
tw
, 
é
, 
•p
, 
bps
)))

6053 
	`TIFFEº‹
("loadImage", "UnableÅoÑead contiguousÅiles into buffer");

6059 i‡(!(
	`ªadSï¨©eTûesI¡oBuf„r
(
ö
, 
ªad_buff
, 
Àngth
, 
width
, 
tw
, 
é
, 
•p
, 
bps
)))

6061 
	`TIFFEº‹
("loadImage", "UnableÅoÑead separateÅiles into buffer");

6066 : 
	`TIFFEº‹
("loadImage", "Unsupported image file format");

6070 i‡((
dump
->
öfûe
 !
NULL
Ë&& (dump->
Àvñ
 == 2))

6072 
	`dump_öfo
 (
dump
->
öfûe
, dump->
f‹m©
, "loadImage",

6074 
width
, 
Àngth
, 
buffsize
);

6075 
	`dump_öfo
 (
dump
->
öfûe
, dump->
f‹m©
, "",

6076 "Bô†≥∏ßm∂ê%d, Sam∂e†≥∏pixñ %d", 
bps
, 
•p
);

6078 
i
 = 0; i < 
Àngth
; i++)

6079 
	`dump_buf„r
(
dump
->
öfûe
, dump->
f‹m©
, 1, 
sˇ∆öesize
,

6080 
i
, 
ªad_buff
 + (ò* 
sˇ∆öesize
));

6083 
	}
}

6085 
	$c‹ª˘_‹õ¡©i⁄
(
image_d©a
 *
image
, **
w‹k_buff_±r
)

6087 
uöt16
 
múr‹
, 
rŸ©i⁄
;

6088 *
w‹k_buff
;

6090 
w‹k_buff
 = *
w‹k_buff_±r
;

6091 i‡((
image
 =
NULL
Ë|| (
w‹k_buff
 == NULL))

6093 
	`TIFFEº‹
 ("correct_orientatin", "Invalid image or bufferÖointer");

6097 i‡((
image
->
adju°míts
 & 
MIRROR_HORIZ
Ë|| (image->adju°mít†& 
MIRROR_VERT
))

6099 
múr‹
 = (
uöt16
)(
image
->
adju°míts
 & 
MIRROR_BOTH
);

6100 i‡(
	`múr‹Image
(
image
->
•p
, image->
bps
, 
múr‹
,

6101 
image
->
width
, image->
Àngth
, 
w‹k_buff
))

6103 
	`TIFFEº‹
 ("correct_orientation", "UnableÅo mirror image");

6108 i‡(
image
->
adju°míts
 & 
ROTATE_ANY
)

6110 i‡(
image
->
adju°míts
 & 
ROTATECW_90
)

6111 
rŸ©i⁄
 = (
uöt16
) 90;

6113 i‡(
image
->
adju°míts
 & 
ROTATECW_180
)

6114 
rŸ©i⁄
 = (
uöt16
) 180;

6116 i‡(
image
->
adju°míts
 & 
ROTATECW_270
)

6117 
rŸ©i⁄
 = (
uöt16
) 270;

6120 
	`TIFFEº‹
 ("correct_orientation", "InvalidÑotation value: %d",

6121 
image
->
adju°míts
 & 
ROTATE_ANY
);

6125 i‡(
	`rŸ©eImage
(
rŸ©i⁄
, 
image
, &image->
width
, &image->
Àngth
, 
w‹k_buff_±r
))

6127 
	`TIFFEº‹
 ("correct_orientation", "UnableÅoÑotate image");

6130 
image
->
‹õ¡©i⁄
 = 
ORIENTATION_TOPLEFT
;

6134 
	}
}

6139 
	$exåa˘ComposôeRegi⁄s
(
image_d©a
 *
image
, 
¸›_mask
 *
¸›
,

6140 *
ªad_buff
, *
¸›_buff
)

6142 
shi·_width
, 
byãs_≥r_ßm∂e
, 
byãs_≥r_pixñ
;

6143 
uöt32
 
i
, 
åaûög_bôs
, 
¥ev_åaûög_bôs
;

6144 
uöt32
 
row
, 
fú°_row
, 
œ°_row
, 
fú°_cﬁ
, 
œ°_cﬁ
;

6145 
uöt32
 
§c_rowsize
, 
d°_rowsize
, 
§c_off£t
, 
d°_off£t
;

6146 
uöt32
 
¸›_width
, 
¸›_Àngth
, 
img_width
, 
img_Àngth
;

6147 
uöt32
 
¥ev_Àngth
, 
¥ev_width
, 
composôe_width
;

6148 
uöt16
 
bps
, 
•p
;

6149 
uöt8
 *
§c
, *
d°
;

6150 
tßm∂e_t
 
cou¡
, 
ßm∂e
 = 0;

6152 
img_width
 = 
image
->
width
;

6153 
img_Àngth
 = 
image
->
Àngth
;

6154 
bps
 = 
image
->bps;

6155 
•p
 = 
image
->spp;

6156 
cou¡
 = 
•p
;

6158 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

6159 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

6160 i‡((
bps
 % 8) == 0)

6161 
shi·_width
 = 0;

6164 i‡(
byãs_≥r_pixñ
 < (
byãs_≥r_ßm∂e
 + 1))

6165 
shi·_width
 = 
byãs_≥r_pixñ
;

6167 
shi·_width
 = 
byãs_≥r_ßm∂e
 + 1;

6169 
§c
 = 
ªad_buff
;

6170 
d°
 = 
¸›_buff
;

6173 
¥ev_width
 = 
¥ev_Àngth
 = 0;

6174 
¥ev_åaûög_bôs
 = 
åaûög_bôs
 = 0;

6175 
composôe_width
 = 
¸›
->
comböed_width
;

6176 
¸›
->
comböed_width
 = 0;

6177 
¸›
->
comböed_Àngth
 = 0;

6179 
i
 = 0; i < 
¸›
->
£À˘i⁄s
; i++)

6182 
fú°_row
 = 
¸›
->
ªgi⁄li°
[
i
].
y1
;

6183 
œ°_row
 = 
¸›
->
ªgi⁄li°
[
i
].
y2
;

6184 
fú°_cﬁ
 = 
¸›
->
ªgi⁄li°
[
i
].
x1
;

6185 
œ°_cﬁ
 = 
¸›
->
ªgi⁄li°
[
i
].
x2
;

6187 
¸›_width
 = 
œ°_cﬁ
 - 
fú°_cﬁ
 + 1;

6188 
¸›_Àngth
 = 
œ°_row
 - 
fú°_row
 + 1;

6191 
¸›
->
ªgi⁄li°
[
i
].
width
 = 
¸›_width
;

6192 
¸›
->
ªgi⁄li°
[
i
].
Àngth
 = 
¸›_Àngth
;

6193 
¸›
->
ªgi⁄li°
[
i
].
bufÂå
 = 
¸›_buff
;

6195 
§c_rowsize
 = ((
img_width
 * 
bps
 * 
•p
) + 7) / 8;

6196 
d°_rowsize
 = (((
¸›_width
 * 
bps
 * 
cou¡
) + 7) / 8);

6198 
¸›
->
edge_ªf
)

6201 
EDGE_TOP
:

6202 
EDGE_BOTTOM
:

6203 i‡((
i
 > 0Ë&& (
¸›_width
 !
¸›
->
ªgi⁄li°
[ò- 1].
width
))

6205 
	`TIFFEº‹
 ("extractCompositeRegions",

6210 
¸›
->
comböed_width
 = 
¸›_width
;

6211 
¸›
->
comböed_Àngth
 +
¸›_Àngth
;

6213 
row
 = 
fú°_row
;Ñow <
œ°_row
;Ñow++)

6215 
§c_off£t
 = 
row
 * 
§c_rowsize
;

6216 
d°_off£t
 = (
row
 - 
fú°_row
Ë* 
d°_rowsize
;

6217 
§c
 = 
ªad_buff
 + 
§c_off£t
;

6218 
d°
 = 
¸›_buff
 + 
d°_off£t
 + (
¥ev_Àngth
 * 
d°_rowsize
);

6219 
shi·_width
)

6221 0: i‡(
	`exåa˘C⁄tigSam∂esByãs
 (
§c
, 
d°
, 
img_width
, 
ßm∂e
,

6222 
•p
, 
bps
, 
cou¡
, 
fú°_cﬁ
,

6223 
œ°_cﬁ
 + 1))

6225 
	`TIFFEº‹
("extractCompositeRegions",

6226 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6230 1: i‡(
bps
 == 1)

6232 i‡(
	`exåa˘C⁄tigSam∂esShi·ed8bôs
 (
§c
, 
d°
, 
img_width
,

6233 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6234 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6235 
¥ev_åaûög_bôs
))

6237 
	`TIFFEº‹
("extractCompositeRegions",

6238 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6244 i‡(
	`exåa˘C⁄tigSam∂esShi·ed16bôs
 (
§c
, 
d°
, 
img_width
,

6245 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6246 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6247 
¥ev_åaûög_bôs
))

6249 
	`TIFFEº‹
("extractCompositeRegions",

6250 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6254 2: i‡(
	`exåa˘C⁄tigSam∂esShi·ed24bôs
 (
§c
, 
d°
, 
img_width
,

6255 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6256 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6257 
¥ev_åaûög_bôs
))

6259 
	`TIFFEº‹
("extractCompositeRegions",

6260 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6266 5: i‡(
	`exåa˘C⁄tigSam∂esShi·ed32bôs
 (
§c
, 
d°
, 
img_width
,

6267 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6268 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6269 
¥ev_åaûög_bôs
))

6271 
	`TIFFEº‹
("extractCompositeRegions",

6272 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6276 : 
	`TIFFEº‹
("exåa˘ComposôeRegi⁄s", "Unsuµ‹ãd bô dïth %d", 
bps
);

6280 
¥ev_Àngth
 +
¸›_Àngth
;

6282 
EDGE_LEFT
:

6283 
EDGE_RIGHT
:

6284 i‡((
i
 > 0Ë&& (
¸›_Àngth
 !
¸›
->
ªgi⁄li°
[ò- 1].
Àngth
))

6286 
	`TIFFEº‹
 ("extractCompositeRegions",

6290 
¸›
->
comböed_width
 +
¸›_width
;

6291 
¸›
->
comböed_Àngth
 = 
¸›_Àngth
;

6292 
d°_rowsize
 = (((
composôe_width
 * 
bps
 * 
cou¡
) + 7) / 8);

6293 
åaûög_bôs
 = (
¸›_width
 * 
bps
 * 
cou¡
) % 8;

6294 
row
 = 
fú°_row
;Ñow <
œ°_row
;Ñow++)

6296 
§c_off£t
 = 
row
 * 
§c_rowsize
;

6297 
d°_off£t
 = (
row
 - 
fú°_row
Ë* 
d°_rowsize
;

6298 
§c
 = 
ªad_buff
 + 
§c_off£t
;

6299 
d°
 = 
¸›_buff
 + 
d°_off£t
 + 
¥ev_width
;

6301 
shi·_width
)

6303 0: i‡(
	`exåa˘C⁄tigSam∂esByãs
 (
§c
, 
d°
, 
img_width
,

6304 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6305 
fú°_cﬁ
, 
œ°_cﬁ
 + 1))

6307 
	`TIFFEº‹
("extractCompositeRegions",

6308 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6312 1: i‡(
bps
 == 1)

6314 i‡(
	`exåa˘C⁄tigSam∂esShi·ed8bôs
 (
§c
, 
d°
, 
img_width
,

6315 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6316 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6317 
¥ev_åaûög_bôs
))

6319 
	`TIFFEº‹
("extractCompositeRegions",

6320 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6326 i‡(
	`exåa˘C⁄tigSam∂esShi·ed16bôs
 (
§c
, 
d°
, 
img_width
,

6327 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6328 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6329 
¥ev_åaûög_bôs
))

6331 
	`TIFFEº‹
("extractCompositeRegions",

6332 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6336 2: i‡(
	`exåa˘C⁄tigSam∂esShi·ed24bôs
 (
§c
, 
d°
, 
img_width
,

6337 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6338 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6339 
¥ev_åaûög_bôs
))

6341 
	`TIFFEº‹
("extractCompositeRegions",

6342 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6348 5: i‡(
	`exåa˘C⁄tigSam∂esShi·ed32bôs
 (
§c
, 
d°
, 
img_width
,

6349 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6350 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6351 
¥ev_åaûög_bôs
))

6353 
	`TIFFEº‹
("extractCompositeRegions",

6354 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6358 : 
	`TIFFEº‹
("exåa˘ComposôeRegi⁄s", "Unsuµ‹ãd bô dïth %d", 
bps
);

6362 
¥ev_width
 +(
¸›_width
 * 
bps
 * 
cou¡
) / 8;

6363 
¥ev_åaûög_bôs
 +
åaûög_bôs
;

6364 i‡(
¥ev_åaûög_bôs
 > 7)

6365 
¥ev_åaûög_bôs
-= 8;

6369 i‡(
¸›
->
comböed_width
 !
composôe_width
)

6370 
	`TIFFEº‹
("combineSeparateRegions","Combined width doesÇot match composite width");

6373 
	}
}

6387 
	$exåa˘Sï¨©eRegi⁄
(
image_d©a
 *
image
, 
¸›_mask
 *
¸›
,

6388 *
ªad_buff
, *
¸›_buff
,

6389 
ªgi⁄
)

6391 
shi·_width
, 
¥ev_åaûög_bôs
 = 0;

6392 
uöt32
 
byãs_≥r_ßm∂e
, 
byãs_≥r_pixñ
;

6393 
uöt32
 
§c_rowsize
, 
d°_rowsize
;

6394 
uöt32
 
row
, 
fú°_row
, 
œ°_row
, 
fú°_cﬁ
, 
œ°_cﬁ
;

6395 
uöt32
 
§c_off£t
, 
d°_off£t
;

6396 
uöt32
 
¸›_width
, 
¸›_Àngth
, 
img_width
, 
img_Àngth
;

6397 
uöt16
 
bps
, 
•p
;

6398 
uöt8
 *
§c
, *
d°
;

6399 
tßm∂e_t
 
cou¡
, 
ßm∂e
 = 0;

6401 
img_width
 = 
image
->
width
;

6402 
img_Àngth
 = 
image
->
Àngth
;

6403 
bps
 = 
image
->bps;

6404 
•p
 = 
image
->spp;

6405 
cou¡
 = 
•p
;

6407 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

6408 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

6409 i‡((
bps
 % 8) == 0)

6410 
shi·_width
 = 0;

6413 i‡(
byãs_≥r_pixñ
 < (
byãs_≥r_ßm∂e
 + 1))

6414 
shi·_width
 = 
byãs_≥r_pixñ
;

6416 
shi·_width
 = 
byãs_≥r_ßm∂e
 + 1;

6420 
fú°_row
 = 
¸›
->
ªgi⁄li°
[
ªgi⁄
].
y1
;

6421 
œ°_row
 = 
¸›
->
ªgi⁄li°
[
ªgi⁄
].
y2
;

6422 
fú°_cﬁ
 = 
¸›
->
ªgi⁄li°
[
ªgi⁄
].
x1
;

6423 
œ°_cﬁ
 = 
¸›
->
ªgi⁄li°
[
ªgi⁄
].
x2
;

6425 
¸›_width
 = 
œ°_cﬁ
 - 
fú°_cﬁ
 + 1;

6426 
¸›_Àngth
 = 
œ°_row
 - 
fú°_row
 + 1;

6428 
¸›
->
ªgi⁄li°
[
ªgi⁄
].
width
 = 
¸›_width
;

6429 
¸›
->
ªgi⁄li°
[
ªgi⁄
].
Àngth
 = 
¸›_Àngth
;

6430 
¸›
->
ªgi⁄li°
[
ªgi⁄
].
bufÂå
 = 
¸›_buff
;

6432 
§c
 = 
ªad_buff
;

6433 
d°
 = 
¸›_buff
;

6434 
§c_rowsize
 = ((
img_width
 * 
bps
 * 
•p
) + 7) / 8;

6435 
d°_rowsize
 = (((
¸›_width
 * 
bps
 * 
•p
) + 7) / 8);

6437 
row
 = 
fú°_row
;Ñow <
œ°_row
;Ñow++)

6439 
§c_off£t
 = 
row
 * 
§c_rowsize
;

6440 
d°_off£t
 = (
row
 - 
fú°_row
Ë* 
d°_rowsize
;

6441 
§c
 = 
ªad_buff
 + 
§c_off£t
;

6442 
d°
 = 
¸›_buff
 + 
d°_off£t
;

6444 
shi·_width
)

6446 0: i‡(
	`exåa˘C⁄tigSam∂esByãs
 (
§c
, 
d°
, 
img_width
, 
ßm∂e
,

6447 
•p
, 
bps
, 
cou¡
, 
fú°_cﬁ
,

6448 
œ°_cﬁ
 + 1))

6450 
	`TIFFEº‹
("extractSeparateRegion",

6451 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6455 1: i‡(
bps
 == 1)

6457 i‡(
	`exåa˘C⁄tigSam∂esShi·ed8bôs
 (
§c
, 
d°
, 
img_width
,

6458 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6459 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6460 
¥ev_åaûög_bôs
))

6462 
	`TIFFEº‹
("extractSeparateRegion",

6463 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6469 i‡(
	`exåa˘C⁄tigSam∂esShi·ed16bôs
 (
§c
, 
d°
, 
img_width
,

6470 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6471 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6472 
¥ev_åaûög_bôs
))

6474 
	`TIFFEº‹
("extractSeparateRegion",

6475 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6479 2: i‡(
	`exåa˘C⁄tigSam∂esShi·ed24bôs
 (
§c
, 
d°
, 
img_width
,

6480 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6481 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6482 
¥ev_åaûög_bôs
))

6484 
	`TIFFEº‹
("extractSeparateRegion",

6485 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6491 5: i‡(
	`exåa˘C⁄tigSam∂esShi·ed32bôs
 (
§c
, 
d°
, 
img_width
,

6492 
ßm∂e
, 
•p
, 
bps
, 
cou¡
,

6493 
fú°_cﬁ
, 
œ°_cﬁ
 + 1,

6494 
¥ev_åaûög_bôs
))

6496 
	`TIFFEº‹
("extractSeparateRegion",

6497 "U«bÀÅÿexåa˘Ñow %d", 
row
);

6501 : 
	`TIFFEº‹
("exåa˘Sï¨©eRegi⁄", "Unsuµ‹ãd bô dïth %d", 
bps
);

6507 
	}
}

6510 
	$exåa˘ImageSe˘i⁄
(
image_d©a
 *
image
, 
∑ge£g
 *
£˘i⁄
,

6511 *
§c_buff
, *
£˘_buff
)

6513 
byãbuff1
, 
byãbuff2
;

6514 *
§c
, *
d°
;

6516 
uöt32
 
img_width
, 
img_Àngth
, 
img_rowsize
;

6517 
uöt32
 
j
, 
shi·1
, 
shi·2
, 
åaûög_bôs
;

6518 
uöt32
 
row
, 
fú°_row
, 
œ°_row
, 
fú°_cﬁ
, 
œ°_cﬁ
;

6519 
uöt32
 
§c_off£t
, 
d°_off£t
, 
row_off£t
, 
cﬁ_off£t
;

6520 
uöt32
 
off£t1
, 
off£t2
, 
fuŒ_byãs
;

6521 
uöt32
 
£˘_width
, 
£˘_Àngth
;

6522 
uöt16
 
bps
, 
•p
;

6524 #ifde‡
DEVELMODE


6525 
k
;

6526 
bô£t
;

6527 *
bô¨øy
 = 
NULL
;

6530 
img_width
 = 
image
->
width
;

6531 
img_Àngth
 = 
image
->
Àngth
;

6532 
bps
 = 
image
->bps;

6533 
•p
 = 
image
->spp;

6535 
§c
 = 
§c_buff
;

6536 
d°
 = 
£˘_buff
;

6537 
§c_off£t
 = 0;

6538 
d°_off£t
 = 0;

6540 #ifde‡
DEVELMODE


6541 i‡(
bô¨øy
 =
NULL
)

6543 i‡((
bô¨øy
 = (*)
	`mÆloc
(
img_width
)Ë=
NULL
)

6545 
	`TIFFEº‹
 ("", "DEBUG: UnableÅoállocate debugging bitarray");

6552 
fú°_row
 = 
£˘i⁄
->
y1
;

6553 
œ°_row
 = 
£˘i⁄
->
y2
;

6554 
fú°_cﬁ
 = 
£˘i⁄
->
x1
;

6555 
œ°_cﬁ
 = 
£˘i⁄
->
x2
;

6557 
£˘_width
 = 
œ°_cﬁ
 - 
fú°_cﬁ
 + 1;

6558 
£˘_Àngth
 = 
œ°_row
 - 
fú°_row
 + 1;

6559 
img_rowsize
 = ((
img_width
 * 
bps
 + 7Ë/ 8Ë* 
•p
;

6560 
fuŒ_byãs
 = (
£˘_width
 * 
•p
 * 
bps
) / 8;

6561 
åaûög_bôs
 = (
£˘_width
 * 
bps
) % 8;

6563 #ifde‡
DEVELMODE


6564 
	`TIFFEº‹
 ("", "FirstÑow: %d,ÜastÑow: %d, First col: %d,Üast col: %d\n",

6565 
fú°_row
, 
œ°_row
, 
fú°_cﬁ
, 
œ°_cﬁ
);

6566 
	`TIFFEº‹
 ("", "Image width: %d, ImageÜength: %d, bps: %d, spp: %d\n",

6567 
img_width
, 
img_Àngth
, 
bps
, 
•p
);

6568 
	`TIFFEº‹
 ("", "Sect width: %d, SectÜength: %d, full bytes: %dÅrailing bits %d\n",

6569 
£˘_width
, 
£˘_Àngth
, 
fuŒ_byãs
, 
åaûög_bôs
);

6572 i‡((
bps
 % 8) == 0)

6574 
cﬁ_off£t
 = 
fú°_cﬁ
 * 
•p
 * 
bps
 / 8;

6575 
row
 = 
fú°_row
;Ñow <
œ°_row
;Ñow++)

6578 
row_off£t
 = 
row
 * 
img_rowsize
;

6579 
§c_off£t
 = 
row_off£t
 + 
cﬁ_off£t
;

6581 #ifde‡
DEVELMODE


6582 
	`TIFFEº‹
 ("", "Sr¯off£t: %8d, D° off£t: %8d", 
§c_off£t
, 
d°_off£t
);

6584 
	`_TIFFmem˝y
 (
£˘_buff
 + 
d°_off£t
, 
§c_buff
 + 
§c_off£t
, 
fuŒ_byãs
);

6585 
d°_off£t
 +
fuŒ_byãs
;

6590 
shi·1
 = 
•p
 * ((
fú°_cﬁ
 * 
bps
) % 8);

6591 
shi·2
 = 
•p
 * ((
œ°_cﬁ
 * 
bps
) % 8);

6592 
row
 = 
fú°_row
;Ñow <
œ°_row
;Ñow++)

6595 
row_off£t
 = 
row
 * 
img_rowsize
;

6596 
off£t1
 = 
row_off£t
 + (
fú°_cﬁ
 * 
bps
 / 8);

6597 
off£t2
 = 
row_off£t
 + (
œ°_cﬁ
 * 
bps
 / 8);

6599 #ifde‡
DEVELMODE


6600 
j
 = 0, 
k
 = 7; j < 8; j++, k--)

6602 
bô£t
 = *(
§c_buff
 + 
off£t1
Ë& ((()1 << 
k
)) ? 1 : 0;

6603 
	`•rötf
(&
bô¨øy
[
j
], (
bô£t
) ? "1" : "0");

6605 
	`•rötf
(&
bô¨øy
[8], " ");

6606 
	`•rötf
(&
bô¨øy
[9], " ");

6607 
j
 = 10, 
k
 = 7; j < 18; j++, k--)

6609 
bô£t
 = *(
§c_buff
 + 
off£t2
Ë& ((()1 << 
k
)) ? 1 : 0;

6610 
	`•rötf
(&
bô¨øy
[
j
], (
bô£t
) ? "1" : "0");

6612 
bô¨øy
[18] = '\0';

6613 
	`TIFFEº‹
 ("", "Row: %3d Offset1: %d, Shift1: %d, Offset2: %d, Shift2: %d\n",

6614 
row
, 
off£t1
, 
shi·1
, 
off£t2
, 
shi·2
);

6617 
byãbuff1
 = 
byãbuff2
 = 0;

6618 i‡(
shi·1
 == 0)

6620 
	`_TIFFmem˝y
 (
£˘_buff
 + 
d°_off£t
, 
§c_buff
 + 
off£t1
, 
fuŒ_byãs
);

6622 #ifde‡
DEVELMODE


6623 
	`TIFFEº‹
 ("", " AŒig√d d©®§¯off£t1: %8d, D° off£t: %8d\n", 
off£t1
, 
d°_off£t
);

6624 
	`•rötf
(&
bô¨øy
[18], "\n");

6625 
	`•rötf
(&
bô¨øy
[19], "\t");

6626 
j
 = 20, 
k
 = 7; j < 28; j++, k--)

6628 
bô£t
 = *(
£˘_buff
 + 
d°_off£t
Ë& ((()1 << 
k
)) ? 1 : 0;

6629 
	`•rötf
(&
bô¨øy
[
j
], (
bô£t
) ? "1" : "0");

6631 
bô¨øy
[28] = ' ';

6632 
bô¨øy
[29] = ' ';

6634 
d°_off£t
 +
fuŒ_byãs
;

6636 i‡(
åaûög_bôs
 != 0)

6638 
byãbuff2
 = 
§c_buff
[
off£t2
] & (()255 << (7 - 
shi·2
));

6639 
£˘_buff
[
d°_off£t
] = 
byãbuff2
;

6640 #ifde‡
DEVELMODE


6641 
	`TIFFEº‹
 ("", " Trailing bits src offset: %8d, Dst offset: %8d\n",

6642 
off£t2
, 
d°_off£t
);

6643 
j
 = 30, 
k
 = 7; j < 38; j++, k--)

6645 
bô£t
 = *(
£˘_buff
 + 
d°_off£t
Ë& ((()1 << 
k
)) ? 1 : 0;

6646 
	`•rötf
(&
bô¨øy
[
j
], (
bô£t
) ? "1" : "0");

6648 
bô¨øy
[38] = '\0';

6649 
	`TIFFEº‹
 ("", "\tFú°ándÜa° byã†bef‹ê™dá·î maskög:\n\t%s\n\n", 
bô¨øy
);

6651 
d°_off£t
++;

6656 #ifde‡
DEVELMODE


6657 
	`TIFFEº‹
 ("", " U«Œig√d d©®§¯off£t: %8d, D° off£t: %8d\n", 
off£t1
 , 
d°_off£t
);

6659 
j
 = 0; j <
fuŒ_byãs
; j++)

6661 
byãbuff1
 = 
§c_buff
[
off£t1
 + 
j
] & (()255 >> 
shi·1
);

6662 
byãbuff2
 = 
§c_buff
[
off£t1
 + 
j
 + 1] & (()255 << (7 - 
shi·1
));

6663 
£˘_buff
[
d°_off£t
 + 
j
] = (
byãbuff1
 << 
shi·1
Ë| (
byãbuff2
 >> (8 - shift1));

6665 #ifde‡
DEVELMODE


6666 
	`•rötf
(&
bô¨øy
[18], "\n");

6667 
	`•rötf
(&
bô¨øy
[19], "\t");

6668 
j
 = 20, 
k
 = 7; j < 28; j++, k--)

6670 
bô£t
 = *(
£˘_buff
 + 
d°_off£t
Ë& ((()1 << 
k
)) ? 1 : 0;

6671 
	`•rötf
(&
bô¨øy
[
j
], (
bô£t
) ? "1" : "0");

6673 
bô¨øy
[28] = ' ';

6674 
bô¨øy
[29] = ' ';

6676 
d°_off£t
 +
fuŒ_byãs
;

6678 i‡(
åaûög_bôs
 != 0)

6680 #ifde‡
DEVELMODE


6681 
	`TIFFEº‹
 ("", " Tøûög bô† sr¯off£t: %8d, D° off£t: %8d\n", 
off£t1
 + 
fuŒ_byãs
, 
d°_off£t
);

6683 i‡(
shi·2
 > 
shi·1
)

6685 
byãbuff1
 = 
§c_buff
[
off£t1
 + 
fuŒ_byãs
] & (()255 << (7 - 
shi·2
));

6686 
byãbuff2
 = 
byãbuff1
 & (()255 << 
shi·1
);

6687 
£˘_buff
[
d°_off£t
] = 
byãbuff2
;

6688 #ifde‡
DEVELMODE


6689 
	`TIFFEº‹
 ("", " Shift2 > Shift1\n");

6694 i‡(
shi·2
 < 
shi·1
)

6696 
byãbuff2
 = (()255 << (
shi·1
 - 
shi·2
 - 1));

6697 
£˘_buff
[
d°_off£t
] &
byãbuff2
;

6698 #ifde‡
DEVELMODE


6699 
	`TIFFEº‹
 ("", " Shift2 < Shift1\n");

6702 #ifde‡
DEVELMODE


6704 
	`TIFFEº‹
 ("", " Shift2 == Shift1\n");

6708 #ifde‡
DEVELMODE


6709 
	`•rötf
(&
bô¨øy
[28], " ");

6710 
	`•rötf
(&
bô¨øy
[29], " ");

6711 
j
 = 30, 
k
 = 7; j < 38; j++, k--)

6713 
bô£t
 = *(
£˘_buff
 + 
d°_off£t
Ë& ((()1 << 
k
)) ? 1 : 0;

6714 
	`•rötf
(&
bô¨øy
[
j
], (
bô£t
) ? "1" : "0");

6716 
bô¨øy
[38] = '\0';

6717 
	`TIFFEº‹
 ("", "\tFú°ándÜa° byã†bef‹ê™dá·î maskög:\n\t%s\n\n", 
bô¨øy
);

6719 
d°_off£t
++;

6725 
	}
}

6728 
	$wrôeSñe˘i⁄s
(
TIFF
 *
ö
, TIFF **
out
, 
¸›_mask
 *
¸›
,

6729 
image_d©a
 *
image
, 
dump_›ts
 *
dump
,

6730 
bufföfo
 
£g_buffs
[], *
mp
, *
fûíame
,

6731 *
∑ge
, 
tŸÆ_∑ges
)

6733 
i
, 
∑ge_cou¡
;

6734 
autoödex
 = 0;

6735 *
¸›_buff
 = 
NULL
;

6738 
¸›
->
exp_mode
)

6740 
ONE_FILE_COMPOSITE
:

6741 
autoödex
 = 0;

6742 
¸›_buff
 = 
£g_buffs
[0].
buf„r
;

6743 i‡(
	`upd©e_ouçut_fûe
 (
out
, 
mp
, 
autoödex
, 
fûíame
, 
∑ge
))

6745 
∑ge_cou¡
 = 
tŸÆ_∑ges
;

6746 i‡(
	`wrôeCr›≥dImage
(
ö
, *
out
, 
image
, 
dump
,

6747 
¸›
->
comböed_width
,

6748 
¸›
->
comböed_Àngth
,

6749 
¸›_buff
, *
∑ge
, 
tŸÆ_∑ges
))

6751 
	`TIFFEº‹
("writeRegions", "UnableÅo writeÇew image");

6755 
ONE_FILE_SEPARATED
:

6756 
autoödex
 = 0;

6757 i‡(
	`upd©e_ouçut_fûe
 (
out
, 
mp
, 
autoödex
, 
fûíame
, 
∑ge
))

6759 
∑ge_cou¡
 = 
¸›
->
£À˘i⁄s
 * 
tŸÆ_∑ges
;

6760 
i
 = 0; i < 
¸›
->
£À˘i⁄s
; i++)

6762 
¸›_buff
 = 
£g_buffs
[
i
].
buf„r
;

6763 i‡(
	`wrôeCr›≥dImage
(
ö
, *
out
, 
image
, 
dump
,

6764 
¸›
->
ªgi⁄li°
[
i
].
width
,

6765 
¸›
->
ªgi⁄li°
[
i
].
Àngth
,

6766 
¸›_buff
, *
∑ge
, 
∑ge_cou¡
))

6768 
	`TIFFEº‹
("writeRegions", "UnableÅo writeÇew image");

6773 
FILE_PER_IMAGE_COMPOSITE
:

6774 
autoödex
 = 1;

6775 i‡(
	`upd©e_ouçut_fûe
 (
out
, 
mp
, 
autoödex
, 
fûíame
, 
∑ge
))

6778 
¸›_buff
 = 
£g_buffs
[0].
buf„r
;

6779 i‡(
	`wrôeCr›≥dImage
(
ö
, *
out
, 
image
, 
dump
,

6780 
¸›
->
comböed_width
,

6781 
¸›
->
comböed_Àngth
,

6782 
¸›_buff
, *
∑ge
, 
tŸÆ_∑ges
))

6784 
	`TIFFEº‹
("writeRegions", "UnableÅo writeÇew image");

6788 
FILE_PER_IMAGE_SEPARATED
:

6789 
autoödex
 = 1;

6790 
∑ge_cou¡
 = 
¸›
->
£À˘i⁄s
;

6791 i‡(
	`upd©e_ouçut_fûe
 (
out
, 
mp
, 
autoödex
, 
fûíame
, 
∑ge
))

6794 
i
 = 0; i < 
¸›
->
£À˘i⁄s
; i++)

6796 
¸›_buff
 = 
£g_buffs
[
i
].
buf„r
;

6798 i‡(
	`wrôeCr›≥dImage
(
ö
, *
out
, 
image
, 
dump
,

6799 
¸›
->
ªgi⁄li°
[
i
].
width
,

6800 
¸›
->
ªgi⁄li°
[
i
].
Àngth
,

6801 
¸›_buff
, *
∑ge
, 
∑ge_cou¡
))

6803 
	`TIFFEº‹
("writeRegions", "UnableÅo writeÇew image");

6808 
FILE_PER_SELECTION
:

6809 
autoödex
 = 1;

6810 
∑ge_cou¡
 = 1;

6811 
i
 = 0; i < 
¸›
->
£À˘i⁄s
; i++)

6813 i‡(
	`upd©e_ouçut_fûe
 (
out
, 
mp
, 
autoödex
, 
fûíame
, 
∑ge
))

6816 
¸›_buff
 = 
£g_buffs
[
i
].
buf„r
;

6818 i‡(
	`wrôeCr›≥dImage
(
ö
, *
out
, 
image
, 
dump
,

6819 
¸›
->
ªgi⁄li°
[
i
].
width
,

6820 
¸›
->
ªgi⁄li°
[
i
].
Àngth
,

6821 
¸›_buff
, *
∑ge
, 
∑ge_cou¡
))

6823 
	`TIFFEº‹
("writeRegions", "UnableÅo writeÇew image");

6832 
	}
}

6835 
	$wrôeImageSe˘i⁄s
(
TIFF
 *
ö
, TIFF *
out
, 
image_d©a
 *
image
,

6836 
∑gedef
 *
∑ge
, 
∑ge£g
 *
£˘i⁄s
,

6837 
dump_›ts
 * 
dump
, *
§c_buff
,

6838 **
£˘_buff_±r
)

6840 
hªs
, 
vªs
;

6841 
uöt32
 
i
, 
k
, 
width
, 
Àngth
, 
£˘size
;

6842 *
£˘_buff
 = *
£˘_buff_±r
;

6844 
hªs
 = 
∑ge
->hres;

6845 
vªs
 = 
∑ge
->vres;

6847 
k
 = 
∑ge
->
cﬁs
 *Öage->
rows
;

6848 i‡((
k
 < 1Ë|| (k > 
MAX_SECTIONS
))

6850 
	`TIFFEº‹
("writeImageSections",

6851 "%d Row†™d Cﬁumn†ex˚ed maximum se˘i⁄s\nIn¸ó£Ñesﬁuti⁄ o∏ªdu˚ se˘i⁄s", 
k
);

6855 
i
 = 0; i < 
k
; i++)

6857 
width
 = 
£˘i⁄s
[
i
].
x2
 - se˘i⁄s[i].
x1
 + 1;

6858 
Àngth
 = 
£˘i⁄s
[
i
].
y2
 - se˘i⁄s[i].
y1
 + 1;

6859 
£˘size
 = (
uöt32
)

6860 
	`˚û
((
width
 * 
image
->
bps
 + 7Ë/ ()8Ë* image->
•p
 * 
Àngth
;

6862 i‡(
	`¸óãImageSe˘i⁄
(
£˘size
, 
£˘_buff_±r
))

6864 
	`TIFFEº‹
("writeImageSections", "UnableÅoállocate section buffer");

6865 
	`exô
 (-1);

6867 
£˘_buff
 = *
£˘_buff_±r
;

6869 i‡(
	`exåa˘ImageSe˘i⁄
 (
image
, &
£˘i⁄s
[
i
], 
§c_buff
, 
£˘_buff
))

6871 
	`TIFFEº‹
("writeImageSections", "UnableÅoÉxtract image sections");

6872 
	`exô
 (-1);

6876 i‡(
	`wrôeSögÀSe˘i⁄
(
ö
, 
out
, 
image
, 
dump
, 
width
, 
Àngth
, 
hªs
, 
vªs
, 
£˘_buff
))

6878 
	`TIFFEº‹
("writeImageSections", "UnableÅo write image section");

6879 
	`exô
 (-1);

6884 
	}
}

6893 
	$wrôeSögÀSe˘i⁄
(
TIFF
 *
ö
, TIFF *
out
, 
image_d©a
 *
image
,

6894 
dump_›ts
 *
dump
, 
uöt32
 
width
, uöt32 
Àngth
,

6895 
hªs
, 
vªs
,

6896 *
£˘_buff
)

6898 
uöt16
 
bps
, 
•p
;

6899 
uöt16
 
öput_com¥essi⁄
, 
öput_phŸomëric
;

6900 
uöt16
 
öput_∂™¨
;

6901 
˝Tag
* 
p
;

6906 
öput_com¥essi⁄
 = 
image
->
com¥essi⁄
;

6907 
öput_phŸomëric
 = 
image
->
phŸomëric
;

6909 
•p
 = 
image
->spp;

6910 
bps
 = 
image
->bps;

6911 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, 
width
);

6912 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, 
Àngth
);

6913 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 
bps
);

6914 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 
•p
);

6916 #ifde‡
DEBUG2


6917 
	`TIFFEº‹
("writeSingleSection", "Input compression: %s",

6918 (
öput_com¥essi⁄
 =
COMPRESSION_OJPEG
) ? "Old Jpeg" :

6919 ((
öput_com¥essi⁄
 =
COMPRESSION_JPEG
) ? "New Jpeg" : "Non Jpeg"));

6926 i‡(
com¥essi⁄
 !(
uöt16
)-1)

6927 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

6930 i‡(
öput_com¥essi⁄
 =
COMPRESSION_OJPEG
)

6932 
com¥essi⁄
 = 
COMPRESSION_JPEG
;

6933 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

6934 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_JPEG
);

6937 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

6940 i‡(
com¥essi⁄
 =
COMPRESSION_JPEG
)

6942 i‡((
öput_phŸomëric
 =
PHOTOMETRIC_PALETTE
) ||

6943 (
öput_phŸomëric
 =
PHOTOMETRIC_MASK
))

6945 
	`TIFFEº‹
 ("writeSingleSection",

6947 (
öput_phŸomëric
 =
PHOTOMETRIC_PALETTE
) ?

6951 i‡((
öput_phŸomëric
 =
PHOTOMETRIC_RGB
) &&

6952 (
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
))

6953 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_YCBCR
);

6955 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
öput_phŸomëric
);

6959 i‡(
com¥essi⁄
 =
COMPRESSION_SGILOG
 || com¥essi⁄ =
COMPRESSION_SGILOG24
)

6960 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
•p
 == 1 ?

6961 
PHOTOMETRIC_LOGL
 : 
PHOTOMETRIC_LOGLUV
);

6963 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
image
->
phŸomëric
);

6966 #ifde‡
DEBUG2


6967 
	`TIFFEº‹
("writeSingleSection", "InputÖhotometric: %s",

6968 (
öput_phŸomëric
 =
PHOTOMETRIC_RGB
) ? "RGB" :

6969 ((
öput_phŸomëric
 =
PHOTOMETRIC_YCBCR
) ? "YCbCr" : "Not RGB or YCbCr"));

6972 i‡(((
öput_phŸomëric
 =
PHOTOMETRIC_LOGL
) ||

6973 (
öput_phŸomëric
 =
PHOTOMETRIC_LOGLUV
)) &&

6974 ((
com¥essi⁄
 !
COMPRESSION_SGILOG
) &&

6975 (
com¥essi⁄
 !
COMPRESSION_SGILOG24
)))

6977 
	`TIFFEº‹
("writeSingleSection",

6982 i‡(
fûl‹dî
 != 0)

6983 
	`TIFFSëFõld
(
out
, 
TIFFTAG_FILLORDER
, 
fûl‹dî
);

6985 
	`C›yTag
(
TIFFTAG_FILLORDER
, 1, 
TIFF_SHORT
);

6994 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
image
->
‹õ¡©i⁄
);

7001 i‡(
ouâûed
 == -1)

7002 
ouâûed
 = 
	`TIFFIsTûed
(
ö
);

7003 i‡(
ouâûed
) {

7010 i‡(
tûewidth
 =(
uöt32
) 0)

7011 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILEWIDTH
, &
tûewidth
);

7012 i‡(
tûñígth
 =(
uöt32
) 0)

7013 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILELENGTH
, &
tûñígth
);

7015 i‡(
tûewidth
 =0 || 
tûñígth
 == 0)

7016 
	`TIFFDeÁu…TûeSize
(
out
, &
tûewidth
, &
tûñígth
);

7017 
	`TIFFDeÁu…TûeSize
(
out
, &
tûewidth
, &
tûñígth
);

7018 
	`TIFFSëFõld
(
out
, 
TIFFTAG_TILEWIDTH
, 
tûewidth
);

7019 
	`TIFFSëFõld
(
out
, 
TIFFTAG_TILELENGTH
, 
tûñígth
);

7026 i‡(
row•î°rù
 =(
uöt32
) 0)

7028 i‡(!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
))

7029 
row•î°rù
 = 
	`TIFFDeÁu…SåùSize
(
out
,Ñowsperstrip);

7030 i‡(
com¥essi⁄
 !
COMPRESSION_JPEG
)

7032 i‡(
row•î°rù
 > 
Àngth
)

7033 
row•î°rù
 = 
Àngth
;

7037 i‡(
row•î°rù
 =(
uöt32
) -1)

7038 
row•î°rù
 = 
Àngth
;

7039 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

7042 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_PLANARCONFIG
, &
öput_∂™¨
);

7043 i‡(
c⁄fig
 !(
uöt16
) -1)

7044 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
c⁄fig
);

7046 
	`C›yFõld
(
TIFFTAG_PLANARCONFIG
, 
c⁄fig
);

7047 i‡(
•p
 <= 4)

7048 
	`C›yTag
(
TIFFTAG_TRANSFERFUNCTION
, 4, 
TIFF_SHORT
);

7049 
	`C›yTag
(
TIFFTAG_COLORMAP
, 4, 
TIFF_SHORT
);

7052 
com¥essi⁄
) {

7056 
COMPRESSION_JPEG
:

7057 i‡(((
bps
 % 8) == 0) || ((bps % 12) == 0))

7059 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGQUALITY
, 
quÆôy
);

7060 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGCOLORMODE
, 
JPEGCOLORMODE_RGB
);

7064 
	`TIFFEº‹
("writeSingleSection",

7069 
COMPRESSION_LZW
:

7070 
COMPRESSION_ADOBE_DEFLATE
:

7071 
COMPRESSION_DEFLATE
:

7072 i‡(
¥edi˘‹
 !(
uöt16
)-1)

7073 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

7075 
	`C›yFõld
(
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

7077 
COMPRESSION_CCITTFAX3
:

7078 
COMPRESSION_CCITTFAX4
:

7079 i‡(
com¥essi⁄
 =
COMPRESSION_CCITTFAX3
) {

7080 i‡(
g3›ts
 !(
uöt32
) -1)

7081 
	`TIFFSëFõld
(
out
, 
TIFFTAG_GROUP3OPTIONS
, 
g3›ts
);

7083 
	`C›yFõld
(
TIFFTAG_GROUP3OPTIONS
, 
g3›ts
);

7085 
	`C›yTag
(
TIFFTAG_GROUP4OPTIONS
, 1, 
TIFF_LONG
);

7086 
	`C›yTag
(
TIFFTAG_BADFAXLINES
, 1, 
TIFF_LONG
);

7087 
	`C›yTag
(
TIFFTAG_CLEANFAXDATA
, 1, 
TIFF_LONG
);

7088 
	`C›yTag
(
TIFFTAG_CONSECUTIVEBADFAXLINES
, 1, 
TIFF_LONG
);

7089 
	`C›yTag
(
TIFFTAG_FAXRECVPARAMS
, 1, 
TIFF_LONG
);

7090 
	`C›yTag
(
TIFFTAG_FAXRECVTIME
, 1, 
TIFF_LONG
);

7091 
	`C›yTag
(
TIFFTAG_FAXSUBADDRESS
, 1, 
TIFF_ASCII
);

7094 { 
uöt32
 
Àn32
;

7095 ** 
d©a
;

7096 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_ICCPROFILE
, &
Àn32
, &
d©a
))

7097 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ICCPROFILE
, 
Àn32
, 
d©a
);

7099 { 
uöt16
 
nöks
;

7100 c⁄° * 
ök«mes
;

7101 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_NUMBEROFINKS
, &
nöks
)) {

7102 
	`TIFFSëFõld
(
out
, 
TIFFTAG_NUMBEROFINKS
, 
nöks
);

7103 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_INKNAMES
, &
ök«mes
)) {

7104 
ök«me¶í
 = 
	`°æí
(
ök«mes
) + 1;

7105 c⁄° * 
˝
 = 
ök«mes
;

7106 
nöks
 > 1) {

7107 
˝
 = 
	`°rchr
(cp, '\0');

7108 i‡(
˝
) {

7109 
˝
++;

7110 
ök«me¶í
 +(
	`°æí
(
˝
) + 1);

7112 
nöks
--;

7114 
	`TIFFSëFõld
(
out
, 
TIFFTAG_INKNAMES
, 
ök«me¶í
, 
ök«mes
);

7119 
pg0
, 
pg1
;

7120 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PAGENUMBER
, &
pg0
, &
pg1
)) {

7121 i‡(
∑geNum
 < 0)

7122 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PAGENUMBER
, 
pg0
, 
pg1
);

7124 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PAGENUMBER
, 
∑geNum
++, 0);

7128 
p
 = 
ègs
;Ö < &ègs[
NTAGS
];Ö++)

7129 
	`C›yTag
(
p
->
èg
,Ö->
cou¡
,Ö->
ty≥
);

7132 
	`TIFFSëFõld
(
out
, 
TIFFTAG_XRESOLUTION
, ()
hªs
);

7133 
	`TIFFSëFõld
(
out
, 
TIFFTAG_YRESOLUTION
, ()
vªs
);

7136 i‡(
ouâûed
)

7138 i‡(
c⁄fig
 =
PLANARCONFIG_CONTIG
)

7139 
	`wrôeBuf„rToC⁄tigTûes
 (
out
, 
£˘_buff
, 
Àngth
, 
width
, 
•p
, 
dump
);

7141 
	`wrôeBuf„rToSï¨©eTûes
 (
out
, 
£˘_buff
, 
Àngth
, 
width
, 
•p
, 
dump
);

7145 i‡(
c⁄fig
 =
PLANARCONFIG_CONTIG
)

7146 
	`wrôeBuf„rToC⁄tigSåùs
 (
out
, 
£˘_buff
, 
Àngth
);

7148 
	`wrôeBuf„rToSï¨©eSåùs
(
out
, 
£˘_buff
, 
Àngth
, 
width
, 
•p
, 
dump
);

7151 i‡(!
	`TIFFWrôeDúe˘‹y
(
out
))

7153 
	`TIFFClo£
(
out
);

7158 
	}
}

7163 
	$¸óãImageSe˘i⁄
(
uöt32
 
£˘size
, **
£˘_buff_±r
)

7165 *
£˘_buff
 = 
NULL
;

7166 *
√w_buff
 = 
NULL
;

7167 
uöt32
 
¥ev_£˘size
 = 0;

7169 
£˘_buff
 = *
£˘_buff_±r
;

7171 i‡(!
£˘_buff
)

7173 
£˘_buff
 = (*)
	`_TIFFmÆloc
(
£˘size
);

7174 *
£˘_buff_±r
 = 
£˘_buff
;

7175 
	`_TIFFmem£t
(
£˘_buff
, 0, 
£˘size
);

7179 i‡(
¥ev_£˘size
 < 
£˘size
)

7181 
√w_buff
 = 
	`_TIFFªÆloc
(
£˘_buff
, 
£˘size
);

7182 i‡(!
√w_buff
)

7184 
	`‰ì
 (
£˘_buff
);

7185 
£˘_buff
 = (*)
	`_TIFFmÆloc
(
£˘size
);

7188 
£˘_buff
 = 
√w_buff
;

7190 
	`_TIFFmem£t
(
£˘_buff
, 0, 
£˘size
);

7194 i‡(!
£˘_buff
)

7196 
	`TIFFEº‹
("createImageSection", "UnableÅoállocate/reallocate section buffer");

7199 
¥ev_£˘size
 = 
£˘size
;

7200 *
£˘_buff_±r
 = 
£˘_buff
;

7203 
	}
}

7208 
	$¥o˚ssCr›Sñe˘i⁄s
(
image_d©a
 *
image
, 
¸›_mask
 *
¸›
,

7209 **
ªad_buff_±r
, 
bufföfo
 
£g_buffs
[])

7211 
i
;

7212 
uöt32
 
width
, 
Àngth
, 
tŸÆ_width
, 
tŸÆ_Àngth
;

7213 
tsize_t
 
¸›size
;

7214 *
¸›_buff
 = 
NULL
;

7215 *
ªad_buff
 = 
NULL
;

7216 *
√xt_buff
 = 
NULL
;

7217 
tsize_t
 
¥ev_¸›size
 = 0;

7219 
ªad_buff
 = *
ªad_buff_±r
;

7221 i‡(
¸›
->
img_mode
 =
COMPOSITE_IMAGES
)

7223 
¸›size
 = 
¸›
->
buf·ŸÆ
;

7224 
¸›_buff
 = 
£g_buffs
[0].
buf„r
;

7225 i‡(!
¸›_buff
)

7226 
¸›_buff
 = (*)
	`_TIFFmÆloc
(
¸›size
);

7229 
¥ev_¸›size
 = 
£g_buffs
[0].
size
;

7230 i‡(
¥ev_¸›size
 < 
¸›size
)

7232 
√xt_buff
 = 
	`_TIFFªÆloc
(
¸›_buff
, 
¸›size
);

7233 i‡(! 
√xt_buff
)

7235 
	`_TIFF‰ì
 (
¸›_buff
);

7236 
¸›_buff
 = (*)
	`_TIFFmÆloc
(
¸›size
);

7239 
¸›_buff
 = 
√xt_buff
;

7243 i‡(!
¸›_buff
)

7245 
	`TIFFEº‹
("processCropSelections", "UnableÅoállocate/reallocate crop buffer");

7249 
	`_TIFFmem£t
(
¸›_buff
, 0, 
¸›size
);

7250 
£g_buffs
[0].
buf„r
 = 
¸›_buff
;

7251 
£g_buffs
[0].
size
 = 
¸›size
;

7254 i‡(
	`exåa˘ComposôeRegi⁄s
(
image
, 
¸›
, 
ªad_buff
, 
¸›_buff
) != 0)

7257 i‡(
¸›
->
¸›_mode
 & 
CROP_INVERT
)

7259 
¸›
->
phŸomëric
)

7262 
PHOTOMETRIC_MINISWHITE
:

7263 
PHOTOMETRIC_MINISBLACK
:

7264 
image
->
phŸomëric
 = 
¸›
->photometric;

7266 
INVERT_DATA_ONLY
:

7267 
INVERT_DATA_AND_TAG
:

7268 i‡(
	`övîtImage
(
image
->
phŸomëric
, image->
•p
, image->
bps
,

7269 
¸›
->
comböed_width
, cr›->
comböed_Àngth
, 
¸›_buff
))

7271 
	`TIFFEº‹
("processCropSelections",

7275 i‡(
¸›
->
phŸomëric
 =
INVERT_DATA_AND_TAG
)

7277 
image
->
phŸomëric
)

7279 
PHOTOMETRIC_MINISWHITE
:

7280 
image
->
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

7282 
PHOTOMETRIC_MINISBLACK
:

7283 
image
->
phŸomëric
 = 
PHOTOMETRIC_MINISWHITE
;

7295 i‡(
¸›
->
¸›_mode
 & 
CROP_MIRROR
)

7297 i‡(
	`múr‹Image
(
image
->
•p
, image->
bps
, 
¸›
->
múr‹
,

7298 
¸›
->
comböed_width
, cr›->
comböed_Àngth
, 
¸›_buff
))

7300 
	`TIFFEº‹
("processCropSelections", "FailedÅo mirror compositeÑegions %s",

7301 (
¸›
->
rŸ©i⁄
 =
MIRROR_HORIZ
) ? "horizontally" : "vertically");

7306 i‡(
¸›
->
¸›_mode
 & 
CROP_ROTATE
)

7308 i‡(
	`rŸ©eImage
(
¸›
->
rŸ©i⁄
, 
image
, &¸›->
comböed_width
,

7309 &
¸›
->
comböed_Àngth
, &
¸›_buff
))

7311 
	`TIFFEº‹
("processCropSelections",

7312 "FaûedÅÿrŸ©êcomposôêªgi⁄†by %d degªes", 
¸›
->
rŸ©i⁄
);

7315 
£g_buffs
[0].
buf„r
 = 
¸›_buff
;

7316 
£g_buffs
[0].
size
 = (((
¸›
->
comböed_width
 * 
image
->
bps
 + 7 ) / 8)

7317 * 
image
->
•p
Ë* 
¸›
->
comböed_Àngth
;

7322 
tŸÆ_width
 = 
tŸÆ_Àngth
 = 0;

7323 
i
 = 0; i < 
¸›
->
£À˘i⁄s
; i++)

7325 
¸›size
 = 
¸›
->
buf·ŸÆ
;

7326 
¸›_buff
 = 
£g_buffs
[
i
].
buf„r
;

7327 i‡(!
¸›_buff
)

7328 
¸›_buff
 = (*)
	`_TIFFmÆloc
(
¸›size
);

7331 
¥ev_¸›size
 = 
£g_buffs
[0].
size
;

7332 i‡(
¥ev_¸›size
 < 
¸›size
)

7334 
√xt_buff
 = 
	`_TIFFªÆloc
(
¸›_buff
, 
¸›size
);

7335 i‡(! 
√xt_buff
)

7337 
	`_TIFF‰ì
 (
¸›_buff
);

7338 
¸›_buff
 = (*)
	`_TIFFmÆloc
(
¸›size
);

7341 
¸›_buff
 = 
√xt_buff
;

7345 i‡(!
¸›_buff
)

7347 
	`TIFFEº‹
("processCropSelections", "UnableÅoállocate/reallocate crop buffer");

7351 
	`_TIFFmem£t
(
¸›_buff
, 0, 
¸›size
);

7352 
£g_buffs
[
i
].
buf„r
 = 
¸›_buff
;

7353 
£g_buffs
[
i
].
size
 = 
¸›size
;

7355 i‡(
	`exåa˘Sï¨©eRegi⁄
(
image
, 
¸›
, 
ªad_buff
, 
¸›_buff
, 
i
))

7357 
	`TIFFEº‹
("¥o˚ssCr›Sñe˘i⁄s", "U«bÀÅÿexåa˘ cr›≥dÑegi⁄ %d from image", 
i
);

7361 
width
 = 
¸›
->
ªgi⁄li°
[
i
].width;

7362 
Àngth
 = 
¸›
->
ªgi⁄li°
[
i
].length;

7364 i‡(
¸›
->
¸›_mode
 & 
CROP_INVERT
)

7366 
¸›
->
phŸomëric
)

7369 
PHOTOMETRIC_MINISWHITE
:

7370 
PHOTOMETRIC_MINISBLACK
:

7371 
image
->
phŸomëric
 = 
¸›
->photometric;

7373 
INVERT_DATA_ONLY
:

7374 
INVERT_DATA_AND_TAG
:

7375 i‡(
	`övîtImage
(
image
->
phŸomëric
, image->
•p
, image->
bps
,

7376 
width
, 
Àngth
, 
¸›_buff
))

7378 
	`TIFFEº‹
("processCropSelections",

7382 i‡(
¸›
->
phŸomëric
 =
INVERT_DATA_AND_TAG
)

7384 
image
->
phŸomëric
)

7386 
PHOTOMETRIC_MINISWHITE
:

7387 
image
->
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

7389 
PHOTOMETRIC_MINISBLACK
:

7390 
image
->
phŸomëric
 = 
PHOTOMETRIC_MINISWHITE
;

7401 i‡(
¸›
->
¸›_mode
 & 
CROP_MIRROR
)

7403 i‡(
	`múr‹Image
(
image
->
•p
, image->
bps
, 
¸›
->
múr‹
,

7404 
width
, 
Àngth
, 
¸›_buff
))

7406 
	`TIFFEº‹
("processCropSelections", "FailedÅo mirror cropÑegion %s",

7407 (
¸›
->
rŸ©i⁄
 =
MIRROR_HORIZ
) ? "horizontally" : "vertically");

7412 i‡(
¸›
->
¸›_mode
 & 
CROP_ROTATE
)

7414 i‡(
	`rŸ©eImage
(
¸›
->
rŸ©i⁄
, 
image
, &¸›->
ªgi⁄li°
[
i
].
width
,

7415 &
¸›
->
ªgi⁄li°
[
i
].
Àngth
, &
¸›_buff
))

7417 
	`TIFFEº‹
("processCropSelections",

7418 "FaûedÅÿrŸ©ê¸›Ñegi⁄ by %d degªes", 
¸›
->
rŸ©i⁄
);

7421 
tŸÆ_width
 +
¸›
->
ªgi⁄li°
[
i
].
width
;

7422 
tŸÆ_Àngth
 +
¸›
->
ªgi⁄li°
[
i
].
Àngth
;

7423 
¸›
->
comböed_width
 = 
tŸÆ_width
;

7424 
¸›
->
comböed_Àngth
 = 
tŸÆ_Àngth
;

7425 
£g_buffs
[
i
].
buf„r
 = 
¸›_buff
;

7426 
£g_buffs
[
i
].
size
 = (((
¸›
->
ªgi⁄li°
[i].
width
 * 
image
->
bps
 + 7 ) / 8)

7427 * 
image
->
•p
Ë* 
¸›
->
ªgi⁄li°
[
i
].
Àngth
;

7432 
	}
}

7443 
	$¸óãCr›≥dImage
(
image_d©a
 *
image
, 
¸›_mask
 *
¸›
,

7444 **
ªad_buff_±r
, **
¸›_buff_±r
)

7446 
tsize_t
 
¸›size
;

7447 *
ªad_buff
 = 
NULL
;

7448 *
¸›_buff
 = 
NULL
;

7449 *
√w_buff
 = 
NULL
;

7450 
tsize_t
 
¥ev_¸›size
 = 0;

7452 
ªad_buff
 = *
ªad_buff_±r
;

7455 
¸›_buff
 = 
ªad_buff
;

7456 *
¸›_buff_±r
 = 
ªad_buff
;

7457 
¸›
->
comböed_width
 = 
image
->
width
;

7458 
¸›
->
comböed_Àngth
 = 
image
->
Àngth
;

7460 
¸›size
 = 
¸›
->
buf·ŸÆ
;

7461 
¸›_buff
 = *
¸›_buff_±r
;

7462 i‡(!
¸›_buff
)

7464 
¸›_buff
 = (*)
	`_TIFFmÆloc
(
¸›size
);

7465 *
¸›_buff_±r
 = 
¸›_buff
;

7466 
	`_TIFFmem£t
(
¸›_buff
, 0, 
¸›size
);

7467 
¥ev_¸›size
 = 
¸›size
;

7471 i‡(
¥ev_¸›size
 < 
¸›size
)

7473 
√w_buff
 = 
	`_TIFFªÆloc
(
¸›_buff
, 
¸›size
);

7474 i‡(!
√w_buff
)

7476 
	`‰ì
 (
¸›_buff
);

7477 
¸›_buff
 = (*)
	`_TIFFmÆloc
(
¸›size
);

7480 
¸›_buff
 = 
√w_buff
;

7481 
	`_TIFFmem£t
(
¸›_buff
, 0, 
¸›size
);

7485 i‡(!
¸›_buff
)

7487 
	`TIFFEº‹
("createCroppedImage", "UnableÅoállocate/reallocate crop buffer");

7490 *
¸›_buff_±r
 = 
¸›_buff
;

7492 i‡(
¸›
->
¸›_mode
 & 
CROP_INVERT
)

7494 
¸›
->
phŸomëric
)

7497 
PHOTOMETRIC_MINISWHITE
:

7498 
PHOTOMETRIC_MINISBLACK
:

7499 
image
->
phŸomëric
 = 
¸›
->photometric;

7501 
INVERT_DATA_ONLY
:

7502 
INVERT_DATA_AND_TAG
:

7503 i‡(
	`övîtImage
(
image
->
phŸomëric
, image->
•p
, image->
bps
,

7504 
¸›
->
comböed_width
, cr›->
comböed_Àngth
, 
¸›_buff
))

7506 
	`TIFFEº‹
("createCroppedImage",

7510 i‡(
¸›
->
phŸomëric
 =
INVERT_DATA_AND_TAG
)

7512 
image
->
phŸomëric
)

7514 
PHOTOMETRIC_MINISWHITE
:

7515 
image
->
phŸomëric
 = 
PHOTOMETRIC_MINISBLACK
;

7517 
PHOTOMETRIC_MINISBLACK
:

7518 
image
->
phŸomëric
 = 
PHOTOMETRIC_MINISWHITE
;

7529 i‡(
¸›
->
¸›_mode
 & 
CROP_MIRROR
)

7531 i‡(
	`múr‹Image
(
image
->
•p
, image->
bps
, 
¸›
->
múr‹
,

7532 
¸›
->
comböed_width
, cr›->
comböed_Àngth
, 
¸›_buff
))

7534 
	`TIFFEº‹
("createCroppedImage", "FailedÅo mirror image or cropped selection %s",

7535 (
¸›
->
rŸ©i⁄
 =
MIRROR_HORIZ
) ? "horizontally" : "vertically");

7540 i‡(
¸›
->
¸›_mode
 & 
CROP_ROTATE
)

7542 i‡(
	`rŸ©eImage
(
¸›
->
rŸ©i⁄
, 
image
, &¸›->
comböed_width
,

7543 &
¸›
->
comböed_Àngth
, 
¸›_buff_±r
))

7545 
	`TIFFEº‹
("createCroppedImage",

7546 "FaûedÅÿrŸ©êimagê‹ cr›≥d sñe˘i⁄ by %d degªes", 
¸›
->
rŸ©i⁄
);

7551 i‡(
¸›_buff
 =
ªad_buff
)

7552 *
ªad_buff_±r
 = 
NULL
;

7555 
	}
}

7570 
	$wrôeCr›≥dImage
(
TIFF
 *
ö
, TIFF *
out
, 
image_d©a
 *
image
,

7571 
dump_›ts
 *
dump
, 
uöt32
 
width
, uöt32 
Àngth
,

7572 *
¸›_buff
, 
∑gíum
, 
tŸÆ_∑ges
)

7574 
uöt16
 
bps
, 
•p
;

7575 
uöt16
 
öput_com¥essi⁄
, 
öput_phŸomëric
;

7576 
uöt16
 
öput_∂™¨
;

7577 
˝Tag
* 
p
;

7579 
öput_com¥essi⁄
 = 
image
->
com¥essi⁄
;

7580 
öput_phŸomëric
 = 
image
->
phŸomëric
;

7581 
•p
 = 
image
->spp;

7582 
bps
 = 
image
->bps;

7584 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEWIDTH
, 
width
);

7585 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, 
Àngth
);

7586 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 
bps
);

7587 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 
•p
);

7589 #ifde‡
DEBUG2


7590 
	`TIFFEº‹
("writeCroppedImage", "Input compression: %s",

7591 (
öput_com¥essi⁄
 =
COMPRESSION_OJPEG
) ? "Old Jpeg" :

7592 ((
öput_com¥essi⁄
 =
COMPRESSION_JPEG
) ? "New Jpeg" : "Non Jpeg"));

7595 i‡(
com¥essi⁄
 !(
uöt16
)-1)

7596 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

7599 i‡(
öput_com¥essi⁄
 =
COMPRESSION_OJPEG
)

7601 
com¥essi⁄
 = 
COMPRESSION_JPEG
;

7602 
j≥gcﬁ‹mode
 = 
JPEGCOLORMODE_RAW
;

7603 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
COMPRESSION_JPEG
);

7606 
	`C›yFõld
(
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

7609 i‡(
com¥essi⁄
 =
COMPRESSION_JPEG
)

7611 i‡((
öput_phŸomëric
 =
PHOTOMETRIC_PALETTE
) ||

7612 (
öput_phŸomëric
 =
PHOTOMETRIC_MASK
))

7614 
	`TIFFEº‹
 ("writeCroppedImage",

7616 (
öput_phŸomëric
 =
PHOTOMETRIC_PALETTE
) ?

7620 i‡((
öput_phŸomëric
 =
PHOTOMETRIC_RGB
) &&

7621 (
j≥gcﬁ‹mode
 =
JPEGCOLORMODE_RGB
))

7622 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
PHOTOMETRIC_YCBCR
);

7624 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
öput_phŸomëric
);

7628 i‡(
com¥essi⁄
 =
COMPRESSION_SGILOG
 || com¥essi⁄ =
COMPRESSION_SGILOG24
)

7630 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
•p
 == 1 ?

7631 
PHOTOMETRIC_LOGL
 : 
PHOTOMETRIC_LOGLUV
);

7635 i‡(
öput_com¥essi⁄
 =
COMPRESSION_SGILOG
 ||

7636 
öput_com¥essi⁄
 =
COMPRESSION_SGILOG24
)

7638 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
•p
 == 1 ?

7639 
PHOTOMETRIC_LOGL
 : 
PHOTOMETRIC_LOGLUV
);

7642 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, 
image
->
phŸomëric
);

7646 i‡(((
öput_phŸomëric
 =
PHOTOMETRIC_LOGL
) ||

7647 (
öput_phŸomëric
 =
PHOTOMETRIC_LOGLUV
)) &&

7648 ((
com¥essi⁄
 !
COMPRESSION_SGILOG
) &&

7649 (
com¥essi⁄
 !
COMPRESSION_SGILOG24
)))

7651 
	`TIFFEº‹
("writeCroppedImage",

7656 i‡(
fûl‹dî
 != 0)

7657 
	`TIFFSëFõld
(
out
, 
TIFFTAG_FILLORDER
, 
fûl‹dî
);

7659 
	`C›yTag
(
TIFFTAG_FILLORDER
, 1, 
TIFF_SHORT
);

7668 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ORIENTATION
, 
image
->
‹õ¡©i⁄
);

7675 i‡(
ouâûed
 == -1)

7676 
ouâûed
 = 
	`TIFFIsTûed
(
ö
);

7677 i‡(
ouâûed
) {

7684 i‡(
tûewidth
 =(
uöt32
) 0)

7685 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILEWIDTH
, &
tûewidth
);

7686 i‡(
tûñígth
 =(
uöt32
) 0)

7687 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILELENGTH
, &
tûñígth
);

7689 i‡(
tûewidth
 =0 || 
tûñígth
 == 0)

7690 
	`TIFFDeÁu…TûeSize
(
out
, &
tûewidth
, &
tûñígth
);

7691 
	`TIFFSëFõld
(
out
, 
TIFFTAG_TILEWIDTH
, 
tûewidth
);

7692 
	`TIFFSëFõld
(
out
, 
TIFFTAG_TILELENGTH
, 
tûñígth
);

7699 i‡(
row•î°rù
 =(
uöt32
) 0)

7701 i‡(!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
))

7702 
row•î°rù
 = 
	`TIFFDeÁu…SåùSize
(
out
,Ñowsperstrip);

7703 i‡(
com¥essi⁄
 !
COMPRESSION_JPEG
)

7705 i‡(
row•î°rù
 > 
Àngth
)

7706 
row•î°rù
 = 
Àngth
;

7710 i‡(
row•î°rù
 =(
uöt32
) -1)

7711 
row•î°rù
 = 
Àngth
;

7712 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

7715 
	`TIFFGëFõldDeÁu…ed
(
ö
, 
TIFFTAG_PLANARCONFIG
, &
öput_∂™¨
);

7716 i‡(
c⁄fig
 !(
uöt16
) -1)

7717 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
c⁄fig
);

7719 
	`C›yFõld
(
TIFFTAG_PLANARCONFIG
, 
c⁄fig
);

7720 i‡(
•p
 <= 4)

7721 
	`C›yTag
(
TIFFTAG_TRANSFERFUNCTION
, 4, 
TIFF_SHORT
);

7722 
	`C›yTag
(
TIFFTAG_COLORMAP
, 4, 
TIFF_SHORT
);

7725 
com¥essi⁄
) {

7726 
COMPRESSION_JPEG
:

7727 i‡(((
bps
 % 8) == 0) || ((bps % 12) == 0))

7729 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGQUALITY
, 
quÆôy
);

7730 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGCOLORMODE
, 
JPEGCOLORMODE_RGB
);

7734 
	`TIFFEº‹
("writeCroppedImage",

7739 
COMPRESSION_LZW
:

7740 
COMPRESSION_ADOBE_DEFLATE
:

7741 
COMPRESSION_DEFLATE
:

7742 i‡(
¥edi˘‹
 !(
uöt16
)-1)

7743 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

7745 
	`C›yFõld
(
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

7747 
COMPRESSION_CCITTFAX3
:

7748 
COMPRESSION_CCITTFAX4
:

7749 i‡(
bps
 != 1)

7751 
	`TIFFEº‹
("writeCroppedImage",

7755 i‡(
com¥essi⁄
 =
COMPRESSION_CCITTFAX3
) {

7756 i‡(
g3›ts
 !(
uöt32
) -1)

7757 
	`TIFFSëFõld
(
out
, 
TIFFTAG_GROUP3OPTIONS
, 
g3›ts
);

7759 
	`C›yFõld
(
TIFFTAG_GROUP3OPTIONS
, 
g3›ts
);

7761 
	`C›yTag
(
TIFFTAG_GROUP4OPTIONS
, 1, 
TIFF_LONG
);

7762 
	`C›yTag
(
TIFFTAG_BADFAXLINES
, 1, 
TIFF_LONG
);

7763 
	`C›yTag
(
TIFFTAG_CLEANFAXDATA
, 1, 
TIFF_LONG
);

7764 
	`C›yTag
(
TIFFTAG_CONSECUTIVEBADFAXLINES
, 1, 
TIFF_LONG
);

7765 
	`C›yTag
(
TIFFTAG_FAXRECVPARAMS
, 1, 
TIFF_LONG
);

7766 
	`C›yTag
(
TIFFTAG_FAXRECVTIME
, 1, 
TIFF_LONG
);

7767 
	`C›yTag
(
TIFFTAG_FAXSUBADDRESS
, 1, 
TIFF_ASCII
);

7769 
COMPRESSION_NONE
:

7773 { 
uöt32
 
Àn32
;

7774 ** 
d©a
;

7775 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_ICCPROFILE
, &
Àn32
, &
d©a
))

7776 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ICCPROFILE
, 
Àn32
, 
d©a
);

7778 { 
uöt16
 
nöks
;

7779 c⁄° * 
ök«mes
;

7780 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_NUMBEROFINKS
, &
nöks
)) {

7781 
	`TIFFSëFõld
(
out
, 
TIFFTAG_NUMBEROFINKS
, 
nöks
);

7782 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_INKNAMES
, &
ök«mes
)) {

7783 
ök«me¶í
 = 
	`°æí
(
ök«mes
) + 1;

7784 c⁄° * 
˝
 = 
ök«mes
;

7785 
nöks
 > 1) {

7786 
˝
 = 
	`°rchr
(cp, '\0');

7787 i‡(
˝
) {

7788 
˝
++;

7789 
ök«me¶í
 +(
	`°æí
(
˝
) + 1);

7791 
nöks
--;

7793 
	`TIFFSëFõld
(
out
, 
TIFFTAG_INKNAMES
, 
ök«me¶í
, 
ök«mes
);

7798 
pg0
, 
pg1
;

7799 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PAGENUMBER
, &
pg0
, &
pg1
)) {

7800 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PAGENUMBER
, 
∑gíum
, 
tŸÆ_∑ges
);

7804 
p
 = 
ègs
;Ö < &ègs[
NTAGS
];Ö++)

7805 
	`C›yTag
(
p
->
èg
,Ö->
cou¡
,Ö->
ty≥
);

7808 i‡(
ouâûed
)

7810 i‡(
c⁄fig
 =
PLANARCONFIG_CONTIG
)

7812 i‡(
	`wrôeBuf„rToC⁄tigTûes
 (
out
, 
¸›_buff
, 
Àngth
, 
width
, 
•p
, 
dump
))

7813 
	`TIFFEº‹
("","U«bÀÅÿwrôêc⁄tiguou†tûêd©®f‹Öagê%d", 
∑gíum
);

7817 i‡(
	`wrôeBuf„rToSï¨©eTûes
 (
out
, 
¸›_buff
, 
Àngth
, 
width
, 
•p
, 
dump
))

7818 
	`TIFFEº‹
("","U«bÀÅÿwrôê£∑øãÅûêd©®f‹Öagê%d", 
∑gíum
);

7823 i‡(
c⁄fig
 =
PLANARCONFIG_CONTIG
)

7825 i‡(
	`wrôeBuf„rToC⁄tigSåùs
 (
out
, 
¸›_buff
, 
Àngth
))

7826 
	`TIFFEº‹
("","U«bÀÅÿwrôêc⁄tiguou†°rù d©®f‹Öagê%d", 
∑gíum
);

7830 i‡(
	`wrôeBuf„rToSï¨©eSåùs
(
out
, 
¸›_buff
, 
Àngth
, 
width
, 
•p
, 
dump
))

7831 
	`TIFFEº‹
("","U«bÀÅÿwrôê£∑øã såù d©®f‹Öagê%d", 
∑gíum
);

7835 i‡(!
	`TIFFWrôeDúe˘‹y
(
out
))

7837 
	`TIFFEº‹
("","FaûedÅÿwrôêIFD f‹Öagênumbî %d", 
∑gíum
);

7838 
	`TIFFClo£
(
out
);

7843 
	}
}

7846 
	$rŸ©eC⁄tigSam∂es8bôs
(
uöt16
 
rŸ©i⁄
, uöt16 
•p
, uöt16 
bps
, 
uöt32
 
width
,

7847 
uöt32
 
Àngth
, uöt32 
cﬁ
, 
uöt8
 *
§c
, uöt8 *
d°
)

7849 
ªady_bôs
 = 0;

7850 
uöt32
 
§c_byã
 = 0, 
§c_bô
 = 0;

7851 
uöt32
 
row
, 
rowsize
 = 0, 
bô_off£t
 = 0;

7852 
uöt8
 
m©chbôs
 = 0, 
maskbôs
 = 0;

7853 
uöt8
 
buff1
 = 0, 
buff2
 = 0;

7854 
uöt8
 *
√xt
;

7855 
tßm∂e_t
 
ßm∂e
;

7857 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

7859 
	`TIFFEº‹
("rotateContigSamples8bits","Invalid src or destination buffer");

7863 
rowsize
 = ((
bps
 * 
•p
 * 
width
) + 7) / 8;

7864 
ªady_bôs
 = 0;

7865 
maskbôs
 = (
uöt8
)-1 >> ( 8 - 
bps
);

7866 
buff1
 = 
buff2
 = 0;

7868 
row
 = 0;Ñow < 
Àngth
 ;Ñow++)

7870 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

7871 
ßm∂e
 = 0; sam∂ê< 
•p
; sample++)

7873 i‡(
ßm∂e
 == 0)

7875 
§c_byã
 = 
bô_off£t
 / 8;

7876 
§c_bô
 = 
bô_off£t
 % 8;

7880 
§c_byã
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) / 8;

7881 
§c_bô
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) % 8;

7884 
rŸ©i⁄
)

7886 90: 
√xt
 = 
§c
 + 
§c_byã
 - (
row
 * 
rowsize
);

7888 270: 
√xt
 = 
§c
 + 
§c_byã
 + (
row
 * 
rowsize
);

7890 : 
	`TIFFEº‹
("rŸ©eC⁄tigSam∂es8bôs", "InvÆidÑŸ©i⁄ %d", 
rŸ©i⁄
);

7893 
m©chbôs
 = 
maskbôs
 << (8 - 
§c_bô
 - 
bps
);

7894 
buff1
 = ((*
√xt
Ë& 
m©chbôs
Ë<< (
§c_bô
);

7897 i‡(
ªady_bôs
 >= 8)

7899 *
d°
++ = 
buff2
;

7900 
buff2
 = 
buff1
;

7901 
ªady_bôs
 -= 8;

7905 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

7907 
ªady_bôs
 +
bps
;

7911 i‡(
ªady_bôs
 > 0)

7913 
buff1
 = (
buff2
 & (()255 << (8 - 
ªady_bôs
)));

7914 *
d°
++ = 
buff1
;

7918 
	}
}

7922 
	$rŸ©eC⁄tigSam∂es16bôs
(
uöt16
 
rŸ©i⁄
, uöt16 
•p
, uöt16 
bps
, 
uöt32
 
width
,

7923 
uöt32
 
Àngth
, uöt32 
cﬁ
, 
uöt8
 *
§c
, uöt8 *
d°
)

7925 
ªady_bôs
 = 0;

7926 
uöt32
 
row
, 
rowsize
, 
bô_off£t
;

7927 
uöt32
 
§c_byã
 = 0, 
§c_bô
 = 0;

7928 
uöt16
 
m©chbôs
 = 0, 
maskbôs
 = 0;

7929 
uöt16
 
buff1
 = 0, 
buff2
 = 0;

7930 
uöt8
 
byãbuff
 = 0;

7931 
uöt8
 *
√xt
;

7932 
tßm∂e_t
 
ßm∂e
;

7934 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

7936 
	`TIFFEº‹
("rotateContigSamples16bits","Invalid src or destination buffer");

7940 
rowsize
 = ((
bps
 * 
•p
 * 
width
) + 7) / 8;

7941 
ªady_bôs
 = 0;

7942 
maskbôs
 = (
uöt16
)-1 >> (16 - 
bps
);

7943 
buff1
 = 
buff2
 = 0;

7944 
row
 = 0;Ñow < 
Àngth
;Ñow++)

7946 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

7947 
ßm∂e
 = 0; sam∂ê< 
•p
; sample++)

7949 i‡(
ßm∂e
 == 0)

7951 
§c_byã
 = 
bô_off£t
 / 8;

7952 
§c_bô
 = 
bô_off£t
 % 8;

7956 
§c_byã
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) / 8;

7957 
§c_bô
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) % 8;

7960 
rŸ©i⁄
)

7962 90: 
√xt
 = 
§c
 + 
§c_byã
 - (
row
 * 
rowsize
);

7964 270: 
√xt
 = 
§c
 + 
§c_byã
 + (
row
 * 
rowsize
);

7966 : 
	`TIFFEº‹
("rŸ©eC⁄tigSam∂es8bôs", "InvÆidÑŸ©i⁄ %d", 
rŸ©i⁄
);

7969 
m©chbôs
 = 
maskbôs
 << (16 - 
§c_bô
 - 
bps
);

7970 i‡(
lôée_ídün
)

7971 
buff1
 = (
√xt
[0] << 8) |Çext[1];

7973 
buff1
 = (
√xt
[1] << 8) |Çext[0];

7975 
buff1
 = (buff1 & 
m©chbôs
Ë<< (
§c_bô
);

7978 i‡(
ªady_bôs
 >= 8)

7980 
byãbuff
 = (
buff2
 >> 8);

7981 *
d°
++ = 
byãbuff
;

7982 
ªady_bôs
 -= 8;

7984 
buff2
 = ((buff2 << 8Ë| (
buff1
 >> 
ªady_bôs
));

7988 
byãbuff
 = 0;

7989 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

7991 
ªady_bôs
 +
bps
;

7995 i‡(
ªady_bôs
 > 0)

7997 
byãbuff
 = (
buff2
 >> 8);

7998 *
d°
++ = 
byãbuff
;

8002 
	}
}

8005 
	$rŸ©eC⁄tigSam∂es24bôs
(
uöt16
 
rŸ©i⁄
, uöt16 
•p
, uöt16 
bps
, 
uöt32
 
width
,

8006 
uöt32
 
Àngth
, uöt32 
cﬁ
, 
uöt8
 *
§c
, uöt8 *
d°
)

8008 
ªady_bôs
 = 0;

8009 
uöt32
 
row
, 
rowsize
, 
bô_off£t
;

8010 
uöt32
 
§c_byã
 = 0, 
§c_bô
 = 0;

8011 
uöt32
 
m©chbôs
 = 0, 
maskbôs
 = 0;

8012 
uöt32
 
buff1
 = 0, 
buff2
 = 0;

8013 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0;

8014 
uöt8
 *
√xt
;

8015 
tßm∂e_t
 
ßm∂e
;

8018 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

8020 
	`TIFFEº‹
("rotateContigSamples24bits","Invalid src or destination buffer");

8024 
rowsize
 = ((
bps
 * 
•p
 * 
width
) + 7) / 8;

8025 
ªady_bôs
 = 0;

8026 
maskbôs
 = (
uöt32
)-1 >> (32 - 
bps
);

8027 
buff1
 = 
buff2
 = 0;

8028 
row
 = 0;Ñow < 
Àngth
;Ñow++)

8030 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

8031 
ßm∂e
 = 0; sam∂ê< 
•p
; sample++)

8033 i‡(
ßm∂e
 == 0)

8035 
§c_byã
 = 
bô_off£t
 / 8;

8036 
§c_bô
 = 
bô_off£t
 % 8;

8040 
§c_byã
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) / 8;

8041 
§c_bô
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) % 8;

8044 
rŸ©i⁄
)

8046 90: 
√xt
 = 
§c
 + 
§c_byã
 - (
row
 * 
rowsize
);

8048 270: 
√xt
 = 
§c
 + 
§c_byã
 + (
row
 * 
rowsize
);

8050 : 
	`TIFFEº‹
("rŸ©eC⁄tigSam∂es8bôs", "InvÆidÑŸ©i⁄ %d", 
rŸ©i⁄
);

8053 
m©chbôs
 = 
maskbôs
 << (32 - 
§c_bô
 - 
bps
);

8054 i‡(
lôée_ídün
)

8055 
buff1
 = (
√xt
[0] << 24) | (next[1] << 16) | (next[2] << 8) |Çext[3];

8057 
buff1
 = (
√xt
[3] << 24) | (next[2] << 16) | (next[1] << 8) |Çext[0];

8058 
buff1
 = (buff1 & 
m©chbôs
Ë<< (
§c_bô
);

8061 i‡(
ªady_bôs
 >= 16)

8063 
byãbuff1
 = (
buff2
 >> 24);

8064 *
d°
++ = 
byãbuff1
;

8065 
byãbuff2
 = (
buff2
 >> 16);

8066 *
d°
++ = 
byãbuff2
;

8067 
ªady_bôs
 -= 16;

8070 
buff2
 = ((buff2 << 16Ë| (
buff1
 >> 
ªady_bôs
));

8074 
byãbuff1
 = 
byãbuff2
 = 0;

8075 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

8077 
ªady_bôs
 +
bps
;

8082 
ªady_bôs
 > 0)

8084 
byãbuff1
 = (
buff2
 >> 24);

8085 *
d°
++ = 
byãbuff1
;

8087 
buff2
 = (buff2 << 8);

8088 
byãbuff2
 = 
byãbuff1
;

8089 
ªady_bôs
 -= 8;

8093 
	}
}

8096 
	$rŸ©eC⁄tigSam∂es32bôs
(
uöt16
 
rŸ©i⁄
, uöt16 
•p
, uöt16 
bps
, 
uöt32
 
width
,

8097 
uöt32
 
Àngth
, uöt32 
cﬁ
, 
uöt8
 *
§c
, uöt8 *
d°
)

8099 
ªady_bôs
 = 0, 
shi·_width
 = 0;

8100 
byãs_≥r_ßm∂e
, 
byãs_≥r_pixñ
;

8101 
uöt32
 
row
, 
rowsize
, 
bô_off£t
;

8102 
uöt32
 
§c_byã
, 
§c_bô
;

8103 
uöt32
 
l⁄gbuff1
 = 0, 
l⁄gbuff2
 = 0;

8104 
uöt64
 
maskbôs
 = 0, 
m©chbôs
 = 0;

8105 
uöt64
 
buff1
 = 0, 
buff2
 = 0, 
buff3
 = 0;

8106 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0, 
byãbuff3
 = 0, 
byãbuff4
 = 0;

8107 
uöt8
 *
√xt
;

8108 
tßm∂e_t
 
ßm∂e
;

8111 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

8113 
	`TIFFEº‹
("rotateContigSamples24bits","Invalid src or destination buffer");

8117 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

8118 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

8119 i‡(
byãs_≥r_pixñ
 < (
byãs_≥r_ßm∂e
 + 1))

8120 
shi·_width
 = 
byãs_≥r_pixñ
;

8122 
shi·_width
 = 
byãs_≥r_ßm∂e
 + 1;

8124 
rowsize
 = ((
bps
 * 
•p
 * 
width
) + 7) / 8;

8125 
ªady_bôs
 = 0;

8126 
maskbôs
 = (
uöt64
)-1 >> (64 - 
bps
);

8127 
buff1
 = 
buff2
 = 0;

8128 
row
 = 0;Ñow < 
Àngth
;Ñow++)

8130 
bô_off£t
 = 
cﬁ
 * 
bps
 * 
•p
;

8131 
ßm∂e
 = 0; sam∂ê< 
•p
; sample++)

8133 i‡(
ßm∂e
 == 0)

8135 
§c_byã
 = 
bô_off£t
 / 8;

8136 
§c_bô
 = 
bô_off£t
 % 8;

8140 
§c_byã
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) / 8;

8141 
§c_bô
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) % 8;

8144 
rŸ©i⁄
)

8146 90: 
√xt
 = 
§c
 + 
§c_byã
 - (
row
 * 
rowsize
);

8148 270: 
√xt
 = 
§c
 + 
§c_byã
 + (
row
 * 
rowsize
);

8150 : 
	`TIFFEº‹
("rŸ©eC⁄tigSam∂es8bôs", "InvÆidÑŸ©i⁄ %d", 
rŸ©i⁄
);

8153 
m©chbôs
 = 
maskbôs
 << (64 - 
§c_bô
 - 
bps
);

8154 i‡(
lôée_ídün
)

8156 
l⁄gbuff1
 = (
√xt
[0] << 24) | (next[1] << 16) | (next[2] << 8) |Çext[3];

8157 
l⁄gbuff2
 = 
l⁄gbuff1
;

8161 
l⁄gbuff1
 = (
√xt
[3] << 24) | (next[2] << 16) | (next[1] << 8) |Çext[0];

8162 
l⁄gbuff2
 = 
l⁄gbuff1
;

8165 
buff3
 = ((
uöt64
)
l⁄gbuff1
 << 32Ë| 
l⁄gbuff2
;

8166 
buff1
 = (
buff3
 & 
m©chbôs
Ë<< (
§c_bô
);

8168 i‡(
ªady_bôs
 < 32)

8170 
byãbuff1
 = 
byãbuff2
 = 
byãbuff3
 = 
byãbuff4
 = 0;

8171 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

8175 
byãbuff1
 = (
buff2
 >> 56);

8176 *
d°
++ = 
byãbuff1
;

8177 
byãbuff2
 = (
buff2
 >> 48);

8178 *
d°
++ = 
byãbuff2
;

8179 
byãbuff3
 = (
buff2
 >> 40);

8180 *
d°
++ = 
byãbuff3
;

8181 
byãbuff4
 = (
buff2
 >> 32);

8182 *
d°
++ = 
byãbuff4
;

8183 
ªady_bôs
 -= 32;

8186 
buff2
 = ((buff2 << 32Ë| (
buff1
 >> 
ªady_bôs
));

8188 
ªady_bôs
 +
bps
;

8191 
ªady_bôs
 > 0)

8193 
byãbuff1
 = (
buff2
 >> 56);

8194 *
d°
++ = 
byãbuff1
;

8195 
buff2
 = (buff2 << 8);

8196 
ªady_bôs
 -= 8;

8200 
	}
}

8205 
	$rŸ©eImage
(
uöt16
 
rŸ©i⁄
, 
image_d©a
 *
image
, 
uöt32
 *
img_width
,

8206 
uöt32
 *
img_Àngth
, **
ibuff_±r
)

8208 
shi·_width
;

8209 
uöt32
 
byãs_≥r_pixñ
, 
byãs_≥r_ßm∂e
;

8210 
uöt32
 
row
, 
rowsize
, 
§c_off£t
, 
d°_off£t
;

8211 
uöt32
 
i
, 
cﬁ
, 
width
, 
Àngth
;

8212 
uöt32
 
cﬁsize
, 
buffsize
, 
cﬁ_off£t
, 
pix_off£t
;

8213 *
ibuff
;

8214 *
§c
;

8215 *
d°
;

8216 
uöt16
 
•p
, 
bps
;

8217 
ªs_ãmp
;

8218 *
rbuff
 = 
NULL
;

8220 
width
 = *
img_width
;

8221 
Àngth
 = *
img_Àngth
;

8222 
•p
 = 
image
->spp;

8223 
bps
 = 
image
->bps;

8225 
rowsize
 = ((
bps
 * 
•p
 * 
width
) + 7) / 8;

8226 
cﬁsize
 = ((
bps
 * 
•p
 * 
Àngth
) + 7) / 8;

8227 i‡((
cﬁsize
 * 
width
Ë> (
rowsize
 * 
Àngth
))

8228 
buffsize
 = (
cﬁsize
 + 1Ë* 
width
;

8230 
buffsize
 = (
rowsize
 + 1Ë* 
Àngth
;

8232 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

8233 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

8234 i‡(
byãs_≥r_pixñ
 < (
byãs_≥r_ßm∂e
 + 1))

8235 
shi·_width
 = 
byãs_≥r_pixñ
;

8237 
shi·_width
 = 
byãs_≥r_ßm∂e
 + 1;

8239 
rŸ©i⁄
)

8246 : 
	`TIFFEº‹
("rŸ©eImage", "InvÆidÑŸ©i⁄ángÀ %d", 
rŸ©i⁄
);

8250 i‡(!(
rbuff
 = (*)
	`_TIFFmÆloc
(
buffsize
)))

8252 
	`TIFFEº‹
("rŸ©eImage", "U«bÀÅÿÆloˇãÑŸ©i⁄ buf„∏o‡%1u byãs", 
buffsize
);

8255 
	`_TIFFmem£t
(
rbuff
, '\0', 
buffsize
);

8257 
ibuff
 = *
ibuff_±r
;

8258 
rŸ©i⁄
)

8260 180: i‡((
bps
 % 8) == 0)

8262 
§c
 = 
ibuff
;

8263 
pix_off£t
 = (
•p
 * 
bps
) / 8;

8264 
row
 = 0;Ñow < 
Àngth
;Ñow++)

8266 
d°_off£t
 = (
Àngth
 - 
row
 - 1Ë* 
rowsize
;

8267 
cﬁ
 = 0; cﬁ < 
width
; col++)

8269 
cﬁ_off£t
 = (
width
 - 
cﬁ
 - 1Ë* 
pix_off£t
;

8270 
d°
 = 
rbuff
 + 
d°_off£t
 + 
cﬁ_off£t
;

8272 
i
 = 0; i < 
byãs_≥r_pixñ
; i++)

8273 *
d°
++ = *
§c
++;

8279 
row
 = 0;Ñow < 
Àngth
;Ñow++)

8281 
§c_off£t
 = 
row
 * 
rowsize
;

8282 
d°_off£t
 = (
Àngth
 - 
row
 - 1Ë* 
rowsize
;

8283 
§c
 = 
ibuff
 + 
§c_off£t
;

8284 
d°
 = 
rbuff
 + 
d°_off£t
;

8285 
shi·_width
)

8287 1: i‡(
bps
 == 1)

8289 i‡(
	`ªvî£Sam∂es8bôs
(
•p
, 
bps
, 
width
, 
§c
, 
d°
))

8291 
	`_TIFF‰ì
(
rbuff
);

8296 i‡(
	`ªvî£Sam∂es16bôs
(
•p
, 
bps
, 
width
, 
§c
, 
d°
))

8298 
	`_TIFF‰ì
(
rbuff
);

8302 2: i‡(
	`ªvî£Sam∂es24bôs
(
•p
, 
bps
, 
width
, 
§c
, 
d°
))

8304 
	`_TIFF‰ì
(
rbuff
);

8310 5: i‡(
	`ªvî£Sam∂es32bôs
(
•p
, 
bps
, 
width
, 
§c
, 
d°
))

8312 
	`_TIFF‰ì
(
rbuff
);

8316 : 
	`TIFFEº‹
("rŸ©eImage","Unsuµ‹ãd bô dïth %d", 
bps
);

8317 
	`_TIFF‰ì
(
rbuff
);

8322 
	`_TIFF‰ì
(
ibuff
);

8323 *(
ibuff_±r
Ë
rbuff
;

8326 90: i‡((
bps
 % 8) == 0)

8328 
cﬁ
 = 0; cﬁ < 
width
; col++)

8330 
§c_off£t
 = ((
Àngth
 - 1Ë* 
rowsize
Ë+ (
cﬁ
 * 
byãs_≥r_pixñ
);

8331 
d°_off£t
 = 
cﬁ
 * 
cﬁsize
;

8332 
§c
 = 
ibuff
 + 
§c_off£t
;

8333 
d°
 = 
rbuff
 + 
d°_off£t
;

8334 
row
 = 
Àngth
;Ñow > 0;Ñow--)

8336 
i
 = 0; i < 
byãs_≥r_pixñ
; i++)

8337 *
d°
++ = *(
§c
 + 
i
);

8338 
§c
 -
rowsize
;

8344 
cﬁ
 = 0; cﬁ < 
width
; col++)

8346 
§c_off£t
 = (
Àngth
 - 1Ë* 
rowsize
;

8347 
d°_off£t
 = 
cﬁ
 * 
cﬁsize
;

8348 
§c
 = 
ibuff
 + 
§c_off£t
;

8349 
d°
 = 
rbuff
 + 
d°_off£t
;

8350 
shi·_width
)

8352 1: i‡(
bps
 == 1)

8354 i‡(
	`rŸ©eC⁄tigSam∂es8bôs
(
rŸ©i⁄
, 
•p
, 
bps
, 
width
,

8355 
Àngth
, 
cﬁ
, 
§c
, 
d°
))

8357 
	`_TIFF‰ì
(
rbuff
);

8362 i‡(
	`rŸ©eC⁄tigSam∂es16bôs
(
rŸ©i⁄
, 
•p
, 
bps
, 
width
,

8363 
Àngth
, 
cﬁ
, 
§c
, 
d°
))

8365 
	`_TIFF‰ì
(
rbuff
);

8369 2: i‡(
	`rŸ©eC⁄tigSam∂es24bôs
(
rŸ©i⁄
, 
•p
, 
bps
, 
width
,

8370 
Àngth
, 
cﬁ
, 
§c
, 
d°
))

8372 
	`_TIFF‰ì
(
rbuff
);

8378 5: i‡(
	`rŸ©eC⁄tigSam∂es32bôs
(
rŸ©i⁄
, 
•p
, 
bps
, 
width
,

8379 
Àngth
, 
cﬁ
, 
§c
, 
d°
))

8381 
	`_TIFF‰ì
(
rbuff
);

8385 : 
	`TIFFEº‹
("rŸ©eImage","Unsuµ‹ãd bô dïth %d", 
bps
);

8386 
	`_TIFF‰ì
(
rbuff
);

8391 
	`_TIFF‰ì
(
ibuff
);

8392 *(
ibuff_±r
Ë
rbuff
;

8394 *
img_width
 = 
Àngth
;

8395 *
img_Àngth
 = 
width
;

8396 
image
->
width
 = 
Àngth
;

8397 
image
->
Àngth
 = 
width
;

8398 
ªs_ãmp
 = 
image
->
xªs
;

8399 
image
->
xªs
 = image->
yªs
;

8400 
image
->
yªs
 = 
ªs_ãmp
;

8403 270: i‡((
bps
 % 8) == 0)

8405 
cﬁ
 = 0; cﬁ < 
width
; col++)

8407 
§c_off£t
 = 
cﬁ
 * 
byãs_≥r_pixñ
;

8408 
d°_off£t
 = (
width
 - 
cﬁ
 - 1Ë* 
cﬁsize
;

8409 
§c
 = 
ibuff
 + 
§c_off£t
;

8410 
d°
 = 
rbuff
 + 
d°_off£t
;

8411 
row
 = 
Àngth
;Ñow > 0;Ñow--)

8413 
i
 = 0; i < 
byãs_≥r_pixñ
; i++)

8414 *
d°
++ = *(
§c
 + 
i
);

8415 
§c
 +
rowsize
;

8421 
cﬁ
 = 0; cﬁ < 
width
; col++)

8423 
§c_off£t
 = 0;

8424 
d°_off£t
 = (
width
 - 
cﬁ
 - 1Ë* 
cﬁsize
;

8425 
§c
 = 
ibuff
 + 
§c_off£t
;

8426 
d°
 = 
rbuff
 + 
d°_off£t
;

8427 
shi·_width
)

8429 1: i‡(
bps
 == 1)

8431 i‡(
	`rŸ©eC⁄tigSam∂es8bôs
(
rŸ©i⁄
, 
•p
, 
bps
, 
width
,

8432 
Àngth
, 
cﬁ
, 
§c
, 
d°
))

8434 
	`_TIFF‰ì
(
rbuff
);

8439 i‡(
	`rŸ©eC⁄tigSam∂es16bôs
(
rŸ©i⁄
, 
•p
, 
bps
, 
width
,

8440 
Àngth
, 
cﬁ
, 
§c
, 
d°
))

8442 
	`_TIFF‰ì
(
rbuff
);

8446 2: i‡(
	`rŸ©eC⁄tigSam∂es24bôs
(
rŸ©i⁄
, 
•p
, 
bps
, 
width
,

8447 
Àngth
, 
cﬁ
, 
§c
, 
d°
))

8449 
	`_TIFF‰ì
(
rbuff
);

8455 5: i‡(
	`rŸ©eC⁄tigSam∂es32bôs
(
rŸ©i⁄
, 
•p
, 
bps
, 
width
,

8456 
Àngth
, 
cﬁ
, 
§c
, 
d°
))

8458 
	`_TIFF‰ì
(
rbuff
);

8462 : 
	`TIFFEº‹
("rŸ©eImage","Unsuµ‹ãd bô dïth %d", 
bps
);

8463 
	`_TIFF‰ì
(
rbuff
);

8468 
	`_TIFF‰ì
(
ibuff
);

8469 *(
ibuff_±r
Ë
rbuff
;

8471 *
img_width
 = 
Àngth
;

8472 *
img_Àngth
 = 
width
;

8473 
image
->
width
 = 
Àngth
;

8474 
image
->
Àngth
 = 
width
;

8475 
ªs_ãmp
 = 
image
->
xªs
;

8476 
image
->
xªs
 = image->
yªs
;

8477 
image
->
yªs
 = 
ªs_ãmp
;

8484 
	}
}

8487 
	$ªvî£Sam∂es8bôs
 (
uöt16
 
•p
, uöt16 
bps
, 
uöt32
 
width
,

8488 
uöt8
 *
ibuff
, uöt8 *
obuff
)

8490 
ªady_bôs
 = 0;

8491 
uöt32
 
cﬁ
;

8492 
uöt32
 
§c_byã
, 
§c_bô
;

8493 
uöt32
 
bô_off£t
 = 0;

8494 
uöt8
 
m©ch_bôs
 = 0, 
mask_bôs
 = 0;

8495 
uöt8
 
buff1
 = 0, 
buff2
 = 0;

8496 *
§c
;

8497 *
d°
;

8498 
tßm∂e_t
 
ßm∂e
;

8500 i‡((
ibuff
 =
NULL
Ë|| (
obuff
 == NULL))

8502 
	`TIFFEº‹
("reverseSamples8bits","Invalid image or work buffer");

8506 
ªady_bôs
 = 0;

8507 
mask_bôs
 = (
uöt8
)-1 >> ( 8 - 
bps
);

8508 
d°
 = 
obuff
;

8509 
cﬁ
 = 
width
; col > 0; col--)

8512 
bô_off£t
 = (
cﬁ
 - 1Ë* 
bps
 * 
•p
;

8513 
ßm∂e
 = 0; sam∂ê< 
•p
; sample++)

8515 i‡(
ßm∂e
 == 0)

8517 
§c_byã
 = 
bô_off£t
 / 8;

8518 
§c_bô
 = 
bô_off£t
 % 8;

8522 
§c_byã
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) / 8;

8523 
§c_bô
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) % 8;

8526 
§c
 = 
ibuff
 + 
§c_byã
;

8527 
m©ch_bôs
 = 
mask_bôs
 << (8 - 
§c_bô
 - 
bps
);

8528 
buff1
 = ((*
§c
Ë& 
m©ch_bôs
Ë<< (
§c_bô
);

8530 i‡(
ªady_bôs
 < 8)

8531 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

8534 *
d°
++ = 
buff2
;

8535 
buff2
 = 
buff1
;

8536 
ªady_bôs
 -= 8;

8538 
ªady_bôs
 +
bps
;

8541 i‡(
ªady_bôs
 > 0)

8543 
buff1
 = (
buff2
 & (()255 << (8 - 
ªady_bôs
)));

8544 *
d°
++ = 
buff1
;

8548 
	}
}

8552 
	$ªvî£Sam∂es16bôs
 (
uöt16
 
•p
, uöt16 
bps
, 
uöt32
 
width
,

8553 
uöt8
 *
ibuff
, uöt8 *
obuff
)

8555 
ªady_bôs
 = 0;

8556 
uöt32
 
cﬁ
;

8557 
uöt32
 
§c_byã
 = 0, 
high_bô
 = 0;

8558 
uöt32
 
bô_off£t
 = 0;

8559 
uöt16
 
m©ch_bôs
 = 0, 
mask_bôs
 = 0;

8560 
uöt16
 
buff1
 = 0, 
buff2
 = 0;

8561 
uöt8
 
byãbuff
 = 0;

8562 *
§c
;

8563 *
d°
;

8564 
tßm∂e_t
 
ßm∂e
;

8566 i‡((
ibuff
 =
NULL
Ë|| (
obuff
 == NULL))

8568 
	`TIFFEº‹
("reverseSample16bits","Invalid image or work buffer");

8572 
ªady_bôs
 = 0;

8573 
mask_bôs
 = (
uöt16
)-1 >> (16 - 
bps
);

8574 
d°
 = 
obuff
;

8575 
cﬁ
 = 
width
; col > 0; col--)

8578 
bô_off£t
 = (
cﬁ
 - 1Ë* 
bps
 * 
•p
;

8579 
ßm∂e
 = 0; sam∂ê< 
•p
; sample++)

8581 i‡(
ßm∂e
 == 0)

8583 
§c_byã
 = 
bô_off£t
 / 8;

8584 
high_bô
 = 
bô_off£t
 % 8;

8588 
§c_byã
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) / 8;

8589 
high_bô
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) % 8;

8592 
§c
 = 
ibuff
 + 
§c_byã
;

8593 
m©ch_bôs
 = 
mask_bôs
 << (16 - 
high_bô
 - 
bps
);

8594 i‡(
lôée_ídün
)

8595 
buff1
 = (
§c
[0] << 8) | src[1];

8597 
buff1
 = (
§c
[1] << 8) | src[0];

8598 
buff1
 = (buff1 & 
m©ch_bôs
Ë<< (
high_bô
);

8600 i‡(
ªady_bôs
 < 8)

8602 
byãbuff
 = 0;

8603 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

8607 
byãbuff
 = (
buff2
 >> 8);

8608 *
d°
++ = 
byãbuff
;

8609 
ªady_bôs
 -= 8;

8611 
buff2
 = ((buff2 << 8Ë| (
buff1
 >> 
ªady_bôs
));

8613 
ªady_bôs
 +
bps
;

8617 i‡(
ªady_bôs
 > 0)

8619 
byãbuff
 = (
buff2
 >> 8);

8620 *
d°
++ = 
byãbuff
;

8624 
	}
}

8627 
	$ªvî£Sam∂es24bôs
 (
uöt16
 
•p
, uöt16 
bps
, 
uöt32
 
width
,

8628 
uöt8
 *
ibuff
, uöt8 *
obuff
)

8630 
ªady_bôs
 = 0;

8631 
uöt32
 
cﬁ
;

8632 
uöt32
 
§c_byã
 = 0, 
high_bô
 = 0;

8633 
uöt32
 
bô_off£t
 = 0;

8634 
uöt32
 
m©ch_bôs
 = 0, 
mask_bôs
 = 0;

8635 
uöt32
 
buff1
 = 0, 
buff2
 = 0;

8636 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0;

8637 *
§c
;

8638 *
d°
;

8639 
tßm∂e_t
 
ßm∂e
;

8641 i‡((
ibuff
 =
NULL
Ë|| (
obuff
 == NULL))

8643 
	`TIFFEº‹
("reverseSamples24bits","Invalid image or work buffer");

8647 
ªady_bôs
 = 0;

8648 
mask_bôs
 = (
uöt32
)-1 >> (32 - 
bps
);

8649 
d°
 = 
obuff
;

8650 
cﬁ
 = 
width
; col > 0; col--)

8653 
bô_off£t
 = (
cﬁ
 - 1Ë* 
bps
 * 
•p
;

8654 
ßm∂e
 = 0; sam∂ê< 
•p
; sample++)

8656 i‡(
ßm∂e
 == 0)

8658 
§c_byã
 = 
bô_off£t
 / 8;

8659 
high_bô
 = 
bô_off£t
 % 8;

8663 
§c_byã
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) / 8;

8664 
high_bô
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) % 8;

8667 
§c
 = 
ibuff
 + 
§c_byã
;

8668 
m©ch_bôs
 = 
mask_bôs
 << (32 - 
high_bô
 - 
bps
);

8669 i‡(
lôée_ídün
)

8670 
buff1
 = (
§c
[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];

8672 
buff1
 = (
§c
[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];

8673 
buff1
 = (buff1 & 
m©ch_bôs
Ë<< (
high_bô
);

8675 i‡(
ªady_bôs
 < 16)

8677 
byãbuff1
 = 
byãbuff2
 = 0;

8678 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

8682 
byãbuff1
 = (
buff2
 >> 24);

8683 *
d°
++ = 
byãbuff1
;

8684 
byãbuff2
 = (
buff2
 >> 16);

8685 *
d°
++ = 
byãbuff2
;

8686 
ªady_bôs
 -= 16;

8689 
buff2
 = ((buff2 << 16Ë| (
buff1
 >> 
ªady_bôs
));

8691 
ªady_bôs
 +
bps
;

8696 
ªady_bôs
 > 0)

8698 
byãbuff1
 = (
buff2
 >> 24);

8699 *
d°
++ = 
byãbuff1
;

8701 
buff2
 = (buff2 << 8);

8702 
byãbuff2
 = 
byãbuff1
;

8703 
ªady_bôs
 -= 8;

8707 
	}
}

8711 
	$ªvî£Sam∂es32bôs
 (
uöt16
 
•p
, uöt16 
bps
, 
uöt32
 
width
,

8712 
uöt8
 *
ibuff
, uöt8 *
obuff
)

8714 
ªady_bôs
 = 0, 
shi·_width
 = 0;

8715 
byãs_≥r_ßm∂e
, 
byãs_≥r_pixñ
;

8716 
uöt32
 
bô_off£t
;

8717 
uöt32
 
§c_byã
 = 0, 
high_bô
 = 0;

8718 
uöt32
 
cﬁ
;

8719 
uöt32
 
l⁄gbuff1
 = 0, 
l⁄gbuff2
 = 0;

8720 
uöt64
 
mask_bôs
 = 0, 
m©ch_bôs
 = 0;

8721 
uöt64
 
buff1
 = 0, 
buff2
 = 0, 
buff3
 = 0;

8722 
uöt8
 
byãbuff1
 = 0, 
byãbuff2
 = 0, 
byãbuff3
 = 0, 
byãbuff4
 = 0;

8723 *
§c
;

8724 *
d°
;

8725 
tßm∂e_t
 
ßm∂e
;

8727 i‡((
ibuff
 =
NULL
Ë|| (
obuff
 == NULL))

8729 
	`TIFFEº‹
("reverseSamples32bits","Invalid image or work buffer");

8733 
ªady_bôs
 = 0;

8734 
mask_bôs
 = (
uöt64
)-1 >> (64 - 
bps
);

8735 
d°
 = 
obuff
;

8737 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

8738 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

8739 i‡(
byãs_≥r_pixñ
 < (
byãs_≥r_ßm∂e
 + 1))

8740 
shi·_width
 = 
byãs_≥r_pixñ
;

8742 
shi·_width
 = 
byãs_≥r_ßm∂e
 + 1;

8744 
cﬁ
 = 
width
; col > 0; col--)

8747 
bô_off£t
 = (
cﬁ
 - 1Ë* 
bps
 * 
•p
;

8748 
ßm∂e
 = 0; sam∂ê< 
•p
; sample++)

8750 i‡(
ßm∂e
 == 0)

8752 
§c_byã
 = 
bô_off£t
 / 8;

8753 
high_bô
 = 
bô_off£t
 % 8;

8757 
§c_byã
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) / 8;

8758 
high_bô
 = (
bô_off£t
 + (
ßm∂e
 * 
bps
)) % 8;

8761 
§c
 = 
ibuff
 + 
§c_byã
;

8762 
m©ch_bôs
 = 
mask_bôs
 << (64 - 
high_bô
 - 
bps
);

8763 i‡(
lôée_ídün
)

8765 
l⁄gbuff1
 = (
§c
[0] << 24) | (src[1] << 16) | (src[2] << 8) | src[3];

8766 
l⁄gbuff2
 = 
l⁄gbuff1
;

8770 
l⁄gbuff1
 = (
§c
[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];

8771 
l⁄gbuff2
 = 
l⁄gbuff1
;

8773 
buff3
 = ((
uöt64
)
l⁄gbuff1
 << 32Ë| 
l⁄gbuff2
;

8774 
buff1
 = (
buff3
 & 
m©ch_bôs
Ë<< (
high_bô
);

8776 i‡(
ªady_bôs
 < 32)

8778 
byãbuff1
 = 
byãbuff2
 = 
byãbuff3
 = 
byãbuff4
 = 0;

8779 
buff2
 = (buff2 | (
buff1
 >> 
ªady_bôs
));

8783 
byãbuff1
 = (
buff2
 >> 56);

8784 *
d°
++ = 
byãbuff1
;

8785 
byãbuff2
 = (
buff2
 >> 48);

8786 *
d°
++ = 
byãbuff2
;

8787 
byãbuff3
 = (
buff2
 >> 40);

8788 *
d°
++ = 
byãbuff3
;

8789 
byãbuff4
 = (
buff2
 >> 32);

8790 *
d°
++ = 
byãbuff4
;

8791 
ªady_bôs
 -= 32;

8794 
buff2
 = ((buff2 << 32Ë| (
buff1
 >> 
ªady_bôs
));

8796 
ªady_bôs
 +
bps
;

8799 
ªady_bôs
 > 0)

8801 
byãbuff1
 = (
buff2
 >> 56);

8802 *
d°
++ = 
byãbuff1
;

8803 
buff2
 = (buff2 << 8);

8804 
ªady_bôs
 -= 8;

8808 
	}
}

8811 
	$ªvî£Sam∂esByãs
 (
uöt16
 
•p
, uöt16 
bps
, 
uöt32
 
width
,

8812 
uöt8
 *
§c
, uöt8 *
d°
)

8814 
i
;

8815 
uöt32
 
cﬁ
, 
byãs_≥r_pixñ
, 
cﬁ_off£t
;

8816 
uöt8
 
byãbuff1
;

8817 
sw≠buff
[32];

8819 i‡((
§c
 =
NULL
Ë|| (
d°
 == NULL))

8821 
	`TIFFEº‹
("reverseSamplesBytes","Invalid input or output buffer");

8825 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

8826 
bps
 / 8)

8831 2: 
cﬁ
 = 0; cﬁ < (
width
 / 2); col++)

8833 
cﬁ_off£t
 = 
cﬁ
 * 
byãs_≥r_pixñ
;

8834 
	`_TIFFmem˝y
 (
sw≠buff
, 
§c
 + 
cﬁ_off£t
, 
byãs_≥r_pixñ
);

8835 
	`_TIFFmem˝y
 (
§c
 + 
cﬁ_off£t
, 
d°
 - cﬁ_off£à- 
byãs_≥r_pixñ
, bytes_per_pixel);

8836 
	`_TIFFmem˝y
 (
d°
 - 
cﬁ_off£t
 - 
byãs_≥r_pixñ
, 
sw≠buff
, bytes_per_pixel);

8840 
cﬁ
 = 0; cﬁ < (
width
 / 2); col++)

8842 
i
 = 0; i < 
•p
; i++)

8844 
byãbuff1
 = *
§c
;

8845 *
§c
++ = *(
d°
 - 
•p
 + 
i
);

8846 *(
d°
 - 
•p
 + 
i
Ë
byãbuff1
;

8848 
d°
 -
•p
;

8851 : 
	`TIFFEº‹
("ªvî£Sam∂esByãs","Unsuµ‹ãd bô dïth %d", 
bps
);

8855 
	}
}

8860 
	$múr‹Image
(
uöt16
 
•p
, uöt16 
bps
, uöt16 
múr‹
, 
uöt32
 
width
, uöt32 
Àngth
, *
ibuff
)

8862 
shi·_width
;

8863 
uöt32
 
byãs_≥r_pixñ
, 
byãs_≥r_ßm∂e
;

8864 
uöt32
 
row
, 
rowsize
, 
row_off£t
;

8865 *
löe_buff
 = 
NULL
;

8866 *
§c
;

8867 *
d°
;

8869 
§c
 = 
ibuff
;

8870 
rowsize
 = ((
width
 * 
bps
 * 
•p
) + 7) / 8;

8871 
múr‹
)

8873 
MIRROR_BOTH
:

8874 
MIRROR_VERT
:

8875 
löe_buff
 = (*)
	`_TIFFmÆloc
(
rowsize
);

8876 i‡(
löe_buff
 =
NULL
)

8878 
	`TIFFEº‹
 ("múr‹Image", "U«bÀÅÿÆloˇã múr‹Üöêbuf„∏o‡%1u byãs", 
rowsize
);

8882 
d°
 = 
ibuff
 + (
rowsize
 * (
Àngth
 - 1));

8883 
row
 = 0;Ñow < 
Àngth
 / 2;Ñow++)

8885 
	`_TIFFmem˝y
(
löe_buff
, 
§c
, 
rowsize
);

8886 
	`_TIFFmem˝y
(
§c
, 
d°
, 
rowsize
);

8887 
	`_TIFFmem˝y
(
d°
, 
löe_buff
, 
rowsize
);

8888 
§c
 +(
rowsize
);

8889 
d°
 -(
rowsize
);

8891 i‡(
löe_buff
)

8892 
	`_TIFF‰ì
(
löe_buff
);

8893 i‡(
múr‹
 =
MIRROR_VERT
)

8895 
MIRROR_HORIZ
 :

8896 i‡((
bps
 % 8) == 0)

8898 
row
 = 0;Ñow < 
Àngth
;Ñow++)

8900 
row_off£t
 = 
row
 * 
rowsize
;

8901 
§c
 = 
ibuff
 + 
row_off£t
;

8902 
d°
 = 
ibuff
 + 
row_off£t
 + 
rowsize
;

8903 i‡(
	`ªvî£Sam∂esByãs
(
•p
, 
bps
, 
width
, 
§c
, 
d°
))

8911 i‡(!(
löe_buff
 = (*)
	`_TIFFmÆloc
(
rowsize
 + 1)))

8913 
	`TIFFEº‹
("mirrorImage", "UnableÅoállocate mirrorÜine buffer");

8916 
byãs_≥r_ßm∂e
 = (
bps
 + 7) / 8;

8917 
byãs_≥r_pixñ
 = ((
bps
 * 
•p
) + 7) / 8;

8918 i‡(
byãs_≥r_pixñ
 < (
byãs_≥r_ßm∂e
 + 1))

8919 
shi·_width
 = 
byãs_≥r_pixñ
;

8921 
shi·_width
 = 
byãs_≥r_ßm∂e
 + 1;

8923 
row
 = 0;Ñow < 
Àngth
;Ñow++)

8925 
row_off£t
 = 
row
 * 
rowsize
;

8926 
§c
 = 
ibuff
 + 
row_off£t
;

8927 
	`_TIFFmem£t
 (
löe_buff
, '\0', 
rowsize
);

8928 
shi·_width
)

8930 1: i‡(
	`ªvî£Sam∂es16bôs
(
•p
, 
bps
, 
width
, 
§c
, 
löe_buff
))

8932 
	`_TIFF‰ì
(
löe_buff
);

8935 
	`_TIFFmem˝y
 (
§c
, 
löe_buff
, 
rowsize
);

8937 2: i‡(
	`ªvî£Sam∂es24bôs
(
•p
, 
bps
, 
width
, 
§c
, 
löe_buff
))

8939 
	`_TIFF‰ì
(
löe_buff
);

8942 
	`_TIFFmem˝y
 (
§c
, 
löe_buff
, 
rowsize
);

8946 5: i‡(
	`ªvî£Sam∂es32bôs
(
•p
, 
bps
, 
width
, 
§c
, 
löe_buff
))

8948 
	`_TIFF‰ì
(
löe_buff
);

8951 
	`_TIFFmem˝y
 (
§c
, 
löe_buff
, 
rowsize
);

8953 : 
	`TIFFEº‹
("múr‹Image","Unsuµ‹ãd bô dïth %d", 
bps
);

8954 
	`_TIFF‰ì
(
löe_buff
);

8958 i‡(
löe_buff
)

8959 
	`_TIFF‰ì
(
löe_buff
);

8963 : 
	`TIFFEº‹
 ("múr‹Image", "InvÆid múr‹áxi†%d", 
múr‹
);

8969 
	}
}

8973 
	$övîtImage
(
uöt16
 
phŸomëric
, uöt16 
•p
, uöt16 
bps
, 
uöt32
 
width
, uöt32 
Àngth
, *
w‹k_buff
)

8975 
uöt32
 
row
, 
cﬁ
;

8976 
byãbuff1
, 
byãbuff2
, 
byãbuff3
, 
byãbuff4
;

8977 *
§c
;

8978 
uöt16
 *
§c_uöt16
;

8979 
uöt32
 *
§c_uöt32
;

8981 i‡(
•p
 != 1)

8983 
	`TIFFEº‹
("invertImage", "Image inversionÇot supported for moreÅhan one sampleÖerÖixel");

8987 i‡(
phŸomëric
 !
PHOTOMETRIC_MINISWHITE
 &&ÖhŸomëri¯!
PHOTOMETRIC_MINISBLACK
)

8989 
	`TIFFEº‹
("invertImage", "Only blackánd whiteánd grayscale images can be inverted");

8993 
§c
 = 
w‹k_buff
;

8994 i‡(
§c
 =
NULL
)

8996 
	`TIFFEº‹
 ("invertImage", "Invalid crop bufferÖassedÅo invertImage");

9000 
bps
)

9002 32: 
§c_uöt32
 = (
uöt32
 *)
§c
;

9003 
row
 = 0;Ñow < 
Àngth
;Ñow++)

9004 
cﬁ
 = 0; cﬁ < 
width
; col++)

9006 *
§c_uöt32
 = (
uöt32
)0xFFFFFFFF - *src_uint32;

9007 
§c_uöt32
++;

9010 16: 
§c_uöt16
 = (
uöt16
 *)
§c
;

9011 
row
 = 0;Ñow < 
Àngth
;Ñow++)

9012 
cﬁ
 = 0; cﬁ < 
width
; col++)

9014 *
§c_uöt16
 = (
uöt16
)0xFFFF - *src_uint16;

9015 
§c_uöt16
++;

9018 8: 
row
 = 0;Ñow < 
Àngth
;Ñow++)

9019 
cﬁ
 = 0; cﬁ < 
width
; col++)

9021 *
§c
 = (
uöt8
)255 - *src;

9022 
§c
++;

9025 4: 
row
 = 0;Ñow < 
Àngth
;Ñow++)

9026 
cﬁ
 = 0; cﬁ < 
width
; col++)

9028 
byãbuff1
 = 16 - (
uöt8
)(*
§c
 & 240 >> 4);

9029 
byãbuff2
 = 16 - (*
§c
 & 15);

9030 *
§c
 = 
byãbuff1
 << 4 & 
byãbuff2
;

9031 
§c
++;

9034 2: 
row
 = 0;Ñow < 
Àngth
;Ñow++)

9035 
cﬁ
 = 0; cﬁ < 
width
; col++)

9037 
byãbuff1
 = 4 - (
uöt8
)(*
§c
 & 192 >> 6);

9038 
byãbuff2
 = 4 - (
uöt8
)(*
§c
 & 48 >> 4);

9039 
byãbuff3
 = 4 - (
uöt8
)(*
§c
 & 12 >> 2);

9040 
byãbuff4
 = 4 - (
uöt8
)(*
§c
 & 3);

9041 *
§c
 = (
byãbuff1
 << 6Ë|| (
byãbuff2
 << 4Ë|| (
byãbuff3
 << 2Ë|| 
byãbuff4
;

9042 
§c
++;

9045 1: 
row
 = 0;Ñow < 
Àngth
;Ñow++)

9046 
cﬁ
 = 0; cﬁ < 
width
; cﬁ +8 /(
•p
 * 
bps
))

9048 *
§c
 = ~(*src);

9049 
§c
++;

9052 : 
	`TIFFEº‹
("övîtImage", "Unsuµ‹ãd bô dïth %d", 
bps
);

9057 
	}
}

	@tools/tiffdither.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

33 #ifde‡
HAVE_UNISTD_H


34 
	~<uni°d.h
>

37 #ifde‡
NEED_LIBPORT


38 
	~"libp‹t.h
"

41 
	~"tiffio.h
"

43 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

44 
	#°∫eq
(
a
,
b
,
n
Ë(
	`°∫cmp
◊,b,nË=0)

	)

46 
	#C›yFõld
(
èg
, 
v
) \

47 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v
)Ë
	`TIFFSëFõld
(
out
,Åag, v)

	)

49 
uöt32
 
	gimagewidth
;

50 
uöt32
 
	gimagñígth
;

51 
	gthªshﬁd
 = 128;

53 
ußge
();

60 
	$fsdôhî
(
TIFF
* 
ö
, TIFF* 
out
)

62 *
ouéöe
, *
öpuéöe
, *
ö±r
;

63 *
thi¶öe
, *
√xéöe
, *
tmµå
;

64 *
ouçå
;

65 *
thi•å
, *
√xçå
;

66 
uöt32
 
i
, 
j
;

67 
uöt32
 
imax
, 
jmax
;

68 
œ°löe
, 
œ°pixñ
;

69 
bô
;

70 
tsize_t
 
ouéöesize
;

72 
imax
 = 
imagñígth
 - 1;

73 
jmax
 = 
imagewidth
 - 1;

74 
öpuéöe
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
ö
));

75 
thi¶öe
 = (*)
	`_TIFFmÆloc
(
imagewidth
 *  ());

76 
√xéöe
 = (*)
	`_TIFFmÆloc
(
imagewidth
 *  ());

77 
ouéöesize
 = 
	`TIFFSˇ∆öeSize
(
out
);

78 
ouéöe
 = (*Ë
	`_TIFFmÆloc
(
ouéöesize
);

83 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
öpuéöe
, 0, 0) <= 0)

84 
skù_⁄_îr‹
;

86 
ö±r
 = 
öpuéöe
;

87 
√xçå
 = 
√xéöe
;

88 
j
 = 0; j < 
imagewidth
; ++j)

89 *
√xçå
++ = *
ö±r
++;

90 
i
 = 1; i < 
imagñígth
; ++i) {

91 
tmµå
 = 
thi¶öe
;

92 
thi¶öe
 = 
√xéöe
;

93 
√xéöe
 = 
tmµå
;

94 
œ°löe
 = (
i
 =
imax
);

95 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
öpuéöe
, 
i
, 0) <= 0)

97 
ö±r
 = 
öpuéöe
;

98 
√xçå
 = 
√xéöe
;

99 
j
 = 0; j < 
imagewidth
; ++j)

100 *
√xçå
++ = *
ö±r
++;

101 
thi•å
 = 
thi¶öe
;

102 
√xçå
 = 
√xéöe
;

103 
	`_TIFFmem£t
(
ouçå
 = 
ouéöe
, 0, 
ouéöesize
);

104 
bô
 = 0x80;

105 
j
 = 0; j < 
imagewidth
; ++j) {

106 
v
;

108 
œ°pixñ
 = (
j
 =
jmax
);

109 
v
 = *
thi•å
++;

110 i‡(
v
 < 0)

111 
v
 = 0;

112 i‡(
v
 > 255)

113 
v
 = 255;

114 i‡(
v
 > 
thªshﬁd
) {

115 *
ouçå
 |
bô
;

116 
v
 -= 255;

118 
bô
 >>= 1;

119 i‡(
bô
 == 0) {

120 
ouçå
++;

121 
bô
 = 0x80;

123 i‡(!
œ°pixñ
)

124 
thi•å
[0] +
v
 * 7 / 16;

125 i‡(!
œ°löe
) {

126 i‡(
j
 != 0)

127 
√xçå
[-1] +
v
 * 3 / 16;

128 *
√xçå
++ +
v
 * 5 / 16;

129 i‡(!
œ°pixñ
)

130 
√xçå
[0] +
v
 / 16;

133 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
ouéöe
, 
i
-1, 0) < 0)

136 
skù_⁄_îr‹
:

137 
	`_TIFF‰ì
(
öpuéöe
);

138 
	`_TIFF‰ì
(
thi¶öe
);

139 
	`_TIFF‰ì
(
√xéöe
);

140 
	`_TIFF‰ì
(
ouéöe
);

141 
	}
}

143 
uöt16
 
	gcom¥essi⁄
 = 
COMPRESSION_PACKBITS
;

144 
uöt16
 
	g¥edi˘‹
 = 0;

145 
uöt32
 
	ggroup3›ti⁄s
 = 0;

148 
	$¥o˚ssG3O±i⁄s
(* 
˝
)

150 i‡((
˝
 = 
	`°rchr
(cp, ':'))) {

152 
˝
++;

153 i‡(
	`°∫eq
(
˝
, "1d", 2))

154 
group3›ti⁄s
 &~
GROUP3OPT_2DENCODING
;

155 i‡(
	`°∫eq
(
˝
, "2d", 2))

156 
group3›ti⁄s
 |
GROUP3OPT_2DENCODING
;

157 i‡(
	`°∫eq
(
˝
, "fill", 4))

158 
group3›ti⁄s
 |
GROUP3OPT_FILLBITS
;

160 
	`ußge
();

161 } (
˝
 = 
	`°rchr
(cp, ':')));

163 
	}
}

166 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

168 i‡(
	`°ªq
(
›t
, "none"))

169 
com¥essi⁄
 = 
COMPRESSION_NONE
;

170 i‡(
	`°ªq
(
›t
, "packbits"))

171 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

172 i‡(
	`°∫eq
(
›t
, "g3", 2)) {

173 
	`¥o˚ssG3O±i⁄s
(
›t
);

174 
com¥essi⁄
 = 
COMPRESSION_CCITTFAX3
;

175 } i‡(
	`°ªq
(
›t
, "g4"))

176 
com¥essi⁄
 = 
COMPRESSION_CCITTFAX4
;

177 i‡(
	`°∫eq
(
›t
, "lzw", 3)) {

178 * 
˝
 = 
	`°rchr
(
›t
, ':');

179 i‡(
˝
)

180 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

181 
com¥essi⁄
 = 
COMPRESSION_LZW
;

182 } i‡(
	`°∫eq
(
›t
, "zip", 3)) {

183 * 
˝
 = 
	`°rchr
(
›t
, ':');

184 i‡(
˝
)

185 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

186 
com¥essi⁄
 = 
COMPRESSION_DEFLATE
;

190 
	}
}

193 
	$maö
(
¨gc
, * 
¨gv
[])

195 
TIFF
 *
ö
, *
out
;

196 
uöt16
 
ßm∂e•îpixñ
, 
bô•îßm∂e
 = 1, 
sh‹tv
;

197 
Êﬂtv
;

198 
thög
[1024];

199 
uöt32
 
row•î°rù
 = (uint32) -1;

200 
uöt16
 
fûl‹dî
 = 0;

201 
c
;

202 
›töd
;

203 *
›èrg
;

205 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:f:r:t:")) != -1)

206 
c
) {

208 i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

209 
	`ußge
();

212 i‡(
	`°ªq
(
›èrg
, "lsb2msb"))

213 
fûl‹dî
 = 
FILLORDER_LSB2MSB
;

214 i‡(
	`°ªq
(
›èrg
, "msb2lsb"))

215 
fûl‹dî
 = 
FILLORDER_MSB2LSB
;

217 
	`ußge
();

220 
row•î°rù
 = 
	`©oi
(
›èrg
);

223 
thªshﬁd
 = 
	`©oi
(
›èrg
);

224 i‡(
thªshﬁd
 < 0)

225 
thªshﬁd
 = 0;

226 i‡(
thªshﬁd
 > 255)

227 
thªshﬁd
 = 255;

230 
	`ußge
();

233 i‡(
¨gc
 - 
›töd
 < 2)

234 
	`ußge
();

235 
ö
 = 
	`TIFFO≥n
(
¨gv
[
›töd
], "r");

236 i‡(
ö
 =
NULL
)

238 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_SAMPLESPERPIXEL
, &
ßm∂e•îpixñ
);

239 i‡(
ßm∂e•îpixñ
 != 1) {

240 
	`Ârötf
(
°dîr
, "%s: NŸá b&w image.\n", 
¨gv
[0]);

243 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_BITSPERSAMPLE
, &
bô•îßm∂e
);

244 i‡(
bô•îßm∂e
 != 8) {

245 
	`Ârötf
(
°dîr
,

246 " %s: S‹ry, o∆y h™dÀ 8-bô sam∂es.\n", 
¨gv
[0]);

249 
out
 = 
	`TIFFO≥n
(
¨gv
[
›töd
+1], "w");

250 i‡(
out
 =
NULL
)

252 
	`C›yFõld
(
TIFFTAG_IMAGEWIDTH
, 
imagewidth
);

253 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
imagñígth
);

254 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGELENGTH
, 
imagñígth
-1);

255 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, 1);

256 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, 1);

257 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PLANARCONFIG
, 
PLANARCONFIG_CONTIG
);

258 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

259 i‡(
fûl‹dî
)

260 
	`TIFFSëFõld
(
out
, 
TIFFTAG_FILLORDER
, 
fûl‹dî
);

262 
	`C›yFõld
(
TIFFTAG_FILLORDER
, 
sh‹tv
);

263 
	`•rötf
(
thög
, "Dôhîed B&W vîsi⁄ o‡%s", 
¨gv
[
›töd
]);

264 
	`TIFFSëFõld
(
out
, 
TIFFTAG_IMAGEDESCRIPTION
, 
thög
);

265 
	`C›yFõld
(
TIFFTAG_PHOTOMETRIC
, 
sh‹tv
);

266 
	`C›yFõld
(
TIFFTAG_ORIENTATION
, 
sh‹tv
);

267 
	`C›yFõld
(
TIFFTAG_XRESOLUTION
, 
Êﬂtv
);

268 
	`C›yFõld
(
TIFFTAG_YRESOLUTION
, 
Êﬂtv
);

269 
	`C›yFõld
(
TIFFTAG_RESOLUTIONUNIT
, 
sh‹tv
);

270 
row•î°rù
 = 
	`TIFFDeÁu…SåùSize
(
out
,Ñowsperstrip);

271 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
, 
row•î°rù
);

272 
com¥essi⁄
) {

273 
COMPRESSION_CCITTFAX3
:

274 
	`TIFFSëFõld
(
out
, 
TIFFTAG_GROUP3OPTIONS
, 
group3›ti⁄s
);

276 
COMPRESSION_LZW
:

277 
COMPRESSION_DEFLATE
:

278 i‡(
¥edi˘‹
)

279 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

282 
	`fsdôhî
(
ö
, 
out
);

283 
	`TIFFClo£
(
ö
);

284 
	`TIFFClo£
(
out
);

286 
	}
}

288 * 
	g°uff
[] = {

310 
NULL


314 
	$ußge
()

316 
buf
[
BUFSIZ
];

317 
i
;

319 
	`£tbuf
(
°dîr
, 
buf
);

320 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

321 
i
 = 0; 
°uff
[i] !
NULL
; i++)

322 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

323 
	`exô
(-1);

324 
	}
}

	@tools/tiffdump.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

33 #ifde‡
HAVE_UNISTD_H


34 
	~<uni°d.h
>

37 #ifde‡
HAVE_FCNTL_H


38 
	~<f˙é.h
>

41 #ifde‡
HAVE_SYS_TYPES_H


42 
	~<sys/ty≥s.h
>

45 #ifde‡
HAVE_IO_H


46 
	~<io.h
>

49 #ifde‡
NEED_LIBPORT


50 
	~"libp‹t.h
"

53 #i‚de‡
HAVE_GETOPT


54 
gë›t
(, **, *);

57 
	~"tiffio.h
"

59 #i‚de‡
O_BINARY


60 
	#O_BINARY
 0

	)

65 
TIFFHódîCœssic
 
	m˛assic
;

66 
TIFFHódîBig
 
	mbig
;

67 
TIFFHódîComm⁄
 
	mcomm⁄
;

68 } 
	ghdr
;

69 * 
	g≠≤ame
;

70 * 
	gcurfûe
;

71 
	gswabÊag
;

72 
	gbigídün
;

73 
	gbigtiff
;

74 
uöt32
 
	gmaxôems
 = 24;

76 c⁄° * 
	gbyãfmt
 = "%s%#02x";

77 c⁄° * 
	gsbyãfmt
 = "%s%d";

78 c⁄° * 
	gsh‹tfmt
 = "%s%u";

79 c⁄° * 
	gssh‹tfmt
 = "%s%d";

80 c⁄° * 
	gl⁄gfmt
 = "%s%lu";

81 c⁄° * 
	g¶⁄gfmt
 = "%s%ld";

82 c⁄° * 
	gifdfmt
 = "%s%#04lx";

83 #i‡
deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

84 c⁄° * 
	gl⁄g8fmt
 = "%s%I64u";

85 c⁄° * 
	g¶⁄g8fmt
 = "%s%I64d";

86 c⁄° * 
	gifd8fmt
 = "%s%#08I64x";

88 c⁄° * 
	gl⁄g8fmt
 = "%s%llu";

89 c⁄° * 
	g¶⁄g8fmt
 = "%s%lld";

90 c⁄° * 
	gifd8fmt
 = "%s%#08llx";

92 c⁄° * 
	gøti⁄Æfmt
 = "%s%g";

93 c⁄° * 
	g§©i⁄Æfmt
 = "%s%g";

94 c⁄° * 
	gÊﬂtfmt
 = "%s%g";

95 c⁄° * 
	gdoubÀfmt
 = "%s%g";

97 
dump
(, 
uöt64
);

98 
›töd
;

99 * 
›èrg
;

102 
	$ußge
()

104 
	`Ârötf
(
°dîr
, "ußge: %†[-h] [-ÿoff£t] [-m maxôems] fûe.ti‡...\n", 
≠≤ame
);

105 
	`exô
(-1);

106 
	}
}

109 
	$maö
(
¨gc
, * 
¨gv
[])

111 
⁄e
 = 1, 
fd
;

112 
mu…ùÀfûes
 = (
¨gc
 > 1);

113 
c
;

114 
uöt64
 
dúoff
 = 0;

115 
bigídün
 = (*(*)&
⁄e
 == 0);

117 
≠≤ame
 = 
¨gv
[0];

118 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "m:o:h")) != -1) {

119 
c
) {

121 
sh‹tfmt
 = "%s%#x";

122 
ssh‹tfmt
 = "%s%#x";

123 
l⁄gfmt
 = "%s%#lx";

124 
¶⁄gfmt
 = "%s%#lx";

127 
dúoff
 = (
uöt64
Ë
	`°πoul
(
›èrg
, 
NULL
, 0);

130 
maxôems
 = 
	`°πoul
(
›èrg
, 
NULL
, 0);

133 
	`ußge
();

136 i‡(
›töd
 >
¨gc
)

137 
	`ußge
();

138 ; 
›töd
 < 
¨gc
; optind++) {

139 
fd
 = 
	`›í
(
¨gv
[
›töd
], 
O_RDONLY
|
O_BINARY
, 0);

140 i‡(
fd
 < 0) {

141 
	`≥º‹
(
¨gv
[0]);

144 i‡(
mu…ùÀfûes
)

145 
	`¥ötf
("%s:\n", 
¨gv
[
›töd
]);

146 
curfûe
 = 
¨gv
[
›töd
];

147 
swabÊag
 = 0;

148 
bigtiff
 = 0;

149 
	`dump
(
fd
, 
dúoff
);

150 
	`˛o£
(
fd
);

153 
	}
}

155 
	#‹d
(
e
Ë((Î)

	)

157 
uöt64
 
RódDúe˘‹y
(, , uint64);

158 
RódEº‹
(*);

159 
Eº‹
(const *, ...);

160 
F©Æ
(const *, ...);

163 
	$dump
(
fd
, 
uöt64
 
dúoff
)

165 
i
;

167 
	`l£ek
(
fd
, (
off_t
) 0, 0);

168 i‡(
	`ªad
(
fd
, (*Ë&
hdr
,  (
TIFFHódîComm⁄
)) !=  (TIFFHeaderCommon))

169 
	`RódEº‹
("TIFF header");

170 i‡(
hdr
.
comm⁄
.
tiff_magic
 !
TIFF_BIGENDIAN


171 && 
hdr
.
comm⁄
.
tiff_magic
 !
TIFF_LITTLEENDIAN
 &&

172 #i‡
HOST_BIGENDIAN


174 
MDI_BIGENDIAN
 !
hdr
.
comm⁄
.
tiff_magic


176 
MDI_LITTLEENDIAN
 !
hdr
.
comm⁄
.
tiff_magic


179 
	`F©Æ
("Notá TIFF or MDI file, bad magicÇumber %u (%#x)",

180 
hdr
.
comm⁄
.
tiff_magic
, hdr.common.tiff_magic);

182 i‡(
hdr
.
comm⁄
.
tiff_magic
 =
TIFF_BIGENDIAN


183 || 
hdr
.
comm⁄
.
tiff_magic
 =
MDI_BIGENDIAN
)

184 
swabÊag
 = !
bigídün
;

186 
swabÊag
 = 
bigídün
;

187 i‡(
swabÊag
)

188 
	`TIFFSwabSh‹t
(&
hdr
.
comm⁄
.
tiff_vîsi⁄
);

189 i‡(
hdr
.
comm⁄
.
tiff_vîsi⁄
==42)

191 i‡(
	`ªad
(
fd
, (*Ë&
hdr
.
˛assic
.
tiff_dúoff
, 4) != 4)

192 
	`RódEº‹
("TIFF header");

193 i‡(
swabÊag
)

194 
	`TIFFSwabL⁄g
(&
hdr
.
˛assic
.
tiff_dúoff
);

195 
	`¥ötf
("Magic: %#x <%s-endian> Version: %#x <%s>\n",

196 
hdr
.
˛assic
.
tiff_magic
,

197 
hdr
.
˛assic
.
tiff_magic
 =
TIFF_BIGENDIAN
 ? "big" : "little",

199 i‡(
dúoff
 == 0)

200 
dúoff
 = 
hdr
.
˛assic
.
tiff_dúoff
;

202 i‡(
hdr
.
comm⁄
.
tiff_vîsi⁄
==43)

204 i‡(
	`ªad
(
fd
, (*Ë&
hdr
.
big
.
tiff_off£tsize
, 12) != 12)

205 
	`RódEº‹
("TIFF header");

206 i‡(
swabÊag
)

208 
	`TIFFSwabSh‹t
(&
hdr
.
big
.
tiff_off£tsize
);

209 
	`TIFFSwabSh‹t
(&
hdr
.
big
.
tiff_unu£d
);

210 
	`TIFFSwabL⁄g8
(&
hdr
.
big
.
tiff_dúoff
);

212 
	`¥ötf
("Magic: %#x <%s-endian> Version: %#x <%s>\n",

213 
hdr
.
big
.
tiff_magic
,

214 
hdr
.
big
.
tiff_magic
 =
TIFF_BIGENDIAN
 ? "big" : "little",

216 
	`¥ötf
("OffsetSize: %#x Unused: %#x\n",

217 
hdr
.
big
.
tiff_off£tsize
,hdr.big.
tiff_unu£d
);

218 i‡(
dúoff
 == 0)

219 
dúoff
 = 
hdr
.
big
.
tiff_dúoff
;

220 
bigtiff
 = 1;

223 
	`F©Æ
("Notá TIFF file, bad versionÇumber %u (%#x)",

224 
hdr
.
comm⁄
.
tiff_vîsi⁄
, hdr.common.tiff_version);

225 
i
 = 0; 
dúoff
 != 0; i++) {

226 i‡(
i
 > 0)

227 
	`putch¨
('\n');

228 
dúoff
 = 
	`RódDúe˘‹y
(
fd
, 
i
, diroff);

230 
	}
}

232 c⁄° 
	gd©awidth
[] = {

253 
	#NWIDTHS
 ( (
d©awidth
Ë/  (d©awidth[0]))

	)

254 
PrötTag
(
FILE
*, 
uöt16
);

255 
PrötTy≥
(
FILE
*, 
uöt16
);

256 
PrötD©a
(
FILE
*, 
uöt16
, 
uöt32
, *);

263 
uöt64


264 
	$RódDúe˘‹y
(
fd
, 
ix
, 
uöt64
 
off
)

266 
uöt16
 
dúcou¡
;

267 
uöt32
 
dúíåysize
;

268 * 
dúmem
 = 
NULL
;

269 
uöt64
 
√xtdúoff
;

270 
uöt32
 
n
;

271 
uöt8
* 
dp
;

273 i‡(
off
 == 0)

274 
d⁄e
;

275 #i‡
	`deföed
(
__WIN32__
Ë&& deföed(
_MSC_VER
)

276 i‡(
	`_l£eki64
(
fd
, (
__öt64
)
off
, 
SEEK_SET
) != (__int64)off) {

278 i‡(
	`l£ek
(
fd
, (
off_t
)
off
, 
SEEK_SET
) != (off_t)off) {

280 
	`F©Æ
("SeekÉrroráccessing TIFF directory");

281 
d⁄e
;

283 i‡(!
bigtiff
) {

284 i‡(
	`ªad
(
fd
, (*Ë&
dúcou¡
,  (
uöt16
)) !=  (uint16)) {

285 
	`RódEº‹
("directory count");

286 
d⁄e
;

288 i‡(
swabÊag
)

289 
	`TIFFSwabSh‹t
(&
dúcou¡
);

290 
dúíåysize
 = 12;

292 
uöt64
 
dúcou¡64
;

293 i‡(
	`ªad
(
fd
, (*Ë&
dúcou¡64
,  (
uöt64
)) !=  (uint64)) {

294 
	`RódEº‹
("directory count");

295 
d⁄e
;

297 i‡(
swabÊag
)

298 
	`TIFFSwabL⁄g8
(&
dúcou¡64
);

299 i‡(
dúcou¡64
>0xFFFF) {

300 
	`Eº‹
("Sanity check on directory count failed");

301 
d⁄e
;

303 
dúcou¡
 = (
uöt16
)
dúcou¡64
;

304 
dúíåysize
 = 20;

306 
dúmem
 = 
	`_TIFFmÆloc
(
dúcou¡
 * 
dúíåysize
);

307 i‡(
dúmem
 =
NULL
) {

308 
	`F©Æ
("No space for TIFF directory");

309 
d⁄e
;

311 
n
 = 
	`ªad
(
fd
, (*Ë
dúmem
, 
dúcou¡
*
dúíåysize
);

312 i‡(
n
 !
dúcou¡
*
dúíåysize
) {

313 
n
 /
dúíåysize
;

314 
	`Eº‹
(

315 #i‡
	`deföed
(
__WIN32__
Ë&& deföed(
_MSC_VER
)

317 ()
n
, 
dúcou¡
, (
__öt64
Ë
off
);

320 ()
n
, 
dúcou¡
, (Ë
off
);

322 
dúcou¡
 = 
n
;

323 
√xtdúoff
 = 0;

325 i‡(!
bigtiff
) {

326 
uöt32
 
√xtdúoff32
;

327 i‡(
	`ªad
(
fd
, (*Ë&
√xtdúoff32
,  (
uöt32
)) !=  (uint32))

328 
√xtdúoff32
 = 0;

329 i‡(
swabÊag
)

330 
	`TIFFSwabL⁄g
(&
√xtdúoff32
);

331 
√xtdúoff
 = 
√xtdúoff32
;

333 i‡(
	`ªad
(
fd
, (*Ë&
√xtdúoff
,  (
uöt64
)) !=  (uint64))

334 
√xtdúoff
 = 0;

335 i‡(
swabÊag
)

336 
	`TIFFSwabL⁄g8
(&
√xtdúoff
);

339 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

340 
	`¥ötf
("Dúe˘‹y %u: off£à%I64u (%#I64xË√xà%I64u (%#I64x)\n", 
ix
,

341 (
__öt64
)
off
, (__int64)off,

342 (
__öt64
)
√xtdúoff
, (__int64)nextdiroff);

344 
	`¥ötf
("Dúe˘‹y %u: off£à%Œu (%#ŒxË√xà%Œu (%#Œx)\n", 
ix
,

345 ()
off
, ()off,

346 ()
√xtdúoff
, ()nextdiroff);

348 
dp
 = (
uöt8
*)
dúmem
, 
n
 = 
dúcou¡
;Ç > 0;Ç--) {

349 
uöt16
 
èg
;

350 
uöt16
 
ty≥
;

351 
uöt16
 
ty≥width
;

352 
uöt64
 
cou¡
;

353 
uöt64
 
d©asize
;

354 
d©afôs
;

355 * 
d©amem
;

356 
uöt64
 
d©aoff£t
;

357 
d©©runˇãd
;

358 
èg
 = *(
uöt16
*)
dp
;

359 i‡(
swabÊag
)

360 
	`TIFFSwabSh‹t
(&
èg
);

361 
dp
 +(
uöt16
);

362 
ty≥
 = *(
uöt16
*)
dp
;

363 
dp
 +(
uöt16
);

364 i‡(
swabÊag
)

365 
	`TIFFSwabSh‹t
(&
ty≥
);

366 
	`PrötTag
(
°dout
, 
èg
);

367 
	`putch¨
(' ');

368 
	`PrötTy≥
(
°dout
, 
ty≥
);

369 
	`putch¨
(' ');

370 i‡(!
bigtiff
)

372 
uöt32
 
cou¡32
;

373 
cou¡32
 = *(
uöt32
*)
dp
;

374 i‡(
swabÊag
)

375 
	`TIFFSwabL⁄g
(&
cou¡32
);

376 
dp
 +(
uöt32
);

377 
cou¡
 = 
cou¡32
;

381 
cou¡
 = *(
uöt64
*)
dp
;

382 i‡(
swabÊag
)

383 
	`TIFFSwabL⁄g8
(&
cou¡
);

384 
dp
 +(
uöt64
);

386 #i‡
	`deföed
(
__WIN32__
Ë&& (deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
))

387 
	`¥ötf
("%I64u<", (
__öt64
)
cou¡
);

389 
	`¥ötf
("%Œu<", ()
cou¡
);

391 i‡(
ty≥
 >
NWIDTHS
)

392 
ty≥width
 = 0;

394 
ty≥width
 = 
d©awidth
[
ty≥
];

395 
d©asize
 = 
cou¡
*
ty≥width
;

396 
d©afôs
 = 1;

397 
d©amem
 = 
dp
;

398 
d©aoff£t
 = 0;

399 
d©©runˇãd
 = 0;

400 i‡(!
bigtiff
)

402 i‡(
d©asize
>4)

404 
uöt32
 
d©aoff£t32
;

405 
d©afôs
 = 0;

406 
d©amem
 = 
NULL
;

407 
d©aoff£t32
 = *(
uöt32
*)
dp
;

408 i‡(
swabÊag
)

409 
	`TIFFSwabL⁄g
(&
d©aoff£t32
);

410 
d©aoff£t
 = 
d©aoff£t32
;

412 
dp
 +(
uöt32
);

416 i‡(
d©asize
>8)

418 
d©afôs
 = 0;

419 
d©amem
 = 
NULL
;

420 
d©aoff£t
 = *(
uöt64
*)
dp
;

421 i‡(
swabÊag
)

422 
	`TIFFSwabL⁄g8
(&
d©aoff£t
);

424 
dp
 +(
uöt64
);

426 i‡(
d©asize
>0x10000)

428 
d©©runˇãd
 = 1;

429 
cou¡
 = 0x10000/
ty≥width
;

430 
d©asize
 = 
cou¡
*
ty≥width
;

432 i‡(
cou¡
>
maxôems
)

434 
d©©runˇãd
 = 1;

435 
cou¡
 = 
maxôems
;

436 
d©asize
 = 
cou¡
*
ty≥width
;

438 i‡(!
d©afôs
)

440 
d©amem
 = 
	`_TIFFmÆloc
((
uöt32
)
d©asize
);

441 i‡(
d©amem
) {

442 #i‡
	`deföed
(
__WIN32__
Ë&& deföed(
_MSC_VER
)

443 i‡(
	`_l£eki64
(
fd
, (
__öt64
)
d©aoff£t
, 
SEEK_SET
)

444 !(
__öt64
)
d©aoff£t
)

446 i‡(
	`l£ek
(
fd
, (
off_t
)
d©aoff£t
, 0) !=

447 (
off_t
)
d©aoff£t
)

450 
	`Eº‹
(

451 "SìkÉº‹ác˚ssögÅag %u vÆue", 
èg
);

452 
	`_TIFF‰ì
(
d©amem
);

453 
d©amem
 = 
NULL
;

455 i‡(
	`ªad
(
fd
, 
d©amem
, (
size_t
)
d©asize
Ë!(
TIFF_SSIZE_T
)datasize)

457 
	`Eº‹
(

458 "RódÉº‹ác˚ssögÅag %u vÆue", 
èg
);

459 
	`_TIFF‰ì
(
d©amem
);

460 
d©amem
 = 
NULL
;

463 
	`Eº‹
("Nÿ•a˚ f‹ d©®f‹Åag %u",
èg
);

465 i‡(
d©amem
)

467 i‡(
swabÊag
)

469 
ty≥
)

471 
TIFF_BYTE
:

472 
TIFF_ASCII
:

473 
TIFF_SBYTE
:

474 
TIFF_UNDEFINED
:

476 
TIFF_SHORT
:

477 
TIFF_SSHORT
:

478 
	`TIFFSwabAºayOfSh‹t
((
uöt16
*)
d©amem
,(
tmsize_t
)
cou¡
);

480 
TIFF_LONG
:

481 
TIFF_SLONG
:

482 
TIFF_FLOAT
:

483 
TIFF_IFD
:

484 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*)
d©amem
,(
tmsize_t
)
cou¡
);

486 
TIFF_RATIONAL
:

487 
TIFF_SRATIONAL
:

488 
	`TIFFSwabAºayOfL⁄g
((
uöt32
*)
d©amem
,(
tmsize_t
)
cou¡
*2);

490 
TIFF_DOUBLE
:

491 
TIFF_LONG8
:

492 
TIFF_SLONG8
:

493 
TIFF_IFD8
:

494 
	`TIFFSwabAºayOfL⁄g8
((
uöt64
*)
d©amem
,(
tmsize_t
)
cou¡
);

498 
	`PrötD©a
(
°dout
,
ty≥
,(
uöt32
)
cou¡
,
d©amem
);

499 i‡(
d©©runˇãd
)

500 
	`¥ötf
(" ...");

501 i‡(!
d©afôs
)

502 
	`_TIFF‰ì
(
d©amem
);

504 
	`¥ötf
(">\n");

506 
d⁄e
:

507 i‡(
dúmem
)

508 
	`_TIFF‰ì
((*)
dúmem
);

509  (
√xtdúoff
);

510 
	}
}

512 c⁄° 
	sèg«me
 {

513 
uöt16
 
	mèg
;

514 c⁄° * 
	m«me
;

515 } 
	gèg«mes
[] = {

516 { 
TIFFTAG_SUBFILETYPE
, "SubFileType" },

517 { 
TIFFTAG_OSUBFILETYPE
, "OldSubFileType" },

518 { 
TIFFTAG_IMAGEWIDTH
, "ImageWidth" },

519 { 
TIFFTAG_IMAGELENGTH
, "ImageLength" },

520 { 
TIFFTAG_BITSPERSAMPLE
, "BitsPerSample" },

521 { 
TIFFTAG_COMPRESSION
, "Compression" },

522 { 
TIFFTAG_PHOTOMETRIC
, "Photometric" },

523 { 
TIFFTAG_THRESHHOLDING
, "Threshholding" },

524 { 
TIFFTAG_CELLWIDTH
, "CellWidth" },

525 { 
TIFFTAG_CELLLENGTH
, "CellLength" },

526 { 
TIFFTAG_FILLORDER
, "FillOrder" },

527 { 
TIFFTAG_DOCUMENTNAME
, "DocumentName" },

528 { 
TIFFTAG_IMAGEDESCRIPTION
, "ImageDescription" },

529 { 
TIFFTAG_MAKE
, "Make" },

530 { 
TIFFTAG_MODEL
, "Model" },

531 { 
TIFFTAG_STRIPOFFSETS
, "StripOffsets" },

532 { 
TIFFTAG_ORIENTATION
, "Orientation" },

533 { 
TIFFTAG_SAMPLESPERPIXEL
, "SamplesPerPixel" },

534 { 
TIFFTAG_ROWSPERSTRIP
, "RowsPerStrip" },

535 { 
TIFFTAG_STRIPBYTECOUNTS
, "StripByteCounts" },

536 { 
TIFFTAG_MINSAMPLEVALUE
, "MinSampleValue" },

537 { 
TIFFTAG_MAXSAMPLEVALUE
, "MaxSampleValue" },

538 { 
TIFFTAG_XRESOLUTION
, "XResolution" },

539 { 
TIFFTAG_YRESOLUTION
, "YResolution" },

540 { 
TIFFTAG_PLANARCONFIG
, "PlanarConfig" },

541 { 
TIFFTAG_PAGENAME
, "PageName" },

542 { 
TIFFTAG_XPOSITION
, "XPosition" },

543 { 
TIFFTAG_YPOSITION
, "YPosition" },

544 { 
TIFFTAG_FREEOFFSETS
, "FreeOffsets" },

545 { 
TIFFTAG_FREEBYTECOUNTS
, "FreeByteCounts" },

546 { 
TIFFTAG_GRAYRESPONSEUNIT
, "GrayResponseUnit" },

547 { 
TIFFTAG_GRAYRESPONSECURVE
,"GrayResponseCurve" },

548 { 
TIFFTAG_GROUP3OPTIONS
, "Group3Options" },

549 { 
TIFFTAG_GROUP4OPTIONS
, "Group4Options" },

550 { 
TIFFTAG_RESOLUTIONUNIT
, "ResolutionUnit" },

551 { 
TIFFTAG_PAGENUMBER
, "PageNumber" },

552 { 
TIFFTAG_COLORRESPONSEUNIT
,"ColorResponseUnit" },

553 { 
TIFFTAG_TRANSFERFUNCTION
, "TransferFunction" },

554 { 
TIFFTAG_SOFTWARE
, "Software" },

555 { 
TIFFTAG_DATETIME
, "DateTime" },

556 { 
TIFFTAG_ARTIST
, "Artist" },

557 { 
TIFFTAG_HOSTCOMPUTER
, "HostComputer" },

558 { 
TIFFTAG_PREDICTOR
, "Predictor" },

559 { 
TIFFTAG_WHITEPOINT
, "Whitepoint" },

560 { 
TIFFTAG_PRIMARYCHROMATICITIES
,"PrimaryChromaticities" },

561 { 
TIFFTAG_COLORMAP
, "Colormap" },

562 { 
TIFFTAG_HALFTONEHINTS
, "HalftoneHints" },

563 { 
TIFFTAG_TILEWIDTH
, "TileWidth" },

564 { 
TIFFTAG_TILELENGTH
, "TileLength" },

565 { 
TIFFTAG_TILEOFFSETS
, "TileOffsets" },

566 { 
TIFFTAG_TILEBYTECOUNTS
, "TileByteCounts" },

567 { 
TIFFTAG_BADFAXLINES
, "BadFaxLines" },

568 { 
TIFFTAG_CLEANFAXDATA
, "CleanFaxData" },

569 { 
TIFFTAG_CONSECUTIVEBADFAXLINES
, "ConsecutiveBadFaxLines" },

570 { 
TIFFTAG_SUBIFD
, "SubIFD" },

571 { 
TIFFTAG_INKSET
, "InkSet" },

572 { 
TIFFTAG_INKNAMES
, "InkNames" },

573 { 
TIFFTAG_NUMBEROFINKS
, "NumberOfInks" },

574 { 
TIFFTAG_DOTRANGE
, "DotRange" },

575 { 
TIFFTAG_TARGETPRINTER
, "TargetPrinter" },

576 { 
TIFFTAG_EXTRASAMPLES
, "ExtraSamples" },

577 { 
TIFFTAG_SAMPLEFORMAT
, "SampleFormat" },

578 { 
TIFFTAG_SMINSAMPLEVALUE
, "SMinSampleValue" },

579 { 
TIFFTAG_SMAXSAMPLEVALUE
, "SMaxSampleValue" },

580 { 
TIFFTAG_JPEGPROC
, "JPEGProcessingMode" },

581 { 
TIFFTAG_JPEGIFOFFSET
, "JPEGInterchangeFormat" },

582 { 
TIFFTAG_JPEGIFBYTECOUNT
, "JPEGInterchangeFormatLength" },

583 { 
TIFFTAG_JPEGRESTARTINTERVAL
,"JPEGRestartInterval" },

584 { 
TIFFTAG_JPEGLOSSLESSPREDICTORS
,"JPEGLosslessPredictors" },

585 { 
TIFFTAG_JPEGPOINTTRANSFORM
,"JPEGPointTransform" },

586 { 
TIFFTAG_JPEGTABLES
, "JPEGTables" },

587 { 
TIFFTAG_JPEGQTABLES
, "JPEGQTables" },

588 { 
TIFFTAG_JPEGDCTABLES
, "JPEGDCTables" },

589 { 
TIFFTAG_JPEGACTABLES
, "JPEGACTables" },

590 { 
TIFFTAG_YCBCRCOEFFICIENTS
,"YCbCrCoefficients" },

591 { 
TIFFTAG_YCBCRSUBSAMPLING
, "YCbCrSubsampling" },

592 { 
TIFFTAG_YCBCRPOSITIONING
, "YCbCrPositioning" },

593 { 
TIFFTAG_REFERENCEBLACKWHITE
, "ReferenceBlackWhite" },

594 { 
TIFFTAG_REFPTS
, "IgReferencePoints (Island Graphics)" },

595 { 
TIFFTAG_REGIONTACKPOINT
, "IgRegionTackPoint (Island Graphics)" },

596 { 
TIFFTAG_REGIONWARPCORNERS
,"IgRegionWarpCorners (Island Graphics)" },

597 { 
TIFFTAG_REGIONAFFINE
, "IgRegionAffine (Island Graphics)" },

598 { 
TIFFTAG_MATTEING
, "OBSOLETE Matteing (Silicon Graphics)" },

599 { 
TIFFTAG_DATATYPE
, "OBSOLETE DataType (Silicon Graphics)" },

600 { 
TIFFTAG_IMAGEDEPTH
, "ImageDepth (Silicon Graphics)" },

601 { 
TIFFTAG_TILEDEPTH
, "TileDepth (Silicon Graphics)" },

603 { 
TIFFTAG_COPYRIGHT
, "Copyright" },

604 { 
TIFFTAG_ICCPROFILE
, "ICC Profile" },

605 { 
TIFFTAG_JBIGOPTIONS
, "JBIG Options" },

606 { 
TIFFTAG_STONITS
, "StoNits" },

608 
	#NTAGS
 ( (
èg«mes
Ë/  (èg«mes[0]))

	)

611 
	$PrötTag
(
FILE
* 
fd
, 
uöt16
 
èg
)

613 c⁄° 
èg«me
 *
ç
;

615 
ç
 = 
èg«mes
;Å∞< &èg«mes[
NTAGS
];Åp++)

616 i‡(
ç
->
èg
 ==Åag) {

617 
	`Ârötf
(
fd
, "%†(%u)", 
ç
->
«me
, 
èg
);

620 
	`Ârötf
(
fd
, "%u (%#x)", 
èg
,Åag);

621 
	}
}

624 
	$PrötTy≥
(
FILE
* 
fd
, 
uöt16
 
ty≥
)

626 c⁄° *
ty≥«mes
[] = {

647 
	#NTYPES
 ( (
ty≥«mes
Ë/  (ty≥«mes[0]))

	)

649 i‡(
ty≥
 < 
NTYPES
)

650 
	`Ârötf
(
fd
, "%†(%u)", 
ty≥«mes
[
ty≥
],Åype);

652 
	`Ârötf
(
fd
, "%u (%#x)", 
ty≥
,Åype);

653 
	}
}

654 #unde‡
NTYPES


656 
	~<˘y≥.h
>

659 
	$PrötASCII
(
FILE
* 
fd
, 
uöt32
 
cc
, c⁄° * 
˝
)

661 ; 
cc
 > 0; cc--, 
˝
++) {

662 c⁄° * 
ç
;

664 i‡(
	`i•röt
(*
˝
)) {

665 
	`Âutc
(*
˝
, 
fd
);

668 
ç
 = "\tt\bb\rr\nn\vv"; *tp;Åp++)

669 i‡(*
ç
++ =*
˝
)

671 i‡(*
ç
)

672 
	`Ârötf
(
fd
, "\\%c", *
ç
);

673 i‡(*
˝
)

674 
	`Ârötf
(
fd
, "\\%03o", *
˝
);

676 
	`Ârötf
(
fd
, "\\0");

678 
	}
}

681 
	$PrötD©a
(
FILE
* 
fd
, 
uöt16
 
ty≥
, 
uöt32
 
cou¡
, * 
d©a
)

683 * 
£p
 = "";

685 
ty≥
) {

686 
TIFF_BYTE
:

687 
cou¡
-- > 0)

688 
	`Ârötf
(
fd
, 
byãfmt
, 
£p
, *
d©a
++), sep = " ";

690 
TIFF_SBYTE
:

691 
cou¡
-- > 0)

692 
	`Ârötf
(
fd
, 
sbyãfmt
, 
£p
, *(*)
d©a
++), sep = " ";

694 
TIFF_UNDEFINED
:

695 
cou¡
-- > 0)

696 
	`Ârötf
(
fd
, 
byãfmt
, 
£p
, *
d©a
++), sep = " ";

698 
TIFF_ASCII
:

699 
	`PrötASCII
(
fd
, 
cou¡
, 
d©a
);

701 
TIFF_SHORT
: {

702 
uöt16
 *
wp
 = (uöt16*)
d©a
;

703 
cou¡
-- > 0)

704 
	`Ârötf
(
fd
, 
sh‹tfmt
, 
£p
, *
wp
++), sep = " ";

707 
TIFF_SSHORT
: {

708 
öt16
 *
wp
 = (öt16*)
d©a
;

709 
cou¡
-- > 0)

710 
	`Ârötf
(
fd
, 
ssh‹tfmt
, 
£p
, *
wp
++), sep = " ";

713 
TIFF_LONG
: {

714 
uöt32
 *
Õ
 = (uöt32*)
d©a
;

715 
cou¡
-- > 0) {

716 
	`Ârötf
(
fd
, 
l⁄gfmt
, 
£p
, (Ë*
Õ
++);

717 
£p
 = " ";

721 
TIFF_SLONG
: {

722 
öt32
 *
Õ
 = (öt32*)
d©a
;

723 
cou¡
-- > 0)

724 
	`Ârötf
(
fd
, 
¶⁄gfmt
, 
£p
, (Ë*
Õ
++), sep = " ";

727 
TIFF_LONG8
: {

728 
uöt64
 *
Œp
 = (uöt64*)
d©a
;

729 
cou¡
-- > 0) {

730 #i‡
	`deföed
(
__WIN32__
Ë&& deföed(
_MSC_VER
)

731 
	`Ârötf
(
fd
, 
l⁄g8fmt
, 
£p
, (
__öt64
Ë*
Œp
++);

733 
	`Ârötf
(
fd
, 
l⁄g8fmt
, 
£p
, (Ë*
Œp
++);

735 
£p
 = " ";

739 
TIFF_SLONG8
: {

740 
öt64
 *
Œp
 = (öt64*)
d©a
;

741 
cou¡
-- > 0)

742 #i‡
	`deföed
(
__WIN32__
Ë&& deföed(
_MSC_VER
)

743 
	`Ârötf
(
fd
, 
¶⁄g8fmt
, 
£p
, (
__öt64
Ë*
Œp
++), sep = " ";

745 
	`Ârötf
(
fd
, 
¶⁄g8fmt
, 
£p
, (Ë*
Œp
++), sep = " ";

749 
TIFF_RATIONAL
: {

750 
uöt32
 *
Õ
 = (uöt32*)
d©a
;

751 
cou¡
-- > 0) {

752 i‡(
Õ
[1] == 0)

753 
	`Ârötf
(
fd
, "%sN™ (%lu/%lu)", 
£p
,

754 (Ë
Õ
[0],

755 (Ë
Õ
[1]);

757 
	`Ârötf
(
fd
, 
øti⁄Æfmt
, 
£p
,

758 ()
Õ
[0] / ()lp[1]);

759 
£p
 = " ";

760 
Õ
 += 2;

764 
TIFF_SRATIONAL
: {

765 
öt32
 *
Õ
 = (öt32*)
d©a
;

766 
cou¡
-- > 0) {

767 i‡(
Õ
[1] == 0)

768 
	`Ârötf
(
fd
, "%sN™ (%ld/%ld)", 
£p
,

769 (Ë
Õ
[0], ()Üp[1]);

771 
	`Ârötf
(
fd
, 
§©i⁄Æfmt
, 
£p
,

772 ()
Õ
[0] / ()lp[1]);

773 
£p
 = " ";

774 
Õ
 += 2;

778 
TIFF_FLOAT
: {

779 *
Â
 = (*)
d©a
;

780 
cou¡
-- > 0)

781 
	`Ârötf
(
fd
, 
Êﬂtfmt
, 
£p
, *
Â
++), sep = " ";

784 
TIFF_DOUBLE
: {

785 *
dp
 = (*)
d©a
;

786 
cou¡
-- > 0)

787 
	`Ârötf
(
fd
, 
doubÀfmt
, 
£p
, *
dp
++), sep = " ";

790 
TIFF_IFD
: {

791 
uöt32
 *
Õ
 = (uöt32*)
d©a
;

792 
cou¡
-- > 0) {

793 
	`Ârötf
(
fd
, 
ifdfmt
, 
£p
, (Ë*
Õ
++);

794 
£p
 = " ";

798 
TIFF_IFD8
: {

799 
uöt64
 *
Œp
 = (uöt64*)
d©a
;

800 
cou¡
-- > 0) {

801 #i‡
	`deföed
(
__WIN32__
Ë&& deföed(
_MSC_VER
)

802 
	`Ârötf
(
fd
, 
ifd8fmt
, 
£p
, (
__öt64
Ë*
Œp
++);

804 
	`Ârötf
(
fd
, 
ifd8fmt
, 
£p
, (Ë*
Œp
++);

806 
£p
 = " ";

811 
	}
}

814 
	$RódEº‹
(* 
wh©
)

816 
	`F©Æ
("Eº‹ whûêªadög %s", 
wh©
);

817 
	}
}

819 
	~<°d¨g.h
>

822 
	$vEº‹
(
FILE
* 
fd
, c⁄° * 
fmt
, 
va_li°
 
≠
)

824 
	`Ârötf
(
fd
, "%s: ", 
curfûe
);

825 
	`vÂrötf
(
fd
, 
fmt
, 
≠
);

826 
	`Ârötf
(
fd
, ".\n");

827 
	}
}

830 
	$Eº‹
(c⁄° * 
fmt
, ...)

832 
va_li°
 
≠
;

833 
	`va_°¨t
(
≠
, 
fmt
);

834 
	`vEº‹
(
°dîr
, 
fmt
, 
≠
);

835 
	`va_íd
(
≠
);

836 
	}
}

839 
	$F©Æ
(c⁄° * 
fmt
, ...)

841 
va_li°
 
≠
;

842 
	`va_°¨t
(
≠
, 
fmt
);

843 
	`vEº‹
(
°dîr
, 
fmt
, 
≠
);

844 
	`va_íd
(
≠
);

845 
	`exô
(-1);

846 
	}
}

	@tools/tiffgt.c

28 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

34 #i‡
HAVE_APPLE_OPENGL_FRAMEWORK


35 
	~<O≥nGL/gl.h
>

36 
	~<GLUT/glut.h
>

38 
	~<GL/gl.h
>

39 
	~<GL/glut.h
>

42 
	~"tiffio.h
"

43 
	~"tiffi›.h
"

45 #i‚de‡
HAVE_GETOPT


46 
gë›t
(, **, *);

49 
uöt32
 
	gwidth
 = 0, 
	gheight
 = 0;

50 
uöt32
* 
	gø°î
 = 
NULL
;

51 
TIFFRGBAImage
 
	gimg
;

52 
	g‹dî0
 = 0, 
	g‹dî
;

53 
uöt16
 
	gphŸo0
 = (uöt16Ë-1, 
	gphŸo
;

54 
	g°›⁄îr
 = 0;

55 
	gvîbo£
 = 0;

56 
	#TITLE_LENGTH
 1024

	)

57 
	gtôÀ
[
TITLE_LENGTH
];

58 
uöt32
 
	gxmax
, 
	gymax
;

59 ** 
	gfûñi°
 = 
NULL
;

60 
	gfûeödex
;

61 
	gfûíum
;

62 
TIFFEº‹H™dÀr
 
	g€º‹
;

63 
TIFFEº‹H™dÀr
 
	gow¨nög
;

65 
˛ónup_™d_exô
();

66 
öôImage
();

67 
¥evImage
();

68 
√xtImage
();

69 
£tWödowSize
();

70 
ußge
();

71 
uöt16
 
phŸoArg
(const *);

72 
ø°î_døw
();

73 
ø°î_ªsh≠e
(, );

74 
ø°î_keys
(, , );

75 
ø°î_•ecül
(, , );

77 * 
›èrg
;

78 
›töd
;

79 
TIFF
* 
	gtif
 = 
NULL
;

82 
	$maö
(
¨gc
, * 
¨gv
[])

84 
c
;

85 
dúnum
 = -1;

86 
uöt32
 
dúoff
 = 0;

88 
€º‹
 = 
	`TIFFSëEº‹H™dÀr
(
NULL
);

89 
ow¨nög
 = 
	`TIFFSëW¨nögH™dÀr
(
NULL
);

90 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:o:p:eflmsvw?")) != -1)

91 
c
) {

93 
dúnum
 = 
	`©oi
(
›èrg
);

96 
€º‹
 = 
	`TIFFSëEº‹H™dÀr
(oerror);

99 
‹dî0
 = 
FILLORDER_LSB2MSB
;

102 
‹dî0
 = 
FILLORDER_MSB2LSB
;

105 
dúoff
 = 
	`°πoul
(
›èrg
, 
NULL
, 0);

108 
phŸo0
 = 
	`phŸoArg
(
›èrg
);

111 
°›⁄îr
 = 1;

114 
ow¨nög
 = 
	`TIFFSëW¨nögH™dÀr
(owarning);

117 
vîbo£
 = 1;

120 
	`ußge
();

123 
fûíum
 = 
¨gc
 - 
›töd
;

124 i‡–
fûíum
 < 1)

125 
	`ußge
();

127 
	`glutInô
(&
¨gc
, 
¨gv
);

128 
	`glutInôDi•œyMode
(
GLUT_SINGLE
 | 
GLUT_RGB
);

133 
xmax
 = 
	`glutGë
(
GLUT_SCREEN_WIDTH
);

134 
ymax
 = 
	`glutGë
(
GLUT_SCREEN_HEIGHT
);

139 
xmax
 = xmax - xmax / 10.0;

140 
ymax
 = ymax - ymax / 10.0;

142 
fûñi°
 = (**Ë
	`_TIFFmÆloc
(
fûíum
 * (*));

143 i‡(!
fûñi°
) {

144 
	`TIFFEº‹
(
¨gv
[0], "CanÇotállocate space forÅhe fileÜist.");

147 
	`_TIFFmem˝y
(
fûñi°
, 
¨gv
 + 
›töd
, 
fûíum
 * (*));

148 
fûeödex
 = -1;

149 i‡(
	`√xtImage
() < 0) {

150 
	`_TIFF‰ì
(
fûñi°
);

157 i‡(
dúnum
 !-1 && !
	`TIFFSëDúe˘‹y
(
tif
, dirnum))

158 
	`TIFFEº‹
(
¨gv
[0], "Eº‹, sìkögÅÿdúe˘‹y %d", 
dúnum
);

159 i‡(
dúoff
 !0 && !
	`TIFFSëSubDúe˘‹y
(
tif
, diroff))

160 
	`TIFFEº‹
(
¨gv
[0], "Eº‹, sëtög subdúe˘‹yáà%#x", 
dúoff
);

161 
‹dî
 = 
‹dî0
;

162 
phŸo
 = 
phŸo0
;

163 i‡(
	`öôImage
() < 0){

164 
	`_TIFF‰ì
(
fûñi°
);

171 
	`glutInôWödowSize
(
width
, 
height
);

172 
	`¢¥ötf
(
tôÀ
, 
TITLE_LENGTH
 - 1, "%†[%u]", 
fûñi°
[
fûeödex
],

173 (Ë
	`TIFFCuºítDúe˘‹y
(
tif
));

174 
	`glutCª©eWödow
(
tôÀ
);

175 
	`glutDi•œyFunc
(
ø°î_døw
);

176 
	`glutResh≠eFunc
(
ø°î_ªsh≠e
);

177 
	`glutKeybﬂrdFunc
(
ø°î_keys
);

178 
	`glutS≥cülFunc
(
ø°î_•ecül
);

179 
	`glutMaöLo›
();

181 
	`˛ónup_™d_exô
();

183 
	}
}

186 
	$˛ónup_™d_exô
()

188 
	`TIFFRGBAImageEnd
(&
img
);

189 i‡(
fûñi°
 !
NULL
)

190 
	`_TIFF‰ì
(
fûñi°
);

191 i‡(
ø°î
 !
NULL
)

192 
	`_TIFF‰ì
(
ø°î
);

193 i‡(
tif
 !
NULL
)

194 
	`TIFFClo£
(
tif
);

195 
	`exô
(0);

196 
	}
}

199 
	$öôImage
()

201 
uöt32
 
w
, 
h
;

203 i‡(
‹dî
)

204 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_FILLORDER
, 
‹dî
);

205 i‡(
phŸo
 !(
uöt16
) -1)

206 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_PHOTOMETRIC
, 
phŸo
);

207 i‡(!
	`TIFFRGBAImageBegö
(&
img
, 
tif
, 
°›⁄îr
, 
tôÀ
)) {

208 
	`TIFFEº‹
(
fûñi°
[
fûeödex
], "%s", 
tôÀ
);

209 
	`TIFFClo£
(
tif
);

210 
tif
 = 
NULL
;

217 
h
 = 
img
.
height
;

218 
w
 = 
img
.
width
;

219 i‡(
h
 > 
ymax
) {

220 
w
 = ()(w * (()
ymax
 / 
h
));

221 
h
 = 
ymax
;

223 i‡(
w
 > 
xmax
) {

224 
h
 = ()(h * (()
xmax
 / 
w
));

225 
w
 = 
xmax
;

228 i‡(
w
 !
width
 || 
h
 !
height
) {

229 
uöt32
 
ø°îsize
 =

230 
	`_TIFFMu…ùly32
(
tif
, 
img
.
width
, img.
height
, "allocatingÑaster buffer");

231 i‡(
ø°î
 !
NULL
)

232 
	`_TIFF‰ì
(
ø°î
),Ña°î = 
NULL
;

233 
ø°î
 = (
uöt32
*Ë
	`_TIFFCheckMÆloc
(
tif
, 
ø°îsize
,  (uint32),

235 i‡(
ø°î
 =
NULL
) {

236 
width
 = 
height
 = 0;

237 
	`TIFFEº‹
(
fûñi°
[
fûeödex
], "No space forÑaster buffer");

238 
	`˛ónup_™d_exô
();

240 
width
 = 
w
;

241 
height
 = 
h
;

243 
	`TIFFRGBAImageGë
(&
img
, 
ø°î
, img.
width
, img.
height
);

244 #i‡
HOST_BIGENDIAN


245 
	`TIFFSwabAºayOfL⁄g
(
ø°î
,
img
.
width
*img.
height
);

248 
	}
}

251 
	$¥evImage
()

253 i‡(
fûeödex
 > 0)

254 
fûeödex
--;

255 i‡(
tif
)

256  
fûeödex
;

257 i‡(
tif
)

258 
	`TIFFClo£
(
tif
);

259 
tif
 = 
	`TIFFO≥n
(
fûñi°
[
fûeödex
], "r");

260 i‡(
tif
 =
NULL
)

262  
fûeödex
;

263 
	}
}

266 
	$√xtImage
()

268 i‡(
fûeödex
 < 
fûíum
 - 1)

269 
fûeödex
++;

270 i‡(
tif
)

271  
fûeödex
;

272 i‡(
tif
)

273 
	`TIFFClo£
(
tif
);

274 
tif
 = 
	`TIFFO≥n
(
fûñi°
[
fûeödex
], "r");

275 i‡(
tif
 =
NULL
)

277  
fûeödex
;

278 
	}
}

281 
	$£tWödowSize
()

283 
	`glutResh≠eWödow
(
width
, 
height
);

284 
	}
}

287 
	$ø°î_døw
()

289 
	`glDøwPixñs
(
img
.
width
, img.
height
, 
GL_RGBA
, 
GL_UNSIGNED_BYTE
, (c⁄° 
GLvoid
 *Ë
ø°î
);

290 
	}
}

293 
	$ø°î_ªsh≠e
(
wö_w
, 
wö_h
)

295 
GLÊﬂt
 
xøtio
 = (GLÊﬂt)
wö_w
/
img
.
width
;

296 
GLÊﬂt
 
yøtio
 = (GLÊﬂt)
wö_h
/
img
.
height
;

297 
øtio
 = ()(((
xøtio
 > 
yøtio
)?xratio:yratio) * 100);

299 
	`glPixñZoom
(
xøtio
, 
yøtio
);

300 
	`glVõwp‹t
(0, 0, 
wö_w
, 
wö_h
);

301 
	`¢¥ötf
(
tôÀ
, 1024, "%†[%u] %d%%", 
fûñi°
[
fûeödex
],

302 (Ë
	`TIFFCuºítDúe˘‹y
(
tif
), 
øtio
);

303 
	`glutSëWödowTôÀ
(
tôÀ
);

304 
	}
}

307 
	$ø°î_keys
(
key
, 
x
, 
y
)

309 
key
) {

311 
phŸo
 = 
PHOTOMETRIC_MINISBLACK
;

312 
	`öôImage
();

315 
‹dî
 = 
FILLORDER_LSB2MSB
;

316 
	`öôImage
();

319 
‹dî
 = 
FILLORDER_MSB2LSB
;

320 
	`öôImage
();

323 
phŸo
 = 
PHOTOMETRIC_MINISWHITE
;

324 
	`öôImage
();

327 
ow¨nög
 = 
	`TIFFSëW¨nögH™dÀr
(owarning);

328 
	`öôImage
();

331 
€º‹
 = 
	`TIFFSëEº‹H™dÀr
(oerror);

332 
	`öôImage
();

336 
‹dî
 = 
‹dî0
;

337 
phŸo
 = 
phŸo0
;

338 i‡(
ow¨nög
 =
NULL
)

339 
ow¨nög
 = 
	`TIFFSëW¨nögH™dÀr
(
NULL
);

340 i‡(
€º‹
 =
NULL
)

341 
€º‹
 = 
	`TIFFSëEº‹H™dÀr
(
NULL
);

342 
	`öôImage
();

346 
	`˛ónup_™d_exô
();

348 
	`glutPo°Redi•œy
();

349 
	}
}

352 
	$ø°î_•ecül
(
key
, 
x
, 
y
)

354 
key
) {

355 
GLUT_KEY_PAGE_UP
:

356 i‡(
	`TIFFCuºítDúe˘‹y
(
tif
) > 0) {

357 i‡(
	`TIFFSëDúe˘‹y
(
tif
,

358 
	`TIFFCuºítDúe˘‹y
(
tif
)-1)) {

359 
	`öôImage
();

360 
	`£tWödowSize
();

363 
	`TIFFRGBAImageEnd
(&
img
);

364 
	`¥evImage
();

365 
	`öôImage
();

366 
	`£tWödowSize
();

369 
GLUT_KEY_PAGE_DOWN
:

370 i‡(!
	`TIFFLa°Dúe˘‹y
(
tif
)) {

371 i‡(
	`TIFFRódDúe˘‹y
(
tif
)) {

372 
	`öôImage
();

373 
	`£tWödowSize
();

376 
	`TIFFRGBAImageEnd
(&
img
);

377 
	`√xtImage
();

378 
	`öôImage
();

379 
	`£tWödowSize
();

382 
GLUT_KEY_HOME
:

383 i‡(
	`TIFFSëDúe˘‹y
(
tif
, 0)) {

384 
	`TIFFRGBAImageEnd
(&
img
);

385 
	`öôImage
();

386 
	`£tWödowSize
();

389 
GLUT_KEY_END
:

390 
	`TIFFRGBAImageEnd
(&
img
);

391 !
	`TIFFLa°Dúe˘‹y
(
tif
))

392 
	`TIFFRódDúe˘‹y
(
tif
);

393 
	`öôImage
();

394 
	`£tWödowSize
();

397 
	`glutPo°Redi•œy
();

398 
	}
}

402 * 
	g°uff
[] = {

416 
NULL


420 
	$ußge
()

422 
buf
[
BUFSIZ
];

423 
i
;

425 
	`£tbuf
(
°dîr
, 
buf
);

426 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

427 
i
 = 0; 
°uff
[i] !
NULL
; i++)

428 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

429 
	`exô
(-1);

430 
	}
}

432 
uöt16


433 
	$phŸoArg
(c⁄° * 
¨g
)

435 i‡(
	`°rcmp
(
¨g
, "miniswhite") == 0)

436  (
PHOTOMETRIC_MINISWHITE
);

437 i‡(
	`°rcmp
(
¨g
, "minisblack") == 0)

438  (
PHOTOMETRIC_MINISBLACK
);

439 i‡(
	`°rcmp
(
¨g
, "rgb") == 0)

440  (
PHOTOMETRIC_RGB
);

441 i‡(
	`°rcmp
(
¨g
, "palette") == 0)

442  (
PHOTOMETRIC_PALETTE
);

443 i‡(
	`°rcmp
(
¨g
, "mask") == 0)

444  (
PHOTOMETRIC_MASK
);

445 i‡(
	`°rcmp
(
¨g
, "separated") == 0)

446  (
PHOTOMETRIC_SEPARATED
);

447 i‡(
	`°rcmp
(
¨g
, "ycbcr") == 0)

448  (
PHOTOMETRIC_YCBCR
);

449 i‡(
	`°rcmp
(
¨g
, "cielab") == 0)

450  (
PHOTOMETRIC_CIELAB
);

451 i‡(
	`°rcmp
(
¨g
, "logl") == 0)

452  (
PHOTOMETRIC_LOGL
);

453 i‡(
	`°rcmp
(
¨g
, "logluv") == 0)

454  (
PHOTOMETRIC_LOGLUV
);

456  ((
uöt16
) -1);

457 
	}
}

	@tools/tiffinfo.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

33 #ifde‡
HAVE_STRINGS_H


34 
	~<°rögs.h
>

37 #ifde‡
HAVE_UNISTD_H


38 
	~<uni°d.h
>

41 #ifde‡
NEED_LIBPORT


42 
	~"libp‹t.h
"

45 
	~"tiffi›.h
"

47 
TIFFEº‹H™dÀr
 
	gﬁd_îr‹_h™dÀr
 = 0;

48 
	g°©us
 = 0;

49 
	gshowd©a
 = 0;

50 
	gøwd©a
 = 0;

51 
	gshoww‹ds
 = 0;

52 
	gªadd©a
 = 0;

53 
	g°›⁄îr
 = 1;

55 
ußge
();

56 
tifföfo
(
TIFF
*, 
uöt16
, );

59 
	$Priv©eEº‹H™dÀr
(c⁄° * 
moduÀ
, c⁄° * 
fmt
, 
va_li°
 
≠
)

61 i‡(
ﬁd_îr‹_h™dÀr
)

62 (*
ﬁd_îr‹_h™dÀr
)(
moduÀ
,
fmt
,
≠
);

63 
°©us
 = 1;

64 
	}
}

67 
	$maö
(
¨gc
, * 
¨gv
[])

69 
dúnum
 = -1, 
mu…ùÀfûes
, 
c
;

70 
uöt16
 
‹dî
 = 0;

71 
TIFF
* 
tif
;

72 
›töd
;

73 * 
›èrg
;

74 
Êags
 = 0;

75 
uöt64
 
dúoff
 = 0;

76 
ch›°rùs
 = 0;

78 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "f:o:cdDSjilmrsvwz0123456789")) != -1)

79 
c
) {

83 
dúnum
 = 
	`©oi
(&
¨gv
[
›töd
-1][1]);

86 
showd©a
++;

89 
ªadd©a
++;

92 
Êags
 |
TIFFPRINT_COLORMAP
 | 
TIFFPRINT_CURVES
;

95 i‡(
	`°ªq
(
›èrg
, "lsb2msb"))

96 
‹dî
 = 
FILLORDER_LSB2MSB
;

97 i‡(
	`°ªq
(
›èrg
, "msb2lsb"))

98 
‹dî
 = 
FILLORDER_MSB2LSB
;

100 
	`ußge
();

103 
°›⁄îr
 = 0;

106 
dúoff
 = 
	`°πoul
(
›èrg
, 
NULL
, 0);

109 
Êags
 |
TIFFPRINT_JPEGQTABLES
 |

110 
TIFFPRINT_JPEGACTABLES
 |

111 
TIFFPRINT_JPEGDCTABLES
;

114 
øwd©a
 = 1;

117 
Êags
 |
TIFFPRINT_STRIPS
;

120 
showw‹ds
 = 1;

123 
ch›°rùs
 = 1;

126 
	`ußge
();

129 i‡(
›töd
 >
¨gc
)

130 
	`ußge
();

132 
ﬁd_îr‹_h™dÀr
 = 
	`TIFFSëEº‹H™dÀr
(
Priv©eEº‹H™dÀr
);

134 
mu…ùÀfûes
 = (
¨gc
 - 
›töd
 > 1);

135 ; 
›töd
 < 
¨gc
; optind++) {

136 i‡(
mu…ùÀfûes
)

137 
	`¥ötf
("%s:\n", 
¨gv
[
›töd
]);

138 
tif
 = 
	`TIFFO≥n
(
¨gv
[
›töd
], 
ch›°rùs
 ? "rC" : "rc");

139 i‡(
tif
 !
NULL
) {

140 i‡(
dúnum
 != -1) {

141 i‡(
	`TIFFSëDúe˘‹y
(
tif
, (
tdú_t
Ë
dúnum
))

142 
	`tifföfo
(
tif
, 
‹dî
, 
Êags
);

143 } i‡(
dúoff
 != 0) {

144 i‡(
	`TIFFSëSubDúe˘‹y
(
tif
, 
dúoff
))

145 
	`tifföfo
(
tif
, 
‹dî
, 
Êags
);

148 
toff_t
 
off£t
;

150 
	`tifföfo
(
tif
, 
‹dî
, 
Êags
);

151 i‡(
	`TIFFGëFõld
(
tif
, 
TIFFTAG_EXIFIFD
,

152 &
off£t
)) {

153 i‡(
	`TIFFRódEXIFDúe˘‹y
(
tif
, 
off£t
))

154 
	`tifföfo
(
tif
, 
‹dî
, 
Êags
);

156 } 
	`TIFFRódDúe˘‹y
(
tif
));

158 
	`TIFFClo£
(
tif
);

161  (
°©us
);

162 
	}
}

164 * 
	g°uff
[] = {

180 
NULL


184 
	$ußge
()

186 
buf
[
BUFSIZ
];

187 
i
;

189 
	`£tbuf
(
°dîr
, 
buf
);

190 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

191 
i
 = 0; 
°uff
[i] !
NULL
; i++)

192 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

193 
	`exô
(-1);

194 
	}
}

197 
	$ShowSåù
(
t°rù_t
 
°rù
, * 
µ
, 
uöt32
 
ƒow
, 
tsize_t
 
sˇ∆öe
)

199 
tsize_t
 
cc
;

201 
	`¥ötf
("Såù %lu:\n", (Ë
°rù
);

202 
ƒow
-- > 0) {

203 
cc
 = 0; c¯< 
sˇ∆öe
; cc++) {

204 
	`¥ötf
(" %02x", *
µ
++);

205 i‡(((
cc
+1) % 24) == 0)

206 
	`putch¨
('\n');

208 
	`putch¨
('\n');

210 
	}
}

213 
	$TIFFRódC⁄tigSåùD©a
(
TIFF
* 
tif
)

215 *
buf
;

216 
tsize_t
 
sˇ∆öe
 = 
	`TIFFSˇ∆öeSize
(
tif
);

218 
buf
 = (*)
	`_TIFFmÆloc
(
	`TIFFSåùSize
(
tif
));

219 i‡(
buf
) {

220 
uöt32
 
row
, 
h
;

221 
uöt32
 
row•î°rù
 = (uint32)-1;

223 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
h
);

224 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

225 
row
 = 0;Ñow < 
h
;Ñow +
row•î°rù
) {

226 
uöt32
 
ƒow
 = (
row
+
row•î°rù
 > 
h
 ?

227 
h
-
row
 : 
row•î°rù
);

228 
t°rù_t
 
°rù
 = 
	`TIFFCompuãSåù
(
tif
, 
row
, 0);

229 i‡(
	`TIFFRódEncodedSåù
(
tif
, 
°rù
, 
buf
, 
ƒow
*
sˇ∆öe
) < 0) {

230 i‡(
°›⁄îr
)

232 } i‡(
showd©a
)

233 
	`ShowSåù
(
°rù
, 
buf
, 
ƒow
, 
sˇ∆öe
);

235 
	`_TIFF‰ì
(
buf
);

237 
	}
}

240 
	$TIFFRódSï¨©eSåùD©a
(
TIFF
* 
tif
)

242 *
buf
;

243 
tsize_t
 
sˇ∆öe
 = 
	`TIFFSˇ∆öeSize
(
tif
);

245 
buf
 = (*)
	`_TIFFmÆloc
(
	`TIFFSåùSize
(
tif
));

246 i‡(
buf
) {

247 
uöt32
 
row
, 
h
;

248 
uöt32
 
row•î°rù
 = (uint32)-1;

249 
tßm∂e_t
 
s
, 
ßm∂e•îpixñ
;

251 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
h
);

252 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_ROWSPERSTRIP
, &
row•î°rù
);

253 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, &
ßm∂e•îpixñ
);

254 
row
 = 0;Ñow < 
h
;Ñow +
row•î°rù
) {

255 
s
 = 0; s < 
ßm∂e•îpixñ
; s++) {

256 
uöt32
 
ƒow
 = (
row
+
row•î°rù
 > 
h
 ?

257 
h
-
row
 : 
row•î°rù
);

258 
t°rù_t
 
°rù
 = 
	`TIFFCompuãSåù
(
tif
, 
row
, 
s
);

259 i‡(
	`TIFFRódEncodedSåù
(
tif
, 
°rù
, 
buf
, 
ƒow
*
sˇ∆öe
) < 0) {

260 i‡(
°›⁄îr
)

262 } i‡(
showd©a
)

263 
	`ShowSåù
(
°rù
, 
buf
, 
ƒow
, 
sˇ∆öe
);

266 
	`_TIFF‰ì
(
buf
);

268 
	}
}

271 
	$ShowTûe
(
uöt32
 
row
, uöt32 
cﬁ
, 
tßm∂e_t
 
ßm∂e
,

272 * 
µ
, 
uöt32
 
ƒow
, 
tsize_t
 
rowsize
)

274 
uöt32
 
cc
;

276 
	`¥ötf
("Tûê(%lu,%lu", (Ë
row
, (Ë
cﬁ
);

277 i‡(
ßm∂e
 !(
tßm∂e_t
) -1)

278 
	`¥ötf
(",%u", 
ßm∂e
);

279 
	`¥ötf
("):\n");

280 
ƒow
-- > 0) {

281 
cc
 = 0; c¯< (
uöt32
Ë
rowsize
; cc++) {

282 
	`¥ötf
(" %02x", *
µ
++);

283 i‡(((
cc
+1) % 24) == 0)

284 
	`putch¨
('\n');

286 
	`putch¨
('\n');

288 
	}
}

291 
	$TIFFRódC⁄tigTûeD©a
(
TIFF
* 
tif
)

293 *
buf
;

294 
tsize_t
 
rowsize
 = 
	`TIFFTûeRowSize
(
tif
);

296 
buf
 = (*)
	`_TIFFmÆloc
(
	`TIFFTûeSize
(
tif
));

297 i‡(
buf
) {

298 
uöt32
 
tw
, 
th
, 
w
, 
h
;

299 
uöt32
 
row
, 
cﬁ
;

301 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, &
w
);

302 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
h
);

303 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILEWIDTH
, &
tw
);

304 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILELENGTH
, &
th
);

305 
row
 = 0;Ñow < 
h
;Ñow +
th
) {

306 
cﬁ
 = 0; cﬁ < 
w
; cﬁ +
tw
) {

307 i‡(
	`TIFFRódTûe
(
tif
, 
buf
, 
cﬁ
, 
row
, 0, 0) < 0) {

308 i‡(
°›⁄îr
)

310 } i‡(
showd©a
)

311 
	`ShowTûe
(
row
, 
cﬁ
, (
tßm∂e_t
Ë-1, 
buf
, 
th
, 
rowsize
);

314 
	`_TIFF‰ì
(
buf
);

316 
	}
}

319 
	$TIFFRódSï¨©eTûeD©a
(
TIFF
* 
tif
)

321 *
buf
;

322 
tsize_t
 
rowsize
 = 
	`TIFFTûeRowSize
(
tif
);

324 
buf
 = (*)
	`_TIFFmÆloc
(
	`TIFFTûeSize
(
tif
));

325 i‡(
buf
) {

326 
uöt32
 
tw
, 
th
, 
w
, 
h
;

327 
uöt32
 
row
, 
cﬁ
;

328 
tßm∂e_t
 
s
, 
ßm∂e•îpixñ
;

330 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGEWIDTH
, &
w
);

331 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_IMAGELENGTH
, &
h
);

332 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILEWIDTH
, &
tw
);

333 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_TILELENGTH
, &
th
);

334 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_SAMPLESPERPIXEL
, &
ßm∂e•îpixñ
);

335 
row
 = 0;Ñow < 
h
;Ñow +
th
) {

336 
cﬁ
 = 0; cﬁ < 
w
; cﬁ +
tw
) {

337 
s
 = 0; s < 
ßm∂e•îpixñ
; s++) {

338 i‡(
	`TIFFRódTûe
(
tif
, 
buf
, 
cﬁ
, 
row
, 0, 
s
) < 0) {

339 i‡(
°›⁄îr
)

341 } i‡(
showd©a
)

342 
	`ShowTûe
(
row
, 
cﬁ
, 
s
, 
buf
, 
th
, 
rowsize
);

346 
	`_TIFF‰ì
(
buf
);

348 
	}
}

351 
	$TIFFRódD©a
(
TIFF
* 
tif
)

353 
uöt16
 
c⁄fig
;

355 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_PLANARCONFIG
, &
c⁄fig
);

356 i‡(
	`TIFFIsTûed
(
tif
)) {

357 i‡(
c⁄fig
 =
PLANARCONFIG_CONTIG
)

358 
	`TIFFRódC⁄tigTûeD©a
(
tif
);

360 
	`TIFFRódSï¨©eTûeD©a
(
tif
);

362 i‡(
c⁄fig
 =
PLANARCONFIG_CONTIG
)

363 
	`TIFFRódC⁄tigSåùD©a
(
tif
);

365 
	`TIFFRódSï¨©eSåùD©a
(
tif
);

367 
	}
}

370 
	$ShowRawByãs
(* 
µ
, 
uöt32
 
n
)

372 
uöt32
 
i
;

374 
i
 = 0; i < 
n
; i++) {

375 
	`¥ötf
(" %02x", *
µ
++);

376 i‡(((
i
+1) % 24) == 0)

377 
	`¥ötf
("\n ");

379 
	`putch¨
('\n');

380 
	}
}

383 
	$ShowRawW‹ds
(
uöt16
* 
µ
, 
uöt32
 
n
)

385 
uöt32
 
i
;

387 
i
 = 0; i < 
n
; i++) {

388 
	`¥ötf
(" %04x", *
µ
++);

389 i‡(((
i
+1) % 15) == 0)

390 
	`¥ötf
("\n ");

392 
	`putch¨
('\n');

393 
	}
}

396 
	$TIFFRódRawD©a
(
TIFF
* 
tif
, 
bôªv
)

398 
t°rù_t
 
n°rùs
 = 
	`TIFFNumbîOfSåùs
(
tif
);

399 c⁄° * 
wh©
 = 
	`TIFFIsTûed
(
tif
) ? "Tile" : "Strip";

400 
uöt64
* 
°rùbc
;

402 
	`TIFFGëFõld
(
tif
, 
TIFFTAG_STRIPBYTECOUNTS
, &
°rùbc
);

403 i‡(
n°rùs
 > 0) {

404 
uöt32
 
bufsize
 = (uöt32Ë
°rùbc
[0];

405 
td©a_t
 
buf
 = 
	`_TIFFmÆloc
(
bufsize
);

406 
t°rù_t
 
s
;

408 
s
 = 0; s < 
n°rùs
; s++) {

409 i‡(
°rùbc
[
s
] > 
bufsize
) {

410 
buf
 = 
	`_TIFFªÆloc
(buf, (
tmsize_t
)
°rùbc
[
s
]);

411 
bufsize
 = (
uöt32
Ë
°rùbc
[
s
];

413 i‡(
buf
 =
NULL
) {

414 
	`Ârötf
(
°dîr
,

416 (Ë
s
);

419 i‡(
	`TIFFRódRawSåù
(
tif
, 
s
, 
buf
, (
tmsize_t
Ë
°rùbc
[s]) < 0) {

420 
	`Ârötf
(
°dîr
, "ErrorÑeading strip %lu\n",

421 (Ë
s
);

422 i‡(
°›⁄îr
)

424 } i‡(
showd©a
) {

425 i‡(
bôªv
) {

426 
	`TIFFRevî£Bôs
(
buf
, (
tmsize_t
)
°rùbc
[
s
]);

427 
	`¥ötf
("%s %lu: (bitÑeversed)\n ",

428 
wh©
, (Ë
s
);

430 
	`¥ötf
("%†%lu:\¿", 
wh©
,

431 (Ë
s
);

432 i‡(
showw‹ds
)

433 
	`ShowRawW‹ds
((
uöt16
*Ë
buf
, (
uöt32
Ë
°rùbc
[
s
]>>1);

435 
	`ShowRawByãs
((*Ë
buf
, (
uöt32
Ë
°rùbc
[
s
]);

438 i‡(
buf
 !
NULL
)

439 
	`_TIFF‰ì
(
buf
);

441 
	}
}

444 
	$tifföfo
(
TIFF
* 
tif
, 
uöt16
 
‹dî
, 
Êags
)

446 
	`TIFFPrötDúe˘‹y
(
tif
, 
°dout
, 
Êags
);

447 i‡(!
ªadd©a
)

449 i‡(
øwd©a
) {

450 i‡(
‹dî
) {

451 
uöt16
 
o
;

452 
	`TIFFGëFõldDeÁu…ed
(
tif
,

453 
TIFFTAG_FILLORDER
, &
o
);

454 
	`TIFFRódRawD©a
(
tif
, 
o
 !
‹dî
);

456 
	`TIFFRódRawD©a
(
tif
, 0);

458 i‡(
‹dî
)

459 
	`TIFFSëFõld
(
tif
, 
TIFFTAG_FILLORDER
, 
‹dî
);

460 
	`TIFFRódD©a
(
tif
);

462 
	}
}

	@tools/tiffmedian.c

43 
	~"tif_c⁄fig.h
"

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

49 #ifde‡
HAVE_UNISTD_H


50 
	~<uni°d.h
>

53 #ifde‡
NEED_LIBPORT


54 
	~"libp‹t.h
"

57 
	~"tiffio.h
"

59 
	#MAX_CMAP_SIZE
 256

	)

61 
	#°ªq
(
a
,
b
Ë(
	`°rcmp
◊,bË=0)

	)

62 
	#°∫eq
(
a
,
b
,
n
Ë(
	`°∫cmp
◊,b,nË=0)

	)

64 
	#COLOR_DEPTH
 8

	)

65 
	#MAX_COLOR
 256

	)

67 
	#B_DEPTH
 5

	)

68 
	#B_LEN
 (1L<<
B_DEPTH
)

	)

70 
	#C_DEPTH
 2

	)

71 
	#C_LEN
 (1L<<
C_DEPTH
Ë

	)

73 
	#COLOR_SHIFT
 (
COLOR_DEPTH
-
B_DEPTH
)

	)

75 
	scﬁ‹box
 {

76 
cﬁ‹box
 *
	m√xt
, *
	m¥ev
;

77 
	mrmö
, 
	mrmax
;

78 
	mgmö
, 
	mgmax
;

79 
	mbmö
, 
	mbmax
;

80 
uöt32
 
	mtŸÆ
;

81 } 
	tCﬁ‹box
;

84 
	mnum_íts
;

85 
	míåõs
[
MAX_CMAP_SIZE
][2];

86 } 
	tC_˚Œ
;

88 
uöt16
 
	grm
[
MAX_CMAP_SIZE
], 
	ggm
[MAX_CMAP_SIZE], 
	gbm
[MAX_CMAP_SIZE];

89 
	gnum_cﬁ‹s
;

90 
uöt32
 
	ghi°ogøm
[
B_LEN
][B_LEN][B_LEN];

91 
Cﬁ‹box
 *
	g‰ìboxes
;

92 
Cﬁ‹box
 *
	gu£dboxes
;

93 
C_˚Œ
 **
	gCﬁ‹Cñls
;

94 
TIFF
 *
	gö
, *
	gout
;

95 
uöt32
 
	grow•î°rù
 = (uint32) -1;

96 
uöt16
 
	gcom¥essi⁄
 = (uint16) -1;

97 
uöt16
 
	gbô•îßm∂e
 = 1;

98 
uöt16
 
	gßm∂e•îpixñ
;

99 
uöt32
 
	gimagewidth
;

100 
uöt32
 
	gimagñígth
;

101 
uöt16
 
	g¥edi˘‹
 = 0;

103 
gë_hi°ogøm
(
TIFF
*, 
Cﬁ‹box
*);

104 
•lôbox
(
Cﬁ‹box
*);

105 
shrökbox
(
Cﬁ‹box
*);

106 
m≠_cﬁ‹èbÀ
();

107 
qu™t
(
TIFF
*, TIFF*);

108 
qu™t_fsdôhî
(
TIFF
*, TIFF*);

109 
Cﬁ‹box
* 
œrge°_box
();

111 
ußge
();

112 
¥o˚ssCom¥essO±i⁄s
(*);

114 
	#C›yFõld
(
èg
, 
v
) \

115 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v
)Ë
	`TIFFSëFõld
(
out
,Åag, v)

	)

118 
	$maö
(
¨gc
, * 
¨gv
[])

120 
i
, 
dôhî
 = 0;

121 
uöt16
 
sh‹tv
, 
c⁄fig
, 
phŸomëric
;

122 
Cﬁ‹box
 *
box_li°
, *
±r
;

123 
Êﬂtv
;

124 
uöt32
 
l⁄gv
;

125 
c
;

126 
›töd
;

127 * 
›èrg
;

129 
num_cﬁ‹s
 = 
MAX_CMAP_SIZE
;

130 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:C:r:f")) != -1)

131 
c
) {

133 i‡(!
	`¥o˚ssCom¥essO±i⁄s
(
›èrg
))

134 
	`ußge
();

137 
num_cﬁ‹s
 = 
	`©oi
(
›èrg
);

138 i‡(
num_cﬁ‹s
 > 
MAX_CMAP_SIZE
) {

139 
	`Ârötf
(
°dîr
,

141 
MAX_CMAP_SIZE
);

142 
	`ußge
();

146 
dôhî
 = 1;

149 
row•î°rù
 = 
	`©oi
(
›èrg
);

152 
	`ußge
();

155 i‡(
¨gc
 - 
›töd
 != 2)

156 
	`ußge
();

157 
ö
 = 
	`TIFFO≥n
(
¨gv
[
›töd
], "r");

158 i‡(
ö
 =
NULL
)

160 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGEWIDTH
, &
imagewidth
);

161 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_IMAGELENGTH
, &
imagñígth
);

162 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_BITSPERSAMPLE
, &
bô•îßm∂e
);

163 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_SAMPLESPERPIXEL
, &
ßm∂e•îpixñ
);

164 i‡(
bô•îßm∂e
 != 8 && bitspersample != 16) {

165 
	`Ârötf
(
°dîr
, "%s: Image must haveátÜeast 8-bits/sample\n",

166 
¨gv
[
›töd
]);

169 i‡(!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PHOTOMETRIC
, &
phŸomëric
) ||

170 
phŸomëric
 !
PHOTOMETRIC_RGB
 || 
ßm∂e•îpixñ
 < 3) {

171 
	`Ârötf
(
°dîr
, "%s: Imagêmu° havêRGB d©a\n", 
¨gv
[
›töd
]);

174 
	`TIFFGëFõld
(
ö
, 
TIFFTAG_PLANARCONFIG
, &
c⁄fig
);

175 i‡(
c⁄fig
 !
PLANARCONFIG_CONTIG
) {

176 
	`Ârötf
(
°dîr
, "%s: Can only handle contiguous dataÖacking\n",

177 
¨gv
[
›töd
]);

184 
u£dboxes
 = 
NULL
;

185 
box_li°
 = 
‰ìboxes
 = (
Cﬁ‹box
 *)
	`_TIFFmÆloc
(
num_cﬁ‹s
* (Colorbox));

186 
‰ìboxes
[0].
√xt
 = &freeboxes[1];

187 
‰ìboxes
[0].
¥ev
 = 
NULL
;

188 
i
 = 1; i < 
num_cﬁ‹s
-1; ++i) {

189 
‰ìboxes
[
i
].
√xt
 = &freeboxes[i+1];

190 
‰ìboxes
[
i
].
¥ev
 = &freeboxes[i-1];

192 
‰ìboxes
[
num_cﬁ‹s
-1].
√xt
 = 
NULL
;

193 
‰ìboxes
[
num_cﬁ‹s
-1].
¥ev
 = &freeboxes[num_colors-2];

198 
±r
 = 
‰ìboxes
;

199 
‰ìboxes
 = 
±r
->
√xt
;

200 i‡(
‰ìboxes
)

201 
‰ìboxes
->
¥ev
 = 
NULL
;

202 
±r
->
√xt
 = 
u£dboxes
;

203 
u£dboxes
 = 
±r
;

204 i‡(
±r
->
√xt
)

205 
±r
->
√xt
->
¥ev
 =Ötr;

206 
	`gë_hi°ogøm
(
ö
, 
±r
);

212 
‰ìboxes
 !
NULL
) {

213 
±r
 = 
	`œrge°_box
();

214 i‡(
±r
 !
NULL
)

215 
	`•lôbox
(
±r
);

217 
‰ìboxes
 = 
NULL
;

223 
i
 = 0, 
±r
 = 
u£dboxes
;Öå !
NULL
; ++i,Öå =Öå->
√xt
) {

224 
rm
[
i
] = ((
±r
->
rmö
 +Öå->
rmax
Ë<< 
COLOR_SHIFT
) / 2;

225 
gm
[
i
] = ((
±r
->
gmö
 +Öå->
gmax
Ë<< 
COLOR_SHIFT
) / 2;

226 
bm
[
i
] = ((
±r
->
bmö
 +Öå->
bmax
Ë<< 
COLOR_SHIFT
) / 2;

230 
	`_TIFF‰ì
(
box_li°
);

231 
‰ìboxes
 = 
u£dboxes
 = 
NULL
;

237 
Cﬁ‹Cñls
 = (
C_˚Œ
 **)
	`_TIFFmÆloc
(
C_LEN
*C_LEN*C_LEN* (C_cell*));

238 
	`_TIFFmem£t
(
Cﬁ‹Cñls
, 0, 
C_LEN
*C_LEN*C_LEN* (
C_˚Œ
*));

241 
	`m≠_cﬁ‹èbÀ
();

246 
out
 = 
	`TIFFO≥n
(
¨gv
[
›töd
+1], "w");

247 i‡(
out
 =
NULL
)

250 
	`C›yFõld
(
TIFFTAG_SUBFILETYPE
, 
l⁄gv
);

251 
	`C›yFõld
(
TIFFTAG_IMAGEWIDTH
, 
l⁄gv
);

252 
	`TIFFSëFõld
(
out
, 
TIFFTAG_BITSPERSAMPLE
, ()
COLOR_DEPTH
);

253 i‡(
com¥essi⁄
 !(
uöt16
)-1) {

254 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

255 
com¥essi⁄
) {

256 
COMPRESSION_LZW
:

257 
COMPRESSION_DEFLATE
:

258 i‡(
¥edi˘‹
 != 0)

259 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PREDICTOR
, 
¥edi˘‹
);

263 
	`C›yFõld
(
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

264 
	`TIFFSëFõld
(
out
, 
TIFFTAG_PHOTOMETRIC
, ()
PHOTOMETRIC_PALETTE
);

265 
	`C›yFõld
(
TIFFTAG_ORIENTATION
, 
sh‹tv
);

266 
	`TIFFSëFõld
(
out
, 
TIFFTAG_SAMPLESPERPIXEL
, ()1);

267 
	`C›yFõld
(
TIFFTAG_PLANARCONFIG
, 
sh‹tv
);

268 
	`TIFFSëFõld
(
out
, 
TIFFTAG_ROWSPERSTRIP
,

269 
	`TIFFDeÁu…SåùSize
(
out
, 
row•î°rù
));

270 
	`C›yFõld
(
TIFFTAG_MINSAMPLEVALUE
, 
sh‹tv
);

271 
	`C›yFõld
(
TIFFTAG_MAXSAMPLEVALUE
, 
sh‹tv
);

272 
	`C›yFõld
(
TIFFTAG_RESOLUTIONUNIT
, 
sh‹tv
);

273 
	`C›yFõld
(
TIFFTAG_XRESOLUTION
, 
Êﬂtv
);

274 
	`C›yFõld
(
TIFFTAG_YRESOLUTION
, 
Êﬂtv
);

275 
	`C›yFõld
(
TIFFTAG_XPOSITION
, 
Êﬂtv
);

276 
	`C›yFõld
(
TIFFTAG_YPOSITION
, 
Êﬂtv
);

278 i‡(
dôhî
)

279 
	`qu™t_fsdôhî
(
ö
, 
out
);

281 
	`qu™t
(
ö
, 
out
);

285 
	#SCALE
(
x
Ë(((x)*((1L<<16)-1))/255)

	)

286 
i
 = 0; i < 
MAX_CMAP_SIZE
; ++i) {

287 
rm
[
i
] = 
	`SCALE
(rm[i]);

288 
gm
[
i
] = 
	`SCALE
(gm[i]);

289 
bm
[
i
] = 
	`SCALE
(bm[i]);

291 
	`TIFFSëFõld
(
out
, 
TIFFTAG_COLORMAP
, 
rm
, 
gm
, 
bm
);

292 (Ë
	`TIFFClo£
(
out
);

294 
	}
}

297 
	$¥o˚ssCom¥essO±i⁄s
(* 
›t
)

299 i‡(
	`°ªq
(
›t
, "none"))

300 
com¥essi⁄
 = 
COMPRESSION_NONE
;

301 i‡(
	`°ªq
(
›t
, "packbits"))

302 
com¥essi⁄
 = 
COMPRESSION_PACKBITS
;

303 i‡(
	`°∫eq
(
›t
, "lzw", 3)) {

304 * 
˝
 = 
	`°rchr
(
›t
, ':');

305 i‡(
˝
)

306 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

307 
com¥essi⁄
 = 
COMPRESSION_LZW
;

308 } i‡(
	`°∫eq
(
›t
, "zip", 3)) {

309 * 
˝
 = 
	`°rchr
(
›t
, ':');

310 i‡(
˝
)

311 
¥edi˘‹
 = 
	`©oi
(
˝
+1);

312 
com¥essi⁄
 = 
COMPRESSION_DEFLATE
;

316 
	}
}

318 * 
	g°uff
[] = {

332 
NULL


336 
	$ußge
()

338 
buf
[
BUFSIZ
];

339 
i
;

341 
	`£tbuf
(
°dîr
, 
buf
);

342 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

343 
i
 = 0; 
°uff
[i] !
NULL
; i++)

344 
	`Ârötf
(
°dîr
, "%s\n", 
°uff
[
i
]);

345 
	`exô
(-1);

346 
	}
}

349 
	$gë_hi°ogøm
(
TIFF
* 
ö
, 
Cﬁ‹box
* 
box
)

351 *
ö±r
;

352 
ªd
, 
gªí
, 
blue
;

353 
uöt32
 
j
, 
i
;

354 *
öpuéöe
;

356 
öpuéöe
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
ö
));

357 i‡(
öpuéöe
 =
NULL
) {

358 
	`Ârötf
(
°dîr
, "No space for scanline buffer\n");

359 
	`exô
(-1);

361 
box
->
rmö
 = box->
gmö
 = box->
bmö
 = 999;

362 
box
->
rmax
 = box->
gmax
 = box->
bmax
 = -1;

363 
box
->
tŸÆ
 = 
imagewidth
 * 
imagñígth
;

365 { 
uöt32
 *
±r
 = &
hi°ogøm
[0][0][0];

366 
i
 = 
B_LEN
*B_LEN*B_LEN; i-- > 0;)

367 *
±r
++ = 0;

369 
i
 = 0; i < 
imagñígth
; i++) {

370 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
öpuéöe
, 
i
, 0) <= 0)

372 
ö±r
 = 
öpuéöe
;

373 
j
 = 
imagewidth
; j-- > 0;) {

374 
ªd
 = *
ö±r
++ >> 
COLOR_SHIFT
;

375 
gªí
 = *
ö±r
++ >> 
COLOR_SHIFT
;

376 
blue
 = *
ö±r
++ >> 
COLOR_SHIFT
;

377 i‡(
ªd
 < 
box
->
rmö
)

378 
box
->
rmö
 = 
ªd
;

379 i‡(
ªd
 > 
box
->
rmax
)

380 
box
->
rmax
 = 
ªd
;

381 i‡(
gªí
 < 
box
->
gmö
)

382 
box
->
gmö
 = 
gªí
;

383 i‡(
gªí
 > 
box
->
gmax
)

384 
box
->
gmax
 = 
gªí
;

385 i‡(
blue
 < 
box
->
bmö
)

386 
box
->
bmö
 = 
blue
;

387 i‡(
blue
 > 
box
->
bmax
)

388 
box
->
bmax
 = 
blue
;

389 
hi°ogøm
[
ªd
][
gªí
][
blue
]++;

392 
	`_TIFF‰ì
(
öpuéöe
);

393 
	}
}

395 
Cﬁ‹box
 *

396 
	$œrge°_box
()

398 
Cﬁ‹box
 *
p
, *
b
;

399 
uöt32
 
size
;

401 
b
 = 
NULL
;

402 
size
 = 0;

403 
p
 = 
u£dboxes
;Ö !
NULL
;Ö =Ö->
√xt
)

404 i‡((
p
->
rmax
 >Ö->
rmö
 ||Ö->
gmax
 >Ö->
gmö
 ||

405 
p
->
bmax
 >Ö->
bmö
Ë&&Ö->
tŸÆ
 > 
size
)

406 
size
 = (
b
 = 
p
)->
tŸÆ
;

407  (
b
);

408 
	}
}

411 
	$•lôbox
(
Cﬁ‹box
* 
±r
)

413 
uöt32
 
hi°2
[
B_LEN
];

414 
fú°
=0, 
œ°
=0;

415 
Cﬁ‹box
 *
√w
;

416 
uöt32
 *
ùå
, *
hi°p
;

417 
i
, 
j
;

418 
ú
,
ig
,
ib
;

419 
uöt32
 
sum
, 
sum1
, 
sum2
;

420 íum { 
RED
, 
GREEN
, 
BLUE
 } 
axis
;

427 
i
 = 
±r
->
rmax
 -Öå->
rmö
;

428 i‡(
i
 >
±r
->
gmax
 -Öå->
gmö
 && i >±r->
bmax
 -Öå->
bmö
)

429 
axis
 = 
RED
;

430 i‡(
±r
->
gmax
 -Öå->
gmö
 >±r->
bmax
 -Öå->
bmö
)

431 
axis
 = 
GREEN
;

433 
axis
 = 
BLUE
;

435 
axis
) {

436 
RED
:

437 
hi°p
 = &
hi°2
[
±r
->
rmö
];

438 
ú
 = 
±r
->
rmö
; i∏<±r->
rmax
; ++ir) {

439 *
hi°p
 = 0;

440 
ig
 = 
±r
->
gmö
; ig <±r->
gmax
; ++ig) {

441 
ùå
 = &
hi°ogøm
[
ú
][
ig
][
±r
->
bmö
];

442 
ib
 = 
±r
->
bmö
; ib <±r->
bmax
; ++ib)

443 *
hi°p
 +*
ùå
++;

445 
hi°p
++;

447 
fú°
 = 
±r
->
rmö
;

448 
œ°
 = 
±r
->
rmax
;

450 
GREEN
:

451 
hi°p
 = &
hi°2
[
±r
->
gmö
];

452 
ig
 = 
±r
->
gmö
; ig <±r->
gmax
; ++ig) {

453 *
hi°p
 = 0;

454 
ú
 = 
±r
->
rmö
; i∏<±r->
rmax
; ++ir) {

455 
ùå
 = &
hi°ogøm
[
ú
][
ig
][
±r
->
bmö
];

456 
ib
 = 
±r
->
bmö
; ib <±r->
bmax
; ++ib)

457 *
hi°p
 +*
ùå
++;

459 
hi°p
++;

461 
fú°
 = 
±r
->
gmö
;

462 
œ°
 = 
±r
->
gmax
;

464 
BLUE
:

465 
hi°p
 = &
hi°2
[
±r
->
bmö
];

466 
ib
 = 
±r
->
bmö
; ib <±r->
bmax
; ++ib) {

467 *
hi°p
 = 0;

468 
ú
 = 
±r
->
rmö
; i∏<±r->
rmax
; ++ir) {

469 
ùå
 = &
hi°ogøm
[
ú
][
±r
->
gmö
][
ib
];

470 
ig
 = 
±r
->
gmö
; ig <±r->
gmax
; ++ig) {

471 *
hi°p
 +*
ùå
;

472 
ùå
 +
B_LEN
;

475 
hi°p
++;

477 
fú°
 = 
±r
->
bmö
;

478 
œ°
 = 
±r
->
bmax
;

482 
sum2
 = 
±r
->
tŸÆ
 / 2;

483 
hi°p
 = &
hi°2
[
fú°
];

484 
sum
 = 0;

485 
i
 = 
fú°
; i <
œ°
 && (
sum
 +*
hi°p
++Ë< 
sum2
; ++i)

487 i‡(
i
 =
fú°
)

488 
i
++;

491 
√w
 = 
‰ìboxes
;

492 
‰ìboxes
 = 
√w
->
√xt
;

493 i‡(
‰ìboxes
)

494 
‰ìboxes
->
¥ev
 = 
NULL
;

495 i‡(
u£dboxes
)

496 
u£dboxes
->
¥ev
 = 
√w
;

497 
√w
->
√xt
 = 
u£dboxes
;

498 
u£dboxes
 = 
√w
;

500 
hi°p
 = &
hi°2
[
fú°
];

501 
sum1
 = 0, 
j
 = 
fú°
; j < 
i
; j++)

502 
sum1
 +*
hi°p
++;

503 
sum2
 = 0, 
j
 = 
i
; j <
œ°
; j++)

504 
sum2
 +*
hi°p
++;

505 
√w
->
tŸÆ
 = 
sum1
;

506 
±r
->
tŸÆ
 = 
sum2
;

508 
√w
->
rmö
 = 
±r
->rmin;

509 
√w
->
rmax
 = 
±r
->rmax;

510 
√w
->
gmö
 = 
±r
->gmin;

511 
√w
->
gmax
 = 
±r
->gmax;

512 
√w
->
bmö
 = 
±r
->bmin;

513 
√w
->
bmax
 = 
±r
->bmax;

514 
axis
) {

515 
RED
:

516 
√w
->
rmax
 = 
i
-1;

517 
±r
->
rmö
 = 
i
;

519 
GREEN
:

520 
√w
->
gmax
 = 
i
-1;

521 
±r
->
gmö
 = 
i
;

523 
BLUE
:

524 
√w
->
bmax
 = 
i
-1;

525 
±r
->
bmö
 = 
i
;

528 
	`shrökbox
(
√w
);

529 
	`shrökbox
(
±r
);

530 
	}
}

533 
	$shrökbox
(
Cﬁ‹box
* 
box
)

535 
uöt32
 *
hi°p
;

536 
ú
, 
ig
, 
ib
;

538 i‡(
box
->
rmax
 > box->
rmö
) {

539 
ú
 = 
box
->
rmö
; i∏<box->
rmax
; ++ir)

540 
ig
 = 
box
->
gmö
; ig <box->
gmax
; ++ig) {

541 
hi°p
 = &
hi°ogøm
[
ú
][
ig
][
box
->
bmö
];

542 
ib
 = 
box
->
bmö
; ib <box->
bmax
; ++ib)

543 i‡(*
hi°p
++ != 0) {

544 
box
->
rmö
 = 
ú
;

545 
have_rmö
;

548 
have_rmö
:

549 i‡(
box
->
rmax
 > box->
rmö
)

550 
ú
 = 
box
->
rmax
; i∏>box->
rmö
; --ir)

551 
ig
 = 
box
->
gmö
; ig <box->
gmax
; ++ig) {

552 
hi°p
 = &
hi°ogøm
[
ú
][
ig
][
box
->
bmö
];

553 
ib
 = 
box
->
bmö
;

554 ; 
ib
 <
box
->
bmax
; ++ib)

555 i‡(*
hi°p
++ != 0) {

556 
box
->
rmax
 = 
ú
;

557 
have_rmax
;

561 
have_rmax
:

562 i‡(
box
->
gmax
 > box->
gmö
) {

563 
ig
 = 
box
->
gmö
; ig <box->
gmax
; ++ig)

564 
ú
 = 
box
->
rmö
; i∏<box->
rmax
; ++ir) {

565 
hi°p
 = &
hi°ogøm
[
ú
][
ig
][
box
->
bmö
];

566 
ib
 = 
box
->
bmö
; ib <box->
bmax
; ++ib)

567 i‡(*
hi°p
++ != 0) {

568 
box
->
gmö
 = 
ig
;

569 
have_gmö
;

572 
have_gmö
:

573 i‡(
box
->
gmax
 > box->
gmö
)

574 
ig
 = 
box
->
gmax
; ig >box->
gmö
; --ig)

575 
ú
 = 
box
->
rmö
; i∏<box->
rmax
; ++ir) {

576 
hi°p
 = &
hi°ogøm
[
ú
][
ig
][
box
->
bmö
];

577 
ib
 = 
box
->
bmö
;

578 ; 
ib
 <
box
->
bmax
; ++ib)

579 i‡(*
hi°p
++ != 0) {

580 
box
->
gmax
 = 
ig
;

581 
have_gmax
;

585 
have_gmax
:

586 i‡(
box
->
bmax
 > box->
bmö
) {

587 
ib
 = 
box
->
bmö
; ib <box->
bmax
; ++ib)

588 
ú
 = 
box
->
rmö
; i∏<box->
rmax
; ++ir) {

589 
hi°p
 = &
hi°ogøm
[
ú
][
box
->
gmö
][
ib
];

590 
ig
 = 
box
->
gmö
; ig <box->
gmax
; ++ig) {

591 i‡(*
hi°p
 != 0) {

592 
box
->
bmö
 = 
ib
;

593 
have_bmö
;

595 
hi°p
 +
B_LEN
;

598 
have_bmö
:

599 i‡(
box
->
bmax
 > box->
bmö
)

600 
ib
 = 
box
->
bmax
; ib >box->
bmö
; --ib)

601 
ú
 = 
box
->
rmö
; i∏<box->
rmax
; ++ir) {

602 
hi°p
 = &
hi°ogøm
[
ú
][
box
->
gmö
][
ib
];

603 
ig
 = 
box
->
gmö
;

604 ; 
ig
 <
box
->
gmax
; ++ig) {

605 i‡(*
hi°p
 != 0) {

606 
box
->
bmax
 = 
ib
;

607 
have_bmax
;

609 
hi°p
 +
B_LEN
;

613 
have_bmax
:

615 
	}
}

617 
C_˚Œ
 *

618 
	$¸óã_cﬁ‹˚Œ
(
ªd
, 
gªí
, 
blue
)

620 
ú
, 
ig
, 
ib
, 
i
;

621 
C_˚Œ
 *
±r
;

622 
mödi°
, 
√xt_n
;

623 
tmp
, 
di°
, 
n
;

625 
ú
 = 
ªd
 >> (
COLOR_DEPTH
-
C_DEPTH
);

626 
ig
 = 
gªí
 >> (
COLOR_DEPTH
-
C_DEPTH
);

627 
ib
 = 
blue
 >> (
COLOR_DEPTH
-
C_DEPTH
);

628 
±r
 = (
C_˚Œ
 *)
	`_TIFFmÆloc
( (C_cell));

629 *(
Cﬁ‹Cñls
 + 
ú
*
C_LEN
*C_LEN + 
ig
*C_LEN + 
ib
Ë
±r
;

630 
±r
->
num_íts
 = 0;

636 
mödi°
 = 99999999;

637 
i
 = 0; i < 
num_cﬁ‹s
; ++i) {

638 i‡(
rm
[
i
]>>(
COLOR_DEPTH
-
C_DEPTH
Ë!
ú
 ||

639 
gm
[
i
]>>(
COLOR_DEPTH
-
C_DEPTH
Ë!
ig
 ||

640 
bm
[
i
]>>(
COLOR_DEPTH
-
C_DEPTH
Ë!
ib
)

642 
±r
->
íåõs
[±r->
num_íts
][0] = 
i
;

643 
±r
->
íåõs
[±r->
num_íts
][1] = 0;

644 ++
±r
->
num_íts
;

645 
tmp
 = 
rm
[
i
] - 
ªd
;

646 i‡(
tmp
 < (
MAX_COLOR
/
C_LEN
/2))

647 
tmp
 = 
MAX_COLOR
/
C_LEN
-1 -Åmp;

648 
di°
 = 
tmp
*tmp;

649 
tmp
 = 
gm
[
i
] - 
gªí
;

650 i‡(
tmp
 < (
MAX_COLOR
/
C_LEN
/2))

651 
tmp
 = 
MAX_COLOR
/
C_LEN
-1 -Åmp;

652 
di°
 +
tmp
*tmp;

653 
tmp
 = 
bm
[
i
] - 
blue
;

654 i‡(
tmp
 < (
MAX_COLOR
/
C_LEN
/2))

655 
tmp
 = 
MAX_COLOR
/
C_LEN
-1 -Åmp;

656 
di°
 +
tmp
*tmp;

657 i‡(
di°
 < 
mödi°
)

658 
mödi°
 = 
di°
;

664 
i
 = 0; i < 
num_cﬁ‹s
; ++i) {

665 i‡(
rm
[
i
] >> (
COLOR_DEPTH
-
C_DEPTH
Ë=
ú
 &&

666 
gm
[
i
] >> (
COLOR_DEPTH
-
C_DEPTH
Ë=
ig
 &&

667 
bm
[
i
] >> (
COLOR_DEPTH
-
C_DEPTH
Ë=
ib
)

669 
di°
 = 0;

670 i‡((
tmp
 = 
ªd
 - 
rm
[
i
]) > 0 ||

671 (
tmp
 = 
rm
[
i
] - (
ªd
 + 
MAX_COLOR
/
C_LEN
-1)) > 0 )

672 
di°
 +
tmp
*tmp;

673 i‡((
tmp
 = 
gªí
 - 
gm
[
i
]) > 0 ||

674 (
tmp
 = 
gm
[
i
] - (
gªí
 + 
MAX_COLOR
/
C_LEN
-1)) > 0 )

675 
di°
 +
tmp
*tmp;

676 i‡((
tmp
 = 
blue
 - 
bm
[
i
]) > 0 ||

677 (
tmp
 = 
bm
[
i
] - (
blue
 + 
MAX_COLOR
/
C_LEN
-1)) > 0 )

678 
di°
 +
tmp
*tmp;

679 i‡(
di°
 < 
mödi°
) {

680 
±r
->
íåõs
[±r->
num_íts
][0] = 
i
;

681 
±r
->
íåõs
[±r->
num_íts
][1] = 
di°
;

682 ++
±r
->
num_íts
;

689 
n
 = 
±r
->
num_íts
 - 1;Ç > 0;Ç = 
√xt_n
) {

690 
√xt_n
 = 0;

691 
i
 = 0; i < 
n
; ++i)

692 i‡(
±r
->
íåõs
[
i
][1] >Ötr->entries[i+1][1]) {

693 
tmp
 = 
±r
->
íåõs
[
i
][0];

694 
±r
->
íåõs
[
i
][0] =Ötr->entries[i+1][0];

695 
±r
->
íåõs
[
i
+1][0] = 
tmp
;

696 
tmp
 = 
±r
->
íåõs
[
i
][1];

697 
±r
->
íåõs
[
i
][1] =Ötr->entries[i+1][1];

698 
±r
->
íåõs
[
i
+1][1] = 
tmp
;

699 
√xt_n
 = 
i
;

702  (
±r
);

703 
	}
}

706 
	$m≠_cﬁ‹èbÀ
()

708 
uöt32
 *
hi°p
 = &
hi°ogøm
[0][0][0];

709 
C_˚Œ
 *
˚Œ
;

710 
j
, 
tmp
, 
d2
, 
di°
;

711 
ú
, 
ig
, 
ib
, 
i
;

713 
ú
 = 0; i∏< 
B_LEN
; ++ir)

714 
ig
 = 0; ig < 
B_LEN
; ++ig)

715 
ib
 = 0; ib < 
B_LEN
; ++ib, 
hi°p
++) {

716 i‡(*
hi°p
 == 0) {

717 *
hi°p
 = -1;

720 
˚Œ
 = *(
Cﬁ‹Cñls
 +

721 (((
ú
>>(
B_DEPTH
-
C_DEPTH
)) << C_DEPTH*2) +

722 ((
ig
>>(
B_DEPTH
-
C_DEPTH
)) << C_DEPTH) +

723 (
ib
>>(
B_DEPTH
-
C_DEPTH
))));

724 i‡(
˚Œ
 =
NULL
 )

725 
˚Œ
 = 
	`¸óã_cﬁ‹˚Œ
(

726 
ú
 << 
COLOR_SHIFT
,

727 
ig
 << 
COLOR_SHIFT
,

728 
ib
 << 
COLOR_SHIFT
);

729 
di°
 = 9999999;

730 
i
 = 0; i < 
˚Œ
->
num_íts
 &&

731 
di°
 > 
˚Œ
->
íåõs
[
i
][1]; ++i) {

732 
j
 = 
˚Œ
->
íåõs
[
i
][0];

733 
d2
 = 
rm
[
j
] - (
ú
 << 
COLOR_SHIFT
);

734 
d2
 *= d2;

735 
tmp
 = 
gm
[
j
] - (
ig
 << 
COLOR_SHIFT
);

736 
d2
 +
tmp
*tmp;

737 
tmp
 = 
bm
[
j
] - (
ib
 << 
COLOR_SHIFT
);

738 
d2
 +
tmp
*tmp;

739 i‡(
d2
 < 
di°
) {

740 
di°
 = 
d2
;

741 *
hi°p
 = 
j
;

745 
	}
}

753 
	$qu™t
(
TIFF
* 
ö
, TIFF* 
out
)

755 *
ouéöe
, *
öpuéöe
;

756 *
ouçå
, *
ö±r
;

757 
uöt32
 
i
, 
j
;

758 
ªd
, 
gªí
, 
blue
;

760 
öpuéöe
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
ö
));

761 
ouéöe
 = (*)
	`_TIFFmÆloc
(
imagewidth
);

762 
i
 = 0; i < 
imagñígth
; i++) {

763 i‡(
	`TIFFRódSˇ∆öe
(
ö
, 
öpuéöe
, 
i
, 0) <= 0)

765 
ö±r
 = 
öpuéöe
;

766 
ouçå
 = 
ouéöe
;

767 
j
 = 0; j < 
imagewidth
; j++) {

768 
ªd
 = *
ö±r
++ >> 
COLOR_SHIFT
;

769 
gªí
 = *
ö±r
++ >> 
COLOR_SHIFT
;

770 
blue
 = *
ö±r
++ >> 
COLOR_SHIFT
;

771 *
ouçå
++ = ()
hi°ogøm
[
ªd
][
gªí
][
blue
];

773 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
ouéöe
, 
i
, 0) < 0)

776 
	`_TIFF‰ì
(
öpuéöe
);

777 
	`_TIFF‰ì
(
ouéöe
);

778 
	}
}

780 
	#SWAP
(
ty≥
,
a
,
b
Ë{Åy≥ 
p
;Ö =á;á = b; b =Ö; }

	)

782 
	#GëI≈utLöe
(
tif
, 
row
, 
bad
) \

783 i‡(
	`TIFFRódSˇ∆öe
(
tif
, 
öpuéöe
, 
row
, 0) <= 0) \

784 
bad
; \

785 
ö±r
 = 
öpuéöe
; \

786 
√xçå
 = 
√xéöe
; \

787 
j
 = 0; j < 
imagewidth
; ++j) { \

788 *
√xçå
++ = *
ö±r
++; \

789 *
√xçå
++ = *
ö±r
++; \

790 *
√xçå
++ = *
ö±r
++; \

791 }

	)

792 
	#GëComp⁄ít
(
øw
, 
cshi·
, 
c
) \

793 
cshi·
 = 
øw
; \

794 i‡(
cshi·
 < 0) \

795 
cshi·
 = 0; \

796 i‡(
cshi·
 >
MAX_COLOR
) \

797 
cshi·
 = 
MAX_COLOR
-1; \

798 
c
 = 
cshi·
; \

799 
cshi·
 >>
COLOR_SHIFT
;

	)

802 
	$qu™t_fsdôhî
(
TIFF
* 
ö
, TIFF* 
out
)

804 *
ouéöe
, *
öpuéöe
, *
ö±r
;

805 *
thi¶öe
, *
√xéöe
;

806 *
ouçå
;

807 *
thi•å
, *
√xçå
;

808 
uöt32
 
i
, 
j
;

809 
uöt32
 
imax
, 
jmax
;

810 
œ°löe
, 
œ°pixñ
;

812 
imax
 = 
imagñígth
 - 1;

813 
jmax
 = 
imagewidth
 - 1;

814 
öpuéöe
 = (*)
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
ö
));

815 
thi¶öe
 = (*)
	`_TIFFmÆloc
(
imagewidth
 * 3 *  ());

816 
√xéöe
 = (*)
	`_TIFFmÆloc
(
imagewidth
 * 3 *  ());

817 
ouéöe
 = (*Ë
	`_TIFFmÆloc
(
	`TIFFSˇ∆öeSize
(
out
));

819 
	`GëI≈utLöe
(
ö
, 0, 
bad
);

820 
i
 = 1; i <
imagñígth
; ++i) {

821 
	`SWAP
(*, 
thi¶öe
, 
√xéöe
);

822 
œ°löe
 = (
i
 >
imax
);

823 i‡(
i
 <
imax
)

824 
	`GëI≈utLöe
(
ö
, 
i
, );

825 
thi•å
 = 
thi¶öe
;

826 
√xçå
 = 
√xéöe
;

827 
ouçå
 = 
ouéöe
;

828 
j
 = 0; j < 
imagewidth
; ++j) {

829 
ªd
, 
gªí
, 
blue
;

830 
ovÆ
, 
r2
, 
g2
, 
b2
;

832 
œ°pixñ
 = (
j
 =
jmax
);

833 
	`GëComp⁄ít
(*
thi•å
++, 
r2
, 
ªd
);

834 
	`GëComp⁄ít
(*
thi•å
++, 
g2
, 
gªí
);

835 
	`GëComp⁄ít
(*
thi•å
++, 
b2
, 
blue
);

836 
ovÆ
 = 
hi°ogøm
[
r2
][
g2
][
b2
];

837 i‡(
ovÆ
 == -1) {

838 
ci
;

839 
cj
, 
tmp
, 
d2
, 
di°
;

840 
C_˚Œ
 *
˚Œ
;

842 
˚Œ
 = *(
Cﬁ‹Cñls
 +

843 (((
r2
>>(
B_DEPTH
-
C_DEPTH
)) << C_DEPTH*2) +

844 ((
g2
>>(
B_DEPTH
-
C_DEPTH
)) << C_DEPTH ) +

845 (
b2
>>(
B_DEPTH
-
C_DEPTH
))));

846 i‡(
˚Œ
 =
NULL
)

847 
˚Œ
 = 
	`¸óã_cﬁ‹˚Œ
(
ªd
,

848 
gªí
, 
blue
);

849 
di°
 = 9999999;

850 
ci
 = 0; cò< 
˚Œ
->
num_íts
 && 
di°
 > cñl->
íåõs
[ci][1]; ++ci) {

851 
cj
 = 
˚Œ
->
íåõs
[
ci
][0];

852 
d2
 = (
rm
[
cj
] >> 
COLOR_SHIFT
Ë- 
r2
;

853 
d2
 *= d2;

854 
tmp
 = (
gm
[
cj
] >> 
COLOR_SHIFT
Ë- 
g2
;

855 
d2
 +
tmp
*tmp;

856 
tmp
 = (
bm
[
cj
] >> 
COLOR_SHIFT
Ë- 
b2
;

857 
d2
 +
tmp
*tmp;

858 i‡(
d2
 < 
di°
) {

859 
di°
 = 
d2
;

860 
ovÆ
 = 
cj
;

863 
hi°ogøm
[
r2
][
g2
][
b2
] = 
ovÆ
;

865 *
ouçå
++ = 
ovÆ
;

866 
ªd
 -
rm
[
ovÆ
];

867 
gªí
 -
gm
[
ovÆ
];

868 
blue
 -
bm
[
ovÆ
];

869 i‡(!
œ°pixñ
) {

870 
thi•å
[0] +
blue
 * 7 / 16;

871 
thi•å
[1] +
gªí
 * 7 / 16;

872 
thi•å
[2] +
ªd
 * 7 / 16;

874 i‡(!
œ°löe
) {

875 i‡(
j
 != 0) {

876 
√xçå
[-3] +
blue
 * 3 / 16;

877 
√xçå
[-2] +
gªí
 * 3 / 16;

878 
√xçå
[-1] +
ªd
 * 3 / 16;

880 
√xçå
[0] +
blue
 * 5 / 16;

881 
√xçå
[1] +
gªí
 * 5 / 16;

882 
√xçå
[2] +
ªd
 * 5 / 16;

883 i‡(!
œ°pixñ
) {

884 
√xçå
[3] +
blue
 / 16;

885 
√xçå
[4] +
gªí
 / 16;

886 
√xçå
[5] +
ªd
 / 16;

888 
√xçå
 += 3;

891 i‡(
	`TIFFWrôeSˇ∆öe
(
out
, 
ouéöe
, 
i
-1, 0) < 0)

894 
bad
:

895 
	`_TIFF‰ì
(
öpuéöe
);

896 
	`_TIFF‰ì
(
thi¶öe
);

897 
	`_TIFF‰ì
(
√xéöe
);

898 
	`_TIFF‰ì
(
ouéöe
);

899 
	}
}

	@tools/tiffset.c

33 
	~<°dio.h
>

34 
	~<°rög.h
>

35 
	~<°dlib.h
>

37 
	~"tiffio.h
"

38 
	~"tif_dú.h
"

40 * 
	gußgeMsg
[] = {

47 
NULL


51 
	$ußge
()

53 
i
;

54 
i
 = 0; 
ußgeMsg
[i]; i++)

55 
	`Ârötf
(
°dîr
, "%s\n", 
ußgeMsg
[
i
]);

56 
	`exô
(-1);

57 
	}
}

59 c⁄° 
TIFFFõld
 *

60 
	$GëFõld
(
TIFF
 *
tiff
, c⁄° *
èg«me
)

62 c⁄° 
TIFFFõld
 *
fù
;

64 if–
	`©oi
(
èg«me
) > 0 )

65 
fù
 = 
	`TIFFFõldWôhTag
(
tiff
, (
âag_t
)
	`©oi
(
èg«me
));

67 
fù
 = 
	`TIFFFõldWôhName
(
tiff
, 
èg«me
);

69 i‡(!
fù
) {

70 
	`Ârötf
–
°dîr
, "FõldÇamê\"%s\" i†nŸÑecogni£d.\n", 
èg«me
 );

71  (
TIFFFõld
 *)
NULL
;

74  
fù
;

75 
	}
}

78 
	$maö
(
¨gc
, * 
¨gv
[])

80 
TIFF
 *
tiff
;

81 
¨g_ödex
;

83 i‡(
¨gc
 < 2)

84 
	`ußge
();

86 
tiff
 = 
	`TIFFO≥n
(
¨gv
[
¨gc
-1], "r+");

87 i‡(
tiff
 =
NULL
)

90  
¨g_ödex
 = 1;árg_ödex < 
¨gc
-1;árg_index++ ) {

91 i‡(
	`°rcmp
(
¨gv
[
¨g_ödex
],"-d"Ë=0 &&árg_ödex < 
¨gc
-2) {

92 
¨g_ödex
++;

93 if–
	`TIFFSëDúe˘‹y
(
tiff
, 
	`©oi
(
¨gv
[
¨g_ödex
]) ) != 1 )

95 
	`Ârötf
–
°dîr
, "FaûedÅÿ£àdúe˘‹y=%s\n", 
¨gv
[
¨g_ödex
] );

98 
¨g_ödex
++;

100 i‡(
	`°rcmp
(
¨gv
[
¨g_ödex
],"-sd"Ë=0 &&árg_ödex < 
¨gc
-2) {

101 
¨g_ödex
++;

102 if–
	`TIFFSëSubDúe˘‹y
(
tiff
, 
	`©oi
(
¨gv
[
¨g_ödex
]) ) != 1 )

104 
	`Ârötf
–
°dîr
, "FaûedÅÿ£àsub dúe˘‹y=%s\n", 
¨gv
[
¨g_ödex
] );

107 
¨g_ödex
++;

109 i‡(
	`°rcmp
(
¨gv
[
¨g_ödex
],"-s"Ë=0 &&árg_ödex < 
¨gc
-3) {

110 c⁄° 
TIFFFõld
 *
fù
;

111 c⁄° *
èg«me
;

113 
¨g_ödex
++;

114 
èg«me
 = 
¨gv
[
¨g_ödex
];

115 
fù
 = 
	`GëFõld
(
tiff
, 
èg«me
);

117 i‡(!
fù
)

120 
¨g_ödex
++;

121 i‡(
fù
->
fõld_ty≥
 =
TIFF_ASCII
) {

122 i‡(
	`TIFFSëFõld
(
tiff
, 
fù
->
fõld_èg
, 
¨gv
[
¨g_ödex
]) != 1)

123 
	`Ârötf
–
°dîr
, "FailedÅo set %s=%s\n",

124 
fù
->
fõld_«me
, 
¨gv
[
¨g_ödex
] );

125 } i‡(
fù
->
fõld_wrôecou¡
 > 0

126 || 
fù
->
fõld_wrôecou¡
 =
TIFF_VARIABLE
) {

127 
ªt
 = 1;

128 
wc
;

130 i‡(
fù
->
fõld_wrôecou¡
 =
TIFF_VARIABLE
)

131 
wc
 = 
	`©oi
(
¨gv
[
¨g_ödex
++]);

133 
wc
 = 
fù
->
fõld_wrôecou¡
;

135 i‡(
¨gc
 - 
¨g_ödex
 < 
wc
) {

136 
	`Ârötf
–
°dîr
,

139 
wc
, 
fù
->
fõld_«me
, 
¨gc
 - 
¨g_ödex
);

143 i‡(
wc
 > 1) {

144 
i
, 
size
;

145 *
¨øy
;

147 
fù
->
fõld_ty≥
) {

155 
TIFF_BYTE
:

156 
TIFF_ASCII
:

157 
TIFF_SBYTE
:

158 
TIFF_UNDEFINED
:

160 
size
 = 1;

163 
TIFF_SHORT
:

164 
TIFF_SSHORT
:

165 
size
 = 2;

168 
TIFF_LONG
:

169 
TIFF_SLONG
:

170 
TIFF_FLOAT
:

171 
TIFF_IFD
:

172 
TIFF_RATIONAL
:

173 
TIFF_SRATIONAL
:

174 
size
 = 4;

177 
TIFF_DOUBLE
:

178 
size
 = 8;

182 
¨øy
 = 
	`_TIFFmÆloc
(
wc
 * 
size
);

183 i‡(!
¨øy
) {

184 
	`Ârötf
(
°dîr
, "No space for %sÅag\n",

185 
èg«me
);

189 
fù
->
fõld_ty≥
) {

190 
TIFF_BYTE
:

191 
i
 = 0; i < 
wc
; i++)

192 ((
uöt8
 *)
¨øy
)[
i
] = 
	`©oi
(
¨gv
[
¨g_ödex
+i]);

194 
TIFF_SHORT
:

195 
i
 = 0; i < 
wc
; i++)

196 ((
uöt16
 *)
¨øy
)[
i
] = 
	`©oi
(
¨gv
[
¨g_ödex
+i]);

198 
TIFF_SBYTE
:

199 
i
 = 0; i < 
wc
; i++)

200 ((
öt8
 *)
¨øy
)[
i
] = 
	`©oi
(
¨gv
[
¨g_ödex
+i]);

202 
TIFF_SSHORT
:

203 
i
 = 0; i < 
wc
; i++)

204 ((
öt16
 *)
¨øy
)[
i
] = 
	`©oi
(
¨gv
[
¨g_ödex
+i]);

206 
TIFF_LONG
:

207 
i
 = 0; i < 
wc
; i++)

208 ((
uöt32
 *)
¨øy
)[
i
] = 
	`©ﬁ
(
¨gv
[
¨g_ödex
+i]);

210 
TIFF_SLONG
:

211 
TIFF_IFD
:

212 
i
 = 0; i < 
wc
; i++)

213 ((
uöt32
 *)
¨øy
)[
i
] = 
	`©ﬁ
(
¨gv
[
¨g_ödex
+i]);

215 
TIFF_DOUBLE
:

216 
i
 = 0; i < 
wc
; i++)

217 ((*)
¨øy
)[
i
] = 
	`©of
(
¨gv
[
¨g_ödex
+i]);

219 
TIFF_RATIONAL
:

220 
TIFF_SRATIONAL
:

221 
TIFF_FLOAT
:

222 
i
 = 0; i < 
wc
; i++)

223 ((*)
¨øy
)[
i
] = ()
	`©of
(
¨gv
[
¨g_ödex
+i]);

229 i‡(
fù
->
fõld_∑sscou¡
) {

230 
ªt
 = 
	`TIFFSëFõld
(
tiff
, 
fù
->
fõld_èg
,

231 
wc
, 
¨øy
);

232 } i‡(
fù
->
fõld_èg
 =
TIFFTAG_PAGENUMBER


233 || 
fù
->
fõld_èg
 =
TIFFTAG_HALFTONEHINTS


234 || 
fù
->
fõld_èg
 =
TIFFTAG_YCBCRSUBSAMPLING


235 || 
fù
->
fõld_èg
 =
TIFFTAG_DOTRANGE
) {

236 i‡(
fù
->
fõld_ty≥
 =
TIFF_BYTE
) {

237 
ªt
 = 
	`TIFFSëFõld
(
tiff
, 
fù
->
fõld_èg
,

238 ((
uöt8
 *)
¨øy
)[0], ((uint8 *)array)[1]);

239 } i‡(
fù
->
fõld_ty≥
 =
TIFF_SHORT
) {

240 
ªt
 = 
	`TIFFSëFõld
(
tiff
, 
fù
->
fõld_èg
,

241 ((
uöt16
 *)
¨øy
)[0], ((uint16 *)array)[1]);

244 
ªt
 = 
	`TIFFSëFõld
(
tiff
, 
fù
->
fõld_èg
,

245 
¨øy
);

248 
	`_TIFF‰ì
(
¨øy
);

250 
fù
->
fõld_ty≥
) {

251 
TIFF_BYTE
:

252 
TIFF_SHORT
:

253 
TIFF_SBYTE
:

254 
TIFF_SSHORT
:

255 
ªt
 = 
	`TIFFSëFõld
(
tiff
, 
fù
->
fõld_èg
,

256 
	`©oi
(
¨gv
[
¨g_ödex
++]));

258 
TIFF_LONG
:

259 
TIFF_SLONG
:

260 
TIFF_IFD
:

261 
ªt
 = 
	`TIFFSëFõld
(
tiff
, 
fù
->
fõld_èg
,

262 
	`©ﬁ
(
¨gv
[
¨g_ödex
++]));

264 
TIFF_DOUBLE
:

265 
ªt
 = 
	`TIFFSëFõld
(
tiff
, 
fù
->
fõld_èg
,

266 
	`©of
(
¨gv
[
¨g_ödex
++]));

268 
TIFF_RATIONAL
:

269 
TIFF_SRATIONAL
:

270 
TIFF_FLOAT
:

271 
ªt
 = 
	`TIFFSëFõld
(
tiff
, 
fù
->
fõld_èg
,

272 ()
	`©of
(
¨gv
[
¨g_ödex
++]));

279 i‡(
ªt
 != 1)

280 
	`Ârötf
(
°dîr
, "FaûedÅÿ£à%s\n", 
fù
->
fõld_«me
);

281 
¨g_ödex
 +
wc
;

283 } i‡(
	`°rcmp
(
¨gv
[
¨g_ödex
],"-sf"Ë=0 &&árg_ödex < 
¨gc
-3) {

284 
FILE
 *
Â
;

285 c⁄° 
TIFFFõld
 *
fù
;

286 *
ãxt
;

287 
size_t
 
Àn
;

289 
¨g_ödex
++;

290 
fù
 = 
	`GëFõld
(
tiff
, 
¨gv
[
¨g_ödex
]);

292 i‡(!
fù
)

295 i‡(
fù
->
fõld_ty≥
 !
TIFF_ASCII
) {

296 
	`Ârötf
–
°dîr
,

298 "%†i†nŸ ASCIIÅag.\n", 
fù
->
fõld_«me
 );

302 
¨g_ödex
++;

303 
Â
 = 
	`f›í
–
¨gv
[
¨g_ödex
], "rt" );

304 if(
Â
 =
NULL
) {

305 
	`≥º‹
–
¨gv
[
¨g_ödex
] );

309 
ãxt
 = (*Ë
	`mÆloc
(1000000);

310 
Àn
 = 
	`‰ód
–
ãxt
, 1, 999999, 
Â
 );

311 
ãxt
[
Àn
] = '\0';

313 
	`f˛o£
–
Â
 );

315 if(
	`TIFFSëFõld
–
tiff
, 
fù
->
fõld_èg
, 
ãxt
 ) != 1) {

316 
	`Ârötf
(
°dîr
, "FailedÅo set %s from file %s\n",

317 
fù
->
fõld_«me
, 
¨gv
[
¨g_ödex
]);

320 
	`_TIFF‰ì
–
ãxt
 );

321 
¨g_ödex
++;

323 
	`Ârötf
(
°dîr
, "Unrecognised option: %s\n",

324 
¨gv
[
¨g_ödex
]);

325 
	`ußge
();

329 
	`TIFFRewrôeDúe˘‹y
(
tiff
);

330 
	`TIFFClo£
(
tiff
);

332 
	}
}

	@tools/tiffsplit.c

27 
	~"tif_c⁄fig.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

33 
	~"tiffio.h
"

35 #i‚de‡
HAVE_GETOPT


36 
gë›t
(, **, *);

39 
	#C›yFõld
(
èg
, 
v
) \

40 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v
)Ë
	`TIFFSëFõld
(
out
,Åag, v)

	)

41 
	#C›yFõld2
(
èg
, 
v1
, 
v2
) \

42 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2)

	)

43 
	#C›yFõld3
(
èg
, 
v1
, 
v2
, 
v3
) \

44 i‡(
	`TIFFGëFõld
(
ö
, 
èg
, &
v1
, &
v2
, &
v3
)Ë
	`TIFFSëFõld
(
out
,Åag, v1, v2, v3)

	)

46 
	#PATH_LENGTH
 8192

	)

48 c⁄° 
	gTIFF_SUFFIX
[] = ".tif";

50 
	g‚ame
[
PATH_LENGTH
];

52 
tiff˝
(
TIFF
*, TIFF*);

53 
√wfûíame
();

54 
˝Såùs
(
TIFF
*, TIFF*);

55 
˝Tûes
(
TIFF
*, TIFF*);

58 
	$maö
(
¨gc
, * 
¨gv
[])

60 
TIFF
 *
ö
, *
out
;

62 i‡(
¨gc
 < 2) {

63 
	`Ârötf
(
°dîr
, "%s\n\n", 
	`TIFFGëVîsi⁄
());

64 
	`Ârötf
(
°dîr
, "usage:Åiffsplit input.tif [prefix]\n");

67 i‡(
¨gc
 > 2) {

68 
	`°∫˝y
(
‚ame
, 
¨gv
[2], (fname));

69 
‚ame
[(fname) - 1] = '\0';

71 
ö
 = 
	`TIFFO≥n
(
¨gv
[1], "r");

72 i‡(
ö
 !
NULL
) {

74 
size_t
 
∑th_Àn
;

75 *
∑th
;

77 
	`√wfûíame
();

79 
∑th_Àn
 = 
	`°æí
(
‚ame
Ë+ (
TIFF_SUFFIX
);

80 
∑th
 = (*Ë
	`_TIFFmÆloc
(
∑th_Àn
);

81 
	`°∫˝y
(
∑th
, 
‚ame
, 
∑th_Àn
);

82 
∑th
[
∑th_Àn
 - 1] = '\0';

83 
	`°∫ˇt
(
∑th
, 
TIFF_SUFFIX
, 
∑th_Àn
 - 
	`°æí
(path) - 1);

84 
out
 = 
	`TIFFO≥n
(
∑th
, 
	`TIFFIsBigEndün
(
ö
)?"wb":"wl");

85 
	`_TIFF‰ì
(
∑th
);

87 i‡(
out
 =
NULL
)

89 i‡(!
	`tiff˝
(
ö
, 
out
))

91 
	`TIFFClo£
(
out
);

92 } 
	`TIFFRódDúe˘‹y
(
ö
));

93 (Ë
	`TIFFClo£
(
ö
);

96 
	}
}

99 
	$√wfûíame
()

101 
fú°
 = 1;

102 
œ°Tu∫
;

103 
‚um
;

104 
de‚ame
;

105 *
Â¡
;

107 i‡(
fú°
) {

108 i‡(
‚ame
[0]) {

109 
Â¡
 = 
‚ame
 + 
	`°æí
(fname);

110 
de‚ame
 = 0;

112 
‚ame
[0] = 'x';

113 
Â¡
 = 
‚ame
 + 1;

114 
de‚ame
 = 1;

116 
fú°
 = 0;

118 
	#MAXFILES
 17576

	)

119 i‡(
‚um
 =
MAXFILES
) {

120 i‡(!
de‚ame
 || 
‚ame
[0] == 'z') {

121 
	`Ârötf
(
°dîr
, "tiffsplit:Åoo many files.\n");

122 
	`exô
(1);

124 
‚ame
[0]++;

125 
‚um
 = 0;

127 i‡(
‚um
 % 676 == 0) {

128 i‡(
‚um
 != 0) {

133 
Â¡
[0]++;

138 
Â¡
[0] = 'a';

143 
œ°Tu∫
 = 
‚um
;

149 
Â¡
[1] = ()((
‚um
 - 
œ°Tu∫
) / 26) + 'a';

153 
Â¡
[2] = ()(
‚um
 % 26) + 'a';

154 
‚um
++;

155 
	}
}

158 
	$tiff˝
(
TIFF
* 
ö
, TIFF* 
out
)

160 
uöt16
 
bô•îßm∂e
, 
ßm∂e•îpixñ
, 
com¥essi⁄
, 
sh‹tv
, *
sh‹èv
;

161 
uöt32
 
w
, 
l
;

162 
Êﬂtv
;

163 *
°rögv
;

164 
uöt32
 
l⁄gv
;

166 
	`C›yFõld
(
TIFFTAG_SUBFILETYPE
, 
l⁄gv
);

167 
	`C›yFõld
(
TIFFTAG_TILEWIDTH
, 
w
);

168 
	`C›yFõld
(
TIFFTAG_TILELENGTH
, 
l
);

169 
	`C›yFõld
(
TIFFTAG_IMAGEWIDTH
, 
w
);

170 
	`C›yFõld
(
TIFFTAG_IMAGELENGTH
, 
l
);

171 
	`C›yFõld
(
TIFFTAG_BITSPERSAMPLE
, 
bô•îßm∂e
);

172 
	`C›yFõld
(
TIFFTAG_SAMPLESPERPIXEL
, 
ßm∂e•îpixñ
);

173 
	`C›yFõld
(
TIFFTAG_COMPRESSION
, 
com¥essi⁄
);

174 i‡(
com¥essi⁄
 =
COMPRESSION_JPEG
) {

175 
uöt32
 
cou¡
 = 0;

176 *
èbÀ
 = 
NULL
;

177 i‡(
	`TIFFGëFõld
(
ö
, 
TIFFTAG_JPEGTABLES
, &
cou¡
, &
èbÀ
)

178 && 
cou¡
 > 0 && 
èbÀ
) {

179 
	`TIFFSëFõld
(
out
, 
TIFFTAG_JPEGTABLES
, 
cou¡
, 
èbÀ
);

182 
	`C›yFõld
(
TIFFTAG_PHOTOMETRIC
, 
sh‹tv
);

183 
	`C›yFõld
(
TIFFTAG_PREDICTOR
, 
sh‹tv
);

184 
	`C›yFõld
(
TIFFTAG_THRESHHOLDING
, 
sh‹tv
);

185 
	`C›yFõld
(
TIFFTAG_FILLORDER
, 
sh‹tv
);

186 
	`C›yFõld
(
TIFFTAG_ORIENTATION
, 
sh‹tv
);

187 
	`C›yFõld
(
TIFFTAG_MINSAMPLEVALUE
, 
sh‹tv
);

188 
	`C›yFõld
(
TIFFTAG_MAXSAMPLEVALUE
, 
sh‹tv
);

189 
	`C›yFõld
(
TIFFTAG_XRESOLUTION
, 
Êﬂtv
);

190 
	`C›yFõld
(
TIFFTAG_YRESOLUTION
, 
Êﬂtv
);

191 
	`C›yFõld
(
TIFFTAG_GROUP3OPTIONS
, 
l⁄gv
);

192 
	`C›yFõld
(
TIFFTAG_GROUP4OPTIONS
, 
l⁄gv
);

193 
	`C›yFõld
(
TIFFTAG_RESOLUTIONUNIT
, 
sh‹tv
);

194 
	`C›yFõld
(
TIFFTAG_PLANARCONFIG
, 
sh‹tv
);

195 
	`C›yFõld
(
TIFFTAG_ROWSPERSTRIP
, 
l⁄gv
);

196 
	`C›yFõld
(
TIFFTAG_XPOSITION
, 
Êﬂtv
);

197 
	`C›yFõld
(
TIFFTAG_YPOSITION
, 
Êﬂtv
);

198 
	`C›yFõld
(
TIFFTAG_IMAGEDEPTH
, 
l⁄gv
);

199 
	`C›yFõld
(
TIFFTAG_TILEDEPTH
, 
l⁄gv
);

200 
	`C›yFõld
(
TIFFTAG_SAMPLEFORMAT
, 
sh‹tv
);

201 
	`C›yFõld2
(
TIFFTAG_EXTRASAMPLES
, 
sh‹tv
, 
sh‹èv
);

202 { 
uöt16
 *
ªd
, *
gªí
, *
blue
;

203 
	`C›yFõld3
(
TIFFTAG_COLORMAP
, 
ªd
, 
gªí
, 
blue
);

205 { 
uöt16
 
sh‹tv2
;

206 
	`C›yFõld2
(
TIFFTAG_PAGENUMBER
, 
sh‹tv
, 
sh‹tv2
);

208 
	`C›yFõld
(
TIFFTAG_ARTIST
, 
°rögv
);

209 
	`C›yFõld
(
TIFFTAG_IMAGEDESCRIPTION
, 
°rögv
);

210 
	`C›yFõld
(
TIFFTAG_MAKE
, 
°rögv
);

211 
	`C›yFõld
(
TIFFTAG_MODEL
, 
°rögv
);

212 
	`C›yFõld
(
TIFFTAG_SOFTWARE
, 
°rögv
);

213 
	`C›yFõld
(
TIFFTAG_DATETIME
, 
°rögv
);

214 
	`C›yFõld
(
TIFFTAG_HOSTCOMPUTER
, 
°rögv
);

215 
	`C›yFõld
(
TIFFTAG_PAGENAME
, 
°rögv
);

216 
	`C›yFõld
(
TIFFTAG_DOCUMENTNAME
, 
°rögv
);

217 
	`C›yFõld
(
TIFFTAG_BADFAXLINES
, 
l⁄gv
);

218 
	`C›yFõld
(
TIFFTAG_CLEANFAXDATA
, 
l⁄gv
);

219 
	`C›yFõld
(
TIFFTAG_CONSECUTIVEBADFAXLINES
, 
l⁄gv
);

220 
	`C›yFõld
(
TIFFTAG_FAXRECVPARAMS
, 
l⁄gv
);

221 
	`C›yFõld
(
TIFFTAG_FAXRECVTIME
, 
l⁄gv
);

222 
	`C›yFõld
(
TIFFTAG_FAXSUBADDRESS
, 
°rögv
);

223 
	`C›yFõld
(
TIFFTAG_FAXDCS
, 
°rögv
);

224 i‡(
	`TIFFIsTûed
(
ö
))

225  (
	`˝Tûes
(
ö
, 
out
));

227  (
	`˝Såùs
(
ö
, 
out
));

228 
	}
}

231 
	$˝Såùs
(
TIFF
* 
ö
, TIFF* 
out
)

233 
tmsize_t
 
bufsize
 = 
	`TIFFSåùSize
(
ö
);

234 *
buf
 = (*)
	`_TIFFmÆloc
(
bufsize
);

236 i‡(
buf
) {

237 
t°rù_t
 
s
, 
ns
 = 
	`TIFFNumbîOfSåùs
(
ö
);

238 
uöt64
 *
byãcou¡s
;

240 i‡(!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_STRIPBYTECOUNTS
, &
byãcou¡s
)) {

241 
	`Ârötf
(
°dîr
, "tiffsplit: strip byte countsáre missing\n");

244 
s
 = 0; s < 
ns
; s++) {

245 i‡(
byãcou¡s
[
s
] > (
uöt64
)
bufsize
) {

246 
buf
 = (*)
	`_TIFFªÆloc
(buf, (
tmsize_t
)
byãcou¡s
[
s
]);

247 i‡(!
buf
)

249 
bufsize
 = (
tmsize_t
)
byãcou¡s
[
s
];

251 i‡(
	`TIFFRódRawSåù
(
ö
, 
s
, 
buf
, (
tmsize_t
)
byãcou¡s
[s]) < 0 ||

252 
	`TIFFWrôeRawSåù
(
out
, 
s
, 
buf
, (
tmsize_t
)
byãcou¡s
[s]) < 0) {

253 
	`_TIFF‰ì
(
buf
);

257 
	`_TIFF‰ì
(
buf
);

261 
	}
}

264 
	$˝Tûes
(
TIFF
* 
ö
, TIFF* 
out
)

266 
tmsize_t
 
bufsize
 = 
	`TIFFTûeSize
(
ö
);

267 *
buf
 = (*)
	`_TIFFmÆloc
(
bufsize
);

269 i‡(
buf
) {

270 
âûe_t
 
t
, 
¡
 = 
	`TIFFNumbîOfTûes
(
ö
);

271 
uöt64
 *
byãcou¡s
;

273 i‡(!
	`TIFFGëFõld
(
ö
, 
TIFFTAG_TILEBYTECOUNTS
, &
byãcou¡s
)) {

274 
	`Ârötf
(
°dîr
, "tiffsplit:Åile byte countsáre missing\n");

277 
t
 = 0;Å < 
¡
;Å++) {

278 i‡(
byãcou¡s
[
t
] > (
uöt64
Ë
bufsize
) {

279 
buf
 = (*)
	`_TIFFªÆloc
(buf, (
tmsize_t
)
byãcou¡s
[
t
]);

280 i‡(!
buf
)

282 
bufsize
 = (
tmsize_t
)
byãcou¡s
[
t
];

284 i‡(
	`TIFFRódRawTûe
(
ö
, 
t
, 
buf
, (
tmsize_t
)
byãcou¡s
[t]) < 0 ||

285 
	`TIFFWrôeRawTûe
(
out
, 
t
, 
buf
, (
tmsize_t
)
byãcou¡s
[t]) < 0) {

286 
	`_TIFF‰ì
(
buf
);

290 
	`_TIFF‰ì
(
buf
);

294 
	}
}

	@tools/ycbcr.c

1 
	gycb¸C€ffs
[3] = { .299, .587, .114 };

3 
	gªfBœckWhôe
[6] = { 0, 255, 128, 255, 128, 255 };

5 
	#LumaRed
 
ycb¸C€ffs
[0]

	)

6 
	#LumaGªí
 
ycb¸C€ffs
[1]

	)

7 
	#LumaBlue
 
ycb¸C€ffs
[2]

	)

9 
	geRtŸÆ
 = 0;

10 
	geGtŸÆ
 = 0;

11 
	geBtŸÆ
 = 0;

12 
	g¥eveRtŸÆ
 = 0;

13 
	g¥eveGtŸÆ
 = 0;

14 
	g¥eveBtŸÆ
 = 0;

15 
	gAb£RtŸÆ
 = 0;

16 
	gAb£GtŸÆ
 = 0;

17 
	gAb£BtŸÆ
 = 0;

18 
	geCodes
 = 0;

19 
	g¥eveCodes
 = 0;

20 
	geBôs
 = 0;

21 
	g¥eveBôs
 = 0;

23 
£tupLumaTabÀs
();

24 
	$abs
(
v
Ë{  (v < 0 ? -v : v); 
	}
}

25 
	$p˘
(
v
,
ønge
Ë{  (v*100. /Ñ™ge); 
	}
}

26 
check
(
R
, 
G
, 
B
);

28 
	gD1
, 
	gD2
;

29 
	gD3
, 
	gD4
;

30 
	gD5
, 
	gD6
;

33 
	$maö
(
¨gc
, ** 
¨gv
)

35 
R
, 
G
, 
B
;

37 i‡(
¨gc
 > 1) {

38 
ªfBœckWhôe
[0] = 16;

39 
ªfBœckWhôe
[1] = 235;

40 
ªfBœckWhôe
[2] = 128;

41 
ªfBœckWhôe
[3] = 240;

42 
ªfBœckWhôe
[4] = 128;

43 
ªfBœckWhôe
[5] = 240;

45 
D3
 = 2 - 2*
LumaRed
;

46 
D4
 = 2 - 2*
LumaBlue
;

47 
D1
 = 1. / 
D3
;

48 
D2
 = 1. / 
D4
;

49 
D5
 = 
D3
*
LumaRed
 / 
LumaGªí
;

50 
D6
 = 
D4
*
LumaBlue
 / 
LumaGªí
;

51 
	`£tupLumaTabÀs
();

52 
R
 = 0; R < 256; R++) {

53 
G
 = 0; G < 256; G++)

54 
B
 = 0; B < 256; B++)

55 
	`check
(
R
, 
G
, 
B
);

56 
	`¥ötf
("[%3u] c %u/%u b %u/%u (R %u/%d/%u G %u/%d/%u B %u/%d/%u)\n"

57 , 
R


58 , 
eCodes
 - 
¥eveCodes
,ÉCodes

59 , 
eBôs
 - 
¥eveBôs
,ÉBits

60 , 
	`abs
(
Ab£RtŸÆ
 - 
¥eveRtŸÆ
), 
eRtŸÆ
 , AbseRtotal

61 , 
	`abs
(
Ab£GtŸÆ
 - 
¥eveGtŸÆ
), 
eGtŸÆ
 , AbseGtotal

62 , 
	`abs
(
Ab£BtŸÆ
 - 
¥eveBtŸÆ
), 
eBtŸÆ
 , AbseBtotal

64 
¥eveRtŸÆ
 = 
Ab£RtŸÆ
;

65 
¥eveGtŸÆ
 = 
Ab£GtŸÆ
;

66 
¥eveBtŸÆ
 = 
Ab£BtŸÆ
;

67 
¥eveCodes
 = 
eCodes
;

68 
¥eveBôs
 = 
eBôs
;

70 
	`¥ötf
("%uÅotal codes\n", 256*256*256);

71 
	`¥ötf
("totalÉrror: %u codes %u bits (R %d/%u G %d/%u B %d/%u)\n"

72 , 
eCodes


73 , 
eBôs


74 , 
eRtŸÆ
 , 
Ab£RtŸÆ


75 , 
eGtŸÆ
 , 
Ab£GtŸÆ


76 , 
eBtŸÆ
 , 
Ab£BtŸÆ


79 
	}
}

81 *
	glumaRed
;

82 *
	glumaGªí
;

83 *
	glumaBlue
;

86 
	$£tupLuma
(
c
)

88 *
v
 = (*)
	`_TIFFmÆloc
(256 *  ());

89 
i
;

90 
i
 = 0; i < 256; i++)

91 
v
[
i
] = 
c
 * i;

92  (
v
);

93 
	}
}

96 
	$£tupLumaTabÀs
()

98 
lumaRed
 = 
	`£tupLuma
(
LumaRed
);

99 
lumaGªí
 = 
	`£tupLuma
(
LumaGªí
);

100 
lumaBlue
 = 
	`£tupLuma
(
LumaBlue
);

101 
	}
}

104 
	$V2Code
(
f
, 
RB
, 
RW
, 
CR
)

106 
c
 = ()((((
f
)*(
RW
-
RB
)/
CR
)+RB)+.5);

107  (
c
 > 255 ? 255 : c);

108 
	}
}

110 
	#Code2V
(
c
, 
RB
, 
RW
, 
CR
Ë((((c)-()RB)*()CR)/()(RW-RB))

	)

112 
	#CLAMP
(
f
,
mö
,
max
) \

113 ()((
f
)+.5 < (
mö
Ë? (möË: (f)+.5 > (
max
Ë? (maxË: (f)+.5)

	)

117 
	$check
(
R
, 
G
, 
B
)

119 
Y
, 
Cb
, 
Cr
;

120 
iY
, 
iCb
, 
iCr
;

121 
rY
, 
rCb
, 
rCr
;

122 
rR
, 
rG
, 
rB
;

123 
eR
, 
eG
, 
eB
;

125 
Y
 = 
lumaRed
[
R
] + 
lumaGªí
[
G
] + 
lumaBlue
[
B
];

126 
Cb
 = (
B
 - 
Y
)*
D2
;

127 
Cr
 = (
R
 - 
Y
)*
D1
;

128 
iY
 = 
	`V2Code
(
Y
, 
ªfBœckWhôe
[0],ÑefBlackWhite[1], 255);

129 
iCb
 = 
	`V2Code
(
Cb
, 
ªfBœckWhôe
[2],ÑefBlackWhite[3], 127);

130 
iCr
 = 
	`V2Code
(
Cr
, 
ªfBœckWhôe
[4],ÑefBlackWhite[5], 127);

131 
rCb
 = 
	`Code2V
(
iCb
, 
ªfBœckWhôe
[2],ÑefBlackWhite[3], 127);

132 
rCr
 = 
	`Code2V
(
iCr
, 
ªfBœckWhôe
[4],ÑefBlackWhite[5], 127);

133 
rY
 = 
	`Code2V
(
iY
, 
ªfBœckWhôe
[0],ÑefBlackWhite[1], 255);

134 
rR
 = 
rY
 + 
rCr
*
D3
;

135 
rB
 = 
rY
 + 
rCb
*
D4
;

136 
rG
 = 
rY
 - 
rCb
*
D6
 - 
rCr
*
D5
;

137 
eR
 = 
R
 - 
	`CLAMP
(
rR
,0,255);

138 
eG
 = 
G
 - 
	`CLAMP
(
rG
,0,255);

139 
eB
 = 
B
 - 
	`CLAMP
(
rB
,0,255);

140 i‡(
	`abs
(
eR
Ë> 1 ||ábs(
eG
Ë> 1 ||ábs(
eB
) > 1) {

141 
	`¥ötf
("R %u G %u B %u", 
R
, 
G
, 
B
);

142 
	`¥ötf
(" Y %g Cb %g C∏%g", 
Y
, 
Cb
, 
Cr
);

143 
	`¥ötf
(" iY %u iCb %u iC∏%u", 
iY
, 
iCb
, 
iCr
);

144 
	`¥ötf
("\¿-> Y %g Cb %g C∏%g", 
rY
, 
rCb
, 
rCr
);

145 
	`¥ötf
(" R %g (%u) G %g (%u) B %g (%u) E=[%d %d %d])\n"

146 , 
rR
, 
	`CLAMP
(rR,0,255)

147 , 
rG
, 
	`CLAMP
(rG,0,255)

148 , 
rB
, 
	`CLAMP
(rB,0,255)

149 , 
eR
, 
eG
, 
eB


152 
eRtŸÆ
 +
eR
;

153 
eGtŸÆ
 +
eG
;

154 
eBtŸÆ
 +
eB
;

155 
Ab£RtŸÆ
 +
	`abs
(
eR
);

156 
Ab£GtŸÆ
 +
	`abs
(
eG
);

157 
Ab£BtŸÆ
 +
	`abs
(
eB
);

158 i‡(
eR
 | 
eG
 | 
eB
)

159 
eCodes
++;

160 
eBôs
 +
	`abs
(
eR
Ë+ábs(
eG
Ë+ábs(
eB
);

161 
	}
}

	@/usr/include/GL/gl.h

27 #i‚de‡
__gl_h_


28 
	#__gl_h_


	)

30 #i‡
deföed
(
USE_MGL_NAMESPACE
)

31 
	~"gl_m™gÀ.h
"

39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

40 
	#__WIN32__


	)

43 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

44 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GL32
)

45 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

46 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

47 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

49 
	#GLAPI
 

	)

51 #i‡
deföed
(
__MINGW32__
Ë&& deföed(
GL_NO_STDCALL
Ë|| deföed(
UNDER_CE
)

52 
	#GLAPIENTRY


	)

54 
	#GLAPIENTRY
 
__°dˇŒ


	)

56 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
USE_OPENGL32
)

57 
	#GLAPI
 

	)

58 
	#GLAPIENTRY
 
__°dˇŒ


	)

59 #ñi‡(
deföed
(
__GNUC__
Ë&& __GNUC__ >4Ë|| (deföed(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

60 
	#GLAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

61 
	#GLAPIENTRY


	)

72 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
)

73 #i‚de‡
WIN32_LEAN_AND_MEAN


74 
	#WIN32_LEAN_AND_MEAN
 1

	)

76 
	~<wödows.h
>

79 #i‚de‡
GLAPI


80 
	#GLAPI
 

	)

83 #i‚de‡
GLAPIENTRY


84 
	#GLAPIENTRY


	)

87 #i‚de‡
APIENTRY


88 
	#APIENTRY
 
GLAPIENTRY


	)

92 #i‚de‡
APIENTRYP


93 
	#APIENTRYP
 
APIENTRY
 *

	)

96 #i‚de‡
GLAPIENTRYP


97 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

106 #ifde‡
__˝lu•lus


112 
	#GL_VERSION_1_1
 1

	)

113 
	#GL_VERSION_1_2
 1

	)

114 
	#GL_VERSION_1_3
 1

	)

115 
	#GL_ARB_imagög
 1

	)

121 
	tGLíum
;

122 
	tGLboﬁón
;

123 
	tGLbôfõld
;

124 
	tGLvoid
;

125 sig√d 
	tGLbyã
;

126 
	tGLsh‹t
;

127 
	tGLöt
;

128 
	tGLubyã
;

129 
	tGLush‹t
;

130 
	tGLuöt
;

131 
	tGLsizei
;

132 
	tGLÊﬂt
;

133 
	tGL˛ampf
;

134 
	tGLdoubÀ
;

135 
	tGL˛ampd
;

144 
	#GL_FALSE
 0

	)

145 
	#GL_TRUE
 1

	)

148 
	#GL_BYTE
 0x1400

	)

149 
	#GL_UNSIGNED_BYTE
 0x1401

	)

150 
	#GL_SHORT
 0x1402

	)

151 
	#GL_UNSIGNED_SHORT
 0x1403

	)

152 
	#GL_INT
 0x1404

	)

153 
	#GL_UNSIGNED_INT
 0x1405

	)

154 
	#GL_FLOAT
 0x1406

	)

155 
	#GL_2_BYTES
 0x1407

	)

156 
	#GL_3_BYTES
 0x1408

	)

157 
	#GL_4_BYTES
 0x1409

	)

158 
	#GL_DOUBLE
 0x140A

	)

161 
	#GL_POINTS
 0x0000

	)

162 
	#GL_LINES
 0x0001

	)

163 
	#GL_LINE_LOOP
 0x0002

	)

164 
	#GL_LINE_STRIP
 0x0003

	)

165 
	#GL_TRIANGLES
 0x0004

	)

166 
	#GL_TRIANGLE_STRIP
 0x0005

	)

167 
	#GL_TRIANGLE_FAN
 0x0006

	)

168 
	#GL_QUADS
 0x0007

	)

169 
	#GL_QUAD_STRIP
 0x0008

	)

170 
	#GL_POLYGON
 0x0009

	)

173 
	#GL_VERTEX_ARRAY
 0x8074

	)

174 
	#GL_NORMAL_ARRAY
 0x8075

	)

175 
	#GL_COLOR_ARRAY
 0x8076

	)

176 
	#GL_INDEX_ARRAY
 0x8077

	)

177 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

178 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

179 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

180 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

181 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

182 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

183 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

184 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

185 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

186 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

187 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

188 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

189 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

190 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

191 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

192 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

193 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

194 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

195 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

196 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

197 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

198 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

199 
	#GL_V2F
 0x2A20

	)

200 
	#GL_V3F
 0x2A21

	)

201 
	#GL_C4UB_V2F
 0x2A22

	)

202 
	#GL_C4UB_V3F
 0x2A23

	)

203 
	#GL_C3F_V3F
 0x2A24

	)

204 
	#GL_N3F_V3F
 0x2A25

	)

205 
	#GL_C4F_N3F_V3F
 0x2A26

	)

206 
	#GL_T2F_V3F
 0x2A27

	)

207 
	#GL_T4F_V4F
 0x2A28

	)

208 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

209 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

210 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

211 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

212 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

215 
	#GL_MATRIX_MODE
 0x0BA0

	)

216 
	#GL_MODELVIEW
 0x1700

	)

217 
	#GL_PROJECTION
 0x1701

	)

218 
	#GL_TEXTURE
 0x1702

	)

221 
	#GL_POINT_SMOOTH
 0x0B10

	)

222 
	#GL_POINT_SIZE
 0x0B11

	)

223 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

224 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

227 
	#GL_LINE_SMOOTH
 0x0B20

	)

228 
	#GL_LINE_STIPPLE
 0x0B24

	)

229 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

230 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

231 
	#GL_LINE_WIDTH
 0x0B21

	)

232 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

233 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

236 
	#GL_POINT
 0x1B00

	)

237 
	#GL_LINE
 0x1B01

	)

238 
	#GL_FILL
 0x1B02

	)

239 
	#GL_CW
 0x0900

	)

240 
	#GL_CCW
 0x0901

	)

241 
	#GL_FRONT
 0x0404

	)

242 
	#GL_BACK
 0x0405

	)

243 
	#GL_POLYGON_MODE
 0x0B40

	)

244 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

245 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

246 
	#GL_EDGE_FLAG
 0x0B43

	)

247 
	#GL_CULL_FACE
 0x0B44

	)

248 
	#GL_CULL_FACE_MODE
 0x0B45

	)

249 
	#GL_FRONT_FACE
 0x0B46

	)

250 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

251 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

252 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

253 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

254 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

257 
	#GL_COMPILE
 0x1300

	)

258 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

259 
	#GL_LIST_BASE
 0x0B32

	)

260 
	#GL_LIST_INDEX
 0x0B33

	)

261 
	#GL_LIST_MODE
 0x0B30

	)

264 
	#GL_NEVER
 0x0200

	)

265 
	#GL_LESS
 0x0201

	)

266 
	#GL_EQUAL
 0x0202

	)

267 
	#GL_LEQUAL
 0x0203

	)

268 
	#GL_GREATER
 0x0204

	)

269 
	#GL_NOTEQUAL
 0x0205

	)

270 
	#GL_GEQUAL
 0x0206

	)

271 
	#GL_ALWAYS
 0x0207

	)

272 
	#GL_DEPTH_TEST
 0x0B71

	)

273 
	#GL_DEPTH_BITS
 0x0D56

	)

274 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

275 
	#GL_DEPTH_FUNC
 0x0B74

	)

276 
	#GL_DEPTH_RANGE
 0x0B70

	)

277 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

278 
	#GL_DEPTH_COMPONENT
 0x1902

	)

281 
	#GL_LIGHTING
 0x0B50

	)

282 
	#GL_LIGHT0
 0x4000

	)

283 
	#GL_LIGHT1
 0x4001

	)

284 
	#GL_LIGHT2
 0x4002

	)

285 
	#GL_LIGHT3
 0x4003

	)

286 
	#GL_LIGHT4
 0x4004

	)

287 
	#GL_LIGHT5
 0x4005

	)

288 
	#GL_LIGHT6
 0x4006

	)

289 
	#GL_LIGHT7
 0x4007

	)

290 
	#GL_SPOT_EXPONENT
 0x1205

	)

291 
	#GL_SPOT_CUTOFF
 0x1206

	)

292 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

293 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

294 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

295 
	#GL_AMBIENT
 0x1200

	)

296 
	#GL_DIFFUSE
 0x1201

	)

297 
	#GL_SPECULAR
 0x1202

	)

298 
	#GL_SHININESS
 0x1601

	)

299 
	#GL_EMISSION
 0x1600

	)

300 
	#GL_POSITION
 0x1203

	)

301 
	#GL_SPOT_DIRECTION
 0x1204

	)

302 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

303 
	#GL_COLOR_INDEXES
 0x1603

	)

304 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

305 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

306 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

307 
	#GL_FRONT_AND_BACK
 0x0408

	)

308 
	#GL_SHADE_MODEL
 0x0B54

	)

309 
	#GL_FLAT
 0x1D00

	)

310 
	#GL_SMOOTH
 0x1D01

	)

311 
	#GL_COLOR_MATERIAL
 0x0B57

	)

312 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

313 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

314 
	#GL_NORMALIZE
 0x0BA1

	)

317 
	#GL_CLIP_PLANE0
 0x3000

	)

318 
	#GL_CLIP_PLANE1
 0x3001

	)

319 
	#GL_CLIP_PLANE2
 0x3002

	)

320 
	#GL_CLIP_PLANE3
 0x3003

	)

321 
	#GL_CLIP_PLANE4
 0x3004

	)

322 
	#GL_CLIP_PLANE5
 0x3005

	)

325 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

326 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

327 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

328 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

329 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

330 
	#GL_ACCUM
 0x0100

	)

331 
	#GL_ADD
 0x0104

	)

332 
	#GL_LOAD
 0x0101

	)

333 
	#GL_MULT
 0x0103

	)

334 
	#GL_RETURN
 0x0102

	)

337 
	#GL_ALPHA_TEST
 0x0BC0

	)

338 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

339 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

342 
	#GL_BLEND
 0x0BE2

	)

343 
	#GL_BLEND_SRC
 0x0BE1

	)

344 
	#GL_BLEND_DST
 0x0BE0

	)

345 
	#GL_ZERO
 0

	)

346 
	#GL_ONE
 1

	)

347 
	#GL_SRC_COLOR
 0x0300

	)

348 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

349 
	#GL_SRC_ALPHA
 0x0302

	)

350 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

351 
	#GL_DST_ALPHA
 0x0304

	)

352 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

353 
	#GL_DST_COLOR
 0x0306

	)

354 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

355 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

358 
	#GL_FEEDBACK
 0x1C01

	)

359 
	#GL_RENDER
 0x1C00

	)

360 
	#GL_SELECT
 0x1C02

	)

363 
	#GL_2D
 0x0600

	)

364 
	#GL_3D
 0x0601

	)

365 
	#GL_3D_COLOR
 0x0602

	)

366 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

367 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

368 
	#GL_POINT_TOKEN
 0x0701

	)

369 
	#GL_LINE_TOKEN
 0x0702

	)

370 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

371 
	#GL_POLYGON_TOKEN
 0x0703

	)

372 
	#GL_BITMAP_TOKEN
 0x0704

	)

373 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

374 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

375 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

376 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

377 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

378 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

381 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

382 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

385 
	#GL_FOG
 0x0B60

	)

386 
	#GL_FOG_MODE
 0x0B65

	)

387 
	#GL_FOG_DENSITY
 0x0B62

	)

388 
	#GL_FOG_COLOR
 0x0B66

	)

389 
	#GL_FOG_INDEX
 0x0B61

	)

390 
	#GL_FOG_START
 0x0B63

	)

391 
	#GL_FOG_END
 0x0B64

	)

392 
	#GL_LINEAR
 0x2601

	)

393 
	#GL_EXP
 0x0800

	)

394 
	#GL_EXP2
 0x0801

	)

397 
	#GL_LOGIC_OP
 0x0BF1

	)

398 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

399 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

400 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

401 
	#GL_CLEAR
 0x1500

	)

402 
	#GL_SET
 0x150F

	)

403 
	#GL_COPY
 0x1503

	)

404 
	#GL_COPY_INVERTED
 0x150C

	)

405 
	#GL_NOOP
 0x1505

	)

406 
	#GL_INVERT
 0x150A

	)

407 
	#GL_AND
 0x1501

	)

408 
	#GL_NAND
 0x150E

	)

409 
	#GL_OR
 0x1507

	)

410 
	#GL_NOR
 0x1508

	)

411 
	#GL_XOR
 0x1506

	)

412 
	#GL_EQUIV
 0x1509

	)

413 
	#GL_AND_REVERSE
 0x1502

	)

414 
	#GL_AND_INVERTED
 0x1504

	)

415 
	#GL_OR_REVERSE
 0x150B

	)

416 
	#GL_OR_INVERTED
 0x150D

	)

419 
	#GL_STENCIL_BITS
 0x0D57

	)

420 
	#GL_STENCIL_TEST
 0x0B90

	)

421 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

422 
	#GL_STENCIL_FUNC
 0x0B92

	)

423 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

424 
	#GL_STENCIL_FAIL
 0x0B94

	)

425 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

426 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

427 
	#GL_STENCIL_REF
 0x0B97

	)

428 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

429 
	#GL_STENCIL_INDEX
 0x1901

	)

430 
	#GL_KEEP
 0x1E00

	)

431 
	#GL_REPLACE
 0x1E01

	)

432 
	#GL_INCR
 0x1E02

	)

433 
	#GL_DECR
 0x1E03

	)

436 
	#GL_NONE
 0

	)

437 
	#GL_LEFT
 0x0406

	)

438 
	#GL_RIGHT
 0x0407

	)

442 
	#GL_FRONT_LEFT
 0x0400

	)

443 
	#GL_FRONT_RIGHT
 0x0401

	)

444 
	#GL_BACK_LEFT
 0x0402

	)

445 
	#GL_BACK_RIGHT
 0x0403

	)

446 
	#GL_AUX0
 0x0409

	)

447 
	#GL_AUX1
 0x040A

	)

448 
	#GL_AUX2
 0x040B

	)

449 
	#GL_AUX3
 0x040C

	)

450 
	#GL_COLOR_INDEX
 0x1900

	)

451 
	#GL_RED
 0x1903

	)

452 
	#GL_GREEN
 0x1904

	)

453 
	#GL_BLUE
 0x1905

	)

454 
	#GL_ALPHA
 0x1906

	)

455 
	#GL_LUMINANCE
 0x1909

	)

456 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

457 
	#GL_ALPHA_BITS
 0x0D55

	)

458 
	#GL_RED_BITS
 0x0D52

	)

459 
	#GL_GREEN_BITS
 0x0D53

	)

460 
	#GL_BLUE_BITS
 0x0D54

	)

461 
	#GL_INDEX_BITS
 0x0D51

	)

462 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

463 
	#GL_AUX_BUFFERS
 0x0C00

	)

464 
	#GL_READ_BUFFER
 0x0C02

	)

465 
	#GL_DRAW_BUFFER
 0x0C01

	)

466 
	#GL_DOUBLEBUFFER
 0x0C32

	)

467 
	#GL_STEREO
 0x0C33

	)

468 
	#GL_BITMAP
 0x1A00

	)

469 
	#GL_COLOR
 0x1800

	)

470 
	#GL_DEPTH
 0x1801

	)

471 
	#GL_STENCIL
 0x1802

	)

472 
	#GL_DITHER
 0x0BD0

	)

473 
	#GL_RGB
 0x1907

	)

474 
	#GL_RGBA
 0x1908

	)

477 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

478 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

479 
	#GL_MAX_LIGHTS
 0x0D31

	)

480 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

481 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

482 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

483 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

484 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

485 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

486 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

487 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

488 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

489 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

492 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

493 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

494 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

495 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

496 
	#GL_CURRENT_INDEX
 0x0B01

	)

497 
	#GL_CURRENT_COLOR
 0x0B00

	)

498 
	#GL_CURRENT_NORMAL
 0x0B02

	)

499 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

500 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

501 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

502 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

503 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

504 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

505 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

506 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

507 
	#GL_INDEX_MODE
 0x0C30

	)

508 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

509 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

510 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

511 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

512 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

513 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

514 
	#GL_RENDER_MODE
 0x0C40

	)

515 
	#GL_RGBA_MODE
 0x0C31

	)

516 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

517 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

518 
	#GL_VIEWPORT
 0x0BA2

	)

521 
	#GL_AUTO_NORMAL
 0x0D80

	)

522 
	#GL_MAP1_COLOR_4
 0x0D90

	)

523 
	#GL_MAP1_INDEX
 0x0D91

	)

524 
	#GL_MAP1_NORMAL
 0x0D92

	)

525 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

526 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

527 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

528 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

529 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

530 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

531 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

532 
	#GL_MAP2_INDEX
 0x0DB1

	)

533 
	#GL_MAP2_NORMAL
 0x0DB2

	)

534 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

535 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

536 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

537 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

538 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

539 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

540 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

541 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

542 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

543 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

544 
	#GL_COEFF
 0x0A00

	)

545 
	#GL_ORDER
 0x0A01

	)

546 
	#GL_DOMAIN
 0x0A02

	)

549 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

550 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

551 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

552 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

553 
	#GL_FOG_HINT
 0x0C54

	)

554 
	#GL_DONT_CARE
 0x1100

	)

555 
	#GL_FASTEST
 0x1101

	)

556 
	#GL_NICEST
 0x1102

	)

559 
	#GL_SCISSOR_BOX
 0x0C10

	)

560 
	#GL_SCISSOR_TEST
 0x0C11

	)

563 
	#GL_MAP_COLOR
 0x0D10

	)

564 
	#GL_MAP_STENCIL
 0x0D11

	)

565 
	#GL_INDEX_SHIFT
 0x0D12

	)

566 
	#GL_INDEX_OFFSET
 0x0D13

	)

567 
	#GL_RED_SCALE
 0x0D14

	)

568 
	#GL_RED_BIAS
 0x0D15

	)

569 
	#GL_GREEN_SCALE
 0x0D18

	)

570 
	#GL_GREEN_BIAS
 0x0D19

	)

571 
	#GL_BLUE_SCALE
 0x0D1A

	)

572 
	#GL_BLUE_BIAS
 0x0D1B

	)

573 
	#GL_ALPHA_SCALE
 0x0D1C

	)

574 
	#GL_ALPHA_BIAS
 0x0D1D

	)

575 
	#GL_DEPTH_SCALE
 0x0D1E

	)

576 
	#GL_DEPTH_BIAS
 0x0D1F

	)

577 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

578 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

579 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

580 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

581 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

582 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

583 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

584 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

585 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

586 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

587 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

588 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

589 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

590 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

591 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

592 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

593 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

594 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

595 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

596 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

597 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

598 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

599 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

600 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

601 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

602 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

603 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

604 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

605 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

606 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

607 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

608 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

609 
	#GL_ZOOM_X
 0x0D16

	)

610 
	#GL_ZOOM_Y
 0x0D17

	)

613 
	#GL_TEXTURE_ENV
 0x2300

	)

614 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

615 
	#GL_TEXTURE_1D
 0x0DE0

	)

616 
	#GL_TEXTURE_2D
 0x0DE1

	)

617 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

618 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

619 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

620 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

621 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

622 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

623 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

624 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

625 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

626 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

627 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

628 
	#GL_TEXTURE_WIDTH
 0x1000

	)

629 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

630 
	#GL_TEXTURE_BORDER
 0x1005

	)

631 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

632 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

633 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

634 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

635 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

636 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

637 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

638 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

639 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

640 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

641 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

642 
	#GL_OBJECT_LINEAR
 0x2401

	)

643 
	#GL_OBJECT_PLANE
 0x2501

	)

644 
	#GL_EYE_LINEAR
 0x2400

	)

645 
	#GL_EYE_PLANE
 0x2502

	)

646 
	#GL_SPHERE_MAP
 0x2402

	)

647 
	#GL_DECAL
 0x2101

	)

648 
	#GL_MODULATE
 0x2100

	)

649 
	#GL_NEAREST
 0x2600

	)

650 
	#GL_REPEAT
 0x2901

	)

651 
	#GL_CLAMP
 0x2900

	)

652 
	#GL_S
 0x2000

	)

653 
	#GL_T
 0x2001

	)

654 
	#GL_R
 0x2002

	)

655 
	#GL_Q
 0x2003

	)

658 
	#GL_VENDOR
 0x1F00

	)

659 
	#GL_RENDERER
 0x1F01

	)

660 
	#GL_VERSION
 0x1F02

	)

661 
	#GL_EXTENSIONS
 0x1F03

	)

664 
	#GL_NO_ERROR
 0

	)

665 
	#GL_INVALID_ENUM
 0x0500

	)

666 
	#GL_INVALID_VALUE
 0x0501

	)

667 
	#GL_INVALID_OPERATION
 0x0502

	)

668 
	#GL_STACK_OVERFLOW
 0x0503

	)

669 
	#GL_STACK_UNDERFLOW
 0x0504

	)

670 
	#GL_OUT_OF_MEMORY
 0x0505

	)

673 
	#GL_CURRENT_BIT
 0x00000001

	)

674 
	#GL_POINT_BIT
 0x00000002

	)

675 
	#GL_LINE_BIT
 0x00000004

	)

676 
	#GL_POLYGON_BIT
 0x00000008

	)

677 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

678 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

679 
	#GL_LIGHTING_BIT
 0x00000040

	)

680 
	#GL_FOG_BIT
 0x00000080

	)

681 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

682 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

683 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

684 
	#GL_VIEWPORT_BIT
 0x00000800

	)

685 
	#GL_TRANSFORM_BIT
 0x00001000

	)

686 
	#GL_ENABLE_BIT
 0x00002000

	)

687 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

688 
	#GL_HINT_BIT
 0x00008000

	)

689 
	#GL_EVAL_BIT
 0x00010000

	)

690 
	#GL_LIST_BIT
 0x00020000

	)

691 
	#GL_TEXTURE_BIT
 0x00040000

	)

692 
	#GL_SCISSOR_BIT
 0x00080000

	)

693 
	#GL_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

697 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

698 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

699 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

700 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

701 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

702 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

703 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

704 
	#GL_ALPHA4
 0x803B

	)

705 
	#GL_ALPHA8
 0x803C

	)

706 
	#GL_ALPHA12
 0x803D

	)

707 
	#GL_ALPHA16
 0x803E

	)

708 
	#GL_LUMINANCE4
 0x803F

	)

709 
	#GL_LUMINANCE8
 0x8040

	)

710 
	#GL_LUMINANCE12
 0x8041

	)

711 
	#GL_LUMINANCE16
 0x8042

	)

712 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

713 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

714 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

715 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

716 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

717 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

718 
	#GL_INTENSITY
 0x8049

	)

719 
	#GL_INTENSITY4
 0x804A

	)

720 
	#GL_INTENSITY8
 0x804B

	)

721 
	#GL_INTENSITY12
 0x804C

	)

722 
	#GL_INTENSITY16
 0x804D

	)

723 
	#GL_R3_G3_B2
 0x2A10

	)

724 
	#GL_RGB4
 0x804F

	)

725 
	#GL_RGB5
 0x8050

	)

726 
	#GL_RGB8
 0x8051

	)

727 
	#GL_RGB10
 0x8052

	)

728 
	#GL_RGB12
 0x8053

	)

729 
	#GL_RGB16
 0x8054

	)

730 
	#GL_RGBA2
 0x8055

	)

731 
	#GL_RGBA4
 0x8056

	)

732 
	#GL_RGB5_A1
 0x8057

	)

733 
	#GL_RGBA8
 0x8058

	)

734 
	#GL_RGB10_A2
 0x8059

	)

735 
	#GL_RGBA12
 0x805A

	)

736 
	#GL_RGBA16
 0x805B

	)

737 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

738 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

739 
	#GL_ALL_CLIENT_ATTRIB_BITS
 0xFFFFFFFF

	)

740 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

748 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Index
–
GLÊﬂt
 
c
 );

750 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Cﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
 );

752 
GLAPI
 
GLAPIENTRY
 
glCÀ¨
–
GLbôfõld
 
mask
 );

754 
GLAPI
 
GLAPIENTRY
 
glIndexMask
–
GLuöt
 
mask
 );

756 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Mask
–
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
 );

758 
GLAPI
 
GLAPIENTRY
 
glAÕhaFunc
–
GLíum
 
func
, 
GL˛ampf
 
ªf
 );

760 
GLAPI
 
GLAPIENTRY
 
glBÀndFunc
–
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
 );

762 
GLAPI
 
GLAPIENTRY
 
glLogicOp
–
GLíum
 
›code
 );

764 
GLAPI
 
GLAPIENTRY
 
glCuŒFa˚
–
GLíum
 
mode
 );

766 
GLAPI
 
GLAPIENTRY
 
glFr⁄tFa˚
–
GLíum
 
mode
 );

768 
GLAPI
 
GLAPIENTRY
 
glPoötSize
–
GLÊﬂt
 
size
 );

770 
GLAPI
 
GLAPIENTRY
 
glLöeWidth
–
GLÊﬂt
 
width
 );

772 
GLAPI
 
GLAPIENTRY
 
glLöeStù∂e
–
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
 );

774 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Mode
–
GLíum
 
Á˚
, GLíum 
mode
 );

776 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Off£t
–
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
 );

778 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Stù∂e
–c⁄° 
GLubyã
 *
mask
 );

780 
GLAPI
 
GLAPIENTRY
 
glGëPﬁyg⁄Stù∂e
–
GLubyã
 *
mask
 );

782 
GLAPI
 
GLAPIENTRY
 
glEdgeFœg
–
GLboﬁón
 
Êag
 );

784 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgv
–c⁄° 
GLboﬁón
 *
Êag
 );

786 
GLAPI
 
GLAPIENTRY
 
glSciss‹
–
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

788 
GLAPI
 
GLAPIENTRY
 
glClùPœ√
–
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
 );

790 
GLAPI
 
GLAPIENTRY
 
glGëClùPœ√
–
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
 );

792 
GLAPI
 
GLAPIENTRY
 
glDøwBuf„r
–
GLíum
 
mode
 );

794 
GLAPI
 
GLAPIENTRY
 
glRódBuf„r
–
GLíum
 
mode
 );

796 
GLAPI
 
GLAPIENTRY
 
glE«bÀ
–
GLíum
 
ˇp
 );

798 
GLAPI
 
GLAPIENTRY
 
glDißbÀ
–
GLíum
 
ˇp
 );

800 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsE«bÀd
–
GLíum
 
ˇp
 );

803 
GLAPI
 
GLAPIENTRY
 
glE«bÀClõ¡Sèã
–
GLíum
 
ˇp
 );

805 
GLAPI
 
GLAPIENTRY
 
glDißbÀClõ¡Sèã
–
GLíum
 
ˇp
 );

808 
GLAPI
 
GLAPIENTRY
 
glGëBoﬁónv
–
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
 );

810 
GLAPI
 
GLAPIENTRY
 
glGëDoubÀv
–
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

812 
GLAPI
 
GLAPIENTRY
 
glGëFlﬂtv
–
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

814 
GLAPI
 
GLAPIENTRY
 
glGëI¡egîv
–
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

817 
GLAPI
 
GLAPIENTRY
 
glPushAârib
–
GLbôfõld
 
mask
 );

819 
GLAPI
 
GLAPIENTRY
 
glP›Aârib
( );

822 
GLAPI
 
GLAPIENTRY
 
glPushClõ¡Aârib
–
GLbôfõld
 
mask
 );

824 
GLAPI
 
GLAPIENTRY
 
glP›Clõ¡Aârib
( );

827 
GLAPI
 
GLöt
 
GLAPIENTRY
 
glRídîMode
–
GLíum
 
mode
 );

829 
GLAPI
 
GLíum
 
GLAPIENTRY
 
glGëEº‹
( );

831 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
glGëSåög
–
GLíum
 
«me
 );

833 
GLAPI
 
GLAPIENTRY
 
glFöish
( );

835 
GLAPI
 
GLAPIENTRY
 
glFlush
( );

837 
GLAPI
 
GLAPIENTRY
 
glHöt
–
GLíum
 
èrgë
, GLíum 
mode
 );

844 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Dïth
–
GL˛ampd
 
dïth
 );

846 
GLAPI
 
GLAPIENTRY
 
glDïthFunc
–
GLíum
 
func
 );

848 
GLAPI
 
GLAPIENTRY
 
glDïthMask
–
GLboﬁón
 
Êag
 );

850 
GLAPI
 
GLAPIENTRY
 
glDïthR™ge
–
GL˛ampd
 
√¨_vÆ
, GL˛ampd 
Ár_vÆ
 );

857 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Accum
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
 );

859 
GLAPI
 
GLAPIENTRY
 
glAccum
–
GLíum
 
›
, 
GLÊﬂt
 
vÆue
 );

866 
GLAPI
 
GLAPIENTRY
 
glM©rixMode
–
GLíum
 
mode
 );

868 
GLAPI
 
GLAPIENTRY
 
glOπho
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

869 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

870 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

872 
GLAPI
 
GLAPIENTRY
 
glFru°um
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

873 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

874 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

876 
GLAPI
 
GLAPIENTRY
 
glVõwp‹t
–
GLöt
 
x
, GLöà
y
,

877 
GLsizei
 
width
, GLsizeò
height
 );

879 
GLAPI
 
GLAPIENTRY
 
glPushM©rix
( );

881 
GLAPI
 
GLAPIENTRY
 
glP›M©rix
( );

883 
GLAPI
 
GLAPIENTRY
 
glLﬂdIdítôy
( );

885 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

886 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

888 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

889 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

891 
GLAPI
 
GLAPIENTRY
 
glRŸ©ed
–
GLdoubÀ
 
™gÀ
,

892 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

893 
GLAPI
 
GLAPIENTRY
 
glRŸ©ef
–
GLÊﬂt
 
™gÀ
,

894 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

896 
GLAPI
 
GLAPIENTRY
 
glSˇÀd
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

897 
GLAPI
 
GLAPIENTRY
 
glSˇÀf
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

899 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ed
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

900 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ef
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

907 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsLi°
–
GLuöt
 
li°
 );

909 
GLAPI
 
GLAPIENTRY
 
glDñëeLi°s
–
GLuöt
 
li°
, 
GLsizei
 
ønge
 );

911 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
glGíLi°s
–
GLsizei
 
ønge
 );

913 
GLAPI
 
GLAPIENTRY
 
glNewLi°
–
GLuöt
 
li°
, 
GLíum
 
mode
 );

915 
GLAPI
 
GLAPIENTRY
 
glEndLi°
( );

917 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°
–
GLuöt
 
li°
 );

919 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°s
–
GLsizei
 
n
, 
GLíum
 
ty≥
,

920 c⁄° 
GLvoid
 *
li°s
 );

922 
GLAPI
 
GLAPIENTRY
 
glLi°Ba£
–
GLuöt
 
ba£
 );

929 
GLAPI
 
GLAPIENTRY
 
glBegö
–
GLíum
 
mode
 );

931 
GLAPI
 
GLAPIENTRY
 
glEnd
( );

934 
GLAPI
 
GLAPIENTRY
 
glVîãx2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

935 
GLAPI
 
GLAPIENTRY
 
glVîãx2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

936 
GLAPI
 
GLAPIENTRY
 
glVîãx2i
–
GLöt
 
x
, GLöà
y
 );

937 
GLAPI
 
GLAPIENTRY
 
glVîãx2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

939 
GLAPI
 
GLAPIENTRY
 
glVîãx3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

940 
GLAPI
 
GLAPIENTRY
 
glVîãx3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

941 
GLAPI
 
GLAPIENTRY
 
glVîãx3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

942 
GLAPI
 
GLAPIENTRY
 
glVîãx3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

944 
GLAPI
 
GLAPIENTRY
 
glVîãx4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

945 
GLAPI
 
GLAPIENTRY
 
glVîãx4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

946 
GLAPI
 
GLAPIENTRY
 
glVîãx4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

947 
GLAPI
 
GLAPIENTRY
 
glVîãx4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

949 
GLAPI
 
GLAPIENTRY
 
glVîãx2dv
–c⁄° 
GLdoubÀ
 *
v
 );

950 
GLAPI
 
GLAPIENTRY
 
glVîãx2fv
–c⁄° 
GLÊﬂt
 *
v
 );

951 
GLAPI
 
GLAPIENTRY
 
glVîãx2iv
–c⁄° 
GLöt
 *
v
 );

952 
GLAPI
 
GLAPIENTRY
 
glVîãx2sv
–c⁄° 
GLsh‹t
 *
v
 );

954 
GLAPI
 
GLAPIENTRY
 
glVîãx3dv
–c⁄° 
GLdoubÀ
 *
v
 );

955 
GLAPI
 
GLAPIENTRY
 
glVîãx3fv
–c⁄° 
GLÊﬂt
 *
v
 );

956 
GLAPI
 
GLAPIENTRY
 
glVîãx3iv
–c⁄° 
GLöt
 *
v
 );

957 
GLAPI
 
GLAPIENTRY
 
glVîãx3sv
–c⁄° 
GLsh‹t
 *
v
 );

959 
GLAPI
 
GLAPIENTRY
 
glVîãx4dv
–c⁄° 
GLdoubÀ
 *
v
 );

960 
GLAPI
 
GLAPIENTRY
 
glVîãx4fv
–c⁄° 
GLÊﬂt
 *
v
 );

961 
GLAPI
 
GLAPIENTRY
 
glVîãx4iv
–c⁄° 
GLöt
 *
v
 );

962 
GLAPI
 
GLAPIENTRY
 
glVîãx4sv
–c⁄° 
GLsh‹t
 *
v
 );

965 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3b
–
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
 );

966 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3d
–
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
 );

967 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3f
–
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
 );

968 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3i
–
GLöt
 
nx
, GLöà
ny
, GLöà
nz
 );

969 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3s
–
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
 );

971 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3bv
–c⁄° 
GLbyã
 *
v
 );

972 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3dv
–c⁄° 
GLdoubÀ
 *
v
 );

973 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3fv
–c⁄° 
GLÊﬂt
 *
v
 );

974 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3iv
–c⁄° 
GLöt
 *
v
 );

975 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3sv
–c⁄° 
GLsh‹t
 *
v
 );

978 
GLAPI
 
GLAPIENTRY
 
glIndexd
–
GLdoubÀ
 
c
 );

979 
GLAPI
 
GLAPIENTRY
 
glIndexf
–
GLÊﬂt
 
c
 );

980 
GLAPI
 
GLAPIENTRY
 
glIndexi
–
GLöt
 
c
 );

981 
GLAPI
 
GLAPIENTRY
 
glIndexs
–
GLsh‹t
 
c
 );

982 
GLAPI
 
GLAPIENTRY
 
glIndexub
–
GLubyã
 
c
 );

984 
GLAPI
 
GLAPIENTRY
 
glIndexdv
–c⁄° 
GLdoubÀ
 *
c
 );

985 
GLAPI
 
GLAPIENTRY
 
glIndexfv
–c⁄° 
GLÊﬂt
 *
c
 );

986 
GLAPI
 
GLAPIENTRY
 
glIndexiv
–c⁄° 
GLöt
 *
c
 );

987 
GLAPI
 
GLAPIENTRY
 
glIndexsv
–c⁄° 
GLsh‹t
 *
c
 );

988 
GLAPI
 
GLAPIENTRY
 
glIndexubv
–c⁄° 
GLubyã
 *
c
 );

990 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3b
–
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
 );

991 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
 );

992 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
 );

993 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3i
–
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
 );

994 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
 );

995 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ub
–
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
 );

996 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ui
–
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
 );

997 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3us
–
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
 );

999 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4b
–
GLbyã
 
ªd
, GLbyã 
gªí
,

1000 
GLbyã
 
blue
, GLbyã 
Æpha
 );

1001 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
,

1002 
GLdoubÀ
 
blue
, GLdoubÀ 
Æpha
 );

1003 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
,

1004 
GLÊﬂt
 
blue
, GLÊﬂà
Æpha
 );

1005 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4i
–
GLöt
 
ªd
, GLöà
gªí
,

1006 
GLöt
 
blue
, GLöà
Æpha
 );

1007 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
,

1008 
GLsh‹t
 
blue
, GLsh‹à
Æpha
 );

1009 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ub
–
GLubyã
 
ªd
, GLubyã 
gªí
,

1010 
GLubyã
 
blue
, GLubyã 
Æpha
 );

1011 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ui
–
GLuöt
 
ªd
, GLuöà
gªí
,

1012 
GLuöt
 
blue
, GLuöà
Æpha
 );

1013 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4us
–
GLush‹t
 
ªd
, GLush‹à
gªí
,

1014 
GLush‹t
 
blue
, GLush‹à
Æpha
 );

1017 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3bv
–c⁄° 
GLbyã
 *
v
 );

1018 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1019 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1020 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3iv
–c⁄° 
GLöt
 *
v
 );

1021 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3sv
–c⁄° 
GLsh‹t
 *
v
 );

1022 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ubv
–c⁄° 
GLubyã
 *
v
 );

1023 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3uiv
–c⁄° 
GLuöt
 *
v
 );

1024 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3usv
–c⁄° 
GLush‹t
 *
v
 );

1026 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4bv
–c⁄° 
GLbyã
 *
v
 );

1027 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1028 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1029 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4iv
–c⁄° 
GLöt
 *
v
 );

1030 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4sv
–c⁄° 
GLsh‹t
 *
v
 );

1031 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ubv
–c⁄° 
GLubyã
 *
v
 );

1032 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4uiv
–c⁄° 
GLuöt
 *
v
 );

1033 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4usv
–c⁄° 
GLush‹t
 *
v
 );

1036 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1d
–
GLdoubÀ
 
s
 );

1037 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1f
–
GLÊﬂt
 
s
 );

1038 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1i
–
GLöt
 
s
 );

1039 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1s
–
GLsh‹t
 
s
 );

1041 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1042 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2f
–
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1043 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2i
–
GLöt
 
s
, GLöà
t
 );

1044 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2s
–
GLsh‹t
 
s
, GLsh‹à
t
 );

1046 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1047 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1048 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3i
–
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1049 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1051 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1052 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1053 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4i
–
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1054 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1056 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1dv
–c⁄° 
GLdoubÀ
 *
v
 );

1057 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1fv
–c⁄° 
GLÊﬂt
 *
v
 );

1058 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1iv
–c⁄° 
GLöt
 *
v
 );

1059 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1sv
–c⁄° 
GLsh‹t
 *
v
 );

1061 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1062 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1063 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2iv
–c⁄° 
GLöt
 *
v
 );

1064 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2sv
–c⁄° 
GLsh‹t
 *
v
 );

1066 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1067 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1068 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3iv
–c⁄° 
GLöt
 *
v
 );

1069 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3sv
–c⁄° 
GLsh‹t
 *
v
 );

1071 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1072 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1073 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4iv
–c⁄° 
GLöt
 *
v
 );

1074 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4sv
–c⁄° 
GLsh‹t
 *
v
 );

1077 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

1078 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

1079 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2i
–
GLöt
 
x
, GLöà
y
 );

1080 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

1082 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

1083 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

1084 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

1085 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

1087 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1088 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1089 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1090 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1092 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1093 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1094 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2iv
–c⁄° 
GLöt
 *
v
 );

1095 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2sv
–c⁄° 
GLsh‹t
 *
v
 );

1097 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1098 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1099 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3iv
–c⁄° 
GLöt
 *
v
 );

1100 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3sv
–c⁄° 
GLsh‹t
 *
v
 );

1102 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1103 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1104 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4iv
–c⁄° 
GLöt
 *
v
 );

1105 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4sv
–c⁄° 
GLsh‹t
 *
v
 );

1108 
GLAPI
 
GLAPIENTRY
 
glRe˘d
–
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
 );

1109 
GLAPI
 
GLAPIENTRY
 
glRe˘f
–
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
 );

1110 
GLAPI
 
GLAPIENTRY
 
glRe˘i
–
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
 );

1111 
GLAPI
 
GLAPIENTRY
 
glRe˘s
–
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
 );

1114 
GLAPI
 
GLAPIENTRY
 
glRe˘dv
–c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
 );

1115 
GLAPI
 
GLAPIENTRY
 
glRe˘fv
–c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
 );

1116 
GLAPI
 
GLAPIENTRY
 
glRe˘iv
–c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
 );

1117 
GLAPI
 
GLAPIENTRY
 
glRe˘sv
–c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
 );

1124 
GLAPI
 
GLAPIENTRY
 
glVîãxPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1125 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1127 
GLAPI
 
GLAPIENTRY
 
glN‹mÆPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1128 c⁄° 
GLvoid
 *
±r
 );

1130 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Poöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1131 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1133 
GLAPI
 
GLAPIENTRY
 
glIndexPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1134 c⁄° 
GLvoid
 *
±r
 );

1136 
GLAPI
 
GLAPIENTRY
 
glTexCo‹dPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1137 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1139 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgPoöãr
–
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1141 
GLAPI
 
GLAPIENTRY
 
glGëPoöãrv
–
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
 );

1143 
GLAPI
 
GLAPIENTRY
 
glAºayEÀmít
–
GLöt
 
i
 );

1145 
GLAPI
 
GLAPIENTRY
 
glDøwAºays
–
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
 );

1147 
GLAPI
 
GLAPIENTRY
 
glDøwEÀmíts
–
GLíum
 
mode
, 
GLsizei
 
cou¡
,

1148 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1150 
GLAPI
 
GLAPIENTRY
 
glI¡îÀavedAºays
–
GLíum
 
f‹m©
, 
GLsizei
 
°ride
,

1151 c⁄° 
GLvoid
 *
poöãr
 );

1157 
GLAPI
 
GLAPIENTRY
 
glShadeModñ
–
GLíum
 
mode
 );

1159 
GLAPI
 
GLAPIENTRY
 
glLightf
–
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1160 
GLAPI
 
GLAPIENTRY
 
glLighti
–
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1161 
GLAPI
 
GLAPIENTRY
 
glLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1162 c⁄° 
GLÊﬂt
 *
∑øms
 );

1163 
GLAPI
 
GLAPIENTRY
 
glLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1164 c⁄° 
GLöt
 *
∑øms
 );

1166 
GLAPI
 
GLAPIENTRY
 
glGëLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1167 
GLÊﬂt
 *
∑øms
 );

1168 
GLAPI
 
GLAPIENTRY
 
glGëLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1169 
GLöt
 *
∑øms
 );

1171 
GLAPI
 
GLAPIENTRY
 
glLightModñf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1172 
GLAPI
 
GLAPIENTRY
 
glLightModñi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1173 
GLAPI
 
GLAPIENTRY
 
glLightModñfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1174 
GLAPI
 
GLAPIENTRY
 
glLightModñiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1176 
GLAPI
 
GLAPIENTRY
 
glM©îülf
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1177 
GLAPI
 
GLAPIENTRY
 
glM©îüli
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1178 
GLAPI
 
GLAPIENTRY
 
glM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1179 
GLAPI
 
GLAPIENTRY
 
glM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1181 
GLAPI
 
GLAPIENTRY
 
glGëM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1182 
GLAPI
 
GLAPIENTRY
 
glGëM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1184 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹M©îül
–
GLíum
 
Á˚
, GLíum 
mode
 );

1191 
GLAPI
 
GLAPIENTRY
 
glPixñZoom
–
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
 );

1193 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ef
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1194 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ei
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1196 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„rf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1197 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„ri
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1199 
GLAPI
 
GLAPIENTRY
 
glPixñM≠fv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1200 c⁄° 
GLÊﬂt
 *
vÆues
 );

1201 
GLAPI
 
GLAPIENTRY
 
glPixñM≠uiv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1202 c⁄° 
GLuöt
 *
vÆues
 );

1203 
GLAPI
 
GLAPIENTRY
 
glPixñM≠usv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1204 c⁄° 
GLush‹t
 *
vÆues
 );

1206 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠fv
–
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
 );

1207 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠uiv
–
GLíum
 
m≠
, 
GLuöt
 *
vÆues
 );

1208 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠usv
–
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
 );

1210 
GLAPI
 
GLAPIENTRY
 
glBôm≠
–
GLsizei
 
width
, GLsizeò
height
,

1211 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
,

1212 
GLÊﬂt
 
xmove
, GLÊﬂà
ymove
,

1213 c⁄° 
GLubyã
 *
bôm≠
 );

1215 
GLAPI
 
GLAPIENTRY
 
glRódPixñs
–
GLöt
 
x
, GLöà
y
,

1216 
GLsizei
 
width
, GLsizeò
height
,

1217 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1218 
GLvoid
 *
pixñs
 );

1220 
GLAPI
 
GLAPIENTRY
 
glDøwPixñs
–
GLsizei
 
width
, GLsizeò
height
,

1221 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1222 c⁄° 
GLvoid
 *
pixñs
 );

1224 
GLAPI
 
GLAPIENTRY
 
glC›yPixñs
–
GLöt
 
x
, GLöà
y
,

1225 
GLsizei
 
width
, GLsizeò
height
,

1226 
GLíum
 
ty≥
 );

1232 
GLAPI
 
GLAPIENTRY
 
glSãncûFunc
–
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
 );

1234 
GLAPI
 
GLAPIENTRY
 
glSãncûMask
–
GLuöt
 
mask
 );

1236 
GLAPI
 
GLAPIENTRY
 
glSãncûOp
–
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
 );

1238 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Sãncû
–
GLöt
 
s
 );

1246 
GLAPI
 
GLAPIENTRY
 
glTexGíd
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
 );

1247 
GLAPI
 
GLAPIENTRY
 
glTexGíf
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1248 
GLAPI
 
GLAPIENTRY
 
glTexGíi
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1250 
GLAPI
 
GLAPIENTRY
 
glTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
 );

1251 
GLAPI
 
GLAPIENTRY
 
glTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1252 
GLAPI
 
GLAPIENTRY
 
glTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1254 
GLAPI
 
GLAPIENTRY
 
glGëTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

1255 
GLAPI
 
GLAPIENTRY
 
glGëTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1256 
GLAPI
 
GLAPIENTRY
 
glGëTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1259 
GLAPI
 
GLAPIENTRY
 
glTexEnvf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1260 
GLAPI
 
GLAPIENTRY
 
glTexEnvi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1262 
GLAPI
 
GLAPIENTRY
 
glTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1263 
GLAPI
 
GLAPIENTRY
 
glTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1265 
GLAPI
 
GLAPIENTRY
 
glGëTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1266 
GLAPI
 
GLAPIENTRY
 
glGëTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1269 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1270 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1272 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1273 c⁄° 
GLÊﬂt
 *
∑øms
 );

1274 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1275 c⁄° 
GLöt
 *
∑øms
 );

1277 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîfv
–
GLíum
 
èrgë
,

1278 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1279 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîiv
–
GLíum
 
èrgë
,

1280 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1282 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîfv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1283 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1284 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîiv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1285 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1288 
GLAPI
 
GLAPIENTRY
 
glTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1289 
GLöt
 
öã∫ÆF‹m©
,

1290 
GLsizei
 
width
, 
GLöt
 
b‹dî
,

1291 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1292 c⁄° 
GLvoid
 *
pixñs
 );

1294 
GLAPI
 
GLAPIENTRY
 
glTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1295 
GLöt
 
öã∫ÆF‹m©
,

1296 
GLsizei
 
width
, GLsizeò
height
,

1297 
GLöt
 
b‹dî
, 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1298 c⁄° 
GLvoid
 *
pixñs
 );

1300 
GLAPI
 
GLAPIENTRY
 
glGëTexImage
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1301 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1302 
GLvoid
 *
pixñs
 );

1307 
GLAPI
 
GLAPIENTRY
 
glGíTextuªs
–
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
 );

1309 
GLAPI
 
GLAPIENTRY
 
glDñëeTextuªs
–
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

1311 
GLAPI
 
GLAPIENTRY
 
glBödTextuª
–
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
 );

1313 
GLAPI
 
GLAPIENTRY
 
glPri‹ôizeTextuªs
–
GLsizei
 
n
,

1314 c⁄° 
GLuöt
 *
ãxtuªs
,

1315 c⁄° 
GL˛ampf
 *
¥i‹ôõs
 );

1317 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glAªTextuªsResidít
–
GLsizei
 
n
,

1318 c⁄° 
GLuöt
 *
ãxtuªs
,

1319 
GLboﬁón
 *
ªsidí˚s
 );

1321 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsTextuª
–
GLuöt
 
ãxtuª
 );

1324 
GLAPI
 
GLAPIENTRY
 
glTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1325 
GLöt
 
xoff£t
,

1326 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1327 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
 );

1330 
GLAPI
 
GLAPIENTRY
 
glTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1331 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1332 
GLsizei
 
width
, GLsizeò
height
,

1333 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1334 c⁄° 
GLvoid
 *
pixñs
 );

1337 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1338 
GLíum
 
öã∫Æf‹m©
,

1339 
GLöt
 
x
, GLöà
y
,

1340 
GLsizei
 
width
, 
GLöt
 
b‹dî
 );

1343 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1344 
GLíum
 
öã∫Æf‹m©
,

1345 
GLöt
 
x
, GLöà
y
,

1346 
GLsizei
 
width
, GLsizeò
height
,

1347 
GLöt
 
b‹dî
 );

1350 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1351 
GLöt
 
xoff£t
, GLöà
x
, GLöà
y
,

1352 
GLsizei
 
width
 );

1355 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1356 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1357 
GLöt
 
x
, GLöà
y
,

1358 
GLsizei
 
width
, GLsizeò
height
 );

1365 
GLAPI
 
GLAPIENTRY
 
glM≠1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1366 
GLöt
 
°ride
,

1367 
GLöt
 
‹dî
, c⁄° 
GLdoubÀ
 *
poöts
 );

1368 
GLAPI
 
GLAPIENTRY
 
glM≠1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1369 
GLöt
 
°ride
,

1370 
GLöt
 
‹dî
, c⁄° 
GLÊﬂt
 *
poöts
 );

1372 
GLAPI
 
GLAPIENTRY
 
glM≠2d
–
GLíum
 
èrgë
,

1373 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1374 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1375 c⁄° 
GLdoubÀ
 *
poöts
 );

1376 
GLAPI
 
GLAPIENTRY
 
glM≠2f
–
GLíum
 
èrgë
,

1377 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1378 
GLÊﬂt
 
v1
, GLÊﬂà
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1379 c⁄° 
GLÊﬂt
 *
poöts
 );

1381 
GLAPI
 
GLAPIENTRY
 
glGëM≠dv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
 );

1382 
GLAPI
 
GLAPIENTRY
 
glGëM≠fv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
 );

1383 
GLAPI
 
GLAPIENTRY
 
glGëM≠iv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
 );

1385 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1d
–
GLdoubÀ
 
u
 );

1386 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1f
–
GLÊﬂt
 
u
 );

1388 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1dv
–c⁄° 
GLdoubÀ
 *
u
 );

1389 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1fv
–c⁄° 
GLÊﬂt
 *
u
 );

1391 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2d
–
GLdoubÀ
 
u
, GLdoubÀ 
v
 );

1392 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2f
–
GLÊﬂt
 
u
, GLÊﬂà
v
 );

1394 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2dv
–c⁄° 
GLdoubÀ
 *
u
 );

1395 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2fv
–c⁄° 
GLÊﬂt
 *
u
 );

1397 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
 );

1398 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
 );

1400 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1401 
GLöt
 
vn
, 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
 );

1402 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1403 
GLöt
 
vn
, 
GLÊﬂt
 
v1
, GLÊﬂà
v2
 );

1405 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt1
–
GLöt
 
i
 );

1407 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt2
–
GLöt
 
i
, GLöà
j
 );

1409 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh1
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
 );

1411 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh2
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
 );

1418 
GLAPI
 
GLAPIENTRY
 
glFogf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1420 
GLAPI
 
GLAPIENTRY
 
glFogi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1422 
GLAPI
 
GLAPIENTRY
 
glFogfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1424 
GLAPI
 
GLAPIENTRY
 
glFogiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1431 
GLAPI
 
GLAPIENTRY
 
glFìdbackBuf„r
–
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
 );

1433 
GLAPI
 
GLAPIENTRY
 
glPassThrough
–
GLÊﬂt
 
tokí
 );

1435 
GLAPI
 
GLAPIENTRY
 
glSñe˘Buf„r
–
GLsizei
 
size
, 
GLuöt
 *
buf„r
 );

1437 
GLAPI
 
GLAPIENTRY
 
glInôNames
( );

1439 
GLAPI
 
GLAPIENTRY
 
glLﬂdName
–
GLuöt
 
«me
 );

1441 
GLAPI
 
GLAPIENTRY
 
glPushName
–
GLuöt
 
«me
 );

1443 
GLAPI
 
GLAPIENTRY
 
glP›Name
( );

1451 
	#GL_RESCALE_NORMAL
 0x803A

	)

1452 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1453 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1454 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1455 
	#GL_BGR
 0x80E0

	)

1456 
	#GL_BGRA
 0x80E1

	)

1457 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1458 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1459 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1460 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1461 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1462 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1463 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1464 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1465 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1466 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1467 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1468 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1469 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1470 
	#GL_SINGLE_COLOR
 0x81F9

	)

1471 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1472 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1473 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1474 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1475 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1476 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1477 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1478 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1479 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1480 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1481 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1482 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1483 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1484 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1485 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1486 
	#GL_TEXTURE_3D
 0x806F

	)

1487 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1488 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1489 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1490 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1491 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1493 
GLAPI
 
GLAPIENTRY
 
glDøwR™geEÀmíts
–
GLíum
 
mode
, 
GLuöt
 
°¨t
,

1494 
GLuöt
 
íd
, 
GLsizei
 
cou¡
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1496 
GLAPI
 
GLAPIENTRY
 
glTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1497 
GLöt
 
öã∫ÆF‹m©
,

1498 
GLsizei
 
width
, GLsizeò
height
,

1499 
GLsizei
 
dïth
, 
GLöt
 
b‹dî
,

1500 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1501 c⁄° 
GLvoid
 *
pixñs
 );

1503 
GLAPI
 
GLAPIENTRY
 
glTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1504 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1505 
GLöt
 
zoff£t
, 
GLsizei
 
width
,

1506 
GLsizei
 
height
, GLsizeò
dïth
,

1507 
GLíum
 
f‹m©
,

1508 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1510 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1511 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1512 
GLöt
 
zoff£t
, GLöà
x
,

1513 
GLöt
 
y
, 
GLsizei
 
width
,

1514 
GLsizei
 
height
 );

1516 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1517 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1518 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1519 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1526 
	#GL_CONSTANT_COLOR
 0x8001

	)

1527 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

1528 
	#GL_CONSTANT_ALPHA
 0x8003

	)

1529 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

1530 
	#GL_COLOR_TABLE
 0x80D0

	)

1531 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

1532 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

1533 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

1534 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

1535 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

1536 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

1537 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

1538 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

1539 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

1540 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

1541 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

1542 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

1543 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

1544 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

1545 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

1546 
	#GL_CONVOLUTION_1D
 0x8010

	)

1547 
	#GL_CONVOLUTION_2D
 0x8011

	)

1548 
	#GL_SEPARABLE_2D
 0x8012

	)

1549 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

1550 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

1551 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

1552 
	#GL_REDUCE
 0x8016

	)

1553 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

1554 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

1555 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

1556 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

1557 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

1558 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

1559 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

1560 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

1561 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

1562 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

1563 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

1564 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

1565 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

1566 
	#GL_CONSTANT_BORDER
 0x8151

	)

1567 
	#GL_REPLICATE_BORDER
 0x8153

	)

1568 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

1569 
	#GL_COLOR_MATRIX
 0x80B1

	)

1570 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

1571 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

1572 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

1573 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

1574 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

1575 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

1576 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

1577 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

1578 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

1579 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

1580 
	#GL_HISTOGRAM
 0x8024

	)

1581 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

1582 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

1583 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

1584 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

1585 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

1586 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

1587 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

1588 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

1589 
	#GL_HISTOGRAM_SINK
 0x802D

	)

1590 
	#GL_MINMAX
 0x802E

	)

1591 
	#GL_MINMAX_FORMAT
 0x802F

	)

1592 
	#GL_MINMAX_SINK
 0x8030

	)

1593 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

1594 
	#GL_BLEND_EQUATION
 0x8009

	)

1595 
	#GL_MIN
 0x8007

	)

1596 
	#GL_MAX
 0x8008

	)

1597 
	#GL_FUNC_ADD
 0x8006

	)

1598 
	#GL_FUNC_SUBTRACT
 0x800A

	)

1599 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

1600 
	#GL_BLEND_COLOR
 0x8005

	)

1603 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1604 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1605 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
 );

1607 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹SubTabÀ
–
GLíum
 
èrgë
,

1608 
GLsizei
 
°¨t
, GLsizeò
cou¡
,

1609 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1610 c⁄° 
GLvoid
 *
d©a
 );

1612 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîiv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1613 c⁄° 
GLöt
 *
∑øms
);

1615 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîfv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1616 c⁄° 
GLÊﬂt
 *
∑øms
);

1618 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹SubTabÀ
–
GLíum
 
èrgë
, 
GLsizei
 
°¨t
,

1619 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1621 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1622 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1624 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1625 
GLíum
 
ty≥
, 
GLvoid
 *
èbÀ
 );

1627 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1628 
GLÊﬂt
 *
∑øms
 );

1630 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1631 
GLöt
 *
∑øms
 );

1633 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄
–
GLíum
 
mode
 );

1635 
GLAPI
 
GLAPIENTRY
 
glBÀndCﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
,

1636 
GL˛ampf
 
blue
, GL˛amp‡
Æpha
 );

1638 
GLAPI
 
GLAPIENTRY
 
glHi°ogøm
–
GLíum
 
èrgë
, 
GLsizei
 
width
,

1639 
GLíum
 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
 );

1641 
GLAPI
 
GLAPIENTRY
 
glRe£tHi°ogøm
–
GLíum
 
èrgë
 );

1643 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogøm
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1644 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1645 
GLvoid
 *
vÆues
 );

1647 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1648 
GLÊﬂt
 *
∑øms
 );

1650 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1651 
GLöt
 *
∑øms
 );

1653 
GLAPI
 
GLAPIENTRY
 
glMömax
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1654 
GLboﬁón
 
sök
 );

1656 
GLAPI
 
GLAPIENTRY
 
glRe£tMömax
–
GLíum
 
èrgë
 );

1658 
GLAPI
 
GLAPIENTRY
 
glGëMömax
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1659 
GLíum
 
f‹m©
, GLíum 
ty≥s
,

1660 
GLvoid
 *
vÆues
 );

1662 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1663 
GLÊﬂt
 *
∑øms
 );

1665 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1666 
GLöt
 *
∑øms
 );

1668 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1669 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
,

1670 c⁄° 
GLvoid
 *
image
 );

1672 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1673 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1674 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
image
 );

1676 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1677 
GLÊﬂt
 
∑øms
 );

1679 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1680 c⁄° 
GLÊﬂt
 *
∑øms
 );

1682 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1683 
GLöt
 
∑øms
 );

1685 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1686 c⁄° 
GLöt
 *
∑øms
 );

1688 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1689 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1691 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1692 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
,

1693 
GLsizei
 
height
);

1695 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1696 
GLíum
 
ty≥
, 
GLvoid
 *
image
 );

1698 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1699 
GLÊﬂt
 *
∑øms
 );

1701 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1702 
GLöt
 *
∑øms
 );

1704 
GLAPI
 
GLAPIENTRY
 
glSï¨abÀFûãr2D
–
GLíum
 
èrgë
,

1705 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1706 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
 );

1708 
GLAPI
 
GLAPIENTRY
 
glGëSï¨abÀFûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1709 
GLíum
 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
 );

1719 
	#GL_TEXTURE0
 0x84C0

	)

1720 
	#GL_TEXTURE1
 0x84C1

	)

1721 
	#GL_TEXTURE2
 0x84C2

	)

1722 
	#GL_TEXTURE3
 0x84C3

	)

1723 
	#GL_TEXTURE4
 0x84C4

	)

1724 
	#GL_TEXTURE5
 0x84C5

	)

1725 
	#GL_TEXTURE6
 0x84C6

	)

1726 
	#GL_TEXTURE7
 0x84C7

	)

1727 
	#GL_TEXTURE8
 0x84C8

	)

1728 
	#GL_TEXTURE9
 0x84C9

	)

1729 
	#GL_TEXTURE10
 0x84CA

	)

1730 
	#GL_TEXTURE11
 0x84CB

	)

1731 
	#GL_TEXTURE12
 0x84CC

	)

1732 
	#GL_TEXTURE13
 0x84CD

	)

1733 
	#GL_TEXTURE14
 0x84CE

	)

1734 
	#GL_TEXTURE15
 0x84CF

	)

1735 
	#GL_TEXTURE16
 0x84D0

	)

1736 
	#GL_TEXTURE17
 0x84D1

	)

1737 
	#GL_TEXTURE18
 0x84D2

	)

1738 
	#GL_TEXTURE19
 0x84D3

	)

1739 
	#GL_TEXTURE20
 0x84D4

	)

1740 
	#GL_TEXTURE21
 0x84D5

	)

1741 
	#GL_TEXTURE22
 0x84D6

	)

1742 
	#GL_TEXTURE23
 0x84D7

	)

1743 
	#GL_TEXTURE24
 0x84D8

	)

1744 
	#GL_TEXTURE25
 0x84D9

	)

1745 
	#GL_TEXTURE26
 0x84DA

	)

1746 
	#GL_TEXTURE27
 0x84DB

	)

1747 
	#GL_TEXTURE28
 0x84DC

	)

1748 
	#GL_TEXTURE29
 0x84DD

	)

1749 
	#GL_TEXTURE30
 0x84DE

	)

1750 
	#GL_TEXTURE31
 0x84DF

	)

1751 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1752 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1753 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1755 
	#GL_NORMAL_MAP
 0x8511

	)

1756 
	#GL_REFLECTION_MAP
 0x8512

	)

1757 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1758 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1759 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1760 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1761 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1762 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1763 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1764 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1765 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1766 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1768 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1769 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1770 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1771 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1772 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1773 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1774 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1775 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1776 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1777 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1778 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1780 
	#GL_MULTISAMPLE
 0x809D

	)

1781 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1782 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1783 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1784 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1785 
	#GL_SAMPLES
 0x80A9

	)

1786 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1787 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1788 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1790 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1791 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1792 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1793 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1795 
	#GL_COMBINE
 0x8570

	)

1796 
	#GL_COMBINE_RGB
 0x8571

	)

1797 
	#GL_COMBINE_ALPHA
 0x8572

	)

1798 
	#GL_SOURCE0_RGB
 0x8580

	)

1799 
	#GL_SOURCE1_RGB
 0x8581

	)

1800 
	#GL_SOURCE2_RGB
 0x8582

	)

1801 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1802 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1803 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1804 
	#GL_OPERAND0_RGB
 0x8590

	)

1805 
	#GL_OPERAND1_RGB
 0x8591

	)

1806 
	#GL_OPERAND2_RGB
 0x8592

	)

1807 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1808 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1809 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1810 
	#GL_RGB_SCALE
 0x8573

	)

1811 
	#GL_ADD_SIGNED
 0x8574

	)

1812 
	#GL_INTERPOLATE
 0x8575

	)

1813 
	#GL_SUBTRACT
 0x84E7

	)

1814 
	#GL_CONSTANT
 0x8576

	)

1815 
	#GL_PRIMARY_COLOR
 0x8577

	)

1816 
	#GL_PREVIOUS
 0x8578

	)

1818 
	#GL_DOT3_RGB
 0x86AE

	)

1819 
	#GL_DOT3_RGBA
 0x86AF

	)

1821 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1823 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuª
–
GLíum
 
ãxtuª
 );

1825 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuª
–
GLíum
 
ãxtuª
 );

1827 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1829 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1831 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1833 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1835 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1837 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1839 
GLAPI
 
GLAPIENTRY
 
glGëCom¥es£dTexImage
–
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
 );

1841 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
 );

1843 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1845 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
 );

1847 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1849 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1i
–
GLíum
 
èrgë
, 
GLöt
 
s
 );

1851 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1853 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
 );

1855 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1857 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1859 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1861 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1863 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1865 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
 );

1867 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1869 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
 );

1871 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1873 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1875 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1877 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1879 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1881 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1883 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1885 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1887 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1889 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1891 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1893 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1895 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1897 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1899 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1901 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1903 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1906 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1908 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1910 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1912 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1914 
GLAPI
 
GLAPIENTRY
 
glSam∂eCovîage
–
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
 );

1917 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1918 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1919 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1920 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1921 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1922 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1923 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1924 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1925 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

1932 #i‚de‡
GL_ARB_mu…ôextuª


1933 
	#GL_ARB_mu…ôextuª
 1

	)

1935 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1936 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1937 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1938 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1939 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1940 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1941 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1942 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1943 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1944 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1945 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1946 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1947 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1948 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1949 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1950 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1951 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1952 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1953 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1954 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1955 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1956 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1957 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1958 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1959 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1960 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1961 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1962 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1963 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1964 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1965 
	#GL_TEXTURE30_ARB
 0x84DE

	)

1966 
	#GL_TEXTURE31_ARB
 0x84DF

	)

1967 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

1968 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

1969 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

1971 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuªARB
(
GLíum
 
ãxtuª
);

1972 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuªARB
(
GLíum
 
ãxtuª
);

1973 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

1974 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1975 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

1976 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1977 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
);

1978 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1979 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

1980 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1981 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

1982 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1983 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

1984 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1985 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

1986 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1987 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

1988 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1989 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

1990 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1991 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

1992 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1993 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

1994 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1995 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

1996 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1997 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

1998 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1999 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

2000 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2001 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

2002 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2003 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

2004 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2006 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2007 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2008 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

2009 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2010 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

2011 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2012 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

2013 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2014 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

2015 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2016 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

2017 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2018 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

2019 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2020 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

2021 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2022 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

2023 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2024 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

2025 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2026 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

2027 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2028 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

2029 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2030 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2031 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2032 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2033 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2034 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2035 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2036 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2037 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2038 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2039 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2049 #i‡
deföed
(
GL_GLEXT_LEGACY
)

2055 
	~<GL/gÀxt.h
>

2065 #i‚de‡
GL_MESA_∑cked_dïth_°ícû


2066 
	#GL_MESA_∑cked_dïth_°ícû
 1

	)

2068 
	#GL_DEPTH_STENCIL_MESA
 0x8750

	)

2069 
	#GL_UNSIGNED_INT_24_8_MESA
 0x8751

	)

2070 
	#GL_UNSIGNED_INT_8_24_REV_MESA
 0x8752

	)

2071 
	#GL_UNSIGNED_SHORT_15_1_MESA
 0x8753

	)

2072 
	#GL_UNSIGNED_SHORT_1_15_REV_MESA
 0x8754

	)

2077 #i‚de‡
GL_ATI_bÀnd_equ©i⁄_£∑øã


2078 
	#GL_ATI_bÀnd_equ©i⁄_£∑øã
 1

	)

2080 
	#GL_ALPHA_BLEND_EQUATION_ATI
 0x883D

	)

2082 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄Sï¨©eATI
–
GLíum
 
modeRGB
, GLíum 
modeA
 );

2083 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEATIPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeA
);

2089 #i‚de‡
GL_OES_EGL_image


2090 * 
	tGLeglImageOES
;

2093 #i‚de‡
GL_OES_EGL_image


2094 
	#GL_OES_EGL_image
 1

	)

2095 #ifde‡
GL_GLEXT_PROTOTYPES


2096 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2097 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2099 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2100 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2111 #ifde‡
__˝lu•lus


	@/usr/include/X11/Xatom.h

1 #i‚de‡
XATOM_H


2 
	#XATOM_H
 1

	)

9 
	#XA_PRIMARY
 ((
Atom
Ë1)

	)

10 
	#XA_SECONDARY
 ((
Atom
Ë2)

	)

11 
	#XA_ARC
 ((
Atom
Ë3)

	)

12 
	#XA_ATOM
 ((
Atom
Ë4)

	)

13 
	#XA_BITMAP
 ((
Atom
Ë5)

	)

14 
	#XA_CARDINAL
 ((
Atom
Ë6)

	)

15 
	#XA_COLORMAP
 ((
Atom
Ë7)

	)

16 
	#XA_CURSOR
 ((
Atom
Ë8)

	)

17 
	#XA_CUT_BUFFER0
 ((
Atom
Ë9)

	)

18 
	#XA_CUT_BUFFER1
 ((
Atom
Ë10)

	)

19 
	#XA_CUT_BUFFER2
 ((
Atom
Ë11)

	)

20 
	#XA_CUT_BUFFER3
 ((
Atom
Ë12)

	)

21 
	#XA_CUT_BUFFER4
 ((
Atom
Ë13)

	)

22 
	#XA_CUT_BUFFER5
 ((
Atom
Ë14)

	)

23 
	#XA_CUT_BUFFER6
 ((
Atom
Ë15)

	)

24 
	#XA_CUT_BUFFER7
 ((
Atom
Ë16)

	)

25 
	#XA_DRAWABLE
 ((
Atom
Ë17)

	)

26 
	#XA_FONT
 ((
Atom
Ë18)

	)

27 
	#XA_INTEGER
 ((
Atom
Ë19)

	)

28 
	#XA_PIXMAP
 ((
Atom
Ë20)

	)

29 
	#XA_POINT
 ((
Atom
Ë21)

	)

30 
	#XA_RECTANGLE
 ((
Atom
Ë22)

	)

31 
	#XA_RESOURCE_MANAGER
 ((
Atom
Ë23)

	)

32 
	#XA_RGB_COLOR_MAP
 ((
Atom
Ë24)

	)

33 
	#XA_RGB_BEST_MAP
 ((
Atom
Ë25)

	)

34 
	#XA_RGB_BLUE_MAP
 ((
Atom
Ë26)

	)

35 
	#XA_RGB_DEFAULT_MAP
 ((
Atom
Ë27)

	)

36 
	#XA_RGB_GRAY_MAP
 ((
Atom
Ë28)

	)

37 
	#XA_RGB_GREEN_MAP
 ((
Atom
Ë29)

	)

38 
	#XA_RGB_RED_MAP
 ((
Atom
Ë30)

	)

39 
	#XA_STRING
 ((
Atom
Ë31)

	)

40 
	#XA_VISUALID
 ((
Atom
Ë32)

	)

41 
	#XA_WINDOW
 ((
Atom
Ë33)

	)

42 
	#XA_WM_COMMAND
 ((
Atom
Ë34)

	)

43 
	#XA_WM_HINTS
 ((
Atom
Ë35)

	)

44 
	#XA_WM_CLIENT_MACHINE
 ((
Atom
Ë36)

	)

45 
	#XA_WM_ICON_NAME
 ((
Atom
Ë37)

	)

46 
	#XA_WM_ICON_SIZE
 ((
Atom
Ë38)

	)

47 
	#XA_WM_NAME
 ((
Atom
Ë39)

	)

48 
	#XA_WM_NORMAL_HINTS
 ((
Atom
Ë40)

	)

49 
	#XA_WM_SIZE_HINTS
 ((
Atom
Ë41)

	)

50 
	#XA_WM_ZOOM_HINTS
 ((
Atom
Ë42)

	)

51 
	#XA_MIN_SPACE
 ((
Atom
Ë43)

	)

52 
	#XA_NORM_SPACE
 ((
Atom
Ë44)

	)

53 
	#XA_MAX_SPACE
 ((
Atom
Ë45)

	)

54 
	#XA_END_SPACE
 ((
Atom
Ë46)

	)

55 
	#XA_SUPERSCRIPT_X
 ((
Atom
Ë47)

	)

56 
	#XA_SUPERSCRIPT_Y
 ((
Atom
Ë48)

	)

57 
	#XA_SUBSCRIPT_X
 ((
Atom
Ë49)

	)

58 
	#XA_SUBSCRIPT_Y
 ((
Atom
Ë50)

	)

59 
	#XA_UNDERLINE_POSITION
 ((
Atom
Ë51)

	)

60 
	#XA_UNDERLINE_THICKNESS
 ((
Atom
Ë52)

	)

61 
	#XA_STRIKEOUT_ASCENT
 ((
Atom
Ë53)

	)

62 
	#XA_STRIKEOUT_DESCENT
 ((
Atom
Ë54)

	)

63 
	#XA_ITALIC_ANGLE
 ((
Atom
Ë55)

	)

64 
	#XA_X_HEIGHT
 ((
Atom
Ë56)

	)

65 
	#XA_QUAD_WIDTH
 ((
Atom
Ë57)

	)

66 
	#XA_WEIGHT
 ((
Atom
Ë58)

	)

67 
	#XA_POINT_SIZE
 ((
Atom
Ë59)

	)

68 
	#XA_RESOLUTION
 ((
Atom
Ë60)

	)

69 
	#XA_COPYRIGHT
 ((
Atom
Ë61)

	)

70 
	#XA_NOTICE
 ((
Atom
Ë62)

	)

71 
	#XA_FONT_NAME
 ((
Atom
Ë63)

	)

72 
	#XA_FAMILY_NAME
 ((
Atom
Ë64)

	)

73 
	#XA_FULL_NAME
 ((
Atom
Ë65)

	)

74 
	#XA_CAP_HEIGHT
 ((
Atom
Ë66)

	)

75 
	#XA_WM_CLASS
 ((
Atom
Ë67)

	)

76 
	#XA_WM_TRANSIENT_FOR
 ((
Atom
Ë68)

	)

78 
	#XA_LAST_PREDEFINED
 ((
Atom
Ë68)

	)

	@/usr/include/X11/Xproto.h

22 #i‚de‡
XPROTO_H


23 
	#XPROTO_H


	)

72 
	~<X11/Xmd.h
>

73 
	~<X11/X¥Ÿo°r.h
>

80 
	#sz_xSegmít
 8

	)

81 
	#sz_xPoöt
 4

	)

82 
	#sz_xRe˘™gÀ
 8

	)

83 
	#sz_xArc
 12

	)

84 
	#sz_xC⁄nClõ¡Pªfix
 12

	)

85 
	#sz_xC⁄nSëupPªfix
 8

	)

86 
	#sz_xC⁄nSëup
 32

	)

87 
	#sz_xPixm≠F‹m©
 8

	)

88 
	#sz_xDïth
 8

	)

89 
	#sz_xVisuÆTy≥
 24

	)

90 
	#sz_xWödowRoŸ
 40

	)

91 
	#sz_xTimeco‹d
 8

	)

92 
	#sz_xHo°E¡ry
 4

	)

93 
	#sz_xCh¨Info
 12

	)

94 
	#sz_xF⁄tPr›
 8

	)

95 
	#sz_xTextE…
 2

	)

96 
	#sz_xCﬁ‹Iãm
 12

	)

97 
	#sz_xrgb
 8

	)

98 
	#sz_xGíîicRïly
 32

	)

99 
	#sz_xGëWödowAâribuãsRïly
 44

	)

100 
	#sz_xGëGeomëryRïly
 32

	)

101 
	#sz_xQuîyTªeRïly
 32

	)

102 
	#sz_xI¡înAtomRïly
 32

	)

103 
	#sz_xGëAtomNameRïly
 32

	)

104 
	#sz_xGëPr›îtyRïly
 32

	)

105 
	#sz_xLi°Pr›îtõsRïly
 32

	)

106 
	#sz_xGëSñe˘i⁄Ow√rRïly
 32

	)

107 
	#sz_xGøbPoöãrRïly
 32

	)

108 
	#sz_xQuîyPoöãrRïly
 32

	)

109 
	#sz_xGëMŸi⁄EvítsRïly
 32

	)

110 
	#sz_xTøn¶©eCo‹dsRïly
 32

	)

111 
	#sz_xGëI≈utFocusRïly
 32

	)

112 
	#sz_xQuîyKeym≠Rïly
 40

	)

113 
	#sz_xQuîyF⁄tRïly
 60

	)

114 
	#sz_xQuîyTextExã¡sRïly
 32

	)

115 
	#sz_xLi°F⁄tsRïly
 32

	)

116 
	#sz_xGëF⁄tP©hRïly
 32

	)

117 
	#sz_xGëImageRïly
 32

	)

118 
	#sz_xLi°In°ÆÀdCﬁ‹m≠sRïly
 32

	)

119 
	#sz_xAŒocCﬁ‹Rïly
 32

	)

120 
	#sz_xAŒocNamedCﬁ‹Rïly
 32

	)

121 
	#sz_xAŒocCﬁ‹CñlsRïly
 32

	)

122 
	#sz_xAŒocCﬁ‹Pœ√sRïly
 32

	)

123 
	#sz_xQuîyCﬁ‹sRïly
 32

	)

124 
	#sz_xLookupCﬁ‹Rïly
 32

	)

125 
	#sz_xQuîyBe°SizeRïly
 32

	)

126 
	#sz_xQuîyExãnsi⁄Rïly
 32

	)

127 
	#sz_xLi°Exãnsi⁄sRïly
 32

	)

128 
	#sz_xSëM≠pögRïly
 32

	)

129 
	#sz_xGëKeybﬂrdC⁄åﬁRïly
 52

	)

130 
	#sz_xGëPoöãrC⁄åﬁRïly
 32

	)

131 
	#sz_xGëS¸ìnSavîRïly
 32

	)

132 
	#sz_xLi°Ho°sRïly
 32

	)

133 
	#sz_xSëModifõrM≠pögRïly
 32

	)

134 
	#sz_xEº‹
 32

	)

135 
	#sz_xEvít
 32

	)

136 
	#sz_xKeym≠Evít
 32

	)

137 
	#sz_xReq
 4

	)

138 
	#sz_xResour˚Req
 8

	)

139 
	#sz_xCª©eWödowReq
 32

	)

140 
	#sz_xCh™geWödowAâribuãsReq
 12

	)

141 
	#sz_xCh™geSaveSëReq
 8

	)

142 
	#sz_xRï¨ítWödowReq
 16

	)

143 
	#sz_xC⁄figuªWödowReq
 12

	)

144 
	#sz_xCúcuœãWödowReq
 8

	)

145 
	#sz_xI¡înAtomReq
 8

	)

146 
	#sz_xCh™gePr›îtyReq
 24

	)

147 
	#sz_xDñëePr›îtyReq
 12

	)

148 
	#sz_xGëPr›îtyReq
 24

	)

149 
	#sz_xSëSñe˘i⁄Ow√rReq
 16

	)

150 
	#sz_xC⁄vîtSñe˘i⁄Req
 24

	)

151 
	#sz_xSídEvítReq
 44

	)

152 
	#sz_xGøbPoöãrReq
 24

	)

153 
	#sz_xGøbBuâ⁄Req
 24

	)

154 
	#sz_xUngøbBuâ⁄Req
 12

	)

155 
	#sz_xCh™geA˘ivePoöãrGøbReq
 16

	)

156 
	#sz_xGøbKeybﬂrdReq
 16

	)

157 
	#sz_xGøbKeyReq
 16

	)

158 
	#sz_xUngøbKeyReq
 12

	)

159 
	#sz_xAŒowEvítsReq
 8

	)

160 
	#sz_xGëMŸi⁄EvítsReq
 16

	)

161 
	#sz_xTøn¶©eCo‹dsReq
 16

	)

162 
	#sz_xW¨pPoöãrReq
 24

	)

163 
	#sz_xSëI≈utFocusReq
 12

	)

164 
	#sz_xO≥nF⁄tReq
 12

	)

165 
	#sz_xQuîyTextExã¡sReq
 8

	)

166 
	#sz_xLi°F⁄tsReq
 8

	)

167 
	#sz_xSëF⁄tP©hReq
 8

	)

168 
	#sz_xCª©ePixm≠Req
 16

	)

169 
	#sz_xCª©eGCReq
 16

	)

170 
	#sz_xCh™geGCReq
 12

	)

171 
	#sz_xC›yGCReq
 16

	)

172 
	#sz_xSëDashesReq
 12

	)

173 
	#sz_xSëClùRe˘™gÀsReq
 12

	)

174 
	#sz_xC›yAªaReq
 28

	)

175 
	#sz_xC›yPœ√Req
 32

	)

176 
	#sz_xPﬁyPoötReq
 12

	)

177 
	#sz_xPﬁySegmítReq
 12

	)

178 
	#sz_xFûlPﬁyReq
 16

	)

179 
	#sz_xPutImageReq
 24

	)

180 
	#sz_xGëImageReq
 20

	)

181 
	#sz_xPﬁyTextReq
 16

	)

182 
	#sz_xImageTextReq
 16

	)

183 
	#sz_xCª©eCﬁ‹m≠Req
 16

	)

184 
	#sz_xC›yCﬁ‹m≠AndFªeReq
 12

	)

185 
	#sz_xAŒocCﬁ‹Req
 16

	)

186 
	#sz_xAŒocNamedCﬁ‹Req
 12

	)

187 
	#sz_xAŒocCﬁ‹CñlsReq
 12

	)

188 
	#sz_xAŒocCﬁ‹Pœ√sReq
 16

	)

189 
	#sz_xFªeCﬁ‹sReq
 12

	)

190 
	#sz_xSt‹eCﬁ‹sReq
 8

	)

191 
	#sz_xSt‹eNamedCﬁ‹Req
 16

	)

192 
	#sz_xQuîyCﬁ‹sReq
 8

	)

193 
	#sz_xLookupCﬁ‹Req
 12

	)

194 
	#sz_xCª©eCurs‹Req
 32

	)

195 
	#sz_xCª©eGlyphCurs‹Req
 32

	)

196 
	#sz_xRecﬁ‹Curs‹Req
 20

	)

197 
	#sz_xQuîyBe°SizeReq
 12

	)

198 
	#sz_xQuîyExãnsi⁄Req
 8

	)

199 
	#sz_xCh™geKeybﬂrdC⁄åﬁReq
 8

	)

200 
	#sz_xBñlReq
 4

	)

201 
	#sz_xCh™gePoöãrC⁄åﬁReq
 12

	)

202 
	#sz_xSëS¸ìnSavîReq
 12

	)

203 
	#sz_xCh™geHo°sReq
 8

	)

204 
	#sz_xLi°Ho°sReq
 4

	)

205 
	#sz_xCh™geModeReq
 4

	)

206 
	#sz_xRŸ©ePr›îtõsReq
 12

	)

207 
	#sz_xRïly
 32

	)

208 
	#sz_xGøbKeybﬂrdRïly
 32

	)

209 
	#sz_xLi°F⁄tsWôhInfoRïly
 60

	)

210 
	#sz_xSëPoöãrM≠pögRïly
 32

	)

211 
	#sz_xGëKeybﬂrdM≠pögRïly
 32

	)

212 
	#sz_xGëPoöãrM≠pögRïly
 32

	)

213 
	#sz_xGëModifõrM≠pögRïly
 32

	)

214 
	#sz_xLi°F⁄tsWôhInfoReq
 8

	)

215 
	#sz_xPﬁyLöeReq
 12

	)

216 
	#sz_xPﬁyArcReq
 12

	)

217 
	#sz_xPﬁyRe˘™gÀReq
 12

	)

218 
	#sz_xPﬁyFûlRe˘™gÀReq
 12

	)

219 
	#sz_xPﬁyFûlArcReq
 12

	)

220 
	#sz_xPﬁyText8Req
 16

	)

221 
	#sz_xPﬁyText16Req
 16

	)

222 
	#sz_xImageText8Req
 16

	)

223 
	#sz_xImageText16Req
 16

	)

224 
	#sz_xSëPoöãrM≠pögReq
 4

	)

225 
	#sz_xF‹˚S¸ìnSavîReq
 4

	)

226 
	#sz_xSëClo£DownModeReq
 4

	)

227 
	#sz_xCÀ¨AªaReq
 16

	)

228 
	#sz_xSëAc˚ssC⁄åﬁReq
 4

	)

229 
	#sz_xGëKeybﬂrdM≠pögReq
 8

	)

230 
	#sz_xSëModifõrM≠pögReq
 4

	)

231 
	#sz_xPr›Ic⁄Size
 24

	)

232 
	#sz_xCh™geKeybﬂrdM≠pögReq
 8

	)

240 
	#Wödow
 
CARD32


	)

241 
	#DøwabÀ
 
CARD32


	)

242 
	#F⁄t
 
CARD32


	)

243 
	#Pixm≠
 
CARD32


	)

244 
	#Curs‹
 
CARD32


	)

245 
	#Cﬁ‹m≠
 
CARD32


	)

246 
	#GC⁄ãxt
 
CARD32


	)

247 
	#Atom
 
CARD32


	)

248 
	#VisuÆID
 
CARD32


	)

249 
	#Time
 
CARD32


	)

250 
	#KeyCode
 
CARD8


	)

251 
	#KeySym
 
CARD32


	)

253 
	#X_TCP_PORT
 6000

	)

255 
	#xTrue
 1

	)

256 
	#xFÆ£
 0

	)

259 
CARD16
 
	tKeyButMask
;

270 
CARD8
 
	mbyãOrdî
;

271 
BYTE
 
	m∑d
;

272 
CARD16
 
maj‹Vîsi⁄
 
	mB16
, 
mö‹Vîsi⁄
 B16;

273 
CARD16
 
nbyãsAuthPrŸo
 
	mB16
;

274 
CARD16
 
nbyãsAuthSåög
 
	mB16
;

275 
CARD16
 
∑d2
 
	mB16
;

276 } 
	txC⁄nClõ¡Pªfix
;

289 
CARD8
 
	msuc˚ss
;

290 
BYTE
 
	mÀngthRós⁄
;

291 
CARD16
 
maj‹Vîsi⁄
 
	mB16
,

292 
mö‹Vîsi⁄
 
	mB16
;

293 
CARD16
 
Àngth
 
	mB16
;

294 } 
	txC⁄nSëupPªfix
;

298 
CARD32
 
ªÀa£
 
	mB32
;

299 
CARD32
 
ridBa£
 
	mB32
,

300 
ridMask
 
	mB32
;

301 
CARD32
 
mŸi⁄Buf„rSize
 
	mB32
;

302 
CARD16
 
nbyãsVíd‹
 
	mB16
;

303 
CARD16
 
maxReque°Size
 
	mB16
;

304 
CARD8
 
	mnumRoŸs
;

305 
CARD8
 
	mnumF‹m©s
;

306 
CARD8
 
	mimageByãOrdî
;

307 
CARD8
 
	mbôm≠BôOrdî
;

308 
CARD8
 
	mbôm≠Sˇ∆öeUnô
,

309 
	mbôm≠Sˇ∆öePad
;

310 
KeyCode
 
	mmöKeyCode
, 
	mmaxKeyCode
;

311 
CARD32
 
∑d2
 
	mB32
;

312 } 
	txC⁄nSëup
;

315 
CARD8
 
	mdïth
;

316 
CARD8
 
	mbôsPîPixñ
;

317 
CARD8
 
	msˇnLöePad
;

318 
CARD8
 
	m∑d1
;

319 
CARD32
 
∑d2
 
	mB32
;

320 } 
	txPixm≠F‹m©
;

325 
CARD8
 
	mdïth
;

326 
CARD8
 
	m∑d1
;

327 
CARD16
 
nVisuÆs
 
	mB16
;

328 
CARD32
 
∑d2
 
	mB32
;

329 } 
	txDïth
;

332 
VisuÆID
 
visuÆID
 
	mB32
;

333 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

334 
CARD8
 
	mc_˛ass
;

336 
CARD8
 
	m˛ass
;

338 
CARD8
 
	mbôsPîRGB
;

339 
CARD16
 
cﬁ‹m≠E¡rõs
 
	mB16
;

340 
CARD32
 
ªdMask
 
	mB32
, 
gªíMask
 B32, 
blueMask
 B32;

341 
CARD32
 
∑d
 
	mB32
;

342 } 
	txVisuÆTy≥
;

345 
Wödow
 
wödowId
 
	mB32
;

346 
Cﬁ‹m≠
 
deÁu…Cﬁ‹m≠
 
	mB32
;

347 
CARD32
 
whôePixñ
 
	mB32
, 
bœckPixñ
 B32;

348 
CARD32
 
cuºítI≈utMask
 
	mB32
;

349 
CARD16
 
pixWidth
 
	mB16
, 
pixHeight
 B16;

350 
CARD16
 
mmWidth
 
	mB16
, 
mmHeight
 B16;

351 
CARD16
 
möIn°ÆÀdM≠s
 
	mB16
, 
maxIn°ÆÀdM≠s
 B16;

352 
VisuÆID
 
roŸVisuÆID
 
	mB32
;

353 
CARD8
 
	mbackögSt‹e
;

354 
BOOL
 
	mßveUndîs
;

355 
CARD8
 
	mroŸDïth
;

356 
CARD8
 
	mnDïths
;

357 } 
	txWödowRoŸ
;

368 
CARD32
 
time
 
	mB32
;

369 
INT16
 
x
 
	mB16
, 
y
 B16;

370 } 
	txTimeco‹d
;

373 
CARD8
 
	mÁmûy
;

374 
BYTE
 
	m∑d
;

375 
CARD16
 
Àngth
 
	mB16
;

376 } 
	txHo°E¡ry
;

379 
INT16
 
À·SideBórög
 
	mB16
,

380 
rightSideBórög
 
	mB16
,

381 
ch¨a˘îWidth
 
	mB16
,

382 
as˚¡
 
	mB16
,

383 
des˚¡
 
	mB16
;

384 
CARD16
 
©åibuãs
 
	mB16
;

385 } 
	txCh¨Info
;

388 
Atom
 
«me
 
	mB32
;

389 
CARD32
 
vÆue
 
	mB32
;

390 } 
	txF⁄tPr›
;

396 
CARD8
 
	mÀn
;

398 
INT8
 
	mdñè
;

399 } 
	txTextE…
;

403 
CARD32
 
pixñ
 
	mB32
;

404 
CARD16
 
ªd
 
	mB16
, 
gªí
 B16, 
blue
 B16;

405 
CARD8
 
	mÊags
;

406 
CARD8
 
	m∑d
;

407 } 
	txCﬁ‹Iãm
;

411 
CARD16
 
ªd
 
	mB16
, 
gªí
 B16, 
blue
 B16, 
∑d
 B16;

412 } 
	txrgb
;

414 
CARD8
 
	tKEYCODE
;

426 
BYTE
 
	mty≥
;

427 
BYTE
 
	md©a1
;

428 
CARD16
 
£quí˚Numbî
 
	mB16
;

429 
CARD32
 
Àngth
 
	mB32
;

430 
CARD32
 
d©a00
 
	mB32
;

431 
CARD32
 
d©a01
 
	mB32
;

432 
CARD32
 
d©a02
 
	mB32
;

433 
CARD32
 
d©a03
 
	mB32
;

434 
CARD32
 
d©a04
 
	mB32
;

435 
CARD32
 
d©a05
 
	mB32
;

436 } 
	txGíîicRïly
;

441 
BYTE
 
	mty≥
;

442 
CARD8
 
	mbackögSt‹e
;

443 
CARD16
 
£quí˚Numbî
 
	mB16
;

444 
CARD32
 
Àngth
 
	mB32
;

445 
VisuÆID
 
visuÆID
 
	mB32
;

446 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

447 
CARD16
 
c_˛ass
 
	mB16
;

449 
CARD16
 
˛ass
 
	mB16
;

451 
CARD8
 
	mbôGøvôy
;

452 
CARD8
 
	mwöGøvôy
;

453 
CARD32
 
backögBôPœ√s
 
	mB32
;

454 
CARD32
 
backögPixñ
 
	mB32
;

455 
BOOL
 
	mßveUndî
;

456 
BOOL
 
	mm≠In°ÆÀd
;

457 
CARD8
 
	mm≠Sèã
;

458 
BOOL
 
	movîride
;

459 
Cﬁ‹m≠
 
cﬁ‹m≠
 
	mB32
;

460 
CARD32
 
ÆlEvítMasks
 
	mB32
;

461 
CARD32
 
yourEvítMask
 
	mB32
;

462 
CARD16
 
doNŸPr›ag©eMask
 
	mB16
;

463 
CARD16
 
∑d
 
	mB16
;

464 } 
	txGëWödowAâribuãsRïly
;

467 
BYTE
 
	mty≥
;

468 
CARD8
 
	mdïth
;

469 
CARD16
 
£quí˚Numbî
 
	mB16
;

470 
CARD32
 
Àngth
 
	mB32
;

471 
Wödow
 
roŸ
 
	mB32
;

472 
INT16
 
x
 
	mB16
, 
y
 B16;

473 
CARD16
 
width
 
	mB16
, 
height
 B16;

474 
CARD16
 
b‹dîWidth
 
	mB16
;

475 
CARD16
 
∑d1
 
	mB16
;

476 
CARD32
 
∑d2
 
	mB32
;

477 
CARD32
 
∑d3
 
	mB32
;

478 } 
	txGëGeomëryRïly
;

481 
BYTE
 
	mty≥
;

482 
BYTE
 
	m∑d1
;

483 
CARD16
 
£quí˚Numbî
 
	mB16
;

484 
CARD32
 
Àngth
 
	mB32
;

485 
Wödow
 
roŸ
 
	mB32
, 
∑ª¡
 B32;

486 
CARD16
 
nChûdªn
 
	mB16
;

487 
CARD16
 
∑d2
 
	mB16
;

488 
CARD32
 
∑d3
 
	mB32
;

489 
CARD32
 
∑d4
 
	mB32
;

490 
CARD32
 
∑d5
 
	mB32
;

491 } 
	txQuîyTªeRïly
;

494 
BYTE
 
	mty≥
;

495 
BYTE
 
	m∑d1
;

496 
CARD16
 
£quí˚Numbî
 
	mB16
;

497 
CARD32
 
Àngth
 
	mB32
;

498 
Atom
 
©om
 
	mB32
;

499 
CARD32
 
∑d2
 
	mB32
;

500 
CARD32
 
∑d3
 
	mB32
;

501 
CARD32
 
∑d4
 
	mB32
;

502 
CARD32
 
∑d5
 
	mB32
;

503 
CARD32
 
∑d6
 
	mB32
;

504 } 
	txI¡înAtomRïly
;

507 
BYTE
 
	mty≥
;

508 
BYTE
 
	m∑d1
;

509 
CARD16
 
£quí˚Numbî
 
	mB16
;

510 
CARD32
 
Àngth
 
	mB32
;

511 
CARD16
 
«meLígth
 
	mB16
;

512 
CARD16
 
∑d2
 
	mB16
;

513 
CARD32
 
∑d3
 
	mB32
;

514 
CARD32
 
∑d4
 
	mB32
;

515 
CARD32
 
∑d5
 
	mB32
;

516 
CARD32
 
∑d6
 
	mB32
;

517 
CARD32
 
∑d7
 
	mB32
;

518 } 
	txGëAtomNameRïly
;

521 
BYTE
 
	mty≥
;

522 
CARD8
 
	mf‹m©
;

523 
CARD16
 
£quí˚Numbî
 
	mB16
;

524 
CARD32
 
Àngth
 
	mB32
;

525 
Atom
 
¥›îtyTy≥
 
	mB32
;

526 
CARD32
 
byãsA·î
 
	mB32
;

527 
CARD32
 
nIãms
 
	mB32
;

528 
CARD32
 
∑d1
 
	mB32
;

529 
CARD32
 
∑d2
 
	mB32
;

530 
CARD32
 
∑d3
 
	mB32
;

531 } 
	txGëPr›îtyRïly
;

534 
BYTE
 
	mty≥
;

535 
BYTE
 
	m∑d1
;

536 
CARD16
 
£quí˚Numbî
 
	mB16
;

537 
CARD32
 
Àngth
 
	mB32
;

538 
CARD16
 
nPr›îtõs
 
	mB16
;

539 
CARD16
 
∑d2
 
	mB16
;

540 
CARD32
 
∑d3
 
	mB32
;

541 
CARD32
 
∑d4
 
	mB32
;

542 
CARD32
 
∑d5
 
	mB32
;

543 
CARD32
 
∑d6
 
	mB32
;

544 
CARD32
 
∑d7
 
	mB32
;

545 } 
	txLi°Pr›îtõsRïly
;

548 
BYTE
 
	mty≥
;

549 
BYTE
 
	m∑d1
;

550 
CARD16
 
£quí˚Numbî
 
	mB16
;

551 
CARD32
 
Àngth
 
	mB32
;

552 
Wödow
 
ow√r
 
	mB32
;

553 
CARD32
 
∑d2
 
	mB32
;

554 
CARD32
 
∑d3
 
	mB32
;

555 
CARD32
 
∑d4
 
	mB32
;

556 
CARD32
 
∑d5
 
	mB32
;

557 
CARD32
 
∑d6
 
	mB32
;

558 } 
	txGëSñe˘i⁄Ow√rRïly
;

561 
BYTE
 
	mty≥
;

562 
BYTE
 
	m°©us
;

563 
CARD16
 
£quí˚Numbî
 
	mB16
;

564 
CARD32
 
Àngth
 
	mB32
;

565 
CARD32
 
∑d1
 
	mB32
;

566 
CARD32
 
∑d2
 
	mB32
;

567 
CARD32
 
∑d3
 
	mB32
;

568 
CARD32
 
∑d4
 
	mB32
;

569 
CARD32
 
∑d5
 
	mB32
;

570 
CARD32
 
∑d6
 
	mB32
;

571 } 
	txGøbPoöãrRïly
;

573 
xGøbPoöãrRïly
 
	txGøbKeybﬂrdRïly
;

576 
BYTE
 
	mty≥
;

577 
BOOL
 
	mßmeS¸ìn
;

578 
CARD16
 
£quí˚Numbî
 
	mB16
;

579 
CARD32
 
Àngth
 
	mB32
;

580 
Wödow
 
roŸ
 
	mB32
, 
chûd
 B32;

581 
INT16
 
roŸX
 
	mB16
, 
roŸY
 B16, 
wöX
 B16, 
wöY
 B16;

582 
CARD16
 
mask
 
	mB16
;

583 
CARD16
 
∑d1
 
	mB16
;

584 
CARD32
 
∑d
 
	mB32
;

585 } 
	txQuîyPoöãrRïly
;

588 
BYTE
 
	mty≥
;

589 
BYTE
 
	m∑d1
;

590 
CARD16
 
£quí˚Numbî
 
	mB16
;

591 
CARD32
 
Àngth
 
	mB32
;

592 
CARD32
 
nEvíts
 
	mB32
;

593 
CARD32
 
∑d2
 
	mB32
;

594 
CARD32
 
∑d3
 
	mB32
;

595 
CARD32
 
∑d4
 
	mB32
;

596 
CARD32
 
∑d5
 
	mB32
;

597 
CARD32
 
∑d6
 
	mB32
;

598 } 
	txGëMŸi⁄EvítsRïly
;

601 
BYTE
 
	mty≥
;

602 
BOOL
 
	mßmeS¸ìn
;

603 
CARD16
 
£quí˚Numbî
 
	mB16
;

604 
CARD32
 
Àngth
 
	mB32
;

605 
Wödow
 
chûd
 
	mB32
;

606 
INT16
 
d°X
 
	mB16
, 
d°Y
 B16;

607 
CARD32
 
∑d2
 
	mB32
;

608 
CARD32
 
∑d3
 
	mB32
;

609 
CARD32
 
∑d4
 
	mB32
;

610 
CARD32
 
∑d5
 
	mB32
;

611 } 
	txTøn¶©eCo‹dsRïly
;

614 
BYTE
 
	mty≥
;

615 
CARD8
 
	mªvîtTo
;

616 
CARD16
 
£quí˚Numbî
 
	mB16
;

617 
CARD32
 
Àngth
 
	mB32
;

618 
Wödow
 
focus
 
	mB32
;

619 
CARD32
 
∑d1
 
	mB32
;

620 
CARD32
 
∑d2
 
	mB32
;

621 
CARD32
 
∑d3
 
	mB32
;

622 
CARD32
 
∑d4
 
	mB32
;

623 
CARD32
 
∑d5
 
	mB32
;

624 } 
	txGëI≈utFocusRïly
;

627 
BYTE
 
	mty≥
;

628 
BYTE
 
	m∑d1
;

629 
CARD16
 
£quí˚Numbî
 
	mB16
;

630 
CARD32
 
Àngth
 
	mB32
;

631 
BYTE
 
	mm≠
[32];

632 } 
	txQuîyKeym≠Rïly
;

635 
	s_xQuîyF⁄tRïly
 {

636 
BYTE
 
	mty≥
;

637 
BYTE
 
	m∑d1
;

638 
CARD16
 
£quí˚Numbî
 
	mB16
;

639 
CARD32
 
Àngth
 
	mB32
;

640 
xCh¨Info
 
	mmöBounds
;

641 
CARD32
 
wÆign1
 
	mB32
;

642 
xCh¨Info
 
	mmaxBounds
;

643 
CARD32
 
wÆign2
 
	mB32
;

644 
CARD16
 
möCh¨OrByã2
 
	mB16
, 
maxCh¨OrByã2
 B16;

645 
CARD16
 
deÁu…Ch¨
 
	mB16
;

646 
CARD16
 
nF⁄tPr›s
 
	mB16
;

647 
CARD8
 
	mdøwDúe˘i⁄
;

648 
CARD8
 
	mmöByã1
, 
	mmaxByã1
;

649 
BOOL
 
	mÆlCh¨sExi°
;

650 
INT16
 
f⁄tAs˚¡
 
	mB16
, 
f⁄tDes˚¡
 B16;

651 
CARD32
 
nCh¨Infos
 
	mB32
;

652 } 
	txQuîyF⁄tRïly
;

655 
BYTE
 
	mty≥
;

656 
CARD8
 
	mdøwDúe˘i⁄
;

657 
CARD16
 
£quí˚Numbî
 
	mB16
;

658 
CARD32
 
Àngth
 
	mB32
;

659 
INT16
 
f⁄tAs˚¡
 
	mB16
, 
f⁄tDes˚¡
 B16;

660 
INT16
 
ovîÆlAs˚¡
 
	mB16
, 
ovîÆlDes˚¡
 B16;

661 
INT32
 
ovîÆlWidth
 
	mB32
, 
ovîÆlLe·
 B32, 
ovîÆlRight
 B32;

662 
CARD32
 
∑d
 
	mB32
;

663 } 
	txQuîyTextExã¡sRïly
;

666 
BYTE
 
	mty≥
;

667 
BYTE
 
	m∑d1
;

668 
CARD16
 
£quí˚Numbî
 
	mB16
;

669 
CARD32
 
Àngth
 
	mB32
;

670 
CARD16
 
nF⁄ts
 
	mB16
;

671 
CARD16
 
∑d2
 
	mB16
;

672 
CARD32
 
∑d3
 
	mB32
;

673 
CARD32
 
∑d4
 
	mB32
;

674 
CARD32
 
∑d5
 
	mB32
;

675 
CARD32
 
∑d6
 
	mB32
;

676 
CARD32
 
∑d7
 
	mB32
;

677 } 
	txLi°F⁄tsRïly
;

681 
BYTE
 
	mty≥
;

682 
CARD8
 
	m«meLígth
;

683 
CARD16
 
£quí˚Numbî
 
	mB16
;

684 
CARD32
 
Àngth
 
	mB32
;

685 
xCh¨Info
 
	mmöBounds
;

686 
CARD32
 
wÆign1
 
	mB32
;

687 
xCh¨Info
 
	mmaxBounds
;

688 
CARD32
 
wÆign2
 
	mB32
;

689 
CARD16
 
möCh¨OrByã2
 
	mB16
, 
maxCh¨OrByã2
 B16;

690 
CARD16
 
deÁu…Ch¨
 
	mB16
;

691 
CARD16
 
nF⁄tPr›s
 
	mB16
;

692 
CARD8
 
	mdøwDúe˘i⁄
;

693 
CARD8
 
	mmöByã1
, 
	mmaxByã1
;

694 
BOOL
 
	mÆlCh¨sExi°
;

695 
INT16
 
f⁄tAs˚¡
 
	mB16
, 
f⁄tDes˚¡
 B16;

696 
CARD32
 
nRïlõs
 
	mB32
;

697 } 
	txLi°F⁄tsWôhInfoRïly
;

700 
BYTE
 
	mty≥
;

701 
BYTE
 
	m∑d1
;

702 
CARD16
 
£quí˚Numbî
 
	mB16
;

703 
CARD32
 
Àngth
 
	mB32
;

704 
CARD16
 
nP©hs
 
	mB16
;

705 
CARD16
 
∑d2
 
	mB16
;

706 
CARD32
 
∑d3
 
	mB32
;

707 
CARD32
 
∑d4
 
	mB32
;

708 
CARD32
 
∑d5
 
	mB32
;

709 
CARD32
 
∑d6
 
	mB32
;

710 
CARD32
 
∑d7
 
	mB32
;

711 } 
	txGëF⁄tP©hRïly
;

714 
BYTE
 
	mty≥
;

715 
CARD8
 
	mdïth
;

716 
CARD16
 
£quí˚Numbî
 
	mB16
;

717 
CARD32
 
Àngth
 
	mB32
;

718 
VisuÆID
 
visuÆ
 
	mB32
;

719 
CARD32
 
∑d3
 
	mB32
;

720 
CARD32
 
∑d4
 
	mB32
;

721 
CARD32
 
∑d5
 
	mB32
;

722 
CARD32
 
∑d6
 
	mB32
;

723 
CARD32
 
∑d7
 
	mB32
;

724 } 
	txGëImageRïly
;

727 
BYTE
 
	mty≥
;

728 
BYTE
 
	m∑d1
;

729 
CARD16
 
£quí˚Numbî
 
	mB16
;

730 
CARD32
 
Àngth
 
	mB32
;

731 
CARD16
 
nCﬁ‹m≠s
 
	mB16
;

732 
CARD16
 
∑d2
 
	mB16
;

733 
CARD32
 
∑d3
 
	mB32
;

734 
CARD32
 
∑d4
 
	mB32
;

735 
CARD32
 
∑d5
 
	mB32
;

736 
CARD32
 
∑d6
 
	mB32
;

737 
CARD32
 
∑d7
 
	mB32
;

738 } 
	txLi°In°ÆÀdCﬁ‹m≠sRïly
;

741 
BYTE
 
	mty≥
;

742 
BYTE
 
	m∑d1
;

743 
CARD16
 
£quí˚Numbî
 
	mB16
;

744 
CARD32
 
Àngth
 
	mB32
;

745 
CARD16
 
ªd
 
	mB16
, 
gªí
 B16, 
blue
 B16;

746 
CARD16
 
∑d2
 
	mB16
;

747 
CARD32
 
pixñ
 
	mB32
;

748 
CARD32
 
∑d3
 
	mB32
;

749 
CARD32
 
∑d4
 
	mB32
;

750 
CARD32
 
∑d5
 
	mB32
;

751 } 
	txAŒocCﬁ‹Rïly
;

754 
BYTE
 
	mty≥
;

755 
BYTE
 
	m∑d1
;

756 
CARD16
 
£quí˚Numbî
 
	mB16
;

757 
CARD32
 
Àngth
 
	mB32
;

758 
CARD32
 
pixñ
 
	mB32
;

759 
CARD16
 
exa˘Red
 
	mB16
, 
exa˘Gªí
 B16, 
exa˘Blue
 B16;

760 
CARD16
 
s¸ìnRed
 
	mB16
, 
s¸ìnGªí
 B16, 
s¸ìnBlue
 B16;

761 
CARD32
 
∑d2
 
	mB32
;

762 
CARD32
 
∑d3
 
	mB32
;

763 } 
	txAŒocNamedCﬁ‹Rïly
;

766 
BYTE
 
	mty≥
;

767 
BYTE
 
	m∑d1
;

768 
CARD16
 
£quí˚Numbî
 
	mB16
;

769 
CARD32
 
Àngth
 
	mB32
;

770 
CARD16
 
nPixñs
 
	mB16
, 
nMasks
 B16;

771 
CARD32
 
∑d3
 
	mB32
;

772 
CARD32
 
∑d4
 
	mB32
;

773 
CARD32
 
∑d5
 
	mB32
;

774 
CARD32
 
∑d6
 
	mB32
;

775 
CARD32
 
∑d7
 
	mB32
;

776 } 
	txAŒocCﬁ‹CñlsRïly
;

779 
BYTE
 
	mty≥
;

780 
BYTE
 
	m∑d1
;

781 
CARD16
 
£quí˚Numbî
 
	mB16
;

782 
CARD32
 
Àngth
 
	mB32
;

783 
CARD16
 
nPixñs
 
	mB16
;

784 
CARD16
 
∑d2
 
	mB16
;

785 
CARD32
 
ªdMask
 
	mB32
, 
gªíMask
 B32, 
blueMask
 B32;

786 
CARD32
 
∑d3
 
	mB32
;

787 
CARD32
 
∑d4
 
	mB32
;

788 } 
	txAŒocCﬁ‹Pœ√sRïly
;

791 
BYTE
 
	mty≥
;

792 
BYTE
 
	m∑d1
;

793 
CARD16
 
£quí˚Numbî
 
	mB16
;

794 
CARD32
 
Àngth
 
	mB32
;

795 
CARD16
 
nCﬁ‹s
 
	mB16
;

796 
CARD16
 
∑d2
 
	mB16
;

797 
CARD32
 
∑d3
 
	mB32
;

798 
CARD32
 
∑d4
 
	mB32
;

799 
CARD32
 
∑d5
 
	mB32
;

800 
CARD32
 
∑d6
 
	mB32
;

801 
CARD32
 
∑d7
 
	mB32
;

802 } 
	txQuîyCﬁ‹sRïly
;

805 
BYTE
 
	mty≥
;

806 
BYTE
 
	m∑d1
;

807 
CARD16
 
£quí˚Numbî
 
	mB16
;

808 
CARD32
 
Àngth
 
	mB32
;

809 
CARD16
 
exa˘Red
 
	mB16
, 
exa˘Gªí
 B16, 
exa˘Blue
 B16;

810 
CARD16
 
s¸ìnRed
 
	mB16
, 
s¸ìnGªí
 B16, 
s¸ìnBlue
 B16;

811 
CARD32
 
∑d3
 
	mB32
;

812 
CARD32
 
∑d4
 
	mB32
;

813 
CARD32
 
∑d5
 
	mB32
;

814 } 
	txLookupCﬁ‹Rïly
;

817 
BYTE
 
	mty≥
;

818 
BYTE
 
	m∑d1
;

819 
CARD16
 
£quí˚Numbî
 
	mB16
;

820 
CARD32
 
Àngth
 
	mB32
;

821 
CARD16
 
width
 
	mB16
, 
height
 B16;

822 
CARD32
 
∑d3
 
	mB32
;

823 
CARD32
 
∑d4
 
	mB32
;

824 
CARD32
 
∑d5
 
	mB32
;

825 
CARD32
 
∑d6
 
	mB32
;

826 
CARD32
 
∑d7
 
	mB32
;

827 } 
	txQuîyBe°SizeRïly
;

830 
BYTE
 
	mty≥
;

831 
BYTE
 
	m∑d1
;

832 
CARD16
 
£quí˚Numbî
 
	mB16
;

833 
CARD32
 
Àngth
 
	mB32
;

834 
BOOL
 
	m¥e£¡
;

835 
CARD8
 
	mmaj‹_›code
;

836 
CARD8
 
	mfú°_evít
;

837 
CARD8
 
	mfú°_îr‹
;

838 
CARD32
 
∑d3
 
	mB32
;

839 
CARD32
 
∑d4
 
	mB32
;

840 
CARD32
 
∑d5
 
	mB32
;

841 
CARD32
 
∑d6
 
	mB32
;

842 
CARD32
 
∑d7
 
	mB32
;

843 } 
	txQuîyExãnsi⁄Rïly
;

846 
BYTE
 
	mty≥
;

847 
CARD8
 
	mnExãnsi⁄s
;

848 
CARD16
 
£quí˚Numbî
 
	mB16
;

849 
CARD32
 
Àngth
 
	mB32
;

850 
CARD32
 
∑d2
 
	mB32
;

851 
CARD32
 
∑d3
 
	mB32
;

852 
CARD32
 
∑d4
 
	mB32
;

853 
CARD32
 
∑d5
 
	mB32
;

854 
CARD32
 
∑d6
 
	mB32
;

855 
CARD32
 
∑d7
 
	mB32
;

856 } 
	txLi°Exãnsi⁄sRïly
;

860 
BYTE
 
	mty≥
;

861 
CARD8
 
	msuc˚ss
;

862 
CARD16
 
£quí˚Numbî
 
	mB16
;

863 
CARD32
 
Àngth
 
	mB32
;

864 
CARD32
 
∑d2
 
	mB32
;

865 
CARD32
 
∑d3
 
	mB32
;

866 
CARD32
 
∑d4
 
	mB32
;

867 
CARD32
 
∑d5
 
	mB32
;

868 
CARD32
 
∑d6
 
	mB32
;

869 
CARD32
 
∑d7
 
	mB32
;

870 } 
	txSëM≠pögRïly
;

871 
xSëM≠pögRïly
 
	txSëPoöãrM≠pögRïly
;

872 
xSëM≠pögRïly
 
	txSëModifõrM≠pögRïly
;

875 
BYTE
 
	mty≥
;

876 
CARD8
 
	mnE…s
;

877 
CARD16
 
£quí˚Numbî
 
	mB16
;

878 
CARD32
 
Àngth
 
	mB32
;

879 
CARD32
 
∑d2
 
	mB32
;

880 
CARD32
 
∑d3
 
	mB32
;

881 
CARD32
 
∑d4
 
	mB32
;

882 
CARD32
 
∑d5
 
	mB32
;

883 
CARD32
 
∑d6
 
	mB32
;

884 
CARD32
 
∑d7
 
	mB32
;

885 } 
	txGëPoöãrM≠pögRïly
;

888 
BYTE
 
	mty≥
;

889 
CARD8
 
	mkeySymsPîKeyCode
;

890 
CARD16
 
£quí˚Numbî
 
	mB16
;

891 
CARD32
 
Àngth
 
	mB32
;

892 
CARD32
 
∑d2
 
	mB32
;

893 
CARD32
 
∑d3
 
	mB32
;

894 
CARD32
 
∑d4
 
	mB32
;

895 
CARD32
 
∑d5
 
	mB32
;

896 
CARD32
 
∑d6
 
	mB32
;

897 
CARD32
 
∑d7
 
	mB32
;

898 } 
	txGëKeybﬂrdM≠pögRïly
;

901 
BYTE
 
	mty≥
;

902 
CARD8
 
	mnumKeyPîModifõr
;

903 
CARD16
 
£quí˚Numbî
 
	mB16
;

904 
CARD32
 
Àngth
 
	mB32
;

905 
CARD32
 
∑d1
 
	mB32
;

906 
CARD32
 
∑d2
 
	mB32
;

907 
CARD32
 
∑d3
 
	mB32
;

908 
CARD32
 
∑d4
 
	mB32
;

909 
CARD32
 
∑d5
 
	mB32
;

910 
CARD32
 
∑d6
 
	mB32
;

911 } 
	txGëModifõrM≠pögRïly
;

914 
BYTE
 
	mty≥
;

915 
BOOL
 
	mglobÆAutoRïót
;

916 
CARD16
 
£quí˚Numbî
 
	mB16
;

917 
CARD32
 
Àngth
 
	mB32
;

918 
CARD32
 
ÀdMask
 
	mB32
;

919 
CARD8
 
	mkeyClickPî˚¡
, 
	mbñlPî˚¡
;

920 
CARD16
 
bñlPôch
 
	mB16
, 
bñlDuøti⁄
 B16;

921 
CARD16
 
∑d
 
	mB16
;

922 
BYTE
 
	mm≠
[32];

923 } 
	txGëKeybﬂrdC⁄åﬁRïly
;

926 
BYTE
 
	mty≥
;

927 
BYTE
 
	m∑d1
;

928 
CARD16
 
£quí˚Numbî
 
	mB16
;

929 
CARD32
 
Àngth
 
	mB32
;

930 
CARD16
 
ac˚lNumî©‹
 
	mB16
, 
ac˚lDíomö©‹
 B16;

931 
CARD16
 
thªshﬁd
 
	mB16
;

932 
CARD16
 
∑d2
 
	mB16
;

933 
CARD32
 
∑d3
 
	mB32
;

934 
CARD32
 
∑d4
 
	mB32
;

935 
CARD32
 
∑d5
 
	mB32
;

936 
CARD32
 
∑d6
 
	mB32
;

937 } 
	txGëPoöãrC⁄åﬁRïly
;

940 
BYTE
 
	mty≥
;

941 
BYTE
 
	m∑d1
;

942 
CARD16
 
£quí˚Numbî
 
	mB16
;

943 
CARD32
 
Àngth
 
	mB32
;

944 
CARD16
 
timeout
 
	mB16
, 
öãrvÆ
 B16;

945 
BOOL
 
	m¥e„rBœnkög
;

946 
BOOL
 
	mÆlowExposuªs
;

947 
CARD16
 
∑d2
 
	mB16
;

948 
CARD32
 
∑d3
 
	mB32
;

949 
CARD32
 
∑d4
 
	mB32
;

950 
CARD32
 
∑d5
 
	mB32
;

951 
CARD32
 
∑d6
 
	mB32
;

952 } 
	txGëS¸ìnSavîRïly
;

955 
BYTE
 
	mty≥
;

956 
BOOL
 
	míabÀd
;

957 
CARD16
 
£quí˚Numbî
 
	mB16
;

958 
CARD32
 
Àngth
 
	mB32
;

959 
CARD16
 
nHo°s
 
	mB16
;

960 
CARD16
 
∑d1
 
	mB16
;

961 
CARD32
 
∑d3
 
	mB32
;

962 
CARD32
 
∑d4
 
	mB32
;

963 
CARD32
 
∑d5
 
	mB32
;

964 
CARD32
 
∑d6
 
	mB32
;

965 
CARD32
 
∑d7
 
	mB32
;

966 } 
	txLi°Ho°sRïly
;

977 
BYTE
 
	mty≥
;

978 
BYTE
 
	mîr‹Code
;

979 
CARD16
 
£quí˚Numbî
 
	mB16
;

980 
CARD32
 
ªsour˚ID
 
	mB32
;

981 
CARD16
 
mö‹Code
 
	mB16
;

982 
CARD8
 
	mmaj‹Code
;

983 
BYTE
 
	m∑d1
;

984 
CARD32
 
∑d3
 
	mB32
;

985 
CARD32
 
∑d4
 
	mB32
;

986 
CARD32
 
∑d5
 
	mB32
;

987 
CARD32
 
∑d6
 
	mB32
;

988 
CARD32
 
∑d7
 
	mB32
;

989 } 
	txEº‹
;

996 
	s_xEvít
 {

999 
BYTE
 
	mty≥
;

1000 
BYTE
 
	mdëaû
;

1001 
CARD16
 
£quí˚Numbî
 
	mB16
;

1002 } 
	mu
;

1004 
CARD32
 
∑d00
 
	mB32
;

1005 
Time
 
time
 
	mB32
;

1006 
Wödow
 
roŸ
 
	mB32
, 
evít
 B32, 
chûd
 B32;

1007 
INT16
 
roŸX
 
	mB16
, 
roŸY
 B16, 
evítX
 B16, 
evítY
 B16;

1008 
KeyButMask
 
°©e
 
	mB16
;

1009 
BOOL
 
	mßmeS¸ìn
;

1010 
BYTE
 
	m∑d1
;

1011 } 
	mkeyBuâ⁄Poöãr
;

1013 
CARD32
 
∑d00
 
	mB32
;

1014 
Time
 
time
 
	mB32
;

1015 
Wödow
 
roŸ
 
	mB32
, 
evít
 B32, 
chûd
 B32;

1016 
INT16
 
roŸX
 
	mB16
, 
roŸY
 B16, 
evítX
 B16, 
evítY
 B16;

1017 
KeyButMask
 
°©e
 
	mB16
;

1018 
BYTE
 
	mmode
;

1019 
BYTE
 
	mÊags
;

1020 
	#ELFœgFocus
 (1<<0)

	)

1021 
	#ELFœgSameS¸ìn
 (1<<1)

	)

1022 } 
	míãrLóve
;

1024 
CARD32
 
∑d00
 
	mB32
;

1025 
Wödow
 
wödow
 
	mB32
;

1026 
BYTE
 
	mmode
;

1027 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1028 } 
	mfocus
;

1030 
CARD32
 
∑d00
 
	mB32
;

1031 
Wödow
 
wödow
 
	mB32
;

1032 
CARD16
 
x
 
	mB16
, 
y
 B16, 
width
 B16, 
height
 B16;

1033 
CARD16
 
cou¡
 
	mB16
;

1034 
CARD16
 
∑d2
 
	mB16
;

1035 } 
	mexpo£
;

1037 
CARD32
 
∑d00
 
	mB32
;

1038 
DøwabÀ
 
døwabÀ
 
	mB32
;

1039 
CARD16
 
x
 
	mB16
, 
y
 B16, 
width
 B16, 
height
 B16;

1040 
CARD16
 
mö‹Evít
 
	mB16
;

1041 
CARD16
 
cou¡
 
	mB16
;

1042 
BYTE
 
	mmaj‹Evít
;

1043 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1044 } 
	mgøphicsExposuª
;

1046 
CARD32
 
∑d00
 
	mB32
;

1047 
DøwabÀ
 
døwabÀ
 
	mB32
;

1048 
CARD16
 
mö‹Evít
 
	mB16
;

1049 
BYTE
 
	mmaj‹Evít
;

1050 
BYTE
 
	mb∑d
;

1051 } 
	mnoExposuª
;

1053 
CARD32
 
∑d00
 
	mB32
;

1054 
Wödow
 
wödow
 
	mB32
;

1055 
CARD8
 
	m°©e
;

1056 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1057 } 
	mvisibûôy
;

1059 
CARD32
 
∑d00
 
	mB32
;

1060 
Wödow
 
∑ª¡
 
	mB32
, 
wödow
 B32;

1061 
INT16
 
x
 
	mB16
, 
y
 B16;

1062 
CARD16
 
width
 
	mB16
, 
height
 B16, 
b‹dîWidth
 B16;

1063 
BOOL
 
	movîride
;

1064 
BYTE
 
	mb∑d
;

1065 } 
	m¸óãNŸify
;

1075 
CARD32
 
∑d00
 
	mB32
;

1076 
Wödow
 
evít
 
	mB32
, 
wödow
 B32;

1077 } 
	mde°royNŸify
;

1079 
CARD32
 
∑d00
 
	mB32
;

1080 
Wödow
 
evít
 
	mB32
, 
wödow
 B32;

1081 
BOOL
 
	m‰omC⁄figuª
;

1082 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1083 } 
	munm≠NŸify
;

1085 
CARD32
 
∑d00
 
	mB32
;

1086 
Wödow
 
evít
 
	mB32
, 
wödow
 B32;

1087 
BOOL
 
	movîride
;

1088 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1089 } 
	mm≠NŸify
;

1091 
CARD32
 
∑d00
 
	mB32
;

1092 
Wödow
 
∑ª¡
 
	mB32
, 
wödow
 B32;

1093 } 
	mm≠Reque°
;

1095 
CARD32
 
∑d00
 
	mB32
;

1096 
Wödow
 
evít
 
	mB32
, 
wödow
 B32, 
∑ª¡
 B32;

1097 
INT16
 
x
 
	mB16
, 
y
 B16;

1098 
BOOL
 
	movîride
;

1099 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1100 } 
	mª∑ª¡
;

1102 
CARD32
 
∑d00
 
	mB32
;

1103 
Wödow
 
evít
 
	mB32
, 
wödow
 B32, 
aboveSiblög
 B32;

1104 
INT16
 
x
 
	mB16
, 
y
 B16;

1105 
CARD16
 
width
 
	mB16
, 
height
 B16, 
b‹dîWidth
 B16;

1106 
BOOL
 
	movîride
;

1107 
BYTE
 
	mb∑d
;

1108 } 
	mc⁄figuªNŸify
;

1110 
CARD32
 
∑d00
 
	mB32
;

1111 
Wödow
 
∑ª¡
 
	mB32
, 
wödow
 B32, 
siblög
 B32;

1112 
INT16
 
x
 
	mB16
, 
y
 B16;

1113 
CARD16
 
width
 
	mB16
, 
height
 B16, 
b‹dîWidth
 B16;

1114 
CARD16
 
vÆueMask
 
	mB16
;

1115 
CARD32
 
∑d1
 
	mB32
;

1116 } 
	mc⁄figuªReque°
;

1118 
CARD32
 
∑d00
 
	mB32
;

1119 
Wödow
 
evít
 
	mB32
, 
wödow
 B32;

1120 
INT16
 
x
 
	mB16
, 
y
 B16;

1121 
CARD32
 
∑d1
 
	mB32
, 
∑d2
 B32, 
∑d3
 B32, 
∑d4
 B32;

1122 } 
	mgøvôy
;

1124 
CARD32
 
∑d00
 
	mB32
;

1125 
Wödow
 
wödow
 
	mB32
;

1126 
CARD16
 
width
 
	mB16
, 
height
 B16;

1127 } 
	mªsizeReque°
;

1131 
CARD32
 
∑d00
 
	mB32
;

1132 
Wödow
 
evít
 
	mB32
, 
wödow
 B32, 
∑ª¡
 B32;

1133 
BYTE
 
	m∂a˚
;

1134 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1135 } 
	mcúcuœã
;

1137 
CARD32
 
∑d00
 
	mB32
;

1138 
Wödow
 
wödow
 
	mB32
;

1139 
Atom
 
©om
 
	mB32
;

1140 
Time
 
time
 
	mB32
;

1141 
BYTE
 
	m°©e
;

1142 
BYTE
 
	m∑d1
;

1143 
CARD16
 
∑d2
 
	mB16
;

1144 } 
	m¥›îty
;

1146 
CARD32
 
∑d00
 
	mB32
;

1147 
Time
 
time
 
	mB32
;

1148 
Wödow
 
wödow
 
	mB32
;

1149 
Atom
 
©om
 
	mB32
;

1150 } 
	m£À˘i⁄CÀ¨
;

1152 
CARD32
 
∑d00
 
	mB32
;

1153 
Time
 
time
 
	mB32
;

1154 
Wödow
 
ow√r
 
	mB32
, 
ªque°‹
 B32;

1155 
Atom
 
£À˘i⁄
 
	mB32
, 
èrgë
 B32, 
¥›îty
 B32;

1156 } 
	m£À˘i⁄Reque°
;

1158 
CARD32
 
∑d00
 
	mB32
;

1159 
Time
 
time
 
	mB32
;

1160 
Wödow
 
ªque°‹
 
	mB32
;

1161 
Atom
 
£À˘i⁄
 
	mB32
, 
èrgë
 B32, 
¥›îty
 B32;

1162 } 
	m£À˘i⁄NŸify
;

1164 
CARD32
 
∑d00
 
	mB32
;

1165 
Wödow
 
wödow
 
	mB32
;

1166 
Cﬁ‹m≠
 
cﬁ‹m≠
 
	mB32
;

1167 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

1168 
BOOL
 
	mc_√w
;

1170 
BOOL
 
	m√w
;

1172 
BYTE
 
	m°©e
;

1173 
BYTE
 
	m∑d1
, 
	m∑d2
;

1174 } 
	mcﬁ‹m≠
;

1176 
CARD32
 
∑d00
 
	mB32
;

1177 
CARD8
 
	mªque°
;

1178 
KeyCode
 
	mfú°KeyCode
;

1179 
CARD8
 
	mcou¡
;

1180 
BYTE
 
	m∑d1
;

1181 } 
	mm≠pögNŸify
;

1183 
CARD32
 
∑d00
 
	mB32
;

1184 
Wödow
 
wödow
 
	mB32
;

1187 
Atom
 
ty≥
 
	mB32
;

1188 
INT32
 
l⁄gs0
 
	mB32
;

1189 
INT32
 
l⁄gs1
 
	mB32
;

1190 
INT32
 
l⁄gs2
 
	mB32
;

1191 
INT32
 
l⁄gs3
 
	mB32
;

1192 
INT32
 
l⁄gs4
 
	mB32
;

1193 } 
	ml
;

1195 
Atom
 
ty≥
 
	mB32
;

1196 
INT16
 
sh‹ts0
 
	mB16
;

1197 
INT16
 
sh‹ts1
 
	mB16
;

1198 
INT16
 
sh‹ts2
 
	mB16
;

1199 
INT16
 
sh‹ts3
 
	mB16
;

1200 
INT16
 
sh‹ts4
 
	mB16
;

1201 
INT16
 
sh‹ts5
 
	mB16
;

1202 
INT16
 
sh‹ts6
 
	mB16
;

1203 
INT16
 
sh‹ts7
 
	mB16
;

1204 
INT16
 
sh‹ts8
 
	mB16
;

1205 
INT16
 
sh‹ts9
 
	mB16
;

1206 } 
	ms
;

1208 
Atom
 
ty≥
 
	mB32
;

1209 
INT8
 
	mbyãs
[20];

1210 } 
	mb
;

1211 } 
	mu
;

1212 } 
	m˛õ¡Mesßge
;

1213 } 
	mu
;

1214 } 
	txEvít
;

1233 
BYTE
 
	mty≥
;

1234 
CARD8
 
	mexãnsi⁄
;

1235 
CARD16
 
£quí˚Numbî
 
	mB16
;

1236 
CARD32
 
Àngth
 
	mB32
;

1237 
CARD16
 
evty≥
 
	mB16
;

1238 
CARD16
 
∑d2
 
	mB16
;

1239 
CARD32
 
∑d3
 
	mB32
;

1240 
CARD32
 
∑d4
 
	mB32
;

1241 
CARD32
 
∑d5
 
	mB32
;

1242 
CARD32
 
∑d6
 
	mB32
;

1243 
CARD32
 
∑d7
 
	mB32
;

1244 } 
	txGíîicEvít
;

1253 
BYTE
 
	mty≥
;

1254 
BYTE
 
	mm≠
[31];

1255 } 
	txKeym≠Evít
;

1257 
	#XEvítSize
 ((
xEvít
))

	)

1265 
xGíîicRïly
 
	mgíîic
;

1266 
xGëGeomëryRïly
 
	mgeom
;

1267 
xQuîyTªeRïly
 
	måì
;

1268 
xI¡înAtomRïly
 
	m©om
;

1269 
xGëAtomNameRïly
 
	m©omName
;

1270 
xGëPr›îtyRïly
 
	m¥›îty
;

1271 
xLi°Pr›îtõsRïly
 
	mli°Pr›îtõs
;

1272 
xGëSñe˘i⁄Ow√rRïly
 
	m£À˘i⁄
;

1273 
xGøbPoöãrRïly
 
	mgøbPoöãr
;

1274 
xGøbKeybﬂrdRïly
 
	mgøbKeybﬂrd
;

1275 
xQuîyPoöãrRïly
 
	mpoöãr
;

1276 
xGëMŸi⁄EvítsRïly
 
	mmŸi⁄Evíts
;

1277 
xTøn¶©eCo‹dsRïly
 
	mco‹ds
;

1278 
xGëI≈utFocusRïly
 
	möputFocus
;

1279 
xQuîyTextExã¡sRïly
 
	mãxtExã¡s
;

1280 
xLi°F⁄tsRïly
 
	mf⁄ts
;

1281 
xGëF⁄tP©hRïly
 
	mf⁄tP©h
;

1282 
xGëImageRïly
 
	mimage
;

1283 
xLi°In°ÆÀdCﬁ‹m≠sRïly
 
	mcﬁ‹m≠s
;

1284 
xAŒocCﬁ‹Rïly
 
	mÆlocCﬁ‹
;

1285 
xAŒocNamedCﬁ‹Rïly
 
	mÆlocNamedCﬁ‹
;

1286 
xAŒocCﬁ‹CñlsRïly
 
	mcﬁ‹Cñls
;

1287 
xAŒocCﬁ‹Pœ√sRïly
 
	mcﬁ‹Pœ√s
;

1288 
xQuîyCﬁ‹sRïly
 
	mcﬁ‹s
;

1289 
xLookupCﬁ‹Rïly
 
	mlookupCﬁ‹
;

1290 
xQuîyBe°SizeRïly
 
	mbe°Size
;

1291 
xQuîyExãnsi⁄Rïly
 
	mexãnsi⁄
;

1292 
xLi°Exãnsi⁄sRïly
 
	mexãnsi⁄s
;

1293 
xSëModifõrM≠pögRïly
 
	m£tModifõrM≠pög
;

1294 
xGëModifõrM≠pögRïly
 
	mgëModifõrM≠pög
;

1295 
xSëPoöãrM≠pögRïly
 
	m£tPoöãrM≠pög
;

1296 
xGëKeybﬂrdM≠pögRïly
 
	mgëKeybﬂrdM≠pög
;

1297 
xGëPoöãrM≠pögRïly
 
	mgëPoöãrM≠pög
;

1298 
xGëPoöãrC⁄åﬁRïly
 
	mpoöãrC⁄åﬁ
;

1299 
xGëS¸ìnSavîRïly
 
	ms¸ìnSavî
;

1300 
xLi°Ho°sRïly
 
	mho°s
;

1301 
xEº‹
 
	mîr‹
;

1302 
xEvít
 
	mevít
;

1303 } 
	txRïly
;

1314 
	s_xReq
 {

1315 
CARD8
 
	mªqTy≥
;

1316 
CARD8
 
	md©a
;

1317 
CARD16
 
Àngth
 
	mB16
;

1319 } 
	txReq
;

1329 
CARD8
 
	mªqTy≥
;

1330 
BYTE
 
	m∑d
;

1331 
CARD16
 
Àngth
 
	mB16
;

1332 
CARD32
 
id
 
	mB32
;

1333 } 
	txResour˚Req
;

1336 
CARD8
 
	mªqTy≥
;

1337 
CARD8
 
	mdïth
;

1338 
CARD16
 
Àngth
 
	mB16
;

1339 
Wödow
 
wid
 
	mB32
, 
∑ª¡
 B32;

1340 
INT16
 
x
 
	mB16
, 
y
 B16;

1341 
CARD16
 
width
 
	mB16
, 
height
 B16, 
b‹dîWidth
 B16;

1342 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

1343 
CARD16
 
c_˛ass
 
	mB16
;

1345 
CARD16
 
˛ass
 
	mB16
;

1347 
VisuÆID
 
visuÆ
 
	mB32
;

1348 
CARD32
 
mask
 
	mB32
;

1349 } 
	txCª©eWödowReq
;

1352 
CARD8
 
	mªqTy≥
;

1353 
BYTE
 
	m∑d
;

1354 
CARD16
 
Àngth
 
	mB16
;

1355 
Wödow
 
wödow
 
	mB32
;

1356 
CARD32
 
vÆueMask
 
	mB32
;

1357 } 
	txCh™geWödowAâribuãsReq
;

1360 
CARD8
 
	mªqTy≥
;

1361 
BYTE
 
	mmode
;

1362 
CARD16
 
Àngth
 
	mB16
;

1363 
Wödow
 
wödow
 
	mB32
;

1364 } 
	txCh™geSaveSëReq
;

1367 
CARD8
 
	mªqTy≥
;

1368 
BYTE
 
	m∑d
;

1369 
CARD16
 
Àngth
 
	mB16
;

1370 
Wödow
 
wödow
 
	mB32
, 
∑ª¡
 B32;

1371 
INT16
 
x
 
	mB16
, 
y
 B16;

1372 } 
	txRï¨ítWödowReq
;

1375 
CARD8
 
	mªqTy≥
;

1376 
CARD8
 
	m∑d
;

1377 
CARD16
 
Àngth
 
	mB16
;

1378 
Wödow
 
wödow
 
	mB32
;

1379 
CARD16
 
mask
 
	mB16
;

1380 
CARD16
 
∑d2
 
	mB16
;

1381 } 
	txC⁄figuªWödowReq
;

1384 
CARD8
 
	mªqTy≥
;

1385 
CARD8
 
	mdúe˘i⁄
;

1386 
CARD16
 
Àngth
 
	mB16
;

1387 
Wödow
 
wödow
 
	mB32
;

1388 } 
	txCúcuœãWödowReq
;

1391 
CARD8
 
	mªqTy≥
;

1392 
BOOL
 
	m⁄lyIfExi°s
;

1393 
CARD16
 
Àngth
 
	mB16
;

1394 
CARD16
 
nbyãs
 
	mB16
;

1395 
CARD16
 
∑d
 
	mB16
;

1396 } 
	txI¡înAtomReq
;

1399 
CARD8
 
	mªqTy≥
;

1400 
CARD8
 
	mmode
;

1401 
CARD16
 
Àngth
 
	mB16
;

1402 
Wödow
 
wödow
 
	mB32
;

1403 
Atom
 
¥›îty
 
	mB32
, 
ty≥
 B32;

1404 
CARD8
 
	mf‹m©
;

1405 
BYTE
 
	m∑d
[3];

1406 
CARD32
 
nUnôs
 
	mB32
;

1407 } 
	txCh™gePr›îtyReq
;

1410 
CARD8
 
	mªqTy≥
;

1411 
BYTE
 
	m∑d
;

1412 
CARD16
 
Àngth
 
	mB16
;

1413 
Wödow
 
wödow
 
	mB32
;

1414 
Atom
 
¥›îty
 
	mB32
;

1415 } 
	txDñëePr›îtyReq
;

1418 
CARD8
 
	mªqTy≥
;

1419 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

1420 
BOOL
 
	mc_dñëe
;

1422 
BOOL
 
	mdñëe
;

1424 
CARD16
 
Àngth
 
	mB16
;

1425 
Wödow
 
wödow
 
	mB32
;

1426 
Atom
 
¥›îty
 
	mB32
, 
ty≥
 B32;

1427 
CARD32
 
l⁄gOff£t
 
	mB32
;

1428 
CARD32
 
l⁄gLígth
 
	mB32
;

1429 } 
	txGëPr›îtyReq
;

1432 
CARD8
 
	mªqTy≥
;

1433 
BYTE
 
	m∑d
;

1434 
CARD16
 
Àngth
 
	mB16
;

1435 
Wödow
 
wödow
 
	mB32
;

1436 
Atom
 
£À˘i⁄
 
	mB32
;

1437 
Time
 
time
 
	mB32
;

1438 } 
	txSëSñe˘i⁄Ow√rReq
;

1441 
CARD8
 
	mªqTy≥
;

1442 
BYTE
 
	m∑d
;

1443 
CARD16
 
Àngth
 
	mB16
;

1444 
Wödow
 
ªque°‹
 
	mB32
;

1445 
Atom
 
£À˘i⁄
 
	mB32
, 
èrgë
 B32, 
¥›îty
 B32;

1446 
Time
 
time
 
	mB32
;

1447 } 
	txC⁄vîtSñe˘i⁄Req
;

1450 
CARD8
 
	mªqTy≥
;

1451 
BOOL
 
	m¥›ag©e
;

1452 
CARD16
 
Àngth
 
	mB16
;

1453 
Wödow
 
de°ö©i⁄
 
	mB32
;

1454 
CARD32
 
evítMask
 
	mB32
;

1455 
xEvít
 
	mevít
;

1456 } 
	txSídEvítReq
;

1459 
CARD8
 
	mªqTy≥
;

1460 
BOOL
 
	mow√rEvíts
;

1461 
CARD16
 
Àngth
 
	mB16
;

1462 
Wödow
 
gøbWödow
 
	mB32
;

1463 
CARD16
 
evítMask
 
	mB16
;

1464 
BYTE
 
	mpoöãrMode
, 
	mkeybﬂrdMode
;

1465 
Wödow
 
c⁄föeTo
 
	mB32
;

1466 
Curs‹
 
curs‹
 
	mB32
;

1467 
Time
 
time
 
	mB32
;

1468 } 
	txGøbPoöãrReq
;

1471 
CARD8
 
	mªqTy≥
;

1472 
BOOL
 
	mow√rEvíts
;

1473 
CARD16
 
Àngth
 
	mB16
;

1474 
Wödow
 
gøbWödow
 
	mB32
;

1475 
CARD16
 
evítMask
 
	mB16
;

1476 
BYTE
 
	mpoöãrMode
, 
	mkeybﬂrdMode
;

1477 
Wödow
 
c⁄föeTo
 
	mB32
;

1478 
Curs‹
 
curs‹
 
	mB32
;

1479 
CARD8
 
	mbuâ⁄
;

1480 
BYTE
 
	m∑d
;

1481 
CARD16
 
modifõrs
 
	mB16
;

1482 } 
	txGøbBuâ⁄Req
;

1485 
CARD8
 
	mªqTy≥
;

1486 
CARD8
 
	mbuâ⁄
;

1487 
CARD16
 
Àngth
 
	mB16
;

1488 
Wödow
 
gøbWödow
 
	mB32
;

1489 
CARD16
 
modifõrs
 
	mB16
;

1490 
CARD16
 
∑d
 
	mB16
;

1491 } 
	txUngøbBuâ⁄Req
;

1494 
CARD8
 
	mªqTy≥
;

1495 
BYTE
 
	m∑d
;

1496 
CARD16
 
Àngth
 
	mB16
;

1497 
Curs‹
 
curs‹
 
	mB32
;

1498 
Time
 
time
 
	mB32
;

1499 
CARD16
 
evítMask
 
	mB16
;

1500 
CARD16
 
∑d2
 
	mB16
;

1501 } 
	txCh™geA˘ivePoöãrGøbReq
;

1504 
CARD8
 
	mªqTy≥
;

1505 
BOOL
 
	mow√rEvíts
;

1506 
CARD16
 
Àngth
 
	mB16
;

1507 
Wödow
 
gøbWödow
 
	mB32
;

1508 
Time
 
time
 
	mB32
;

1509 
BYTE
 
	mpoöãrMode
, 
	mkeybﬂrdMode
;

1510 
CARD16
 
∑d
 
	mB16
;

1511 } 
	txGøbKeybﬂrdReq
;

1514 
CARD8
 
	mªqTy≥
;

1515 
BOOL
 
	mow√rEvíts
;

1516 
CARD16
 
Àngth
 
	mB16
;

1517 
Wödow
 
gøbWödow
 
	mB32
;

1518 
CARD16
 
modifõrs
 
	mB16
;

1519 
CARD8
 
	mkey
;

1520 
BYTE
 
	mpoöãrMode
, 
	mkeybﬂrdMode
;

1521 
BYTE
 
	m∑d1
, 
	m∑d2
, 
	m∑d3
;

1522 } 
	txGøbKeyReq
;

1525 
CARD8
 
	mªqTy≥
;

1526 
CARD8
 
	mkey
;

1527 
CARD16
 
Àngth
 
	mB16
;

1528 
Wödow
 
gøbWödow
 
	mB32
;

1529 
CARD16
 
modifõrs
 
	mB16
;

1530 
CARD16
 
∑d
 
	mB16
;

1531 } 
	txUngøbKeyReq
;

1534 
CARD8
 
	mªqTy≥
;

1535 
CARD8
 
	mmode
;

1536 
CARD16
 
Àngth
 
	mB16
;

1537 
Time
 
time
 
	mB32
;

1538 } 
	txAŒowEvítsReq
;

1541 
CARD8
 
	mªqTy≥
;

1542 
BYTE
 
	m∑d
;

1543 
CARD16
 
Àngth
 
	mB16
;

1544 
Wödow
 
wödow
 
	mB32
;

1545 
Time
 
°¨t
 
	mB32
, 
°›
 B32;

1546 } 
	txGëMŸi⁄EvítsReq
;

1549 
CARD8
 
	mªqTy≥
;

1550 
BYTE
 
	m∑d
;

1551 
CARD16
 
Àngth
 
	mB16
;

1552 
Wödow
 
§cWid
 
	mB32
, 
d°Wid
 B32;

1553 
INT16
 
§cX
 
	mB16
, 
§cY
 B16;

1554 } 
	txTøn¶©eCo‹dsReq
;

1557 
CARD8
 
	mªqTy≥
;

1558 
BYTE
 
	m∑d
;

1559 
CARD16
 
Àngth
 
	mB16
;

1560 
Wödow
 
§cWid
 
	mB32
, 
d°Wid
 B32;

1561 
INT16
 
§cX
 
	mB16
, 
§cY
 B16;

1562 
CARD16
 
§cWidth
 
	mB16
, 
§cHeight
 B16;

1563 
INT16
 
d°X
 
	mB16
, 
d°Y
 B16;

1564 } 
	txW¨pPoöãrReq
;

1567 
CARD8
 
	mªqTy≥
;

1568 
CARD8
 
	mªvîtTo
;

1569 
CARD16
 
Àngth
 
	mB16
;

1570 
Wödow
 
focus
 
	mB32
;

1571 
Time
 
time
 
	mB32
;

1572 } 
	txSëI≈utFocusReq
;

1575 
CARD8
 
	mªqTy≥
;

1576 
BYTE
 
	m∑d
;

1577 
CARD16
 
Àngth
 
	mB16
;

1578 
F⁄t
 
fid
 
	mB32
;

1579 
CARD16
 
nbyãs
 
	mB16
;

1580 
BYTE
 
	m∑d1
, 
	m∑d2
;

1581 } 
	txO≥nF⁄tReq
;

1584 
CARD8
 
	mªqTy≥
;

1585 
BOOL
 
	moddLígth
;

1586 
CARD16
 
Àngth
 
	mB16
;

1587 
F⁄t
 
fid
 
	mB32
;

1588 } 
	txQuîyTextExã¡sReq
;

1591 
CARD8
 
	mªqTy≥
;

1592 
BYTE
 
	m∑d
;

1593 
CARD16
 
Àngth
 
	mB16
;

1594 
CARD16
 
maxNames
 
	mB16
;

1595 
CARD16
 
nbyãs
 
	mB16
;

1596 } 
	txLi°F⁄tsReq
;

1598 
xLi°F⁄tsReq
 
	txLi°F⁄tsWôhInfoReq
;

1601 
CARD8
 
	mªqTy≥
;

1602 
BYTE
 
	m∑d
;

1603 
CARD16
 
Àngth
 
	mB16
;

1604 
CARD16
 
nF⁄ts
 
	mB16
;

1605 
BYTE
 
	m∑d1
, 
	m∑d2
;

1606 } 
	txSëF⁄tP©hReq
;

1609 
CARD8
 
	mªqTy≥
;

1610 
CARD8
 
	mdïth
;

1611 
CARD16
 
Àngth
 
	mB16
;

1612 
Pixm≠
 
pid
 
	mB32
;

1613 
DøwabÀ
 
døwabÀ
 
	mB32
;

1614 
CARD16
 
width
 
	mB16
, 
height
 B16;

1615 } 
	txCª©ePixm≠Req
;

1618 
CARD8
 
	mªqTy≥
;

1619 
BYTE
 
	m∑d
;

1620 
CARD16
 
Àngth
 
	mB16
;

1621 
GC⁄ãxt
 
gc
 
	mB32
;

1622 
DøwabÀ
 
døwabÀ
 
	mB32
;

1623 
CARD32
 
mask
 
	mB32
;

1624 } 
	txCª©eGCReq
;

1627 
CARD8
 
	mªqTy≥
;

1628 
BYTE
 
	m∑d
;

1629 
CARD16
 
Àngth
 
	mB16
;

1630 
GC⁄ãxt
 
gc
 
	mB32
;

1631 
CARD32
 
mask
 
	mB32
;

1632 } 
	txCh™geGCReq
;

1635 
CARD8
 
	mªqTy≥
;

1636 
BYTE
 
	m∑d
;

1637 
CARD16
 
Àngth
 
	mB16
;

1638 
GC⁄ãxt
 
§cGC
 
	mB32
, 
d°GC
 B32;

1639 
CARD32
 
mask
 
	mB32
;

1640 } 
	txC›yGCReq
;

1643 
CARD8
 
	mªqTy≥
;

1644 
BYTE
 
	m∑d
;

1645 
CARD16
 
Àngth
 
	mB16
;

1646 
GC⁄ãxt
 
gc
 
	mB32
;

1647 
CARD16
 
dashOff£t
 
	mB16
;

1648 
CARD16
 
nDashes
 
	mB16
;

1649 } 
	txSëDashesReq
;

1652 
CARD8
 
	mªqTy≥
;

1653 
BYTE
 
	m‹dîög
;

1654 
CARD16
 
Àngth
 
	mB16
;

1655 
GC⁄ãxt
 
gc
 
	mB32
;

1656 
INT16
 
xOrigö
 
	mB16
, 
yOrigö
 B16;

1657 } 
	txSëClùRe˘™gÀsReq
;

1660 
CARD8
 
	mªqTy≥
;

1661 
BOOL
 
	mexposuªs
;

1662 
CARD16
 
Àngth
 
	mB16
;

1663 
Wödow
 
wödow
 
	mB32
;

1664 
INT16
 
x
 
	mB16
, 
y
 B16;

1665 
CARD16
 
width
 
	mB16
, 
height
 B16;

1666 } 
	txCÀ¨AªaReq
;

1669 
CARD8
 
	mªqTy≥
;

1670 
BYTE
 
	m∑d
;

1671 
CARD16
 
Àngth
 
	mB16
;

1672 
DøwabÀ
 
§cDøwabÀ
 
	mB32
, 
d°DøwabÀ
 B32;

1673 
GC⁄ãxt
 
gc
 
	mB32
;

1674 
INT16
 
§cX
 
	mB16
, 
§cY
 B16, 
d°X
 B16, 
d°Y
 B16;

1675 
CARD16
 
width
 
	mB16
, 
height
 B16;

1676 } 
	txC›yAªaReq
;

1679 
CARD8
 
	mªqTy≥
;

1680 
BYTE
 
	m∑d
;

1681 
CARD16
 
Àngth
 
	mB16
;

1682 
DøwabÀ
 
§cDøwabÀ
 
	mB32
, 
d°DøwabÀ
 B32;

1683 
GC⁄ãxt
 
gc
 
	mB32
;

1684 
INT16
 
§cX
 
	mB16
, 
§cY
 B16, 
d°X
 B16, 
d°Y
 B16;

1685 
CARD16
 
width
 
	mB16
, 
height
 B16;

1686 
CARD32
 
bôPœ√
 
	mB32
;

1687 } 
	txC›yPœ√Req
;

1690 
CARD8
 
	mªqTy≥
;

1691 
BYTE
 
	mco‹dMode
;

1692 
CARD16
 
Àngth
 
	mB16
;

1693 
DøwabÀ
 
døwabÀ
 
	mB32
;

1694 
GC⁄ãxt
 
gc
 
	mB32
;

1695 } 
	txPﬁyPoötReq
;

1697 
xPﬁyPoötReq
 
	txPﬁyLöeReq
;

1702 
CARD8
 
	mªqTy≥
;

1703 
BYTE
 
	m∑d
;

1704 
CARD16
 
Àngth
 
	mB16
;

1705 
DøwabÀ
 
døwabÀ
 
	mB32
;

1706 
GC⁄ãxt
 
gc
 
	mB32
;

1707 } 
	txPﬁySegmítReq
;

1709 
xPﬁySegmítReq
 
	txPﬁyArcReq
;

1710 
xPﬁySegmítReq
 
	txPﬁyRe˘™gÀReq
;

1711 
xPﬁySegmítReq
 
	txPﬁyFûlRe˘™gÀReq
;

1712 
xPﬁySegmítReq
 
	txPﬁyFûlArcReq
;

1714 
	s_FûlPﬁyReq
 {

1715 
CARD8
 
	mªqTy≥
;

1716 
BYTE
 
	m∑d
;

1717 
CARD16
 
Àngth
 
	mB16
;

1718 
DøwabÀ
 
døwabÀ
 
	mB32
;

1719 
GC⁄ãxt
 
gc
 
	mB32
;

1720 
BYTE
 
	msh≠e
;

1721 
BYTE
 
	mco‹dMode
;

1722 
CARD16
 
∑d1
 
	mB16
;

1723 } 
	txFûlPﬁyReq
;

1726 
	s_PutImageReq
 {

1727 
CARD8
 
	mªqTy≥
;

1728 
CARD8
 
	mf‹m©
;

1729 
CARD16
 
Àngth
 
	mB16
;

1730 
DøwabÀ
 
døwabÀ
 
	mB32
;

1731 
GC⁄ãxt
 
gc
 
	mB32
;

1732 
CARD16
 
width
 
	mB16
, 
height
 B16;

1733 
INT16
 
d°X
 
	mB16
, 
d°Y
 B16;

1734 
CARD8
 
	mÀ·Pad
;

1735 
CARD8
 
	mdïth
;

1736 
CARD16
 
∑d
 
	mB16
;

1737 } 
	txPutImageReq
;

1740 
CARD8
 
	mªqTy≥
;

1741 
CARD8
 
	mf‹m©
;

1742 
CARD16
 
Àngth
 
	mB16
;

1743 
DøwabÀ
 
døwabÀ
 
	mB32
;

1744 
INT16
 
x
 
	mB16
, 
y
 B16;

1745 
CARD16
 
width
 
	mB16
, 
height
 B16;

1746 
CARD32
 
∂™eMask
 
	mB32
;

1747 } 
	txGëImageReq
;

1752 
CARD8
 
	mªqTy≥
;

1753 
CARD8
 
	m∑d
;

1754 
CARD16
 
Àngth
 
	mB16
;

1755 
DøwabÀ
 
døwabÀ
 
	mB32
;

1756 
GC⁄ãxt
 
gc
 
	mB32
;

1757 
INT16
 
x
 
	mB16
, 
y
 B16;

1758 } 
	txPﬁyTextReq
;

1760 
xPﬁyTextReq
 
	txPﬁyText8Req
;

1761 
xPﬁyTextReq
 
	txPﬁyText16Req
;

1764 
CARD8
 
	mªqTy≥
;

1765 
BYTE
 
	mnCh¨s
;

1766 
CARD16
 
Àngth
 
	mB16
;

1767 
DøwabÀ
 
døwabÀ
 
	mB32
;

1768 
GC⁄ãxt
 
gc
 
	mB32
;

1769 
INT16
 
x
 
	mB16
, 
y
 B16;

1770 } 
	txImageTextReq
;

1772 
xImageTextReq
 
	txImageText8Req
;

1773 
xImageTextReq
 
	txImageText16Req
;

1776 
CARD8
 
	mªqTy≥
;

1777 
BYTE
 
	mÆloc
;

1778 
CARD16
 
Àngth
 
	mB16
;

1779 
Cﬁ‹m≠
 
mid
 
	mB32
;

1780 
Wödow
 
wödow
 
	mB32
;

1781 
VisuÆID
 
visuÆ
 
	mB32
;

1782 } 
	txCª©eCﬁ‹m≠Req
;

1785 
CARD8
 
	mªqTy≥
;

1786 
BYTE
 
	m∑d
;

1787 
CARD16
 
Àngth
 
	mB16
;

1788 
Cﬁ‹m≠
 
mid
 
	mB32
;

1789 
Cﬁ‹m≠
 
§cCm≠
 
	mB32
;

1790 } 
	txC›yCﬁ‹m≠AndFªeReq
;

1793 
CARD8
 
	mªqTy≥
;

1794 
BYTE
 
	m∑d
;

1795 
CARD16
 
Àngth
 
	mB16
;

1796 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1797 
CARD16
 
ªd
 
	mB16
, 
gªí
 B16, 
blue
 B16;

1798 
CARD16
 
∑d2
 
	mB16
;

1799 } 
	txAŒocCﬁ‹Req
;

1802 
CARD8
 
	mªqTy≥
;

1803 
BYTE
 
	m∑d
;

1804 
CARD16
 
Àngth
 
	mB16
;

1805 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1806 
CARD16
 
nbyãs
 
	mB16
;

1807 
BYTE
 
	m∑d1
, 
	m∑d2
;

1808 } 
	txAŒocNamedCﬁ‹Req
;

1811 
CARD8
 
	mªqTy≥
;

1812 
BOOL
 
	mc⁄tiguous
;

1813 
CARD16
 
Àngth
 
	mB16
;

1814 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1815 
CARD16
 
cﬁ‹s
 
	mB16
, 
∂™es
 B16;

1816 } 
	txAŒocCﬁ‹CñlsReq
;

1819 
CARD8
 
	mªqTy≥
;

1820 
BOOL
 
	mc⁄tiguous
;

1821 
CARD16
 
Àngth
 
	mB16
;

1822 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1823 
CARD16
 
cﬁ‹s
 
	mB16
, 
ªd
 B16, 
gªí
 B16, 
blue
 B16;

1824 } 
	txAŒocCﬁ‹Pœ√sReq
;

1827 
CARD8
 
	mªqTy≥
;

1828 
BYTE
 
	m∑d
;

1829 
CARD16
 
Àngth
 
	mB16
;

1830 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1831 
CARD32
 
∂™eMask
 
	mB32
;

1832 } 
	txFªeCﬁ‹sReq
;

1835 
CARD8
 
	mªqTy≥
;

1836 
BYTE
 
	m∑d
;

1837 
CARD16
 
Àngth
 
	mB16
;

1838 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1839 } 
	txSt‹eCﬁ‹sReq
;

1842 
CARD8
 
	mªqTy≥
;

1843 
CARD8
 
	mÊags
;

1844 
CARD16
 
Àngth
 
	mB16
;

1845 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1846 
CARD32
 
pixñ
 
	mB32
;

1847 
CARD16
 
nbyãs
 
	mB16
;

1848 
BYTE
 
	m∑d1
, 
	m∑d2
;

1849 } 
	txSt‹eNamedCﬁ‹Req
;

1852 
CARD8
 
	mªqTy≥
;

1853 
BYTE
 
	m∑d
;

1854 
CARD16
 
Àngth
 
	mB16
;

1855 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1856 } 
	txQuîyCﬁ‹sReq
;

1859 
CARD8
 
	mªqTy≥
;

1860 
BYTE
 
	m∑d
;

1861 
CARD16
 
Àngth
 
	mB16
;

1862 
Cﬁ‹m≠
 
cm≠
 
	mB32
;

1863 
CARD16
 
nbyãs
 
	mB16
;

1864 
BYTE
 
	m∑d1
, 
	m∑d2
;

1865 } 
	txLookupCﬁ‹Req
;

1868 
CARD8
 
	mªqTy≥
;

1869 
BYTE
 
	m∑d
;

1870 
CARD16
 
Àngth
 
	mB16
;

1871 
Curs‹
 
cid
 
	mB32
;

1872 
Pixm≠
 
sour˚
 
	mB32
, 
mask
 B32;

1873 
CARD16
 
f‹eRed
 
	mB16
, 
f‹eGªí
 B16, 
f‹eBlue
 B16;

1874 
CARD16
 
backRed
 
	mB16
, 
backGªí
 B16, 
backBlue
 B16;

1875 
CARD16
 
x
 
	mB16
, 
y
 B16;

1876 } 
	txCª©eCurs‹Req
;

1879 
CARD8
 
	mªqTy≥
;

1880 
BYTE
 
	m∑d
;

1881 
CARD16
 
Àngth
 
	mB16
;

1882 
Curs‹
 
cid
 
	mB32
;

1883 
F⁄t
 
sour˚
 
	mB32
, 
mask
 B32;

1884 
CARD16
 
sour˚Ch¨
 
	mB16
, 
maskCh¨
 B16;

1885 
CARD16
 
f‹eRed
 
	mB16
, 
f‹eGªí
 B16, 
f‹eBlue
 B16;

1886 
CARD16
 
backRed
 
	mB16
, 
backGªí
 B16, 
backBlue
 B16;

1887 } 
	txCª©eGlyphCurs‹Req
;

1890 
CARD8
 
	mªqTy≥
;

1891 
BYTE
 
	m∑d
;

1892 
CARD16
 
Àngth
 
	mB16
;

1893 
Curs‹
 
curs‹
 
	mB32
;

1894 
CARD16
 
f‹eRed
 
	mB16
, 
f‹eGªí
 B16, 
f‹eBlue
 B16;

1895 
CARD16
 
backRed
 
	mB16
, 
backGªí
 B16, 
backBlue
 B16;

1896 } 
	txRecﬁ‹Curs‹Req
;

1899 
CARD8
 
	mªqTy≥
;

1900 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

1901 
CARD8
 
	mc_˛ass
;

1903 
CARD8
 
	m˛ass
;

1905 
CARD16
 
Àngth
 
	mB16
;

1906 
DøwabÀ
 
døwabÀ
 
	mB32
;

1907 
CARD16
 
width
 
	mB16
, 
height
 B16;

1908 } 
	txQuîyBe°SizeReq
;

1911 
CARD8
 
	mªqTy≥
;

1912 
BYTE
 
	m∑d
;

1913 
CARD16
 
Àngth
 
	mB16
;

1914 
CARD16
 
nbyãs
 
	mB16
;

1915 
BYTE
 
	m∑d1
, 
	m∑d2
;

1916 } 
	txQuîyExãnsi⁄Req
;

1919 
CARD8
 
	mªqTy≥
;

1920 
CARD8
 
	mnumKeyPîModifõr
;

1921 
CARD16
 
Àngth
 
	mB16
;

1922 } 
	txSëModifõrM≠pögReq
;

1925 
CARD8
 
	mªqTy≥
;

1926 
CARD8
 
	mnE…s
;

1927 
CARD16
 
Àngth
 
	mB16
;

1928 } 
	txSëPoöãrM≠pögReq
;

1931 
CARD8
 
	mªqTy≥
;

1932 
BYTE
 
	m∑d
;

1933 
CARD16
 
Àngth
 
	mB16
;

1934 
KeyCode
 
	mfú°KeyCode
;

1935 
CARD8
 
	mcou¡
;

1936 
CARD16
 
∑d1
 
	mB16
;

1937 } 
	txGëKeybﬂrdM≠pögReq
;

1940 
CARD8
 
	mªqTy≥
;

1941 
CARD8
 
	mkeyCodes
;

1942 
CARD16
 
Àngth
 
	mB16
;

1943 
KeyCode
 
	mfú°KeyCode
;

1944 
CARD8
 
	mkeySymsPîKeyCode
;

1945 
CARD16
 
∑d1
 
	mB16
;

1946 } 
	txCh™geKeybﬂrdM≠pögReq
;

1949 
CARD8
 
	mªqTy≥
;

1950 
BYTE
 
	m∑d
;

1951 
CARD16
 
Àngth
 
	mB16
;

1952 
CARD32
 
mask
 
	mB32
;

1953 } 
	txCh™geKeybﬂrdC⁄åﬁReq
;

1956 
CARD8
 
	mªqTy≥
;

1957 
INT8
 
	m≥r˚¡
;

1958 
CARD16
 
Àngth
 
	mB16
;

1959 } 
	txBñlReq
;

1962 
CARD8
 
	mªqTy≥
;

1963 
BYTE
 
	m∑d
;

1964 
CARD16
 
Àngth
 
	mB16
;

1965 
INT16
 
ac˚lNum
 
	mB16
, 
ac˚lDíum
 B16;

1966 
INT16
 
thªshﬁd
 
	mB16
;

1967 
BOOL
 
	mdoAc˚l
, 
	mdoThªsh
;

1968 } 
	txCh™gePoöãrC⁄åﬁReq
;

1971 
CARD8
 
	mªqTy≥
;

1972 
BYTE
 
	m∑d
;

1973 
CARD16
 
Àngth
 
	mB16
;

1974 
INT16
 
timeout
 
	mB16
, 
öãrvÆ
 B16;

1975 
BYTE
 
	m¥e„rBœnk
, 
	mÆlowExpo£
;

1976 
CARD16
 
∑d2
 
	mB16
;

1977 } 
	txSëS¸ìnSavîReq
;

1980 
CARD8
 
	mªqTy≥
;

1981 
BYTE
 
	mmode
;

1982 
CARD16
 
Àngth
 
	mB16
;

1983 
CARD8
 
	mho°Famûy
;

1984 
BYTE
 
	m∑d
;

1985 
CARD16
 
ho°Lígth
 
	mB16
;

1986 } 
	txCh™geHo°sReq
;

1989 
CARD8
 
	mªqTy≥
;

1990 
BYTE
 
	m∑d
;

1991 
CARD16
 
Àngth
 
	mB16
;

1992 } 
	txLi°Ho°sReq
;

1995 
CARD8
 
	mªqTy≥
;

1996 
BYTE
 
	mmode
;

1997 
CARD16
 
Àngth
 
	mB16
;

1998 } 
	txCh™geModeReq
;

2000 
xCh™geModeReq
 
	txSëAc˚ssC⁄åﬁReq
;

2001 
xCh™geModeReq
 
	txSëClo£DownModeReq
;

2002 
xCh™geModeReq
 
	txF‹˚S¸ìnSavîReq
;

2005 
CARD8
 
	mªqTy≥
;

2006 
BYTE
 
	m∑d
;

2007 
CARD16
 
Àngth
 
	mB16
;

2008 
Wödow
 
wödow
 
	mB32
;

2009 
CARD16
 
nAtoms
 
	mB16
;

2010 
INT16
 
nPosôi⁄s
 
	mB16
;

2011 } 
	txRŸ©ePr›îtõsReq
;

2017 
	#X_Rïly
 1

	)

2018 
	#X_Eº‹
 0

	)

2022 
	#X_Cª©eWödow
 1

	)

2023 
	#X_Ch™geWödowAâribuãs
 2

	)

2024 
	#X_GëWödowAâribuãs
 3

	)

2025 
	#X_De°royWödow
 4

	)

2026 
	#X_De°roySubwödows
 5

	)

2027 
	#X_Ch™geSaveSë
 6

	)

2028 
	#X_Rï¨ítWödow
 7

	)

2029 
	#X_M≠Wödow
 8

	)

2030 
	#X_M≠Subwödows
 9

	)

2031 
	#X_Unm≠Wödow
 10

	)

2032 
	#X_Unm≠Subwödows
 11

	)

2033 
	#X_C⁄figuªWödow
 12

	)

2034 
	#X_CúcuœãWödow
 13

	)

2035 
	#X_GëGeomëry
 14

	)

2036 
	#X_QuîyTªe
 15

	)

2037 
	#X_I¡înAtom
 16

	)

2038 
	#X_GëAtomName
 17

	)

2039 
	#X_Ch™gePr›îty
 18

	)

2040 
	#X_DñëePr›îty
 19

	)

2041 
	#X_GëPr›îty
 20

	)

2042 
	#X_Li°Pr›îtõs
 21

	)

2043 
	#X_SëSñe˘i⁄Ow√r
 22

	)

2044 
	#X_GëSñe˘i⁄Ow√r
 23

	)

2045 
	#X_C⁄vîtSñe˘i⁄
 24

	)

2046 
	#X_SídEvít
 25

	)

2047 
	#X_GøbPoöãr
 26

	)

2048 
	#X_UngøbPoöãr
 27

	)

2049 
	#X_GøbBuâ⁄
 28

	)

2050 
	#X_UngøbBuâ⁄
 29

	)

2051 
	#X_Ch™geA˘ivePoöãrGøb
 30

	)

2052 
	#X_GøbKeybﬂrd
 31

	)

2053 
	#X_UngøbKeybﬂrd
 32

	)

2054 
	#X_GøbKey
 33

	)

2055 
	#X_UngøbKey
 34

	)

2056 
	#X_AŒowEvíts
 35

	)

2057 
	#X_GøbSîvî
 36

	)

2058 
	#X_UngøbSîvî
 37

	)

2059 
	#X_QuîyPoöãr
 38

	)

2060 
	#X_GëMŸi⁄Evíts
 39

	)

2061 
	#X_Tøn¶©eCo‹ds
 40

	)

2062 
	#X_W¨pPoöãr
 41

	)

2063 
	#X_SëI≈utFocus
 42

	)

2064 
	#X_GëI≈utFocus
 43

	)

2065 
	#X_QuîyKeym≠
 44

	)

2066 
	#X_O≥nF⁄t
 45

	)

2067 
	#X_Clo£F⁄t
 46

	)

2068 
	#X_QuîyF⁄t
 47

	)

2069 
	#X_QuîyTextExã¡s
 48

	)

2070 
	#X_Li°F⁄ts
 49

	)

2071 
	#X_Li°F⁄tsWôhInfo
 50

	)

2072 
	#X_SëF⁄tP©h
 51

	)

2073 
	#X_GëF⁄tP©h
 52

	)

2074 
	#X_Cª©ePixm≠
 53

	)

2075 
	#X_FªePixm≠
 54

	)

2076 
	#X_Cª©eGC
 55

	)

2077 
	#X_Ch™geGC
 56

	)

2078 
	#X_C›yGC
 57

	)

2079 
	#X_SëDashes
 58

	)

2080 
	#X_SëClùRe˘™gÀs
 59

	)

2081 
	#X_FªeGC
 60

	)

2082 
	#X_CÀ¨Aªa
 61

	)

2083 
	#X_C›yAªa
 62

	)

2084 
	#X_C›yPœ√
 63

	)

2085 
	#X_PﬁyPoöt
 64

	)

2086 
	#X_PﬁyLöe
 65

	)

2087 
	#X_PﬁySegmít
 66

	)

2088 
	#X_PﬁyRe˘™gÀ
 67

	)

2089 
	#X_PﬁyArc
 68

	)

2090 
	#X_FûlPﬁy
 69

	)

2091 
	#X_PﬁyFûlRe˘™gÀ
 70

	)

2092 
	#X_PﬁyFûlArc
 71

	)

2093 
	#X_PutImage
 72

	)

2094 
	#X_GëImage
 73

	)

2095 
	#X_PﬁyText8
 74

	)

2096 
	#X_PﬁyText16
 75

	)

2097 
	#X_ImageText8
 76

	)

2098 
	#X_ImageText16
 77

	)

2099 
	#X_Cª©eCﬁ‹m≠
 78

	)

2100 
	#X_FªeCﬁ‹m≠
 79

	)

2101 
	#X_C›yCﬁ‹m≠AndFªe
 80

	)

2102 
	#X_In°ÆlCﬁ‹m≠
 81

	)

2103 
	#X_Unö°ÆlCﬁ‹m≠
 82

	)

2104 
	#X_Li°In°ÆÀdCﬁ‹m≠s
 83

	)

2105 
	#X_AŒocCﬁ‹
 84

	)

2106 
	#X_AŒocNamedCﬁ‹
 85

	)

2107 
	#X_AŒocCﬁ‹Cñls
 86

	)

2108 
	#X_AŒocCﬁ‹Pœ√s
 87

	)

2109 
	#X_FªeCﬁ‹s
 88

	)

2110 
	#X_St‹eCﬁ‹s
 89

	)

2111 
	#X_St‹eNamedCﬁ‹
 90

	)

2112 
	#X_QuîyCﬁ‹s
 91

	)

2113 
	#X_LookupCﬁ‹
 92

	)

2114 
	#X_Cª©eCurs‹
 93

	)

2115 
	#X_Cª©eGlyphCurs‹
 94

	)

2116 
	#X_FªeCurs‹
 95

	)

2117 
	#X_Recﬁ‹Curs‹
 96

	)

2118 
	#X_QuîyBe°Size
 97

	)

2119 
	#X_QuîyExãnsi⁄
 98

	)

2120 
	#X_Li°Exãnsi⁄s
 99

	)

2121 
	#X_Ch™geKeybﬂrdM≠pög
 100

	)

2122 
	#X_GëKeybﬂrdM≠pög
 101

	)

2123 
	#X_Ch™geKeybﬂrdC⁄åﬁ
 102

	)

2124 
	#X_GëKeybﬂrdC⁄åﬁ
 103

	)

2125 
	#X_Bñl
 104

	)

2126 
	#X_Ch™gePoöãrC⁄åﬁ
 105

	)

2127 
	#X_GëPoöãrC⁄åﬁ
 106

	)

2128 
	#X_SëS¸ìnSavî
 107

	)

2129 
	#X_GëS¸ìnSavî
 108

	)

2130 
	#X_Ch™geHo°s
 109

	)

2131 
	#X_Li°Ho°s
 110

	)

2132 
	#X_SëAc˚ssC⁄åﬁ
 111

	)

2133 
	#X_SëClo£DownMode
 112

	)

2134 
	#X_KûlClõ¡
 113

	)

2135 
	#X_RŸ©ePr›îtõs
 114

	)

2136 
	#X_F‹˚S¸ìnSavî
 115

	)

2137 
	#X_SëPoöãrM≠pög
 116

	)

2138 
	#X_GëPoöãrM≠pög
 117

	)

2139 
	#X_SëModifõrM≠pög
 118

	)

2140 
	#X_GëModifõrM≠pög
 119

	)

2141 
	#X_NoO≥øti⁄
 127

	)

2144 #unde‡
Wödow


2145 #unde‡
DøwabÀ


2146 #unde‡
F⁄t


2147 #unde‡
Pixm≠


2148 #unde‡
Curs‹


2149 #unde‡
Cﬁ‹m≠


2150 #unde‡
GC⁄ãxt


2151 #unde‡
Atom


2152 #unde‡
VisuÆID


2153 #unde‡
Time


2154 #unde‡
KeyCode


2155 #unde‡
KeySym


	@/usr/include/X11/cursorfont.h

29 #i‚de‡
_X11_CURSORFONT_H_


30 
	#_X11_CURSORFONT_H_


	)

32 
	#XC_num_glyphs
 154

	)

33 
	#XC_X_curs‹
 0

	)

34 
	#XC_¨row
 2

	)

35 
	#XC_ba£d_¨row_down
 4

	)

36 
	#XC_ba£d_¨row_up
 6

	)

37 
	#XC_bﬂt
 8

	)

38 
	#XC_bogosôy
 10

	)

39 
	#XC_bŸtom_À·_c‹√r
 12

	)

40 
	#XC_bŸtom_right_c‹√r
 14

	)

41 
	#XC_bŸtom_side
 16

	)

42 
	#XC_bŸtom_ãe
 18

	)

43 
	#XC_box_•úÆ
 20

	)

44 
	#XC_˚¡î_±r
 22

	)

45 
	#XC_cú˛e
 24

	)

46 
	#XC_˛ock
 26

	)

47 
	#XC_cof„e_mug
 28

	)

48 
	#XC_¸oss
 30

	)

49 
	#XC_¸oss_ªvî£
 32

	)

50 
	#XC_¸osshaú
 34

	)

51 
	#XC_düm⁄d_¸oss
 36

	)

52 
	#XC_dŸ
 38

	)

53 
	#XC_dŸbox
 40

	)

54 
	#XC_doubÀ_¨row
 42

	)

55 
	#XC_dø·_œrge
 44

	)

56 
	#XC_dø·_smÆl
 46

	)

57 
	#XC_dø≥d_box
 48

	)

58 
	#XC_exch™ge
 50

	)

59 
	#XC_Êeur
 52

	)

60 
	#XC_gobbÀr
 54

	)

61 
	#XC_gumby
 56

	)

62 
	#XC_h™d1
 58

	)

63 
	#XC_h™d2
 60

	)

64 
	#XC_hóπ
 62

	)

65 
	#XC_ic⁄
 64

	)

66 
	#XC_ú⁄_¸oss
 66

	)

67 
	#XC_À·_±r
 68

	)

68 
	#XC_À·_side
 70

	)

69 
	#XC_À·_ãe
 72

	)

70 
	#XC_À·buâ⁄
 74

	)

71 
	#XC_Œ_™gÀ
 76

	)

72 
	#XC_Ã_™gÀ
 78

	)

73 
	#XC_m™
 80

	)

74 
	#XC_middÀbuâ⁄
 82

	)

75 
	#XC_mou£
 84

	)

76 
	#XC_≥ncû
 86

	)

77 
	#XC_pú©e
 88

	)

78 
	#XC_∂us
 90

	)

79 
	#XC_que°i⁄_¨row
 92

	)

80 
	#XC_right_±r
 94

	)

81 
	#XC_right_side
 96

	)

82 
	#XC_right_ãe
 98

	)

83 
	#XC_rightbuâ⁄
 100

	)

84 
	#XC_πl_logo
 102

	)

85 
	#XC_ßûbﬂt
 104

	)

86 
	#XC_sb_down_¨row
 106

	)

87 
	#XC_sb_h_doubÀ_¨row
 108

	)

88 
	#XC_sb_À·_¨row
 110

	)

89 
	#XC_sb_right_¨row
 112

	)

90 
	#XC_sb_up_¨row
 114

	)

91 
	#XC_sb_v_doubÀ_¨row
 116

	)

92 
	#XC_shuâÀ
 118

	)

93 
	#XC_sizög
 120

	)

94 
	#XC_•idî
 122

	)

95 
	#XC_•øyˇn
 124

	)

96 
	#XC_°¨
 126

	)

97 
	#XC_èrgë
 128

	)

98 
	#XC_t¸oss
 130

	)

99 
	#XC_t›_À·_¨row
 132

	)

100 
	#XC_t›_À·_c‹√r
 134

	)

101 
	#XC_t›_right_c‹√r
 136

	)

102 
	#XC_t›_side
 138

	)

103 
	#XC_t›_ãe
 140

	)

104 
	#XC_åek
 142

	)

105 
	#XC_ul_™gÀ
 144

	)

106 
	#XC_umbªŒa
 146

	)

107 
	#XC_ur_™gÀ
 148

	)

108 
	#XC_w©ch
 150

	)

109 
	#XC_xãrm
 152

	)

	@/usr/include/X11/keysymdef.h

115 
	#XK_VoidSymbﬁ
 0xfffff‡

	)

117 #ifde‡
XK_MISCELLANY


124 
	#XK_BackS∑˚
 0xff08

	)

125 
	#XK_Tab
 0xff09

	)

126 
	#XK_Löe„ed
 0xff0®

	)

127 
	#XK_CÀ¨
 0xff0b

	)

128 
	#XK_Rëu∫
 0xff0d

	)

129 
	#XK_Pau£
 0xff13

	)

130 
	#XK_S¸ﬁl_Lock
 0xff14

	)

131 
	#XK_Sys_Req
 0xff15

	)

132 
	#XK_Esˇ≥
 0xff1b

	)

133 
	#XK_Dñëe
 0xfff‡

	)

139 
	#XK_Mu…i_key
 0xff20

	)

140 
	#XK_Codeöput
 0xff37

	)

141 
	#XK_SögÀC™did©e
 0xff3c

	)

142 
	#XK_Mu…ùÀC™did©e
 0xff3d

	)

143 
	#XK_PªviousC™did©e
 0xff3e

	)

147 
	#XK_K™ji
 0xff21

	)

148 
	#XK_Muhík™
 0xff22

	)

149 
	#XK_Hík™_Mode
 0xff23

	)

150 
	#XK_Hík™
 0xff23

	)

151 
	#XK_Romaji
 0xff24

	)

152 
	#XK_Húag™a
 0xff25

	)

153 
	#XK_K©ak™a
 0xff26

	)

154 
	#XK_Húag™a_K©ak™a
 0xff27

	)

155 
	#XK_Zíkaku
 0xff28

	)

156 
	#XK_H™kaku
 0xff29

	)

157 
	#XK_Zíkaku_H™kaku
 0xff2®

	)

158 
	#XK_Touroku
 0xff2b

	)

159 
	#XK_Massyo
 0xff2¯

	)

160 
	#XK_K™a_Lock
 0xff2d

	)

161 
	#XK_K™a_Shi·
 0xff2ê

	)

162 
	#XK_Eisu_Shi·
 0xff2‡

	)

163 
	#XK_Eisu_toggÀ
 0xff30

	)

164 
	#XK_K™ji_B™gou
 0xff37

	)

165 
	#XK_Zí_Koho
 0xff3d

	)

166 
	#XK_M´_Koho
 0xff3ê

	)

172 
	#XK_Home
 0xff50

	)

173 
	#XK_Le·
 0xff51

	)

174 
	#XK_Up
 0xff52

	)

175 
	#XK_Right
 0xff53

	)

176 
	#XK_Down
 0xff54

	)

177 
	#XK_Pri‹
 0xff55

	)

178 
	#XK_Page_Up
 0xff55

	)

179 
	#XK_Next
 0xff56

	)

180 
	#XK_Page_Down
 0xff56

	)

181 
	#XK_End
 0xff57

	)

182 
	#XK_Begö
 0xff58

	)

187 
	#XK_Sñe˘
 0xff60

	)

188 
	#XK_Pröt
 0xff61

	)

189 
	#XK_Execuã
 0xff62

	)

190 
	#XK_In£π
 0xff63

	)

191 
	#XK_Undo
 0xff65

	)

192 
	#XK_Redo
 0xff66

	)

193 
	#XK_Míu
 0xff67

	)

194 
	#XK_Föd
 0xff68

	)

195 
	#XK_C™˚l
 0xff69

	)

196 
	#XK_Hñp
 0xff6®

	)

197 
	#XK_Bªak
 0xff6b

	)

198 
	#XK_Mode_swôch
 0xff7ê

	)

199 
	#XK_s¸ùt_swôch
 0xff7ê

	)

200 
	#XK_Num_Lock
 0xff7f

	)

204 
	#XK_KP_S∑˚
 0xff80

	)

205 
	#XK_KP_Tab
 0xff89

	)

206 
	#XK_KP_E¡î
 0xff8d

	)

207 
	#XK_KP_F1
 0xff91

	)

208 
	#XK_KP_F2
 0xff92

	)

209 
	#XK_KP_F3
 0xff93

	)

210 
	#XK_KP_F4
 0xff94

	)

211 
	#XK_KP_Home
 0xff95

	)

212 
	#XK_KP_Le·
 0xff96

	)

213 
	#XK_KP_Up
 0xff97

	)

214 
	#XK_KP_Right
 0xff98

	)

215 
	#XK_KP_Down
 0xff99

	)

216 
	#XK_KP_Pri‹
 0xff9a

	)

217 
	#XK_KP_Page_Up
 0xff9a

	)

218 
	#XK_KP_Next
 0xff9b

	)

219 
	#XK_KP_Page_Down
 0xff9b

	)

220 
	#XK_KP_End
 0xff9c

	)

221 
	#XK_KP_Begö
 0xff9d

	)

222 
	#XK_KP_In£π
 0xff9e

	)

223 
	#XK_KP_Dñëe
 0xff9f

	)

224 
	#XK_KP_EquÆ
 0xffbd

	)

225 
	#XK_KP_Mu…ùly
 0xfÁa

	)

226 
	#XK_KP_Add
 0xfÁb

	)

227 
	#XK_KP_Sï¨©‹
 0xfÁ¯

	)

228 
	#XK_KP_Subåa˘
 0xfÁd

	)

229 
	#XK_KP_DecimÆ
 0xfÁe

	)

230 
	#XK_KP_Divide
 0xfÁf

	)

232 
	#XK_KP_0
 0xffb0

	)

233 
	#XK_KP_1
 0xffb1

	)

234 
	#XK_KP_2
 0xffb2

	)

235 
	#XK_KP_3
 0xffb3

	)

236 
	#XK_KP_4
 0xffb4

	)

237 
	#XK_KP_5
 0xffb5

	)

238 
	#XK_KP_6
 0xffb6

	)

239 
	#XK_KP_7
 0xffb7

	)

240 
	#XK_KP_8
 0xffb8

	)

241 
	#XK_KP_9
 0xffb9

	)

252 
	#XK_F1
 0xffbe

	)

253 
	#XK_F2
 0xffbf

	)

254 
	#XK_F3
 0xffc0

	)

255 
	#XK_F4
 0xffc1

	)

256 
	#XK_F5
 0xffc2

	)

257 
	#XK_F6
 0xffc3

	)

258 
	#XK_F7
 0xffc4

	)

259 
	#XK_F8
 0xffc5

	)

260 
	#XK_F9
 0xffc6

	)

261 
	#XK_F10
 0xffc7

	)

262 
	#XK_F11
 0xffc8

	)

263 
	#XK_L1
 0xffc8

	)

264 
	#XK_F12
 0xffc9

	)

265 
	#XK_L2
 0xffc9

	)

266 
	#XK_F13
 0xffˇ

	)

267 
	#XK_L3
 0xffˇ

	)

268 
	#XK_F14
 0xffcb

	)

269 
	#XK_L4
 0xffcb

	)

270 
	#XK_F15
 0xffcc

	)

271 
	#XK_L5
 0xffcc

	)

272 
	#XK_F16
 0xffcd

	)

273 
	#XK_L6
 0xffcd

	)

274 
	#XK_F17
 0xff˚

	)

275 
	#XK_L7
 0xff˚

	)

276 
	#XK_F18
 0xffcf

	)

277 
	#XK_L8
 0xffcf

	)

278 
	#XK_F19
 0xffd0

	)

279 
	#XK_L9
 0xffd0

	)

280 
	#XK_F20
 0xffd1

	)

281 
	#XK_L10
 0xffd1

	)

282 
	#XK_F21
 0xffd2

	)

283 
	#XK_R1
 0xffd2

	)

284 
	#XK_F22
 0xffd3

	)

285 
	#XK_R2
 0xffd3

	)

286 
	#XK_F23
 0xffd4

	)

287 
	#XK_R3
 0xffd4

	)

288 
	#XK_F24
 0xffd5

	)

289 
	#XK_R4
 0xffd5

	)

290 
	#XK_F25
 0xffd6

	)

291 
	#XK_R5
 0xffd6

	)

292 
	#XK_F26
 0xffd7

	)

293 
	#XK_R6
 0xffd7

	)

294 
	#XK_F27
 0xffd8

	)

295 
	#XK_R7
 0xffd8

	)

296 
	#XK_F28
 0xffd9

	)

297 
	#XK_R8
 0xffd9

	)

298 
	#XK_F29
 0xffda

	)

299 
	#XK_R9
 0xffda

	)

300 
	#XK_F30
 0xffdb

	)

301 
	#XK_R10
 0xffdb

	)

302 
	#XK_F31
 0xffdc

	)

303 
	#XK_R11
 0xffdc

	)

304 
	#XK_F32
 0xffdd

	)

305 
	#XK_R12
 0xffdd

	)

306 
	#XK_F33
 0xffde

	)

307 
	#XK_R13
 0xffde

	)

308 
	#XK_F34
 0xffdf

	)

309 
	#XK_R14
 0xffdf

	)

310 
	#XK_F35
 0xf„0

	)

311 
	#XK_R15
 0xf„0

	)

315 
	#XK_Shi·_L
 0xf„1

	)

316 
	#XK_Shi·_R
 0xf„2

	)

317 
	#XK_C⁄åﬁ_L
 0xf„3

	)

318 
	#XK_C⁄åﬁ_R
 0xf„4

	)

319 
	#XK_C≠s_Lock
 0xf„5

	)

320 
	#XK_Shi·_Lock
 0xf„6

	)

322 
	#XK_Mëa_L
 0xf„7

	)

323 
	#XK_Mëa_R
 0xf„8

	)

324 
	#XK_A…_L
 0xf„9

	)

325 
	#XK_A…_R
 0xf„®

	)

326 
	#XK_Su≥r_L
 0xf„b

	)

327 
	#XK_Su≥r_R
 0xf„¯

	)

328 
	#XK_Hy≥r_L
 0xf„d

	)

329 
	#XK_Hy≥r_R
 0xf„ê

	)

338 #ifde‡
XK_XKB_KEYS


339 
	#XK_ISO_Lock
 0x„01

	)

340 
	#XK_ISO_Levñ2_L©ch
 0x„02

	)

341 
	#XK_ISO_Levñ3_Shi·
 0x„03

	)

342 
	#XK_ISO_Levñ3_L©ch
 0x„04

	)

343 
	#XK_ISO_Levñ3_Lock
 0x„05

	)

344 
	#XK_ISO_Levñ5_Shi·
 0x„11

	)

345 
	#XK_ISO_Levñ5_L©ch
 0x„12

	)

346 
	#XK_ISO_Levñ5_Lock
 0x„13

	)

347 
	#XK_ISO_Group_Shi·
 0xff7ê

	)

348 
	#XK_ISO_Group_L©ch
 0x„06

	)

349 
	#XK_ISO_Group_Lock
 0x„07

	)

350 
	#XK_ISO_Next_Group
 0x„08

	)

351 
	#XK_ISO_Next_Group_Lock
 0x„09

	)

352 
	#XK_ISO_Pªv_Group
 0x„0a

	)

353 
	#XK_ISO_Pªv_Group_Lock
 0x„0b

	)

354 
	#XK_ISO_Fú°_Group
 0x„0c

	)

355 
	#XK_ISO_Fú°_Group_Lock
 0x„0d

	)

356 
	#XK_ISO_La°_Group
 0x„0e

	)

357 
	#XK_ISO_La°_Group_Lock
 0x„0f

	)

359 
	#XK_ISO_Le·_Tab
 0x„20

	)

360 
	#XK_ISO_Move_Löe_Up
 0x„21

	)

361 
	#XK_ISO_Move_Löe_Down
 0x„22

	)

362 
	#XK_ISO_P¨tül_Löe_Up
 0x„23

	)

363 
	#XK_ISO_P¨tül_Löe_Down
 0x„24

	)

364 
	#XK_ISO_P¨tül_S∑˚_Le·
 0x„25

	)

365 
	#XK_ISO_P¨tül_S∑˚_Right
 0x„26

	)

366 
	#XK_ISO_Së_M¨gö_Le·
 0x„27

	)

367 
	#XK_ISO_Së_M¨gö_Right
 0x„28

	)

368 
	#XK_ISO_Rñó£_M¨gö_Le·
 0x„29

	)

369 
	#XK_ISO_Rñó£_M¨gö_Right
 0x„2a

	)

370 
	#XK_ISO_Rñó£_BŸh_M¨gös
 0x„2b

	)

371 
	#XK_ISO_Fa°_Curs‹_Le·
 0x„2c

	)

372 
	#XK_ISO_Fa°_Curs‹_Right
 0x„2d

	)

373 
	#XK_ISO_Fa°_Curs‹_Up
 0x„2e

	)

374 
	#XK_ISO_Fa°_Curs‹_Down
 0x„2f

	)

375 
	#XK_ISO_C⁄töuous_Undîlöe
 0x„30

	)

376 
	#XK_ISO_Disc⁄töuous_Undîlöe
 0x„31

	)

377 
	#XK_ISO_Emphasize
 0x„32

	)

378 
	#XK_ISO_Cíãr_Obje˘
 0x„33

	)

379 
	#XK_ISO_E¡î
 0x„34

	)

381 
	#XK_dód_gøve
 0x„50

	)

382 
	#XK_dód_acuã
 0x„51

	)

383 
	#XK_dód_cúcumÊex
 0x„52

	)

384 
	#XK_dód_tûde
 0x„53

	)

385 
	#XK_dód_≥ri•omíi
 0x„53

	)

386 
	#XK_dód_ma¸⁄
 0x„54

	)

387 
	#XK_dód_bªve
 0x„55

	)

388 
	#XK_dód_abovedŸ
 0x„56

	)

389 
	#XK_dód_düîesis
 0x„57

	)

390 
	#XK_dód_abovîög
 0x„58

	)

391 
	#XK_dód_doubÀacuã
 0x„59

	)

392 
	#XK_dód_ˇr⁄
 0x„5a

	)

393 
	#XK_dód_˚dûœ
 0x„5b

	)

394 
	#XK_dód_og⁄ek
 0x„5c

	)

395 
	#XK_dód_iŸa
 0x„5d

	)

396 
	#XK_dód_voi˚d_sound
 0x„5e

	)

397 
	#XK_dód_£mivoi˚d_sound
 0x„5f

	)

398 
	#XK_dód_bñowdŸ
 0x„60

	)

399 
	#XK_dód_hook
 0x„61

	)

400 
	#XK_dód_h‹n
 0x„62

	)

401 
	#XK_dód_°roke
 0x„63

	)

402 
	#XK_dód_abovecomma
 0x„64

	)

403 
	#XK_dód_psûi
 0x„64

	)

404 
	#XK_dód_abovîevî£dcomma
 0x„65

	)

405 
	#XK_dód_dasü
 0x„65

	)

406 
	#XK_dód_doubÀgøve
 0x„66

	)

407 
	#XK_dód_bñowrög
 0x„67

	)

408 
	#XK_dód_bñowma¸⁄
 0x„68

	)

409 
	#XK_dód_bñowcúcumÊex
 0x„69

	)

410 
	#XK_dód_bñowtûde
 0x„6a

	)

411 
	#XK_dód_bñowbªve
 0x„6b

	)

412 
	#XK_dód_bñowdüîesis
 0x„6c

	)

413 
	#XK_dód_övîãdbªve
 0x„6d

	)

414 
	#XK_dód_bñowcomma
 0x„6e

	)

415 
	#XK_dód_cuºícy
 0x„6f

	)

418 
	#XK_dód_lowlöe
 0x„90

	)

419 
	#XK_dód_abovevîtiˇŒöe
 0x„91

	)

420 
	#XK_dód_bñowvîtiˇŒöe
 0x„92

	)

421 
	#XK_dód_l⁄gsﬁidusovîœy
 0x„93

	)

424 
	#XK_dód_a
 0x„80

	)

425 
	#XK_dód_A
 0x„81

	)

426 
	#XK_dód_e
 0x„82

	)

427 
	#XK_dód_E
 0x„83

	)

428 
	#XK_dód_i
 0x„84

	)

429 
	#XK_dód_I
 0x„85

	)

430 
	#XK_dód_o
 0x„86

	)

431 
	#XK_dód_O
 0x„87

	)

432 
	#XK_dód_u
 0x„88

	)

433 
	#XK_dód_U
 0x„89

	)

434 
	#XK_dód_smÆl_schwa
 0x„8a

	)

435 
	#XK_dód_ˇpôÆ_schwa
 0x„8b

	)

437 
	#XK_dód_gªek
 0x„8c

	)

439 
	#XK_Fú°_VútuÆ_S¸ìn
 0x„d0

	)

440 
	#XK_Pªv_VútuÆ_S¸ìn
 0x„d1

	)

441 
	#XK_Next_VútuÆ_S¸ìn
 0x„d2

	)

442 
	#XK_La°_VútuÆ_S¸ìn
 0x„d4

	)

443 
	#XK_Tîmö©e_Sîvî
 0x„d5

	)

445 
	#XK_Ac˚ssX_E«bÀ
 0x„70

	)

446 
	#XK_Ac˚ssX_Fìdback_E«bÀ
 0x„71

	)

447 
	#XK_RïótKeys_E«bÀ
 0x„72

	)

448 
	#XK_SlowKeys_E«bÀ
 0x„73

	)

449 
	#XK_Boun˚Keys_E«bÀ
 0x„74

	)

450 
	#XK_StickyKeys_E«bÀ
 0x„75

	)

451 
	#XK_Mou£Keys_E«bÀ
 0x„76

	)

452 
	#XK_Mou£Keys_Ac˚l_E«bÀ
 0x„77

	)

453 
	#XK_Ovîœy1_E«bÀ
 0x„78

	)

454 
	#XK_Ovîœy2_E«bÀ
 0x„79

	)

455 
	#XK_AudibÀBñl_E«bÀ
 0x„7a

	)

457 
	#XK_Poöãr_Le·
 0x„e0

	)

458 
	#XK_Poöãr_Right
 0x„e1

	)

459 
	#XK_Poöãr_Up
 0x„e2

	)

460 
	#XK_Poöãr_Down
 0x„e3

	)

461 
	#XK_Poöãr_UpLe·
 0x„e4

	)

462 
	#XK_Poöãr_UpRight
 0x„e5

	)

463 
	#XK_Poöãr_DownLe·
 0x„e6

	)

464 
	#XK_Poöãr_DownRight
 0x„e7

	)

465 
	#XK_Poöãr_Buâ⁄_DÊt
 0x„e8

	)

466 
	#XK_Poöãr_Buâ⁄1
 0x„e9

	)

467 
	#XK_Poöãr_Buâ⁄2
 0x„ó

	)

468 
	#XK_Poöãr_Buâ⁄3
 0x„eb

	)

469 
	#XK_Poöãr_Buâ⁄4
 0x„ec

	)

470 
	#XK_Poöãr_Buâ⁄5
 0x„ed

	)

471 
	#XK_Poöãr_DblClick_DÊt
 0x„ì

	)

472 
	#XK_Poöãr_DblClick1
 0x„ef

	)

473 
	#XK_Poöãr_DblClick2
 0x„f0

	)

474 
	#XK_Poöãr_DblClick3
 0x„f1

	)

475 
	#XK_Poöãr_DblClick4
 0x„f2

	)

476 
	#XK_Poöãr_DblClick5
 0x„f3

	)

477 
	#XK_Poöãr_Døg_DÊt
 0x„f4

	)

478 
	#XK_Poöãr_Døg1
 0x„f5

	)

479 
	#XK_Poöãr_Døg2
 0x„f6

	)

480 
	#XK_Poöãr_Døg3
 0x„f7

	)

481 
	#XK_Poöãr_Døg4
 0x„f8

	)

482 
	#XK_Poöãr_Døg5
 0x„fd

	)

484 
	#XK_Poöãr_E«bÀKeys
 0x„f9

	)

485 
	#XK_Poöãr_Ac˚Àøã
 0x„Á

	)

486 
	#XK_Poöãr_DÊtBäNext
 0x„fb

	)

487 
	#XK_Poöãr_DÊtBäPªv
 0x„fc

	)

491 
	#XK_ch
 0x„a0

	)

492 
	#XK_Ch
 0x„a1

	)

493 
	#XK_CH
 0x„a2

	)

494 
	#XK_c_h
 0x„a3

	)

495 
	#XK_C_h
 0x„a4

	)

496 
	#XK_C_H
 0x„a5

	)

505 #ifde‡
XK_3270


506 
	#XK_3270_Du∂iˇã
 0xfd01

	)

507 
	#XK_3270_FõldM¨k
 0xfd02

	)

508 
	#XK_3270_Right2
 0xfd03

	)

509 
	#XK_3270_Le·2
 0xfd04

	)

510 
	#XK_3270_BackTab
 0xfd05

	)

511 
	#XK_3270_Eø£EOF
 0xfd06

	)

512 
	#XK_3270_Eø£I≈ut
 0xfd07

	)

513 
	#XK_3270_Re£t
 0xfd08

	)

514 
	#XK_3270_Quô
 0xfd09

	)

515 
	#XK_3270_PA1
 0xfd0a

	)

516 
	#XK_3270_PA2
 0xfd0b

	)

517 
	#XK_3270_PA3
 0xfd0c

	)

518 
	#XK_3270_Te°
 0xfd0d

	)

519 
	#XK_3270_Aân
 0xfd0e

	)

520 
	#XK_3270_Curs‹Blök
 0xfd0f

	)

521 
	#XK_3270_A…Curs‹
 0xfd10

	)

522 
	#XK_3270_KeyClick
 0xfd11

	)

523 
	#XK_3270_Jump
 0xfd12

	)

524 
	#XK_3270_Idít
 0xfd13

	)

525 
	#XK_3270_RuÀ
 0xfd14

	)

526 
	#XK_3270_C›y
 0xfd15

	)

527 
	#XK_3270_Pœy
 0xfd16

	)

528 
	#XK_3270_Sëup
 0xfd17

	)

529 
	#XK_3270_Rec‹d
 0xfd18

	)

530 
	#XK_3270_Ch™geS¸ìn
 0xfd19

	)

531 
	#XK_3270_DñëeW‹d
 0xfd1a

	)

532 
	#XK_3270_ExSñe˘
 0xfd1b

	)

533 
	#XK_3270_Curs‹Sñe˘
 0xfd1c

	)

534 
	#XK_3270_PrötS¸ìn
 0xfd1d

	)

535 
	#XK_3270_E¡î
 0xfd1e

	)

543 #ifde‡
XK_LATIN1


544 
	#XK_•a˚
 0x0020

	)

545 
	#XK_ex˛am
 0x0021

	)

546 
	#XK_quŸedbl
 0x0022

	)

547 
	#XK_numbîsign
 0x0023

	)

548 
	#XK_dﬁœr
 0x0024

	)

549 
	#XK_≥r˚¡
 0x0025

	)

550 
	#XK_am≥rßnd
 0x0026

	)

551 
	#XK_≠o°r›he
 0x0027

	)

552 
	#XK_quŸîight
 0x0027

	)

553 
	#XK_∑ª∆e·
 0x0028

	)

554 
	#XK_∑ªƒight
 0x0029

	)

555 
	#XK_a°îisk
 0x002®

	)

556 
	#XK_∂us
 0x002b

	)

557 
	#XK_comma
 0x002¯

	)

558 
	#XK_möus
 0x002d

	)

559 
	#XK_≥riod
 0x002ê

	)

560 
	#XK_¶ash
 0x002‡

	)

561 
	#XK_0
 0x0030

	)

562 
	#XK_1
 0x0031

	)

563 
	#XK_2
 0x0032

	)

564 
	#XK_3
 0x0033

	)

565 
	#XK_4
 0x0034

	)

566 
	#XK_5
 0x0035

	)

567 
	#XK_6
 0x0036

	)

568 
	#XK_7
 0x0037

	)

569 
	#XK_8
 0x0038

	)

570 
	#XK_9
 0x0039

	)

571 
	#XK_cﬁ⁄
 0x003®

	)

572 
	#XK_£micﬁ⁄
 0x003b

	)

573 
	#XK_Àss
 0x003¯

	)

574 
	#XK_equÆ
 0x003d

	)

575 
	#XK_gª©î
 0x003ê

	)

576 
	#XK_que°i⁄
 0x003‡

	)

577 
	#XK_©
 0x0040

	)

578 
	#XK_A
 0x0041

	)

579 
	#XK_B
 0x0042

	)

580 
	#XK_C
 0x0043

	)

581 
	#XK_D
 0x0044

	)

582 
	#XK_E
 0x0045

	)

583 
	#XK_F
 0x0046

	)

584 
	#XK_G
 0x0047

	)

585 
	#XK_H
 0x0048

	)

586 
	#XK_I
 0x0049

	)

587 
	#XK_J
 0x004®

	)

588 
	#XK_K
 0x004b

	)

589 
	#XK_L
 0x004¯

	)

590 
	#XK_M
 0x004d

	)

591 
	#XK_N
 0x004ê

	)

592 
	#XK_O
 0x004‡

	)

593 
	#XK_P
 0x0050

	)

594 
	#XK_Q
 0x0051

	)

595 
	#XK_R
 0x0052

	)

596 
	#XK_S
 0x0053

	)

597 
	#XK_T
 0x0054

	)

598 
	#XK_U
 0x0055

	)

599 
	#XK_V
 0x0056

	)

600 
	#XK_W
 0x0057

	)

601 
	#XK_X
 0x0058

	)

602 
	#XK_Y
 0x0059

	)

603 
	#XK_Z
 0x005®

	)

604 
	#XK_bøckëÀ·
 0x005b

	)

605 
	#XK_back¶ash
 0x005¯

	)

606 
	#XK_bøckëright
 0x005d

	)

607 
	#XK_asciicúcum
 0x005ê

	)

608 
	#XK_undîsc‹e
 0x005‡

	)

609 
	#XK_gøve
 0x0060

	)

610 
	#XK_quŸñe·
 0x0060

	)

611 
	#XK_a
 0x0061

	)

612 
	#XK_b
 0x0062

	)

613 
	#XK_c
 0x0063

	)

614 
	#XK_d
 0x0064

	)

615 
	#XK_e
 0x0065

	)

616 
	#XK_f
 0x0066

	)

617 
	#XK_g
 0x0067

	)

618 
	#XK_h
 0x0068

	)

619 
	#XK_i
 0x0069

	)

620 
	#XK_j
 0x006®

	)

621 
	#XK_k
 0x006b

	)

622 
	#XK_l
 0x006¯

	)

623 
	#XK_m
 0x006d

	)

624 
	#XK_n
 0x006ê

	)

625 
	#XK_o
 0x006‡

	)

626 
	#XK_p
 0x0070

	)

627 
	#XK_q
 0x0071

	)

628 
	#XK_r
 0x0072

	)

629 
	#XK_s
 0x0073

	)

630 
	#XK_t
 0x0074

	)

631 
	#XK_u
 0x0075

	)

632 
	#XK_v
 0x0076

	)

633 
	#XK_w
 0x0077

	)

634 
	#XK_x
 0x0078

	)

635 
	#XK_y
 0x0079

	)

636 
	#XK_z
 0x007®

	)

637 
	#XK_bø˚À·
 0x007b

	)

638 
	#XK_b¨
 0x007¯

	)

639 
	#XK_bø˚right
 0x007d

	)

640 
	#XK_asciôûde
 0x007ê

	)

642 
	#XK_nobªak•a˚
 0x00a0

	)

643 
	#XK_ex˛amdown
 0x00a1

	)

644 
	#XK_˚¡
 0x00a2

	)

645 
	#XK_°îlög
 0x00a3

	)

646 
	#XK_cuºícy
 0x00a4

	)

647 
	#XK_yí
 0x00a5

	)

648 
	#XK_brokíb¨
 0x00a6

	)

649 
	#XK_£˘i⁄
 0x00a7

	)

650 
	#XK_düîesis
 0x00a8

	)

651 
	#XK_c›yright
 0x00a9

	)

652 
	#XK_‹d„mööe
 0x00Ø

	)

653 
	#XK_guûÀmŸÀ·
 0x00ab

	)

654 
	#XK_nŸsign
 0x00a¯

	)

655 
	#XK_hyphí
 0x00ad

	)

656 
	#XK_ªgi°îed
 0x00´

	)

657 
	#XK_ma¸⁄
 0x00a‡

	)

658 
	#XK_degªe
 0x00b0

	)

659 
	#XK_∂usmöus
 0x00b1

	)

660 
	#XK_twosu≥ri‹
 0x00b2

	)

661 
	#XK_thªesu≥ri‹
 0x00b3

	)

662 
	#XK_acuã
 0x00b4

	)

663 
	#XK_mu
 0x00b5

	)

664 
	#XK_∑øgøph
 0x00b6

	)

665 
	#XK_≥riod˚¡îed
 0x00b7

	)

666 
	#XK_˚dûœ
 0x00b8

	)

667 
	#XK_⁄esu≥ri‹
 0x00b9

	)

668 
	#XK_masculöe
 0x00b®

	)

669 
	#XK_guûÀmŸright
 0x00bb

	)

670 
	#XK_⁄equ¨ãr
 0x00b¯

	)

671 
	#XK_⁄ehÆf
 0x00bd

	)

672 
	#XK_thªequ¨ãrs
 0x00bê

	)

673 
	#XK_que°i⁄down
 0x00b‡

	)

674 
	#XK_Agøve
 0x00c0

	)

675 
	#XK_Aacuã
 0x00c1

	)

676 
	#XK_AcúcumÊex
 0x00c2

	)

677 
	#XK_Atûde
 0x00c3

	)

678 
	#XK_Adüîesis
 0x00c4

	)

679 
	#XK_Arög
 0x00c5

	)

680 
	#XK_AE
 0x00c6

	)

681 
	#XK_C˚dûœ
 0x00c7

	)

682 
	#XK_Egøve
 0x00c8

	)

683 
	#XK_Eacuã
 0x00c9

	)

684 
	#XK_EcúcumÊex
 0x00ˇ

	)

685 
	#XK_Edüîesis
 0x00cb

	)

686 
	#XK_Igøve
 0x00c¯

	)

687 
	#XK_Iacuã
 0x00cd

	)

688 
	#XK_IcúcumÊex
 0x00˚

	)

689 
	#XK_Idüîesis
 0x00c‡

	)

690 
	#XK_ETH
 0x00d0

	)

691 
	#XK_Eth
 0x00d0

	)

692 
	#XK_Ntûde
 0x00d1

	)

693 
	#XK_Ogøve
 0x00d2

	)

694 
	#XK_Oacuã
 0x00d3

	)

695 
	#XK_OcúcumÊex
 0x00d4

	)

696 
	#XK_Otûde
 0x00d5

	)

697 
	#XK_Odüîesis
 0x00d6

	)

698 
	#XK_mu…ùly
 0x00d7

	)

699 
	#XK_O¶ash
 0x00d8

	)

700 
	#XK_Ooblique
 0x00d8

	)

701 
	#XK_Ugøve
 0x00d9

	)

702 
	#XK_Uacuã
 0x00d®

	)

703 
	#XK_UcúcumÊex
 0x00db

	)

704 
	#XK_Udüîesis
 0x00d¯

	)

705 
	#XK_Yacuã
 0x00dd

	)

706 
	#XK_THORN
 0x00dê

	)

707 
	#XK_Th‹n
 0x00dê

	)

708 
	#XK_ssh¨p
 0x00d‡

	)

709 
	#XK_agøve
 0x00e0

	)

710 
	#XK_Øcuã
 0x00e1

	)

711 
	#XK_acúcumÊex
 0x00e2

	)

712 
	#XK_©ûde
 0x00e3

	)

713 
	#XK_adüîesis
 0x00e4

	)

714 
	#XK_¨ög
 0x00e5

	)

715 
	#XK_´
 0x00e6

	)

716 
	#XK_c˚dûœ
 0x00e7

	)

717 
	#XK_egøve
 0x00e8

	)

718 
	#XK_ócuã
 0x00e9

	)

719 
	#XK_ecúcumÊex
 0x00ó

	)

720 
	#XK_edüîesis
 0x00eb

	)

721 
	#XK_igøve
 0x00e¯

	)

722 
	#XK_ücuã
 0x00ed

	)

723 
	#XK_icúcumÊex
 0x00ì

	)

724 
	#XK_idüîesis
 0x00e‡

	)

725 
	#XK_ëh
 0x00f0

	)

726 
	#XK_¡ûde
 0x00f1

	)

727 
	#XK_ogøve
 0x00f2

	)

728 
	#XK_ﬂcuã
 0x00f3

	)

729 
	#XK_ocúcumÊex
 0x00f4

	)

730 
	#XK_Ÿûde
 0x00f5

	)

731 
	#XK_odüîesis
 0x00f6

	)

732 
	#XK_divisi⁄
 0x00f7

	)

733 
	#XK_o¶ash
 0x00f8

	)

734 
	#XK_ooblique
 0x00f8

	)

735 
	#XK_ugøve
 0x00f9

	)

736 
	#XK_uacuã
 0x00Á

	)

737 
	#XK_ucúcumÊex
 0x00fb

	)

738 
	#XK_udüîesis
 0x00f¯

	)

739 
	#XK_yacuã
 0x00fd

	)

740 
	#XK_th‹n
 0x00„

	)

741 
	#XK_ydüîesis
 0x00f‡

	)

749 #ifde‡
XK_LATIN2


750 
	#XK_Aog⁄ek
 0x01a1

	)

751 
	#XK_bªve
 0x01a2

	)

752 
	#XK_L°roke
 0x01a3

	)

753 
	#XK_Lˇr⁄
 0x01a5

	)

754 
	#XK_Sacuã
 0x01a6

	)

755 
	#XK_Sˇr⁄
 0x01a9

	)

756 
	#XK_S˚dûœ
 0x01Ø

	)

757 
	#XK_Tˇr⁄
 0x01ab

	)

758 
	#XK_Zacuã
 0x01a¯

	)

759 
	#XK_Zˇr⁄
 0x01´

	)

760 
	#XK_ZabovedŸ
 0x01a‡

	)

761 
	#XK_aog⁄ek
 0x01b1

	)

762 
	#XK_og⁄ek
 0x01b2

	)

763 
	#XK_l°roke
 0x01b3

	)

764 
	#XK_lˇr⁄
 0x01b5

	)

765 
	#XK_ßcuã
 0x01b6

	)

766 
	#XK_ˇr⁄
 0x01b7

	)

767 
	#XK_sˇr⁄
 0x01b9

	)

768 
	#XK_s˚dûœ
 0x01b®

	)

769 
	#XK_tˇr⁄
 0x01bb

	)

770 
	#XK_zacuã
 0x01b¯

	)

771 
	#XK_doubÀacuã
 0x01bd

	)

772 
	#XK_zˇr⁄
 0x01bê

	)

773 
	#XK_zabovedŸ
 0x01b‡

	)

774 
	#XK_Racuã
 0x01c0

	)

775 
	#XK_Abªve
 0x01c3

	)

776 
	#XK_Lacuã
 0x01c5

	)

777 
	#XK_Cacuã
 0x01c6

	)

778 
	#XK_Cˇr⁄
 0x01c8

	)

779 
	#XK_Eog⁄ek
 0x01ˇ

	)

780 
	#XK_Eˇr⁄
 0x01c¯

	)

781 
	#XK_Dˇr⁄
 0x01c‡

	)

782 
	#XK_D°roke
 0x01d0

	)

783 
	#XK_Nacuã
 0x01d1

	)

784 
	#XK_Nˇr⁄
 0x01d2

	)

785 
	#XK_OdoubÀacuã
 0x01d5

	)

786 
	#XK_Rˇr⁄
 0x01d8

	)

787 
	#XK_Urög
 0x01d9

	)

788 
	#XK_UdoubÀacuã
 0x01db

	)

789 
	#XK_T˚dûœ
 0x01dê

	)

790 
	#XK_øcuã
 0x01e0

	)

791 
	#XK_abªve
 0x01e3

	)

792 
	#XK_œcuã
 0x01e5

	)

793 
	#XK_ˇcuã
 0x01e6

	)

794 
	#XK_cˇr⁄
 0x01e8

	)

795 
	#XK_eog⁄ek
 0x01ó

	)

796 
	#XK_eˇr⁄
 0x01e¯

	)

797 
	#XK_dˇr⁄
 0x01e‡

	)

798 
	#XK_d°roke
 0x01f0

	)

799 
	#XK_«cuã
 0x01f1

	)

800 
	#XK_nˇr⁄
 0x01f2

	)

801 
	#XK_odoubÀacuã
 0x01f5

	)

802 
	#XK_rˇr⁄
 0x01f8

	)

803 
	#XK_urög
 0x01f9

	)

804 
	#XK_udoubÀacuã
 0x01fb

	)

805 
	#XK_t˚dûœ
 0x01„

	)

806 
	#XK_abovedŸ
 0x01f‡

	)

814 #ifde‡
XK_LATIN3


815 
	#XK_H°roke
 0x02a1

	)

816 
	#XK_HcúcumÊex
 0x02a6

	)

817 
	#XK_IabovedŸ
 0x02a9

	)

818 
	#XK_Gbªve
 0x02ab

	)

819 
	#XK_JcúcumÊex
 0x02a¯

	)

820 
	#XK_h°roke
 0x02b1

	)

821 
	#XK_hcúcumÊex
 0x02b6

	)

822 
	#XK_idŸÀss
 0x02b9

	)

823 
	#XK_gbªve
 0x02bb

	)

824 
	#XK_jcúcumÊex
 0x02b¯

	)

825 
	#XK_CabovedŸ
 0x02c5

	)

826 
	#XK_CcúcumÊex
 0x02c6

	)

827 
	#XK_GabovedŸ
 0x02d5

	)

828 
	#XK_GcúcumÊex
 0x02d8

	)

829 
	#XK_Ubªve
 0x02dd

	)

830 
	#XK_ScúcumÊex
 0x02dê

	)

831 
	#XK_ˇbovedŸ
 0x02e5

	)

832 
	#XK_ccúcumÊex
 0x02e6

	)

833 
	#XK_gabovedŸ
 0x02f5

	)

834 
	#XK_gcúcumÊex
 0x02f8

	)

835 
	#XK_ubªve
 0x02fd

	)

836 
	#XK_scúcumÊex
 0x02„

	)

845 #ifde‡
XK_LATIN4


846 
	#XK_kø
 0x03a2

	)

847 
	#XK_k≠∑
 0x03a2

	)

848 
	#XK_R˚dûœ
 0x03a3

	)

849 
	#XK_Itûde
 0x03a5

	)

850 
	#XK_L˚dûœ
 0x03a6

	)

851 
	#XK_Ema¸⁄
 0x03Ø

	)

852 
	#XK_G˚dûœ
 0x03ab

	)

853 
	#XK_T¶ash
 0x03a¯

	)

854 
	#XK_r˚dûœ
 0x03b3

	)

855 
	#XK_ôûde
 0x03b5

	)

856 
	#XK_l˚dûœ
 0x03b6

	)

857 
	#XK_ema¸⁄
 0x03b®

	)

858 
	#XK_g˚dûœ
 0x03bb

	)

859 
	#XK_t¶ash
 0x03b¯

	)

860 
	#XK_ENG
 0x03bd

	)

861 
	#XK_íg
 0x03b‡

	)

862 
	#XK_Ama¸⁄
 0x03c0

	)

863 
	#XK_Iog⁄ek
 0x03c7

	)

864 
	#XK_EabovedŸ
 0x03c¯

	)

865 
	#XK_Ima¸⁄
 0x03c‡

	)

866 
	#XK_N˚dûœ
 0x03d1

	)

867 
	#XK_Oma¸⁄
 0x03d2

	)

868 
	#XK_K˚dûœ
 0x03d3

	)

869 
	#XK_Uog⁄ek
 0x03d9

	)

870 
	#XK_Utûde
 0x03dd

	)

871 
	#XK_Uma¸⁄
 0x03dê

	)

872 
	#XK_ama¸⁄
 0x03e0

	)

873 
	#XK_iog⁄ek
 0x03e7

	)

874 
	#XK_óbovedŸ
 0x03e¯

	)

875 
	#XK_ima¸⁄
 0x03e‡

	)

876 
	#XK_n˚dûœ
 0x03f1

	)

877 
	#XK_oma¸⁄
 0x03f2

	)

878 
	#XK_k˚dûœ
 0x03f3

	)

879 
	#XK_uog⁄ek
 0x03f9

	)

880 
	#XK_utûde
 0x03fd

	)

881 
	#XK_uma¸⁄
 0x03„

	)

887 #ifde‡
XK_LATIN8


888 
	#XK_WcúcumÊex
 0x1000174

	)

889 
	#XK_wcúcumÊex
 0x1000175

	)

890 
	#XK_YcúcumÊex
 0x1000176

	)

891 
	#XK_ycúcumÊex
 0x1000177

	)

892 
	#XK_BabovedŸ
 0x1001e02

	)

893 
	#XK_babovedŸ
 0x1001e03

	)

894 
	#XK_DabovedŸ
 0x1001e0®

	)

895 
	#XK_dabovedŸ
 0x1001e0b

	)

896 
	#XK_FabovedŸ
 0x1001e1ê

	)

897 
	#XK_ÁbovedŸ
 0x1001e1‡

	)

898 
	#XK_MabovedŸ
 0x1001e40

	)

899 
	#XK_mabovedŸ
 0x1001e41

	)

900 
	#XK_PabovedŸ
 0x1001e56

	)

901 
	#XK_∑bovedŸ
 0x1001e57

	)

902 
	#XK_SabovedŸ
 0x1001e60

	)

903 
	#XK_ßbovedŸ
 0x1001e61

	)

904 
	#XK_TabovedŸ
 0x1001e6®

	)

905 
	#XK_èbovedŸ
 0x1001e6b

	)

906 
	#XK_Wgøve
 0x1001e80

	)

907 
	#XK_wgøve
 0x1001e81

	)

908 
	#XK_Wacuã
 0x1001e82

	)

909 
	#XK_wacuã
 0x1001e83

	)

910 
	#XK_Wdüîesis
 0x1001e84

	)

911 
	#XK_wdüîesis
 0x1001e85

	)

912 
	#XK_Ygøve
 0x1001ef2

	)

913 
	#XK_ygøve
 0x1001ef3

	)

921 #ifde‡
XK_LATIN9


922 
	#XK_OE
 0x13b¯

	)

923 
	#XK_€
 0x13bd

	)

924 
	#XK_Ydüîesis
 0x13bê

	)

932 #ifde‡
XK_KATAKANA


933 
	#XK_ovîlöe
 0x047ê

	)

934 
	#XK_k™a_fuŒ°›
 0x04a1

	)

935 
	#XK_k™a_›íögbøckë
 0x04a2

	)

936 
	#XK_k™a_˛osögbøckë
 0x04a3

	)

937 
	#XK_k™a_comma
 0x04a4

	)

938 
	#XK_k™a_c⁄jun˘ive
 0x04a5

	)

939 
	#XK_k™a_middÀdŸ
 0x04a5

	)

940 
	#XK_k™a_WO
 0x04a6

	)

941 
	#XK_k™a_a
 0x04a7

	)

942 
	#XK_k™a_i
 0x04a8

	)

943 
	#XK_k™a_u
 0x04a9

	)

944 
	#XK_k™a_e
 0x04Ø

	)

945 
	#XK_k™a_o
 0x04ab

	)

946 
	#XK_k™a_ya
 0x04a¯

	)

947 
	#XK_k™a_yu
 0x04ad

	)

948 
	#XK_k™a_yo
 0x04´

	)

949 
	#XK_k™a_tsu
 0x04a‡

	)

950 
	#XK_k™a_tu
 0x04a‡

	)

951 
	#XK_¥ﬁ⁄gedsound
 0x04b0

	)

952 
	#XK_k™a_A
 0x04b1

	)

953 
	#XK_k™a_I
 0x04b2

	)

954 
	#XK_k™a_U
 0x04b3

	)

955 
	#XK_k™a_E
 0x04b4

	)

956 
	#XK_k™a_O
 0x04b5

	)

957 
	#XK_k™a_KA
 0x04b6

	)

958 
	#XK_k™a_KI
 0x04b7

	)

959 
	#XK_k™a_KU
 0x04b8

	)

960 
	#XK_k™a_KE
 0x04b9

	)

961 
	#XK_k™a_KO
 0x04b®

	)

962 
	#XK_k™a_SA
 0x04bb

	)

963 
	#XK_k™a_SHI
 0x04b¯

	)

964 
	#XK_k™a_SU
 0x04bd

	)

965 
	#XK_k™a_SE
 0x04bê

	)

966 
	#XK_k™a_SO
 0x04b‡

	)

967 
	#XK_k™a_TA
 0x04c0

	)

968 
	#XK_k™a_CHI
 0x04c1

	)

969 
	#XK_k™a_TI
 0x04c1

	)

970 
	#XK_k™a_TSU
 0x04c2

	)

971 
	#XK_k™a_TU
 0x04c2

	)

972 
	#XK_k™a_TE
 0x04c3

	)

973 
	#XK_k™a_TO
 0x04c4

	)

974 
	#XK_k™a_NA
 0x04c5

	)

975 
	#XK_k™a_NI
 0x04c6

	)

976 
	#XK_k™a_NU
 0x04c7

	)

977 
	#XK_k™a_NE
 0x04c8

	)

978 
	#XK_k™a_NO
 0x04c9

	)

979 
	#XK_k™a_HA
 0x04ˇ

	)

980 
	#XK_k™a_HI
 0x04cb

	)

981 
	#XK_k™a_FU
 0x04c¯

	)

982 
	#XK_k™a_HU
 0x04c¯

	)

983 
	#XK_k™a_HE
 0x04cd

	)

984 
	#XK_k™a_HO
 0x04˚

	)

985 
	#XK_k™a_MA
 0x04c‡

	)

986 
	#XK_k™a_MI
 0x04d0

	)

987 
	#XK_k™a_MU
 0x04d1

	)

988 
	#XK_k™a_ME
 0x04d2

	)

989 
	#XK_k™a_MO
 0x04d3

	)

990 
	#XK_k™a_YA
 0x04d4

	)

991 
	#XK_k™a_YU
 0x04d5

	)

992 
	#XK_k™a_YO
 0x04d6

	)

993 
	#XK_k™a_RA
 0x04d7

	)

994 
	#XK_k™a_RI
 0x04d8

	)

995 
	#XK_k™a_RU
 0x04d9

	)

996 
	#XK_k™a_RE
 0x04d®

	)

997 
	#XK_k™a_RO
 0x04db

	)

998 
	#XK_k™a_WA
 0x04d¯

	)

999 
	#XK_k™a_N
 0x04dd

	)

1000 
	#XK_voi˚dsound
 0x04dê

	)

1001 
	#XK_£mivoi˚dsound
 0x04d‡

	)

1002 
	#XK_k™a_swôch
 0xff7ê

	)

1010 #ifde‡
XK_ARABIC


1011 
	#XK_F¨si_0
 0x10006f0

	)

1012 
	#XK_F¨si_1
 0x10006f1

	)

1013 
	#XK_F¨si_2
 0x10006f2

	)

1014 
	#XK_F¨si_3
 0x10006f3

	)

1015 
	#XK_F¨si_4
 0x10006f4

	)

1016 
	#XK_F¨si_5
 0x10006f5

	)

1017 
	#XK_F¨si_6
 0x10006f6

	)

1018 
	#XK_F¨si_7
 0x10006f7

	)

1019 
	#XK_F¨si_8
 0x10006f8

	)

1020 
	#XK_F¨si_9
 0x10006f9

	)

1021 
	#XK_Aøbic_≥r˚¡
 0x100066®

	)

1022 
	#XK_Aøbic_su≥rs¸ùt_Æef
 0x1000670

	)

1023 
	#XK_Aøbic_âeh
 0x1000679

	)

1024 
	#XK_Aøbic_≥h
 0x100067ê

	)

1025 
	#XK_Aøbic_tcheh
 0x1000686

	)

1026 
	#XK_Aøbic_ddÆ
 0x1000688

	)

1027 
	#XK_Aøbic_ºeh
 0x1000691

	)

1028 
	#XK_Aøbic_comma
 0x05a¯

	)

1029 
	#XK_Aøbic_fuŒ°›
 0x10006d4

	)

1030 
	#XK_Aøbic_0
 0x1000660

	)

1031 
	#XK_Aøbic_1
 0x1000661

	)

1032 
	#XK_Aøbic_2
 0x1000662

	)

1033 
	#XK_Aøbic_3
 0x1000663

	)

1034 
	#XK_Aøbic_4
 0x1000664

	)

1035 
	#XK_Aøbic_5
 0x1000665

	)

1036 
	#XK_Aøbic_6
 0x1000666

	)

1037 
	#XK_Aøbic_7
 0x1000667

	)

1038 
	#XK_Aøbic_8
 0x1000668

	)

1039 
	#XK_Aøbic_9
 0x1000669

	)

1040 
	#XK_Aøbic_£micﬁ⁄
 0x05bb

	)

1041 
	#XK_Aøbic_que°i⁄_m¨k
 0x05b‡

	)

1042 
	#XK_Aøbic_hamza
 0x05c1

	)

1043 
	#XK_Aøbic_madda⁄Æef
 0x05c2

	)

1044 
	#XK_Aøbic_hamza⁄Æef
 0x05c3

	)

1045 
	#XK_Aøbic_hamza⁄waw
 0x05c4

	)

1046 
	#XK_Aøbic_hamzaundîÆef
 0x05c5

	)

1047 
	#XK_Aøbic_hamza⁄yeh
 0x05c6

	)

1048 
	#XK_Aøbic_Æef
 0x05c7

	)

1049 
	#XK_Aøbic_beh
 0x05c8

	)

1050 
	#XK_Aøbic_ãhm¨buè
 0x05c9

	)

1051 
	#XK_Aøbic_ãh
 0x05ˇ

	)

1052 
	#XK_Aøbic_theh
 0x05cb

	)

1053 
	#XK_Aøbic_jìm
 0x05c¯

	)

1054 
	#XK_Aøbic_hah
 0x05cd

	)

1055 
	#XK_Aøbic_khah
 0x05˚

	)

1056 
	#XK_Aøbic_dÆ
 0x05c‡

	)

1057 
	#XK_Aøbic_thÆ
 0x05d0

	)

1058 
	#XK_Aøbic_ø
 0x05d1

	)

1059 
	#XK_Aøbic_zaö
 0x05d2

	)

1060 
	#XK_Aøbic_£í
 0x05d3

	)

1061 
	#XK_Aøbic_shìn
 0x05d4

	)

1062 
	#XK_Aøbic_ßd
 0x05d5

	)

1063 
	#XK_Aøbic_dad
 0x05d6

	)

1064 
	#XK_Aøbic_èh
 0x05d7

	)

1065 
	#XK_Aøbic_zah
 0x05d8

	)

1066 
	#XK_Aøbic_aö
 0x05d9

	)

1067 
	#XK_Aøbic_ghaö
 0x05d®

	)

1068 
	#XK_Aøbic_ètwìl
 0x05e0

	)

1069 
	#XK_Aøbic_„h
 0x05e1

	)

1070 
	#XK_Aøbic_qaf
 0x05e2

	)

1071 
	#XK_Aøbic_kaf
 0x05e3

	)

1072 
	#XK_Aøbic_œm
 0x05e4

	)

1073 
	#XK_Aøbic_mìm
 0x05e5

	)

1074 
	#XK_Aøbic_no⁄
 0x05e6

	)

1075 
	#XK_Aøbic_ha
 0x05e7

	)

1076 
	#XK_Aøbic_heh
 0x05e7

	)

1077 
	#XK_Aøbic_waw
 0x05e8

	)

1078 
	#XK_Aøbic_Æefmaksuø
 0x05e9

	)

1079 
	#XK_Aøbic_yeh
 0x05ó

	)

1080 
	#XK_Aøbic_Áth©™
 0x05eb

	)

1081 
	#XK_Aøbic_damm©™
 0x05e¯

	)

1082 
	#XK_Aøbic_ka§©™
 0x05ed

	)

1083 
	#XK_Aøbic_Átha
 0x05ì

	)

1084 
	#XK_Aøbic_damma
 0x05e‡

	)

1085 
	#XK_Aøbic_ka§a
 0x05f0

	)

1086 
	#XK_Aøbic_shadda
 0x05f1

	)

1087 
	#XK_Aøbic_sukun
 0x05f2

	)

1088 
	#XK_Aøbic_madda_above
 0x1000653

	)

1089 
	#XK_Aøbic_hamza_above
 0x1000654

	)

1090 
	#XK_Aøbic_hamza_bñow
 0x1000655

	)

1091 
	#XK_Aøbic_jeh
 0x1000698

	)

1092 
	#XK_Aøbic_veh
 0x10006a4

	)

1093 
	#XK_Aøbic_keheh
 0x10006a9

	)

1094 
	#XK_Aøbic_gaf
 0x10006a‡

	)

1095 
	#XK_Aøbic_no⁄_ghu¬a
 0x10006b®

	)

1096 
	#XK_Aøbic_heh_dﬂchashmì
 0x10006bê

	)

1097 
	#XK_F¨si_yeh
 0x10006c¯

	)

1098 
	#XK_Aøbic_Ársi_yeh
 0x10006c¯

	)

1099 
	#XK_Aøbic_yeh_b¨ì
 0x10006d2

	)

1100 
	#XK_Aøbic_heh_gﬂl
 0x10006c1

	)

1101 
	#XK_Aøbic_swôch
 0xff7ê

	)

1108 #ifde‡
XK_CYRILLIC


1109 
	#XK_Cyrûlic_GHE_b¨
 0x1000492

	)

1110 
	#XK_Cyrûlic_ghe_b¨
 0x1000493

	)

1111 
	#XK_Cyrûlic_ZHE_des˚ndî
 0x1000496

	)

1112 
	#XK_Cyrûlic_zhe_des˚ndî
 0x1000497

	)

1113 
	#XK_Cyrûlic_KA_des˚ndî
 0x100049®

	)

1114 
	#XK_Cyrûlic_ka_des˚ndî
 0x100049b

	)

1115 
	#XK_Cyrûlic_KA_vît°roke
 0x100049¯

	)

1116 
	#XK_Cyrûlic_ka_vît°roke
 0x100049d

	)

1117 
	#XK_Cyrûlic_EN_des˚ndî
 0x10004a2

	)

1118 
	#XK_Cyrûlic_í_des˚ndî
 0x10004a3

	)

1119 
	#XK_Cyrûlic_U_°øight
 0x10004´

	)

1120 
	#XK_Cyrûlic_u_°øight
 0x10004a‡

	)

1121 
	#XK_Cyrûlic_U_°øight_b¨
 0x10004b0

	)

1122 
	#XK_Cyrûlic_u_°øight_b¨
 0x10004b1

	)

1123 
	#XK_Cyrûlic_HA_des˚ndî
 0x10004b2

	)

1124 
	#XK_Cyrûlic_ha_des˚ndî
 0x10004b3

	)

1125 
	#XK_Cyrûlic_CHE_des˚ndî
 0x10004b6

	)

1126 
	#XK_Cyrûlic_che_des˚ndî
 0x10004b7

	)

1127 
	#XK_Cyrûlic_CHE_vît°roke
 0x10004b8

	)

1128 
	#XK_Cyrûlic_che_vît°roke
 0x10004b9

	)

1129 
	#XK_Cyrûlic_SHHA
 0x10004b®

	)

1130 
	#XK_Cyrûlic_shha
 0x10004bb

	)

1132 
	#XK_Cyrûlic_SCHWA
 0x10004d8

	)

1133 
	#XK_Cyrûlic_schwa
 0x10004d9

	)

1134 
	#XK_Cyrûlic_I_ma¸⁄
 0x10004e2

	)

1135 
	#XK_Cyrûlic_i_ma¸⁄
 0x10004e3

	)

1136 
	#XK_Cyrûlic_O_b¨
 0x10004e8

	)

1137 
	#XK_Cyrûlic_o_b¨
 0x10004e9

	)

1138 
	#XK_Cyrûlic_U_ma¸⁄
 0x10004ì

	)

1139 
	#XK_Cyrûlic_u_ma¸⁄
 0x10004e‡

	)

1141 
	#XK_Sîbün_dje
 0x06a1

	)

1142 
	#XK_Ma˚d⁄ü_gje
 0x06a2

	)

1143 
	#XK_Cyrûlic_io
 0x06a3

	)

1144 
	#XK_Ukøöün_õ
 0x06a4

	)

1145 
	#XK_Ukønün_je
 0x06a4

	)

1146 
	#XK_Ma˚d⁄ü_d£
 0x06a5

	)

1147 
	#XK_Ukøöün_i
 0x06a6

	)

1148 
	#XK_Ukønün_i
 0x06a6

	)

1149 
	#XK_Ukøöün_yi
 0x06a7

	)

1150 
	#XK_Ukønün_yi
 0x06a7

	)

1151 
	#XK_Cyrûlic_je
 0x06a8

	)

1152 
	#XK_Sîbün_je
 0x06a8

	)

1153 
	#XK_Cyrûlic_lje
 0x06a9

	)

1154 
	#XK_Sîbün_lje
 0x06a9

	)

1155 
	#XK_Cyrûlic_nje
 0x06Ø

	)

1156 
	#XK_Sîbün_nje
 0x06Ø

	)

1157 
	#XK_Sîbün_tshe
 0x06ab

	)

1158 
	#XK_Ma˚d⁄ü_kje
 0x06a¯

	)

1159 
	#XK_Ukøöün_ghe_wôh_u±u∫
 0x06ad

	)

1160 
	#XK_Byñ‹ussün_sh‹tu
 0x06´

	)

1161 
	#XK_Cyrûlic_dzhe
 0x06a‡

	)

1162 
	#XK_Sîbün_dze
 0x06a‡

	)

1163 
	#XK_numîosign
 0x06b0

	)

1164 
	#XK_Sîbün_DJE
 0x06b1

	)

1165 
	#XK_Ma˚d⁄ü_GJE
 0x06b2

	)

1166 
	#XK_Cyrûlic_IO
 0x06b3

	)

1167 
	#XK_Ukøöün_IE
 0x06b4

	)

1168 
	#XK_Ukønün_JE
 0x06b4

	)

1169 
	#XK_Ma˚d⁄ü_DSE
 0x06b5

	)

1170 
	#XK_Ukøöün_I
 0x06b6

	)

1171 
	#XK_Ukønün_I
 0x06b6

	)

1172 
	#XK_Ukøöün_YI
 0x06b7

	)

1173 
	#XK_Ukønün_YI
 0x06b7

	)

1174 
	#XK_Cyrûlic_JE
 0x06b8

	)

1175 
	#XK_Sîbün_JE
 0x06b8

	)

1176 
	#XK_Cyrûlic_LJE
 0x06b9

	)

1177 
	#XK_Sîbün_LJE
 0x06b9

	)

1178 
	#XK_Cyrûlic_NJE
 0x06b®

	)

1179 
	#XK_Sîbün_NJE
 0x06b®

	)

1180 
	#XK_Sîbün_TSHE
 0x06bb

	)

1181 
	#XK_Ma˚d⁄ü_KJE
 0x06b¯

	)

1182 
	#XK_Ukøöün_GHE_WITH_UPTURN
 0x06bd

	)

1183 
	#XK_Byñ‹ussün_SHORTU
 0x06bê

	)

1184 
	#XK_Cyrûlic_DZHE
 0x06b‡

	)

1185 
	#XK_Sîbün_DZE
 0x06b‡

	)

1186 
	#XK_Cyrûlic_yu
 0x06c0

	)

1187 
	#XK_Cyrûlic_a
 0x06c1

	)

1188 
	#XK_Cyrûlic_be
 0x06c2

	)

1189 
	#XK_Cyrûlic_t£
 0x06c3

	)

1190 
	#XK_Cyrûlic_de
 0x06c4

	)

1191 
	#XK_Cyrûlic_õ
 0x06c5

	)

1192 
	#XK_Cyrûlic_ef
 0x06c6

	)

1193 
	#XK_Cyrûlic_ghe
 0x06c7

	)

1194 
	#XK_Cyrûlic_ha
 0x06c8

	)

1195 
	#XK_Cyrûlic_i
 0x06c9

	)

1196 
	#XK_Cyrûlic_sh‹ti
 0x06ˇ

	)

1197 
	#XK_Cyrûlic_ka
 0x06cb

	)

1198 
	#XK_Cyrûlic_ñ
 0x06c¯

	)

1199 
	#XK_Cyrûlic_em
 0x06cd

	)

1200 
	#XK_Cyrûlic_í
 0x06˚

	)

1201 
	#XK_Cyrûlic_o
 0x06c‡

	)

1202 
	#XK_Cyrûlic_≥
 0x06d0

	)

1203 
	#XK_Cyrûlic_ya
 0x06d1

	)

1204 
	#XK_Cyrûlic_î
 0x06d2

	)

1205 
	#XK_Cyrûlic_es
 0x06d3

	)

1206 
	#XK_Cyrûlic_ã
 0x06d4

	)

1207 
	#XK_Cyrûlic_u
 0x06d5

	)

1208 
	#XK_Cyrûlic_zhe
 0x06d6

	)

1209 
	#XK_Cyrûlic_ve
 0x06d7

	)

1210 
	#XK_Cyrûlic_so·sign
 0x06d8

	)

1211 
	#XK_Cyrûlic_yîu
 0x06d9

	)

1212 
	#XK_Cyrûlic_ze
 0x06d®

	)

1213 
	#XK_Cyrûlic_sha
 0x06db

	)

1214 
	#XK_Cyrûlic_e
 0x06d¯

	)

1215 
	#XK_Cyrûlic_shcha
 0x06dd

	)

1216 
	#XK_Cyrûlic_che
 0x06dê

	)

1217 
	#XK_Cyrûlic_h¨dsign
 0x06d‡

	)

1218 
	#XK_Cyrûlic_YU
 0x06e0

	)

1219 
	#XK_Cyrûlic_A
 0x06e1

	)

1220 
	#XK_Cyrûlic_BE
 0x06e2

	)

1221 
	#XK_Cyrûlic_TSE
 0x06e3

	)

1222 
	#XK_Cyrûlic_DE
 0x06e4

	)

1223 
	#XK_Cyrûlic_IE
 0x06e5

	)

1224 
	#XK_Cyrûlic_EF
 0x06e6

	)

1225 
	#XK_Cyrûlic_GHE
 0x06e7

	)

1226 
	#XK_Cyrûlic_HA
 0x06e8

	)

1227 
	#XK_Cyrûlic_I
 0x06e9

	)

1228 
	#XK_Cyrûlic_SHORTI
 0x06ó

	)

1229 
	#XK_Cyrûlic_KA
 0x06eb

	)

1230 
	#XK_Cyrûlic_EL
 0x06e¯

	)

1231 
	#XK_Cyrûlic_EM
 0x06ed

	)

1232 
	#XK_Cyrûlic_EN
 0x06ì

	)

1233 
	#XK_Cyrûlic_O
 0x06e‡

	)

1234 
	#XK_Cyrûlic_PE
 0x06f0

	)

1235 
	#XK_Cyrûlic_YA
 0x06f1

	)

1236 
	#XK_Cyrûlic_ER
 0x06f2

	)

1237 
	#XK_Cyrûlic_ES
 0x06f3

	)

1238 
	#XK_Cyrûlic_TE
 0x06f4

	)

1239 
	#XK_Cyrûlic_U
 0x06f5

	)

1240 
	#XK_Cyrûlic_ZHE
 0x06f6

	)

1241 
	#XK_Cyrûlic_VE
 0x06f7

	)

1242 
	#XK_Cyrûlic_SOFTSIGN
 0x06f8

	)

1243 
	#XK_Cyrûlic_YERU
 0x06f9

	)

1244 
	#XK_Cyrûlic_ZE
 0x06Á

	)

1245 
	#XK_Cyrûlic_SHA
 0x06fb

	)

1246 
	#XK_Cyrûlic_E
 0x06f¯

	)

1247 
	#XK_Cyrûlic_SHCHA
 0x06fd

	)

1248 
	#XK_Cyrûlic_CHE
 0x06„

	)

1249 
	#XK_Cyrûlic_HARDSIGN
 0x06f‡

	)

1258 #ifde‡
XK_GREEK


1259 
	#XK_Gªek_ALPHAac˚¡
 0x07a1

	)

1260 
	#XK_Gªek_EPSILONac˚¡
 0x07a2

	)

1261 
	#XK_Gªek_ETAac˚¡
 0x07a3

	)

1262 
	#XK_Gªek_IOTAac˚¡
 0x07a4

	)

1263 
	#XK_Gªek_IOTAdõªsis
 0x07a5

	)

1264 
	#XK_Gªek_IOTAdüîesis
 0x07a5

	)

1265 
	#XK_Gªek_OMICRONac˚¡
 0x07a7

	)

1266 
	#XK_Gªek_UPSILONac˚¡
 0x07a8

	)

1267 
	#XK_Gªek_UPSILONdõªsis
 0x07a9

	)

1268 
	#XK_Gªek_OMEGAac˚¡
 0x07ab

	)

1269 
	#XK_Gªek_ac˚¡dõªsis
 0x07´

	)

1270 
	#XK_Gªek_h‹izb¨
 0x07a‡

	)

1271 
	#XK_Gªek_ÆphØc˚¡
 0x07b1

	)

1272 
	#XK_Gªek_ïsû⁄ac˚¡
 0x07b2

	)

1273 
	#XK_Gªek_ëØc˚¡
 0x07b3

	)

1274 
	#XK_Gªek_iŸØc˚¡
 0x07b4

	)

1275 
	#XK_Gªek_iŸadõªsis
 0x07b5

	)

1276 
	#XK_Gªek_iŸØc˚¡dõªsis
 0x07b6

	)

1277 
	#XK_Gªek_omi¸⁄ac˚¡
 0x07b7

	)

1278 
	#XK_Gªek_upsû⁄ac˚¡
 0x07b8

	)

1279 
	#XK_Gªek_upsû⁄dõªsis
 0x07b9

	)

1280 
	#XK_Gªek_upsû⁄ac˚¡dõªsis
 0x07b®

	)

1281 
	#XK_Gªek_omegØc˚¡
 0x07bb

	)

1282 
	#XK_Gªek_ALPHA
 0x07c1

	)

1283 
	#XK_Gªek_BETA
 0x07c2

	)

1284 
	#XK_Gªek_GAMMA
 0x07c3

	)

1285 
	#XK_Gªek_DELTA
 0x07c4

	)

1286 
	#XK_Gªek_EPSILON
 0x07c5

	)

1287 
	#XK_Gªek_ZETA
 0x07c6

	)

1288 
	#XK_Gªek_ETA
 0x07c7

	)

1289 
	#XK_Gªek_THETA
 0x07c8

	)

1290 
	#XK_Gªek_IOTA
 0x07c9

	)

1291 
	#XK_Gªek_KAPPA
 0x07ˇ

	)

1292 
	#XK_Gªek_LAMDA
 0x07cb

	)

1293 
	#XK_Gªek_LAMBDA
 0x07cb

	)

1294 
	#XK_Gªek_MU
 0x07c¯

	)

1295 
	#XK_Gªek_NU
 0x07cd

	)

1296 
	#XK_Gªek_XI
 0x07˚

	)

1297 
	#XK_Gªek_OMICRON
 0x07c‡

	)

1298 
	#XK_Gªek_PI
 0x07d0

	)

1299 
	#XK_Gªek_RHO
 0x07d1

	)

1300 
	#XK_Gªek_SIGMA
 0x07d2

	)

1301 
	#XK_Gªek_TAU
 0x07d4

	)

1302 
	#XK_Gªek_UPSILON
 0x07d5

	)

1303 
	#XK_Gªek_PHI
 0x07d6

	)

1304 
	#XK_Gªek_CHI
 0x07d7

	)

1305 
	#XK_Gªek_PSI
 0x07d8

	)

1306 
	#XK_Gªek_OMEGA
 0x07d9

	)

1307 
	#XK_Gªek_Æpha
 0x07e1

	)

1308 
	#XK_Gªek_bëa
 0x07e2

	)

1309 
	#XK_Gªek_gamma
 0x07e3

	)

1310 
	#XK_Gªek_dñè
 0x07e4

	)

1311 
	#XK_Gªek_ïsû⁄
 0x07e5

	)

1312 
	#XK_Gªek_zëa
 0x07e6

	)

1313 
	#XK_Gªek_ëa
 0x07e7

	)

1314 
	#XK_Gªek_thëa
 0x07e8

	)

1315 
	#XK_Gªek_iŸa
 0x07e9

	)

1316 
	#XK_Gªek_k≠∑
 0x07ó

	)

1317 
	#XK_Gªek_œmda
 0x07eb

	)

1318 
	#XK_Gªek_œmbda
 0x07eb

	)

1319 
	#XK_Gªek_mu
 0x07e¯

	)

1320 
	#XK_Gªek_nu
 0x07ed

	)

1321 
	#XK_Gªek_xi
 0x07ì

	)

1322 
	#XK_Gªek_omi¸⁄
 0x07e‡

	)

1323 
	#XK_Gªek_pi
 0x07f0

	)

1324 
	#XK_Gªek_rho
 0x07f1

	)

1325 
	#XK_Gªek_sigma
 0x07f2

	)

1326 
	#XK_Gªek_föÆsmÆlsigma
 0x07f3

	)

1327 
	#XK_Gªek_èu
 0x07f4

	)

1328 
	#XK_Gªek_upsû⁄
 0x07f5

	)

1329 
	#XK_Gªek_phi
 0x07f6

	)

1330 
	#XK_Gªek_chi
 0x07f7

	)

1331 
	#XK_Gªek_psi
 0x07f8

	)

1332 
	#XK_Gªek_omega
 0x07f9

	)

1333 
	#XK_Gªek_swôch
 0xff7ê

	)

1342 #ifde‡
XK_TECHNICAL


1343 
	#XK_À·ødiˇl
 0x08a1

	)

1344 
	#XK_t›À·ødiˇl
 0x08a2

	)

1345 
	#XK_h‹izc⁄√˘‹
 0x08a3

	)

1346 
	#XK_t›öãgøl
 0x08a4

	)

1347 
	#XK_bŸöãgøl
 0x08a5

	)

1348 
	#XK_vîtc⁄√˘‹
 0x08a6

	)

1349 
	#XK_t›À·sqbøckë
 0x08a7

	)

1350 
	#XK_bŸÀ·sqbøckë
 0x08a8

	)

1351 
	#XK_t›rightsqbøckë
 0x08a9

	)

1352 
	#XK_bŸrightsqbøckë
 0x08Ø

	)

1353 
	#XK_t›À·∑ªns
 0x08ab

	)

1354 
	#XK_bŸÀ·∑ªns
 0x08a¯

	)

1355 
	#XK_t›righç¨ís
 0x08ad

	)

1356 
	#XK_bŸrighç¨ís
 0x08´

	)

1357 
	#XK_À·middÀcuæybø˚
 0x08a‡

	)

1358 
	#XK_rightmiddÀcuæybø˚
 0x08b0

	)

1359 
	#XK_t›À·summ©i⁄
 0x08b1

	)

1360 
	#XK_bŸÀ·summ©i⁄
 0x08b2

	)

1361 
	#XK_t›vîtsumm©i⁄c⁄√˘‹
 0x08b3

	)

1362 
	#XK_bŸvîtsumm©i⁄c⁄√˘‹
 0x08b4

	)

1363 
	#XK_t›rightsumm©i⁄
 0x08b5

	)

1364 
	#XK_bŸrightsumm©i⁄
 0x08b6

	)

1365 
	#XK_rightmiddÀsumm©i⁄
 0x08b7

	)

1366 
	#XK_Às°h™equÆ
 0x08b¯

	)

1367 
	#XK_nŸequÆ
 0x08bd

	)

1368 
	#XK_gª©îth™equÆ
 0x08bê

	)

1369 
	#XK_öãgøl
 0x08b‡

	)

1370 
	#XK_thîef‹e
 0x08c0

	)

1371 
	#XK_v¨üti⁄
 0x08c1

	)

1372 
	#XK_öföôy
 0x08c2

	)

1373 
	#XK_«bœ
 0x08c5

	)

1374 
	#XK_≠¥oxim©e
 0x08c8

	)

1375 
	#XK_simû¨equÆ
 0x08c9

	)

1376 
	#XK_if⁄lyif
 0x08cd

	)

1377 
	#XK_im∂õs
 0x08˚

	)

1378 
	#XK_idítiˇl
 0x08c‡

	)

1379 
	#XK_ødiˇl
 0x08d6

	)

1380 
	#XK_ö˛udedö
 0x08d®

	)

1381 
	#XK_ö˛udes
 0x08db

	)

1382 
	#XK_öãr£˘i⁄
 0x08d¯

	)

1383 
	#XK_uni⁄
 0x08dd

	)

1384 
	#XK_logiˇœnd
 0x08dê

	)

1385 
	#XK_logiˇl‹
 0x08d‡

	)

1386 
	#XK_∑πüldîiv©ive
 0x08e‡

	)

1387 
	#XK_fun˘i⁄
 0x08f6

	)

1388 
	#XK_À·¨row
 0x08fb

	)

1389 
	#XK_u∑ºow
 0x08f¯

	)

1390 
	#XK_righèºow
 0x08fd

	)

1391 
	#XK_dow«ºow
 0x08„

	)

1400 #ifde‡
XK_SPECIAL


1401 
	#XK_bœnk
 0x09df

	)

1402 
	#XK_sﬁiddüm⁄d
 0x09e0

	)

1403 
	#XK_checkîbﬂrd
 0x09e1

	)

1404 
	#XK_ht
 0x09e2

	)

1405 
	#XK_ff
 0x09e3

	)

1406 
	#XK_¸
 0x09e4

	)

1407 
	#XK_lf
 0x09e5

	)

1408 
	#XK_∆
 0x09e8

	)

1409 
	#XK_vt
 0x09e9

	)

1410 
	#XK_lowrightc‹√r
 0x09ó

	)

1411 
	#XK_u¥ightc‹√r
 0x09eb

	)

1412 
	#XK_u∂e·c‹√r
 0x09e¯

	)

1413 
	#XK_lowÀ·c‹√r
 0x09ed

	)

1414 
	#XK_¸ossöglöes
 0x09ì

	)

1415 
	#XK_h‹izlöesˇn1
 0x09e‡

	)

1416 
	#XK_h‹izlöesˇn3
 0x09f0

	)

1417 
	#XK_h‹izlöesˇn5
 0x09f1

	)

1418 
	#XK_h‹izlöesˇn7
 0x09f2

	)

1419 
	#XK_h‹izlöesˇn9
 0x09f3

	)

1420 
	#XK_À·t
 0x09f4

	)

1421 
	#XK_righâ
 0x09f5

	)

1422 
	#XK_bŸt
 0x09f6

	)

1423 
	#XK_t›t
 0x09f7

	)

1424 
	#XK_vîtb¨
 0x09f8

	)

1434 #ifde‡
XK_PUBLISHING


1435 
	#XK_em•a˚
 0x0Ø1

	)

1436 
	#XK_í•a˚
 0x0Ø2

	)

1437 
	#XK_em3•a˚
 0x0Ø3

	)

1438 
	#XK_em4•a˚
 0x0Ø4

	)

1439 
	#XK_digô•a˚
 0x0Ø5

	)

1440 
	#XK_pun˘•a˚
 0x0Ø6

	)

1441 
	#XK_thö•a˚
 0x0Ø7

	)

1442 
	#XK_haú•a˚
 0x0Ø8

	)

1443 
	#XK_emdash
 0x0Ø9

	)

1444 
	#XK_ídash
 0x0Ø®

	)

1445 
	#XK_signifbœnk
 0x0Ø¯

	)

1446 
	#XK_ñlùsis
 0x0Øê

	)

1447 
	#XK_doubba£löedŸ
 0x0Ø‡

	)

1448 
	#XK_⁄ëhúd
 0x0ab0

	)

1449 
	#XK_twŸhúds
 0x0ab1

	)

1450 
	#XK_⁄efi·h
 0x0ab2

	)

1451 
	#XK_twofi·hs
 0x0ab3

	)

1452 
	#XK_thªefi·hs
 0x0ab4

	)

1453 
	#XK_fourfi·hs
 0x0ab5

	)

1454 
	#XK_⁄esixth
 0x0ab6

	)

1455 
	#XK_fivesixths
 0x0ab7

	)

1456 
	#XK_ˇªof
 0x0ab8

	)

1457 
	#XK_figdash
 0x0abb

	)

1458 
	#XK_À·™gÀbøckë
 0x0ab¯

	)

1459 
	#XK_decimÆpoöt
 0x0abd

	)

1460 
	#XK_righèngÀbøckë
 0x0abê

	)

1461 
	#XK_m¨kî
 0x0abf

	)

1462 
	#XK_⁄ìighth
 0x0ac3

	)

1463 
	#XK_thªìighths
 0x0ac4

	)

1464 
	#XK_fivìighths
 0x0ac5

	)

1465 
	#XK_£víeighths
 0x0ac6

	)

1466 
	#XK_åadem¨k
 0x0ac9

	)

1467 
	#XK_sig«tuªm¨k
 0x0aˇ

	)

1468 
	#XK_åadem¨köcú˛e
 0x0acb

	)

1469 
	#XK_À·›íåüngÀ
 0x0ac¯

	)

1470 
	#XK_right›íåüngÀ
 0x0acd

	)

1471 
	#XK_em›ícú˛e
 0x0a˚

	)

1472 
	#XK_em›íª˘™gÀ
 0x0ac‡

	)

1473 
	#XK_À·sögÀquŸem¨k
 0x0ad0

	)

1474 
	#XK_rightsögÀquŸem¨k
 0x0ad1

	)

1475 
	#XK_À·doubÀquŸem¨k
 0x0ad2

	)

1476 
	#XK_rightdoubÀquŸem¨k
 0x0ad3

	)

1477 
	#XK_¥es¸ùti⁄
 0x0ad4

	)

1478 
	#XK_≥rmûÀ
 0x0ad5

	)

1479 
	#XK_möuãs
 0x0ad6

	)

1480 
	#XK_£c⁄ds
 0x0ad7

	)

1481 
	#XK_œtö¸oss
 0x0ad9

	)

1482 
	#XK_hexagøm
 0x0ada

	)

1483 
	#XK_fûÀdª˘buŒë
 0x0adb

	)

1484 
	#XK_fûÀdÀ·åibuŒë
 0x0ad¯

	)

1485 
	#XK_fûÀdrighâribuŒë
 0x0add

	)

1486 
	#XK_emfûÀdcú˛e
 0x0adê

	)

1487 
	#XK_emfûÀdª˘
 0x0ad‡

	)

1488 
	#XK_í›ícúcbuŒë
 0x0´0

	)

1489 
	#XK_í›ísqu¨ebuŒë
 0x0´1

	)

1490 
	#XK_›íª˘buŒë
 0x0´2

	)

1491 
	#XK_›íåibuŒëup
 0x0´3

	)

1492 
	#XK_›íåibuŒëdown
 0x0´4

	)

1493 
	#XK_›í°¨
 0x0´5

	)

1494 
	#XK_ífûÀdcúcbuŒë
 0x0´6

	)

1495 
	#XK_ífûÀdsqbuŒë
 0x0´7

	)

1496 
	#XK_fûÀdåibuŒëup
 0x0´8

	)

1497 
	#XK_fûÀdåibuŒëdown
 0x0´9

	)

1498 
	#XK_À·poöãr
 0x0´®

	)

1499 
	#XK_righçoöãr
 0x0´b

	)

1500 
	#XK_˛ub
 0x0´¯

	)

1501 
	#XK_düm⁄d
 0x0´d

	)

1502 
	#XK_hóπ
 0x0´ê

	)

1503 
	#XK_mÆã£¸oss
 0x0af0

	)

1504 
	#XK_daggî
 0x0af1

	)

1505 
	#XK_doubÀdaggî
 0x0af2

	)

1506 
	#XK_checkm¨k
 0x0af3

	)

1507 
	#XK_bÆlŸ¸oss
 0x0af4

	)

1508 
	#XK_musiˇlsh¨p
 0x0af5

	)

1509 
	#XK_musiˇlÊ©
 0x0af6

	)

1510 
	#XK_mÆesymbﬁ
 0x0af7

	)

1511 
	#XK_„mÆesymbﬁ
 0x0af8

	)

1512 
	#XK_ãÀph⁄e
 0x0af9

	)

1513 
	#XK_ãÀph⁄îec‹dî
 0x0aÁ

	)

1514 
	#XK_ph⁄ogøphc›yright
 0x0afb

	)

1515 
	#XK_ˇªt
 0x0af¯

	)

1516 
	#XK_sögÀlowquŸem¨k
 0x0afd

	)

1517 
	#XK_doubÀlowquŸem¨k
 0x0a„

	)

1518 
	#XK_curs‹
 0x0aff

	)

1526 #ifde‡
XK_APL


1527 
	#XK_À·ˇªt
 0x0ba3

	)

1528 
	#XK_rightˇªt
 0x0ba6

	)

1529 
	#XK_downˇªt
 0x0ba8

	)

1530 
	#XK_upˇªt
 0x0ba9

	)

1531 
	#XK_ovîb¨
 0x0bc0

	)

1532 
	#XK_dow¡ack
 0x0bc2

	)

1533 
	#XK_upsh€
 0x0bc3

	)

1534 
	#XK_down°ûe
 0x0bc4

	)

1535 
	#XK_undîb¨
 0x0bc6

	)

1536 
	#XK_jŸ
 0x0bˇ

	)

1537 
	#XK_quad
 0x0bc¯

	)

1538 
	#XK_u±ack
 0x0b˚

	)

1539 
	#XK_cú˛e
 0x0bc‡

	)

1540 
	#XK_up°ûe
 0x0bd3

	)

1541 
	#XK_downsh€
 0x0bd6

	)

1542 
	#XK_rightsh€
 0x0bd8

	)

1543 
	#XK_À·sh€
 0x0bd®

	)

1544 
	#XK_À·èck
 0x0bd¯

	)

1545 
	#XK_righâack
 0x0bf¯

	)

1553 #ifde‡
XK_HEBREW


1554 
	#XK_hebªw_doubÀlowlöe
 0x0cd‡

	)

1555 
	#XK_hebªw_Æïh
 0x0˚0

	)

1556 
	#XK_hebªw_bë
 0x0˚1

	)

1557 
	#XK_hebªw_bëh
 0x0˚1

	)

1558 
	#XK_hebªw_gimñ
 0x0˚2

	)

1559 
	#XK_hebªw_gimmñ
 0x0˚2

	)

1560 
	#XK_hebªw_dÆë
 0x0˚3

	)

1561 
	#XK_hebªw_dÆëh
 0x0˚3

	)

1562 
	#XK_hebªw_he
 0x0˚4

	)

1563 
	#XK_hebªw_waw
 0x0˚5

	)

1564 
	#XK_hebªw_zaö
 0x0˚6

	)

1565 
	#XK_hebªw_zayö
 0x0˚6

	)

1566 
	#XK_hebªw_chë
 0x0˚7

	)

1567 
	#XK_hebªw_hë
 0x0˚7

	)

1568 
	#XK_hebªw_ãt
 0x0˚8

	)

1569 
	#XK_hebªw_ãth
 0x0˚8

	)

1570 
	#XK_hebªw_yod
 0x0˚9

	)

1571 
	#XK_hebªw_föÆk≠h
 0x0˚®

	)

1572 
	#XK_hebªw_k≠h
 0x0˚b

	)

1573 
	#XK_hebªw_œmed
 0x0˚¯

	)

1574 
	#XK_hebªw_föÆmem
 0x0˚d

	)

1575 
	#XK_hebªw_mem
 0x0˚ê

	)

1576 
	#XK_hebªw_föÆnun
 0x0˚‡

	)

1577 
	#XK_hebªw_nun
 0x0cf0

	)

1578 
	#XK_hebªw_ßmech
 0x0cf1

	)

1579 
	#XK_hebªw_ßmekh
 0x0cf1

	)

1580 
	#XK_hebªw_ayö
 0x0cf2

	)

1581 
	#XK_hebªw_föÆ≥
 0x0cf3

	)

1582 
	#XK_hebªw_≥
 0x0cf4

	)

1583 
	#XK_hebªw_föÆzade
 0x0cf5

	)

1584 
	#XK_hebªw_föÆzadi
 0x0cf5

	)

1585 
	#XK_hebªw_zade
 0x0cf6

	)

1586 
	#XK_hebªw_zadi
 0x0cf6

	)

1587 
	#XK_hebªw_q›h
 0x0cf7

	)

1588 
	#XK_hebªw_kuf
 0x0cf7

	)

1589 
	#XK_hebªw_ªsh
 0x0cf8

	)

1590 
	#XK_hebªw_shö
 0x0cf9

	)

1591 
	#XK_hebªw_èw
 0x0cÁ

	)

1592 
	#XK_hebªw_èf
 0x0cÁ

	)

1593 
	#XK_Hebªw_swôch
 0xff7ê

	)

1601 #ifde‡
XK_THAI


1602 
	#XK_Thai_kokai
 0x0da1

	)

1603 
	#XK_Thai_khokhai
 0x0da2

	)

1604 
	#XK_Thai_khokhu©
 0x0da3

	)

1605 
	#XK_Thai_khokhwai
 0x0da4

	)

1606 
	#XK_Thai_khokh⁄
 0x0da5

	)

1607 
	#XK_Thai_kh‹akh™g
 0x0da6

	)

1608 
	#XK_Thai_ng⁄gu
 0x0da7

	)

1609 
	#XK_Thai_choch™
 0x0da8

	)

1610 
	#XK_Thai_chochög
 0x0da9

	)

1611 
	#XK_Thai_choch™g
 0x0dØ

	)

1612 
	#XK_Thai_soso
 0x0dab

	)

1613 
	#XK_Thai_choch€
 0x0da¯

	)

1614 
	#XK_Thai_yoyög
 0x0dad

	)

1615 
	#XK_Thai_dochada
 0x0d´

	)

1616 
	#XK_Thai_t›©ak
 0x0da‡

	)

1617 
	#XK_Thai_thŸh™
 0x0db0

	)

1618 
	#XK_Thai_th⁄™gm⁄tho
 0x0db1

	)

1619 
	#XK_Thai_th›huthao
 0x0db2

	)

1620 
	#XK_Thai_n⁄í
 0x0db3

	)

1621 
	#XK_Thai_dodek
 0x0db4

	)

1622 
	#XK_Thai_tŸao
 0x0db5

	)

1623 
	#XK_Thai_thŸhung
 0x0db6

	)

1624 
	#XK_Thai_thŸhah™
 0x0db7

	)

1625 
	#XK_Thai_thŸh⁄g
 0x0db8

	)

1626 
	#XK_Thai_n⁄u
 0x0db9

	)

1627 
	#XK_Thai_bobaimai
 0x0db®

	)

1628 
	#XK_Thai_p›œ
 0x0dbb

	)

1629 
	#XK_Thai_ph›hung
 0x0db¯

	)

1630 
	#XK_Thai_foÁ
 0x0dbd

	)

1631 
	#XK_Thai_ph›h™
 0x0dbê

	)

1632 
	#XK_Thai_foÁn
 0x0db‡

	)

1633 
	#XK_Thai_phoßmphao
 0x0dc0

	)

1634 
	#XK_Thai_moma
 0x0dc1

	)

1635 
	#XK_Thai_yoyak
 0x0dc2

	)

1636 
	#XK_Thai_r‹ua
 0x0dc3

	)

1637 
	#XK_Thai_ru
 0x0dc4

	)

1638 
	#XK_Thai_lﬁög
 0x0dc5

	)

1639 
	#XK_Thai_lu
 0x0dc6

	)

1640 
	#XK_Thai_wow´n
 0x0dc7

	)

1641 
	#XK_Thai_soßœ
 0x0dc8

	)

1642 
	#XK_Thai_s‹usi
 0x0dc9

	)

1643 
	#XK_Thai_sosua
 0x0dˇ

	)

1644 
	#XK_Thai_hohù
 0x0dcb

	)

1645 
	#XK_Thai_lochuœ
 0x0dc¯

	)

1646 
	#XK_Thai_ﬂng
 0x0dcd

	)

1647 
	#XK_Thai_h⁄okhuk
 0x0d˚

	)

1648 
	#XK_Thai_∑iy™noi
 0x0dc‡

	)

1649 
	#XK_Thai_ßøa
 0x0dd0

	)

1650 
	#XK_Thai_maih™ak©
 0x0dd1

	)

1651 
	#XK_Thai_ßøØ
 0x0dd2

	)

1652 
	#XK_Thai_ßøam
 0x0dd3

	)

1653 
	#XK_Thai_ßøi
 0x0dd4

	)

1654 
	#XK_Thai_ßøii
 0x0dd5

	)

1655 
	#XK_Thai_ßøue
 0x0dd6

	)

1656 
	#XK_Thai_ßøuì
 0x0dd7

	)

1657 
	#XK_Thai_ßøu
 0x0dd8

	)

1658 
	#XK_Thai_ßøuu
 0x0dd9

	)

1659 
	#XK_Thai_phöthu
 0x0dd®

	)

1660 
	#XK_Thai_maih™ak©_maôho
 0x0dde

	)

1661 
	#XK_Thai_baht
 0x0dd‡

	)

1662 
	#XK_Thai_ßøe
 0x0de0

	)

1663 
	#XK_Thai_ßø´
 0x0de1

	)

1664 
	#XK_Thai_ßøo
 0x0de2

	)

1665 
	#XK_Thai_ßøaimaimu™
 0x0de3

	)

1666 
	#XK_Thai_ßøaimaimÆai
 0x0de4

	)

1667 
	#XK_Thai_œkkh™gyao
 0x0de5

	)

1668 
	#XK_Thai_maiyamok
 0x0de6

	)

1669 
	#XK_Thai_maôaikhu
 0x0de7

	)

1670 
	#XK_Thai_maõk
 0x0de8

	)

1671 
	#XK_Thai_maôho
 0x0de9

	)

1672 
	#XK_Thai_maôri
 0x0dó

	)

1673 
	#XK_Thai_maich©èwa
 0x0deb

	)

1674 
	#XK_Thai_th™thakh©
 0x0de¯

	)

1675 
	#XK_Thai_nikhahô
 0x0ded

	)

1676 
	#XK_Thai_Àksun
 0x0df0

	)

1677 
	#XK_Thai_Àknung
 0x0df1

	)

1678 
	#XK_Thai_Àks⁄g
 0x0df2

	)

1679 
	#XK_Thai_Àkßm
 0x0df3

	)

1680 
	#XK_Thai_Àksi
 0x0df4

	)

1681 
	#XK_Thai_Àkha
 0x0df5

	)

1682 
	#XK_Thai_Àkhok
 0x0df6

	)

1683 
	#XK_Thai_Àkchë
 0x0df7

	)

1684 
	#XK_Thai_Àk∑ë
 0x0df8

	)

1685 
	#XK_Thai_Àkkao
 0x0df9

	)

1693 #ifde‡
XK_KOREAN


1695 
	#XK_H™gul
 0xff31

	)

1696 
	#XK_H™gul_Sèπ
 0xff32

	)

1697 
	#XK_H™gul_End
 0xff33

	)

1698 
	#XK_H™gul_H™ja
 0xff34

	)

1699 
	#XK_H™gul_Jamo
 0xff35

	)

1700 
	#XK_H™gul_Romaja
 0xff36

	)

1701 
	#XK_H™gul_Codeöput
 0xff37

	)

1702 
	#XK_H™gul_Je⁄ja
 0xff38

	)

1703 
	#XK_H™gul_B™ja
 0xff39

	)

1704 
	#XK_H™gul_PªH™ja
 0xff3®

	)

1705 
	#XK_H™gul_Po°H™ja
 0xff3b

	)

1706 
	#XK_H™gul_SögÀC™did©e
 0xff3¯

	)

1707 
	#XK_H™gul_Mu…ùÀC™did©e
 0xff3d

	)

1708 
	#XK_H™gul_PªviousC™did©e
 0xff3ê

	)

1709 
	#XK_H™gul_S≥cül
 0xff3‡

	)

1710 
	#XK_H™gul_swôch
 0xff7ê

	)

1713 
	#XK_H™gul_Kiyeog
 0x0ó1

	)

1714 
	#XK_H™gul_SßngKiyeog
 0x0ó2

	)

1715 
	#XK_H™gul_KiyeogSios
 0x0ó3

	)

1716 
	#XK_H™gul_Nõun
 0x0ó4

	)

1717 
	#XK_H™gul_NõunJõuj
 0x0ó5

	)

1718 
	#XK_H™gul_NõunHõuh
 0x0ó6

	)

1719 
	#XK_H™gul_Dikeud
 0x0ó7

	)

1720 
	#XK_H™gul_SßngDikeud
 0x0ó8

	)

1721 
	#XK_H™gul_Rõul
 0x0ó9

	)

1722 
	#XK_H™gul_RõulKiyeog
 0x0óa

	)

1723 
	#XK_H™gul_RõulMõum
 0x0ób

	)

1724 
	#XK_H™gul_RõulPõub
 0x0óc

	)

1725 
	#XK_H™gul_RõulSios
 0x0ód

	)

1726 
	#XK_H™gul_RõulTõut
 0x0óe

	)

1727 
	#XK_H™gul_RõulPhõuf
 0x0óf

	)

1728 
	#XK_H™gul_RõulHõuh
 0x0eb0

	)

1729 
	#XK_H™gul_Mõum
 0x0eb1

	)

1730 
	#XK_H™gul_Põub
 0x0eb2

	)

1731 
	#XK_H™gul_SßngPõub
 0x0eb3

	)

1732 
	#XK_H™gul_PõubSios
 0x0eb4

	)

1733 
	#XK_H™gul_Sios
 0x0eb5

	)

1734 
	#XK_H™gul_SßngSios
 0x0eb6

	)

1735 
	#XK_H™gul_Ieung
 0x0eb7

	)

1736 
	#XK_H™gul_Jõuj
 0x0eb8

	)

1737 
	#XK_H™gul_SßngJõuj
 0x0eb9

	)

1738 
	#XK_H™gul_Cõuc
 0x0eba

	)

1739 
	#XK_H™gul_Khõuq
 0x0ebb

	)

1740 
	#XK_H™gul_Tõut
 0x0ebc

	)

1741 
	#XK_H™gul_Phõuf
 0x0ebd

	)

1742 
	#XK_H™gul_Hõuh
 0x0ebe

	)

1745 
	#XK_H™gul_A
 0x0ebf

	)

1746 
	#XK_H™gul_AE
 0x0ec0

	)

1747 
	#XK_H™gul_YA
 0x0ec1

	)

1748 
	#XK_H™gul_YAE
 0x0ec2

	)

1749 
	#XK_H™gul_EO
 0x0ec3

	)

1750 
	#XK_H™gul_E
 0x0ec4

	)

1751 
	#XK_H™gul_YEO
 0x0ec5

	)

1752 
	#XK_H™gul_YE
 0x0ec6

	)

1753 
	#XK_H™gul_O
 0x0ec7

	)

1754 
	#XK_H™gul_WA
 0x0ec8

	)

1755 
	#XK_H™gul_WAE
 0x0ec9

	)

1756 
	#XK_H™gul_OE
 0x0eˇ

	)

1757 
	#XK_H™gul_YO
 0x0ecb

	)

1758 
	#XK_H™gul_U
 0x0ecc

	)

1759 
	#XK_H™gul_WEO
 0x0ecd

	)

1760 
	#XK_H™gul_WE
 0x0e˚

	)

1761 
	#XK_H™gul_WI
 0x0ecf

	)

1762 
	#XK_H™gul_YU
 0x0ed0

	)

1763 
	#XK_H™gul_EU
 0x0ed1

	)

1764 
	#XK_H™gul_YI
 0x0ed2

	)

1765 
	#XK_H™gul_I
 0x0ed3

	)

1768 
	#XK_H™gul_J_Kiyeog
 0x0ed4

	)

1769 
	#XK_H™gul_J_SßngKiyeog
 0x0ed5

	)

1770 
	#XK_H™gul_J_KiyeogSios
 0x0ed6

	)

1771 
	#XK_H™gul_J_Nõun
 0x0ed7

	)

1772 
	#XK_H™gul_J_NõunJõuj
 0x0ed8

	)

1773 
	#XK_H™gul_J_NõunHõuh
 0x0ed9

	)

1774 
	#XK_H™gul_J_Dikeud
 0x0eda

	)

1775 
	#XK_H™gul_J_Rõul
 0x0edb

	)

1776 
	#XK_H™gul_J_RõulKiyeog
 0x0edc

	)

1777 
	#XK_H™gul_J_RõulMõum
 0x0edd

	)

1778 
	#XK_H™gul_J_RõulPõub
 0x0ede

	)

1779 
	#XK_H™gul_J_RõulSios
 0x0edf

	)

1780 
	#XK_H™gul_J_RõulTõut
 0x0ì0

	)

1781 
	#XK_H™gul_J_RõulPhõuf
 0x0ì1

	)

1782 
	#XK_H™gul_J_RõulHõuh
 0x0ì2

	)

1783 
	#XK_H™gul_J_Mõum
 0x0ì3

	)

1784 
	#XK_H™gul_J_Põub
 0x0ì4

	)

1785 
	#XK_H™gul_J_PõubSios
 0x0ì5

	)

1786 
	#XK_H™gul_J_Sios
 0x0ì6

	)

1787 
	#XK_H™gul_J_SßngSios
 0x0ì7

	)

1788 
	#XK_H™gul_J_Ieung
 0x0ì8

	)

1789 
	#XK_H™gul_J_Jõuj
 0x0ì9

	)

1790 
	#XK_H™gul_J_Cõuc
 0x0ìa

	)

1791 
	#XK_H™gul_J_Khõuq
 0x0ìb

	)

1792 
	#XK_H™gul_J_Tõut
 0x0ìc

	)

1793 
	#XK_H™gul_J_Phõuf
 0x0ìd

	)

1794 
	#XK_H™gul_J_Hõuh
 0x0ìe

	)

1797 
	#XK_H™gul_RõulYe‹öHõuh
 0x0ìf

	)

1798 
	#XK_H™gul_Sunkye⁄geumMõum
 0x0ef0

	)

1799 
	#XK_H™gul_Sunkye⁄geumPõub
 0x0ef1

	)

1800 
	#XK_H™gul_P™Sios
 0x0ef2

	)

1801 
	#XK_H™gul_KkogjiDÆröIeung
 0x0ef3

	)

1802 
	#XK_H™gul_Sunkye⁄geumPhõuf
 0x0ef4

	)

1803 
	#XK_H™gul_Ye‹öHõuh
 0x0ef5

	)

1806 
	#XK_H™gul_AøeA
 0x0ef6

	)

1807 
	#XK_H™gul_AøeAE
 0x0ef7

	)

1810 
	#XK_H™gul_J_P™Sios
 0x0ef8

	)

1811 
	#XK_H™gul_J_KkogjiDÆröIeung
 0x0ef9

	)

1812 
	#XK_H™gul_J_Ye‹öHõuh
 0x0eÁ

	)

1815 
	#XK_K‹ón_W⁄
 0x0ef‡

	)

1823 #ifde‡
XK_ARMENIAN


1824 
	#XK_Armíün_lig©uª_ew
 0x1000587

	)

1825 
	#XK_Armíün_fuŒ_°›
 0x1000589

	)

1826 
	#XK_Armíün_vîjakë
 0x1000589

	)

1827 
	#XK_Armíün_£∑øti⁄_m¨k
 0x100055d

	)

1828 
	#XK_Armíün_but
 0x100055d

	)

1829 
	#XK_Armíün_hyphí
 0x100058®

	)

1830 
	#XK_Armíün_yíèm«
 0x100058®

	)

1831 
	#XK_Armíün_ex˛am
 0x100055¯

	)

1832 
	#XK_Armíün_am™ak
 0x100055¯

	)

1833 
	#XK_Armíün_ac˚¡
 0x100055b

	)

1834 
	#XK_Armíün_shesht
 0x100055b

	)

1835 
	#XK_Armíün_que°i⁄
 0x100055ê

	)

1836 
	#XK_Armíün_∑ruyk
 0x100055ê

	)

1837 
	#XK_Armíün_AYB
 0x1000531

	)

1838 
	#XK_Armíün_ayb
 0x1000561

	)

1839 
	#XK_Armíün_BEN
 0x1000532

	)

1840 
	#XK_Armíün_bí
 0x1000562

	)

1841 
	#XK_Armíün_GIM
 0x1000533

	)

1842 
	#XK_Armíün_gim
 0x1000563

	)

1843 
	#XK_Armíün_DA
 0x1000534

	)

1844 
	#XK_Armíün_da
 0x1000564

	)

1845 
	#XK_Armíün_YECH
 0x1000535

	)

1846 
	#XK_Armíün_yech
 0x1000565

	)

1847 
	#XK_Armíün_ZA
 0x1000536

	)

1848 
	#XK_Armíün_za
 0x1000566

	)

1849 
	#XK_Armíün_E
 0x1000537

	)

1850 
	#XK_Armíün_e
 0x1000567

	)

1851 
	#XK_Armíün_AT
 0x1000538

	)

1852 
	#XK_Armíün_©
 0x1000568

	)

1853 
	#XK_Armíün_TO
 0x1000539

	)

1854 
	#XK_Armíün_to
 0x1000569

	)

1855 
	#XK_Armíün_ZHE
 0x100053®

	)

1856 
	#XK_Armíün_zhe
 0x100056®

	)

1857 
	#XK_Armíün_INI
 0x100053b

	)

1858 
	#XK_Armíün_öi
 0x100056b

	)

1859 
	#XK_Armíün_LYUN
 0x100053¯

	)

1860 
	#XK_Armíün_lyun
 0x100056¯

	)

1861 
	#XK_Armíün_KHE
 0x100053d

	)

1862 
	#XK_Armíün_khe
 0x100056d

	)

1863 
	#XK_Armíün_TSA
 0x100053ê

	)

1864 
	#XK_Armíün_tß
 0x100056ê

	)

1865 
	#XK_Armíün_KEN
 0x100053‡

	)

1866 
	#XK_Armíün_kí
 0x100056‡

	)

1867 
	#XK_Armíün_HO
 0x1000540

	)

1868 
	#XK_Armíün_ho
 0x1000570

	)

1869 
	#XK_Armíün_DZA
 0x1000541

	)

1870 
	#XK_Armíün_dza
 0x1000571

	)

1871 
	#XK_Armíün_GHAT
 0x1000542

	)

1872 
	#XK_Armíün_gh©
 0x1000572

	)

1873 
	#XK_Armíün_TCHE
 0x1000543

	)

1874 
	#XK_Armíün_tche
 0x1000573

	)

1875 
	#XK_Armíün_MEN
 0x1000544

	)

1876 
	#XK_Armíün_mí
 0x1000574

	)

1877 
	#XK_Armíün_HI
 0x1000545

	)

1878 
	#XK_Armíün_hi
 0x1000575

	)

1879 
	#XK_Armíün_NU
 0x1000546

	)

1880 
	#XK_Armíün_nu
 0x1000576

	)

1881 
	#XK_Armíün_SHA
 0x1000547

	)

1882 
	#XK_Armíün_sha
 0x1000577

	)

1883 
	#XK_Armíün_VO
 0x1000548

	)

1884 
	#XK_Armíün_vo
 0x1000578

	)

1885 
	#XK_Armíün_CHA
 0x1000549

	)

1886 
	#XK_Armíün_cha
 0x1000579

	)

1887 
	#XK_Armíün_PE
 0x100054®

	)

1888 
	#XK_Armíün_≥
 0x100057®

	)

1889 
	#XK_Armíün_JE
 0x100054b

	)

1890 
	#XK_Armíün_je
 0x100057b

	)

1891 
	#XK_Armíün_RA
 0x100054¯

	)

1892 
	#XK_Armíün_ø
 0x100057¯

	)

1893 
	#XK_Armíün_SE
 0x100054d

	)

1894 
	#XK_Armíün_£
 0x100057d

	)

1895 
	#XK_Armíün_VEV
 0x100054ê

	)

1896 
	#XK_Armíün_vev
 0x100057ê

	)

1897 
	#XK_Armíün_TYUN
 0x100054‡

	)

1898 
	#XK_Armíün_tyun
 0x100057‡

	)

1899 
	#XK_Armíün_RE
 0x1000550

	)

1900 
	#XK_Armíün_ª
 0x1000580

	)

1901 
	#XK_Armíün_TSO
 0x1000551

	)

1902 
	#XK_Armíün_tso
 0x1000581

	)

1903 
	#XK_Armíün_VYUN
 0x1000552

	)

1904 
	#XK_Armíün_vyun
 0x1000582

	)

1905 
	#XK_Armíün_PYUR
 0x1000553

	)

1906 
	#XK_Armíün_pyur
 0x1000583

	)

1907 
	#XK_Armíün_KE
 0x1000554

	)

1908 
	#XK_Armíün_ke
 0x1000584

	)

1909 
	#XK_Armíün_O
 0x1000555

	)

1910 
	#XK_Armíün_o
 0x1000585

	)

1911 
	#XK_Armíün_FE
 0x1000556

	)

1912 
	#XK_Armíün_„
 0x1000586

	)

1913 
	#XK_Armíün_≠o°r›he
 0x100055®

	)

1920 #ifde‡
XK_GEORGIAN


1921 
	#XK_Ge‹gün_™
 0x10010d0

	)

1922 
	#XK_Ge‹gün_b™
 0x10010d1

	)

1923 
	#XK_Ge‹gün_g™
 0x10010d2

	)

1924 
	#XK_Ge‹gün_d⁄
 0x10010d3

	)

1925 
	#XK_Ge‹gün_í
 0x10010d4

	)

1926 
	#XK_Ge‹gün_vö
 0x10010d5

	)

1927 
	#XK_Ge‹gün_zí
 0x10010d6

	)

1928 
	#XK_Ge‹gün_èn
 0x10010d7

	)

1929 
	#XK_Ge‹gün_ö
 0x10010d8

	)

1930 
	#XK_Ge‹gün_k™
 0x10010d9

	)

1931 
	#XK_Ge‹gün_œs
 0x10010d®

	)

1932 
	#XK_Ge‹gün_m™
 0x10010db

	)

1933 
	#XK_Ge‹gün_«r
 0x10010d¯

	)

1934 
	#XK_Ge‹gün_⁄
 0x10010dd

	)

1935 
	#XK_Ge‹gün_∑r
 0x10010dê

	)

1936 
	#XK_Ge‹gün_zh¨
 0x10010d‡

	)

1937 
	#XK_Ge‹gün_øe
 0x10010e0

	)

1938 
	#XK_Ge‹gün_ßn
 0x10010e1

	)

1939 
	#XK_Ge‹gün_èr
 0x10010e2

	)

1940 
	#XK_Ge‹gün_un
 0x10010e3

	)

1941 
	#XK_Ge‹gün_ph¨
 0x10010e4

	)

1942 
	#XK_Ge‹gün_kh¨
 0x10010e5

	)

1943 
	#XK_Ge‹gün_gh™
 0x10010e6

	)

1944 
	#XK_Ge‹gün_q¨
 0x10010e7

	)

1945 
	#XK_Ge‹gün_shö
 0x10010e8

	)

1946 
	#XK_Ge‹gün_chö
 0x10010e9

	)

1947 
	#XK_Ge‹gün_ˇn
 0x10010ó

	)

1948 
	#XK_Ge‹gün_jû
 0x10010eb

	)

1949 
	#XK_Ge‹gün_cû
 0x10010e¯

	)

1950 
	#XK_Ge‹gün_ch¨
 0x10010ed

	)

1951 
	#XK_Ge‹gün_x™
 0x10010ì

	)

1952 
	#XK_Ge‹gün_jh™
 0x10010e‡

	)

1953 
	#XK_Ge‹gün_h´
 0x10010f0

	)

1954 
	#XK_Ge‹gün_he
 0x10010f1

	)

1955 
	#XK_Ge‹gün_hõ
 0x10010f2

	)

1956 
	#XK_Ge‹gün_we
 0x10010f3

	)

1957 
	#XK_Ge‹gün_h¨
 0x10010f4

	)

1958 
	#XK_Ge‹gün_h€
 0x10010f5

	)

1959 
	#XK_Ge‹gün_fi
 0x10010f6

	)

1966 #ifde‡
XK_CAUCASUS


1968 
	#XK_XabovedŸ
 0x1001e8®

	)

1969 
	#XK_Ibªve
 0x100012¯

	)

1970 
	#XK_Z°roke
 0x10001b5

	)

1971 
	#XK_Gˇr⁄
 0x10001e6

	)

1972 
	#XK_Oˇr⁄
 0x10001d1

	)

1973 
	#XK_Ob¨ªd
 0x100019‡

	)

1974 
	#XK_xabovedŸ
 0x1001e8b

	)

1975 
	#XK_ibªve
 0x100012d

	)

1976 
	#XK_z°roke
 0x10001b6

	)

1977 
	#XK_gˇr⁄
 0x10001e7

	)

1978 
	#XK_oˇr⁄
 0x10001d2

	)

1979 
	#XK_ob¨ªd
 0x1000275

	)

1980 
	#XK_SCHWA
 0x100018‡

	)

1981 
	#XK_schwa
 0x1000259

	)

1982 
	#XK_EZH
 0x10001b7

	)

1983 
	#XK_ezh
 0x1000292

	)

1986 
	#XK_LbñowdŸ
 0x1001e36

	)

1987 
	#XK_lbñowdŸ
 0x1001e37

	)

1994 #ifde‡
XK_VIETNAMESE


1995 
	#XK_AbñowdŸ
 0x1001ó0

	)

1996 
	#XK_abñowdŸ
 0x1001ó1

	)

1997 
	#XK_Ahook
 0x1001ó2

	)

1998 
	#XK_ahook
 0x1001ó3

	)

1999 
	#XK_AcúcumÊexacuã
 0x1001ó4

	)

2000 
	#XK_acúcumÊexacuã
 0x1001ó5

	)

2001 
	#XK_AcúcumÊexgøve
 0x1001ó6

	)

2002 
	#XK_acúcumÊexgøve
 0x1001ó7

	)

2003 
	#XK_AcúcumÊexhook
 0x1001ó8

	)

2004 
	#XK_acúcumÊexhook
 0x1001ó9

	)

2005 
	#XK_AcúcumÊextûde
 0x1001ó®

	)

2006 
	#XK_acúcumÊextûde
 0x1001ób

	)

2007 
	#XK_AcúcumÊexbñowdŸ
 0x1001ó¯

	)

2008 
	#XK_acúcumÊexbñowdŸ
 0x1001ód

	)

2009 
	#XK_Abªvócuã
 0x1001óê

	)

2010 
	#XK_abªvócuã
 0x1001ó‡

	)

2011 
	#XK_Abªvegøve
 0x1001eb0

	)

2012 
	#XK_abªvegøve
 0x1001eb1

	)

2013 
	#XK_Abªvehook
 0x1001eb2

	)

2014 
	#XK_abªvehook
 0x1001eb3

	)

2015 
	#XK_Abªvëûde
 0x1001eb4

	)

2016 
	#XK_abªvëûde
 0x1001eb5

	)

2017 
	#XK_AbªvebñowdŸ
 0x1001eb6

	)

2018 
	#XK_abªvebñowdŸ
 0x1001eb7

	)

2019 
	#XK_EbñowdŸ
 0x1001eb8

	)

2020 
	#XK_ebñowdŸ
 0x1001eb9

	)

2021 
	#XK_Ehook
 0x1001eb®

	)

2022 
	#XK_ehook
 0x1001ebb

	)

2023 
	#XK_Etûde
 0x1001eb¯

	)

2024 
	#XK_ëûde
 0x1001ebd

	)

2025 
	#XK_EcúcumÊexacuã
 0x1001ebê

	)

2026 
	#XK_ecúcumÊexacuã
 0x1001eb‡

	)

2027 
	#XK_EcúcumÊexgøve
 0x1001ec0

	)

2028 
	#XK_ecúcumÊexgøve
 0x1001ec1

	)

2029 
	#XK_EcúcumÊexhook
 0x1001ec2

	)

2030 
	#XK_ecúcumÊexhook
 0x1001ec3

	)

2031 
	#XK_EcúcumÊextûde
 0x1001ec4

	)

2032 
	#XK_ecúcumÊextûde
 0x1001ec5

	)

2033 
	#XK_EcúcumÊexbñowdŸ
 0x1001ec6

	)

2034 
	#XK_ecúcumÊexbñowdŸ
 0x1001ec7

	)

2035 
	#XK_Ihook
 0x1001ec8

	)

2036 
	#XK_ihook
 0x1001ec9

	)

2037 
	#XK_IbñowdŸ
 0x1001eˇ

	)

2038 
	#XK_ibñowdŸ
 0x1001ecb

	)

2039 
	#XK_ObñowdŸ
 0x1001ec¯

	)

2040 
	#XK_obñowdŸ
 0x1001ecd

	)

2041 
	#XK_Ohook
 0x1001e˚

	)

2042 
	#XK_ohook
 0x1001ec‡

	)

2043 
	#XK_OcúcumÊexacuã
 0x1001ed0

	)

2044 
	#XK_ocúcumÊexacuã
 0x1001ed1

	)

2045 
	#XK_OcúcumÊexgøve
 0x1001ed2

	)

2046 
	#XK_ocúcumÊexgøve
 0x1001ed3

	)

2047 
	#XK_OcúcumÊexhook
 0x1001ed4

	)

2048 
	#XK_ocúcumÊexhook
 0x1001ed5

	)

2049 
	#XK_OcúcumÊextûde
 0x1001ed6

	)

2050 
	#XK_ocúcumÊextûde
 0x1001ed7

	)

2051 
	#XK_OcúcumÊexbñowdŸ
 0x1001ed8

	)

2052 
	#XK_ocúcumÊexbñowdŸ
 0x1001ed9

	)

2053 
	#XK_Oh‹«cuã
 0x1001ed®

	)

2054 
	#XK_oh‹«cuã
 0x1001edb

	)

2055 
	#XK_Oh‹ngøve
 0x1001ed¯

	)

2056 
	#XK_oh‹ngøve
 0x1001edd

	)

2057 
	#XK_Oh‹nhook
 0x1001edê

	)

2058 
	#XK_oh‹nhook
 0x1001ed‡

	)

2059 
	#XK_Oh‹¡ûde
 0x1001ì0

	)

2060 
	#XK_oh‹¡ûde
 0x1001ì1

	)

2061 
	#XK_Oh‹nbñowdŸ
 0x1001ì2

	)

2062 
	#XK_oh‹nbñowdŸ
 0x1001ì3

	)

2063 
	#XK_UbñowdŸ
 0x1001ì4

	)

2064 
	#XK_ubñowdŸ
 0x1001ì5

	)

2065 
	#XK_Uhook
 0x1001ì6

	)

2066 
	#XK_uhook
 0x1001ì7

	)

2067 
	#XK_Uh‹«cuã
 0x1001ì8

	)

2068 
	#XK_uh‹«cuã
 0x1001ì9

	)

2069 
	#XK_Uh‹ngøve
 0x1001ì®

	)

2070 
	#XK_uh‹ngøve
 0x1001ìb

	)

2071 
	#XK_Uh‹nhook
 0x1001ì¯

	)

2072 
	#XK_uh‹nhook
 0x1001ìd

	)

2073 
	#XK_Uh‹¡ûde
 0x1001ìê

	)

2074 
	#XK_uh‹¡ûde
 0x1001ì‡

	)

2075 
	#XK_Uh‹nbñowdŸ
 0x1001ef0

	)

2076 
	#XK_uh‹nbñowdŸ
 0x1001ef1

	)

2077 
	#XK_YbñowdŸ
 0x1001ef4

	)

2078 
	#XK_ybñowdŸ
 0x1001ef5

	)

2079 
	#XK_Yhook
 0x1001ef6

	)

2080 
	#XK_yhook
 0x1001ef7

	)

2081 
	#XK_Ytûde
 0x1001ef8

	)

2082 
	#XK_ytûde
 0x1001ef9

	)

2083 
	#XK_Oh‹n
 0x10001a0

	)

2084 
	#XK_oh‹n
 0x10001a1

	)

2085 
	#XK_Uh‹n
 0x10001a‡

	)

2086 
	#XK_uh‹n
 0x10001b0

	)

2090 #ifde‡
XK_CURRENCY


2091 
	#XK_EcuSign
 0x10020a0

	)

2092 
	#XK_Cﬁ⁄Sign
 0x10020a1

	)

2093 
	#XK_CruzeúoSign
 0x10020a2

	)

2094 
	#XK_FFøncSign
 0x10020a3

	)

2095 
	#XK_LúaSign
 0x10020a4

	)

2096 
	#XK_MûlSign
 0x10020a5

	)

2097 
	#XK_NaúaSign
 0x10020a6

	)

2098 
	#XK_Pe£èSign
 0x10020a7

	)

2099 
	#XK_Ru≥eSign
 0x10020a8

	)

2100 
	#XK_W⁄Sign
 0x10020a9

	)

2101 
	#XK_NewSheqñSign
 0x10020Ø

	)

2102 
	#XK_D⁄gSign
 0x10020ab

	)

2103 
	#XK_EuroSign
 0x20a¯

	)

2106 #ifde‡
XK_MATHEMATICAL


2108 
	#XK_zîosu≥ri‹
 0x1002070

	)

2109 
	#XK_foursu≥ri‹
 0x1002074

	)

2110 
	#XK_fivesu≥ri‹
 0x1002075

	)

2111 
	#XK_sixsu≥ri‹
 0x1002076

	)

2112 
	#XK_£vísu≥ri‹
 0x1002077

	)

2113 
	#XK_eightsu≥ri‹
 0x1002078

	)

2114 
	#XK_nöesu≥ri‹
 0x1002079

	)

2115 
	#XK_zîosubs¸ùt
 0x1002080

	)

2116 
	#XK_⁄esubs¸ùt
 0x1002081

	)

2117 
	#XK_twosubs¸ùt
 0x1002082

	)

2118 
	#XK_thªesubs¸ùt
 0x1002083

	)

2119 
	#XK_foursubs¸ùt
 0x1002084

	)

2120 
	#XK_fivesubs¸ùt
 0x1002085

	)

2121 
	#XK_sixsubs¸ùt
 0x1002086

	)

2122 
	#XK_£vísubs¸ùt
 0x1002087

	)

2123 
	#XK_eightsubs¸ùt
 0x1002088

	)

2124 
	#XK_nöesubs¸ùt
 0x1002089

	)

2125 
	#XK_∑πdif„ª¡ül
 0x1002202

	)

2126 
	#XK_em±y£t
 0x1002205

	)

2127 
	#XK_ñemítof
 0x1002208

	)

2128 
	#XK_nŸñemítof
 0x1002209

	)

2129 
	#XK_c⁄èößs
 0x100220B

	)

2130 
	#XK_squ¨îoŸ
 0x100221A

	)

2131 
	#XK_cubîoŸ
 0x100221B

	)

2132 
	#XK_fouπhroŸ
 0x100221C

	)

2133 
	#XK_döãgøl
 0x100222C

	)

2134 
	#XK_töãgøl
 0x100222D

	)

2135 
	#XK_beˇu£
 0x1002235

	)

2136 
	#XK_≠¥oxeq
 0x1002248

	)

2137 
	#XK_nŸ≠¥oxeq
 0x1002247

	)

2138 
	#XK_nŸidítiˇl
 0x1002262

	)

2139 
	#XK_°ri˘eq
 0x1002263

	)

2142 #ifde‡
XK_BRAILLE


2143 
	#XK_bøûÀ_dŸ_1
 0xfff1

	)

2144 
	#XK_bøûÀ_dŸ_2
 0xfff2

	)

2145 
	#XK_bøûÀ_dŸ_3
 0xfff3

	)

2146 
	#XK_bøûÀ_dŸ_4
 0xfff4

	)

2147 
	#XK_bøûÀ_dŸ_5
 0xfff5

	)

2148 
	#XK_bøûÀ_dŸ_6
 0xfff6

	)

2149 
	#XK_bøûÀ_dŸ_7
 0xfff7

	)

2150 
	#XK_bøûÀ_dŸ_8
 0xfff8

	)

2151 
	#XK_bøûÀ_dŸ_9
 0xfff9

	)

2152 
	#XK_bøûÀ_dŸ_10
 0xffÁ

	)

2153 
	#XK_bøûÀ_bœnk
 0x1002800

	)

2154 
	#XK_bøûÀ_dŸs_1
 0x1002801

	)

2155 
	#XK_bøûÀ_dŸs_2
 0x1002802

	)

2156 
	#XK_bøûÀ_dŸs_12
 0x1002803

	)

2157 
	#XK_bøûÀ_dŸs_3
 0x1002804

	)

2158 
	#XK_bøûÀ_dŸs_13
 0x1002805

	)

2159 
	#XK_bøûÀ_dŸs_23
 0x1002806

	)

2160 
	#XK_bøûÀ_dŸs_123
 0x1002807

	)

2161 
	#XK_bøûÀ_dŸs_4
 0x1002808

	)

2162 
	#XK_bøûÀ_dŸs_14
 0x1002809

	)

2163 
	#XK_bøûÀ_dŸs_24
 0x100280®

	)

2164 
	#XK_bøûÀ_dŸs_124
 0x100280b

	)

2165 
	#XK_bøûÀ_dŸs_34
 0x100280¯

	)

2166 
	#XK_bøûÀ_dŸs_134
 0x100280d

	)

2167 
	#XK_bøûÀ_dŸs_234
 0x100280ê

	)

2168 
	#XK_bøûÀ_dŸs_1234
 0x100280‡

	)

2169 
	#XK_bøûÀ_dŸs_5
 0x1002810

	)

2170 
	#XK_bøûÀ_dŸs_15
 0x1002811

	)

2171 
	#XK_bøûÀ_dŸs_25
 0x1002812

	)

2172 
	#XK_bøûÀ_dŸs_125
 0x1002813

	)

2173 
	#XK_bøûÀ_dŸs_35
 0x1002814

	)

2174 
	#XK_bøûÀ_dŸs_135
 0x1002815

	)

2175 
	#XK_bøûÀ_dŸs_235
 0x1002816

	)

2176 
	#XK_bøûÀ_dŸs_1235
 0x1002817

	)

2177 
	#XK_bøûÀ_dŸs_45
 0x1002818

	)

2178 
	#XK_bøûÀ_dŸs_145
 0x1002819

	)

2179 
	#XK_bøûÀ_dŸs_245
 0x100281®

	)

2180 
	#XK_bøûÀ_dŸs_1245
 0x100281b

	)

2181 
	#XK_bøûÀ_dŸs_345
 0x100281¯

	)

2182 
	#XK_bøûÀ_dŸs_1345
 0x100281d

	)

2183 
	#XK_bøûÀ_dŸs_2345
 0x100281ê

	)

2184 
	#XK_bøûÀ_dŸs_12345
 0x100281‡

	)

2185 
	#XK_bøûÀ_dŸs_6
 0x1002820

	)

2186 
	#XK_bøûÀ_dŸs_16
 0x1002821

	)

2187 
	#XK_bøûÀ_dŸs_26
 0x1002822

	)

2188 
	#XK_bøûÀ_dŸs_126
 0x1002823

	)

2189 
	#XK_bøûÀ_dŸs_36
 0x1002824

	)

2190 
	#XK_bøûÀ_dŸs_136
 0x1002825

	)

2191 
	#XK_bøûÀ_dŸs_236
 0x1002826

	)

2192 
	#XK_bøûÀ_dŸs_1236
 0x1002827

	)

2193 
	#XK_bøûÀ_dŸs_46
 0x1002828

	)

2194 
	#XK_bøûÀ_dŸs_146
 0x1002829

	)

2195 
	#XK_bøûÀ_dŸs_246
 0x100282®

	)

2196 
	#XK_bøûÀ_dŸs_1246
 0x100282b

	)

2197 
	#XK_bøûÀ_dŸs_346
 0x100282¯

	)

2198 
	#XK_bøûÀ_dŸs_1346
 0x100282d

	)

2199 
	#XK_bøûÀ_dŸs_2346
 0x100282ê

	)

2200 
	#XK_bøûÀ_dŸs_12346
 0x100282‡

	)

2201 
	#XK_bøûÀ_dŸs_56
 0x1002830

	)

2202 
	#XK_bøûÀ_dŸs_156
 0x1002831

	)

2203 
	#XK_bøûÀ_dŸs_256
 0x1002832

	)

2204 
	#XK_bøûÀ_dŸs_1256
 0x1002833

	)

2205 
	#XK_bøûÀ_dŸs_356
 0x1002834

	)

2206 
	#XK_bøûÀ_dŸs_1356
 0x1002835

	)

2207 
	#XK_bøûÀ_dŸs_2356
 0x1002836

	)

2208 
	#XK_bøûÀ_dŸs_12356
 0x1002837

	)

2209 
	#XK_bøûÀ_dŸs_456
 0x1002838

	)

2210 
	#XK_bøûÀ_dŸs_1456
 0x1002839

	)

2211 
	#XK_bøûÀ_dŸs_2456
 0x100283®

	)

2212 
	#XK_bøûÀ_dŸs_12456
 0x100283b

	)

2213 
	#XK_bøûÀ_dŸs_3456
 0x100283¯

	)

2214 
	#XK_bøûÀ_dŸs_13456
 0x100283d

	)

2215 
	#XK_bøûÀ_dŸs_23456
 0x100283ê

	)

2216 
	#XK_bøûÀ_dŸs_123456
 0x100283‡

	)

2217 
	#XK_bøûÀ_dŸs_7
 0x1002840

	)

2218 
	#XK_bøûÀ_dŸs_17
 0x1002841

	)

2219 
	#XK_bøûÀ_dŸs_27
 0x1002842

	)

2220 
	#XK_bøûÀ_dŸs_127
 0x1002843

	)

2221 
	#XK_bøûÀ_dŸs_37
 0x1002844

	)

2222 
	#XK_bøûÀ_dŸs_137
 0x1002845

	)

2223 
	#XK_bøûÀ_dŸs_237
 0x1002846

	)

2224 
	#XK_bøûÀ_dŸs_1237
 0x1002847

	)

2225 
	#XK_bøûÀ_dŸs_47
 0x1002848

	)

2226 
	#XK_bøûÀ_dŸs_147
 0x1002849

	)

2227 
	#XK_bøûÀ_dŸs_247
 0x100284®

	)

2228 
	#XK_bøûÀ_dŸs_1247
 0x100284b

	)

2229 
	#XK_bøûÀ_dŸs_347
 0x100284¯

	)

2230 
	#XK_bøûÀ_dŸs_1347
 0x100284d

	)

2231 
	#XK_bøûÀ_dŸs_2347
 0x100284ê

	)

2232 
	#XK_bøûÀ_dŸs_12347
 0x100284‡

	)

2233 
	#XK_bøûÀ_dŸs_57
 0x1002850

	)

2234 
	#XK_bøûÀ_dŸs_157
 0x1002851

	)

2235 
	#XK_bøûÀ_dŸs_257
 0x1002852

	)

2236 
	#XK_bøûÀ_dŸs_1257
 0x1002853

	)

2237 
	#XK_bøûÀ_dŸs_357
 0x1002854

	)

2238 
	#XK_bøûÀ_dŸs_1357
 0x1002855

	)

2239 
	#XK_bøûÀ_dŸs_2357
 0x1002856

	)

2240 
	#XK_bøûÀ_dŸs_12357
 0x1002857

	)

2241 
	#XK_bøûÀ_dŸs_457
 0x1002858

	)

2242 
	#XK_bøûÀ_dŸs_1457
 0x1002859

	)

2243 
	#XK_bøûÀ_dŸs_2457
 0x100285®

	)

2244 
	#XK_bøûÀ_dŸs_12457
 0x100285b

	)

2245 
	#XK_bøûÀ_dŸs_3457
 0x100285¯

	)

2246 
	#XK_bøûÀ_dŸs_13457
 0x100285d

	)

2247 
	#XK_bøûÀ_dŸs_23457
 0x100285ê

	)

2248 
	#XK_bøûÀ_dŸs_123457
 0x100285‡

	)

2249 
	#XK_bøûÀ_dŸs_67
 0x1002860

	)

2250 
	#XK_bøûÀ_dŸs_167
 0x1002861

	)

2251 
	#XK_bøûÀ_dŸs_267
 0x1002862

	)

2252 
	#XK_bøûÀ_dŸs_1267
 0x1002863

	)

2253 
	#XK_bøûÀ_dŸs_367
 0x1002864

	)

2254 
	#XK_bøûÀ_dŸs_1367
 0x1002865

	)

2255 
	#XK_bøûÀ_dŸs_2367
 0x1002866

	)

2256 
	#XK_bøûÀ_dŸs_12367
 0x1002867

	)

2257 
	#XK_bøûÀ_dŸs_467
 0x1002868

	)

2258 
	#XK_bøûÀ_dŸs_1467
 0x1002869

	)

2259 
	#XK_bøûÀ_dŸs_2467
 0x100286®

	)

2260 
	#XK_bøûÀ_dŸs_12467
 0x100286b

	)

2261 
	#XK_bøûÀ_dŸs_3467
 0x100286¯

	)

2262 
	#XK_bøûÀ_dŸs_13467
 0x100286d

	)

2263 
	#XK_bøûÀ_dŸs_23467
 0x100286ê

	)

2264 
	#XK_bøûÀ_dŸs_123467
 0x100286‡

	)

2265 
	#XK_bøûÀ_dŸs_567
 0x1002870

	)

2266 
	#XK_bøûÀ_dŸs_1567
 0x1002871

	)

2267 
	#XK_bøûÀ_dŸs_2567
 0x1002872

	)

2268 
	#XK_bøûÀ_dŸs_12567
 0x1002873

	)

2269 
	#XK_bøûÀ_dŸs_3567
 0x1002874

	)

2270 
	#XK_bøûÀ_dŸs_13567
 0x1002875

	)

2271 
	#XK_bøûÀ_dŸs_23567
 0x1002876

	)

2272 
	#XK_bøûÀ_dŸs_123567
 0x1002877

	)

2273 
	#XK_bøûÀ_dŸs_4567
 0x1002878

	)

2274 
	#XK_bøûÀ_dŸs_14567
 0x1002879

	)

2275 
	#XK_bøûÀ_dŸs_24567
 0x100287®

	)

2276 
	#XK_bøûÀ_dŸs_124567
 0x100287b

	)

2277 
	#XK_bøûÀ_dŸs_34567
 0x100287¯

	)

2278 
	#XK_bøûÀ_dŸs_134567
 0x100287d

	)

2279 
	#XK_bøûÀ_dŸs_234567
 0x100287ê

	)

2280 
	#XK_bøûÀ_dŸs_1234567
 0x100287‡

	)

2281 
	#XK_bøûÀ_dŸs_8
 0x1002880

	)

2282 
	#XK_bøûÀ_dŸs_18
 0x1002881

	)

2283 
	#XK_bøûÀ_dŸs_28
 0x1002882

	)

2284 
	#XK_bøûÀ_dŸs_128
 0x1002883

	)

2285 
	#XK_bøûÀ_dŸs_38
 0x1002884

	)

2286 
	#XK_bøûÀ_dŸs_138
 0x1002885

	)

2287 
	#XK_bøûÀ_dŸs_238
 0x1002886

	)

2288 
	#XK_bøûÀ_dŸs_1238
 0x1002887

	)

2289 
	#XK_bøûÀ_dŸs_48
 0x1002888

	)

2290 
	#XK_bøûÀ_dŸs_148
 0x1002889

	)

2291 
	#XK_bøûÀ_dŸs_248
 0x100288®

	)

2292 
	#XK_bøûÀ_dŸs_1248
 0x100288b

	)

2293 
	#XK_bøûÀ_dŸs_348
 0x100288¯

	)

2294 
	#XK_bøûÀ_dŸs_1348
 0x100288d

	)

2295 
	#XK_bøûÀ_dŸs_2348
 0x100288ê

	)

2296 
	#XK_bøûÀ_dŸs_12348
 0x100288‡

	)

2297 
	#XK_bøûÀ_dŸs_58
 0x1002890

	)

2298 
	#XK_bøûÀ_dŸs_158
 0x1002891

	)

2299 
	#XK_bøûÀ_dŸs_258
 0x1002892

	)

2300 
	#XK_bøûÀ_dŸs_1258
 0x1002893

	)

2301 
	#XK_bøûÀ_dŸs_358
 0x1002894

	)

2302 
	#XK_bøûÀ_dŸs_1358
 0x1002895

	)

2303 
	#XK_bøûÀ_dŸs_2358
 0x1002896

	)

2304 
	#XK_bøûÀ_dŸs_12358
 0x1002897

	)

2305 
	#XK_bøûÀ_dŸs_458
 0x1002898

	)

2306 
	#XK_bøûÀ_dŸs_1458
 0x1002899

	)

2307 
	#XK_bøûÀ_dŸs_2458
 0x100289®

	)

2308 
	#XK_bøûÀ_dŸs_12458
 0x100289b

	)

2309 
	#XK_bøûÀ_dŸs_3458
 0x100289¯

	)

2310 
	#XK_bøûÀ_dŸs_13458
 0x100289d

	)

2311 
	#XK_bøûÀ_dŸs_23458
 0x100289ê

	)

2312 
	#XK_bøûÀ_dŸs_123458
 0x100289‡

	)

2313 
	#XK_bøûÀ_dŸs_68
 0x10028a0

	)

2314 
	#XK_bøûÀ_dŸs_168
 0x10028a1

	)

2315 
	#XK_bøûÀ_dŸs_268
 0x10028a2

	)

2316 
	#XK_bøûÀ_dŸs_1268
 0x10028a3

	)

2317 
	#XK_bøûÀ_dŸs_368
 0x10028a4

	)

2318 
	#XK_bøûÀ_dŸs_1368
 0x10028a5

	)

2319 
	#XK_bøûÀ_dŸs_2368
 0x10028a6

	)

2320 
	#XK_bøûÀ_dŸs_12368
 0x10028a7

	)

2321 
	#XK_bøûÀ_dŸs_468
 0x10028a8

	)

2322 
	#XK_bøûÀ_dŸs_1468
 0x10028a9

	)

2323 
	#XK_bøûÀ_dŸs_2468
 0x10028Ø

	)

2324 
	#XK_bøûÀ_dŸs_12468
 0x10028ab

	)

2325 
	#XK_bøûÀ_dŸs_3468
 0x10028a¯

	)

2326 
	#XK_bøûÀ_dŸs_13468
 0x10028ad

	)

2327 
	#XK_bøûÀ_dŸs_23468
 0x10028´

	)

2328 
	#XK_bøûÀ_dŸs_123468
 0x10028a‡

	)

2329 
	#XK_bøûÀ_dŸs_568
 0x10028b0

	)

2330 
	#XK_bøûÀ_dŸs_1568
 0x10028b1

	)

2331 
	#XK_bøûÀ_dŸs_2568
 0x10028b2

	)

2332 
	#XK_bøûÀ_dŸs_12568
 0x10028b3

	)

2333 
	#XK_bøûÀ_dŸs_3568
 0x10028b4

	)

2334 
	#XK_bøûÀ_dŸs_13568
 0x10028b5

	)

2335 
	#XK_bøûÀ_dŸs_23568
 0x10028b6

	)

2336 
	#XK_bøûÀ_dŸs_123568
 0x10028b7

	)

2337 
	#XK_bøûÀ_dŸs_4568
 0x10028b8

	)

2338 
	#XK_bøûÀ_dŸs_14568
 0x10028b9

	)

2339 
	#XK_bøûÀ_dŸs_24568
 0x10028b®

	)

2340 
	#XK_bøûÀ_dŸs_124568
 0x10028bb

	)

2341 
	#XK_bøûÀ_dŸs_34568
 0x10028b¯

	)

2342 
	#XK_bøûÀ_dŸs_134568
 0x10028bd

	)

2343 
	#XK_bøûÀ_dŸs_234568
 0x10028bê

	)

2344 
	#XK_bøûÀ_dŸs_1234568
 0x10028b‡

	)

2345 
	#XK_bøûÀ_dŸs_78
 0x10028c0

	)

2346 
	#XK_bøûÀ_dŸs_178
 0x10028c1

	)

2347 
	#XK_bøûÀ_dŸs_278
 0x10028c2

	)

2348 
	#XK_bøûÀ_dŸs_1278
 0x10028c3

	)

2349 
	#XK_bøûÀ_dŸs_378
 0x10028c4

	)

2350 
	#XK_bøûÀ_dŸs_1378
 0x10028c5

	)

2351 
	#XK_bøûÀ_dŸs_2378
 0x10028c6

	)

2352 
	#XK_bøûÀ_dŸs_12378
 0x10028c7

	)

2353 
	#XK_bøûÀ_dŸs_478
 0x10028c8

	)

2354 
	#XK_bøûÀ_dŸs_1478
 0x10028c9

	)

2355 
	#XK_bøûÀ_dŸs_2478
 0x10028ˇ

	)

2356 
	#XK_bøûÀ_dŸs_12478
 0x10028cb

	)

2357 
	#XK_bøûÀ_dŸs_3478
 0x10028c¯

	)

2358 
	#XK_bøûÀ_dŸs_13478
 0x10028cd

	)

2359 
	#XK_bøûÀ_dŸs_23478
 0x10028˚

	)

2360 
	#XK_bøûÀ_dŸs_123478
 0x10028c‡

	)

2361 
	#XK_bøûÀ_dŸs_578
 0x10028d0

	)

2362 
	#XK_bøûÀ_dŸs_1578
 0x10028d1

	)

2363 
	#XK_bøûÀ_dŸs_2578
 0x10028d2

	)

2364 
	#XK_bøûÀ_dŸs_12578
 0x10028d3

	)

2365 
	#XK_bøûÀ_dŸs_3578
 0x10028d4

	)

2366 
	#XK_bøûÀ_dŸs_13578
 0x10028d5

	)

2367 
	#XK_bøûÀ_dŸs_23578
 0x10028d6

	)

2368 
	#XK_bøûÀ_dŸs_123578
 0x10028d7

	)

2369 
	#XK_bøûÀ_dŸs_4578
 0x10028d8

	)

2370 
	#XK_bøûÀ_dŸs_14578
 0x10028d9

	)

2371 
	#XK_bøûÀ_dŸs_24578
 0x10028d®

	)

2372 
	#XK_bøûÀ_dŸs_124578
 0x10028db

	)

2373 
	#XK_bøûÀ_dŸs_34578
 0x10028d¯

	)

2374 
	#XK_bøûÀ_dŸs_134578
 0x10028dd

	)

2375 
	#XK_bøûÀ_dŸs_234578
 0x10028dê

	)

2376 
	#XK_bøûÀ_dŸs_1234578
 0x10028d‡

	)

2377 
	#XK_bøûÀ_dŸs_678
 0x10028e0

	)

2378 
	#XK_bøûÀ_dŸs_1678
 0x10028e1

	)

2379 
	#XK_bøûÀ_dŸs_2678
 0x10028e2

	)

2380 
	#XK_bøûÀ_dŸs_12678
 0x10028e3

	)

2381 
	#XK_bøûÀ_dŸs_3678
 0x10028e4

	)

2382 
	#XK_bøûÀ_dŸs_13678
 0x10028e5

	)

2383 
	#XK_bøûÀ_dŸs_23678
 0x10028e6

	)

2384 
	#XK_bøûÀ_dŸs_123678
 0x10028e7

	)

2385 
	#XK_bøûÀ_dŸs_4678
 0x10028e8

	)

2386 
	#XK_bøûÀ_dŸs_14678
 0x10028e9

	)

2387 
	#XK_bøûÀ_dŸs_24678
 0x10028ó

	)

2388 
	#XK_bøûÀ_dŸs_124678
 0x10028eb

	)

2389 
	#XK_bøûÀ_dŸs_34678
 0x10028e¯

	)

2390 
	#XK_bøûÀ_dŸs_134678
 0x10028ed

	)

2391 
	#XK_bøûÀ_dŸs_234678
 0x10028ì

	)

2392 
	#XK_bøûÀ_dŸs_1234678
 0x10028e‡

	)

2393 
	#XK_bøûÀ_dŸs_5678
 0x10028f0

	)

2394 
	#XK_bøûÀ_dŸs_15678
 0x10028f1

	)

2395 
	#XK_bøûÀ_dŸs_25678
 0x10028f2

	)

2396 
	#XK_bøûÀ_dŸs_125678
 0x10028f3

	)

2397 
	#XK_bøûÀ_dŸs_35678
 0x10028f4

	)

2398 
	#XK_bøûÀ_dŸs_135678
 0x10028f5

	)

2399 
	#XK_bøûÀ_dŸs_235678
 0x10028f6

	)

2400 
	#XK_bøûÀ_dŸs_1235678
 0x10028f7

	)

2401 
	#XK_bøûÀ_dŸs_45678
 0x10028f8

	)

2402 
	#XK_bøûÀ_dŸs_145678
 0x10028f9

	)

2403 
	#XK_bøûÀ_dŸs_245678
 0x10028Á

	)

2404 
	#XK_bøûÀ_dŸs_1245678
 0x10028fb

	)

2405 
	#XK_bøûÀ_dŸs_345678
 0x10028f¯

	)

2406 
	#XK_bøûÀ_dŸs_1345678
 0x10028fd

	)

2407 
	#XK_bøûÀ_dŸs_2345678
 0x10028„

	)

2408 
	#XK_bøûÀ_dŸs_12345678
 0x10028f‡

	)

2416 #ifde‡
XK_SINHALA


2417 
	#XK_Söh_ng
 0x1000d82

	)

2418 
	#XK_Söh_h2
 0x1000d83

	)

2419 
	#XK_Söh_a
 0x1000d85

	)

2420 
	#XK_Söh_Ø
 0x1000d86

	)

2421 
	#XK_Söh_´
 0x1000d87

	)

2422 
	#XK_Söh_´e
 0x1000d88

	)

2423 
	#XK_Söh_i
 0x1000d89

	)

2424 
	#XK_Söh_ii
 0x1000d8®

	)

2425 
	#XK_Söh_u
 0x1000d8b

	)

2426 
	#XK_Söh_uu
 0x1000d8¯

	)

2427 
	#XK_Söh_ri
 0x1000d8d

	)

2428 
	#XK_Söh_rii
 0x1000d8ê

	)

2429 
	#XK_Söh_lu
 0x1000d8‡

	)

2430 
	#XK_Söh_luu
 0x1000d90

	)

2431 
	#XK_Söh_e
 0x1000d91

	)

2432 
	#XK_Söh_ì
 0x1000d92

	)

2433 
	#XK_Söh_ai
 0x1000d93

	)

2434 
	#XK_Söh_o
 0x1000d94

	)

2435 
	#XK_Söh_oo
 0x1000d95

	)

2436 
	#XK_Söh_au
 0x1000d96

	)

2437 
	#XK_Söh_ka
 0x1000d9®

	)

2438 
	#XK_Söh_kha
 0x1000d9b

	)

2439 
	#XK_Söh_ga
 0x1000d9¯

	)

2440 
	#XK_Söh_gha
 0x1000d9d

	)

2441 
	#XK_Söh_ng2
 0x1000d9ê

	)

2442 
	#XK_Söh_nga
 0x1000d9‡

	)

2443 
	#XK_Söh_ˇ
 0x1000da0

	)

2444 
	#XK_Söh_cha
 0x1000da1

	)

2445 
	#XK_Söh_ja
 0x1000da2

	)

2446 
	#XK_Söh_jha
 0x1000da3

	)

2447 
	#XK_Söh_nya
 0x1000da4

	)

2448 
	#XK_Söh_jnya
 0x1000da5

	)

2449 
	#XK_Söh_nja
 0x1000da6

	)

2450 
	#XK_Söh_âa
 0x1000da7

	)

2451 
	#XK_Söh_âha
 0x1000da8

	)

2452 
	#XK_Söh_dda
 0x1000da9

	)

2453 
	#XK_Söh_ddha
 0x1000dØ

	)

2454 
	#XK_Söh_¬a
 0x1000dab

	)

2455 
	#XK_Söh_ndda
 0x1000da¯

	)

2456 
	#XK_Söh_tha
 0x1000dad

	)

2457 
	#XK_Söh_thha
 0x1000d´

	)

2458 
	#XK_Söh_dha
 0x1000da‡

	)

2459 
	#XK_Söh_dhha
 0x1000db0

	)

2460 
	#XK_Söh_«
 0x1000db1

	)

2461 
	#XK_Söh_ndha
 0x1000db3

	)

2462 
	#XK_Söh_∑
 0x1000db4

	)

2463 
	#XK_Söh_pha
 0x1000db5

	)

2464 
	#XK_Söh_ba
 0x1000db6

	)

2465 
	#XK_Söh_bha
 0x1000db7

	)

2466 
	#XK_Söh_ma
 0x1000db8

	)

2467 
	#XK_Söh_mba
 0x1000db9

	)

2468 
	#XK_Söh_ya
 0x1000db®

	)

2469 
	#XK_Söh_ø
 0x1000dbb

	)

2470 
	#XK_Söh_œ
 0x1000dbd

	)

2471 
	#XK_Söh_va
 0x1000dc0

	)

2472 
	#XK_Söh_sha
 0x1000dc1

	)

2473 
	#XK_Söh_ssha
 0x1000dc2

	)

2474 
	#XK_Söh_ß
 0x1000dc3

	)

2475 
	#XK_Söh_ha
 0x1000dc4

	)

2476 
	#XK_Söh_Œa
 0x1000dc5

	)

2477 
	#XK_Söh_Á
 0x1000dc6

	)

2478 
	#XK_Söh_Æ
 0x1000dˇ

	)

2479 
	#XK_Söh_Ø2
 0x1000dc‡

	)

2480 
	#XK_Söh_´2
 0x1000dd0

	)

2481 
	#XK_Söh_´e2
 0x1000dd1

	)

2482 
	#XK_Söh_i2
 0x1000dd2

	)

2483 
	#XK_Söh_ii2
 0x1000dd3

	)

2484 
	#XK_Söh_u2
 0x1000dd4

	)

2485 
	#XK_Söh_uu2
 0x1000dd6

	)

2486 
	#XK_Söh_ru2
 0x1000dd8

	)

2487 
	#XK_Söh_e2
 0x1000dd9

	)

2488 
	#XK_Söh_ì2
 0x1000dd®

	)

2489 
	#XK_Söh_ai2
 0x1000ddb

	)

2490 
	#XK_Söh_o2
 0x1000dd¯

	)

2491 
	#XK_Söh_oo2
 0x1000ddd

	)

2492 
	#XK_Söh_au2
 0x1000ddê

	)

2493 
	#XK_Söh_lu2
 0x1000dd‡

	)

2494 
	#XK_Söh_ruu2
 0x1000df2

	)

2495 
	#XK_Söh_luu2
 0x1000df3

	)

2496 
	#XK_Söh_kunddÆiya
 0x1000df4

	)

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

78 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


79 
	~<bôs/°©.h
>

81 
	#S_IFMT
 
__S_IFMT


	)

82 
	#S_IFDIR
 
__S_IFDIR


	)

83 
	#S_IFCHR
 
__S_IFCHR


	)

84 
	#S_IFBLK
 
__S_IFBLK


	)

85 
	#S_IFREG
 
__S_IFREG


	)

86 #ifde‡
__S_IFIFO


87 
	#S_IFIFO
 
__S_IFIFO


	)

89 #ifde‡
__S_IFLNK


90 
	#S_IFLNK
 
__S_IFLNK


	)

92 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


93 
	#S_IFSOCK
 
__S_IFSOCK


	)

98 
	#S_ISUID
 
__S_ISUID


	)

99 
	#S_ISGID
 
__S_ISGID


	)

101 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


103 
	#S_ISVTX
 
__S_ISVTX


	)

106 
	#S_IRUSR
 
__S_IREAD


	)

107 
	#S_IWUSR
 
__S_IWRITE


	)

108 
	#S_IXUSR
 
__S_IEXEC


	)

110 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

112 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

113 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

114 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

116 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

118 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

119 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

120 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

122 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

125 #ifdef 
__USE_MISC


126 #i‚de‡
R_OK


129 
	#R_OK
 4

	)

130 
	#W_OK
 2

	)

131 
	#X_OK
 1

	)

132 
	#F_OK
 0

	)

137 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


138 
	#SEEK_SET
 0

	)

139 
	#SEEK_CUR
 1

	)

140 
	#SEEK_END
 2

	)

148 
f˙é
 (
__fd
, 
__cmd
, ...);

157 #i‚de‡
__USE_FILE_OFFSET64


158 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

160 #ifde‡
__REDIRECT


161 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

162 
	`__n⁄nuŒ
 ((1));

164 
	#›í
 
›í64


	)

167 #ifde‡
__USE_LARGEFILE64


168 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

171 #ifde‡
__USE_ATFILE


181 #i‚de‡
__USE_FILE_OFFSET64


182 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

183 
	`__n⁄nuŒ
 ((2));

185 #ifde‡
__REDIRECT


186 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

187 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

189 
	#›í©
 
›í©64


	)

192 #ifde‡
__USE_LARGEFILE64


193 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

194 
	`__n⁄nuŒ
 ((2));

203 #i‚de‡
__USE_FILE_OFFSET64


204 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

206 #ifde‡
__REDIRECT


207 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

208 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

210 
	#¸ót
 
¸ót64


	)

213 #ifde‡
__USE_LARGEFILE64


214 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

217 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

218 && !
deföed
 
__USE_POSIX
))

227 
	#F_ULOCK
 0

	)

228 
	#F_LOCK
 1

	)

229 
	#F_TLOCK
 2

	)

230 
	#F_TEST
 3

	)

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

238 
	#lockf
 
lockf64


	)

241 #ifde‡
__USE_LARGEFILE64


242 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

246 #ifde‡
__USE_XOPEN2K


249 #i‚de‡
__USE_FILE_OFFSET64


250 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

251 
__advi£
Ë
__THROW
;

253 #ifde‡
__REDIRECT_NTH


254 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

255 
__off64_t
 
__Àn
, 
__advi£
),

256 
posix_Ádvi£64
);

258 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

261 #ifde‡
__USE_LARGEFILE64


262 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

263 
__advi£
Ë
__THROW
;

271 #i‚de‡
__USE_FILE_OFFSET64


272 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

274 #ifde‡
__REDIRECT


275 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

276 
__off64_t
 
__Àn
),

277 
posix_ÁŒoˇã64
);

279 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

289 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

290 && 
deföed
 
__va_¨g_∑ck_Àn


291 
	~<bôs/f˙é2.h
>

294 
__END_DECLS


	@/usr/include/jerror.h

25 #i‚de‡
JMESSAGE


26 #i‚de‡
JERROR_H


28 
	#JMAKE_ENUM_LIST


	)

31 
	#JMESSAGE
(
code
,
°rög
)

	)

35 #ifde‡
JMAKE_ENUM_LIST


39 
	#JMESSAGE
(
code
,
°rög
Ëcodê,

	)

43 
JMESSAGE
(
JMSG_NOMESSAGE
, "Bogus message code %d")

46 #i‡
JPEG_LIB_VERSION
 < 70

47 
JMESSAGE
(
JERR_ARITH_NOTIMPL
,

50 
JMESSAGE
(
JERR_BAD_ALIGN_TYPE
, "ALIGN_TYPE is wrong,Ölease fix")

51 
JMESSAGE
(
JERR_BAD_ALLOC_CHUNK
, "MAX_ALLOC_CHUNK is wrong,Ölease fix")

52 
JMESSAGE
(
JERR_BAD_BUFFER_MODE
, "Bogus buffer control mode")

53 
JMESSAGE
(
JERR_BAD_COMPONENT_ID
, "Invalid component ID %d in SOS")

54 #i‡
JPEG_LIB_VERSION
 >= 70

55 
JMESSAGE
(
JERR_BAD_CROP_SPEC
, "Invalid cropÑequest")

57 
JMESSAGE
(
JERR_BAD_DCT_COEF
, "DCT coefficient out ofÑange")

58 
JMESSAGE
(
JERR_BAD_DCTSIZE
, "IDCT output block size %dÇot supported")

59 #i‡
JPEG_LIB_VERSION
 >= 70

60 
JMESSAGE
(
JERR_BAD_DROP_SAMPLING
,

63 
JMESSAGE
(
JERR_BAD_HUFF_TABLE
, "Bogus HuffmanÅable definition")

64 
JMESSAGE
(
JERR_BAD_IN_COLORSPACE
, "Bogus input colorspace")

65 
JMESSAGE
(
JERR_BAD_J_COLORSPACE
, "Bogus JPEG colorspace")

66 
JMESSAGE
(
JERR_BAD_LENGTH
, "Bogus markerÜength")

67 
JMESSAGE
(
JERR_BAD_LIB_VERSION
,

69 
JMESSAGE
(
JERR_BAD_MCU_SIZE
, "Sampling factorsÅooÜarge for interleaved scan")

70 
JMESSAGE
(
JERR_BAD_POOL_ID
, "Invalid memoryÖool code %d")

71 
JMESSAGE
(
JERR_BAD_PRECISION
, "Unsupported JPEG dataÖrecision %d")

72 
JMESSAGE
(
JERR_BAD_PROGRESSION
,

74 
JMESSAGE
(
JERR_BAD_PROG_SCRIPT
,

76 
JMESSAGE
(
JERR_BAD_SAMPLING
, "Bogus sampling factors")

77 
JMESSAGE
(
JERR_BAD_SCAN_SCRIPT
, "Invalid scan scriptátÉntry %d")

78 
JMESSAGE
(
JERR_BAD_STATE
, "Improper callÅo JPEGÜibrary in state %d")

79 
JMESSAGE
(
JERR_BAD_STRUCT_SIZE
,

81 
JMESSAGE
(
JERR_BAD_VIRTUAL_ACCESS
, "Bogus virtualárrayáccess")

82 
JMESSAGE
(
JERR_BUFFER_SIZE
, "BufferÖassedÅo JPEGÜibrary isÅoo small")

83 
JMESSAGE
(
JERR_CANT_SUSPEND
, "SuspensionÇotállowed here")

84 
JMESSAGE
(
JERR_CCIR601_NOTIMPL
, "CCIR601 samplingÇot implemented yet")

85 
JMESSAGE
(
JERR_COMPONENT_COUNT
, "Too many color components: %d, max %d")

86 
JMESSAGE
(
JERR_CONVERSION_NOTIMPL
, "Unsupported color conversionÑequest")

87 
JMESSAGE
(
JERR_DAC_INDEX
, "Bogus DAC index %d")

88 
JMESSAGE
(
JERR_DAC_VALUE
, "Bogus DAC value 0x%x")

89 
JMESSAGE
(
JERR_DHT_INDEX
, "Bogus DHT index %d")

90 
JMESSAGE
(
JERR_DQT_INDEX
, "Bogus DQT index %d")

91 
JMESSAGE
(
JERR_EMPTY_IMAGE
, "Empty JPEG image (DNLÇot supported)")

92 
JMESSAGE
(
JERR_EMS_READ
, "Read from EMS failed")

93 
JMESSAGE
(
JERR_EMS_WRITE
, "WriteÅo EMS failed")

94 
JMESSAGE
(
JERR_EOI_EXPECTED
, "Didn'tÉxpect moreÅhan one scan")

95 
JMESSAGE
(
JERR_FILE_READ
, "Input fileÑeadÉrror")

96 
JMESSAGE
(
JERR_FILE_WRITE
, "Output file writeÉrror --- out of disk space?")

97 
JMESSAGE
(
JERR_FRACT_SAMPLE_NOTIMPL
, "Fractional samplingÇot implemented yet")

98 
JMESSAGE
(
JERR_HUFF_CLEN_OVERFLOW
, "Huffman code sizeÅable overflow")

99 
JMESSAGE
(
JERR_HUFF_MISSING_CODE
, "Missing Huffman codeÅableÉntry")

100 
JMESSAGE
(
JERR_IMAGE_TOO_BIG
, "Maximum supported image dimension is %uÖixels")

101 
JMESSAGE
(
JERR_INPUT_EMPTY
, "Empty input file")

102 
JMESSAGE
(
JERR_INPUT_EOF
, "PrematureÉnd of input file")

103 
JMESSAGE
(
JERR_MISMATCHED_QUANT_TABLE
,

105 
JMESSAGE
(
JERR_MISSING_DATA
, "Scan script doesÇotÅransmitáll data")

106 
JMESSAGE
(
JERR_MODE_CHANGE
, "Invalid color quantization mode change")

107 
JMESSAGE
(
JERR_NOTIMPL
, "Not implemented yet")

108 
JMESSAGE
(
JERR_NOT_COMPILED
, "Requested feature was omittedát compileÅime")

109 #i‡
JPEG_LIB_VERSION
 >= 70

110 
JMESSAGE
(
JERR_NO_ARITH_TABLE
, "ArithmeticÅable 0x%02x wasÇot defined")

112 
JMESSAGE
(
JERR_NO_BACKING_STORE
, "Backing storeÇot supported")

113 
JMESSAGE
(
JERR_NO_HUFF_TABLE
, "HuffmanÅable 0x%02x wasÇot defined")

114 
JMESSAGE
(
JERR_NO_IMAGE
, "JPEG datastream containsÇo image")

115 
JMESSAGE
(
JERR_NO_QUANT_TABLE
, "QuantizationÅable 0x%02x wasÇot defined")

116 
JMESSAGE
(
JERR_NO_SOI
, "Notá JPEG file: starts with 0x%02x 0x%02x")

117 
JMESSAGE
(
JERR_OUT_OF_MEMORY
, "Insufficient memory (case %d)")

118 
JMESSAGE
(
JERR_QUANT_COMPONENTS
,

120 
JMESSAGE
(
JERR_QUANT_FEW_COLORS
, "Cannot quantizeÅo fewerÅhan %d colors")

121 
JMESSAGE
(
JERR_QUANT_MANY_COLORS
, "Cannot quantizeÅo moreÅhan %d colors")

122 
JMESSAGE
(
JERR_SOF_DUPLICATE
, "Invalid JPEG file structure:Åwo SOF markers")

123 
JMESSAGE
(
JERR_SOF_NO_SOS
, "Invalid JPEG file structure: missing SOS marker")

124 
JMESSAGE
(
JERR_SOF_UNSUPPORTED
, "Unsupported JPEGÖrocess: SOFÅype 0x%02x")

125 
JMESSAGE
(
JERR_SOI_DUPLICATE
, "Invalid JPEG file structure:Åwo SOI markers")

126 
JMESSAGE
(
JERR_SOS_NO_SOF
, "Invalid JPEG file structure: SOS before SOF")

127 
JMESSAGE
(
JERR_TFILE_CREATE
, "FailedÅo createÅemporary file %s")

128 
JMESSAGE
(
JERR_TFILE_READ
, "Read failed onÅemporary file")

129 
JMESSAGE
(
JERR_TFILE_SEEK
, "Seek failed onÅemporary file")

130 
JMESSAGE
(
JERR_TFILE_WRITE
,

132 
JMESSAGE
(
JERR_TOO_LITTLE_DATA
, "ApplicationÅransferredÅoo few scanlines")

133 
JMESSAGE
(
JERR_UNKNOWN_MARKER
, "Unsupported markerÅype 0x%02x")

134 
JMESSAGE
(
JERR_VIRTUAL_BUG
, "Virtualárray controller messed up")

135 
JMESSAGE
(
JERR_WIDTH_OVERFLOW
, "ImageÅoo wide forÅhis implementation")

136 
JMESSAGE
(
JERR_XMS_READ
, "Read from XMS failed")

137 
JMESSAGE
(
JERR_XMS_WRITE
, "WriteÅo XMS failed")

138 
JMESSAGE
(
JMSG_COPYRIGHT
, 
JCOPYRIGHT_SHORT
)

139 
JMESSAGE
(
JMSG_VERSION
, 
JVERSION
)

140 
JMESSAGE
(
JTRC_16BIT_TABLES
,

142 
JMESSAGE
(
JTRC_ADOBE
,

144 
JMESSAGE
(
JTRC_APP0
, "Unknown APP0 marker (not JFIF),Üength %u")

145 
JMESSAGE
(
JTRC_APP14
, "Unknown APP14 marker (not Adobe),Üength %u")

146 
JMESSAGE
(
JTRC_DAC
, "Define Arithmetic Table 0x%02x: 0x%02x")

147 
JMESSAGE
(
JTRC_DHT
, "Define Huffman Table 0x%02x")

148 
JMESSAGE
(
JTRC_DQT
, "Define Quantization Table %dÖrecision %d")

149 
JMESSAGE
(
JTRC_DRI
, "Define Restart Interval %u")

150 
JMESSAGE
(
JTRC_EMS_CLOSE
, "Freed EMS handle %u")

151 
JMESSAGE
(
JTRC_EMS_OPEN
, "Obtained EMS handle %u")

152 
JMESSAGE
(
JTRC_EOI
, "End Of Image")

153 
JMESSAGE
(
JTRC_HUFFBITS
, " %3d %3d %3d %3d %3d %3d %3d %3d")

154 
JMESSAGE
(
JTRC_JFIF
, "JFIF APP0 marker: version %d.%02d, density %dx%d %d")

155 
JMESSAGE
(
JTRC_JFIF_BADTHUMBNAILSIZE
,

157 
JMESSAGE
(
JTRC_JFIF_EXTENSION
,

159 
JMESSAGE
(
JTRC_JFIF_THUMBNAIL
, " with %d x %dÅhumbnail image")

160 
JMESSAGE
(
JTRC_MISC_MARKER
, "Miscellaneous marker 0x%02x,Üength %u")

161 
JMESSAGE
(
JTRC_PARMLESS_MARKER
, "Unexpected marker 0x%02x")

162 
JMESSAGE
(
JTRC_QUANTVALS
, " %4u %4u %4u %4u %4u %4u %4u %4u")

163 
JMESSAGE
(
JTRC_QUANT_3_NCOLORS
, "QuantizingÅo %d = %d*%d*%d colors")

164 
JMESSAGE
(
JTRC_QUANT_NCOLORS
, "QuantizingÅo %d colors")

165 
JMESSAGE
(
JTRC_QUANT_SELECTED
, "Selected %d colors for quantization")

166 
JMESSAGE
(
JTRC_RECOVERY_ACTION
, "At marker 0x%02x,Ñecoveryáction %d")

167 
JMESSAGE
(
JTRC_RST
, "RST%d")

168 
JMESSAGE
(
JTRC_SMOOTH_NOTIMPL
,

170 
JMESSAGE
(
JTRC_SOF
, "Start Of Frame 0x%02x: width=%u, height=%u, components=%d")

171 
JMESSAGE
(
JTRC_SOF_COMPONENT
, " Component %d: %dhx%dv q=%d")

172 
JMESSAGE
(
JTRC_SOI
, "Start of Image")

173 
JMESSAGE
(
JTRC_SOS
, "Start Of Scan: %d components")

174 
JMESSAGE
(
JTRC_SOS_COMPONENT
, " Component %d: dc=%dác=%d")

175 
JMESSAGE
(
JTRC_SOS_PARAMS
, " Ss=%d, Se=%d, Ah=%d, Al=%d")

176 
JMESSAGE
(
JTRC_TFILE_CLOSE
, "ClosedÅemporary file %s")

177 
JMESSAGE
(
JTRC_TFILE_OPEN
, "OpenedÅemporary file %s")

178 
JMESSAGE
(
JTRC_THUMB_JPEG
,

180 
JMESSAGE
(
JTRC_THUMB_PALETTE
,

182 
JMESSAGE
(
JTRC_THUMB_RGB
,

184 
JMESSAGE
(
JTRC_UNKNOWN_IDS
,

186 
JMESSAGE
(
JTRC_XMS_CLOSE
, "Freed XMS handle %u")

187 
JMESSAGE
(
JTRC_XMS_OPEN
, "Obtained XMS handle %u")

188 
JMESSAGE
(
JWRN_ADOBE_XFORM
, "Unknown Adobe colorÅransform code %d")

189 #i‡
JPEG_LIB_VERSION
 >= 70

190 
JMESSAGE
(
JWRN_ARITH_BAD_CODE
, "Corrupt JPEG data: badárithmetic code")

192 
JMESSAGE
(
JWRN_BOGUS_PROGRESSION
,

194 
JMESSAGE
(
JWRN_EXTRANEOUS_DATA
,

196 
JMESSAGE
(
JWRN_HIT_MARKER
, "Corrupt JPEG data:ÖrematureÉnd of data segment")

197 
JMESSAGE
(
JWRN_HUFF_BAD_CODE
, "Corrupt JPEG data: bad Huffman code")

198 
JMESSAGE
(
JWRN_JFIF_MAJOR
, "Warning: unknown JFIFÑevisionÇumber %d.%02d")

199 
JMESSAGE
(
JWRN_JPEG_EOF
, "PrematureÉnd of JPEG file")

200 
JMESSAGE
(
JWRN_MUST_RESYNC
,

202 
JMESSAGE
(
JWRN_NOT_SEQUENTIAL
, "Invalid SOSÖarameters for sequential JPEG")

203 
JMESSAGE
(
JWRN_TOO_MUCH_DATA
, "ApplicationÅransferredÅoo many scanlines")

204 #i‡
JPEG_LIB_VERSION
 < 70

205 
JMESSAGE
(
JERR_BAD_CROP_SPEC
, "Invalid cropÑequest")

206 #i‡
deföed
(
C_ARITH_CODING_SUPPORTED
Ë|| deföed(
D_ARITH_CODING_SUPPORTED
)

207 
JMESSAGE
(
JERR_NO_ARITH_TABLE
, "ArithmeticÅable 0x%02x wasÇot defined")

208 
JMESSAGE
(
JWRN_ARITH_BAD_CODE
, "Corrupt JPEG data: badárithmetic code")

212 #ifde‡
JMAKE_ENUM_LIST


214 
	mJMSG_LASTMSGCODE


215 } 
	tJ_MESSAGE_CODE
;

217 #unde‡
JMAKE_ENUM_LIST


221 #unde‡
JMESSAGE


224 #i‚de‡
JERROR_H


225 
	#JERROR_H


	)

231 
	#ERREXIT
(
cöfo
,
code
) \

232 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

233 (*(
cöfo
)->
îr
->
îr‹_exô
Ë((
j_comm⁄_±r
Ë(cöfo)))

	)

234 
	#ERREXIT1
(
cöfo
,
code
,
p1
) \

235 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

236 (
cöfo
)->
îr
->
msg_∑rm
.
i
[0] = (
p1
), \

237 (*(
cöfo
)->
îr
->
îr‹_exô
Ë((
j_comm⁄_±r
Ë(cöfo)))

	)

238 
	#ERREXIT2
(
cöfo
,
code
,
p1
,
p2
) \

239 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

240 (
cöfo
)->
îr
->
msg_∑rm
.
i
[0] = (
p1
), \

241 (
cöfo
)->
îr
->
msg_∑rm
.
i
[1] = (
p2
), \

242 (*(
cöfo
)->
îr
->
îr‹_exô
Ë((
j_comm⁄_±r
Ë(cöfo)))

	)

243 
	#ERREXIT3
(
cöfo
,
code
,
p1
,
p2
,
p3
) \

244 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

245 (
cöfo
)->
îr
->
msg_∑rm
.
i
[0] = (
p1
), \

246 (
cöfo
)->
îr
->
msg_∑rm
.
i
[1] = (
p2
), \

247 (
cöfo
)->
îr
->
msg_∑rm
.
i
[2] = (
p3
), \

248 (*(
cöfo
)->
îr
->
îr‹_exô
Ë((
j_comm⁄_±r
Ë(cöfo)))

	)

249 
	#ERREXIT4
(
cöfo
,
code
,
p1
,
p2
,
p3
,
p4
) \

250 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

251 (
cöfo
)->
îr
->
msg_∑rm
.
i
[0] = (
p1
), \

252 (
cöfo
)->
îr
->
msg_∑rm
.
i
[1] = (
p2
), \

253 (
cöfo
)->
îr
->
msg_∑rm
.
i
[2] = (
p3
), \

254 (
cöfo
)->
îr
->
msg_∑rm
.
i
[3] = (
p4
), \

255 (*(
cöfo
)->
îr
->
îr‹_exô
Ë((
j_comm⁄_±r
Ë(cöfo)))

	)

256 
	#ERREXITS
(
cöfo
,
code
,
°r
) \

257 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

258 
	`°∫˝y
((
cöfo
)->
îr
->
msg_∑rm
.
s
, (
°r
), 
JMSG_STR_PARM_MAX
), \

259 (*(
cöfo
)->
îr
->
îr‹_exô
Ë((
j_comm⁄_±r
Ë(cöfo)))

	)

261 
	#MAKESTMT
(
°uff
Ëdÿ{ stuf‡} 0)

	)

264 
	#WARNMS
(
cöfo
,
code
) \

265 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

266 (*(
cöfo
)->
îr
->
emô_mesßge
Ë((
j_comm⁄_±r
Ë(cöfo), -1))

	)

267 
	#WARNMS1
(
cöfo
,
code
,
p1
) \

268 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

269 (
cöfo
)->
îr
->
msg_∑rm
.
i
[0] = (
p1
), \

270 (*(
cöfo
)->
îr
->
emô_mesßge
Ë((
j_comm⁄_±r
Ë(cöfo), -1))

	)

271 
	#WARNMS2
(
cöfo
,
code
,
p1
,
p2
) \

272 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

273 (
cöfo
)->
îr
->
msg_∑rm
.
i
[0] = (
p1
), \

274 (
cöfo
)->
îr
->
msg_∑rm
.
i
[1] = (
p2
), \

275 (*(
cöfo
)->
îr
->
emô_mesßge
Ë((
j_comm⁄_±r
Ë(cöfo), -1))

	)

278 
	#TRACEMS
(
cöfo
,
lvl
,
code
) \

279 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

280 (*(
cöfo
)->
îr
->
emô_mesßge
Ë((
j_comm⁄_±r
Ë(cöfo), (
lvl
)))

	)

281 
	#TRACEMS1
(
cöfo
,
lvl
,
code
,
p1
) \

282 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

283 (
cöfo
)->
îr
->
msg_∑rm
.
i
[0] = (
p1
), \

284 (*(
cöfo
)->
îr
->
emô_mesßge
Ë((
j_comm⁄_±r
Ë(cöfo), (
lvl
)))

	)

285 
	#TRACEMS2
(
cöfo
,
lvl
,
code
,
p1
,
p2
) \

286 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

287 (
cöfo
)->
îr
->
msg_∑rm
.
i
[0] = (
p1
), \

288 (
cöfo
)->
îr
->
msg_∑rm
.
i
[1] = (
p2
), \

289 (*(
cöfo
)->
îr
->
emô_mesßge
Ë((
j_comm⁄_±r
Ë(cöfo), (
lvl
)))

	)

290 
	#TRACEMS3
(
cöfo
,
lvl
,
code
,
p1
,
p2
,
p3
) \

291 
	`MAKESTMT
(* 
_mp
 = (
cöfo
)->
îr
->
msg_∑rm
.
i
; \

292 
_mp
[0] = (
p1
); _mp[1] = (
p2
); _mp[2] = (
p3
); \

293 (
cöfo
)->
îr
->
msg_code
 = (
code
); \

294 (*(
cöfo
)->
îr
->
emô_mesßge
Ë((
j_comm⁄_±r
Ë(cöfo), (
lvl
)); )

	)

295 
	#TRACEMS4
(
cöfo
,
lvl
,
code
,
p1
,
p2
,
p3
,
p4
) \

296 
	`MAKESTMT
(* 
_mp
 = (
cöfo
)->
îr
->
msg_∑rm
.
i
; \

297 
_mp
[0] = (
p1
); _mp[1] = (
p2
); _mp[2] = (
p3
); _mp[3] = (
p4
); \

298 (
cöfo
)->
îr
->
msg_code
 = (
code
); \

299 (*(
cöfo
)->
îr
->
emô_mesßge
Ë((
j_comm⁄_±r
Ë(cöfo), (
lvl
)); )

	)

300 
	#TRACEMS5
(
cöfo
,
lvl
,
code
,
p1
,
p2
,
p3
,
p4
,
p5
) \

301 
	`MAKESTMT
(* 
_mp
 = (
cöfo
)->
îr
->
msg_∑rm
.
i
; \

302 
_mp
[0] = (
p1
); _mp[1] = (
p2
); _mp[2] = (
p3
); _mp[3] = (
p4
); \

303 
_mp
[4] = (
p5
); \

304 (
cöfo
)->
îr
->
msg_code
 = (
code
); \

305 (*(
cöfo
)->
îr
->
emô_mesßge
Ë((
j_comm⁄_±r
Ë(cöfo), (
lvl
)); )

	)

306 
	#TRACEMS8
(
cöfo
,
lvl
,
code
,
p1
,
p2
,
p3
,
p4
,
p5
,
p6
,
p7
,
p8
) \

307 
	`MAKESTMT
(* 
_mp
 = (
cöfo
)->
îr
->
msg_∑rm
.
i
; \

308 
_mp
[0] = (
p1
); _mp[1] = (
p2
); _mp[2] = (
p3
); _mp[3] = (
p4
); \

309 
_mp
[4] = (
p5
); _mp[5] = (
p6
); _mp[6] = (
p7
); _mp[7] = (
p8
); \

310 (
cöfo
)->
îr
->
msg_code
 = (
code
); \

311 (*(
cöfo
)->
îr
->
emô_mesßge
Ë((
j_comm⁄_±r
Ë(cöfo), (
lvl
)); )

	)

312 
	#TRACEMSS
(
cöfo
,
lvl
,
code
,
°r
) \

313 ((
cöfo
)->
îr
->
msg_code
 = (
code
), \

314 
	`°∫˝y
((
cöfo
)->
îr
->
msg_∑rm
.
s
, (
°r
), 
JMSG_STR_PARM_MAX
), \

315 (*(
cöfo
)->
îr
->
emô_mesßge
Ë((
j_comm⁄_±r
Ë(cöfo), (
lvl
)))

	)

	@/usr/include/jpeglib.h

18 #i‚de‡
JPEGLIB_H


19 
	#JPEGLIB_H


	)

28 #i‚de‡
JCONFIG_INCLUDED


29 
	~"jc⁄fig.h
"

31 
	~"jm‹ecfg.h
"

34 #ifde‡
__˝lu•lus


35 #i‚de‡
DONT_USE_EXTERN_C


46 
	#DCTSIZE
 8

	)

47 
	#DCTSIZE2
 64

	)

48 
	#NUM_QUANT_TBLS
 4

	)

49 
	#NUM_HUFF_TBLS
 4

	)

50 
	#NUM_ARITH_TBLS
 16

	)

51 
	#MAX_COMPS_IN_SCAN
 4

	)

52 
	#MAX_SAMP_FACTOR
 4

	)

60 
	#C_MAX_BLOCKS_IN_MCU
 10

	)

61 #i‚de‡
D_MAX_BLOCKS_IN_MCU


62 
	#D_MAX_BLOCKS_IN_MCU
 10

	)

69 
JSAMPLE
 *
	tJSAMPROW
;

70 
JSAMPROW
 *
	tJSAMPARRAY
;

71 
JSAMPARRAY
 *
	tJSAMPIMAGE
;

73 
JCOEF
 
	tJBLOCK
[
DCTSIZE2
];

74 
JBLOCK
 *
	tJBLOCKROW
;

75 
JBLOCKROW
 *
	tJBLOCKARRAY
;

76 
JBLOCKARRAY
 *
	tJBLOCKIMAGE
;

78 
JCOEF
 *
	tJCOEFPTR
;

91 
UINT16
 
qu™tvÆ
[
DCTSIZE2
];

97 
boﬁón
 
£¡_èbÀ
;

98 } 
	tJQUANT_TBL
;

105 
UINT8
 
bôs
[17];

107 
UINT8
 
huffvÆ
[256];

113 
boﬁón
 
£¡_èbÀ
;

114 } 
	tJHUFF_TBL
;

123 
comp⁄ít_id
;

124 
comp⁄ít_ödex
;

125 
h_ßmp_Á˘‹
;

126 
v_ßmp_Á˘‹
;

127 
qu™t_tbl_no
;

132 
dc_tbl_no
;

133 
ac_tbl_no
;

142 
JDIMENSION
 
width_ö_blocks
;

143 
JDIMENSION
 
height_ö_blocks
;

150 #i‡
JPEG_LIB_VERSION
 >= 70

151 
DCT_h_sˇÀd_size
;

152 
DCT_v_sˇÀd_size
;

154 
DCT_sˇÀd_size
;

162 
JDIMENSION
 
downßm∂ed_width
;

163 
JDIMENSION
 
downßm∂ed_height
;

168 
boﬁón
 
comp⁄ít_√eded
;

172 
MCU_width
;

173 
MCU_height
;

174 
MCU_blocks
;

175 
MCU_ßm∂e_width
;

176 
œ°_cﬁ_width
;

177 
œ°_row_height
;

183 
JQUANT_TBL
 *
qu™t_èbÀ
;

186 *
d˘_èbÀ
;

187 } 
	tj≥g_comp⁄ít_öfo
;

193 
comps_ö_sˇn
;

194 
comp⁄ít_ödex
[
MAX_COMPS_IN_SCAN
];

195 
Ss
, 
Se
;

196 
Ah
, 
Al
;

197 } 
	tj≥g_sˇn_öfo
;

201 
j≥g_m¨kî_°ru˘
 *
	tj≥g_ßved_m¨kî_±r
;

203 
	sj≥g_m¨kî_°ru˘
 {

204 
j≥g_ßved_m¨kî_±r
 
√xt
;

205 
UINT8
 
m¨kî
;

206 
‹igöÆ_Àngth
;

207 
d©a_Àngth
;

208 
JOCTET
 *
d©a
;

214 
	#JCS_EXTENSIONS
 1

	)

215 
	#JCS_ALPHA_EXTENSIONS
 1

	)

218 
JCS_UNKNOWN
,

219 
JCS_GRAYSCALE
,

220 
JCS_RGB
,

222 
JCS_YCbCr
,

223 
JCS_CMYK
,

224 
JCS_YCCK
,

225 
JCS_EXT_RGB
,

226 
JCS_EXT_RGBX
,

227 
JCS_EXT_BGR
,

228 
JCS_EXT_BGRX
,

229 
JCS_EXT_XBGR
,

230 
JCS_EXT_XRGB
,

237 
JCS_EXT_RGBA
,

238 
JCS_EXT_BGRA
,

239 
JCS_EXT_ABGR
,

240 
JCS_EXT_ARGB
,

241 
JCS_RGB565


242 } 
	tJ_COLOR_SPACE
;

247 
JDCT_ISLOW
,

248 
JDCT_IFAST
,

249 
JDCT_FLOAT


250 } 
	tJ_DCT_METHOD
;

252 #i‚de‡
JDCT_DEFAULT


253 
	#JDCT_DEFAULT
 
JDCT_ISLOW


	)

255 #i‚de‡
JDCT_FASTEST


256 
	#JDCT_FASTEST
 
JDCT_IFAST


	)

262 
JDITHER_NONE
,

263 
JDITHER_ORDERED
,

264 
JDITHER_FS


265 } 
	tJ_DITHER_MODE
;

270 
	#j≥g_comm⁄_fõlds
 \

271 
j≥g_îr‹_mgr
 *
îr
; \

272 
j≥g_mem‹y_mgr
 *
mem
; \

273 
j≥g_¥ogªss_mgr
 *
¥ogªss
; \

274 *
˛õ¡_d©a
; \

275 
boﬁón
 
is_decom¥ess‹
; \

276 
globÆ_°©e


	)

282 
	sj≥g_comm⁄_°ru˘
 {

283 
j≥g_comm⁄_fõlds
;

290 
j≥g_comm⁄_°ru˘
 *
	tj_comm⁄_±r
;

291 
j≥g_com¥ess_°ru˘
 *
	tj_com¥ess_±r
;

292 
j≥g_decom¥ess_°ru˘
 *
	tj_decom¥ess_±r
;

297 
	sj≥g_com¥ess_°ru˘
 {

298 
j≥g_comm⁄_fõlds
;

301 
j≥g_de°ö©i⁄_mgr
 *
de°
;

308 
JDIMENSION
 
image_width
;

309 
JDIMENSION
 
image_height
;

310 
öput_comp⁄íts
;

311 
J_COLOR_SPACE
 
ö_cﬁ‹_•a˚
;

313 
öput_gamma
;

323 #i‡
JPEG_LIB_VERSION
 >= 70

324 
sˇÀ_num
, 
sˇÀ_díom
;

326 
JDIMENSION
 
j≥g_width
;

327 
JDIMENSION
 
j≥g_height
;

336 
d©a_¥ecisi⁄
;

338 
num_comp⁄íts
;

339 
J_COLOR_SPACE
 
j≥g_cﬁ‹_•a˚
;

341 
j≥g_comp⁄ít_öfo
 *
comp_öfo
;

344 
JQUANT_TBL
 *
qu™t_tbl_±rs
[
NUM_QUANT_TBLS
];

345 #i‡
JPEG_LIB_VERSION
 >= 70

346 
q_sˇÀ_Á˘‹
[
NUM_QUANT_TBLS
];

352 
JHUFF_TBL
 *
dc_huff_tbl_±rs
[
NUM_HUFF_TBLS
];

353 
JHUFF_TBL
 *
ac_huff_tbl_±rs
[
NUM_HUFF_TBLS
];

356 
UINT8
 
¨ôh_dc_L
[
NUM_ARITH_TBLS
];

357 
UINT8
 
¨ôh_dc_U
[
NUM_ARITH_TBLS
];

358 
UINT8
 
¨ôh_ac_K
[
NUM_ARITH_TBLS
];

360 
num_sˇns
;

361 c⁄° 
j≥g_sˇn_öfo
 *
sˇn_öfo
;

367 
boﬁón
 
øw_d©a_ö
;

368 
boﬁón
 
¨ôh_code
;

369 
boﬁón
 
›timize_codög
;

370 
boﬁón
 
CCIR601_ßm∂ög
;

371 #i‡
JPEG_LIB_VERSION
 >= 70

372 
boﬁón
 
do_Áncy_downßm∂ög
;

374 
smoŸhög_Á˘‹
;

375 
J_DCT_METHOD
 
d˘_mëhod
;

382 
ª°¨t_öãrvÆ
;

383 
ª°¨t_ö_rows
;

387 
boﬁón
 
wrôe_JFIF_hódî
;

388 
UINT8
 
JFIF_maj‹_vîsi⁄
;

389 
UINT8
 
JFIF_mö‹_vîsi⁄
;

394 
UINT8
 
dísôy_unô
;

395 
UINT16
 
X_dísôy
;

396 
UINT16
 
Y_dísôy
;

397 
boﬁón
 
wrôe_Adobe_m¨kî
;

404 
JDIMENSION
 
√xt_sˇ∆öe
;

413 
boﬁón
 
¥ogªssive_mode
;

414 
max_h_ßmp_Á˘‹
;

415 
max_v_ßmp_Á˘‹
;

417 #i‡
JPEG_LIB_VERSION
 >= 70

418 
mö_DCT_h_sˇÀd_size
;

419 
mö_DCT_v_sˇÀd_size
;

422 
JDIMENSION
 
tŸÆ_iMCU_rows
;

433 
comps_ö_sˇn
;

434 
j≥g_comp⁄ít_öfo
 *
cur_comp_öfo
[
MAX_COMPS_IN_SCAN
];

437 
JDIMENSION
 
MCUs_≥r_row
;

438 
JDIMENSION
 
MCU_rows_ö_sˇn
;

440 
blocks_ö_MCU
;

441 
MCU_membîshù
[
C_MAX_BLOCKS_IN_MCU
];

445 
Ss
, 
Se
, 
Ah
, 
Al
;

447 #i‡
JPEG_LIB_VERSION
 >= 80

448 
block_size
;

449 c⁄° *
«tuøl_‹dî
;

450 
lim_Se
;

456 
j≥g_comp_ma°î
 *
ma°î
;

457 
j≥g_c_maö_c⁄åﬁÀr
 *
maö
;

458 
j≥g_c_¥ï_c⁄åﬁÀr
 *
¥ï
;

459 
j≥g_c_c€f_c⁄åﬁÀr
 *
c€f
;

460 
j≥g_m¨kî_wrôî
 *
m¨kî
;

461 
j≥g_cﬁ‹_c⁄vîãr
 *
cc⁄vît
;

462 
j≥g_downßm∂î
 *
downßm∂e
;

463 
j≥g_f‹w¨d_d˘
 *
fd˘
;

464 
j≥g_íå›y_ícodî
 *
íå›y
;

465 
j≥g_sˇn_öfo
 *
s¸ùt_•a˚
;

466 
s¸ùt_•a˚_size
;

472 
	sj≥g_decom¥ess_°ru˘
 {

473 
j≥g_comm⁄_fõlds
;

476 
j≥g_sour˚_mgr
 *
§c
;

481 
JDIMENSION
 
image_width
;

482 
JDIMENSION
 
image_height
;

483 
num_comp⁄íts
;

484 
J_COLOR_SPACE
 
j≥g_cﬁ‹_•a˚
;

491 
J_COLOR_SPACE
 
out_cﬁ‹_•a˚
;

493 
sˇÀ_num
, 
sˇÀ_díom
;

495 
ouçut_gamma
;

497 
boﬁón
 
buf„ªd_image
;

498 
boﬁón
 
øw_d©a_out
;

500 
J_DCT_METHOD
 
d˘_mëhod
;

501 
boﬁón
 
do_Áncy_upßm∂ög
;

502 
boﬁón
 
do_block_smoŸhög
;

504 
boﬁón
 
qu™tize_cﬁ‹s
;

506 
J_DITHER_MODE
 
dôhî_mode
;

507 
boﬁón
 
two_∑ss_qu™tize
;

508 
desúed_numbî_of_cﬁ‹s
;

510 
boﬁón
 
íabÀ_1∑ss_qu™t
;

511 
boﬁón
 
íabÀ_exã∫Æ_qu™t
;

512 
boﬁón
 
íabÀ_2∑ss_qu™t
;

520 
JDIMENSION
 
ouçut_width
;

521 
JDIMENSION
 
ouçut_height
;

522 
out_cﬁ‹_comp⁄íts
;

523 
ouçut_comp⁄íts
;

527 
ªc_outbuf_height
;

539 
a˘uÆ_numbî_of_cﬁ‹s
;

540 
JSAMPARRAY
 
cﬁ‹m≠
;

550 
JDIMENSION
 
ouçut_sˇ∆öe
;

555 
öput_sˇn_numbî
;

556 
JDIMENSION
 
öput_iMCU_row
;

562 
ouçut_sˇn_numbî
;

563 
JDIMENSION
 
ouçut_iMCU_row
;

572 (*
c€f_bôs
)[
DCTSIZE2
];

583 
JQUANT_TBL
 *
qu™t_tbl_±rs
[
NUM_QUANT_TBLS
];

586 
JHUFF_TBL
 *
dc_huff_tbl_±rs
[
NUM_HUFF_TBLS
];

587 
JHUFF_TBL
 *
ac_huff_tbl_±rs
[
NUM_HUFF_TBLS
];

594 
d©a_¥ecisi⁄
;

596 
j≥g_comp⁄ít_öfo
 *
comp_öfo
;

599 #i‡
JPEG_LIB_VERSION
 >= 80

600 
boﬁón
 
is_ba£löe
;

602 
boﬁón
 
¥ogªssive_mode
;

603 
boﬁón
 
¨ôh_code
;

605 
UINT8
 
¨ôh_dc_L
[
NUM_ARITH_TBLS
];

606 
UINT8
 
¨ôh_dc_U
[
NUM_ARITH_TBLS
];

607 
UINT8
 
¨ôh_ac_K
[
NUM_ARITH_TBLS
];

609 
ª°¨t_öãrvÆ
;

614 
boﬁón
 
ßw_JFIF_m¨kî
;

616 
UINT8
 
JFIF_maj‹_vîsi⁄
;

617 
UINT8
 
JFIF_mö‹_vîsi⁄
;

618 
UINT8
 
dísôy_unô
;

619 
UINT16
 
X_dísôy
;

620 
UINT16
 
Y_dísôy
;

621 
boﬁón
 
ßw_Adobe_m¨kî
;

622 
UINT8
 
Adobe_å™sf‹m
;

624 
boﬁón
 
CCIR601_ßm∂ög
;

630 
j≥g_ßved_m¨kî_±r
 
m¨kî_li°
;

639 
max_h_ßmp_Á˘‹
;

640 
max_v_ßmp_Á˘‹
;

642 #i‡
JPEG_LIB_VERSION
 >= 70

643 
mö_DCT_h_sˇÀd_size
;

644 
mö_DCT_v_sˇÀd_size
;

646 
mö_DCT_sˇÀd_size
;

649 
JDIMENSION
 
tŸÆ_iMCU_rows
;

658 
JSAMPLE
 *
ßm∂e_ønge_limô
;

665 
comps_ö_sˇn
;

666 
j≥g_comp⁄ít_öfo
 *
cur_comp_öfo
[
MAX_COMPS_IN_SCAN
];

669 
JDIMENSION
 
MCUs_≥r_row
;

670 
JDIMENSION
 
MCU_rows_ö_sˇn
;

672 
blocks_ö_MCU
;

673 
MCU_membîshù
[
D_MAX_BLOCKS_IN_MCU
];

677 
Ss
, 
Se
, 
Ah
, 
Al
;

679 #i‡
JPEG_LIB_VERSION
 >= 80

682 
block_size
;

683 c⁄° *
«tuøl_‹dî
;

684 
lim_Se
;

691 
uƒód_m¨kî
;

696 
j≥g_decomp_ma°î
 *
ma°î
;

697 
j≥g_d_maö_c⁄åﬁÀr
 *
maö
;

698 
j≥g_d_c€f_c⁄åﬁÀr
 *
c€f
;

699 
j≥g_d_po°_c⁄åﬁÀr
 *
po°
;

700 
j≥g_öput_c⁄åﬁÀr
 *
öput˘l
;

701 
j≥g_m¨kî_ªadî
 *
m¨kî
;

702 
j≥g_íå›y_decodî
 *
íå›y
;

703 
j≥g_övî£_d˘
 *
id˘
;

704 
j≥g_upßm∂î
 *
upßm∂e
;

705 
j≥g_cﬁ‹_dec⁄vîãr
 *
cc⁄vît
;

706 
j≥g_cﬁ‹_qu™tizî
 *
cqu™tize
;

720 
	sj≥g_îr‹_mgr
 {

722 (*
îr‹_exô
Ë(
j_comm⁄_±r
 
cöfo
);

724 (*
emô_mesßge
Ë(
j_comm⁄_±r
 
cöfo
, 
msg_Àvñ
);

726 (*
ouçut_mesßge
Ë(
j_comm⁄_±r
 
cöfo
);

728 (*
f‹m©_mesßge
Ë(
j_comm⁄_±r
 
cöfo
, *
buf„r
);

729 
	#JMSG_LENGTH_MAX
 200

	)

731 (*
ª£t_îr‹_mgr
Ë(
j_comm⁄_±r
 
cöfo
);

736 
msg_code
;

737 
	#JMSG_STR_PARM_MAX
 80

	)

739 
i
[8];

740 
s
[
JMSG_STR_PARM_MAX
];

741 } 
msg_∑rm
;

745 
åa˚_Àvñ
;

753 
num_w¨nögs
;

765 c⁄° * c⁄° *
j≥g_mesßge_èbÀ
;

766 
œ°_j≥g_mesßge
;

770 c⁄° * c⁄° *
add⁄_mesßge_èbÀ
;

771 
fú°_add⁄_mesßge
;

772 
œ°_add⁄_mesßge
;

778 
	sj≥g_¥ogªss_mgr
 {

779 (*
¥ogªss_m⁄ô‹
Ë(
j_comm⁄_±r
 
cöfo
);

781 
∑ss_cou¡î
;

782 
∑ss_limô
;

783 
com∂ëed_∑s£s
;

784 
tŸÆ_∑s£s
;

790 
	sj≥g_de°ö©i⁄_mgr
 {

791 
JOCTET
 *
√xt_ouçut_byã
;

792 
size_t
 
‰ì_ö_buf„r
;

794 (*
öô_de°ö©i⁄
Ë(
j_com¥ess_±r
 
cöfo
);

795 
boﬁón
 (*
em±y_ouçut_buf„r
Ë(
j_com¥ess_±r
 
cöfo
);

796 (*
ãrm_de°ö©i⁄
Ë(
j_com¥ess_±r
 
cöfo
);

802 
	sj≥g_sour˚_mgr
 {

803 c⁄° 
JOCTET
 *
√xt_öput_byã
;

804 
size_t
 
byãs_ö_buf„r
;

806 (*
öô_sour˚
Ë(
j_decom¥ess_±r
 
cöfo
);

807 
boﬁón
 (*
fûl_öput_buf„r
Ë(
j_decom¥ess_±r
 
cöfo
);

808 (*
skù_öput_d©a
Ë(
j_decom¥ess_±r
 
cöfo
, 
num_byãs
);

809 
boﬁón
 (*
ªsync_to_ª°¨t
Ë(
j_decom¥ess_±r
 
cöfo
, 
desúed
);

810 (*
ãrm_sour˚
Ë(
j_decom¥ess_±r
 
cöfo
);

825 
	#JPOOL_PERMANENT
 0

	)

826 
	#JPOOL_IMAGE
 1

	)

827 
	#JPOOL_NUMPOOLS
 2

	)

829 
jvút_ßºay_c⁄åﬁ
 *
	tjvút_ßºay_±r
;

830 
jvút_b¨øy_c⁄åﬁ
 *
	tjvút_b¨øy_±r
;

833 
	sj≥g_mem‹y_mgr
 {

835 *(*
Æloc_smÆl
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
, 
size_t
 
sizeofobje˘
);

836 *(*
Æloc_œrge
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
,

837 
size_t
 
sizeofobje˘
);

838 
JSAMPARRAY
 (*
Æloc_ßºay
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
,

839 
JDIMENSION
 
ßm∂e•îrow
, JDIMENSION 
numrows
);

840 
JBLOCKARRAY
 (*
Æloc_b¨øy
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
,

841 
JDIMENSION
 
block•îrow
, JDIMENSION 
numrows
);

842 
jvút_ßºay_±r
 (*
ªque°_vút_ßºay
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
,

843 
boﬁón
 
¥e_zîo
,

844 
JDIMENSION
 
ßm∂e•îrow
,

845 
JDIMENSION
 
numrows
,

846 
JDIMENSION
 
maxac˚ss
);

847 
jvút_b¨øy_±r
 (*
ªque°_vút_b¨øy
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
,

848 
boﬁón
 
¥e_zîo
,

849 
JDIMENSION
 
block•îrow
,

850 
JDIMENSION
 
numrows
,

851 
JDIMENSION
 
maxac˚ss
);

852 (*
ªÆize_vút_¨øys
Ë(
j_comm⁄_±r
 
cöfo
);

853 
JSAMPARRAY
 (*
ac˚ss_vút_ßºay
Ë(
j_comm⁄_±r
 
cöfo
, 
jvút_ßºay_±r
 
±r
,

854 
JDIMENSION
 
°¨t_row
, JDIMENSION 
num_rows
,

855 
boﬁón
 
wrôabÀ
);

856 
JBLOCKARRAY
 (*
ac˚ss_vút_b¨øy
Ë(
j_comm⁄_±r
 
cöfo
, 
jvút_b¨øy_±r
 
±r
,

857 
JDIMENSION
 
°¨t_row
, JDIMENSION 
num_rows
,

858 
boﬁón
 
wrôabÀ
);

859 (*
‰ì_poﬁ
Ë(
j_comm⁄_±r
 
cöfo
, 
poﬁ_id
);

860 (*
£lf_de°ru˘
Ë(
j_comm⁄_±r
 
cöfo
);

867 
max_mem‹y_to_u£
;

870 
max_Æloc_chunk
;

877 
boﬁón
 (*
	tj≥g_m¨kî_∑r£r_mëhod
Ë(
	tj_decom¥ess_±r
 
	tcöfo
);

887 
	#JPP
(
¨gli°
Ë
	)
arglist

891 
EXTERN
(
j≥g_îr‹_mgr
 *Ë
j≥g_°d_îr‹
 (j≥g_îr‹_mg∏*
îr
);

900 
	#j≥g_¸óã_com¥ess
(
cöfo
) \

901 
	`j≥g_Cª©eCom¥ess
((
cöfo
), 
JPEG_LIB_VERSION
, \

902 (
size_t
Ë(
j≥g_com¥ess_°ru˘
))

	)

903 
	#j≥g_¸óã_decom¥ess
(
cöfo
) \

904 
	`j≥g_Cª©eDecom¥ess
((
cöfo
), 
JPEG_LIB_VERSION
, \

905 (
size_t
Ë(
j≥g_decom¥ess_°ru˘
))

	)

906 
EXTERN
(Ë
j≥g_Cª©eCom¥ess
 (
j_com¥ess_±r
 
cöfo
, 
vîsi⁄
,

907 
size_t
 
°ru˘size
);

908 
EXTERN
(Ë
j≥g_Cª©eDecom¥ess
 (
j_decom¥ess_±r
 
cöfo
, 
vîsi⁄
,

909 
size_t
 
°ru˘size
);

911 
EXTERN
(Ë
j≥g_de°roy_com¥ess
 (
j_com¥ess_±r
 
cöfo
);

912 
EXTERN
(Ë
j≥g_de°roy_decom¥ess
 (
j_decom¥ess_±r
 
cöfo
);

916 
EXTERN
(Ë
j≥g_°dio_de°
 (
j_com¥ess_±r
 
cöfo
, 
FILE
 *
outfûe
);

917 
EXTERN
(Ë
j≥g_°dio_§c
 (
j_decom¥ess_±r
 
cöfo
, 
FILE
 *
öfûe
);

919 #i‡
JPEG_LIB_VERSION
 >80 || 
deföed
(
MEM_SRCDST_SUPPORTED
)

921 
EXTERN
(Ë
j≥g_mem_de°
 (
j_com¥ess_±r
 
cöfo
, **
outbuf„r
,

922 *
outsize
);

923 
EXTERN
(Ë
j≥g_mem_§c
 (
j_decom¥ess_±r
 
cöfo
,

924 c⁄° *
öbuf„r
,

925 
ösize
);

929 
EXTERN
(Ë
j≥g_£t_deÁu…s
 (
j_com¥ess_±r
 
cöfo
);

931 
EXTERN
(Ë
j≥g_£t_cﬁ‹•a˚
 (
j_com¥ess_±r
 
cöfo
,

932 
J_COLOR_SPACE
 
cﬁ‹•a˚
);

933 
EXTERN
(Ë
j≥g_deÁu…_cﬁ‹•a˚
 (
j_com¥ess_±r
 
cöfo
);

934 
EXTERN
(Ë
j≥g_£t_quÆôy
 (
j_com¥ess_±r
 
cöfo
, 
quÆôy
,

935 
boﬁón
 
f‹˚_ba£löe
);

936 
EXTERN
(Ë
j≥g_£t_löór_quÆôy
 (
j_com¥ess_±r
 
cöfo
, 
sˇÀ_Á˘‹
,

937 
boﬁón
 
f‹˚_ba£löe
);

938 #i‡
JPEG_LIB_VERSION
 >= 70

939 
EXTERN
(Ë
j≥g_deÁu…_qèbÀs
 (
j_com¥ess_±r
 
cöfo
,

940 
boﬁón
 
f‹˚_ba£löe
);

942 
EXTERN
(Ë
j≥g_add_qu™t_èbÀ
 (
j_com¥ess_±r
 
cöfo
, 
which_tbl
,

943 c⁄° *
basic_èbÀ
,

944 
sˇÀ_Á˘‹
, 
boﬁón
 
f‹˚_ba£löe
);

945 
EXTERN
(Ë
j≥g_quÆôy_sˇlög
 (
quÆôy
);

946 
EXTERN
(Ë
j≥g_sim∂e_¥ogªssi⁄
 (
j_com¥ess_±r
 
cöfo
);

947 
EXTERN
(Ë
j≥g_suµªss_èbÀs
 (
j_com¥ess_±r
 
cöfo
, 
boﬁón
 
suµªss
);

948 
EXTERN
(
JQUANT_TBL
 *Ë
j≥g_Æloc_qu™t_èbÀ
 (
j_comm⁄_±r
 
cöfo
);

949 
EXTERN
(
JHUFF_TBL
 *Ë
j≥g_Æloc_huff_èbÀ
 (
j_comm⁄_±r
 
cöfo
);

952 
EXTERN
(Ë
j≥g_°¨t_com¥ess
 (
j_com¥ess_±r
 
cöfo
,

953 
boﬁón
 
wrôe_Æl_èbÀs
);

954 
EXTERN
(
JDIMENSION
Ë
j≥g_wrôe_sˇ∆öes
 (
j_com¥ess_±r
 
cöfo
,

955 
JSAMPARRAY
 
sˇ∆öes
,

956 
JDIMENSION
 
num_löes
);

957 
EXTERN
(Ë
j≥g_föish_com¥ess
 (
j_com¥ess_±r
 
cöfo
);

959 #i‡
JPEG_LIB_VERSION
 >= 70

961 
EXTERN
(Ë
j≥g_ˇlc_j≥g_dimísi⁄s
 (
j_com¥ess_±r
 
cöfo
);

965 
EXTERN
(
JDIMENSION
Ë
j≥g_wrôe_øw_d©a
 (
j_com¥ess_±r
 
cöfo
, 
JSAMPIMAGE
 
d©a
,

966 
JDIMENSION
 
num_löes
);

969 
EXTERN
(Ë
j≥g_wrôe_m¨kî
 (
j_com¥ess_±r
 
cöfo
, 
m¨kî
,

970 c⁄° 
JOCTET
 *
d©≠å
, 
d©Æí
);

972 
EXTERN
(Ë
j≥g_wrôe_m_hódî
 (
j_com¥ess_±r
 
cöfo
, 
m¨kî
,

973 
d©Æí
);

974 
EXTERN
(Ë
j≥g_wrôe_m_byã
 (
j_com¥ess_±r
 
cöfo
, 
vÆ
);

977 
EXTERN
(Ë
j≥g_wrôe_èbÀs
 (
j_com¥ess_±r
 
cöfo
);

980 
EXTERN
(Ë
j≥g_ªad_hódî
 (
j_decom¥ess_±r
 
cöfo
, 
boﬁón
 
ªquúe_image
);

982 
	#JPEG_SUSPENDED
 0

	)

983 
	#JPEG_HEADER_OK
 1

	)

984 
	#JPEG_HEADER_TABLES_ONLY
 2

	)

992 
EXTERN
(
boﬁón
Ë
j≥g_°¨t_decom¥ess
 (
j_decom¥ess_±r
 
cöfo
);

993 
EXTERN
(
JDIMENSION
Ë
j≥g_ªad_sˇ∆öes
 (
j_decom¥ess_±r
 
cöfo
,

994 
JSAMPARRAY
 
sˇ∆öes
,

995 
JDIMENSION
 
max_löes
);

996 
EXTERN
(
JDIMENSION
Ë
j≥g_skù_sˇ∆öes
 (
j_decom¥ess_±r
 
cöfo
,

997 
JDIMENSION
 
num_löes
);

998 
EXTERN
(Ë
j≥g_¸›_sˇ∆öe
 (
j_decom¥ess_±r
 
cöfo
, 
JDIMENSION
 *
xoff£t
,

999 
JDIMENSION
 *
width
);

1000 
EXTERN
(
boﬁón
Ë
j≥g_föish_decom¥ess
 (
j_decom¥ess_±r
 
cöfo
);

1003 
EXTERN
(
JDIMENSION
Ë
j≥g_ªad_øw_d©a
 (
j_decom¥ess_±r
 
cöfo
, 
JSAMPIMAGE
 
d©a
,

1004 
JDIMENSION
 
max_löes
);

1007 
EXTERN
(
boﬁón
Ë
j≥g_has_mu…ùÀ_sˇns
 (
j_decom¥ess_±r
 
cöfo
);

1008 
EXTERN
(
boﬁón
Ë
j≥g_°¨t_ouçut
 (
j_decom¥ess_±r
 
cöfo
, 
sˇn_numbî
);

1009 
EXTERN
(
boﬁón
Ë
j≥g_föish_ouçut
 (
j_decom¥ess_±r
 
cöfo
);

1010 
EXTERN
(
boﬁón
Ë
j≥g_öput_com∂ëe
 (
j_decom¥ess_±r
 
cöfo
);

1011 
EXTERN
(Ë
j≥g_√w_cﬁ‹m≠
 (
j_decom¥ess_±r
 
cöfo
);

1012 
EXTERN
(Ë
j≥g_c⁄sume_öput
 (
j_decom¥ess_±r
 
cöfo
);

1015 
	#JPEG_REACHED_SOS
 1

	)

1016 
	#JPEG_REACHED_EOI
 2

	)

1017 
	#JPEG_ROW_COMPLETED
 3

	)

1018 
	#JPEG_SCAN_COMPLETED
 4

	)

1021 #i‡
JPEG_LIB_VERSION
 >= 80

1022 
EXTERN
(Ë
j≥g_c‹e_ouçut_dimísi⁄s
 (
j_decom¥ess_±r
 
cöfo
);

1024 
EXTERN
(Ë
j≥g_ˇlc_ouçut_dimísi⁄s
 (
j_decom¥ess_±r
 
cöfo
);

1027 
EXTERN
(Ë
j≥g_ßve_m¨kîs
 (
j_decom¥ess_±r
 
cöfo
, 
m¨kî_code
,

1028 
Àngth_limô
);

1031 
EXTERN
(Ë
j≥g_£t_m¨kî_¥o˚ss‹
 (
j_decom¥ess_±r
 
cöfo
,

1032 
m¨kî_code
,

1033 
j≥g_m¨kî_∑r£r_mëhod
 
routöe
);

1036 
EXTERN
(
jvút_b¨øy_±r
 *Ë
j≥g_ªad_c€fficõ¡s
 (
j_decom¥ess_±r
 
cöfo
);

1037 
EXTERN
(Ë
j≥g_wrôe_c€fficõ¡s
 (
j_com¥ess_±r
 
cöfo
,

1038 
jvút_b¨øy_±r
 *
c€f_¨øys
);

1039 
EXTERN
(Ë
j≥g_c›y_¸ôiˇl_∑ømëîs
 (
j_decom¥ess_±r
 
§cöfo
,

1040 
j_com¥ess_±r
 
d°öfo
);

1048 
EXTERN
(Ë
j≥g_ab‹t_com¥ess
 (
j_com¥ess_±r
 
cöfo
);

1049 
EXTERN
(Ë
j≥g_ab‹t_decom¥ess
 (
j_decom¥ess_±r
 
cöfo
);

1054 
EXTERN
(Ë
j≥g_ab‹t
 (
j_comm⁄_±r
 
cöfo
);

1055 
EXTERN
(Ë
j≥g_de°roy
 (
j_comm⁄_±r
 
cöfo
);

1058 
EXTERN
(
boﬁón
Ë
j≥g_ªsync_to_ª°¨t
 (
j_decom¥ess_±r
 
cöfo
, 
desúed
);

1065 
	#JPEG_RST0
 0xD0

	)

1066 
	#JPEG_EOI
 0xD9

	)

1067 
	#JPEG_APP0
 0xE0

	)

1068 
	#JPEG_COM
 0xFE

	)

1076 #ifde‡
INCOMPLETE_TYPES_BROKEN


1077 #i‚de‡
JPEG_INTERNALS


1078 
	sjvút_ßºay_c⁄åﬁ
 { 
dummy
; };

1079 
	sjvút_b¨øy_c⁄åﬁ
 { 
dummy
; };

1080 
	sj≥g_comp_ma°î
 { 
dummy
; };

1081 
	sj≥g_c_maö_c⁄åﬁÀr
 { 
dummy
; };

1082 
	sj≥g_c_¥ï_c⁄åﬁÀr
 { 
dummy
; };

1083 
	sj≥g_c_c€f_c⁄åﬁÀr
 { 
dummy
; };

1084 
	sj≥g_m¨kî_wrôî
 { 
dummy
; };

1085 
	sj≥g_cﬁ‹_c⁄vîãr
 { 
dummy
; };

1086 
	sj≥g_downßm∂î
 { 
dummy
; };

1087 
	sj≥g_f‹w¨d_d˘
 { 
dummy
; };

1088 
	sj≥g_íå›y_ícodî
 { 
dummy
; };

1089 
	sj≥g_decomp_ma°î
 { 
dummy
; };

1090 
	sj≥g_d_maö_c⁄åﬁÀr
 { 
dummy
; };

1091 
	sj≥g_d_c€f_c⁄åﬁÀr
 { 
dummy
; };

1092 
	sj≥g_d_po°_c⁄åﬁÀr
 { 
dummy
; };

1093 
	sj≥g_öput_c⁄åﬁÀr
 { 
dummy
; };

1094 
	sj≥g_m¨kî_ªadî
 { 
dummy
; };

1095 
	sj≥g_íå›y_decodî
 { 
dummy
; };

1096 
	sj≥g_övî£_d˘
 { 
dummy
; };

1097 
	sj≥g_upßm∂î
 { 
dummy
; };

1098 
	sj≥g_cﬁ‹_dec⁄vîãr
 { 
dummy
; };

1099 
	sj≥g_cﬁ‹_qu™tizî
 { 
dummy
; };

1111 #ifde‡
JPEG_INTERNALS


1112 
	~"j≥göt.h
"

1113 
	~"jîr‹.h
"

1116 #ifde‡
__˝lu•lus


1117 #i‚de‡
DONT_USE_EXTERN_C


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/lzma.h

30 #i‚de‡
LZMA_H


31 
	#LZMA_H


	)

71 #i‚de‡
LZMA_MANUAL_HEADERS


76 
	~<°ddef.h
>

82 #i‡!
deföed
(
UINT32_C
Ë|| !deföed(
UINT64_C
) \

83 || !
deföed
(
UINT32_MAX
Ë|| !
	$deföed
(
UINT64_MAX
)

98 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
_MSC_VER
) && _MSC_VER < 1800

99 
	t__öt8
 
	tuöt8_t
;

100 
	t__öt32
 
	tuöt32_t
;

101 
	t__öt64
 
	tuöt64_t
;

104 #ifde‡
__˝lu•lus


116 #i‚de‡
__STDC_LIMIT_MACROS


117 
	#__STDC_LIMIT_MACROS
 1

	)

119 #i‚de‡
__STDC_CONSTANT_MACROS


120 
	#__STDC_CONSTANT_MACROS
 1

	)

124 
	~<öây≥s.h
>

135 #i‚de‡
UINT32_C


136 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
_MSC_VER
)

137 
	#UINT32_C
(
n
Ë¿## 
UI32


	)

139 
	#UINT32_C
(
n
Ë¿## 
U


	)

143 #i‚de‡
UINT64_C


144 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
_MSC_VER
)

145 
	#UINT64_C
(
n
Ë¿## 
UI64


	)

148 
	~<limôs.h
>

149 #i‡
ULONG_MAX
 == 4294967295UL

150 
	#UINT64_C
(
n
Ë¿## 
ULL


	)

152 
	#UINT64_C
(
n
Ë¿## 
UL


	)

157 #i‚de‡
UINT32_MAX


158 
	#UINT32_MAX
 (
	`UINT32_C
(4294967295))

	)

161 #i‚de‡
UINT64_MAX


162 
	#UINT64_MAX
 (
	`UINT64_C
(18446744073709551615))

	)

190 #i‚de‡
LZMA_API_IMPORT


191 #i‡!
	`deföed
(
LZMA_API_STATIC
Ë&& deföed(
_WIN32
Ë&& !deföed(
__GNUC__
)

192 
	#LZMA_API_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

194 
	#LZMA_API_IMPORT


	)

198 #i‚de‡
LZMA_API_CALL


199 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__CYGWIN__
)

200 
	#LZMA_API_CALL
 
__cde˛


	)

202 
	#LZMA_API_CALL


	)

206 #i‚de‡
LZMA_API


207 
	#LZMA_API
(
ty≥
Ë
LZMA_API_IMPORT
Åy≥ 
LZMA_API_CALL


	)

220 #i‚de‡
lzma_nŸhrow


221 #i‡
	`deföed
(
__˝lu•lus
)

222 
	#lzma_nŸhrow
 
	`throw
()

	)

223 #ñi‡
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 3)

224 
	#lzma_nŸhrow
 
	`__©åibuã__
((
__nŸhrow__
))

	)

226 
	#lzma_nŸhrow


	)

240 #i‡
__GNUC__
 >= 3

241 #i‚de‡
lzma_©åibuã


242 
	#lzma_©åibuã
(
©å
Ë
	`__©åibuã__
◊âr)

	)

246 #i‚de‡
lzma_©å_w¨n_unu£d_ªsu…


247 #i‡
__GNUC__
 =3 && 
__GNUC_MINOR__
 < 4

248 
	#lzma_©å_w¨n_unu£d_ªsu…


	)

253 #i‚de‡
lzma_©åibuã


254 
	#lzma_©åibuã
(
©å
)

	)

259 #i‚de‡
lzma_©å_puª


260 
	#lzma_©å_puª
 
	`lzma_©åibuã
((
__puª__
))

	)

263 #i‚de‡
lzma_©å_c⁄°


264 
	#lzma_©å_c⁄°
 
	`lzma_©åibuã
((
__c⁄°__
))

	)

267 #i‚de‡
lzma_©å_w¨n_unu£d_ªsu…


268 
	#lzma_©å_w¨n_unu£d_ªsu…
 \

269 
	`lzma_©åibuã
((
__w¨n_unu£d_ªsu…__
))

	)

277 #ifde‡
__˝lu•lus


285 
	#LZMA_H_INTERNAL
 1

	)

288 
	~"lzma/vîsi⁄.h
"

289 
	~"lzma/ba£.h
"

290 
	~"lzma/vli.h
"

291 
	~"lzma/check.h
"

294 
	~"lzma/fûãr.h
"

295 
	~"lzma/bcj.h
"

296 
	~"lzma/dñè.h
"

297 
	~"lzma/lzma12.h
"

300 
	~"lzma/c⁄èöî.h
"

303 
	~"lzma/°ªam_Êags.h
"

304 
	~"lzma/block.h
"

305 
	~"lzma/ödex.h
"

306 
	~"lzma/ödex_hash.h
"

309 
	~"lzma/h¨dw¨e.h
"

315 #unde‡
LZMA_H_INTERNAL


317 #ifde‡
__˝lu•lus


318 
	}
}

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/search.h

19 #i‚de‡
_SEARCH_H


20 
	#_SEARCH_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


29 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


33 #ifde‡
__USE_GNU


34 
	sqñem


36 
qñem
 *
	mq_f‹w
;

37 
qñem
 *
	mq_back
;

38 
	mq_d©a
[1];

44 
	$ösque
 (*
__ñem
, *
__¥ev
Ë
__THROW
;

47 
	$ªmque
 (*
__ñem
Ë
__THROW
;

52 #i‚de‡
__COMPAR_FN_T


53 
	#__COMPAR_FN_T


	)

54 (*
	t__com∑r_‚_t
) (const *, const *);

56 #ifdef 
__USE_GNU


57 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

64 
FIND
,

65 
ENTER


67 
	tACTION
;

69 
	síåy


71 *
key
;

72 *
d©a
;

74 
	tENTRY
;

77 
_ENTRY
;

87 
ENTRY
 *
	$h£¨ch
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
Ë
__THROW
;

90 
	$h¸óã
 (
size_t
 
__√l
Ë
__THROW
;

93 
	$hde°roy
 (Ë
__THROW
;

95 #ifde‡
__USE_GNU


97 
	sh£¨ch_d©a


99 
_ENTRY
 *
èbÀ
;

100 
size
;

101 
fûÀd
;

106 
	$h£¨ch_r
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
, ENTRY **
__ªtvÆ
,

107 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

108 
	$h¸óã_r
 (
size_t
 
__√l
, 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

109 
	$hde°roy_r
 (
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

120 
¥e‹dî
,

121 
po°‹dî
,

122 
íd‹dî
,

123 
Àaf


125 
	tVISIT
;

129 *
	`t£¨ch
 (c⁄° *
__key
, **
__roŸp
,

130 
__com∑r_‚_t
 
__com∑r
);

134 *
	`tföd
 (c⁄° *
__key
, *c⁄° *
__roŸp
,

135 
__com∑r_‚_t
 
__com∑r
);

138 *
	`tdñëe
 (c⁄° *
__ª°ri˘
 
__key
,

139 **
__ª°ri˘
 
__roŸp
,

140 
__com∑r_‚_t
 
__com∑r
);

142 #i‚de‡
__ACTION_FN_T


143 
	#__ACTION_FN_T


	)

144 (*
	t__a˘i⁄_‚_t
Ë(c⁄° *
	t__nodï
, 
	tVISIT
 
	t__vÆue
,

145 
	t__Àvñ
);

150 
	`twÆk
 (c⁄° *
__roŸ
, 
__a˘i⁄_‚_t
 
__a˘i⁄
);

152 #ifde‡
__USE_GNU


155 (*
	t__‰ì_‚_t
Ë(*
	t__nodï
);

158 
	`tde°roy
 (*
__roŸ
, 
__‰ì_‚_t
 
__‰ìf˘
);

164 *
	`lföd
 (c⁄° *
__key
, c⁄° *
__ba£
,

165 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

169 *
	`l£¨ch
 (c⁄° *
__key
, *
__ba£
,

170 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

172 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

102 #ifde‡
__USE_XOPEN2K8


103 #i‚de‡
__ssize_t_deföed


104 
__ssize_t
 
	tssize_t
;

105 
	#__ssize_t_deföed


	)

110 
__BEGIN_NAMESPACE_STD


111 #i‚de‡
__USE_FILE_OFFSET64


112 
_G_Âos_t
 
	tÂos_t
;

114 
_G_Âos64_t
 
	tÂos_t
;

116 
__END_NAMESPACE_STD


117 #ifde‡
__USE_LARGEFILE64


118 
_G_Âos64_t
 
	tÂos64_t
;

122 
	#_IOFBF
 0

	)

123 
	#_IOLBF
 1

	)

124 
	#_IONBF
 2

	)

128 #i‚de‡
BUFSIZ


129 
	#BUFSIZ
 
_IO_BUFSIZ


	)

135 #i‚de‡
EOF


136 
	#EOF
 (-1)

	)

142 
	#SEEK_SET
 0

	)

143 
	#SEEK_CUR
 1

	)

144 
	#SEEK_END
 2

	)

145 #ifde‡
__USE_GNU


146 
	#SEEK_DATA
 3

	)

147 
	#SEEK_HOLE
 4

	)

151 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


153 
	#P_tmpdú
 "/tmp"

	)

166 
	~<bôs/°dio_lim.h
>

170 
_IO_FILE
 *
°dö
;

171 
_IO_FILE
 *
°dout
;

172 
_IO_FILE
 *
°dîr
;

174 
	#°dö
 
°dö


	)

175 
	#°dout
 
°dout


	)

176 
	#°dîr
 
°dîr


	)

178 
__BEGIN_NAMESPACE_STD


180 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

182 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

183 
__END_NAMESPACE_STD


185 #ifde‡
__USE_ATFILE


187 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

188 c⁄° *
__√w
Ë
__THROW
;

191 
__BEGIN_NAMESPACE_STD


196 #i‚de‡
__USE_FILE_OFFSET64


197 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

199 #ifde‡
__REDIRECT


200 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

202 
	#tmpfûe
 
tmpfûe64


	)

206 #ifde‡
__USE_LARGEFILE64


207 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

211 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


217 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

221 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


229 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

230 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

234 
__BEGIN_NAMESPACE_STD


239 
	`f˛o£
 (
FILE
 *
__°ªam
);

244 
	`fÊush
 (
FILE
 *
__°ªam
);

245 
__END_NAMESPACE_STD


247 #ifde‡
__USE_MISC


254 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

257 #ifde‡
__USE_GNU


264 
	`f˛o£Æl
 ();

268 
__BEGIN_NAMESPACE_STD


269 #i‚de‡
__USE_FILE_OFFSET64


274 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

275 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

280 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

281 c⁄° *
__ª°ri˘
 
__modes
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

284 #ifde‡
__REDIRECT


285 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

286 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

287 
__wur
;

288 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

289 c⁄° *
__ª°ri˘
 
__modes
,

290 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

291 
__wur
;

293 
	#f›í
 
f›í64


	)

294 
	#‰e›í
 
‰e›í64


	)

297 
__END_NAMESPACE_STD


298 #ifde‡
__USE_LARGEFILE64


299 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

301 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

302 c⁄° *
__ª°ri˘
 
__modes
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

306 #ifdef 
__USE_POSIX


308 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

311 #ifdef 
__USE_GNU


314 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

315 c⁄° *
__ª°ri˘
 
__modes
,

316 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

319 #ifde‡
__USE_XOPEN2K8


321 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

322 
__THROW
 
__wur
;

327 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

331 
__BEGIN_NAMESPACE_STD


334 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

338 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
__modes
, 
size_t
 
__n
Ë
__THROW
;

340 
__END_NAMESPACE_STD


342 #ifdef 
__USE_MISC


345 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

346 
size_t
 
__size
Ë
__THROW
;

349 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

353 
__BEGIN_NAMESPACE_STD


358 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

366 
	$•rötf
 (*
__ª°ri˘
 
__s
,

367 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

373 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
_G_va_li°
 
__¨g
);

379 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

381 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

382 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

383 
__END_NAMESPACE_STD


385 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


386 
__BEGIN_NAMESPACE_C99


388 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

389 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

390 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

392 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

393 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

394 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

395 
__END_NAMESPACE_C99


398 #ifde‡
__USE_GNU


401 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

402 
_G_va_li°
 
__¨g
)

403 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

404 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

405 c⁄° *
__ª°ri˘
 
__fmt
, ...)

406 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

408 c⁄° *
__ª°ri˘
 
__fmt
, ...)

409 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

412 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

436 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

451 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

486 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (c⁄° *
__ª°ri˘
 
__s
,

506 c⁄° *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

516 c⁄° *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #ifde‡
__USE_POSIX199506


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #ifde‡
__USE_POSIX199506


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

627 #i‡!
deföed
 
__USE_ISOC11
 \

628 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

640 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

642 
__END_NAMESPACE_STD


644 #ifde‡
__USE_GNU


651 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

652 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

656 #ifdef 
__USE_XOPEN2K8


667 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

668 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

670 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

671 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

672 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

680 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

681 
size_t
 *
__ª°ri˘
 
__n
,

682 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

686 
__BEGIN_NAMESPACE_STD


691 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

697 
	`puts
 (c⁄° *
__s
);

704 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

711 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

712 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

717 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

718 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

719 
__END_NAMESPACE_STD


721 #ifde‡
__USE_GNU


728 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

729 
FILE
 *
__ª°ri˘
 
__°ªam
);

732 #ifde‡
__USE_MISC


739 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

741 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

742 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

746 
__BEGIN_NAMESPACE_STD


751 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

756 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

761 
	`ªwöd
 (
FILE
 *
__°ªam
);

762 
__END_NAMESPACE_STD


769 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


770 #i‚de‡
__USE_FILE_OFFSET64


775 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

780 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

782 #ifde‡
__REDIRECT


783 
	`__REDIRECT
 (
f£eko
,

784 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

785 
f£eko64
);

786 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

788 
	#f£eko
 
f£eko64


	)

789 
	#·ñlo
 
·ñlo64


	)

794 
__BEGIN_NAMESPACE_STD


795 #i‚de‡
__USE_FILE_OFFSET64


800 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

805 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

807 #ifde‡
__REDIRECT


808 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

809 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

810 
	`__REDIRECT
 (
f£ços
,

811 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

813 
	#fgëpos
 
fgëpos64


	)

814 
	#f£ços
 
f£ços64


	)

817 
__END_NAMESPACE_STD


819 #ifde‡
__USE_LARGEFILE64


820 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

821 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

822 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

823 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

826 
__BEGIN_NAMESPACE_STD


828 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

830 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

833 
__END_NAMESPACE_STD


835 #ifde‡
__USE_MISC


837 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

838 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

839 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

843 
__BEGIN_NAMESPACE_STD


848 
	`≥º‹
 (c⁄° *
__s
);

849 
__END_NAMESPACE_STD


855 
	~<bôs/sys_îæi°.h
>

858 #ifdef 
__USE_POSIX


860 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

863 #ifde‡
__USE_MISC


865 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

869 #ifde‡
__USE_POSIX2


874 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

880 
	`p˛o£
 (
FILE
 *
__°ªam
);

884 #ifdef 
__USE_POSIX


886 *
	$˘îmid
 (*
__s
Ë
__THROW
;

890 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


892 *
	`cu£rid
 (*
__s
);

896 #ifdef 
__USE_GNU


897 
ob°ack
;

900 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

901 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

903 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

904 c⁄° *
__ª°ri˘
 
__f‹m©
,

905 
_G_va_li°
 
__¨gs
)

906 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

910 #ifde‡
__USE_POSIX199506


914 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

921 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

924 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


928 
	#__√ed_gë›t


	)

929 
	~<gë›t.h
>

934 #ifde‡
__USE_EXTERN_INLINES


935 
	~<bôs/°dio.h
>

937 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


938 
	~<bôs/°dio2.h
>

940 #ifde‡
__LDBL_COMPAT


941 
	~<bôs/°dio-ldbl.h
>

944 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

45 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

46 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

47 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

48 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

49 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

50 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

51 #ifde‡
__WIFCONTINUED


52 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
__BEGIN_NAMESPACE_STD


60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

73 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__BEGIN_NAMESPACE_C99


78 
__exãnsi⁄__
 struct

80 
	mquŸ
;

81 
	mªm
;

82 } 
	tŒdiv_t
;

83 
	#__Œdiv_t_deföed
 1

	)

84 
	g__END_NAMESPACE_C99


89 
	#RAND_MAX
 2147483647

	)

94 
	#EXIT_FAILURE
 1

	)

95 
	#EXIT_SUCCESS
 0

	)

99 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

100 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

103 
__BEGIN_NAMESPACE_STD


105 
	$©of
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©oi
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 
	$©ﬁ
 (c⁄° *
__≈å
)

112 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_ISOC99


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

119 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

120 
__END_NAMESPACE_C99


123 
__BEGIN_NAMESPACE_STD


125 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

126 **
__ª°ri˘
 
__íd±r
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1));

128 
__END_NAMESPACE_STD


130 #ifdef 
__USE_ISOC99


131 
__BEGIN_NAMESPACE_C99


133 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

134 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

136 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

137 **
__ª°ri˘
 
__íd±r
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 
__END_NAMESPACE_C99


142 
__BEGIN_NAMESPACE_STD


144 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

145 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

149 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 
__END_NAMESPACE_STD


153 #ifde‡
__USE_MISC


155 
__exãnsi⁄__


156 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

157 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

158 
__THROW
 
	`__n⁄nuŒ
 ((1));

160 
__exãnsi⁄__


161 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

162 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__exãnsi⁄__


170 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

174 
__exãnsi⁄__


175 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


182 #ifde‡
__USE_GNU


196 
	~<xloˇÀ.h
>

200 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

202 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

204 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

205 **
__ª°ri˘
 
__íd±r
,

206 
__ba£
, 
__loˇÀ_t
 
__loc
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

209 
__exãnsi⁄__


210 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

212 
__loˇÀ_t
 
__loc
)

213 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

215 
__exãnsi⁄__


216 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

217 **
__ª°ri˘
 
__íd±r
,

218 
__ba£
, 
__loˇÀ_t
 
__loc
)

219 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

221 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

222 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

223 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

225 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

226 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

227 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

229 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

230 **
__ª°ri˘
 
__íd±r
,

231 
__loˇÀ_t
 
__loc
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

236 #ifde‡
__USE_EXTERN_INLINES


237 
__BEGIN_NAMESPACE_STD


238 
__exã∫_ölöe
 

239 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

241  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

242 
	}
}

243 
__exã∫_ölöe
 

244 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

246  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

247 
	}
}

248 
	g__END_NAMESPACE_STD


250 #ifde‡
__USE_ISOC99


251 
__BEGIN_NAMESPACE_C99


252 
__exãnsi⁄__
 
__exã∫_ölöe
 

253 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

255  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

256 
	}
}

257 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


266 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

269 
	$a64l
 (c⁄° *
__s
)

270 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

274 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


275 
	~<sys/ty≥s.h
>

282 
	$øndom
 (Ë
__THROW
;

285 
	$§™dom
 (
__£ed
Ë
__THROW
;

291 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

292 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

296 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 #ifde‡
__USE_MISC


304 
	søndom_d©a


306 
öt32_t
 *
Âå
;

307 
öt32_t
 *
Ωå
;

308 
öt32_t
 *
°©e
;

309 
ønd_ty≥
;

310 
ønd_deg
;

311 
ønd_£p
;

312 
öt32_t
 *
íd_±r
;

315 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

316 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

319 
__THROW
 
	`__n⁄nuŒ
 ((2));

321 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

322 
size_t
 
__°©ñí
,

323 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

324 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

326 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

327 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
__BEGIN_NAMESPACE_STD


335 
	$ønd
 (Ë
__THROW
;

337 
	$§™d
 (
__£ed
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifde‡
__USE_POSIX199506


342 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

346 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


350 
	$dønd48
 (Ë
__THROW
;

351 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$Ã™d48
 (Ë
__THROW
;

355 
	$ƒ™d48
 (
__xsubi
[3])

356 
__THROW
 
	`__n⁄nuŒ
 ((1));

359 
	$mønd48
 (Ë
__THROW
;

360 
	$jønd48
 (
__xsubi
[3])

361 
__THROW
 
	`__n⁄nuŒ
 ((1));

364 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

365 *
	$£ed48
 (
__£ed16v
[3])

366 
__THROW
 
	`__n⁄nuŒ
 ((1));

367 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_MISC


373 
	sdønd48_d©a


375 
__x
[3];

376 
__ﬁd_x
[3];

377 
__c
;

378 
__öô
;

379 
__exãnsi⁄__
 
__a
;

384 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

385 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$î™d48_r
 (
__xsubi
[3],

387 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

388 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

392 *
__ª°ri˘
 
__ªsu…
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

394 
	$ƒ™d48_r
 (
__xsubi
[3],

395 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

396 *
__ª°ri˘
 
__ªsu…
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

401 *
__ª°ri˘
 
__ªsu…
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

403 
	$jønd48_r
 (
__xsubi
[3],

404 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

405 *
__ª°ri˘
 
__ªsu…
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

409 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

410 
__THROW
 
	`__n⁄nuŒ
 ((2));

412 
	$£ed48_r
 (
__£ed16v
[3],

413 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

415 
	$lc⁄g48_r
 (
__∑øm
[7],

416 
dønd48_d©a
 *
__buf„r
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

423 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


424 
	#__mÆloc_™d_ˇŒoc_deföed


	)

425 
__BEGIN_NAMESPACE_STD


427 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

429 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

430 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

431 
__END_NAMESPACE_STD


434 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


435 
__BEGIN_NAMESPACE_STD


441 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

442 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

444 
	$‰ì
 (*
__±r
Ë
__THROW
;

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_MISC


449 
	$c‰ì
 (*
__±r
Ë
__THROW
;

452 #ifde‡
__USE_MISC


453 
	~<Æloˇ.h
>

456 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

457 || 
deföed
 
__USE_MISC


459 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

462 #ifde‡
__USE_XOPEN2K


464 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

465 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

468 #ifde‡
__USE_ISOC11


470 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

471 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

474 
__BEGIN_NAMESPACE_STD


476 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

480 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

482 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


484 #ifde‡
__˝lu•lus


485 "C++" 
	$©_quick_exô
 ((*
__func
) ())

486 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

488 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 
__END_NAMESPACE_STD


493 #ifdef 
__USE_MISC


496 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

497 
__THROW
 
	`__n⁄nuŒ
 ((1));

500 
__BEGIN_NAMESPACE_STD


504 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

506 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


510 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

512 
__END_NAMESPACE_STD


514 #ifde‡
__USE_ISOC99


515 
__BEGIN_NAMESPACE_C99


518 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
__END_NAMESPACE_C99


523 
__BEGIN_NAMESPACE_STD


525 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

526 
__END_NAMESPACE_STD


528 #ifde‡
__USE_GNU


531 *
	$£cuª_gëív
 (c⁄° *
__«me
)

532 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

535 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


539 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

542 #ifde‡
__USE_XOPEN2K


545 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

546 
__THROW
 
	`__n⁄nuŒ
 ((2));

549 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

552 #ifdef 
__USE_MISC


556 
	$˛óªnv
 (Ë
__THROW
;

560 #i‡
deföed
 
__USE_MISC
 \

561 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

567 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

570 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


579 #i‚de‡
__USE_FILE_OFFSET64


580 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

582 #ifde‡
__REDIRECT


583 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

584 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

586 
	#mk°emp
 
mk°emp64


	)

589 #ifde‡
__USE_LARGEFILE64


590 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

594 #ifde‡
__USE_MISC


601 #i‚de‡
__USE_FILE_OFFSET64


602 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

604 #ifde‡
__REDIRECT


605 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

606 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 
	#mk°emps
 
mk°emps64


	)

611 #ifde‡
__USE_LARGEFILE64


612 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

613 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_XOPEN2K8


623 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 #ifde‡
__USE_GNU


633 #i‚de‡
__USE_FILE_OFFSET64


634 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__REDIRECT


637 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

638 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
	#mko°emp
 
mko°emp64


	)

643 #ifde‡
__USE_LARGEFILE64


644 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

653 #i‚de‡
__USE_FILE_OFFSET64


654 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

655 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #ifde‡
__REDIRECT


658 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

659 
__Êags
), 
mko°emps64
)

660 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

662 
	#mko°emps
 
mko°emps64


	)

665 #ifde‡
__USE_LARGEFILE64


666 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

667 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

672 
__BEGIN_NAMESPACE_STD


677 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

678 
__END_NAMESPACE_STD


681 #ifdef 
__USE_GNU


684 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

685 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


694 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

695 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

700 #i‚de‡
__COMPAR_FN_T


701 
	#__COMPAR_FN_T


	)

702 (*
	t__com∑r_‚_t
) (const *, const *);

704 #ifdef 
__USE_GNU


705 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

708 #ifde‡
__USE_GNU


709 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

712 
__BEGIN_NAMESPACE_STD


715 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

716 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

717 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

719 #ifde‡
__USE_EXTERN_INLINES


720 
	~<bôs/°dlib-b£¨ch.h
>

725 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

726 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

727 #ifde‡
__USE_GNU


728 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

729 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

730 
	`__n⁄nuŒ
 ((1, 4));

735 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

736 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

737 
__END_NAMESPACE_STD


739 #ifde‡
__USE_ISOC99


740 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

741 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

745 
__BEGIN_NAMESPACE_STD


749 
div_t
 
	$div
 (
__numî
, 
__díom
)

750 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

751 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

752 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

753 
__END_NAMESPACE_STD


755 #ifde‡
__USE_ISOC99


756 
__BEGIN_NAMESPACE_C99


757 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

758 
__díom
)

759 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

760 
__END_NAMESPACE_C99


764 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

765 || 
deföed
 
__USE_MISC


772 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

773 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

778 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

779 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

784 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

785 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

788 #ifde‡
__USE_MISC


790 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

791 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

792 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

793 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

794 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

795 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

796 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

797 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

802 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

804 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

805 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

806 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

807 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

809 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

810 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

811 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

812 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

813 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

814 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

815 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

816 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

820 
__BEGIN_NAMESPACE_STD


823 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

826 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

827 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

830 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

834 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

835 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

837 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

838 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

839 
__THROW
;

840 
__END_NAMESPACE_STD


843 #ifde‡
__USE_MISC


848 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

852 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


859 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

860 *c⁄° *
__ª°ri˘
 
__tokís
,

861 **
__ª°ri˘
 
__vÆuï
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

866 #ifde‡
__USE_XOPEN


868 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #ifde‡
__USE_XOPEN2KXSI


876 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

879 #ifde‡
__USE_XOPEN_EXTENDED


884 
	$gø¡±
 (
__fd
Ë
__THROW
;

888 
	$u∆ock±
 (
__fd
Ë
__THROW
;

893 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

896 #ifde‡
__USE_GNU


900 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

901 
__THROW
 
	`__n⁄nuŒ
 ((2));

904 
	`gë±
 ();

907 #ifde‡
__USE_MISC


911 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

915 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


918 
	$ây¶Ÿ
 (Ë
__THROW
;

921 
	~<bôs/°dlib-Êﬂt.h
>

924 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


925 
	~<bôs/°dlib.h
>

927 #ifde‡
__LDBL_COMPAT


928 
	~<bôs/°dlib-ldbl.h
>

932 #unde‡
__√ed_mÆloc_™d_ˇŒoc


934 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
	`__GNUC_PREREQ
 (3,4)

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

644 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
__exã∫_Æways_ölöe
 *

647 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

648 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

650  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

651 
	}
}

656 
	g__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_MISC


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

31 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

32 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

35 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


39 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

40 
__THROW
 
__©åibuã_puª__
;

43 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

46 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

49 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


52 *
	`ödex
 (*
__s
, 
__c
)

53 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

54 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

57 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


58 
__exã∫_Æways_ölöe
 *

59 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


61  
	`__buûtö_ödex
 (
__s
, 
__c
);

64 
__exã∫_Æways_ölöe
 const *

65 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


67  
	`__buûtö_ödex
 (
__s
, 
__c
);

70 
	}
}

72 *
	$ödex
 (c⁄° *
__s
, 
__c
)

73 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


80 *
	`rödex
 (*
__s
, 
__c
)

81 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

85 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


86 
__exã∫_Æways_ölöe
 *

87 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


89  
	`__buûtö_rödex
 (
__s
, 
__c
);

92 
__exã∫_Æways_ölöe
 const *

93 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


95  
	`__buûtö_rödex
 (
__s
, 
__c
);

98 
	}
}

100 *
	$rödex
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


108 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

112 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

113 
__THROW
 
__©åibuã_puª__
;

116 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

117 
__THROW
 
__©åibuã_puª__
;

119 #ifdef 
__USE_XOPEN2K8


123 
	~<xloˇÀ.h
>

127 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

128 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

130 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

131 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

135 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	#__√ed_gë›t


	)

873 
	~<gë›t.h
>

877 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


881 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_MISC


888 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

893 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

899 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

901 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

908 
	$vh™gup
 (Ë
__THROW
;

911 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

919 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

920 
size_t
 
__off£t
, 
__sˇÀ
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1));

927 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

931 *
	$gëu£rshñl
 (Ë
__THROW
;

932 
	$ídu£rshñl
 (Ë
__THROW
;

933 
	$£tu£rshñl
 (Ë
__THROW
;

939 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

943 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

946 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

958 
	`fsync
 (
__fd
);

961 #ifde‡
__USE_GNU


964 
	$syncfs
 (
__fd
Ë
__THROW
;

968 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


971 
	`gëho°id
 ();

974 
	$sync
 (Ë
__THROW
;

977 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


980 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

985 
	$gëdèbÀsize
 (Ë
__THROW
;

991 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


994 #i‚de‡
__USE_FILE_OFFSET64


995 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

996 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

998 #ifde‡
__REDIRECT_NTH


999 
	`__REDIRECT_NTH
 (
åunˇã
,

1000 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1001 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1003 
	#åunˇã
 
åunˇã64


	)

1006 #ifde‡
__USE_LARGEFILE64


1007 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1013 #i‡
deföed
 
__USE_POSIX199309
 \

1014 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1020 #ifde‡
__REDIRECT_NTH


1021 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1022 
·runˇã64
Ë
__wur
;

1024 
	#·runˇã
 
·runˇã64


	)

1027 #ifde‡
__USE_LARGEFILE64


1028 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1034 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1035 || 
deföed
 
__USE_MISC


1039 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1045 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1049 #ifde‡
__USE_MISC


1060 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1065 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1077 
	#F_ULOCK
 0

	)

1078 
	#F_LOCK
 1

	)

1079 
	#F_TLOCK
 2

	)

1080 
	#F_TEST
 3

	)

1082 #i‚de‡
__USE_FILE_OFFSET64


1083 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1085 #ifde‡
__REDIRECT


1086 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1087 
lockf64
Ë
__wur
;

1089 
	#lockf
 
lockf64


	)

1092 #ifde‡
__USE_LARGEFILE64


1093 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1098 #ifde‡
__USE_GNU


1103 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1104 (
__exãnsi⁄__
 \

1105 ({ 
__ªsu…
; \

1106 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1107 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1108 
__ªsu…
; 
	}
}))

	)

1111 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1114 
fd©async
 (
__fûdes
);

1120 #ifdef 
__USE_XOPEN


1122 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1127 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1128 
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1148 *
	`cu£rid
 (*
__s
);

1154 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1155 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1156 (*
__∑ª¡
) (),

1157 (*
__chûd
Ë()Ë
__THROW
;

1162 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1163 
	~<bôs/uni°d.h
>

1166 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1364 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1372 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1385 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1391 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1400 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1412 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1447 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1475 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1490 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1511 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1524 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1525 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1536 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1552 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1569 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1600 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1633 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1634 c⁄° *
vîsi⁄
, 
°ªam_size
));

1635 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1636 c⁄° *
vîsi⁄
, 
°ªam_size
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1638 
wödowBôs
, 
memLevñ
,

1639 
°øãgy
, c⁄° *
vîsi⁄
,

1640 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1642 c⁄° *
vîsi⁄
, 
°ªam_size
));

1643 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1644 
FAR
 *
wödow
,

1645 c⁄° *
vîsi⁄
,

1646 
°ªam_size
));

1647 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1648 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1649 
	#öÊ©eInô
(
°rm
) \

1650 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1651 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1652 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1653 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1654 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1655 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1656 ()(
z_°ªam
))

	)

1657 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1658 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1659 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1661 #i‚de‡
Z_SOLO


1670 
	sgzFûe_s
 {

1671 
have
;

1672 *
√xt
;

1673 
z_off64_t
 
pos
;

1675 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1676 #ifde‡
Z_PREFIX_SET


1677 #unde‡
z_gzgëc


1678 
	#z_gzgëc
(
g
) \

1679 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1681 
	#gzgëc
(
g
) \

1682 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1691 #ifde‡
Z_LARGE64


1692 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1693 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1694 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1695 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1696 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1697 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1700 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1701 #ifde‡
Z_PREFIX_SET


1702 
	#z_gz›í
 
z_gz›í64


	)

1703 
	#z_gz£ek
 
z_gz£ek64


	)

1704 
	#z_gzãŒ
 
z_gzãŒ64


	)

1705 
	#z_gzoff£t
 
z_gzoff£t64


	)

1706 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1707 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1709 
	#gz›í
 
gz›í64


	)

1710 
	#gz£ek
 
gz£ek64


	)

1711 
	#gzãŒ
 
gzãŒ64


	)

1712 
	#gzoff£t
 
gzoff£t64


	)

1713 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1714 
	#¸c32_comböe
 
¸c32_comböe64


	)

1716 #i‚de‡
Z_LARGE64


1717 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1718 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1719 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1720 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1721 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1722 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1725 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1726 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1727 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1728 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1729 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1730 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1735 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1736 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1741 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1742 
	söã∫Æ_°©e
 {
dummy
;};

1746 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1747 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1748 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1749 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1750 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1751 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1752 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1753 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1754 c⁄° *
mode
));

1756 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1757 #i‚de‡
Z_SOLO


1758 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1759 c⁄° *
f‹m©
,

1760 
va_li°
 
va
));

1764 #ifde‡
__˝lu•lus


	@/usr/include/GL/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_
 1

	)

4 #ifde‡
__˝lu•lus


39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

40 #i‚de‡
WIN32_LEAN_AND_MEAN


41 
	#WIN32_LEAN_AND_MEAN
 1

	)

43 
	~<wödows.h
>

46 #i‚de‡
APIENTRY


47 
	#APIENTRY


	)

49 #i‚de‡
APIENTRYP


50 
	#APIENTRYP
 
APIENTRY
 *

	)

52 #i‚de‡
GLAPI


53 
	#GLAPI
 

	)

56 
	#GL_GLEXT_VERSION
 20160714

	)

68 #i‚de‡
GL_VERSION_1_2


69 
	#GL_VERSION_1_2
 1

	)

70 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

71 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

72 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

73 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

74 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

75 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

76 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

77 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

78 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

79 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

80 
	#GL_TEXTURE_3D
 0x806F

	)

81 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

82 
	#GL_TEXTURE_DEPTH
 0x8071

	)

83 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

84 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

85 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

86 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

87 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

88 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

89 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

90 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

91 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

92 
	#GL_BGR
 0x80E0

	)

93 
	#GL_BGRA
 0x80E1

	)

94 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

95 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

96 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

97 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

98 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

99 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

100 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

101 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

102 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

103 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

104 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

105 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

106 
	#GL_RESCALE_NORMAL
 0x803A

	)

107 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

108 
	#GL_SINGLE_COLOR
 0x81F9

	)

109 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

110 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

111 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

112 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

113 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

114 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

115 #ifde‡
GL_GLEXT_PROTOTYPES


116 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

117 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

118 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

119 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

123 #i‚de‡
GL_VERSION_1_3


124 
	#GL_VERSION_1_3
 1

	)

125 
	#GL_TEXTURE0
 0x84C0

	)

126 
	#GL_TEXTURE1
 0x84C1

	)

127 
	#GL_TEXTURE2
 0x84C2

	)

128 
	#GL_TEXTURE3
 0x84C3

	)

129 
	#GL_TEXTURE4
 0x84C4

	)

130 
	#GL_TEXTURE5
 0x84C5

	)

131 
	#GL_TEXTURE6
 0x84C6

	)

132 
	#GL_TEXTURE7
 0x84C7

	)

133 
	#GL_TEXTURE8
 0x84C8

	)

134 
	#GL_TEXTURE9
 0x84C9

	)

135 
	#GL_TEXTURE10
 0x84CA

	)

136 
	#GL_TEXTURE11
 0x84CB

	)

137 
	#GL_TEXTURE12
 0x84CC

	)

138 
	#GL_TEXTURE13
 0x84CD

	)

139 
	#GL_TEXTURE14
 0x84CE

	)

140 
	#GL_TEXTURE15
 0x84CF

	)

141 
	#GL_TEXTURE16
 0x84D0

	)

142 
	#GL_TEXTURE17
 0x84D1

	)

143 
	#GL_TEXTURE18
 0x84D2

	)

144 
	#GL_TEXTURE19
 0x84D3

	)

145 
	#GL_TEXTURE20
 0x84D4

	)

146 
	#GL_TEXTURE21
 0x84D5

	)

147 
	#GL_TEXTURE22
 0x84D6

	)

148 
	#GL_TEXTURE23
 0x84D7

	)

149 
	#GL_TEXTURE24
 0x84D8

	)

150 
	#GL_TEXTURE25
 0x84D9

	)

151 
	#GL_TEXTURE26
 0x84DA

	)

152 
	#GL_TEXTURE27
 0x84DB

	)

153 
	#GL_TEXTURE28
 0x84DC

	)

154 
	#GL_TEXTURE29
 0x84DD

	)

155 
	#GL_TEXTURE30
 0x84DE

	)

156 
	#GL_TEXTURE31
 0x84DF

	)

157 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

158 
	#GL_MULTISAMPLE
 0x809D

	)

159 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

160 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

161 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

162 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

163 
	#GL_SAMPLES
 0x80A9

	)

164 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

165 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

166 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

167 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

168 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

169 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

170 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

171 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

172 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

173 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

174 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

175 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

176 
	#GL_COMPRESSED_RGB
 0x84ED

	)

177 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

178 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

179 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

180 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

181 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

182 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

183 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

184 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

185 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

186 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

187 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

188 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

189 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

190 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

191 
	#GL_NORMAL_MAP
 0x8511

	)

192 
	#GL_REFLECTION_MAP
 0x8512

	)

193 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

194 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

195 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

196 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

197 
	#GL_COMBINE
 0x8570

	)

198 
	#GL_COMBINE_RGB
 0x8571

	)

199 
	#GL_COMBINE_ALPHA
 0x8572

	)

200 
	#GL_SOURCE0_RGB
 0x8580

	)

201 
	#GL_SOURCE1_RGB
 0x8581

	)

202 
	#GL_SOURCE2_RGB
 0x8582

	)

203 
	#GL_SOURCE0_ALPHA
 0x8588

	)

204 
	#GL_SOURCE1_ALPHA
 0x8589

	)

205 
	#GL_SOURCE2_ALPHA
 0x858A

	)

206 
	#GL_OPERAND0_RGB
 0x8590

	)

207 
	#GL_OPERAND1_RGB
 0x8591

	)

208 
	#GL_OPERAND2_RGB
 0x8592

	)

209 
	#GL_OPERAND0_ALPHA
 0x8598

	)

210 
	#GL_OPERAND1_ALPHA
 0x8599

	)

211 
	#GL_OPERAND2_ALPHA
 0x859A

	)

212 
	#GL_RGB_SCALE
 0x8573

	)

213 
	#GL_ADD_SIGNED
 0x8574

	)

214 
	#GL_INTERPOLATE
 0x8575

	)

215 
	#GL_SUBTRACT
 0x84E7

	)

216 
	#GL_CONSTANT
 0x8576

	)

217 
	#GL_PRIMARY_COLOR
 0x8577

	)

218 
	#GL_PREVIOUS
 0x8578

	)

219 
	#GL_DOT3_RGB
 0x86AE

	)

220 
	#GL_DOT3_RGBA
 0x86AF

	)

221 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

222 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

223 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

224 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

225 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

226 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

227 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

228 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

229 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

230 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

231 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

232 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

233 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

234 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

235 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

236 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

237 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

238 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

239 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

240 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

241 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

242 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

243 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

244 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

245 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

246 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

247 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

248 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

249 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

250 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

251 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

252 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

253 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

254 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

255 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

256 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

257 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

258 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

259 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

260 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

261 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

262 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

263 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

264 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

265 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

266 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

267 #ifde‡
GL_GLEXT_PROTOTYPES


268 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

269 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

270 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

271 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

272 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

273 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

274 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

275 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

276 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

277 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
 
ãxtuª
);

278 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

279 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

280 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

281 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

282 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

283 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

284 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

285 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

286 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

287 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

288 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

289 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

290 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

291 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

292 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

293 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

294 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

295 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

296 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

297 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

298 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

299 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

300 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

301 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

302 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

303 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

304 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

305 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

306 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

307 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

308 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

309 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

310 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

311 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

312 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

313 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

317 #i‚de‡
GL_VERSION_1_4


318 
	#GL_VERSION_1_4
 1

	)

319 
	#GL_BLEND_DST_RGB
 0x80C8

	)

320 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

321 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

322 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

323 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

324 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

325 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

326 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

327 
	#GL_MIRRORED_REPEAT
 0x8370

	)

328 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

329 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

330 
	#GL_INCR_WRAP
 0x8507

	)

331 
	#GL_DECR_WRAP
 0x8508

	)

332 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

333 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

334 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

335 
	#GL_POINT_SIZE_MIN
 0x8126

	)

336 
	#GL_POINT_SIZE_MAX
 0x8127

	)

337 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

338 
	#GL_GENERATE_MIPMAP
 0x8191

	)

339 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

340 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

341 
	#GL_FOG_COORDINATE
 0x8451

	)

342 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

343 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

344 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

345 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

346 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

347 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

348 
	#GL_COLOR_SUM
 0x8458

	)

349 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

350 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

351 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

352 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

353 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

354 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

355 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

356 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

357 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

358 
	#GL_FUNC_ADD
 0x8006

	)

359 
	#GL_FUNC_SUBTRACT
 0x800A

	)

360 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

361 
	#GL_MIN
 0x8007

	)

362 
	#GL_MAX
 0x8008

	)

363 
	#GL_CONSTANT_COLOR
 0x8001

	)

364 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

365 
	#GL_CONSTANT_ALPHA
 0x8003

	)

366 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

367 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

368 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

369 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
);

370 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

371 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

372 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

373 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

374 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

375 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

376 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

377 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

378 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

379 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

380 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

381 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

382 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

383 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

384 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

385 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

386 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

387 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

388 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

389 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

390 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

391 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

392 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

393 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

394 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

395 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

396 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

397 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

398 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

399 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

400 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

401 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

402 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

403 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

404 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

405 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

406 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

407 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

408 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

409 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

410 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

411 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

412 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

413 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

414 #ifde‡
GL_GLEXT_PROTOTYPES


415 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

416 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
døwcou¡
);

417 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
);

418 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

419 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

420 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

421 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

422 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
 
co‹d
);

423 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *
co‹d
);

424 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
 
co‹d
);

425 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *
co‹d
);

426 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

427 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

428 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *
v
);

429 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

430 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *
v
);

431 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

432 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *
v
);

433 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

434 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *
v
);

435 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

436 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *
v
);

437 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

438 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *
v
);

439 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

440 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *
v
);

441 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

442 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *
v
);

443 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

444 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

445 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *
v
);

446 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

447 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *
v
);

448 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
 
x
, GLöà
y
);

449 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *
v
);

450 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

451 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *
v
);

452 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

453 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *
v
);

454 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

455 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *
v
);

456 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

457 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *
v
);

458 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

459 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *
v
);

460 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

461 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
 
mode
);

465 #i‚de‡
GL_VERSION_1_5


466 
	#GL_VERSION_1_5
 1

	)

467 
	~<°ddef.h
>

468 
±rdiff_t
 
	tGLsizeùå
;

469 
±rdiff_t
 
	tGLöçå
;

470 
	#GL_BUFFER_SIZE
 0x8764

	)

471 
	#GL_BUFFER_USAGE
 0x8765

	)

472 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

473 
	#GL_CURRENT_QUERY
 0x8865

	)

474 
	#GL_QUERY_RESULT
 0x8866

	)

475 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

476 
	#GL_ARRAY_BUFFER
 0x8892

	)

477 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

478 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

479 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

480 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

481 
	#GL_READ_ONLY
 0x88B8

	)

482 
	#GL_WRITE_ONLY
 0x88B9

	)

483 
	#GL_READ_WRITE
 0x88BA

	)

484 
	#GL_BUFFER_ACCESS
 0x88BB

	)

485 
	#GL_BUFFER_MAPPED
 0x88BC

	)

486 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

487 
	#GL_STREAM_DRAW
 0x88E0

	)

488 
	#GL_STREAM_READ
 0x88E1

	)

489 
	#GL_STREAM_COPY
 0x88E2

	)

490 
	#GL_STATIC_DRAW
 0x88E4

	)

491 
	#GL_STATIC_READ
 0x88E5

	)

492 
	#GL_STATIC_COPY
 0x88E6

	)

493 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

494 
	#GL_DYNAMIC_READ
 0x88E9

	)

495 
	#GL_DYNAMIC_COPY
 0x88EA

	)

496 
	#GL_SAMPLES_PASSED
 0x8914

	)

497 
	#GL_SRC1_ALPHA
 0x8589

	)

498 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

499 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

500 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

501 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

502 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

503 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

504 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

505 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

506 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

507 
	#GL_FOG_COORD_SRC
 0x8450

	)

508 
	#GL_FOG_COORD
 0x8451

	)

509 
	#GL_CURRENT_FOG_COORD
 0x8453

	)

510 
	#GL_FOG_COORD_ARRAY_TYPE
 0x8454

	)

511 
	#GL_FOG_COORD_ARRAY_STRIDE
 0x8455

	)

512 
	#GL_FOG_COORD_ARRAY_POINTER
 0x8456

	)

513 
	#GL_FOG_COORD_ARRAY
 0x8457

	)

514 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 0x889D

	)

515 
	#GL_SRC0_RGB
 0x8580

	)

516 
	#GL_SRC1_RGB
 0x8581

	)

517 
	#GL_SRC2_RGB
 0x8582

	)

518 
	#GL_SRC0_ALPHA
 0x8588

	)

519 
	#GL_SRC2_ALPHA
 0x858A

	)

520 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

521 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

522 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

523 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

524 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

525 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

526 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

527 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

528 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

529 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

530 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

531 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

532 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

533 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

534 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

535 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

536 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

537 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

538 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

539 #ifde‡
GL_GLEXT_PROTOTYPES


540 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

541 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

542 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
 
id
);

543 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

544 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
 
èrgë
);

545 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

546 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

547 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

548 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

549 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

550 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

551 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

552 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

553 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

554 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

555 
GLAPI
 *
APIENTRY
 
glM≠Buf„r
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

556 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
 
èrgë
);

557 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

558 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

562 #i‚de‡
GL_VERSION_2_0


563 
	#GL_VERSION_2_0
 1

	)

564 
	tGLch¨
;

565 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

566 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

567 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

568 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

569 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

570 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

571 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

572 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

573 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

574 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

575 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

576 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

577 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

578 
	#GL_DRAW_BUFFER0
 0x8825

	)

579 
	#GL_DRAW_BUFFER1
 0x8826

	)

580 
	#GL_DRAW_BUFFER2
 0x8827

	)

581 
	#GL_DRAW_BUFFER3
 0x8828

	)

582 
	#GL_DRAW_BUFFER4
 0x8829

	)

583 
	#GL_DRAW_BUFFER5
 0x882A

	)

584 
	#GL_DRAW_BUFFER6
 0x882B

	)

585 
	#GL_DRAW_BUFFER7
 0x882C

	)

586 
	#GL_DRAW_BUFFER8
 0x882D

	)

587 
	#GL_DRAW_BUFFER9
 0x882E

	)

588 
	#GL_DRAW_BUFFER10
 0x882F

	)

589 
	#GL_DRAW_BUFFER11
 0x8830

	)

590 
	#GL_DRAW_BUFFER12
 0x8831

	)

591 
	#GL_DRAW_BUFFER13
 0x8832

	)

592 
	#GL_DRAW_BUFFER14
 0x8833

	)

593 
	#GL_DRAW_BUFFER15
 0x8834

	)

594 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

595 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

596 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

597 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

598 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

599 
	#GL_VERTEX_SHADER
 0x8B31

	)

600 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

601 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

602 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

603 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

604 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

605 
	#GL_SHADER_TYPE
 0x8B4F

	)

606 
	#GL_FLOAT_VEC2
 0x8B50

	)

607 
	#GL_FLOAT_VEC3
 0x8B51

	)

608 
	#GL_FLOAT_VEC4
 0x8B52

	)

609 
	#GL_INT_VEC2
 0x8B53

	)

610 
	#GL_INT_VEC3
 0x8B54

	)

611 
	#GL_INT_VEC4
 0x8B55

	)

612 
	#GL_BOOL
 0x8B56

	)

613 
	#GL_BOOL_VEC2
 0x8B57

	)

614 
	#GL_BOOL_VEC3
 0x8B58

	)

615 
	#GL_BOOL_VEC4
 0x8B59

	)

616 
	#GL_FLOAT_MAT2
 0x8B5A

	)

617 
	#GL_FLOAT_MAT3
 0x8B5B

	)

618 
	#GL_FLOAT_MAT4
 0x8B5C

	)

619 
	#GL_SAMPLER_1D
 0x8B5D

	)

620 
	#GL_SAMPLER_2D
 0x8B5E

	)

621 
	#GL_SAMPLER_3D
 0x8B5F

	)

622 
	#GL_SAMPLER_CUBE
 0x8B60

	)

623 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

624 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

625 
	#GL_DELETE_STATUS
 0x8B80

	)

626 
	#GL_COMPILE_STATUS
 0x8B81

	)

627 
	#GL_LINK_STATUS
 0x8B82

	)

628 
	#GL_VALIDATE_STATUS
 0x8B83

	)

629 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

630 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

631 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

632 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

633 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

634 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

635 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

636 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

637 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

638 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

639 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

640 
	#GL_LOWER_LEFT
 0x8CA1

	)

641 
	#GL_UPPER_LEFT
 0x8CA2

	)

642 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

643 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

644 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

645 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

646 
	#GL_POINT_SPRITE
 0x8861

	)

647 
	#GL_COORD_REPLACE
 0x8862

	)

648 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

649 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

650 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

651 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

652 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

653 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

654 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

655 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

656 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

657 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

658 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

659 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

660 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

661 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

662 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

663 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

664 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

665 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

666 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tshadîs
);

667 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

668 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

669 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

670 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

671 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

672 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

673 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

674 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

675 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

676 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

677 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

678 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

679 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

680 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

681 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

682 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

683 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

684 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

685 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

686 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

687 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

688 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

689 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

690 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

691 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

692 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

693 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

694 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

695 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

696 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

697 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

698 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

699 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

700 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

701 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

702 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

703 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

704 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

705 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

706 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

707 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

708 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

709 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

710 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

711 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

712 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

713 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

714 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

715 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

716 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

717 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

718 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

719 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

720 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

721 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

722 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

723 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

724 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

725 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

726 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

727 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

728 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

729 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

730 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

731 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

732 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

733 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

734 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

735 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

736 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

737 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

738 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

739 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

740 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

741 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

742 #ifde‡
GL_GLEXT_PROTOTYPES


743 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

744 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

745 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

746 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

747 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

748 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

749 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

750 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

751 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

752 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

753 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

754 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

755 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

756 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

757 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

758 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

759 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

760 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLuöà*
shadîs
);

761 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

762 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

763 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

764 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

765 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

766 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
sour˚
);

767 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

768 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

769 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

770 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

771 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

772 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

773 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

774 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

775 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

776 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

777 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rög
, c⁄° 
GLöt
 *
Àngth
);

778 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

779 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

780 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

781 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

782 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

783 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

784 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

785 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

786 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

787 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

788 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

789 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

790 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

791 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

792 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

793 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

794 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

795 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

796 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

797 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

798 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

799 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

800 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

801 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

802 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

803 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

804 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

805 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

806 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

807 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

808 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

809 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

810 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

811 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

812 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

813 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

814 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

815 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

816 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

817 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

818 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

819 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

820 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

821 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

822 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

823 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

824 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

825 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

826 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

827 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

828 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

829 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

830 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

831 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

832 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

833 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

834 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

835 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

839 #i‚de‡
GL_VERSION_2_1


840 
	#GL_VERSION_2_1
 1

	)

841 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

842 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

843 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

844 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

845 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

846 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

847 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

848 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

849 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

850 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

851 
	#GL_SRGB
 0x8C40

	)

852 
	#GL_SRGB8
 0x8C41

	)

853 
	#GL_SRGB_ALPHA
 0x8C42

	)

854 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

855 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

856 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

857 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

858 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

859 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

860 
	#GL_SLUMINANCE
 0x8C46

	)

861 
	#GL_SLUMINANCE8
 0x8C47

	)

862 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

863 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

864 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

865 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

866 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

867 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

868 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

869 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

870 #ifde‡
GL_GLEXT_PROTOTYPES


871 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

872 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

873 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

874 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

875 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

876 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

880 #i‚de‡
GL_VERSION_3_0


881 
	#GL_VERSION_3_0
 1

	)

882 
	tGLhÆf
;

883 
	#GL_COMPARE_REF_TO_TEXTURE
 0x884E

	)

884 
	#GL_CLIP_DISTANCE0
 0x3000

	)

885 
	#GL_CLIP_DISTANCE1
 0x3001

	)

886 
	#GL_CLIP_DISTANCE2
 0x3002

	)

887 
	#GL_CLIP_DISTANCE3
 0x3003

	)

888 
	#GL_CLIP_DISTANCE4
 0x3004

	)

889 
	#GL_CLIP_DISTANCE5
 0x3005

	)

890 
	#GL_CLIP_DISTANCE6
 0x3006

	)

891 
	#GL_CLIP_DISTANCE7
 0x3007

	)

892 
	#GL_MAX_CLIP_DISTANCES
 0x0D32

	)

893 
	#GL_MAJOR_VERSION
 0x821B

	)

894 
	#GL_MINOR_VERSION
 0x821C

	)

895 
	#GL_NUM_EXTENSIONS
 0x821D

	)

896 
	#GL_CONTEXT_FLAGS
 0x821E

	)

897 
	#GL_COMPRESSED_RED
 0x8225

	)

898 
	#GL_COMPRESSED_RG
 0x8226

	)

899 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x00000001

	)

900 
	#GL_RGBA32F
 0x8814

	)

901 
	#GL_RGB32F
 0x8815

	)

902 
	#GL_RGBA16F
 0x881A

	)

903 
	#GL_RGB16F
 0x881B

	)

904 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

905 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

906 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

907 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

908 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

909 
	#GL_FIXED_ONLY
 0x891D

	)

910 
	#GL_MAX_VARYING_COMPONENTS
 0x8B4B

	)

911 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

912 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

913 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

914 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

915 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

916 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

917 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

918 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

919 
	#GL_RGB9_E5
 0x8C3D

	)

920 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

921 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

922 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

923 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

924 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

925 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

926 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

927 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

928 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

929 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

930 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

931 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

932 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

933 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

934 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

935 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

936 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

937 
	#GL_RGBA32UI
 0x8D70

	)

938 
	#GL_RGB32UI
 0x8D71

	)

939 
	#GL_RGBA16UI
 0x8D76

	)

940 
	#GL_RGB16UI
 0x8D77

	)

941 
	#GL_RGBA8UI
 0x8D7C

	)

942 
	#GL_RGB8UI
 0x8D7D

	)

943 
	#GL_RGBA32I
 0x8D82

	)

944 
	#GL_RGB32I
 0x8D83

	)

945 
	#GL_RGBA16I
 0x8D88

	)

946 
	#GL_RGB16I
 0x8D89

	)

947 
	#GL_RGBA8I
 0x8D8E

	)

948 
	#GL_RGB8I
 0x8D8F

	)

949 
	#GL_RED_INTEGER
 0x8D94

	)

950 
	#GL_GREEN_INTEGER
 0x8D95

	)

951 
	#GL_BLUE_INTEGER
 0x8D96

	)

952 
	#GL_RGB_INTEGER
 0x8D98

	)

953 
	#GL_RGBA_INTEGER
 0x8D99

	)

954 
	#GL_BGR_INTEGER
 0x8D9A

	)

955 
	#GL_BGRA_INTEGER
 0x8D9B

	)

956 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

957 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

958 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

959 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

960 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

961 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

962 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

963 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

964 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

965 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

966 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

967 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

968 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

969 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

970 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

971 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

972 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

973 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

974 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

975 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

976 
	#GL_QUERY_WAIT
 0x8E13

	)

977 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

978 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

979 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

980 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

981 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

982 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

983 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

984 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

985 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

986 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

987 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

988 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

989 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

990 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

991 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

992 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

993 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

994 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

995 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

996 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

997 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

998 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

999 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1000 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1001 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1002 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1003 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

1004 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

1005 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

1006 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

1007 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

1008 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

1009 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1010 
	#GL_DRAW_FRAMEBUFFER_BINDING
 0x8CA6

	)

1011 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1012 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1013 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1014 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1015 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1016 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1017 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1018 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1019 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1020 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1021 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1022 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1023 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1024 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1025 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1026 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1027 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1028 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1029 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

1030 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

1031 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

1032 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

1033 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

1034 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

1035 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

1036 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

1037 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

1038 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

1039 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

1040 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

1041 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

1042 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

1043 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

1044 
	#GL_COLOR_ATTACHMENT16
 0x8CF0

	)

1045 
	#GL_COLOR_ATTACHMENT17
 0x8CF1

	)

1046 
	#GL_COLOR_ATTACHMENT18
 0x8CF2

	)

1047 
	#GL_COLOR_ATTACHMENT19
 0x8CF3

	)

1048 
	#GL_COLOR_ATTACHMENT20
 0x8CF4

	)

1049 
	#GL_COLOR_ATTACHMENT21
 0x8CF5

	)

1050 
	#GL_COLOR_ATTACHMENT22
 0x8CF6

	)

1051 
	#GL_COLOR_ATTACHMENT23
 0x8CF7

	)

1052 
	#GL_COLOR_ATTACHMENT24
 0x8CF8

	)

1053 
	#GL_COLOR_ATTACHMENT25
 0x8CF9

	)

1054 
	#GL_COLOR_ATTACHMENT26
 0x8CFA

	)

1055 
	#GL_COLOR_ATTACHMENT27
 0x8CFB

	)

1056 
	#GL_COLOR_ATTACHMENT28
 0x8CFC

	)

1057 
	#GL_COLOR_ATTACHMENT29
 0x8CFD

	)

1058 
	#GL_COLOR_ATTACHMENT30
 0x8CFE

	)

1059 
	#GL_COLOR_ATTACHMENT31
 0x8CFF

	)

1060 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

1061 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

1062 
	#GL_FRAMEBUFFER
 0x8D40

	)

1063 
	#GL_RENDERBUFFER
 0x8D41

	)

1064 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

1065 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

1066 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

1067 
	#GL_STENCIL_INDEX1
 0x8D46

	)

1068 
	#GL_STENCIL_INDEX4
 0x8D47

	)

1069 
	#GL_STENCIL_INDEX8
 0x8D48

	)

1070 
	#GL_STENCIL_INDEX16
 0x8D49

	)

1071 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

1072 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

1073 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

1074 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

1075 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

1076 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

1077 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

1078 
	#GL_MAX_SAMPLES
 0x8D57

	)

1079 
	#GL_INDEX
 0x8222

	)

1080 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

1081 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

1082 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

1083 
	#GL_HALF_FLOAT
 0x140B

	)

1084 
	#GL_MAP_READ_BIT
 0x0001

	)

1085 
	#GL_MAP_WRITE_BIT
 0x0002

	)

1086 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

1087 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

1088 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

1089 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

1090 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

1091 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

1092 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

1093 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

1094 
	#GL_RG
 0x8227

	)

1095 
	#GL_RG_INTEGER
 0x8228

	)

1096 
	#GL_R8
 0x8229

	)

1097 
	#GL_R16
 0x822A

	)

1098 
	#GL_RG8
 0x822B

	)

1099 
	#GL_RG16
 0x822C

	)

1100 
	#GL_R16F
 0x822D

	)

1101 
	#GL_R32F
 0x822E

	)

1102 
	#GL_RG16F
 0x822F

	)

1103 
	#GL_RG32F
 0x8230

	)

1104 
	#GL_R8I
 0x8231

	)

1105 
	#GL_R8UI
 0x8232

	)

1106 
	#GL_R16I
 0x8233

	)

1107 
	#GL_R16UI
 0x8234

	)

1108 
	#GL_R32I
 0x8235

	)

1109 
	#GL_R32UI
 0x8236

	)

1110 
	#GL_RG8I
 0x8237

	)

1111 
	#GL_RG8UI
 0x8238

	)

1112 
	#GL_RG16I
 0x8239

	)

1113 
	#GL_RG16UI
 0x823A

	)

1114 
	#GL_RG32I
 0x823B

	)

1115 
	#GL_RG32UI
 0x823C

	)

1116 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

1117 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

1118 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

1119 
	#GL_ALPHA_INTEGER
 0x8D97

	)

1120 (
APIENTRYP
 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

1121 (
APIENTRYP
 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

1122 (
APIENTRYP
 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

1123 (
APIENTRYP
 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1124 (
APIENTRYP
 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1125 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1126 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

1127 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

1128 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

1129 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

1130 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

1131 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

1132 (
APIENTRYP
 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

1133 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

1134 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

1135 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1136 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1137 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1138 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

1139 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

1140 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

1141 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

1142 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

1143 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

1144 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

1145 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

1146 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1147 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1148 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1149 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1150 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1151 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1152 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1153 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1154 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

1155 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

1156 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

1157 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

1158 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

1159 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

1160 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1161 (
APIENTRYP
 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

1162 (
APIENTRYP
 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

1163 (
APIENTRYP
 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1164 (
APIENTRYP
 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1165 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1166 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1167 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1168 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1169 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

1170 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

1171 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1172 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

1173 (
APIENTRYP
 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

1174 (
APIENTRYP
 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1175 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1176 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

1177 c⁄° 
	tGLubyã
 *(
	tAPIENTRYP
 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
 
	t«me
, 
	tGLuöt
 
	tödex
);

1178 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

1179 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

1180 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

1181 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

1182 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1183 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1184 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

1185 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

1186 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

1187 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

1188 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

1189 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1190 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1191 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

1192 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

1193 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1194 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

1195 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

1196 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1197 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

1198 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

1199 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

1200 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1201 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

1202 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

1203 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1204 #ifde‡
GL_GLEXT_PROTOTYPES


1205 
GLAPI
 
APIENTRY
 
glCﬁ‹Maski
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

1206 
GLAPI
 
APIENTRY
 
glGëBoﬁóni_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

1207 
GLAPI
 
APIENTRY
 
glGëI¡egîi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

1208 
GLAPI
 
APIENTRY
 
glE«bÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1209 
GLAPI
 
APIENTRY
 
glDißbÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1210 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1211 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdback
 (
GLíum
 
¥imôiveMode
);

1212 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdback
 ();

1213 
GLAPI
 
APIENTRY
 
glBödBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

1214 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

1215 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

1216 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yög
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

1217 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

1218 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídî
 (
GLuöt
 
id
, 
GLíum
 
mode
);

1219 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídî
 ();

1220 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

1221 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1222 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1223 
GLAPI
 
APIENTRY
 
glVîãxAâribI1i
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

1224 
GLAPI
 
APIENTRY
 
glVîãxAâribI2i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

1225 
GLAPI
 
APIENTRY
 
glVîãxAâribI3i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

1226 
GLAPI
 
APIENTRY
 
glVîãxAâribI4i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1227 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ui
 (
GLuöt
 
ödex
, GLuöà
x
);

1228 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

1229 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

1230 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

1231 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1232 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1233 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1234 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1235 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1236 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1237 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1238 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1239 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

1240 
GLAPI
 
APIENTRY
 
glVîãxAâribI4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

1241 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

1242 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

1243 
GLAPI
 
APIENTRY
 
glGëUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

1244 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

1245 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1246 
GLAPI
 
APIENTRY
 
glUnif‹m1ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

1247 
GLAPI
 
APIENTRY
 
glUnif‹m2ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

1248 
GLAPI
 
APIENTRY
 
glUnif‹m3ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

1249 
GLAPI
 
APIENTRY
 
glUnif‹m4ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

1250 
GLAPI
 
APIENTRY
 
glUnif‹m1uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1251 
GLAPI
 
APIENTRY
 
glUnif‹m2uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1252 
GLAPI
 
APIENTRY
 
glUnif‹m3uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1253 
GLAPI
 
APIENTRY
 
glUnif‹m4uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1254 
GLAPI
 
APIENTRY
 
glTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1255 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

1256 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1257 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

1258 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„riv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

1259 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„ruiv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLuöt
 *
vÆue
);

1260 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

1261 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfi
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

1262 
GLAPI
 c⁄° 
GLubyã
 *
APIENTRY
 
glGëSåögi
 (
GLíum
 
«me
, 
GLuöt
 
ödex
);

1263 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

1264 
GLAPI
 
APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

1265 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

1266 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

1267 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

1268 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1269 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

1270 
GLAPI
 
APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

1271 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

1272 
GLAPI
 
APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

1273 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

1274 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1275 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1276 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

1277 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

1278 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1279 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

1280 
GLAPI
 
APIENTRY
 
glBlôFømebuf„r
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

1281 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1282 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayî
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

1283 
GLAPI
 *
APIENTRY
 
glM≠Buf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

1284 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

1285 
GLAPI
 
APIENTRY
 
glBödVîãxAºay
 (
GLuöt
 
¨øy
);

1286 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºays
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

1287 
GLAPI
 
APIENTRY
 
glGíVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

1288 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºay
 (
GLuöt
 
¨øy
);

1292 #i‚de‡
GL_VERSION_3_1


1293 
	#GL_VERSION_3_1
 1

	)

1294 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

1295 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

1296 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

1297 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

1298 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

1299 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

1300 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

1301 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

1302 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

1303 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

1304 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

1305 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

1306 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

1307 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

1308 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

1309 
	#GL_R8_SNORM
 0x8F94

	)

1310 
	#GL_RG8_SNORM
 0x8F95

	)

1311 
	#GL_RGB8_SNORM
 0x8F96

	)

1312 
	#GL_RGBA8_SNORM
 0x8F97

	)

1313 
	#GL_R16_SNORM
 0x8F98

	)

1314 
	#GL_RG16_SNORM
 0x8F99

	)

1315 
	#GL_RGB16_SNORM
 0x8F9A

	)

1316 
	#GL_RGBA16_SNORM
 0x8F9B

	)

1317 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

1318 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

1319 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

1320 
	#GL_COPY_READ_BUFFER
 0x8F36

	)

1321 
	#GL_COPY_WRITE_BUFFER
 0x8F37

	)

1322 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

1323 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

1324 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

1325 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

1326 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

1327 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

1328 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

1329 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

1330 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

1331 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

1332 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

1333 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

1334 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

1335 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

1336 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

1337 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

1338 
	#GL_UNIFORM_TYPE
 0x8A37

	)

1339 
	#GL_UNIFORM_SIZE
 0x8A38

	)

1340 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

1341 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

1342 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

1343 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

1344 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

1345 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

1346 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

1347 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

1348 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

1349 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

1350 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

1351 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

1352 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

1353 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

1354 
	#GL_INVALID_INDEX
 0xFFFFFFFFu

	)

1355 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
);

1356 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
);

1357 (
APIENTRYP
 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

1358 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
 
	tödex
);

1359 (
APIENTRYP
 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadT¨gë
, GLíum 
	twrôeT¨gë
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

1360 (
APIENTRYP
 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tunif‹mNames
, GLuöà*
	tunif‹mIndi˚s
);

1361 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöà*
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1362 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mName
);

1363 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	tunif‹mBlockName
);

1364 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1365 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mBlockName
);

1366 (
APIENTRYP
 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

1367 #ifde‡
GL_GLEXT_PROTOTYPES


1368 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚d
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
);

1369 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚d
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
);

1370 
GLAPI
 
APIENTRY
 
glTexBuf„r
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

1371 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndex
 (
GLuöt
 
ödex
);

1372 
GLAPI
 
APIENTRY
 
glC›yBuf„rSubD©a
 (
GLíum
 
ªadT¨gë
, GLíum 
wrôeT¨gë
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

1373 
GLAPI
 
APIENTRY
 
glGëUnif‹mIndi˚s
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° 
GLch¨
 *c⁄°*
unif‹mNames
, GLuöà*
unif‹mIndi˚s
);

1374 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹msiv
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° GLuöà*
unif‹mIndi˚s
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1375 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mName
);

1376 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëUnif‹mBlockIndex
 (GLuöà
¥ogøm
, c⁄° 
GLch¨
 *
unif‹mBlockName
);

1377 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockiv
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1378 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mBlockName
);

1379 
GLAPI
 
APIENTRY
 
glUnif‹mBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, GLuöà
unif‹mBlockBödög
);

1383 #i‚de‡
GL_VERSION_3_2


1384 
	#GL_VERSION_3_2
 1

	)

1385 
__GLsync
 *
	tGLsync
;

1386 #i‚de‡
GLEXT_64_TYPES_DEFINED


1388 
	#GLEXT_64_TYPES_DEFINED


	)

1391 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

1392 
	~<öây≥s.h
>

1393 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

1394 
	~<öây≥s.h
>

1395 #i‡
deföed
(
__STDC__
)

1396 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

1397 
	töt64_t
;

1398 
	tuöt64_t
;

1400 
	töt64_t
;

1401 
	tuöt64_t
;

1404 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

1405 
	~<öây≥s.h
>

1406 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

1407 
	~<°döt.h
>

1408 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

1409 
	töt32_t
;

1410 
	töt64_t
;

1411 
	tuöt64_t
;

1412 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

1413 
	~<°döt.h
>

1414 #ñi‡
deföed
(
_WIN32
)

1415 
__öt32
 
	töt32_t
;

1416 
__öt64
 
	töt64_t
;

1417 
	t__öt64
 
	tuöt64_t
;

1420 
	~<öây≥s.h
>

1423 
uöt64_t
 
	tGLuöt64
;

1424 
öt64_t
 
	tGLöt64
;

1425 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

1426 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

1427 
	#GL_LINES_ADJACENCY
 0x000A

	)

1428 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

1429 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

1430 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

1431 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

1432 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

1433 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

1434 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

1435 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

1436 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

1437 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

1438 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

1439 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

1440 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

1441 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

1442 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

1443 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

1444 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

1445 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

1446 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

1447 
	#GL_DEPTH_CLAMP
 0x864F

	)

1448 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

1449 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

1450 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

1451 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

1452 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

1453 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

1454 
	#GL_OBJECT_TYPE
 0x9112

	)

1455 
	#GL_SYNC_CONDITION
 0x9113

	)

1456 
	#GL_SYNC_STATUS
 0x9114

	)

1457 
	#GL_SYNC_FLAGS
 0x9115

	)

1458 
	#GL_SYNC_FENCE
 0x9116

	)

1459 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

1460 
	#GL_UNSIGNALED
 0x9118

	)

1461 
	#GL_SIGNALED
 0x9119

	)

1462 
	#GL_ALREADY_SIGNALED
 0x911A

	)

1463 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

1464 
	#GL_CONDITION_SATISFIED
 0x911C

	)

1465 
	#GL_WAIT_FAILED
 0x911D

	)

1466 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFFuŒ

	)

1467 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

1468 
	#GL_SAMPLE_POSITION
 0x8E50

	)

1469 
	#GL_SAMPLE_MASK
 0x8E51

	)

1470 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

1471 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

1472 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

1473 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

1474 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

1475 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

1476 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

1477 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

1478 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

1479 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

1480 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

1481 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

1482 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

1483 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

1484 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

1485 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

1486 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

1487 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

1488 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

1489 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1490 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1491 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
);

1492 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

1493 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

1494 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

1495 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 
	tsync
);

1496 (
APIENTRYP
 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 
	tsync
);

1497 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1498 (
APIENTRYP
 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1499 (
APIENTRYP
 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	td©a
);

1500 (
APIENTRYP
 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

1501 (
APIENTRYP
 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt64
 *
	td©a
);

1502 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1503 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1504 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1505 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1506 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

1507 (
APIENTRYP
 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tmaskNumbî
, 
	tGLbôfõld
 
	tmask
);

1508 #ifde‡
GL_GLEXT_PROTOTYPES


1509 
GLAPI
 
APIENTRY
 
glDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1510 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1511 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
);

1512 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
, c⁄° 
GLöt
 *
ba£vîãx
);

1513 
GLAPI
 
APIENTRY
 
glProvokögVîãx
 (
GLíum
 
mode
);

1514 
GLAPI
 
GLsync
 
APIENTRY
 
glFí˚Sync
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

1515 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSync
 (
GLsync
 
sync
);

1516 
GLAPI
 
APIENTRY
 
glDñëeSync
 (
GLsync
 
sync
);

1517 
GLAPI
 
GLíum
 
APIENTRY
 
glClõ¡WaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1518 
GLAPI
 
APIENTRY
 
glWaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1519 
GLAPI
 
APIENTRY
 
glGëI¡egî64v
 (
GLíum
 
≤ame
, 
GLöt64
 *
d©a
);

1520 
GLAPI
 
APIENTRY
 
glGëSynciv
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

1521 
GLAPI
 
APIENTRY
 
glGëI¡egî64i_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt64
 *
d©a
);

1522 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîi64v
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt64
 *
∑øms
);

1523 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1524 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1525 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1526 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efv
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

1527 
GLAPI
 
APIENTRY
 
glSam∂eMaski
 (
GLuöt
 
maskNumbî
, 
GLbôfõld
 
mask
);

1531 #i‚de‡
GL_VERSION_3_3


1532 
	#GL_VERSION_3_3
 1

	)

1533 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

1534 
	#GL_SRC1_COLOR
 0x88F9

	)

1535 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

1536 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

1537 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

1538 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

1539 
	#GL_SAMPLER_BINDING
 0x8919

	)

1540 
	#GL_RGB10_A2UI
 0x906F

	)

1541 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

1542 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

1543 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

1544 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

1545 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

1546 
	#GL_TIME_ELAPSED
 0x88BF

	)

1547 
	#GL_TIMESTAMP
 0x8E28

	)

1548 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

1549 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

1550 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1551 (
APIENTRYP
 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
 *
	tßm∂îs
);

1552 (
APIENTRYP
 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tßm∂îs
);

1553 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

1554 (
APIENTRYP
 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

1555 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

1556 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1557 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

1558 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

1559 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1560 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øm
);

1561 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1562 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1563 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

1564 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1565 (
APIENTRYP
 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

1566 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1567 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

1568 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

1569 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1570 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1571 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1572 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1573 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1574 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1575 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1576 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1577 (
APIENTRYP
 
	tPFNGLVERTEXP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1578 (
APIENTRYP
 
	tPFNGLVERTEXP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1579 (
APIENTRYP
 
	tPFNGLVERTEXP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1580 (
APIENTRYP
 
	tPFNGLVERTEXP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1581 (
APIENTRYP
 
	tPFNGLVERTEXP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1582 (
APIENTRYP
 
	tPFNGLVERTEXP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1583 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1584 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1585 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1586 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1587 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1588 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1589 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1590 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1591 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1592 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1593 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1594 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1595 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1596 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1597 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1598 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1599 (
APIENTRYP
 
	tPFNGLNORMALP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1600 (
APIENTRYP
 
	tPFNGLNORMALP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1601 (
APIENTRYP
 
	tPFNGLCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1602 (
APIENTRYP
 
	tPFNGLCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1603 (
APIENTRYP
 
	tPFNGLCOLORP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1604 (
APIENTRYP
 
	tPFNGLCOLORP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1605 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1606 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1607 #ifde‡
GL_GLEXT_PROTOTYPES


1608 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄Indexed
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹Numbî
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

1609 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aIndex
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1610 
GLAPI
 
APIENTRY
 
glGíSam∂îs
 (
GLsizei
 
cou¡
, 
GLuöt
 *
ßm∂îs
);

1611 
GLAPI
 
APIENTRY
 
glDñëeSam∂îs
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ßm∂îs
);

1612 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSam∂î
 (
GLuöt
 
ßm∂î
);

1613 
GLAPI
 
APIENTRY
 
glBödSam∂î
 (
GLuöt
 
unô
, GLuöà
ßm∂î
);

1614 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîi
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

1615 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1616 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîf
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

1617 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

1618 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1619 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øm
);

1620 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1621 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1622 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1623 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1624 
GLAPI
 
APIENTRY
 
glQuîyCou¡î
 (
GLuöt
 
id
, 
GLíum
 
èrgë
);

1625 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

1626 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

1627 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

1628 
GLAPI
 
APIENTRY
 
glVîãxAâribP1ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1629 
GLAPI
 
APIENTRY
 
glVîãxAâribP1uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1630 
GLAPI
 
APIENTRY
 
glVîãxAâribP2ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1631 
GLAPI
 
APIENTRY
 
glVîãxAâribP2uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1632 
GLAPI
 
APIENTRY
 
glVîãxAâribP3ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1633 
GLAPI
 
APIENTRY
 
glVîãxAâribP3uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1634 
GLAPI
 
APIENTRY
 
glVîãxAâribP4ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1635 
GLAPI
 
APIENTRY
 
glVîãxAâribP4uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1636 
GLAPI
 
APIENTRY
 
glVîãxP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1637 
GLAPI
 
APIENTRY
 
glVîãxP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1638 
GLAPI
 
APIENTRY
 
glVîãxP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1639 
GLAPI
 
APIENTRY
 
glVîãxP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1640 
GLAPI
 
APIENTRY
 
glVîãxP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1641 
GLAPI
 
APIENTRY
 
glVîãxP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1642 
GLAPI
 
APIENTRY
 
glTexCo‹dP1ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1643 
GLAPI
 
APIENTRY
 
glTexCo‹dP1uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1644 
GLAPI
 
APIENTRY
 
glTexCo‹dP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1645 
GLAPI
 
APIENTRY
 
glTexCo‹dP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1646 
GLAPI
 
APIENTRY
 
glTexCo‹dP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1647 
GLAPI
 
APIENTRY
 
glTexCo‹dP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1648 
GLAPI
 
APIENTRY
 
glTexCo‹dP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1649 
GLAPI
 
APIENTRY
 
glTexCo‹dP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1650 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1651 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1652 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1653 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1654 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1655 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1656 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1657 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1658 
GLAPI
 
APIENTRY
 
glN‹mÆP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1659 
GLAPI
 
APIENTRY
 
glN‹mÆP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1660 
GLAPI
 
APIENTRY
 
glCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1661 
GLAPI
 
APIENTRY
 
glCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1662 
GLAPI
 
APIENTRY
 
glCﬁ‹P4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1663 
GLAPI
 
APIENTRY
 
glCﬁ‹P4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1664 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1665 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1669 #i‚de‡
GL_VERSION_4_0


1670 
	#GL_VERSION_4_0
 1

	)

1671 
	#GL_SAMPLE_SHADING
 0x8C36

	)

1672 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

1673 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

1674 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

1675 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

1676 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

1677 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

1678 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

1679 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

1680 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

1681 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

1682 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

1683 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

1684 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

1685 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

1686 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

1687 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

1688 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

1689 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

1690 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

1691 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

1692 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

1693 
	#GL_DOUBLE_MAT2
 0x8F46

	)

1694 
	#GL_DOUBLE_MAT3
 0x8F47

	)

1695 
	#GL_DOUBLE_MAT4
 0x8F48

	)

1696 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

1697 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

1698 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

1699 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

1700 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

1701 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

1702 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

1703 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

1704 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

1705 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

1706 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

1707 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

1708 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

1709 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

1710 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

1711 
	#GL_PATCHES
 0x000E

	)

1712 
	#GL_PATCH_VERTICES
 0x8E72

	)

1713 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

1714 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

1715 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

1716 
	#GL_TESS_GEN_MODE
 0x8E76

	)

1717 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

1718 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

1719 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

1720 
	#GL_ISOLINES
 0x8E7A

	)

1721 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

1722 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

1723 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

1724 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

1725 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

1726 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

1727 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

1728 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

1729 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

1730 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

1731 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

1732 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

1733 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

1734 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

1735 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

1736 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

1737 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

1738 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

1739 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

1740 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

1741 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

1742 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

1743 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

1744 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 0x8E23

	)

1745 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 0x8E24

	)

1746 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

1747 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

1748 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

1749 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

1750 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

1751 (
APIENTRYP
 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

1752 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

1753 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
);

1754 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
);

1755 (
APIENTRYP
 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

1756 (
APIENTRYP
 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1757 (
APIENTRYP
 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1758 (
APIENTRYP
 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1759 (
APIENTRYP
 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1760 (
APIENTRYP
 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1761 (
APIENTRYP
 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1762 (
APIENTRYP
 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1763 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1764 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1765 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1766 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1767 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1768 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1769 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1770 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1771 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1772 (
APIENTRYP
 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 *
	t∑øms
);

1773 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1774 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1775 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1776 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1777 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1778 (
APIENTRYP
 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

1779 (
APIENTRYP
 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 *
	t∑øms
);

1780 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1781 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1782 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆues
);

1783 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

1784 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

1785 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

1786 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

1787 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

1788 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

1789 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

1790 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

1791 (
APIENTRYP
 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

1792 (
APIENTRYP
 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1793 (
APIENTRYP
 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1794 #ifde‡
GL_GLEXT_PROTOTYPES


1795 
GLAPI
 
APIENTRY
 
glMöSam∂eShadög
 (
GLÊﬂt
 
vÆue
);

1796 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄i
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

1797 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

1798 
GLAPI
 
APIENTRY
 
glBÀndFunci
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

1799 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

1800 
GLAPI
 
APIENTRY
 
glDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
);

1801 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
);

1802 
GLAPI
 
APIENTRY
 
glUnif‹m1d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

1803 
GLAPI
 
APIENTRY
 
glUnif‹m2d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

1804 
GLAPI
 
APIENTRY
 
glUnif‹m3d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1805 
GLAPI
 
APIENTRY
 
glUnif‹m4d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

1806 
GLAPI
 
APIENTRY
 
glUnif‹m1dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1807 
GLAPI
 
APIENTRY
 
glUnif‹m2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1808 
GLAPI
 
APIENTRY
 
glUnif‹m3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1809 
GLAPI
 
APIENTRY
 
glUnif‹m4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1810 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1811 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1812 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1813 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1814 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1815 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1816 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1817 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1818 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1819 
GLAPI
 
APIENTRY
 
glGëUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 *
∑øms
);

1820 
GLAPI
 
GLöt
 
APIENTRY
 
glGëSubroutöeUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1821 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëSubroutöeIndex
 (GLuöà
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1822 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1823 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹mName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1824 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1825 
GLAPI
 
APIENTRY
 
glUnif‹mSubroutöesuiv
 (
GLíum
 
shadîty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ödi˚s
);

1826 
GLAPI
 
APIENTRY
 
glGëUnif‹mSubroutöeuiv
 (
GLíum
 
shadîty≥
, 
GLöt
 
loˇti⁄
, 
GLuöt
 *
∑øms
);

1827 
GLAPI
 
APIENTRY
 
glGëProgømSègeiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1828 
GLAPI
 
APIENTRY
 
glP©chP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1829 
GLAPI
 
APIENTRY
 
glP©chP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆues
);

1830 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdback
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

1831 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacks
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

1832 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

1833 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdback
 (
GLuöt
 
id
);

1834 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdback
 ();

1835 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdback
 ();

1836 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdback
 (
GLíum
 
mode
, 
GLuöt
 
id
);

1837 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåóm
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
);

1838 
GLAPI
 
APIENTRY
 
glBegöQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
id
);

1839 
GLAPI
 
APIENTRY
 
glEndQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1840 
GLAPI
 
APIENTRY
 
glGëQuîyIndexediv
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1844 #i‚de‡
GL_VERSION_4_1


1845 
	#GL_VERSION_4_1
 1

	)

1846 
	#GL_FIXED
 0x140C

	)

1847 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

1848 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

1849 
	#GL_LOW_FLOAT
 0x8DF0

	)

1850 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

1851 
	#GL_HIGH_FLOAT
 0x8DF2

	)

1852 
	#GL_LOW_INT
 0x8DF3

	)

1853 
	#GL_MEDIUM_INT
 0x8DF4

	)

1854 
	#GL_HIGH_INT
 0x8DF5

	)

1855 
	#GL_SHADER_COMPILER
 0x8DFA

	)

1856 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

1857 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

1858 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

1859 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

1860 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

1861 
	#GL_RGB565
 0x8D62

	)

1862 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

1863 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

1864 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

1865 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

1866 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

1867 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

1868 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

1869 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

1870 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

1871 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

1872 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

1873 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

1874 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

1875 
	#GL_MAX_VIEWPORTS
 0x825B

	)

1876 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

1877 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

1878 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

1879 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

1880 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

1881 (
APIENTRYP
 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

1882 (
APIENTRYP
 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° *
	tbö¨y
, GLsizeò
	tÀngth
);

1883 (
APIENTRYP
 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
 *
	tønge
, GLöà*
	t¥ecisi⁄
);

1884 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGLÊﬂt
 
	tn
, GLÊﬂà
	tf
);

1885 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGLÊﬂt
 
	td
);

1886 (
APIENTRYP
 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, *
	tbö¨y
);

1887 (
APIENTRYP
 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° *
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

1888 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1889 (
APIENTRYP
 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

1890 (
APIENTRYP
 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

1891 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rögs
);

1892 (
APIENTRYP
 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1893 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tpùñöes
);

1894 (
APIENTRYP
 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

1895 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1896 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1897 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

1898 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1899 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

1900 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1901 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
);

1902 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1903 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

1904 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1905 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

1906 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1907 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

1908 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1909 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
);

1910 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1911 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

1912 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1913 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

1914 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1915 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

1916 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1917 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
);

1918 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1919 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1920 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1921 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

1922 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1923 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

1924 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1925 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLdoubÀ 
	tv3
);

1926 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1927 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1928 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1929 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1930 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1931 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1932 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1933 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1934 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1935 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1936 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1937 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1938 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1939 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1940 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1941 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1942 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1943 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1944 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1945 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1946 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1947 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1948 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

1949 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

1950 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1951 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1952 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1953 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1954 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1955 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1956 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1957 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1958 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

1959 (
APIENTRYP
 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1960 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

1961 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1962 (
APIENTRYP
 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tv
);

1963 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1964 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1965 (
APIENTRYP
 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1966 (
APIENTRYP
 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tn
, GLdoubÀ 
	tf
);

1967 (
APIENTRYP
 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

1968 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

1969 #ifde‡
GL_GLEXT_PROTOTYPES


1970 
GLAPI
 
APIENTRY
 
glRñó£ShadîCompûî
 ();

1971 
GLAPI
 
APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° *
bö¨y
, GLsizeò
Àngth
);

1972 
GLAPI
 
APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
 *
ønge
, GLöà*
¥ecisi⁄
);

1973 
GLAPI
 
APIENTRY
 
glDïthR™gef
 (
GLÊﬂt
 
n
, GLÊﬂà
f
);

1974 
GLAPI
 
APIENTRY
 
glCÀ¨Dïthf
 (
GLÊﬂt
 
d
);

1975 
GLAPI
 
APIENTRY
 
glGëProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, *
bö¨y
);

1976 
GLAPI
 
APIENTRY
 
glProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° *
bö¨y
, 
GLsizei
 
Àngth
);

1977 
GLAPI
 
APIENTRY
 
glProgømP¨amëîi
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1978 
GLAPI
 
APIENTRY
 
glU£ProgømSèges
 (
GLuöt
 
pùñöe
, 
GLbôfõld
 
°ages
, GLuöà
¥ogøm
);

1979 
GLAPI
 
APIENTRY
 
glA˘iveShadîProgøm
 (
GLuöt
 
pùñöe
, GLuöà
¥ogøm
);

1980 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømv
 (
GLíum
 
ty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rögs
);

1981 
GLAPI
 
APIENTRY
 
glBödProgømPùñöe
 (
GLuöt
 
pùñöe
);

1982 
GLAPI
 
APIENTRY
 
glDñëeProgømPùñöes
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
pùñöes
);

1983 
GLAPI
 
APIENTRY
 
glGíProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

1984 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømPùñöe
 (
GLuöt
 
pùñöe
);

1985 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeiv
 (
GLuöt
 
pùñöe
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1986 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

1987 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1988 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

1989 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1990 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
);

1991 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1992 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

1993 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

1994 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

1995 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1996 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

1997 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1998 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
);

1999 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2000 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

2001 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2002 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

2003 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2004 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

2005 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2006 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

2007 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2008 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

2009 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2010 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

2011 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2012 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

2013 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2014 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLdoubÀ 
v3
);

2015 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2016 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

2017 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2018 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2019 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2020 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2021 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2022 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2023 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2024 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2025 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2026 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2027 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2028 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2029 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2030 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2031 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2032 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2033 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2034 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2035 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2036 
GLAPI
 
APIENTRY
 
glVÆid©eProgømPùñöe
 (
GLuöt
 
pùñöe
);

2037 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeInfoLog
 (
GLuöt
 
pùñöe
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

2038 
GLAPI
 
APIENTRY
 
glVîãxAâribL1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

2039 
GLAPI
 
APIENTRY
 
glVîãxAâribL2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

2040 
GLAPI
 
APIENTRY
 
glVîãxAâribL3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

2041 
GLAPI
 
APIENTRY
 
glVîãxAâribL4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

2042 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2043 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2044 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2045 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2046 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

2047 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

2048 
GLAPI
 
APIENTRY
 
glVõwp‹tAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

2049 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedf
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
w
, GLÊﬂà
h
);

2050 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedfv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

2051 
GLAPI
 
APIENTRY
 
glSciss‹Aºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
v
);

2052 
GLAPI
 
APIENTRY
 
glSciss‹Indexed
 (
GLuöt
 
ödex
, 
GLöt
 
À·
, GLöà
bŸtom
, 
GLsizei
 
width
, GLsizeò
height
);

2053 
GLAPI
 
APIENTRY
 
glSciss‹Indexedv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

2054 
GLAPI
 
APIENTRY
 
glDïthR™geAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

2055 
GLAPI
 
APIENTRY
 
glDïthR™geIndexed
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
n
, GLdoubÀ 
f
);

2056 
GLAPI
 
APIENTRY
 
glGëFlﬂti_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

2057 
GLAPI
 
APIENTRY
 
glGëDoubÀi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

2061 #i‚de‡
GL_VERSION_4_2


2062 
	#GL_VERSION_4_2
 1

	)

2063 
	#GL_COPY_READ_BUFFER_BINDING
 0x8F36

	)

2064 
	#GL_COPY_WRITE_BUFFER_BINDING
 0x8F37

	)

2065 
	#GL_TRANSFORM_FEEDBACK_ACTIVE
 0x8E24

	)

2066 
	#GL_TRANSFORM_FEEDBACK_PAUSED
 0x8E23

	)

2067 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

2068 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

2069 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

2070 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

2071 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

2072 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

2073 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

2074 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

2075 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

2076 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

2077 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

2078 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

2079 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

2080 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

2081 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

2082 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

2083 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

2084 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

2085 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

2086 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

2087 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

2088 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

2089 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

2090 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

2091 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

2092 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

2093 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

2094 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

2095 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

2096 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

2097 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

2098 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

2099 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

2100 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

2101 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

2102 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

2103 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

2104 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

2105 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

2106 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

2107 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

2108 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

2109 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

2110 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

2111 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

2112 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

2113 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

2114 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

2115 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

2116 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

2117 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

2118 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

2119 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

2120 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

2121 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

2122 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

2123 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

2124 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

2125 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

2126 
	#GL_IMAGE_1D
 0x904C

	)

2127 
	#GL_IMAGE_2D
 0x904D

	)

2128 
	#GL_IMAGE_3D
 0x904E

	)

2129 
	#GL_IMAGE_2D_RECT
 0x904F

	)

2130 
	#GL_IMAGE_CUBE
 0x9050

	)

2131 
	#GL_IMAGE_BUFFER
 0x9051

	)

2132 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

2133 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

2134 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

2135 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

2136 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

2137 
	#GL_INT_IMAGE_1D
 0x9057

	)

2138 
	#GL_INT_IMAGE_2D
 0x9058

	)

2139 
	#GL_INT_IMAGE_3D
 0x9059

	)

2140 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

2141 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

2142 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

2143 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

2144 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

2145 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

2146 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

2147 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

2148 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

2149 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

2150 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

2151 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

2152 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

2153 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

2154 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

2155 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

2156 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

2157 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

2158 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

2159 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

2160 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

2161 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

2162 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

2163 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

2164 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

2165 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

2166 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

2167 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

2168 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

2169 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

2170 
	#GL_COMPRESSED_RGBA_BPTC_UNORM
 0x8E8C

	)

2171 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
 0x8E8D

	)

2172 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
 0x8E8E

	)

2173 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
 0x8E8F

	)

2174 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

2175 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2176 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2177 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

2178 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

2179 (
APIENTRYP
 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2180 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

2181 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2182 (
APIENTRYP
 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2183 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2184 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2185 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tö°™˚cou¡
);

2186 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	tö°™˚cou¡
);

2187 #ifde‡
GL_GLEXT_PROTOTYPES


2188 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2189 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2190 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
, 
GLuöt
 
ba£ö°™˚
);

2191 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©iv
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt
 *
∑øms
);

2192 
GLAPI
 
APIENTRY
 
glGëA˘iveAtomicCou¡îBuf„riv
 (
GLuöt
 
¥ogøm
, GLuöà
buf„rIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2193 
GLAPI
 
APIENTRY
 
glBödImageTextuª
 (
GLuöt
 
unô
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLíum 
f‹m©
);

2194 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõr
 (
GLbôfõld
 
b¨rõrs
);

2195 
GLAPI
 
APIENTRY
 
glTexSt‹age1D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

2196 
GLAPI
 
APIENTRY
 
glTexSt‹age2D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2197 
GLAPI
 
APIENTRY
 
glTexSt‹age3D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2198 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, 
GLsizei
 
ö°™˚cou¡
);

2199 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåómIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
, 
GLsizei
 
ö°™˚cou¡
);

2203 #i‚de‡
GL_VERSION_4_3


2204 
	#GL_VERSION_4_3
 1

	)

2205 (
APIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

2206 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

2207 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

2208 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

2209 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

2210 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

2211 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

2212 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

2213 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

2214 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

2215 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

2216 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

2217 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

2218 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

2219 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

2220 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

2221 
	#GL_COMPUTE_SHADER
 0x91B9

	)

2222 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

2223 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

2224 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

2225 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

2226 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

2227 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

2228 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

2229 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

2230 
	#GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
 0x90EB

	)

2231 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

2232 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

2233 
	#GL_COMPUTE_WORK_GROUP_SIZE
 0x8267

	)

2234 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

2235 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

2236 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

2237 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

2238 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

2239 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

2240 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

2241 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

2242 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

2243 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

2244 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

2245 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

2246 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

2247 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

2248 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

2249 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

2250 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

2251 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

2252 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

2253 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

2254 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

2255 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

2256 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

2257 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

2258 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

2259 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

2260 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

2261 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

2262 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

2263 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

2264 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

2265 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

2266 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

2267 
	#GL_BUFFER
 0x82E0

	)

2268 
	#GL_SHADER
 0x82E1

	)

2269 
	#GL_PROGRAM
 0x82E2

	)

2270 
	#GL_QUERY
 0x82E3

	)

2271 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

2272 
	#GL_SAMPLER
 0x82E6

	)

2273 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

2274 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

2275 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

2276 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

2277 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

2278 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

2279 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

2280 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

2281 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

2282 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

2283 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

2284 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

2285 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

2286 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

2287 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

2288 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

2289 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

2290 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

2291 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

2292 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

2293 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

2294 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

2295 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

2296 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

2297 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

2298 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

2299 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

2300 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

2301 
	#GL_MAX_WIDTH
 0x827E

	)

2302 
	#GL_MAX_HEIGHT
 0x827F

	)

2303 
	#GL_MAX_DEPTH
 0x8280

	)

2304 
	#GL_MAX_LAYERS
 0x8281

	)

2305 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

2306 
	#GL_COLOR_COMPONENTS
 0x8283

	)

2307 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

2308 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

2309 
	#GL_COLOR_RENDERABLE
 0x8286

	)

2310 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

2311 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

2312 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

2313 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

2314 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

2315 
	#GL_READ_PIXELS
 0x828C

	)

2316 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

2317 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

2318 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

2319 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

2320 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

2321 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

2322 
	#GL_MIPMAP
 0x8293

	)

2323 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

2324 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

2325 
	#GL_COLOR_ENCODING
 0x8296

	)

2326 
	#GL_SRGB_READ
 0x8297

	)

2327 
	#GL_SRGB_WRITE
 0x8298

	)

2328 
	#GL_FILTER
 0x829A

	)

2329 
	#GL_VERTEX_TEXTURE
 0x829B

	)

2330 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

2331 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

2332 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

2333 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

2334 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

2335 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

2336 
	#GL_TEXTURE_GATHER
 0x82A2

	)

2337 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

2338 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

2339 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

2340 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

2341 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

2342 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

2343 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

2344 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

2345 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

2346 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

2347 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

2348 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

2349 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

2350 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

2351 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

2352 
	#GL_CLEAR_BUFFER
 0x82B4

	)

2353 
	#GL_TEXTURE_VIEW
 0x82B5

	)

2354 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

2355 
	#GL_FULL_SUPPORT
 0x82B7

	)

2356 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

2357 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

2358 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

2359 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

2360 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

2361 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

2362 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

2363 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

2364 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

2365 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

2366 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

2367 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

2368 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

2369 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

2370 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

2371 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

2372 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

2373 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

2374 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

2375 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

2376 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

2377 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

2378 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

2379 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

2380 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

2381 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

2382 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

2383 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

2384 
	#GL_UNIFORM
 0x92E1

	)

2385 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

2386 
	#GL_PROGRAM_INPUT
 0x92E3

	)

2387 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

2388 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

2389 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

2390 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

2391 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

2392 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

2393 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

2394 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

2395 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

2396 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

2397 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

2398 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

2399 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

2400 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

2401 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

2402 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

2403 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

2404 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

2405 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

2406 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

2407 
	#GL_NAME_LENGTH
 0x92F9

	)

2408 
	#GL_TYPE
 0x92FA

	)

2409 
	#GL_ARRAY_SIZE
 0x92FB

	)

2410 
	#GL_OFFSET
 0x92FC

	)

2411 
	#GL_BLOCK_INDEX
 0x92FD

	)

2412 
	#GL_ARRAY_STRIDE
 0x92FE

	)

2413 
	#GL_MATRIX_STRIDE
 0x92FF

	)

2414 
	#GL_IS_ROW_MAJOR
 0x9300

	)

2415 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

2416 
	#GL_BUFFER_BINDING
 0x9302

	)

2417 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

2418 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

2419 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

2420 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

2421 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

2422 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

2423 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

2424 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

2425 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

2426 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

2427 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

2428 
	#GL_LOCATION
 0x930E

	)

2429 
	#GL_LOCATION_INDEX
 0x930F

	)

2430 
	#GL_IS_PER_PATCH
 0x92E7

	)

2431 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

2432 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

2433 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

2434 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

2435 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

2436 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

2437 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

2438 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

2439 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

2440 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

2441 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

2442 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

2443 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

2444 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

2445 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x00002000

	)

2446 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 0x8F39

	)

2447 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

2448 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

2449 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

2450 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

2451 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

2452 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

2453 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

2454 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

2455 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

2456 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

2457 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

2458 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

2459 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

2460 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

2461 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

2462 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

2463 
	#GL_VERTEX_BINDING_BUFFER
 0x8F4F

	)

2464 
	#GL_DISPLAY_LIST
 0x82E7

	)

2465 (
APIENTRYP
 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2466 (
APIENTRYP
 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2467 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

2468 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

2469 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

2470 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2471 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2472 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

2473 (
APIENTRYP
 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2474 (
APIENTRYP
 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2475 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2476 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2477 (
APIENTRYP
 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

2478 (
APIENTRYP
 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2479 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2480 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2481 (
APIENTRYP
 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2482 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2483 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

2484 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

2485 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2486 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2487 (
APIENTRYP
 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

2488 (
APIENTRYP
 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2489 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2490 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2491 (
APIENTRYP
 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

2492 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2493 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2494 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2495 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2496 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

2497 (
APIENTRYP
 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

2498 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

2499 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

2500 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

2501 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

2502 (
APIENTRYP
 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
);

2503 (
APIENTRYP
 
	tPFNGLPOPDEBUGGROUPPROC
) ();

2504 (
APIENTRYP
 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2505 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2506 (
APIENTRYP
 
	tPFNGLOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2507 (
APIENTRYP
 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2508 #ifde‡
GL_GLEXT_PROTOTYPES


2509 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2510 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rSubD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2511 
GLAPI
 
APIENTRY
 
glDi•©chCompuã
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
);

2512 
GLAPI
 
APIENTRY
 
glDi•©chCompuãIndúe˘
 (
GLöçå
 
ödúe˘
);

2513 
GLAPI
 
APIENTRY
 
glC›yImageSubD©a
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
§cWidth
, GLsizeò
§cHeight
, GLsizeò
§cDïth
);

2514 
GLAPI
 
APIENTRY
 
glFømebuf„rP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

2515 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2516 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©i64v
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

2517 
GLAPI
 
APIENTRY
 
glInvÆid©eTexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

2518 
GLAPI
 
APIENTRY
 
glInvÆid©eTexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

2519 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2520 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rD©a
 (
GLuöt
 
buf„r
);

2521 
GLAPI
 
APIENTRY
 
glInvÆid©eFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

2522 
GLAPI
 
APIENTRY
 
glInvÆid©eSubFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2523 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2524 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2525 
GLAPI
 
APIENTRY
 
glGëProgømI¡îÁ˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2526 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëProgømResour˚Index
 (GLuöà
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2527 
GLAPI
 
APIENTRY
 
glGëProgømResour˚Name
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

2528 
GLAPI
 
APIENTRY
 
glGëProgømResour˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
∑øms
);

2529 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2530 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄Index
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2531 
GLAPI
 
APIENTRY
 
glShadîSt‹ageBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
°‹ageBlockIndex
, GLuöà
°‹ageBlockBödög
);

2532 
GLAPI
 
APIENTRY
 
glTexBuf„rR™ge
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2533 
GLAPI
 
APIENTRY
 
glTexSt‹age2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2534 
GLAPI
 
APIENTRY
 
glTexSt‹age3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2535 
GLAPI
 
APIENTRY
 
glTextuªVõw
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
‹igãxtuª
, GLíum 
öã∫Æf‹m©
, GLuöà
möÀvñ
, GLuöà
numÀvñs
, GLuöà
möœyî
, GLuöà
numœyîs
);

2536 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„r
 (
GLuöt
 
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2537 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2538 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2539 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2540 
GLAPI
 
APIENTRY
 
glVîãxAâribBödög
 (
GLuöt
 
©åibödex
, GLuöà
bödögödex
);

2541 
GLAPI
 
APIENTRY
 
glVîãxBödögDivis‹
 (
GLuöt
 
bödögödex
, GLuöà
divis‹
);

2542 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁ
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

2543 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£π
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

2544 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlback
 (
GLDEBUGPROC
 
ˇŒback
, c⁄° *
u£rP¨am
);

2545 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLog
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

2546 
GLAPI
 
APIENTRY
 
glPushDebugGroup
 (
GLíum
 
sour˚
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
mesßge
);

2547 
GLAPI
 
APIENTRY
 
glP›DebugGroup
 ();

2548 
GLAPI
 
APIENTRY
 
glObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2549 
GLAPI
 
APIENTRY
 
glGëObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2550 
GLAPI
 
APIENTRY
 
glObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2551 
GLAPI
 
APIENTRY
 
glGëObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2555 #i‚de‡
GL_VERSION_4_4


2556 
	#GL_VERSION_4_4
 1

	)

2557 
	#GL_MAX_VERTEX_ATTRIB_STRIDE
 0x82E5

	)

2558 
	#GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
 0x8221

	)

2559 
	#GL_TEXTURE_BUFFER_BINDING
 0x8C2A

	)

2560 
	#GL_MAP_PERSISTENT_BIT
 0x0040

	)

2561 
	#GL_MAP_COHERENT_BIT
 0x0080

	)

2562 
	#GL_DYNAMIC_STORAGE_BIT
 0x0100

	)

2563 
	#GL_CLIENT_STORAGE_BIT
 0x0200

	)

2564 
	#GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
 0x00004000

	)

2565 
	#GL_BUFFER_IMMUTABLE_STORAGE
 0x821F

	)

2566 
	#GL_BUFFER_STORAGE_FLAGS
 0x8220

	)

2567 
	#GL_CLEAR_TEXTURE
 0x9365

	)

2568 
	#GL_LOCATION_COMPONENT
 0x934A

	)

2569 
	#GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
 0x934B

	)

2570 
	#GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
 0x934C

	)

2571 
	#GL_QUERY_BUFFER
 0x9192

	)

2572 
	#GL_QUERY_BUFFER_BARRIER_BIT
 0x00008000

	)

2573 
	#GL_QUERY_BUFFER_BINDING
 0x9193

	)

2574 
	#GL_QUERY_RESULT_NO_WAIT
 0x9194

	)

2575 
	#GL_MIRROR_CLAMP_TO_EDGE
 0x8743

	)

2576 (
APIENTRYP
 
	tPFNGLBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2577 (
APIENTRYP
 
	tPFNGLCLEARTEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2578 (
APIENTRYP
 
	tPFNGLCLEARTEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2579 (
APIENTRYP
 
	tPFNGLBINDBUFFERSBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
);

2580 (
APIENTRYP
 
	tPFNGLBINDBUFFERSRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° 
	tGLsizeùå
 *
	tsizes
);

2581 (
APIENTRYP
 
	tPFNGLBINDTEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2582 (
APIENTRYP
 
	tPFNGLBINDSAMPLERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tßm∂îs
);

2583 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2584 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2585 #ifde‡
GL_GLEXT_PROTOTYPES


2586 
GLAPI
 
APIENTRY
 
glBuf„rSt‹age
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2587 
GLAPI
 
APIENTRY
 
glCÀ¨TexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2588 
GLAPI
 
APIENTRY
 
glCÀ¨TexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2589 
GLAPI
 
APIENTRY
 
glBödBuf„rsBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
);

2590 
GLAPI
 
APIENTRY
 
glBödBuf„rsR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° 
GLsizeùå
 *
sizes
);

2591 
GLAPI
 
APIENTRY
 
glBödTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2592 
GLAPI
 
APIENTRY
 
glBödSam∂îs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ßm∂îs
);

2593 
GLAPI
 
APIENTRY
 
glBödImageTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2594 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„rs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2598 #i‚de‡
GL_VERSION_4_5


2599 
	#GL_VERSION_4_5
 1

	)

2600 
	#GL_CONTEXT_LOST
 0x0507

	)

2601 
	#GL_NEGATIVE_ONE_TO_ONE
 0x935E

	)

2602 
	#GL_ZERO_TO_ONE
 0x935F

	)

2603 
	#GL_CLIP_ORIGIN
 0x935C

	)

2604 
	#GL_CLIP_DEPTH_MODE
 0x935D

	)

2605 
	#GL_QUERY_WAIT_INVERTED
 0x8E17

	)

2606 
	#GL_QUERY_NO_WAIT_INVERTED
 0x8E18

	)

2607 
	#GL_QUERY_BY_REGION_WAIT_INVERTED
 0x8E19

	)

2608 
	#GL_QUERY_BY_REGION_NO_WAIT_INVERTED
 0x8E1A

	)

2609 
	#GL_MAX_CULL_DISTANCES
 0x82F9

	)

2610 
	#GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
 0x82FA

	)

2611 
	#GL_TEXTURE_TARGET
 0x1006

	)

2612 
	#GL_QUERY_TARGET
 0x82EA

	)

2613 
	#GL_GUILTY_CONTEXT_RESET
 0x8253

	)

2614 
	#GL_INNOCENT_CONTEXT_RESET
 0x8254

	)

2615 
	#GL_UNKNOWN_CONTEXT_RESET
 0x8255

	)

2616 
	#GL_RESET_NOTIFICATION_STRATEGY
 0x8256

	)

2617 
	#GL_LOSE_CONTEXT_ON_RESET
 0x8252

	)

2618 
	#GL_NO_RESET_NOTIFICATION
 0x8261

	)

2619 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
 0x00000004

	)

2620 
	#GL_CONTEXT_RELEASE_BEHAVIOR
 0x82FB

	)

2621 
	#GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
 0x82FC

	)

2622 (
APIENTRYP
 
	tPFNGLCLIPCONTROLPROC
Ë(
	tGLíum
 
	t‹igö
, GLíum 
	tdïth
);

2623 (
APIENTRYP
 
	tPFNGLCREATETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

2624 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKBUFFERBASEPROC
Ë(
	tGLuöt
 
	txfb
, GLuöà
	tödex
, GLuöà
	tbuf„r
);

2625 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC
Ë(
	tGLuöt
 
	txfb
, GLuöà
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2626 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKIVPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2627 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKI_VPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øm
);

2628 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKI64_VPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, GLuöà
	tödex
, 
	tGLöt64
 *
	t∑øm
);

2629 (
APIENTRYP
 
	tPFNGLCREATEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

2630 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSTORAGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2631 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLíum
 
	tußge
);

2632 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

2633 (
APIENTRYP
 
	tPFNGLCOPYNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

2634 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2635 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2636 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

2637 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

2638 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2639 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2640 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2641 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERI64VPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

2642 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, **
	t∑øms
);

2643 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

2644 (
APIENTRYP
 
	tPFNGLCREATEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

2645 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

2646 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2647 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2648 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

2649 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf
);

2650 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

2651 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERREADBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t§c
);

2652 (
APIENTRYP
 
	tPFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° 
	tGLíum
 *
	t©èchmíts
);

2653 (
APIENTRYP
 
	tPFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° 
	tGLíum
 *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2654 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

2655 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERUIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLuöà*
	tvÆue
);

2656 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERFVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2657 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERFIPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

2658 (
APIENTRYP
 
	tPFNGLBLITNAMEDFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	tªadFømebuf„r
, GLuöà
	tdøwFømebuf„r
, 
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

2659 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

2660 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2661 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2662 (
APIENTRYP
 
	tPFNGLCREATERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

2663 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2664 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2665 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2666 (
APIENTRYP
 
	tPFNGLCREATETEXTURESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

2667 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

2668 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2669 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2670 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2671 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2672 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2673 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2674 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2675 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2676 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2677 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2678 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2679 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2680 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

2681 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2682 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2683 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

2684 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

2685 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2686 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

2687 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

2688 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

2689 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2690 (
APIENTRYP
 
	tPFNGLBINDTEXTUREUNITPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
);

2691 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2692 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2693 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

2694 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

2695 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

2696 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2697 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

2698 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2699 (
APIENTRYP
 
	tPFNGLCREATEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

2700 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYATTRIBPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

2701 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYATTRIBPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

2702 (
APIENTRYP
 
	tPFNGLVERTEXARRAYELEMENTBUFFERPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
);

2703 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2704 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2705 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

2706 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2707 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2708 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2709 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

2710 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYIVPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2711 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINDEXEDIVPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2712 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINDEXED64IVPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øm
);

2713 (
APIENTRYP
 
	tPFNGLCREATESAMPLERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tßm∂îs
);

2714 (
APIENTRYP
 
	tPFNGLCREATEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

2715 (
APIENTRYP
 
	tPFNGLCREATEQUERIESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

2716 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2717 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2718 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2719 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2720 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERBYREGIONPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2721 (
APIENTRYP
 
	tPFNGLGETTEXTURESUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	tpixñs
);

2722 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tbufSize
, *
	tpixñs
);

2723 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSPROC
) ();

2724 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2725 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2726 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

2727 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

2728 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

2729 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

2730 (
APIENTRYP
 
	tPFNGLREADNPIXELSPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

2731 (
APIENTRYP
 
	tPFNGLGETNMAPDVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

2732 (
APIENTRYP
 
	tPFNGLGETNMAPFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

2733 (
APIENTRYP
 
	tPFNGLGETNMAPIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

2734 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

2735 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

2736 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

2737 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

2738 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tèbÀ
);

2739 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timage
);

2740 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, *
	trow
, GLsizeò
	tcﬁumnBufSize
, *
	tcﬁumn
, *
	t•™
);

2741 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

2742 (
APIENTRYP
 
	tPFNGLGETNMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

2743 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERPROC
) ();

2744 #ifde‡
GL_GLEXT_PROTOTYPES


2745 
GLAPI
 
APIENTRY
 
glClùC⁄åﬁ
 (
GLíum
 
‹igö
, GLíum 
dïth
);

2746 
GLAPI
 
APIENTRY
 
glCª©eTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

2747 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackBuf„rBa£
 (
GLuöt
 
xfb
, GLuöà
ödex
, GLuöà
buf„r
);

2748 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackBuf„rR™ge
 (
GLuöt
 
xfb
, GLuöà
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2749 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackiv
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2750 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbacki_v
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, GLuöà
ödex
, 
GLöt
 *
∑øm
);

2751 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbacki64_v
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, GLuöà
ödex
, 
GLöt64
 *
∑øm
);

2752 
GLAPI
 
APIENTRY
 
glCª©eBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

2753 
GLAPI
 
APIENTRY
 
glNamedBuf„rSt‹age
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2754 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©a
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLíum
 
ußge
);

2755 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

2756 
GLAPI
 
APIENTRY
 
glC›yNamedBuf„rSubD©a
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

2757 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©a
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2758 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2759 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„r
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

2760 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rR™ge
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

2761 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„r
 (
GLuöt
 
buf„r
);

2762 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™ge
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2763 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîiv
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2764 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîi64v
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

2765 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrv
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, **
∑øms
);

2766 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

2767 
GLAPI
 
APIENTRY
 
glCª©eFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

2768 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

2769 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîi
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

2770 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

2771 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayî
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

2772 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rDøwBuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf
);

2773 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rDøwBuf„rs
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

2774 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRódBuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
§c
);

2775 
GLAPI
 
APIENTRY
 
glInvÆid©eNamedFømebuf„rD©a
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
numAâachmíts
, c⁄° 
GLíum
 *
©èchmíts
);

2776 
GLAPI
 
APIENTRY
 
glInvÆid©eNamedFømebuf„rSubD©a
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
numAâachmíts
, c⁄° 
GLíum
 *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2777 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„riv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

2778 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„ruiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLuöà*
vÆue
);

2779 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„rfv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

2780 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„rfi
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

2781 
GLAPI
 
APIENTRY
 
glBlôNamedFømebuf„r
 (
GLuöt
 
ªadFømebuf„r
, GLuöà
døwFømebuf„r
, 
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

2782 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètus
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

2783 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2784 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2785 
GLAPI
 
APIENTRY
 
glCª©eRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

2786 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹age
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

2787 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂e
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2788 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîiv
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2789 
GLAPI
 
APIENTRY
 
glCª©eTextuªs
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

2790 
GLAPI
 
APIENTRY
 
glTextuªBuf„r
 (
GLuöt
 
ãxtuª
, 
GLíum
 
öã∫Æf‹m©
, GLuöà
buf„r
);

2791 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™ge
 (
GLuöt
 
ãxtuª
, 
GLíum
 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2792 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
);

2793 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2794 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2795 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂e
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2796 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂e
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2797 
GLAPI
 
APIENTRY
 
glTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2798 
GLAPI
 
APIENTRY
 
glTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2799 
GLAPI
 
APIENTRY
 
glTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2800 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2801 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2802 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2803 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

2804 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

2805 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

2806 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîf
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

2807 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

2808 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîi
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

2809 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

2810 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øms
);

2811 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

2812 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠
 (
GLuöt
 
ãxtuª
);

2813 
GLAPI
 
APIENTRY
 
glBödTextuªUnô
 (
GLuöt
 
unô
, GLuöà
ãxtuª
);

2814 
GLAPI
 
APIENTRY
 
glGëTextuªImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
pixñs
);

2815 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLsizei
 
bufSize
, *
pixñs
);

2816 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

2817 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

2818 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

2819 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2820 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

2821 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2822 
GLAPI
 
APIENTRY
 
glCª©eVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

2823 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayAârib
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

2824 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayAârib
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

2825 
GLAPI
 
APIENTRY
 
glVîãxAºayEÀmítBuf„r
 (
GLuöt
 
vaobj
, GLuöà
buf„r
);

2826 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBuf„r
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2827 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBuf„rs
 (
GLuöt
 
vaobj
, GLuöà
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2828 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribBödög
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

2829 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2830 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribIF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2831 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribLF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2832 
GLAPI
 
APIENTRY
 
glVîãxAºayBödögDivis‹
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

2833 
GLAPI
 
APIENTRY
 
glGëVîãxAºayiv
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2834 
GLAPI
 
APIENTRY
 
glGëVîãxAºayIndexediv
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2835 
GLAPI
 
APIENTRY
 
glGëVîãxAºayIndexed64iv
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øm
);

2836 
GLAPI
 
APIENTRY
 
glCª©eSam∂îs
 (
GLsizei
 
n
, 
GLuöt
 *
ßm∂îs
);

2837 
GLAPI
 
APIENTRY
 
glCª©eProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

2838 
GLAPI
 
APIENTRY
 
glCª©eQuîõs
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, 
GLuöt
 *
ids
);

2839 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘i64v
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2840 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘iv
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2841 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘ui64v
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2842 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘uiv
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2843 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrByRegi⁄
 (
GLbôfõld
 
b¨rõrs
);

2844 
GLAPI
 
APIENTRY
 
glGëTextuªSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
pixñs
);

2845 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
bufSize
, *
pixñs
);

2846 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètus
 ();

2847 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
pixñs
);

2848 
GLAPI
 
APIENTRY
 
glGënTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
pixñs
);

2849 
GLAPI
 
APIENTRY
 
glGënUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

2850 
GLAPI
 
APIENTRY
 
glGënUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

2851 
GLAPI
 
APIENTRY
 
glGënUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

2852 
GLAPI
 
APIENTRY
 
glGënUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

2853 
GLAPI
 
APIENTRY
 
glRódnPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

2854 
GLAPI
 
APIENTRY
 
glGënM≠dv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

2855 
GLAPI
 
APIENTRY
 
glGënM≠fv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

2856 
GLAPI
 
APIENTRY
 
glGënM≠iv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

2857 
GLAPI
 
APIENTRY
 
glGënPixñM≠fv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

2858 
GLAPI
 
APIENTRY
 
glGënPixñM≠uiv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

2859 
GLAPI
 
APIENTRY
 
glGënPixñM≠usv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

2860 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂e
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

2861 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
èbÀ
);

2862 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
image
);

2863 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, *
row
, GLsizeò
cﬁumnBufSize
, *
cﬁumn
, *
•™
);

2864 
GLAPI
 
APIENTRY
 
glGënHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

2865 
GLAPI
 
APIENTRY
 
glGënMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

2866 
GLAPI
 
APIENTRY
 
glTextuªB¨rõr
 ();

2870 #i‚de‡
GL_ARB_ES2_com∑tibûôy


2871 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

2874 #i‚de‡
GL_ARB_ES3_1_com∑tibûôy


2875 
	#GL_ARB_ES3_1_com∑tibûôy
 1

	)

2878 #i‚de‡
GL_ARB_ES3_2_com∑tibûôy


2879 
	#GL_ARB_ES3_2_com∑tibûôy
 1

	)

2880 
	#GL_PRIMITIVE_BOUNDING_BOX_ARB
 0x92BE

	)

2881 
	#GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB
 0x9381

	)

2882 
	#GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB
 0x9382

	)

2883 (
APIENTRYP
 
	tPFNGLPRIMITIVEBOUNDINGBOXARBPROC
Ë(
	tGLÊﬂt
 
	tmöX
, GLÊﬂà
	tmöY
, GLÊﬂà
	tmöZ
, GLÊﬂà
	tmöW
, GLÊﬂà
	tmaxX
, GLÊﬂà
	tmaxY
, GLÊﬂà
	tmaxZ
, GLÊﬂà
	tmaxW
);

2884 #ifde‡
GL_GLEXT_PROTOTYPES


2885 
GLAPI
 
APIENTRY
 
glPrimôiveBoundögBoxARB
 (
GLÊﬂt
 
möX
, GLÊﬂà
möY
, GLÊﬂà
möZ
, GLÊﬂà
möW
, GLÊﬂà
maxX
, GLÊﬂà
maxY
, GLÊﬂà
maxZ
, GLÊﬂà
maxW
);

2889 #i‚de‡
GL_ARB_ES3_com∑tibûôy


2890 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

2893 #i‚de‡
GL_ARB_¨øys_of_¨øys


2894 
	#GL_ARB_¨øys_of_¨øys
 1

	)

2897 #i‚de‡
GL_ARB_ba£_ö°™˚


2898 
	#GL_ARB_ba£_ö°™˚
 1

	)

2901 #i‚de‡
GL_ARB_bödÀss_ãxtuª


2902 
	#GL_ARB_bödÀss_ãxtuª
 1

	)

2903 
uöt64_t
 
	tGLuöt64EXT
;

2904 
	#GL_UNSIGNED_INT64_ARB
 0x140F

	)

2905 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2906 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

2907 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2908 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2909 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

2910 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

2911 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2912 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2913 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

2914 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2915 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

2916 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2917 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2918 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64ARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

2919 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

2920 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

2921 #ifde‡
GL_GLEXT_PROTOTYPES


2922 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀARB
 (
GLuöt
 
ãxtuª
);

2923 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀARB
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

2924 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2925 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2926 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀARB
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

2927 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

2928 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2929 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2930 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

2931 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2932 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

2933 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2934 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2935 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64ARB
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

2936 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vARB
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

2937 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

2941 #i‚de‡
GL_ARB_bÀnd_func_exãnded


2942 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

2945 #i‚de‡
GL_ARB_buf„r_°‹age


2946 
	#GL_ARB_buf„r_°‹age
 1

	)

2949 #i‚de‡
GL_ARB_˛_evít


2950 
	#GL_ARB_˛_evít
 1

	)

2951 
_˛_c⁄ãxt
;

2952 
_˛_evít
;

2953 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

2954 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

2955 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t_˛_c⁄ãxt
 *
	tc⁄ãxt
, 
	t_˛_evít
 *
	tevít
, 
	tGLbôfõld
 
	tÊags
);

2956 #ifde‡
GL_GLEXT_PROTOTYPES


2957 
GLAPI
 
GLsync
 
APIENTRY
 
glCª©eSyncFromCLevítARB
 (
_˛_c⁄ãxt
 *
c⁄ãxt
, 
_˛_evít
 *
evít
, 
GLbôfõld
 
Êags
);

2961 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


2962 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

2965 #i‚de‡
GL_ARB_˛ór_ãxtuª


2966 
	#GL_ARB_˛ór_ãxtuª
 1

	)

2969 #i‚de‡
GL_ARB_˛ù_c⁄åﬁ


2970 
	#GL_ARB_˛ù_c⁄åﬁ
 1

	)

2973 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


2974 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

2975 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

2976 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

2977 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

2978 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

2979 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

2980 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

2981 #ifde‡
GL_GLEXT_PROTOTYPES


2982 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

2986 #i‚de‡
GL_ARB_com∑tibûôy


2987 
	#GL_ARB_com∑tibûôy
 1

	)

2990 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


2991 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

2994 #i‚de‡
GL_ARB_compuã_shadî


2995 
	#GL_ARB_compuã_shadî
 1

	)

2998 #i‚de‡
GL_ARB_compuã_v¨übÀ_group_size


2999 
	#GL_ARB_compuã_v¨übÀ_group_size
 1

	)

3000 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
 0x9344

	)

3001 
	#GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
 0x90EB

	)

3002 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
 0x9345

	)

3003 
	#GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
 0x91BF

	)

3004 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
, GLuöà
	tgroup_size_x
, GLuöà
	tgroup_size_y
, GLuöà
	tgroup_size_z
);

3005 #ifde‡
GL_GLEXT_PROTOTYPES


3006 
GLAPI
 
APIENTRY
 
glDi•©chCompuãGroupSizeARB
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
, GLuöà
group_size_x
, GLuöà
group_size_y
, GLuöà
group_size_z
);

3010 #i‚de‡
GL_ARB_c⁄dôi⁄Æ_ªndî_övîãd


3011 
	#GL_ARB_c⁄dôi⁄Æ_ªndî_övîãd
 1

	)

3014 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


3015 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

3018 #i‚de‡
GL_ARB_c›y_buf„r


3019 
	#GL_ARB_c›y_buf„r
 1

	)

3022 #i‚de‡
GL_ARB_c›y_image


3023 
	#GL_ARB_c›y_image
 1

	)

3026 #i‚de‡
GL_ARB_cuŒ_di°™˚


3027 
	#GL_ARB_cuŒ_di°™˚
 1

	)

3030 #i‚de‡
GL_ARB_debug_ouçut


3031 
	#GL_ARB_debug_ouçut
 1

	)

3032 (
APIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

3033 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

3034 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

3035 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

3036 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

3037 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

3038 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

3039 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

3040 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

3041 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

3042 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

3043 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

3044 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

3045 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

3046 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

3047 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

3048 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

3049 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

3050 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

3051 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

3052 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

3053 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

3054 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

3055 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

3056 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

3057 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

3058 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

3059 #ifde‡
GL_GLEXT_PROTOTYPES


3060 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

3061 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

3062 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackARB
 (
GLDEBUGPROCARB
 
ˇŒback
, c⁄° *
u£rP¨am
);

3063 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogARB
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

3067 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


3068 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

3071 #i‚de‡
GL_ARB_dïth_˛amp


3072 
	#GL_ARB_dïth_˛amp
 1

	)

3075 #i‚de‡
GL_ARB_dïth_ãxtuª


3076 
	#GL_ARB_dïth_ãxtuª
 1

	)

3077 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

3078 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

3079 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

3080 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

3081 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

3084 #i‚de‡
GL_ARB_dîiv©ive_c⁄åﬁ


3085 
	#GL_ARB_dîiv©ive_c⁄åﬁ
 1

	)

3088 #i‚de‡
GL_ARB_dúe˘_°©e_ac˚ss


3089 
	#GL_ARB_dúe˘_°©e_ac˚ss
 1

	)

3092 #i‚de‡
GL_ARB_døw_buf„rs


3093 
	#GL_ARB_døw_buf„rs
 1

	)

3094 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

3095 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

3096 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

3097 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

3098 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

3099 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

3100 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

3101 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

3102 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

3103 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

3104 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

3105 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

3106 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

3107 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

3108 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

3109 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

3110 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

3111 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

3112 #ifde‡
GL_GLEXT_PROTOTYPES


3113 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

3117 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


3118 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

3119 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

3120 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

3121 (
APIENTRYP
 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

3122 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

3123 #ifde‡
GL_GLEXT_PROTOTYPES


3124 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄iARB
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

3125 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

3126 
GLAPI
 
APIENTRY
 
glBÀndFunciARB
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

3127 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

3131 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


3132 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

3135 #i‚de‡
GL_ARB_døw_ödúe˘


3136 
	#GL_ARB_døw_ödúe˘
 1

	)

3139 #i‚de‡
GL_ARB_døw_ö°™˚d


3140 
	#GL_ARB_døw_ö°™˚d
 1

	)

3141 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

3142 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

3143 #ifde‡
GL_GLEXT_PROTOTYPES


3144 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dARB
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

3145 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dARB
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

3149 #i‚de‡
GL_ARB_íh™˚d_œyouts


3150 
	#GL_ARB_íh™˚d_œyouts
 1

	)

3153 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


3154 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

3157 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


3158 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

3161 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


3162 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

3165 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


3166 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

3169 #i‚de‡
GL_ARB_‰agmít_¥ogøm


3170 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

3171 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

3172 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

3173 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

3174 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

3175 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

3176 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

3177 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

3178 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

3179 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

3180 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

3181 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

3182 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

3183 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

3184 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

3185 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

3186 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

3187 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

3188 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

3189 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

3190 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

3191 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

3192 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

3193 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

3194 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

3195 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

3196 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

3197 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

3198 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

3199 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

3200 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

3201 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

3202 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

3203 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

3204 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

3205 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

3206 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

3207 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

3208 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

3209 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

3210 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

3211 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

3212 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

3213 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

3214 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

3215 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

3216 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

3217 
	#GL_MATRIX0_ARB
 0x88C0

	)

3218 
	#GL_MATRIX1_ARB
 0x88C1

	)

3219 
	#GL_MATRIX2_ARB
 0x88C2

	)

3220 
	#GL_MATRIX3_ARB
 0x88C3

	)

3221 
	#GL_MATRIX4_ARB
 0x88C4

	)

3222 
	#GL_MATRIX5_ARB
 0x88C5

	)

3223 
	#GL_MATRIX6_ARB
 0x88C6

	)

3224 
	#GL_MATRIX7_ARB
 0x88C7

	)

3225 
	#GL_MATRIX8_ARB
 0x88C8

	)

3226 
	#GL_MATRIX9_ARB
 0x88C9

	)

3227 
	#GL_MATRIX10_ARB
 0x88CA

	)

3228 
	#GL_MATRIX11_ARB
 0x88CB

	)

3229 
	#GL_MATRIX12_ARB
 0x88CC

	)

3230 
	#GL_MATRIX13_ARB
 0x88CD

	)

3231 
	#GL_MATRIX14_ARB
 0x88CE

	)

3232 
	#GL_MATRIX15_ARB
 0x88CF

	)

3233 
	#GL_MATRIX16_ARB
 0x88D0

	)

3234 
	#GL_MATRIX17_ARB
 0x88D1

	)

3235 
	#GL_MATRIX18_ARB
 0x88D2

	)

3236 
	#GL_MATRIX19_ARB
 0x88D3

	)

3237 
	#GL_MATRIX20_ARB
 0x88D4

	)

3238 
	#GL_MATRIX21_ARB
 0x88D5

	)

3239 
	#GL_MATRIX22_ARB
 0x88D6

	)

3240 
	#GL_MATRIX23_ARB
 0x88D7

	)

3241 
	#GL_MATRIX24_ARB
 0x88D8

	)

3242 
	#GL_MATRIX25_ARB
 0x88D9

	)

3243 
	#GL_MATRIX26_ARB
 0x88DA

	)

3244 
	#GL_MATRIX27_ARB
 0x88DB

	)

3245 
	#GL_MATRIX28_ARB
 0x88DC

	)

3246 
	#GL_MATRIX29_ARB
 0x88DD

	)

3247 
	#GL_MATRIX30_ARB
 0x88DE

	)

3248 
	#GL_MATRIX31_ARB
 0x88DF

	)

3249 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

3250 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

3251 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

3252 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

3253 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3254 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

3255 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

3256 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3257 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3258 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

3259 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

3260 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3261 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

3262 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

3263 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

3264 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

3265 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3266 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

3267 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3268 #ifde‡
GL_GLEXT_PROTOTYPES


3269 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

3270 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
 
èrgë
, 
GLuöt
 
¥ogøm
);

3271 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

3272 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

3273 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

3274 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

3275 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

3276 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

3277 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

3278 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

3279 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

3280 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

3281 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

3282 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

3283 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

3284 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

3285 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3286 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

3287 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
 
¥ogøm
);

3291 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


3292 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

3295 #i‚de‡
GL_ARB_‰agmít_shadî


3296 
	#GL_ARB_‰agmít_shadî
 1

	)

3297 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

3298 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

3299 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

3302 #i‚de‡
GL_ARB_‰agmít_shadî_öãæock


3303 
	#GL_ARB_‰agmít_shadî_öãæock
 1

	)

3306 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


3307 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

3310 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


3311 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

3314 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


3315 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

3318 #i‚de‡
GL_ARB_geomëry_shadî4


3319 
	#GL_ARB_geomëry_shadî4
 1

	)

3320 
	#GL_LINES_ADJACENCY_ARB
 0x000A

	)

3321 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0x000B

	)

3322 
	#GL_TRIANGLES_ADJACENCY_ARB
 0x000C

	)

3323 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0x000D

	)

3324 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

3325 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

3326 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

3327 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

3328 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

3329 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

3330 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

3331 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

3332 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

3333 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

3334 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

3335 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

3336 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

3337 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

3338 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

3339 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

3340 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

3341 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

3342 #ifde‡
GL_GLEXT_PROTOTYPES


3343 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiARB
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

3344 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

3345 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

3346 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚ARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

3350 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


3351 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

3354 #i‚de‡
GL_ARB_gë_ãxtuª_sub_image


3355 
	#GL_ARB_gë_ãxtuª_sub_image
 1

	)

3358 #i‚de‡
GL_ARB_gpu_shadî5


3359 
	#GL_ARB_gpu_shadî5
 1

	)

3362 #i‚de‡
GL_ARB_gpu_shadî_Â64


3363 
	#GL_ARB_gpu_shadî_Â64
 1

	)

3366 #i‚de‡
GL_ARB_gpu_shadî_öt64


3367 
	#GL_ARB_gpu_shadî_öt64
 1

	)

3368 
	#GL_INT64_ARB
 0x140E

	)

3369 
	#GL_INT64_VEC2_ARB
 0x8FE9

	)

3370 
	#GL_INT64_VEC3_ARB
 0x8FEA

	)

3371 
	#GL_INT64_VEC4_ARB
 0x8FEB

	)

3372 
	#GL_UNSIGNED_INT64_VEC2_ARB
 0x8FF5

	)

3373 
	#GL_UNSIGNED_INT64_VEC3_ARB
 0x8FF6

	)

3374 
	#GL_UNSIGNED_INT64_VEC4_ARB
 0x8FF7

	)

3375 (
APIENTRYP
 
	tPFNGLUNIFORM1I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
);

3376 (
APIENTRYP
 
	tPFNGLUNIFORM2I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
);

3377 (
APIENTRYP
 
	tPFNGLUNIFORM3I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
);

3378 (
APIENTRYP
 
	tPFNGLUNIFORM4I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
, GLöt64 
	tw
);

3379 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3380 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3381 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3382 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3383 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
);

3384 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
);

3385 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
);

3386 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
, GLuöt64 
	tw
);

3387 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3388 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3389 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3390 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3391 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 *
	t∑øms
);

3392 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 *
	t∑øms
);

3393 (
APIENTRYP
 
	tPFNGLGETNUNIFORMI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

3394 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt64
 *
	t∑øms
);

3395 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
);

3396 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
);

3397 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
);

3398 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
, GLöt64 
	tw
);

3399 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3400 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3401 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3402 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3403 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
);

3404 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
);

3405 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
);

3406 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
, GLuöt64 
	tw
);

3407 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3408 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3409 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3410 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3411 #ifde‡
GL_GLEXT_PROTOTYPES


3412 
GLAPI
 
APIENTRY
 
glUnif‹m1i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
);

3413 
GLAPI
 
APIENTRY
 
glUnif‹m2i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
);

3414 
GLAPI
 
APIENTRY
 
glUnif‹m3i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
);

3415 
GLAPI
 
APIENTRY
 
glUnif‹m4i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
, GLöt64 
w
);

3416 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3417 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3418 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3419 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3420 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
);

3421 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
);

3422 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
);

3423 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
, GLuöt64 
w
);

3424 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3425 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3426 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3427 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3428 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 *
∑øms
);

3429 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 *
∑øms
);

3430 
GLAPI
 
APIENTRY
 
glGënUnif‹mi64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

3431 
GLAPI
 
APIENTRY
 
glGënUnif‹mui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLuöt64
 *
∑øms
);

3432 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
);

3433 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
);

3434 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
);

3435 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
, GLöt64 
w
);

3436 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3437 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3438 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3439 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3440 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
);

3441 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
);

3442 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
);

3443 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
, GLuöt64 
w
);

3444 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3445 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3446 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3447 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3451 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


3452 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

3453 
	tGLhÆfARB
;

3454 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

3457 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


3458 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

3461 #i‚de‡
GL_ARB_imagög


3462 
	#GL_ARB_imagög
 1

	)

3463 
	#GL_BLEND_COLOR
 0x8005

	)

3464 
	#GL_BLEND_EQUATION
 0x8009

	)

3465 
	#GL_CONVOLUTION_1D
 0x8010

	)

3466 
	#GL_CONVOLUTION_2D
 0x8011

	)

3467 
	#GL_SEPARABLE_2D
 0x8012

	)

3468 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

3469 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

3470 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

3471 
	#GL_REDUCE
 0x8016

	)

3472 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

3473 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

3474 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

3475 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

3476 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

3477 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

3478 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

3479 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

3480 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

3481 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

3482 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

3483 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

3484 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

3485 
	#GL_HISTOGRAM
 0x8024

	)

3486 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

3487 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

3488 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

3489 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

3490 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

3491 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

3492 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

3493 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

3494 
	#GL_HISTOGRAM_SINK
 0x802D

	)

3495 
	#GL_MINMAX
 0x802E

	)

3496 
	#GL_MINMAX_FORMAT
 0x802F

	)

3497 
	#GL_MINMAX_SINK
 0x8030

	)

3498 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

3499 
	#GL_COLOR_MATRIX
 0x80B1

	)

3500 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

3501 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

3502 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

3503 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

3504 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

3505 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

3506 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

3507 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

3508 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

3509 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

3510 
	#GL_COLOR_TABLE
 0x80D0

	)

3511 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

3512 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

3513 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

3514 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

3515 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

3516 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

3517 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

3518 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

3519 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

3520 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

3521 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

3522 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

3523 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

3524 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

3525 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

3526 
	#GL_CONSTANT_BORDER
 0x8151

	)

3527 
	#GL_REPLICATE_BORDER
 0x8153

	)

3528 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

3529 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

3530 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3531 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3532 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3533 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

3534 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3535 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3536 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

3537 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

3538 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3539 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3540 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

3541 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3542 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

3543 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3544 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3545 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3546 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

3547 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3548 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3549 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

3550 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

3551 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3552 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3553 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3554 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3555 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3556 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3557 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3558 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3559 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

3560 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

3561 #ifde‡
GL_GLEXT_PROTOTYPES


3562 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

3563 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3564 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3565 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3566 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

3567 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3568 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3569 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

3570 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

3571 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3572 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3573 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

3574 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3575 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

3576 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3577 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3578 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

3579 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

3580 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3581 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3582 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

3583 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

3584 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3585 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3586 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3587 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3588 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3589 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3590 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3591 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3592 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
 
èrgë
);

3593 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
 
èrgë
);

3597 #i‚de‡
GL_ARB_ödúe˘_∑ømëîs


3598 
	#GL_ARB_ödúe˘_∑ømëîs
 1

	)

3599 
	#GL_PARAMETER_BUFFER_ARB
 0x80EE

	)

3600 
	#GL_PARAMETER_BUFFER_BINDING_ARB
 0x80EF

	)

3601 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3602 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3603 #ifde‡
GL_GLEXT_PROTOTYPES


3604 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘Cou¡ARB
 (
GLíum
 
mode
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3605 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘Cou¡ARB
 (
GLíum
 
mode
, GLíum 
ty≥
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3609 #i‚de‡
GL_ARB_ö°™˚d_¨øys


3610 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

3611 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

3612 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

3613 #ifde‡
GL_GLEXT_PROTOTYPES


3614 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹ARB
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

3618 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


3619 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

3622 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


3623 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

3624 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

3627 #i‚de‡
GL_ARB_övÆid©e_subd©a


3628 
	#GL_ARB_övÆid©e_subd©a
 1

	)

3631 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


3632 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

3635 #i‚de‡
GL_ARB_m≠_buf„r_ønge


3636 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

3639 #i‚de‡
GL_ARB_m©rix_∑Àâe


3640 
	#GL_ARB_m©rix_∑Àâe
 1

	)

3641 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

3642 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

3643 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

3644 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

3645 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

3646 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

3647 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

3648 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

3649 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

3650 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

3651 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

3652 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

3653 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

3654 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

3655 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

3656 #ifde‡
GL_GLEXT_PROTOTYPES


3657 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
 
ödex
);

3658 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
ödi˚s
);

3659 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
ödi˚s
);

3660 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
ödi˚s
);

3661 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

3665 #i‚de‡
GL_ARB_mu…i_böd


3666 
	#GL_ARB_mu…i_böd
 1

	)

3669 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


3670 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

3673 #i‚de‡
GL_ARB_mu…ißm∂e


3674 
	#GL_ARB_mu…ißm∂e
 1

	)

3675 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

3676 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

3677 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

3678 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

3679 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

3680 
	#GL_SAMPLES_ARB
 0x80A9

	)

3681 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

3682 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

3683 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

3684 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3685 #ifde‡
GL_GLEXT_PROTOTYPES


3686 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

3690 #i‚de‡
GL_ARB_mu…ôextuª


3691 
	#GL_ARB_mu…ôextuª
 1

	)

3692 
	#GL_TEXTURE0_ARB
 0x84C0

	)

3693 
	#GL_TEXTURE1_ARB
 0x84C1

	)

3694 
	#GL_TEXTURE2_ARB
 0x84C2

	)

3695 
	#GL_TEXTURE3_ARB
 0x84C3

	)

3696 
	#GL_TEXTURE4_ARB
 0x84C4

	)

3697 
	#GL_TEXTURE5_ARB
 0x84C5

	)

3698 
	#GL_TEXTURE6_ARB
 0x84C6

	)

3699 
	#GL_TEXTURE7_ARB
 0x84C7

	)

3700 
	#GL_TEXTURE8_ARB
 0x84C8

	)

3701 
	#GL_TEXTURE9_ARB
 0x84C9

	)

3702 
	#GL_TEXTURE10_ARB
 0x84CA

	)

3703 
	#GL_TEXTURE11_ARB
 0x84CB

	)

3704 
	#GL_TEXTURE12_ARB
 0x84CC

	)

3705 
	#GL_TEXTURE13_ARB
 0x84CD

	)

3706 
	#GL_TEXTURE14_ARB
 0x84CE

	)

3707 
	#GL_TEXTURE15_ARB
 0x84CF

	)

3708 
	#GL_TEXTURE16_ARB
 0x84D0

	)

3709 
	#GL_TEXTURE17_ARB
 0x84D1

	)

3710 
	#GL_TEXTURE18_ARB
 0x84D2

	)

3711 
	#GL_TEXTURE19_ARB
 0x84D3

	)

3712 
	#GL_TEXTURE20_ARB
 0x84D4

	)

3713 
	#GL_TEXTURE21_ARB
 0x84D5

	)

3714 
	#GL_TEXTURE22_ARB
 0x84D6

	)

3715 
	#GL_TEXTURE23_ARB
 0x84D7

	)

3716 
	#GL_TEXTURE24_ARB
 0x84D8

	)

3717 
	#GL_TEXTURE25_ARB
 0x84D9

	)

3718 
	#GL_TEXTURE26_ARB
 0x84DA

	)

3719 
	#GL_TEXTURE27_ARB
 0x84DB

	)

3720 
	#GL_TEXTURE28_ARB
 0x84DC

	)

3721 
	#GL_TEXTURE29_ARB
 0x84DD

	)

3722 
	#GL_TEXTURE30_ARB
 0x84DE

	)

3723 
	#GL_TEXTURE31_ARB
 0x84DF

	)

3724 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

3725 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

3726 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

3727 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3728 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3729 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3730 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3731 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3732 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3733 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3734 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3735 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3736 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3737 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3738 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3739 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3740 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3741 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3742 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3743 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3744 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3745 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3746 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3747 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3748 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3749 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3750 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3751 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3752 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3753 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3754 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3755 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3756 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3757 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3758 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3759 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3760 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3761 #ifde‡
GL_GLEXT_PROTOTYPES


3762 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3763 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3764 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

3765 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3766 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

3767 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3768 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

3769 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3770 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

3771 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3772 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

3773 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3774 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

3775 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3776 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

3777 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3778 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

3779 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3780 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

3781 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3782 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

3783 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3784 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

3785 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3786 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

3787 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3788 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

3789 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3790 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

3791 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3792 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

3793 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3794 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

3795 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3799 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


3800 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

3801 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

3802 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

3803 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

3804 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

3805 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

3806 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

3807 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

3808 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

3809 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

3810 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

3811 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3812 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3813 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

3814 #ifde‡
GL_GLEXT_PROTOTYPES


3815 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

3816 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

3817 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
 
id
);

3818 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

3819 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
 
èrgë
);

3820 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3821 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

3822 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

3826 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


3827 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

3830 #i‚de‡
GL_ARB_∑øŒñ_shadî_compûe


3831 
	#GL_ARB_∑øŒñ_shadî_compûe
 1

	)

3832 
	#GL_MAX_SHADER_COMPILER_THREADS_ARB
 0x91B0

	)

3833 
	#GL_COMPLETION_STATUS_ARB
 0x91B1

	)

3834 (
APIENTRYP
 
	tPFNGLMAXSHADERCOMPILERTHREADSARBPROC
Ë(
	tGLuöt
 
	tcou¡
);

3835 #ifde‡
GL_GLEXT_PROTOTYPES


3836 
GLAPI
 
APIENTRY
 
glMaxShadîCompûîThªadsARB
 (
GLuöt
 
cou¡
);

3840 #i‚de‡
GL_ARB_pùñöe_°©i°ics_quîy


3841 
	#GL_ARB_pùñöe_°©i°ics_quîy
 1

	)

3842 
	#GL_VERTICES_SUBMITTED_ARB
 0x82EE

	)

3843 
	#GL_PRIMITIVES_SUBMITTED_ARB
 0x82EF

	)

3844 
	#GL_VERTEX_SHADER_INVOCATIONS_ARB
 0x82F0

	)

3845 
	#GL_TESS_CONTROL_SHADER_PATCHES_ARB
 0x82F1

	)

3846 
	#GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
 0x82F2

	)

3847 
	#GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
 0x82F3

	)

3848 
	#GL_FRAGMENT_SHADER_INVOCATIONS_ARB
 0x82F4

	)

3849 
	#GL_COMPUTE_SHADER_INVOCATIONS_ARB
 0x82F5

	)

3850 
	#GL_CLIPPING_INPUT_PRIMITIVES_ARB
 0x82F6

	)

3851 
	#GL_CLIPPING_OUTPUT_PRIMITIVES_ARB
 0x82F7

	)

3854 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


3855 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

3856 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

3857 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

3858 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

3859 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

3862 #i‚de‡
GL_ARB_poöt_∑ømëîs


3863 
	#GL_ARB_poöt_∑ømëîs
 1

	)

3864 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

3865 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

3866 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

3867 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

3868 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3869 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3870 #ifde‡
GL_GLEXT_PROTOTYPES


3871 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

3872 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3876 #i‚de‡
GL_ARB_poöt_•rôe


3877 
	#GL_ARB_poöt_•rôe
 1

	)

3878 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

3879 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

3882 #i‚de‡
GL_ARB_po°_dïth_covîage


3883 
	#GL_ARB_po°_dïth_covîage
 1

	)

3886 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


3887 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

3890 #i‚de‡
GL_ARB_¥ovokög_vîãx


3891 
	#GL_ARB_¥ovokög_vîãx
 1

	)

3894 #i‚de‡
GL_ARB_quîy_buf„r_obje˘


3895 
	#GL_ARB_quîy_buf„r_obje˘
 1

	)

3898 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


3899 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

3902 #i‚de‡
GL_ARB_robu°√ss


3903 
	#GL_ARB_robu°√ss
 1

	)

3904 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

3905 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

3906 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

3907 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

3908 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

3909 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

3910 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

3911 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

3912 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3913 (
APIENTRYP
 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

3914 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3915 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

3916 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

3917 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

3918 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

3919 (
APIENTRYP
 
	tPFNGLGETNMAPDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

3920 (
APIENTRYP
 
	tPFNGLGETNMAPFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

3921 (
APIENTRYP
 
	tPFNGLGETNMAPIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

3922 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

3923 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

3924 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

3925 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEARBPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

3926 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tèbÀ
);

3927 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timage
);

3928 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, *
	trow
, GLsizeò
	tcﬁumnBufSize
, *
	tcﬁumn
, *
	t•™
);

3929 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3930 (
APIENTRYP
 
	tPFNGLGETNMINMAXARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3931 #ifde‡
GL_GLEXT_PROTOTYPES


3932 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètusARB
 ();

3933 
GLAPI
 
APIENTRY
 
glGënTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
img
);

3934 
GLAPI
 
APIENTRY
 
glRódnPixñsARB
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

3935 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
img
);

3936 
GLAPI
 
APIENTRY
 
glGënUnif‹mfvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

3937 
GLAPI
 
APIENTRY
 
glGënUnif‹mivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

3938 
GLAPI
 
APIENTRY
 
glGënUnif‹muivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

3939 
GLAPI
 
APIENTRY
 
glGënUnif‹mdvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

3940 
GLAPI
 
APIENTRY
 
glGënM≠dvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

3941 
GLAPI
 
APIENTRY
 
glGënM≠fvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

3942 
GLAPI
 
APIENTRY
 
glGënM≠ivARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

3943 
GLAPI
 
APIENTRY
 
glGënPixñM≠fvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

3944 
GLAPI
 
APIENTRY
 
glGënPixñM≠uivARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

3945 
GLAPI
 
APIENTRY
 
glGënPixñM≠usvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

3946 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂eARB
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

3947 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
èbÀ
);

3948 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄FûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
image
);

3949 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, *
row
, GLsizeò
cﬁumnBufSize
, *
cﬁumn
, *
•™
);

3950 
GLAPI
 
APIENTRY
 
glGënHi°ogømARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3951 
GLAPI
 
APIENTRY
 
glGënMömaxARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3955 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


3956 
	#GL_ARB_robu°√ss_isﬁ©i⁄
 1

	)

3959 #i‚de‡
GL_ARB_ßm∂e_loˇti⁄s


3960 
	#GL_ARB_ßm∂e_loˇti⁄s
 1

	)

3961 
	#GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB
 0x933D

	)

3962 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB
 0x933E

	)

3963 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB
 0x933F

	)

3964 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB
 0x9340

	)

3965 
	#GL_SAMPLE_LOCATION_ARB
 0x8E50

	)

3966 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB
 0x9341

	)

3967 
	#GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB
 0x9342

	)

3968 
	#GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB
 0x9343

	)

3969 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3970 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, GLuöà
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3971 (
APIENTRYP
 
	tPFNGLEVALUATEDEPTHVALUESARBPROC
) ();

3972 #ifde‡
GL_GLEXT_PROTOTYPES


3973 
GLAPI
 
APIENTRY
 
glFømebuf„rSam∂eLoˇti⁄sfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

3974 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rSam∂eLoˇti⁄sfvARB
 (
GLuöt
 
‰amebuf„r
, GLuöà
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

3975 
GLAPI
 
APIENTRY
 
glEvÆu©eDïthVÆuesARB
 ();

3979 #i‚de‡
GL_ARB_ßm∂e_shadög


3980 
	#GL_ARB_ßm∂e_shadög
 1

	)

3981 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

3982 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

3983 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

3984 #ifde‡
GL_GLEXT_PROTOTYPES


3985 
GLAPI
 
APIENTRY
 
glMöSam∂eShadögARB
 (
GLÊﬂt
 
vÆue
);

3989 #i‚de‡
GL_ARB_ßm∂î_obje˘s


3990 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

3993 #i‚de‡
GL_ARB_£amÀss_cube_m≠


3994 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

3997 #i‚de‡
GL_ARB_£amÀss_cubem≠_≥r_ãxtuª


3998 
	#GL_ARB_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

4001 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


4002 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

4005 #i‚de‡
GL_ARB_shadî_©omic_cou¡î_›s


4006 
	#GL_ARB_shadî_©omic_cou¡î_›s
 1

	)

4009 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


4010 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

4013 #i‚de‡
GL_ARB_shadî_bÆlŸ


4014 
	#GL_ARB_shadî_bÆlŸ
 1

	)

4017 #i‚de‡
GL_ARB_shadî_bô_ícodög


4018 
	#GL_ARB_shadî_bô_ícodög
 1

	)

4021 #i‚de‡
GL_ARB_shadî_˛ock


4022 
	#GL_ARB_shadî_˛ock
 1

	)

4025 #i‚de‡
GL_ARB_shadî_døw_∑ømëîs


4026 
	#GL_ARB_shadî_døw_∑ømëîs
 1

	)

4029 #i‚de‡
GL_ARB_shadî_group_vŸe


4030 
	#GL_ARB_shadî_group_vŸe
 1

	)

4033 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


4034 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

4037 #i‚de‡
GL_ARB_shadî_image_size


4038 
	#GL_ARB_shadî_image_size
 1

	)

4041 #i‚de‡
GL_ARB_shadî_obje˘s


4042 
	#GL_ARB_shadî_obje˘s
 1

	)

4043 #ifde‡
__APPLE__


4044 #ifde‡
BUILDING_MESA


4046 
	tGLh™dÀARB
;

4048 *
	tGLh™dÀARB
;

4051 
	tGLh™dÀARB
;

4053 
	tGLch¨ARB
;

4054 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

4055 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

4056 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

4057 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

4058 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

4059 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

4060 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

4061 
	#GL_INT_VEC2_ARB
 0x8B53

	)

4062 
	#GL_INT_VEC3_ARB
 0x8B54

	)

4063 
	#GL_INT_VEC4_ARB
 0x8B55

	)

4064 
	#GL_BOOL_ARB
 0x8B56

	)

4065 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

4066 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

4067 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

4068 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

4069 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

4070 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

4071 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

4072 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

4073 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

4074 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

4075 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

4076 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

4077 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

4078 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

4079 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

4080 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

4081 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

4082 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

4083 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

4084 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

4085 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

4086 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

4087 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

4088 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

4089 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

4090 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

4091 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

4092 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
 **
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

4093 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

4094 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

4095 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

4096 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4097 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4098 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4099 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

4100 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

4101 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

4102 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

4103 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

4104 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

4105 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

4106 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

4107 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4108 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4109 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4110 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4111 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4112 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4113 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4114 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4115 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4116 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4117 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4118 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4119 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4120 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

4121 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

4122 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4123 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4124 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

4125 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

4126 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

4127 #ifde‡
GL_GLEXT_PROTOTYPES


4128 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
 
obj
);

4129 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
 
≤ame
);

4130 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
©èchedObj
);

4131 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
 
shadîTy≥
);

4132 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
 
shadîObj
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨ARB
 **
°rög
, c⁄° 
GLöt
 *
Àngth
);

4133 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
 
shadîObj
);

4134 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

4135 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
obj
);

4136 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

4137 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
 
¥ogømObj
);

4138 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

4139 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

4140 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

4141 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

4142 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

4143 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

4144 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

4145 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

4146 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

4147 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4148 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4149 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4150 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4151 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4152 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4153 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4154 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4155 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4156 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4157 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4158 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

4159 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

4160 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
öfoLog
);

4161 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
 
c⁄èöîObj
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLh™dÀARB *
obj
);

4162 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

4163 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

4164 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

4165 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

4166 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
sour˚
);

4170 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


4171 
	#GL_ARB_shadî_¥ecisi⁄
 1

	)

4174 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


4175 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

4178 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


4179 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

4182 #i‚de‡
GL_ARB_shadî_subroutöe


4183 
	#GL_ARB_shadî_subroutöe
 1

	)

4186 #i‚de‡
GL_ARB_shadî_ãxtuª_image_ßm∂es


4187 
	#GL_ARB_shadî_ãxtuª_image_ßm∂es
 1

	)

4190 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


4191 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

4194 #i‚de‡
GL_ARB_shadî_võwp‹t_œyî_¨øy


4195 
	#GL_ARB_shadî_võwp‹t_œyî_¨øy
 1

	)

4198 #i‚de‡
GL_ARB_shadög_œnguage_100


4199 
	#GL_ARB_shadög_œnguage_100
 1

	)

4200 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

4203 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


4204 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

4207 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


4208 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

4209 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

4210 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

4211 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

4212 (
APIENTRYP
 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

4213 (
APIENTRYP
 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

4214 (
APIENTRYP
 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

4215 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

4216 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

4217 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

4218 #ifde‡
GL_GLEXT_PROTOTYPES


4219 
GLAPI
 
APIENTRY
 
glNamedSåögARB
 (
GLíum
 
ty≥
, 
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, GLöà
°rögÀn
, c⁄° GLch¨ *
°rög
);

4220 
GLAPI
 
APIENTRY
 
glDñëeNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

4221 
GLAPI
 
APIENTRY
 
glCompûeShadîIn˛udeARB
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
∑th
, c⁄° 
GLöt
 *
Àngth
);

4222 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

4223 
GLAPI
 
APIENTRY
 
glGëNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLsizei
 
bufSize
, GLöà*
°rögÀn
, GLch¨ *
°rög
);

4224 
GLAPI
 
APIENTRY
 
glGëNamedSåögivARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

4228 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


4229 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

4232 #i‚de‡
GL_ARB_shadow


4233 
	#GL_ARB_shadow
 1

	)

4234 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

4235 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

4236 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

4239 #i‚de‡
GL_ARB_shadow_ambõ¡


4240 
	#GL_ARB_shadow_ambõ¡
 1

	)

4241 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

4244 #i‚de‡
GL_ARB_•¨£_buf„r


4245 
	#GL_ARB_•¨£_buf„r
 1

	)

4246 
	#GL_SPARSE_STORAGE_BIT_ARB
 0x0400

	)

4247 
	#GL_SPARSE_BUFFER_PAGE_SIZE_ARB
 0x82F8

	)

4248 (
APIENTRYP
 
	tPFNGLBUFFERPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4249 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4250 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4251 #ifde‡
GL_GLEXT_PROTOTYPES


4252 
GLAPI
 
APIENTRY
 
glBuf„rPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4253 
GLAPI
 
APIENTRY
 
glNamedBuf„rPageCommômítEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4254 
GLAPI
 
APIENTRY
 
glNamedBuf„rPageCommômítARB
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4258 #i‚de‡
GL_ARB_•¨£_ãxtuª


4259 
	#GL_ARB_•¨£_ãxtuª
 1

	)

4260 
	#GL_TEXTURE_SPARSE_ARB
 0x91A6

	)

4261 
	#GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
 0x91A7

	)

4262 
	#GL_NUM_SPARSE_LEVELS_ARB
 0x91AA

	)

4263 
	#GL_NUM_VIRTUAL_PAGE_SIZES_ARB
 0x91A8

	)

4264 
	#GL_VIRTUAL_PAGE_SIZE_X_ARB
 0x9195

	)

4265 
	#GL_VIRTUAL_PAGE_SIZE_Y_ARB
 0x9196

	)

4266 
	#GL_VIRTUAL_PAGE_SIZE_Z_ARB
 0x9197

	)

4267 
	#GL_MAX_SPARSE_TEXTURE_SIZE_ARB
 0x9198

	)

4268 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
 0x9199

	)

4269 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
 0x919A

	)

4270 
	#GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
 0x91A9

	)

4271 (
APIENTRYP
 
	tPFNGLTEXPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tcommô
);

4272 #ifde‡
GL_GLEXT_PROTOTYPES


4273 
GLAPI
 
APIENTRY
 
glTexPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
commô
);

4277 #i‚de‡
GL_ARB_•¨£_ãxtuª2


4278 
	#GL_ARB_•¨£_ãxtuª2
 1

	)

4281 #i‚de‡
GL_ARB_•¨£_ãxtuª_˛amp


4282 
	#GL_ARB_•¨£_ãxtuª_˛amp
 1

	)

4285 #i‚de‡
GL_ARB_°ícû_ãxturög


4286 
	#GL_ARB_°ícû_ãxturög
 1

	)

4289 #i‚de‡
GL_ARB_sync


4290 
	#GL_ARB_sync
 1

	)

4293 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


4294 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

4297 #i‚de‡
GL_ARB_ãxtuª_b¨rõr


4298 
	#GL_ARB_ãxtuª_b¨rõr
 1

	)

4301 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


4302 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

4303 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

4306 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


4307 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

4308 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

4309 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

4310 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

4311 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

4312 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

4313 (
APIENTRYP
 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

4314 #ifde‡
GL_GLEXT_PROTOTYPES


4315 
GLAPI
 
APIENTRY
 
glTexBuf„rARB
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

4319 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


4320 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

4323 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


4324 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

4327 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


4328 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

4329 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

4330 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

4331 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

4332 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

4333 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

4334 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

4335 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

4336 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

4337 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

4338 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

4339 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

4340 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4341 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4342 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4343 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4344 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4345 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4346 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

4347 #ifde‡
GL_GLEXT_PROTOTYPES


4348 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4349 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4350 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4351 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4352 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4353 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4354 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

4358 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


4359 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

4360 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

4361 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

4362 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

4363 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

4366 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


4367 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

4370 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


4371 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

4372 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

4373 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

4374 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

4375 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

4376 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

4377 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

4378 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

4379 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

4380 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

4381 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

4382 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

4383 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

4386 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


4387 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

4388 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

4389 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

4390 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

4391 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

4392 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

4393 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

4394 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

4397 #i‚de‡
GL_ARB_ãxtuª_ív_add


4398 
	#GL_ARB_ãxtuª_ív_add
 1

	)

4401 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


4402 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

4403 
	#GL_COMBINE_ARB
 0x8570

	)

4404 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

4405 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

4406 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

4407 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

4408 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

4409 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

4410 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

4411 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

4412 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

4413 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

4414 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

4415 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

4416 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

4417 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

4418 
	#GL_RGB_SCALE_ARB
 0x8573

	)

4419 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

4420 
	#GL_INTERPOLATE_ARB
 0x8575

	)

4421 
	#GL_SUBTRACT_ARB
 0x84E7

	)

4422 
	#GL_CONSTANT_ARB
 0x8576

	)

4423 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

4424 
	#GL_PREVIOUS_ARB
 0x8578

	)

4427 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


4428 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

4431 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


4432 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

4433 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

4434 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

4437 #i‚de‡
GL_ARB_ãxtuª_fûãr_mömax


4438 
	#GL_ARB_ãxtuª_fûãr_mömax
 1

	)

4439 
	#GL_TEXTURE_REDUCTION_MODE_ARB
 0x9366

	)

4440 
	#GL_WEIGHTED_AVERAGE_ARB
 0x9367

	)

4443 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


4444 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

4445 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

4446 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

4447 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

4448 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

4449 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

4450 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

4451 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

4452 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

4453 
	#GL_RGBA32F_ARB
 0x8814

	)

4454 
	#GL_RGB32F_ARB
 0x8815

	)

4455 
	#GL_ALPHA32F_ARB
 0x8816

	)

4456 
	#GL_INTENSITY32F_ARB
 0x8817

	)

4457 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

4458 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

4459 
	#GL_RGBA16F_ARB
 0x881A

	)

4460 
	#GL_RGB16F_ARB
 0x881B

	)

4461 
	#GL_ALPHA16F_ARB
 0x881C

	)

4462 
	#GL_INTENSITY16F_ARB
 0x881D

	)

4463 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

4464 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

4467 #i‚de‡
GL_ARB_ãxtuª_g©hî


4468 
	#GL_ARB_ãxtuª_g©hî
 1

	)

4469 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

4470 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

4471 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
 0x8F9F

	)

4474 #i‚de‡
GL_ARB_ãxtuª_múr‹_˛amp_to_edge


4475 
	#GL_ARB_ãxtuª_múr‹_˛amp_to_edge
 1

	)

4478 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


4479 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

4480 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

4483 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


4484 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

4487 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


4488 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

4491 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


4492 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

4495 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


4496 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

4499 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


4500 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

4501 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

4502 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

4503 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

4504 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

4507 #i‚de‡
GL_ARB_ãxtuª_rg


4508 
	#GL_ARB_ãxtuª_rg
 1

	)

4511 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


4512 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

4515 #i‚de‡
GL_ARB_ãxtuª_°ícû8


4516 
	#GL_ARB_ãxtuª_°ícû8
 1

	)

4519 #i‚de‡
GL_ARB_ãxtuª_°‹age


4520 
	#GL_ARB_ãxtuª_°‹age
 1

	)

4523 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


4524 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

4527 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


4528 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

4531 #i‚de‡
GL_ARB_ãxtuª_võw


4532 
	#GL_ARB_ãxtuª_võw
 1

	)

4535 #i‚de‡
GL_ARB_timî_quîy


4536 
	#GL_ARB_timî_quîy
 1

	)

4539 #i‚de‡
GL_ARB_å™sf‹m_„edback2


4540 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

4543 #i‚de‡
GL_ARB_å™sf‹m_„edback3


4544 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

4547 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


4548 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

4551 #i‚de‡
GL_ARB_å™sf‹m_„edback_ovîÊow_quîy


4552 
	#GL_ARB_å™sf‹m_„edback_ovîÊow_quîy
 1

	)

4553 
	#GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB
 0x82EC

	)

4554 
	#GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
 0x82ED

	)

4557 #i‚de‡
GL_ARB_å™•o£_m©rix


4558 
	#GL_ARB_å™•o£_m©rix
 1

	)

4559 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

4560 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

4561 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

4562 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

4563 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4564 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4565 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4566 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4567 #ifde‡
GL_GLEXT_PROTOTYPES


4568 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4569 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4570 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4571 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4575 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


4576 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

4579 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


4580 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

4583 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


4584 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

4587 #i‚de‡
GL_ARB_vîãx_©åib_64bô


4588 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

4591 #i‚de‡
GL_ARB_vîãx_©åib_bödög


4592 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

4595 #i‚de‡
GL_ARB_vîãx_bÀnd


4596 
	#GL_ARB_vîãx_bÀnd
 1

	)

4597 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

4598 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

4599 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

4600 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

4601 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

4602 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

4603 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

4604 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

4605 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

4606 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

4607 
	#GL_MODELVIEW0_ARB
 0x1700

	)

4608 
	#GL_MODELVIEW1_ARB
 0x850A

	)

4609 
	#GL_MODELVIEW2_ARB
 0x8722

	)

4610 
	#GL_MODELVIEW3_ARB
 0x8723

	)

4611 
	#GL_MODELVIEW4_ARB
 0x8724

	)

4612 
	#GL_MODELVIEW5_ARB
 0x8725

	)

4613 
	#GL_MODELVIEW6_ARB
 0x8726

	)

4614 
	#GL_MODELVIEW7_ARB
 0x8727

	)

4615 
	#GL_MODELVIEW8_ARB
 0x8728

	)

4616 
	#GL_MODELVIEW9_ARB
 0x8729

	)

4617 
	#GL_MODELVIEW10_ARB
 0x872A

	)

4618 
	#GL_MODELVIEW11_ARB
 0x872B

	)

4619 
	#GL_MODELVIEW12_ARB
 0x872C

	)

4620 
	#GL_MODELVIEW13_ARB
 0x872D

	)

4621 
	#GL_MODELVIEW14_ARB
 0x872E

	)

4622 
	#GL_MODELVIEW15_ARB
 0x872F

	)

4623 
	#GL_MODELVIEW16_ARB
 0x8730

	)

4624 
	#GL_MODELVIEW17_ARB
 0x8731

	)

4625 
	#GL_MODELVIEW18_ARB
 0x8732

	)

4626 
	#GL_MODELVIEW19_ARB
 0x8733

	)

4627 
	#GL_MODELVIEW20_ARB
 0x8734

	)

4628 
	#GL_MODELVIEW21_ARB
 0x8735

	)

4629 
	#GL_MODELVIEW22_ARB
 0x8736

	)

4630 
	#GL_MODELVIEW23_ARB
 0x8737

	)

4631 
	#GL_MODELVIEW24_ARB
 0x8738

	)

4632 
	#GL_MODELVIEW25_ARB
 0x8739

	)

4633 
	#GL_MODELVIEW26_ARB
 0x873A

	)

4634 
	#GL_MODELVIEW27_ARB
 0x873B

	)

4635 
	#GL_MODELVIEW28_ARB
 0x873C

	)

4636 
	#GL_MODELVIEW29_ARB
 0x873D

	)

4637 
	#GL_MODELVIEW30_ARB
 0x873E

	)

4638 
	#GL_MODELVIEW31_ARB
 0x873F

	)

4639 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

4640 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

4641 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

4642 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

4643 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

4644 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

4645 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

4646 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

4647 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4648 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

4649 #ifde‡
GL_GLEXT_PROTOTYPES


4650 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
 
size
, c⁄° 
GLbyã
 *
weights
);

4651 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
 
size
, c⁄° 
GLsh‹t
 *
weights
);

4652 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
 
size
, c⁄° GLöà*
weights
);

4653 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
 
size
, c⁄° 
GLÊﬂt
 *
weights
);

4654 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
 
size
, c⁄° 
GLdoubÀ
 *
weights
);

4655 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
weights
);

4656 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
weights
);

4657 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
weights
);

4658 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4659 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
 
cou¡
);

4663 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


4664 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

4665 
±rdiff_t
 
	tGLsizeùåARB
;

4666 
±rdiff_t
 
	tGLöçåARB
;

4667 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

4668 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

4669 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

4670 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

4671 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

4672 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

4673 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

4674 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

4675 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

4676 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

4677 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

4678 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

4679 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

4680 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

4681 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

4682 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

4683 
	#GL_READ_ONLY_ARB
 0x88B8

	)

4684 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

4685 
	#GL_READ_WRITE_ARB
 0x88BA

	)

4686 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

4687 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

4688 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

4689 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

4690 
	#GL_STREAM_READ_ARB
 0x88E1

	)

4691 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

4692 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

4693 
	#GL_STATIC_READ_ARB
 0x88E5

	)

4694 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

4695 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

4696 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

4697 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

4698 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4699 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4700 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4701 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4702 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

4703 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
);

4704 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, *
	td©a
);

4705 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4706 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4707 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4708 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

4709 #ifde‡
GL_GLEXT_PROTOTYPES


4710 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

4711 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

4712 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

4713 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
 
buf„r
);

4714 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
 
èrgë
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

4715 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
);

4716 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, *
d©a
);

4717 
GLAPI
 *
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

4718 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
 
èrgë
);

4719 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

4720 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

4724 #i‚de‡
GL_ARB_vîãx_¥ogøm


4725 
	#GL_ARB_vîãx_¥ogøm
 1

	)

4726 
	#GL_COLOR_SUM_ARB
 0x8458

	)

4727 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

4728 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

4729 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

4730 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

4731 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

4732 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

4733 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

4734 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

4735 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

4736 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

4737 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

4738 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

4739 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

4740 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

4741 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

4742 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

4743 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4744 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

4745 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4746 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

4747 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4748 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4749 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4750 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4751 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4752 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4753 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4754 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4755 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4756 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4757 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4758 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4759 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4760 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4761 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4762 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4763 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

4764 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4765 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4766 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4767 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4768 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4769 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4770 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4771 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4772 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4773 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

4774 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4775 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4776 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4777 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4778 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4779 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4780 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4781 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4782 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4783 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4784 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

4785 #ifde‡
GL_GLEXT_PROTOTYPES


4786 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

4787 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4788 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

4789 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4790 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

4791 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4792 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4793 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4794 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

4795 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4796 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

4797 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4798 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4799 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4800 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4801 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4802 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4803 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4804 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4805 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4806 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4807 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

4808 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4809 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4810 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4811 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4812 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

4813 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4814 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

4815 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4816 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4817 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

4818 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4819 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4820 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4821 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4822 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4823 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4824 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4825 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

4826 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

4827 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

4828 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

4832 #i‚de‡
GL_ARB_vîãx_shadî


4833 
	#GL_ARB_vîãx_shadî
 1

	)

4834 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

4835 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

4836 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

4837 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

4838 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

4839 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

4840 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

4841 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4842 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4843 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4844 #ifde‡
GL_GLEXT_PROTOTYPES


4845 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, c⁄° 
GLch¨ARB
 *
«me
);

4846 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

4847 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

4851 #i‚de‡
GL_ARB_vîãx_ty≥_10f_11f_11f_ªv


4852 
	#GL_ARB_vîãx_ty≥_10f_11f_11f_ªv
 1

	)

4855 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


4856 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

4859 #i‚de‡
GL_ARB_võwp‹t_¨øy


4860 
	#GL_ARB_võwp‹t_¨øy
 1

	)

4863 #i‚de‡
GL_ARB_wödow_pos


4864 
	#GL_ARB_wödow_pos
 1

	)

4865 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4866 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4867 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4868 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4869 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

4870 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4871 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4872 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4873 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4874 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4875 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4876 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4877 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

4878 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4879 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4880 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4881 #ifde‡
GL_GLEXT_PROTOTYPES


4882 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4883 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4884 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

4885 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4886 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
 
x
, GLöà
y
);

4887 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *
v
);

4888 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
);

4889 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *
v
);

4890 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4891 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4892 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4893 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4894 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

4895 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *
v
);

4896 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4897 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *
v
);

4901 #i‚de‡
GL_KHR_bÀnd_equ©i⁄_adv™˚d


4902 
	#GL_KHR_bÀnd_equ©i⁄_adv™˚d
 1

	)

4903 
	#GL_MULTIPLY_KHR
 0x9294

	)

4904 
	#GL_SCREEN_KHR
 0x9295

	)

4905 
	#GL_OVERLAY_KHR
 0x9296

	)

4906 
	#GL_DARKEN_KHR
 0x9297

	)

4907 
	#GL_LIGHTEN_KHR
 0x9298

	)

4908 
	#GL_COLORDODGE_KHR
 0x9299

	)

4909 
	#GL_COLORBURN_KHR
 0x929A

	)

4910 
	#GL_HARDLIGHT_KHR
 0x929B

	)

4911 
	#GL_SOFTLIGHT_KHR
 0x929C

	)

4912 
	#GL_DIFFERENCE_KHR
 0x929E

	)

4913 
	#GL_EXCLUSION_KHR
 0x92A0

	)

4914 
	#GL_HSL_HUE_KHR
 0x92AD

	)

4915 
	#GL_HSL_SATURATION_KHR
 0x92AE

	)

4916 
	#GL_HSL_COLOR_KHR
 0x92AF

	)

4917 
	#GL_HSL_LUMINOSITY_KHR
 0x92B0

	)

4918 (
APIENTRYP
 
	tPFNGLBLENDBARRIERKHRPROC
) ();

4919 #ifde‡
GL_GLEXT_PROTOTYPES


4920 
GLAPI
 
APIENTRY
 
glBÀndB¨rõrKHR
 ();

4924 #i‚de‡
GL_KHR_bÀnd_equ©i⁄_adv™˚d_cohîít


4925 
	#GL_KHR_bÀnd_equ©i⁄_adv™˚d_cohîít
 1

	)

4926 
	#GL_BLEND_ADVANCED_COHERENT_KHR
 0x9285

	)

4929 #i‚de‡
GL_KHR_c⁄ãxt_Êush_c⁄åﬁ


4930 
	#GL_KHR_c⁄ãxt_Êush_c⁄åﬁ
 1

	)

4933 #i‚de‡
GL_KHR_debug


4934 
	#GL_KHR_debug
 1

	)

4937 #i‚de‡
GL_KHR_no_îr‹


4938 
	#GL_KHR_no_îr‹
 1

	)

4939 
	#GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
 0x00000008

	)

4942 #i‚de‡
GL_KHR_robu°_buf„r_ac˚ss_behavi‹


4943 
	#GL_KHR_robu°_buf„r_ac˚ss_behavi‹
 1

	)

4946 #i‚de‡
GL_KHR_robu°√ss


4947 
	#GL_KHR_robu°√ss
 1

	)

4948 
	#GL_CONTEXT_ROBUST_ACCESS
 0x90F3

	)

4951 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr


4952 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr
 1

	)

4953 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

4954 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

4955 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

4956 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

4957 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

4958 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

4959 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

4960 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

4961 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

4962 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

4963 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

4964 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

4965 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

4966 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

4967 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

4968 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

4969 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

4970 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

4971 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

4972 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

4973 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

4974 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

4975 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

4976 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

4977 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

4978 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

4979 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

4980 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

4983 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


4984 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

4987 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_¶i˚d_3d


4988 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_¶i˚d_3d
 1

	)

4991 #i‚de‡
GL_OES_byã_co‹dö©es


4992 
	#GL_OES_byã_co‹dö©es
 1

	)

4993 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
);

4994 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4995 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
);

4996 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4997 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

4998 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4999 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

5000 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

5001 (
APIENTRYP
 
	tPFNGLTEXCOORD1BOESPROC
Ë(
	tGLbyã
 
	ts
);

5002 (
APIENTRYP
 
	tPFNGLTEXCOORD1BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5003 (
APIENTRYP
 
	tPFNGLTEXCOORD2BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
);

5004 (
APIENTRYP
 
	tPFNGLTEXCOORD2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5005 (
APIENTRYP
 
	tPFNGLTEXCOORD3BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

5006 (
APIENTRYP
 
	tPFNGLTEXCOORD3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5007 (
APIENTRYP
 
	tPFNGLTEXCOORD4BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

5008 (
APIENTRYP
 
	tPFNGLTEXCOORD4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5009 (
APIENTRYP
 
	tPFNGLVERTEX2BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
);

5010 (
APIENTRYP
 
	tPFNGLVERTEX2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5011 (
APIENTRYP
 
	tPFNGLVERTEX3BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
);

5012 (
APIENTRYP
 
	tPFNGLVERTEX3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5013 (
APIENTRYP
 
	tPFNGLVERTEX4BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
, GLbyã 
	tw
);

5014 (
APIENTRYP
 
	tPFNGLVERTEX4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5015 #ifde‡
GL_GLEXT_PROTOTYPES


5016 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
);

5017 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5018 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
);

5019 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5020 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

5021 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5022 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

5023 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5024 
GLAPI
 
APIENTRY
 
glTexCo‹d1bOES
 (
GLbyã
 
s
);

5025 
GLAPI
 
APIENTRY
 
glTexCo‹d1bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5026 
GLAPI
 
APIENTRY
 
glTexCo‹d2bOES
 (
GLbyã
 
s
, GLbyã 
t
);

5027 
GLAPI
 
APIENTRY
 
glTexCo‹d2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5028 
GLAPI
 
APIENTRY
 
glTexCo‹d3bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

5029 
GLAPI
 
APIENTRY
 
glTexCo‹d3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5030 
GLAPI
 
APIENTRY
 
glTexCo‹d4bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

5031 
GLAPI
 
APIENTRY
 
glTexCo‹d4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5032 
GLAPI
 
APIENTRY
 
glVîãx2bOES
 (
GLbyã
 
x
, GLbyã 
y
);

5033 
GLAPI
 
APIENTRY
 
glVîãx2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5034 
GLAPI
 
APIENTRY
 
glVîãx3bOES
 (
GLbyã
 
x
, GLbyã 
y
, GLbyã 
z
);

5035 
GLAPI
 
APIENTRY
 
glVîãx3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5036 
GLAPI
 
APIENTRY
 
glVîãx4bOES
 (
GLbyã
 
x
, GLbyã 
y
, GLbyã 
z
, GLbyã 
w
);

5037 
GLAPI
 
APIENTRY
 
glVîãx4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5041 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


5042 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

5043 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

5044 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

5045 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

5046 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

5047 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

5048 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

5049 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

5050 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

5051 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

5052 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

5055 #i‚de‡
GL_OES_fixed_poöt


5056 
	#GL_OES_fixed_poöt
 1

	)

5057 
GLöt
 
	tGLfixed
;

5058 
	#GL_FIXED_OES
 0x140C

	)

5059 (
APIENTRYP
 
	tPFNGLALPHAFUNCXOESPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLfixed
 
	tªf
);

5060 (
APIENTRYP
 
	tPFNGLCLEARCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5061 (
APIENTRYP
 
	tPFNGLCLEARDEPTHXOESPROC
Ë(
	tGLfixed
 
	tdïth
);

5062 (
APIENTRYP
 
	tPFNGLCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLfixed
 *
	tequ©i⁄
);

5063 (
APIENTRYP
 
	tPFNGLCOLOR4XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5064 (
APIENTRYP
 
	tPFNGLDEPTHRANGEXOESPROC
Ë(
	tGLfixed
 
	tn
, GLfixed 
	tf
);

5065 (
APIENTRYP
 
	tPFNGLFOGXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5066 (
APIENTRYP
 
	tPFNGLFOGXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5067 (
APIENTRYP
 
	tPFNGLFRUSTUMXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

5068 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLfixed
 *
	tequ©i⁄
);

5069 (
APIENTRYP
 
	tPFNGLGETFIXEDVOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5070 (
APIENTRYP
 
	tPFNGLGETTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5071 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5072 (
APIENTRYP
 
	tPFNGLLIGHTMODELXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5073 (
APIENTRYP
 
	tPFNGLLIGHTMODELXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5074 (
APIENTRYP
 
	tPFNGLLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5075 (
APIENTRYP
 
	tPFNGLLIGHTXVOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5076 (
APIENTRYP
 
	tPFNGLLINEWIDTHXOESPROC
Ë(
	tGLfixed
 
	twidth
);

5077 (
APIENTRYP
 
	tPFNGLLOADMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5078 (
APIENTRYP
 
	tPFNGLMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5079 (
APIENTRYP
 
	tPFNGLMATERIALXVOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5080 (
APIENTRYP
 
	tPFNGLMULTMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5081 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

5082 (
APIENTRYP
 
	tPFNGLNORMAL3XOESPROC
Ë(
	tGLfixed
 
	tnx
, GLfixed 
	tny
, GLfixed 
	tnz
);

5083 (
APIENTRYP
 
	tPFNGLORTHOXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

5084 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5085 (
APIENTRYP
 
	tPFNGLPOINTSIZEXOESPROC
Ë(
	tGLfixed
 
	tsize
);

5086 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETXOESPROC
Ë(
	tGLfixed
 
	tÁ˘‹
, GLfixed 
	tunôs
);

5087 (
APIENTRYP
 
	tPFNGLROTATEXOESPROC
Ë(
	tGLfixed
 
	t™gÀ
, GLfixed 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5088 (
APIENTRYP
 
	tPFNGLSCALEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5089 (
APIENTRYP
 
	tPFNGLTEXENVXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5090 (
APIENTRYP
 
	tPFNGLTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5091 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5092 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5093 (
APIENTRYP
 
	tPFNGLTRANSLATEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5094 (
APIENTRYP
 
	tPFNGLACCUMXOESPROC
Ë(
	tGLíum
 
	t›
, 
	tGLfixed
 
	tvÆue
);

5095 (
APIENTRYP
 
	tPFNGLBITMAPXOESPROC
Ë(
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLfixed
 
	tx‹ig
, GLfixed 
	ty‹ig
, GLfixed 
	txmove
, GLfixed 
	tymove
, c⁄° 
	tGLubyã
 *
	tbôm≠
);

5096 (
APIENTRYP
 
	tPFNGLBLENDCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5097 (
APIENTRYP
 
	tPFNGLCLEARACCUMXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5098 (
APIENTRYP
 
	tPFNGLCOLOR3XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
);

5099 (
APIENTRYP
 
	tPFNGLCOLOR3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

5100 (
APIENTRYP
 
	tPFNGLCOLOR4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

5101 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5102 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5103 (
APIENTRYP
 
	tPFNGLEVALCOORD1XOESPROC
Ë(
	tGLfixed
 
	tu
);

5104 (
APIENTRYP
 
	tPFNGLEVALCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5105 (
APIENTRYP
 
	tPFNGLEVALCOORD2XOESPROC
Ë(
	tGLfixed
 
	tu
, GLfixed 
	tv
);

5106 (
APIENTRYP
 
	tPFNGLEVALCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5107 (
APIENTRYP
 
	tPFNGLFEEDBACKBUFFERXOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLfixed
 *
	tbuf„r
);

5108 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5109 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5110 (
APIENTRYP
 
	tPFNGLGETLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5111 (
APIENTRYP
 
	tPFNGLGETMAPXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLfixed
 *
	tv
);

5112 (
APIENTRYP
 
	tPFNGLGETMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5113 (
APIENTRYP
 
	tPFNGLGETPIXELMAPXVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, 
	tGLfixed
 *
	tvÆues
);

5114 (
APIENTRYP
 
	tPFNGLGETTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5115 (
APIENTRYP
 
	tPFNGLGETTEXLEVELPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5116 (
APIENTRYP
 
	tPFNGLINDEXXOESPROC
Ë(
	tGLfixed
 
	tcomp⁄ít
);

5117 (
APIENTRYP
 
	tPFNGLINDEXXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄ít
);

5118 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5119 (
APIENTRYP
 
	tPFNGLMAP1XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, GLfixed 
	tpoöts
);

5120 (
APIENTRYP
 
	tPFNGLMAP2XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLfixed 
	tv1
, GLfixed 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLfixed 
	tpoöts
);

5121 (
APIENTRYP
 
	tPFNGLMAPGRID1XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
);

5122 (
APIENTRYP
 
	tPFNGLMAPGRID2XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, GLfixed 
	tv1
, GLfixed 
	tv2
);

5123 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5124 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
);

5125 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5126 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
);

5127 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5128 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

5129 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5130 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5131 (
APIENTRYP
 
	tPFNGLNORMAL3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5132 (
APIENTRYP
 
	tPFNGLPASSTHROUGHXOESPROC
Ë(
	tGLfixed
 
	ttokí
);

5133 (
APIENTRYP
 
	tPFNGLPIXELMAPXPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, c⁄° 
	tGLfixed
 *
	tvÆues
);

5134 (
APIENTRYP
 
	tPFNGLPIXELSTOREXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5135 (
APIENTRYP
 
	tPFNGLPIXELTRANSFERXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5136 (
APIENTRYP
 
	tPFNGLPIXELZOOMXOESPROC
Ë(
	tGLfixed
 
	txÁ˘‹
, GLfixed 
	tyÁ˘‹
);

5137 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESXOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGLfixed
 *
	t¥i‹ôõs
);

5138 (
APIENTRYP
 
	tPFNGLRASTERPOS2XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

5139 (
APIENTRYP
 
	tPFNGLRASTERPOS2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5140 (
APIENTRYP
 
	tPFNGLRASTERPOS3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5141 (
APIENTRYP
 
	tPFNGLRASTERPOS3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5142 (
APIENTRYP
 
	tPFNGLRASTERPOS4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
, GLfixed 
	tw
);

5143 (
APIENTRYP
 
	tPFNGLRASTERPOS4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5144 (
APIENTRYP
 
	tPFNGLRECTXOESPROC
Ë(
	tGLfixed
 
	tx1
, GLfixed 
	ty1
, GLfixed 
	tx2
, GLfixed 
	ty2
);

5145 (
APIENTRYP
 
	tPFNGLRECTXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tv1
, c⁄° GLfixed *
	tv2
);

5146 (
APIENTRYP
 
	tPFNGLTEXCOORD1XOESPROC
Ë(
	tGLfixed
 
	ts
);

5147 (
APIENTRYP
 
	tPFNGLTEXCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5148 (
APIENTRYP
 
	tPFNGLTEXCOORD2XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
);

5149 (
APIENTRYP
 
	tPFNGLTEXCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5150 (
APIENTRYP
 
	tPFNGLTEXCOORD3XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

5151 (
APIENTRYP
 
	tPFNGLTEXCOORD3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5152 (
APIENTRYP
 
	tPFNGLTEXCOORD4XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

5153 (
APIENTRYP
 
	tPFNGLTEXCOORD4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5154 (
APIENTRYP
 
	tPFNGLTEXGENXOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5155 (
APIENTRYP
 
	tPFNGLTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5156 (
APIENTRYP
 
	tPFNGLVERTEX2XOESPROC
Ë(
	tGLfixed
 
	tx
);

5157 (
APIENTRYP
 
	tPFNGLVERTEX2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5158 (
APIENTRYP
 
	tPFNGLVERTEX3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

5159 (
APIENTRYP
 
	tPFNGLVERTEX3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5160 (
APIENTRYP
 
	tPFNGLVERTEX4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5161 (
APIENTRYP
 
	tPFNGLVERTEX4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5162 #ifde‡
GL_GLEXT_PROTOTYPES


5163 
GLAPI
 
APIENTRY
 
glAÕhaFuncxOES
 (
GLíum
 
func
, 
GLfixed
 
ªf
);

5164 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5165 
GLAPI
 
APIENTRY
 
glCÀ¨DïthxOES
 (
GLfixed
 
dïth
);

5166 
GLAPI
 
APIENTRY
 
glClùPœ√xOES
 (
GLíum
 
∂™e
, c⁄° 
GLfixed
 *
equ©i⁄
);

5167 
GLAPI
 
APIENTRY
 
glCﬁ‹4xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5168 
GLAPI
 
APIENTRY
 
glDïthR™gexOES
 (
GLfixed
 
n
, GLfixed 
f
);

5169 
GLAPI
 
APIENTRY
 
glFogxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5170 
GLAPI
 
APIENTRY
 
glFogxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5171 
GLAPI
 
APIENTRY
 
glFru°umxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

5172 
GLAPI
 
APIENTRY
 
glGëClùPœ√xOES
 (
GLíum
 
∂™e
, 
GLfixed
 *
equ©i⁄
);

5173 
GLAPI
 
APIENTRY
 
glGëFixedvOES
 (
GLíum
 
≤ame
, 
GLfixed
 *
∑øms
);

5174 
GLAPI
 
APIENTRY
 
glGëTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5175 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5176 
GLAPI
 
APIENTRY
 
glLightModñxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5177 
GLAPI
 
APIENTRY
 
glLightModñxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5178 
GLAPI
 
APIENTRY
 
glLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5179 
GLAPI
 
APIENTRY
 
glLightxvOES
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5180 
GLAPI
 
APIENTRY
 
glLöeWidthxOES
 (
GLfixed
 
width
);

5181 
GLAPI
 
APIENTRY
 
glLﬂdM©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5182 
GLAPI
 
APIENTRY
 
glM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5183 
GLAPI
 
APIENTRY
 
glM©îülxvOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5184 
GLAPI
 
APIENTRY
 
glMu…M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5185 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

5186 
GLAPI
 
APIENTRY
 
glN‹mÆ3xOES
 (
GLfixed
 
nx
, GLfixed 
ny
, GLfixed 
nz
);

5187 
GLAPI
 
APIENTRY
 
glOπhoxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

5188 
GLAPI
 
APIENTRY
 
glPoötP¨amëîxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5189 
GLAPI
 
APIENTRY
 
glPoötSizexOES
 (
GLfixed
 
size
);

5190 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£txOES
 (
GLfixed
 
Á˘‹
, GLfixed 
unôs
);

5191 
GLAPI
 
APIENTRY
 
glRŸ©exOES
 (
GLfixed
 
™gÀ
, GLfixed 
x
, GLfixed 
y
, GLfixed 
z
);

5192 
GLAPI
 
APIENTRY
 
glSˇÀxOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5193 
GLAPI
 
APIENTRY
 
glTexEnvxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5194 
GLAPI
 
APIENTRY
 
glTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5195 
GLAPI
 
APIENTRY
 
glTexP¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5196 
GLAPI
 
APIENTRY
 
glTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5197 
GLAPI
 
APIENTRY
 
glTøn¶©exOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5198 
GLAPI
 
APIENTRY
 
glAccumxOES
 (
GLíum
 
›
, 
GLfixed
 
vÆue
);

5199 
GLAPI
 
APIENTRY
 
glBôm≠xOES
 (
GLsizei
 
width
, GLsizeò
height
, 
GLfixed
 
x‹ig
, GLfixed 
y‹ig
, GLfixed 
xmove
, GLfixed 
ymove
, c⁄° 
GLubyã
 *
bôm≠
);

5200 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5201 
GLAPI
 
APIENTRY
 
glCÀ¨AccumxOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5202 
GLAPI
 
APIENTRY
 
glCﬁ‹3xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
);

5203 
GLAPI
 
APIENTRY
 
glCﬁ‹3xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

5204 
GLAPI
 
APIENTRY
 
glCﬁ‹4xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

5205 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5206 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5207 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xOES
 (
GLfixed
 
u
);

5208 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5209 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xOES
 (
GLfixed
 
u
, GLfixed 
v
);

5210 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5211 
GLAPI
 
APIENTRY
 
glFìdbackBuf„rxOES
 (
GLsizei
 
n
, 
GLíum
 
ty≥
, c⁄° 
GLfixed
 *
buf„r
);

5212 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5213 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5214 
GLAPI
 
APIENTRY
 
glGëLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5215 
GLAPI
 
APIENTRY
 
glGëM≠xvOES
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLfixed
 *
v
);

5216 
GLAPI
 
APIENTRY
 
glGëM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5217 
GLAPI
 
APIENTRY
 
glGëPixñM≠xv
 (
GLíum
 
m≠
, 
GLöt
 
size
, 
GLfixed
 *
vÆues
);

5218 
GLAPI
 
APIENTRY
 
glGëTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5219 
GLAPI
 
APIENTRY
 
glGëTexLevñP¨amëîxvOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5220 
GLAPI
 
APIENTRY
 
glIndexxOES
 (
GLfixed
 
comp⁄ít
);

5221 
GLAPI
 
APIENTRY
 
glIndexxvOES
 (c⁄° 
GLfixed
 *
comp⁄ít
);

5222 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5223 
GLAPI
 
APIENTRY
 
glM≠1xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, GLfixed 
poöts
);

5224 
GLAPI
 
APIENTRY
 
glM≠2xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLfixed 
v1
, GLfixed 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLfixed 
poöts
);

5225 
GLAPI
 
APIENTRY
 
glM≠Grid1xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
);

5226 
GLAPI
 
APIENTRY
 
glM≠Grid2xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
, GLfixed 
v1
, GLfixed 
v2
);

5227 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5228 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
);

5229 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5230 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
);

5231 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5232 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

5233 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5234 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5235 
GLAPI
 
APIENTRY
 
glN‹mÆ3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5236 
GLAPI
 
APIENTRY
 
glPassThroughxOES
 (
GLfixed
 
tokí
);

5237 
GLAPI
 
APIENTRY
 
glPixñM≠x
 (
GLíum
 
m≠
, 
GLöt
 
size
, c⁄° 
GLfixed
 *
vÆues
);

5238 
GLAPI
 
APIENTRY
 
glPixñSt‹ex
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5239 
GLAPI
 
APIENTRY
 
glPixñTøns„rxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5240 
GLAPI
 
APIENTRY
 
glPixñZoomxOES
 (
GLfixed
 
xÁ˘‹
, GLfixed 
yÁ˘‹
);

5241 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsxOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GLfixed
 *
¥i‹ôõs
);

5242 
GLAPI
 
APIENTRY
 
glRa°îPos2xOES
 (
GLfixed
 
x
, GLfixed 
y
);

5243 
GLAPI
 
APIENTRY
 
glRa°îPos2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5244 
GLAPI
 
APIENTRY
 
glRa°îPos3xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5245 
GLAPI
 
APIENTRY
 
glRa°îPos3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5246 
GLAPI
 
APIENTRY
 
glRa°îPos4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
, GLfixed 
w
);

5247 
GLAPI
 
APIENTRY
 
glRa°îPos4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5248 
GLAPI
 
APIENTRY
 
glRe˘xOES
 (
GLfixed
 
x1
, GLfixed 
y1
, GLfixed 
x2
, GLfixed 
y2
);

5249 
GLAPI
 
APIENTRY
 
glRe˘xvOES
 (c⁄° 
GLfixed
 *
v1
, c⁄° GLfixed *
v2
);

5250 
GLAPI
 
APIENTRY
 
glTexCo‹d1xOES
 (
GLfixed
 
s
);

5251 
GLAPI
 
APIENTRY
 
glTexCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5252 
GLAPI
 
APIENTRY
 
glTexCo‹d2xOES
 (
GLfixed
 
s
, GLfixed 
t
);

5253 
GLAPI
 
APIENTRY
 
glTexCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5254 
GLAPI
 
APIENTRY
 
glTexCo‹d3xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

5255 
GLAPI
 
APIENTRY
 
glTexCo‹d3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5256 
GLAPI
 
APIENTRY
 
glTexCo‹d4xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

5257 
GLAPI
 
APIENTRY
 
glTexCo‹d4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5258 
GLAPI
 
APIENTRY
 
glTexGíxOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5259 
GLAPI
 
APIENTRY
 
glTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5260 
GLAPI
 
APIENTRY
 
glVîãx2xOES
 (
GLfixed
 
x
);

5261 
GLAPI
 
APIENTRY
 
glVîãx2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5262 
GLAPI
 
APIENTRY
 
glVîãx3xOES
 (
GLfixed
 
x
, GLfixed 
y
);

5263 
GLAPI
 
APIENTRY
 
glVîãx3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5264 
GLAPI
 
APIENTRY
 
glVîãx4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5265 
GLAPI
 
APIENTRY
 
glVîãx4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5269 #i‚de‡
GL_OES_quîy_m©rix


5270 
	#GL_OES_quîy_m©rix
 1

	)

5271 
GLbôfõld
 (
	tAPIENTRYP
 
	tPFNGLQUERYMATRIXXOESPROC
Ë(
	tGLfixed
 *
	tm™tisß
, 
	tGLöt
 *
	texp⁄ít
);

5272 #ifde‡
GL_GLEXT_PROTOTYPES


5273 
GLAPI
 
GLbôfõld
 
APIENTRY
 
glQuîyM©rixxOES
 (
GLfixed
 *
m™tisß
, 
GLöt
 *
exp⁄ít
);

5277 #i‚de‡
GL_OES_ªad_f‹m©


5278 
	#GL_OES_ªad_f‹m©
 1

	)

5279 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

5280 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

5283 #i‚de‡
GL_OES_sögÀ_¥ecisi⁄


5284 
	#GL_OES_sögÀ_¥ecisi⁄
 1

	)

5285 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFOESPROC
Ë(
	tGL˛ampf
 
	tdïth
);

5286 (
APIENTRYP
 
	tPFNGLCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLÊﬂt
 *
	tequ©i⁄
);

5287 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFOESPROC
Ë(
	tGL˛ampf
 
	tn
, GL˛amp‡
	tf
);

5288 (
APIENTRYP
 
	tPFNGLFRUSTUMFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

5289 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLÊﬂt
 *
	tequ©i⁄
);

5290 (
APIENTRYP
 
	tPFNGLORTHOFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

5291 #ifde‡
GL_GLEXT_PROTOTYPES


5292 
GLAPI
 
APIENTRY
 
glCÀ¨DïthfOES
 (
GL˛ampf
 
dïth
);

5293 
GLAPI
 
APIENTRY
 
glClùPœ√fOES
 (
GLíum
 
∂™e
, c⁄° 
GLÊﬂt
 *
equ©i⁄
);

5294 
GLAPI
 
APIENTRY
 
glDïthR™gefOES
 (
GL˛ampf
 
n
, GL˛amp‡
f
);

5295 
GLAPI
 
APIENTRY
 
glFru°umfOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

5296 
GLAPI
 
APIENTRY
 
glGëClùPœ√fOES
 (
GLíum
 
∂™e
, 
GLÊﬂt
 *
equ©i⁄
);

5297 
GLAPI
 
APIENTRY
 
glOπhofOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

5301 #i‚de‡
GL_3DFX_mu…ißm∂e


5302 
	#GL_3DFX_mu…ißm∂e
 1

	)

5303 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

5304 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

5305 
	#GL_SAMPLES_3DFX
 0x86B4

	)

5306 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

5309 #i‚de‡
GL_3DFX_tbuf„r


5310 
	#GL_3DFX_tbuf„r
 1

	)

5311 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

5312 #ifde‡
GL_GLEXT_PROTOTYPES


5313 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
 
mask
);

5317 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


5318 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

5319 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

5320 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

5323 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


5324 
	#GL_AMD_bÀnd_mömax_Á˘‹
 1

	)

5325 
	#GL_FACTOR_MIN_AMD
 0x901C

	)

5326 
	#GL_FACTOR_MAX_AMD
 0x901D

	)

5329 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


5330 
	#GL_AMD_c⁄£rv©ive_dïth
 1

	)

5333 #i‚de‡
GL_AMD_debug_ouçut


5334 
	#GL_AMD_debug_ouçut
 1

	)

5335 (
APIENTRY
 *
	tGLDEBUGPROCAMD
)(
	tGLuöt
 
	tid
,
	tGLíum
 
	tˇãg‹y
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,*
	tu£rP¨am
);

5336 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
 0x9143

	)

5337 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
 0x9144

	)

5338 
	#GL_DEBUG_LOGGED_MESSAGES_AMD
 0x9145

	)

5339 
	#GL_DEBUG_SEVERITY_HIGH_AMD
 0x9146

	)

5340 
	#GL_DEBUG_SEVERITY_MEDIUM_AMD
 0x9147

	)

5341 
	#GL_DEBUG_SEVERITY_LOW_AMD
 0x9148

	)

5342 
	#GL_DEBUG_CATEGORY_API_ERROR_AMD
 0x9149

	)

5343 
	#GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
 0x914A

	)

5344 
	#GL_DEBUG_CATEGORY_DEPRECATION_AMD
 0x914B

	)

5345 
	#GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
 0x914C

	)

5346 
	#GL_DEBUG_CATEGORY_PERFORMANCE_AMD
 0x914D

	)

5347 
	#GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
 0x914E

	)

5348 
	#GL_DEBUG_CATEGORY_APPLICATION_AMD
 0x914F

	)

5349 
	#GL_DEBUG_CATEGORY_OTHER_AMD
 0x9150

	)

5350 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEENABLEAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

5351 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

5352 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKAMDPROC
Ë(
	tGLDEBUGPROCAMD
 
	tˇŒback
, *
	tu£rP¨am
);

5353 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGAMDPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tˇãg‹õs
, GLuöà*
	t£vîôõs
, GLuöà*
	tids
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßge
);

5354 #ifde‡
GL_GLEXT_PROTOTYPES


5355 
GLAPI
 
APIENTRY
 
glDebugMesßgeE«bÀAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

5356 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

5357 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackAMD
 (
GLDEBUGPROCAMD
 
ˇŒback
, *
u£rP¨am
);

5358 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogAMD
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
ˇãg‹õs
, GLuöà*
£vîôõs
, GLuöà*
ids
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßge
);

5362 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


5363 
	#GL_AMD_dïth_˛amp_£∑øã
 1

	)

5364 
	#GL_DEPTH_CLAMP_NEAR_AMD
 0x901E

	)

5365 
	#GL_DEPTH_CLAMP_FAR_AMD
 0x901F

	)

5368 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


5369 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

5370 (
APIENTRYP
 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

5371 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

5372 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

5373 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

5374 #ifde‡
GL_GLEXT_PROTOTYPES


5375 
GLAPI
 
APIENTRY
 
glBÀndFuncIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

5376 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

5377 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄IndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

5378 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

5382 #i‚de‡
GL_AMD_g˙_shadî


5383 
	#GL_AMD_g˙_shadî
 1

	)

5386 #i‚de‡
GL_AMD_gpu_shadî_öt64


5387 
	#GL_AMD_gpu_shadî_öt64
 1

	)

5388 
öt64_t
 
	tGLöt64EXT
;

5389 
	#GL_INT64_NV
 0x140E

	)

5390 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

5391 
	#GL_INT8_NV
 0x8FE0

	)

5392 
	#GL_INT8_VEC2_NV
 0x8FE1

	)

5393 
	#GL_INT8_VEC3_NV
 0x8FE2

	)

5394 
	#GL_INT8_VEC4_NV
 0x8FE3

	)

5395 
	#GL_INT16_NV
 0x8FE4

	)

5396 
	#GL_INT16_VEC2_NV
 0x8FE5

	)

5397 
	#GL_INT16_VEC3_NV
 0x8FE6

	)

5398 
	#GL_INT16_VEC4_NV
 0x8FE7

	)

5399 
	#GL_INT64_VEC2_NV
 0x8FE9

	)

5400 
	#GL_INT64_VEC3_NV
 0x8FEA

	)

5401 
	#GL_INT64_VEC4_NV
 0x8FEB

	)

5402 
	#GL_UNSIGNED_INT8_NV
 0x8FEC

	)

5403 
	#GL_UNSIGNED_INT8_VEC2_NV
 0x8FED

	)

5404 
	#GL_UNSIGNED_INT8_VEC3_NV
 0x8FEE

	)

5405 
	#GL_UNSIGNED_INT8_VEC4_NV
 0x8FEF

	)

5406 
	#GL_UNSIGNED_INT16_NV
 0x8FF0

	)

5407 
	#GL_UNSIGNED_INT16_VEC2_NV
 0x8FF1

	)

5408 
	#GL_UNSIGNED_INT16_VEC3_NV
 0x8FF2

	)

5409 
	#GL_UNSIGNED_INT16_VEC4_NV
 0x8FF3

	)

5410 
	#GL_UNSIGNED_INT64_VEC2_NV
 0x8FF5

	)

5411 
	#GL_UNSIGNED_INT64_VEC3_NV
 0x8FF6

	)

5412 
	#GL_UNSIGNED_INT64_VEC4_NV
 0x8FF7

	)

5413 
	#GL_FLOAT16_NV
 0x8FF8

	)

5414 
	#GL_FLOAT16_VEC2_NV
 0x8FF9

	)

5415 
	#GL_FLOAT16_VEC3_NV
 0x8FFA

	)

5416 
	#GL_FLOAT16_VEC4_NV
 0x8FFB

	)

5417 (
APIENTRYP
 
	tPFNGLUNIFORM1I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

5418 (
APIENTRYP
 
	tPFNGLUNIFORM2I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

5419 (
APIENTRYP
 
	tPFNGLUNIFORM3I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

5420 (
APIENTRYP
 
	tPFNGLUNIFORM4I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

5421 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5422 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5423 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5424 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5425 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

5426 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

5427 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

5428 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

5429 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5430 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5431 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5432 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5433 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 *
	t∑øms
);

5434 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 *
	t∑øms
);

5435 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

5436 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

5437 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

5438 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

5439 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5440 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5441 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5442 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5443 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

5444 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

5445 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

5446 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

5447 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5448 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5449 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5450 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5451 #ifde‡
GL_GLEXT_PROTOTYPES


5452 
GLAPI
 
APIENTRY
 
glUnif‹m1i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

5453 
GLAPI
 
APIENTRY
 
glUnif‹m2i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

5454 
GLAPI
 
APIENTRY
 
glUnif‹m3i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

5455 
GLAPI
 
APIENTRY
 
glUnif‹m4i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

5456 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5457 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5458 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5459 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5460 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

5461 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

5462 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

5463 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

5464 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5465 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5466 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5467 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5468 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 *
∑øms
);

5469 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 *
∑øms
);

5470 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

5471 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

5472 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

5473 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

5474 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5475 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5476 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5477 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5478 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

5479 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

5480 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

5481 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

5482 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5483 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5484 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5485 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5489 #i‚de‡
GL_AMD_öãæóved_ñemíts


5490 
	#GL_AMD_öãæóved_ñemíts
 1

	)

5491 
	#GL_VERTEX_ELEMENT_SWIZZLE_AMD
 0x91A4

	)

5492 
	#GL_VERTEX_ID_SWIZZLE_AMD
 0x91A5

	)

5493 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPARAMETERIAMDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5494 #ifde‡
GL_GLEXT_PROTOTYPES


5495 
GLAPI
 
APIENTRY
 
glVîãxAâribP¨amëîiAMD
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5499 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


5500 
	#GL_AMD_mu…i_døw_ödúe˘
 1

	)

5501 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

5502 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

5503 #ifde‡
GL_GLEXT_PROTOTYPES


5504 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘AMD
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

5505 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘AMD
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

5509 #i‚de‡
GL_AMD_«me_gí_dñëe


5510 
	#GL_AMD_«me_gí_dñëe
 1

	)

5511 
	#GL_DATA_BUFFER_AMD
 0x9151

	)

5512 
	#GL_PERFORMANCE_MONITOR_AMD
 0x9152

	)

5513 
	#GL_QUERY_OBJECT_AMD
 0x9153

	)

5514 
	#GL_VERTEX_ARRAY_OBJECT_AMD
 0x9154

	)

5515 
	#GL_SAMPLER_OBJECT_AMD
 0x9155

	)

5516 (
APIENTRYP
 
	tPFNGLGENNAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, GLuöà*
	t«mes
);

5517 (
APIENTRYP
 
	tPFNGLDELETENAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, c⁄° GLuöà*
	t«mes
);

5518 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
);

5519 #ifde‡
GL_GLEXT_PROTOTYPES


5520 
GLAPI
 
APIENTRY
 
glGíNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, GLuöà*
«mes
);

5521 
GLAPI
 
APIENTRY
 
glDñëeNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, c⁄° GLuöà*
«mes
);

5522 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNameAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
);

5526 #i‚de‡
GL_AMD_oc˛usi⁄_quîy_evít


5527 
	#GL_AMD_oc˛usi⁄_quîy_evít
 1

	)

5528 
	#GL_OCCLUSION_QUERY_EVENT_MASK_AMD
 0x874F

	)

5529 
	#GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
 0x00000001

	)

5530 
	#GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
 0x00000002

	)

5531 
	#GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
 0x00000004

	)

5532 
	#GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
 0x00000008

	)

5533 
	#GL_QUERY_ALL_EVENT_BITS_AMD
 0xFFFFFFFF

	)

5534 (
APIENTRYP
 
	tPFNGLQUERYOBJECTPARAMETERUIAMDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, GLíum 
	t≤ame
, GLuöà
	t∑øm
);

5535 #ifde‡
GL_GLEXT_PROTOTYPES


5536 
GLAPI
 
APIENTRY
 
glQuîyObje˘P¨amëîuiAMD
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, GLíum 
≤ame
, GLuöà
∑øm
);

5540 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


5541 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

5542 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

5543 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

5544 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

5545 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

5546 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

5547 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

5548 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

5549 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

5550 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

5551 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

5552 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

5553 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, *
	td©a
);

5554 (
APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

5555 (
APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

5556 (
APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îLi°
);

5557 (
APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

5558 (
APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

5559 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

5560 #ifde‡
GL_GLEXT_PROTOTYPES


5561 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

5562 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

5563 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

5564 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

5565 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, *
d©a
);

5566 
GLAPI
 
APIENTRY
 
glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

5567 
GLAPI
 
APIENTRY
 
glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

5568 
GLAPI
 
APIENTRY
 
glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îLi°
);

5569 
GLAPI
 
APIENTRY
 
glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

5570 
GLAPI
 
APIENTRY
 
glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

5571 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

5575 #i‚de‡
GL_AMD_pö√d_mem‹y


5576 
	#GL_AMD_pö√d_mem‹y
 1

	)

5577 
	#GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
 0x9160

	)

5580 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


5581 
	#GL_AMD_quîy_buf„r_obje˘
 1

	)

5582 
	#GL_QUERY_BUFFER_AMD
 0x9192

	)

5583 
	#GL_QUERY_BUFFER_BINDING_AMD
 0x9193

	)

5584 
	#GL_QUERY_RESULT_NO_WAIT_AMD
 0x9194

	)

5587 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


5588 
	#GL_AMD_ßm∂e_posôi⁄s
 1

	)

5589 
	#GL_SUBSAMPLE_DISTANCE_AMD
 0x883F

	)

5590 (
APIENTRYP
 
	tPFNGLSETMULTISAMPLEFVAMDPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tvÆ
);

5591 #ifde‡
GL_GLEXT_PROTOTYPES


5592 
GLAPI
 
APIENTRY
 
glSëMu…ißm∂efvAMD
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
vÆ
);

5596 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


5597 
	#GL_AMD_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

5600 #i‚de‡
GL_AMD_shadî_©omic_cou¡î_›s


5601 
	#GL_AMD_shadî_©omic_cou¡î_›s
 1

	)

5604 #i‚de‡
GL_AMD_shadî_ex∂icô_vîãx_∑ømëî


5605 
	#GL_AMD_shadî_ex∂icô_vîãx_∑ømëî
 1

	)

5608 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


5609 
	#GL_AMD_shadî_°ícû_exp‹t
 1

	)

5612 #i‚de‡
GL_AMD_shadî_åö¨y_mömax


5613 
	#GL_AMD_shadî_åö¨y_mömax
 1

	)

5616 #i‚de‡
GL_AMD_•¨£_ãxtuª


5617 
	#GL_AMD_•¨£_ãxtuª
 1

	)

5618 
	#GL_VIRTUAL_PAGE_SIZE_X_AMD
 0x9195

	)

5619 
	#GL_VIRTUAL_PAGE_SIZE_Y_AMD
 0x9196

	)

5620 
	#GL_VIRTUAL_PAGE_SIZE_Z_AMD
 0x9197

	)

5621 
	#GL_MAX_SPARSE_TEXTURE_SIZE_AMD
 0x9198

	)

5622 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
 0x9199

	)

5623 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
 0x919A

	)

5624 
	#GL_MIN_SPARSE_LEVEL_AMD
 0x919B

	)

5625 
	#GL_MIN_LOD_WARNING_AMD
 0x919C

	)

5626 
	#GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
 0x00000001

	)

5627 (
APIENTRYP
 
	tPFNGLTEXSTORAGESPARSEAMDPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

5628 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGESPARSEAMDPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

5629 #ifde‡
GL_GLEXT_PROTOTYPES


5630 
GLAPI
 
APIENTRY
 
glTexSt‹ageS∑r£AMD
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

5631 
GLAPI
 
APIENTRY
 
glTextuªSt‹ageS∑r£AMD
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

5635 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


5636 
	#GL_AMD_°ícû_›î©i⁄_exãnded
 1

	)

5637 
	#GL_SET_AMD
 0x874A

	)

5638 
	#GL_REPLACE_VALUE_AMD
 0x874B

	)

5639 
	#GL_STENCIL_OP_VALUE_AMD
 0x874C

	)

5640 
	#GL_STENCIL_BACK_OP_VALUE_AMD
 0x874D

	)

5641 (
APIENTRYP
 
	tPFNGLSTENCILOPVALUEAMDPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tvÆue
);

5642 #ifde‡
GL_GLEXT_PROTOTYPES


5643 
GLAPI
 
APIENTRY
 
glSãncûOpVÆueAMD
 (
GLíum
 
Á˚
, 
GLuöt
 
vÆue
);

5647 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


5648 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

5651 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


5652 
	#GL_AMD_å™sf‹m_„edback3_löes_åüngÀs
 1

	)

5655 #i‚de‡
GL_AMD_å™sf‹m_„edback4


5656 
	#GL_AMD_å™sf‹m_„edback4
 1

	)

5657 
	#GL_STREAM_RASTERIZATION_AMD
 0x91A0

	)

5660 #i‚de‡
GL_AMD_vîãx_shadî_œyî


5661 
	#GL_AMD_vîãx_shadî_œyî
 1

	)

5664 #i‚de‡
GL_AMD_vîãx_shadî_ãs£Œ©‹


5665 
	#GL_AMD_vîãx_shadî_ãs£Œ©‹
 1

	)

5666 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

5667 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

5668 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

5669 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

5670 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

5671 
	#GL_DISCRETE_AMD
 0x9006

	)

5672 
	#GL_CONTINUOUS_AMD
 0x9007

	)

5673 (
APIENTRYP
 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

5674 (
APIENTRYP
 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

5675 #ifde‡
GL_GLEXT_PROTOTYPES


5676 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄Fa˘‹AMD
 (
GLÊﬂt
 
Á˘‹
);

5677 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄ModeAMD
 (
GLíum
 
mode
);

5681 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


5682 
	#GL_AMD_vîãx_shadî_võwp‹t_ödex
 1

	)

5685 #i‚de‡
GL_APPLE_aux_dïth_°ícû


5686 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

5687 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

5690 #i‚de‡
GL_APPLE_˛õ¡_°‹age


5691 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

5692 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

5695 #i‚de‡
GL_APPLE_ñemít_¨øy


5696 
	#GL_APPLE_ñemít_¨øy
 1

	)

5697 
	#GL_ELEMENT_ARRAY_APPLE
 0x8A0C

	)

5698 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8A0D

	)

5699 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x8A0E

	)

5700 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5701 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5702 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5703 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5704 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5705 #ifde‡
GL_GLEXT_PROTOTYPES


5706 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5707 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5708 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5709 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5710 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5714 #i‚de‡
GL_APPLE_„n˚


5715 
	#GL_APPLE_„n˚
 1

	)

5716 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

5717 
	#GL_FENCE_APPLE
 0x8A0B

	)

5718 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

5719 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

5720 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5721 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5722 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5723 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5724 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

5725 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

5726 #ifde‡
GL_GLEXT_PROTOTYPES


5727 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

5728 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

5729 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
 
„n˚
);

5730 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
 
„n˚
);

5731 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
 
„n˚
);

5732 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
 
„n˚
);

5733 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
 
obje˘
, 
GLuöt
 
«me
);

5734 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
 
obje˘
, 
GLöt
 
«me
);

5738 #i‚de‡
GL_APPLE_Êﬂt_pixñs


5739 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

5740 
	#GL_HALF_APPLE
 0x140B

	)

5741 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

5742 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

5743 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

5744 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

5745 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

5746 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

5747 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

5748 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

5749 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

5750 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

5751 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

5752 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

5753 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

5756 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


5757 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

5758 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

5759 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

5760 (
APIENTRYP
 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5761 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

5762 #ifde‡
GL_GLEXT_PROTOTYPES


5763 
GLAPI
 
APIENTRY
 
glBuf„rP¨amëîiAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

5764 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™geAPPLE
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

5768 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


5769 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

5770 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

5771 
	#GL_RELEASED_APPLE
 0x8A19

	)

5772 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

5773 
	#GL_RETAINED_APPLE
 0x8A1B

	)

5774 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

5775 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

5776 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5777 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5778 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5779 #ifde‡
GL_GLEXT_PROTOTYPES


5780 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘PurgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5781 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘U≈urgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5782 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivAPPLE
 (
GLíum
 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

5786 #i‚de‡
GL_APPLE_rgb_422


5787 
	#GL_APPLE_rgb_422
 1

	)

5788 
	#GL_RGB_422_APPLE
 0x8A1F

	)

5789 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

5790 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

5791 
	#GL_RGB_RAW_422_APPLE
 0x8A51

	)

5794 #i‚de‡
GL_APPLE_row_byãs


5795 
	#GL_APPLE_row_byãs
 1

	)

5796 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

5797 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

5800 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


5801 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

5802 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

5805 #i‚de‡
GL_APPLE_ãxtuª_ønge


5806 
	#GL_APPLE_ãxtuª_ønge
 1

	)

5807 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

5808 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

5809 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

5810 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

5811 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

5812 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

5813 (
APIENTRYP
 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

5814 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

5815 #ifde‡
GL_GLEXT_PROTOTYPES


5816 
GLAPI
 
APIENTRY
 
glTextuªR™geAPPLE
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

5817 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîPoöãrvAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

5821 #i‚de‡
GL_APPLE_å™sf‹m_höt


5822 
	#GL_APPLE_å™sf‹m_höt
 1

	)

5823 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

5826 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


5827 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

5828 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

5829 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5830 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

5831 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

5832 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5833 #ifde‡
GL_GLEXT_PROTOTYPES


5834 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5835 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

5836 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

5837 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5841 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


5842 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

5843 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

5844 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

5845 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

5846 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

5847 
	#GL_STORAGE_CLIENT_APPLE
 0x85B4

	)

5848 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5849 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5850 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5851 #ifde‡
GL_GLEXT_PROTOTYPES


5852 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5853 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5854 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5858 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


5859 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

5860 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

5861 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

5862 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

5863 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

5864 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

5865 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

5866 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

5867 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

5868 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

5869 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

5870 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5871 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5872 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5873 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5874 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5875 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5876 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5877 #ifde‡
GL_GLEXT_PROTOTYPES


5878 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5879 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5880 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAâribE«bÀdAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5881 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLdoubÀ *
poöts
);

5882 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLÊﬂà*
poöts
);

5883 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLdoubÀ *
poöts
);

5884 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLÊﬂà*
poöts
);

5888 #i‚de‡
GL_APPLE_ycb¸_422


5889 
	#GL_APPLE_ycb¸_422
 1

	)

5890 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

5893 #i‚de‡
GL_ATI_døw_buf„rs


5894 
	#GL_ATI_døw_buf„rs
 1

	)

5895 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

5896 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

5897 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

5898 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

5899 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

5900 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

5901 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

5902 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

5903 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

5904 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

5905 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

5906 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

5907 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

5908 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

5909 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

5910 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

5911 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

5912 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

5913 #ifde‡
GL_GLEXT_PROTOTYPES


5914 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

5918 #i‚de‡
GL_ATI_ñemít_¨øy


5919 
	#GL_ATI_ñemít_¨øy
 1

	)

5920 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

5921 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

5922 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

5923 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5924 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

5925 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

5926 #ifde‡
GL_GLEXT_PROTOTYPES


5927 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5928 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
);

5929 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
);

5933 #i‚de‡
GL_ATI_ívm≠_bumpm≠


5934 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

5935 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

5936 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

5937 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

5938 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

5939 
	#GL_DUDV_ATI
 0x8779

	)

5940 
	#GL_DU8DV8_ATI
 0x877A

	)

5941 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

5942 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

5943 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

5944 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

5945 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

5946 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

5947 #ifde‡
GL_GLEXT_PROTOTYPES


5948 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

5949 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

5950 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

5951 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øm
);

5955 #i‚de‡
GL_ATI_‰agmít_shadî


5956 
	#GL_ATI_‰agmít_shadî
 1

	)

5957 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

5958 
	#GL_REG_0_ATI
 0x8921

	)

5959 
	#GL_REG_1_ATI
 0x8922

	)

5960 
	#GL_REG_2_ATI
 0x8923

	)

5961 
	#GL_REG_3_ATI
 0x8924

	)

5962 
	#GL_REG_4_ATI
 0x8925

	)

5963 
	#GL_REG_5_ATI
 0x8926

	)

5964 
	#GL_REG_6_ATI
 0x8927

	)

5965 
	#GL_REG_7_ATI
 0x8928

	)

5966 
	#GL_REG_8_ATI
 0x8929

	)

5967 
	#GL_REG_9_ATI
 0x892A

	)

5968 
	#GL_REG_10_ATI
 0x892B

	)

5969 
	#GL_REG_11_ATI
 0x892C

	)

5970 
	#GL_REG_12_ATI
 0x892D

	)

5971 
	#GL_REG_13_ATI
 0x892E

	)

5972 
	#GL_REG_14_ATI
 0x892F

	)

5973 
	#GL_REG_15_ATI
 0x8930

	)

5974 
	#GL_REG_16_ATI
 0x8931

	)

5975 
	#GL_REG_17_ATI
 0x8932

	)

5976 
	#GL_REG_18_ATI
 0x8933

	)

5977 
	#GL_REG_19_ATI
 0x8934

	)

5978 
	#GL_REG_20_ATI
 0x8935

	)

5979 
	#GL_REG_21_ATI
 0x8936

	)

5980 
	#GL_REG_22_ATI
 0x8937

	)

5981 
	#GL_REG_23_ATI
 0x8938

	)

5982 
	#GL_REG_24_ATI
 0x8939

	)

5983 
	#GL_REG_25_ATI
 0x893A

	)

5984 
	#GL_REG_26_ATI
 0x893B

	)

5985 
	#GL_REG_27_ATI
 0x893C

	)

5986 
	#GL_REG_28_ATI
 0x893D

	)

5987 
	#GL_REG_29_ATI
 0x893E

	)

5988 
	#GL_REG_30_ATI
 0x893F

	)

5989 
	#GL_REG_31_ATI
 0x8940

	)

5990 
	#GL_CON_0_ATI
 0x8941

	)

5991 
	#GL_CON_1_ATI
 0x8942

	)

5992 
	#GL_CON_2_ATI
 0x8943

	)

5993 
	#GL_CON_3_ATI
 0x8944

	)

5994 
	#GL_CON_4_ATI
 0x8945

	)

5995 
	#GL_CON_5_ATI
 0x8946

	)

5996 
	#GL_CON_6_ATI
 0x8947

	)

5997 
	#GL_CON_7_ATI
 0x8948

	)

5998 
	#GL_CON_8_ATI
 0x8949

	)

5999 
	#GL_CON_9_ATI
 0x894A

	)

6000 
	#GL_CON_10_ATI
 0x894B

	)

6001 
	#GL_CON_11_ATI
 0x894C

	)

6002 
	#GL_CON_12_ATI
 0x894D

	)

6003 
	#GL_CON_13_ATI
 0x894E

	)

6004 
	#GL_CON_14_ATI
 0x894F

	)

6005 
	#GL_CON_15_ATI
 0x8950

	)

6006 
	#GL_CON_16_ATI
 0x8951

	)

6007 
	#GL_CON_17_ATI
 0x8952

	)

6008 
	#GL_CON_18_ATI
 0x8953

	)

6009 
	#GL_CON_19_ATI
 0x8954

	)

6010 
	#GL_CON_20_ATI
 0x8955

	)

6011 
	#GL_CON_21_ATI
 0x8956

	)

6012 
	#GL_CON_22_ATI
 0x8957

	)

6013 
	#GL_CON_23_ATI
 0x8958

	)

6014 
	#GL_CON_24_ATI
 0x8959

	)

6015 
	#GL_CON_25_ATI
 0x895A

	)

6016 
	#GL_CON_26_ATI
 0x895B

	)

6017 
	#GL_CON_27_ATI
 0x895C

	)

6018 
	#GL_CON_28_ATI
 0x895D

	)

6019 
	#GL_CON_29_ATI
 0x895E

	)

6020 
	#GL_CON_30_ATI
 0x895F

	)

6021 
	#GL_CON_31_ATI
 0x8960

	)

6022 
	#GL_MOV_ATI
 0x8961

	)

6023 
	#GL_ADD_ATI
 0x8963

	)

6024 
	#GL_MUL_ATI
 0x8964

	)

6025 
	#GL_SUB_ATI
 0x8965

	)

6026 
	#GL_DOT3_ATI
 0x8966

	)

6027 
	#GL_DOT4_ATI
 0x8967

	)

6028 
	#GL_MAD_ATI
 0x8968

	)

6029 
	#GL_LERP_ATI
 0x8969

	)

6030 
	#GL_CND_ATI
 0x896A

	)

6031 
	#GL_CND0_ATI
 0x896B

	)

6032 
	#GL_DOT2_ADD_ATI
 0x896C

	)

6033 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

6034 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

6035 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

6036 
	#GL_NUM_PASSES_ATI
 0x8970

	)

6037 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

6038 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

6039 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

6040 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

6041 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

6042 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

6043 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

6044 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

6045 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

6046 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

6047 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

6048 
	#GL_RED_BIT_ATI
 0x00000001

	)

6049 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

6050 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

6051 
	#GL_2X_BIT_ATI
 0x00000001

	)

6052 
	#GL_4X_BIT_ATI
 0x00000002

	)

6053 
	#GL_8X_BIT_ATI
 0x00000004

	)

6054 
	#GL_HALF_BIT_ATI
 0x00000008

	)

6055 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

6056 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

6057 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

6058 
	#GL_COMP_BIT_ATI
 0x00000002

	)

6059 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

6060 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

6061 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

6062 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

6063 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

6064 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

6065 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

6066 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

6067 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

6068 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

6069 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

6070 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

6071 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

6072 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

6073 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

6074 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6075 #ifde‡
GL_GLEXT_PROTOTYPES


6076 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuöà
ønge
);

6077 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
 
id
);

6078 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
 
id
);

6079 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

6080 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

6081 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
 
d°
, GLuöà
co‹d
, 
GLíum
 
swizzÀ
);

6082 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
 
d°
, GLuöà
öãΩ
, 
GLíum
 
swizzÀ
);

6083 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

6084 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

6085 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

6086 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

6087 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

6088 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

6089 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
 
d°
, c⁄° 
GLÊﬂt
 *
vÆue
);

6093 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


6094 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

6095 *(
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6096 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6097 #ifde‡
GL_GLEXT_PROTOTYPES


6098 
GLAPI
 *
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6099 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6103 #i‚de‡
GL_ATI_memöfo


6104 
	#GL_ATI_memöfo
 1

	)

6105 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

6106 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

6107 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

6110 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


6111 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

6112 
	#GL_RGBA_FLOAT_MODE_ATI
 0x8820

	)

6113 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

6116 #i‚de‡
GL_ATI_≤_åüngÀs


6117 
	#GL_ATI_≤_åüngÀs
 1

	)

6118 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

6119 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

6120 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

6121 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

6122 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

6123 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

6124 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

6125 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

6126 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

6127 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6128 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6129 #ifde‡
GL_GLEXT_PROTOTYPES


6130 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6131 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6135 #i‚de‡
GL_ATI_£∑øã_°ícû


6136 
	#GL_ATI_£∑øã_°ícû
 1

	)

6137 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

6138 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

6139 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

6140 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

6141 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

6142 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

6143 #ifde‡
GL_GLEXT_PROTOTYPES


6144 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

6145 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
 
‰⁄tfunc
, GLíum 
backfunc
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

6149 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


6150 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

6151 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

6154 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


6155 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

6156 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

6157 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

6158 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

6161 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


6162 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

6163 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

6164 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

6165 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

6166 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

6167 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

6168 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

6169 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

6170 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

6171 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

6172 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

6173 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

6174 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

6177 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


6178 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

6179 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

6180 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

6183 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


6184 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

6185 
	#GL_STATIC_ATI
 0x8760

	)

6186 
	#GL_DYNAMIC_ATI
 0x8761

	)

6187 
	#GL_PRESERVE_ATI
 0x8762

	)

6188 
	#GL_DISCARD_ATI
 0x8763

	)

6189 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

6190 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

6191 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

6192 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

6193 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	tußge
);

6194 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6195 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

6196 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6197 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6198 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6199 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

6200 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6201 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6202 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6203 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6204 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6205 #ifde‡
GL_GLEXT_PROTOTYPES


6206 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
ußge
);

6207 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6208 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
 
buf„r
, GLuöà
off£t
, 
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
¥e£rve
);

6209 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6210 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6211 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6212 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
 
¨øy
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLuöt
 
buf„r
, GLuöà
off£t
);

6213 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6214 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6215 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

6216 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6217 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6221 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


6222 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

6223 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6224 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6225 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6226 #ifde‡
GL_GLEXT_PROTOTYPES


6227 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

6228 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6229 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6233 #i‚de‡
GL_ATI_vîãx_°ªams


6234 
	#GL_ATI_vîãx_°ªams
 1

	)

6235 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

6236 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

6237 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

6238 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

6239 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

6240 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

6241 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

6242 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

6243 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

6244 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

6245 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

6246 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6247 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

6248 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6249 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

6250 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6251 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

6252 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6253 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6254 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6255 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

6256 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6257 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6258 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6259 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6260 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6261 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6262 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6263 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6264 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6265 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6266 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6267 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6268 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6269 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6270 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6271 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6272 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6273 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6274 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6275 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6276 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6277 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

6278 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

6279 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

6280 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6281 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

6282 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6283 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

6284 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6285 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

6286 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6287 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

6288 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6289 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6290 #ifde‡
GL_GLEXT_PROTOTYPES


6291 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
);

6292 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6293 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
);

6294 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6295 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
);

6296 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6297 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
);

6298 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6299 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
);

6300 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6301 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
);

6302 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6303 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

6304 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6305 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6306 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6307 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

6308 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6309 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

6310 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6311 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6312 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6313 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6314 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6315 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

6316 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6317 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

6318 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6319 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

6320 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6321 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

6322 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6323 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
 
°ªam
, 
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
);

6324 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
 
°ªam
, c⁄° 
GLbyã
 *
co‹ds
);

6325 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
);

6326 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6327 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
nx
, GLöà
ny
, GLöà
nz
);

6328 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6329 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

6330 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6331 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
);

6332 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6333 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
 
°ªam
);

6334 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6335 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6339 #i‚de‡
GL_EXT_422_pixñs


6340 
	#GL_EXT_422_pixñs
 1

	)

6341 
	#GL_422_EXT
 0x80CC

	)

6342 
	#GL_422_REV_EXT
 0x80CD

	)

6343 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

6344 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

6347 #i‚de‡
GL_EXT_abgr


6348 
	#GL_EXT_abgr
 1

	)

6349 
	#GL_ABGR_EXT
 0x8000

	)

6352 #i‚de‡
GL_EXT_bgø


6353 
	#GL_EXT_bgø
 1

	)

6354 
	#GL_BGR_EXT
 0x80E0

	)

6355 
	#GL_BGRA_EXT
 0x80E1

	)

6358 #i‚de‡
GL_EXT_bödabÀ_unif‹m


6359 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

6360 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

6361 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

6362 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

6363 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

6364 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

6365 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

6366 (
APIENTRYP
 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

6367 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

6368 
GLöçå
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

6369 #ifde‡
GL_GLEXT_PROTOTYPES


6370 
GLAPI
 
APIENTRY
 
glUnif‹mBuf„rEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
buf„r
);

6371 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mBuf„rSizeEXT
 (
GLuöt
 
¥ogøm
, GLöà
loˇti⁄
);

6372 
GLAPI
 
GLöçå
 
APIENTRY
 
glGëUnif‹mOff£tEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
);

6376 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


6377 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

6378 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

6379 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

6380 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

6381 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

6382 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

6383 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

6384 #ifde‡
GL_GLEXT_PROTOTYPES


6385 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

6389 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


6390 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

6391 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

6392 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

6393 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6394 #ifde‡
GL_GLEXT_PROTOTYPES


6395 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

6399 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


6400 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

6401 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

6402 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

6403 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

6404 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

6405 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

6406 #ifde‡
GL_GLEXT_PROTOTYPES


6407 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

6411 #i‚de‡
GL_EXT_bÀnd_logic_›


6412 
	#GL_EXT_bÀnd_logic_›
 1

	)

6415 #i‚de‡
GL_EXT_bÀnd_mömax


6416 
	#GL_EXT_bÀnd_mömax
 1

	)

6417 
	#GL_MIN_EXT
 0x8007

	)

6418 
	#GL_MAX_EXT
 0x8008

	)

6419 
	#GL_FUNC_ADD_EXT
 0x8006

	)

6420 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

6421 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

6422 #ifde‡
GL_GLEXT_PROTOTYPES


6423 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
 
mode
);

6427 #i‚de‡
GL_EXT_bÀnd_subåa˘


6428 
	#GL_EXT_bÀnd_subåa˘
 1

	)

6429 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

6430 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

6433 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


6434 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

6435 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

6438 #i‚de‡
GL_EXT_cmyka


6439 
	#GL_EXT_cmyka
 1

	)

6440 
	#GL_CMYK_EXT
 0x800C

	)

6441 
	#GL_CMYKA_EXT
 0x800D

	)

6442 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

6443 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

6446 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


6447 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

6448 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6449 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

6450 #ifde‡
GL_GLEXT_PROTOTYPES


6451 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

6452 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

6456 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


6457 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

6458 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

6459 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

6460 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6461 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

6462 #ifde‡
GL_GLEXT_PROTOTYPES


6463 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

6464 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

6468 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


6469 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

6470 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

6471 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

6472 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

6473 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

6474 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

6475 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

6476 
	#GL_REDUCE_EXT
 0x8016

	)

6477 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

6478 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

6479 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

6480 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

6481 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

6482 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

6483 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

6484 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

6485 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

6486 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

6487 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

6488 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

6489 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

6490 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

6491 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

6492 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

6493 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6494 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

6495 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6496 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6497 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6498 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

6499 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6500 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6501 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

6502 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

6503 #ifde‡
GL_GLEXT_PROTOTYPES


6504 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

6505 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

6506 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

6507 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6508 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

6509 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6510 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

6511 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6512 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

6513 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6514 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6515 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

6516 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

6520 #i‚de‡
GL_EXT_co‹dö©e_‰ame


6521 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

6522 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

6523 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

6524 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

6525 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

6526 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

6527 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

6528 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

6529 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

6530 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

6531 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

6532 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

6533 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

6534 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

6535 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

6536 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

6537 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6538 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

6539 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6540 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

6541 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6542 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

6543 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6544 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

6545 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6546 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

6547 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6548 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

6549 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6550 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

6551 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6552 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

6553 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6554 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

6555 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6556 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6557 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6558 #ifde‡
GL_GLEXT_PROTOTYPES


6559 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
 
tx
, GLbyã 
ty
, GLbyã 
tz
);

6560 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *
v
);

6561 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
 
tx
, GLdoubÀ 
ty
, GLdoubÀ 
tz
);

6562 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

6563 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
 
tx
, GLÊﬂà
ty
, GLÊﬂà
tz
);

6564 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

6565 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
 
tx
, GLöà
ty
, GLöà
tz
);

6566 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *
v
);

6567 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
 
tx
, GLsh‹à
ty
, GLsh‹à
tz
);

6568 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

6569 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
 
bx
, GLbyã 
by
, GLbyã 
bz
);

6570 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *
v
);

6571 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
 
bx
, GLdoubÀ 
by
, GLdoubÀ 
bz
);

6572 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

6573 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
 
bx
, GLÊﬂà
by
, GLÊﬂà
bz
);

6574 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

6575 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
 
bx
, GLöà
by
, GLöà
bz
);

6576 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *
v
);

6577 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
 
bx
, GLsh‹à
by
, GLsh‹à
bz
);

6578 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

6579 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6580 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6584 #i‚de‡
GL_EXT_c›y_ãxtuª


6585 
	#GL_EXT_c›y_ãxtuª
 1

	)

6586 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6587 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6588 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6589 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6590 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6591 #ifde‡
GL_GLEXT_PROTOTYPES


6592 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6593 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6594 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6595 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6596 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6600 #i‚de‡
GL_EXT_cuŒ_vîãx


6601 
	#GL_EXT_cuŒ_vîãx
 1

	)

6602 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

6603 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

6604 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

6605 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6606 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6607 #ifde‡
GL_GLEXT_PROTOTYPES


6608 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6609 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6613 #i‚de‡
GL_EXT_debug_œbñ


6614 
	#GL_EXT_debug_œbñ
 1

	)

6615 
	#GL_PROGRAM_PIPELINE_OBJECT_EXT
 0x8A4F

	)

6616 
	#GL_PROGRAM_OBJECT_EXT
 0x8B40

	)

6617 
	#GL_SHADER_OBJECT_EXT
 0x8B48

	)

6618 
	#GL_BUFFER_OBJECT_EXT
 0x9151

	)

6619 
	#GL_QUERY_OBJECT_EXT
 0x9153

	)

6620 
	#GL_VERTEX_ARRAY_OBJECT_EXT
 0x9154

	)

6621 (
APIENTRYP
 
	tPFNGLLABELOBJECTEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

6622 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

6623 #ifde‡
GL_GLEXT_PROTOTYPES


6624 
GLAPI
 
APIENTRY
 
glLabñObje˘EXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

6625 
GLAPI
 
APIENTRY
 
glGëObje˘LabñEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

6629 #i‚de‡
GL_EXT_debug_m¨kî


6630 
	#GL_EXT_debug_m¨kî
 1

	)

6631 (
APIENTRYP
 
	tPFNGLINSERTEVENTMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

6632 (
APIENTRYP
 
	tPFNGLPUSHGROUPMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

6633 (
APIENTRYP
 
	tPFNGLPOPGROUPMARKEREXTPROC
) ();

6634 #ifde‡
GL_GLEXT_PROTOTYPES


6635 
GLAPI
 
APIENTRY
 
glIn£πEvítM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

6636 
GLAPI
 
APIENTRY
 
glPushGroupM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

6637 
GLAPI
 
APIENTRY
 
glP›GroupM¨kîEXT
 ();

6641 #i‚de‡
GL_EXT_dïth_bounds_ã°


6642 
	#GL_EXT_dïth_bounds_ã°
 1

	)

6643 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

6644 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

6645 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

6646 #ifde‡
GL_GLEXT_PROTOTYPES


6647 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
 
zmö
, GL˛ampd 
zmax
);

6651 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


6652 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

6653 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

6654 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

6655 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

6656 (
APIENTRYP
 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6657 (
APIENTRYP
 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6658 (
APIENTRYP
 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6659 (
APIENTRYP
 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6660 (
APIENTRYP
 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tmode
);

6661 (
APIENTRYP
 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6662 (
APIENTRYP
 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6663 (
APIENTRYP
 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6664 (
APIENTRYP
 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6665 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6666 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6667 (
APIENTRYP
 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

6668 (
APIENTRYP
 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

6669 (
APIENTRYP
 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tmode
);

6670 (
APIENTRYP
 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tmode
);

6671 (
APIENTRYP
 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

6672 (
APIENTRYP
 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

6673 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6674 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6675 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6676 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6677 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6678 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6679 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6680 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6681 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6682 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6683 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6684 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6685 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

6686 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6687 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6688 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6689 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

6690 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6691 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6692 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6693 (
APIENTRYP
 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

6694 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6695 (
APIENTRYP
 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6696 (
APIENTRYP
 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6697 (
APIENTRYP
 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6698 (
APIENTRYP
 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6699 (
APIENTRYP
 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

6700 (
APIENTRYP
 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6701 (
APIENTRYP
 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6702 (
APIENTRYP
 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6703 (
APIENTRYP
 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6704 (
APIENTRYP
 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6705 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6706 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6707 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6708 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6709 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6710 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6711 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6712 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6713 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6714 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6715 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6716 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6717 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6718 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6719 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6720 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6721 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6722 (
APIENTRYP
 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

6723 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6724 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6725 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6726 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

6727 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6728 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6729 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6730 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6731 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6732 (
APIENTRYP
 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

6733 (
APIENTRYP
 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

6734 (
APIENTRYP
 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, **
	td©a
);

6735 (
APIENTRYP
 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6736 (
APIENTRYP
 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6737 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6738 (
APIENTRYP
 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

6739 (
APIENTRYP
 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

6740 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6741 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6742 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6743 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6744 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6745 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6746 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6747 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6748 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6749 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6750 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6751 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6752 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6753 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6754 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6755 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6756 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6757 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6758 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLíum
 
	tußge
);

6759 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

6760 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

6761 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6762 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6763 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, **
	t∑øms
);

6764 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

6765 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

6766 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

6767 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

6768 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

6769 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

6770 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

6771 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

6772 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

6773 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6774 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6775 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6776 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6777 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6778 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6779 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6780 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6781 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6782 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6783 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6784 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6785 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6786 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6787 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6788 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6789 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6790 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

6791 (
APIENTRYP
 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

6792 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6793 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

6794 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6795 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöà*
	t∑øms
);

6796 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6797 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

6798 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6799 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

6800 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

6801 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

6802 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

6803 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

6804 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6805 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6806 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6807 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6808 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6809 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6810 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

6811 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

6812 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

6813 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöà*
	t∑øms
);

6814 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

6815 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øms
);

6816 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà*
	t∑øms
);

6817 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6818 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6819 (
APIENTRYP
 
	tPFNGLGETFLOATI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6820 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6821 (
APIENTRYP
 
	tPFNGLGETPOINTERI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, **
	t∑øms
);

6822 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

6823 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6824 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6825 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6826 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6827 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6828 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6829 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6830 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

6831 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6832 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6833 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6834 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6835 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

6836 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6837 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6838 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

6839 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

6840 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6841 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

6842 (
APIENTRYP
 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

6843 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6844 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6845 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6846 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6847 (
APIENTRYP
 
	tPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

6848 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6849 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

6850 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

6851 (
APIENTRYP
 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

6852 (
APIENTRYP
 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

6853 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6854 (
APIENTRYP
 
	tPFNGLVERTEXARRAYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6855 (
APIENTRYP
 
	tPFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6856 (
APIENTRYP
 
	tPFNGLVERTEXARRAYINDEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6857 (
APIENTRYP
 
	tPFNGLVERTEXARRAYNORMALOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6858 (
APIENTRYP
 
	tPFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6859 (
APIENTRYP
 
	tPFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6860 (
APIENTRYP
 
	tPFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6861 (
APIENTRYP
 
	tPFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6862 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6863 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6864 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6865 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6866 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6867 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6868 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6869 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6870 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6871 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6872 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

6873 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

6874 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

6875 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6876 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizeùå
 
	toff£t
, GLsizeùå 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6877 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6878 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6879 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

6880 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6881 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6882 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6883 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6884 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6885 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6886 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6887 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6888 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6889 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6890 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6891 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6892 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6893 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6894 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6895 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6896 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6897 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

6898 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6899 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

6900 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6901 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6902 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

6903 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

6904 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6905 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6906 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

6907 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

6908 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6909 (
APIENTRYP
 
	tPFNGLTEXTUREPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tcommô
);

6910 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, GLuöà
	tdivis‹
);

6911 #ifde‡
GL_GLEXT_PROTOTYPES


6912 
GLAPI
 
APIENTRY
 
glM©rixLﬂdfEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6913 
GLAPI
 
APIENTRY
 
glM©rixLﬂddEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6914 
GLAPI
 
APIENTRY
 
glM©rixMu…fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6915 
GLAPI
 
APIENTRY
 
glM©rixMu…dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6916 
GLAPI
 
APIENTRY
 
glM©rixLﬂdIdítôyEXT
 (
GLíum
 
mode
);

6917 
GLAPI
 
APIENTRY
 
glM©rixRŸ©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6918 
GLAPI
 
APIENTRY
 
glM©rixRŸ©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
™gÀ
, GLdoubÀ 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6919 
GLAPI
 
APIENTRY
 
glM©rixSˇÀfEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6920 
GLAPI
 
APIENTRY
 
glM©rixSˇÀdEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6921 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6922 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6923 
GLAPI
 
APIENTRY
 
glM©rixFru°umEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6924 
GLAPI
 
APIENTRY
 
glM©rixOπhoEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6925 
GLAPI
 
APIENTRY
 
glM©rixP›EXT
 (
GLíum
 
mode
);

6926 
GLAPI
 
APIENTRY
 
glM©rixPushEXT
 (
GLíum
 
mode
);

6927 
GLAPI
 
APIENTRY
 
glClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6928 
GLAPI
 
APIENTRY
 
glPushClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6929 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6930 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6931 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6932 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6933 
GLAPI
 
APIENTRY
 
glTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6934 
GLAPI
 
APIENTRY
 
glTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6935 
GLAPI
 
APIENTRY
 
glTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6936 
GLAPI
 
APIENTRY
 
glTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6937 
GLAPI
 
APIENTRY
 
glC›yTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6938 
GLAPI
 
APIENTRY
 
glC›yTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6939 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6940 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6941 
GLAPI
 
APIENTRY
 
glGëTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6942 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6943 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6944 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6945 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6946 
GLAPI
 
APIENTRY
 
glTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6947 
GLAPI
 
APIENTRY
 
glTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6948 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6949 
GLAPI
 
APIENTRY
 
glBödMu…iTextuªEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ãxtuª
);

6950 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dPoöãrEXT
 (
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6951 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6952 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6953 
GLAPI
 
APIENTRY
 
glMu…iTexEnviEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6954 
GLAPI
 
APIENTRY
 
glMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6955 
GLAPI
 
APIENTRY
 
glMu…iTexGídEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
);

6956 
GLAPI
 
APIENTRY
 
glMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

6957 
GLAPI
 
APIENTRY
 
glMu…iTexGífEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6958 
GLAPI
 
APIENTRY
 
glMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6959 
GLAPI
 
APIENTRY
 
glMu…iTexGíiEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6960 
GLAPI
 
APIENTRY
 
glMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6961 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6962 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6963 
GLAPI
 
APIENTRY
 
glGëMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6964 
GLAPI
 
APIENTRY
 
glGëMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6965 
GLAPI
 
APIENTRY
 
glGëMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6966 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîiEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6967 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6968 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6969 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6970 
GLAPI
 
APIENTRY
 
glMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6971 
GLAPI
 
APIENTRY
 
glMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6972 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6973 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6974 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6975 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6976 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6977 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6978 
GLAPI
 
APIENTRY
 
glGëMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6979 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6980 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6981 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6982 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6983 
GLAPI
 
APIENTRY
 
glMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6984 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6985 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6986 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6987 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6988 
GLAPI
 
APIENTRY
 
glGëFlﬂtIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

6989 
GLAPI
 
APIENTRY
 
glGëDoubÀIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

6990 
GLAPI
 
APIENTRY
 
glGëPoöãrIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, **
d©a
);

6991 
GLAPI
 
APIENTRY
 
glE«bÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6992 
GLAPI
 
APIENTRY
 
glDißbÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6993 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6994 
GLAPI
 
APIENTRY
 
glGëI¡egîIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

6995 
GLAPI
 
APIENTRY
 
glGëBoﬁónIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

6996 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6997 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6998 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6999 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7000 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7001 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7002 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
lod
, *
img
);

7003 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

7004 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

7005 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

7006 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7007 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7008 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7009 
GLAPI
 
APIENTRY
 
glGëCom¥es£dMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
lod
, *
img
);

7010 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

7011 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

7012 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

7013 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

7014 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLíum
 
ußge
);

7015 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

7016 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

7017 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
);

7018 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîivEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7019 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrvEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, **
∑øms
);

7020 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

7021 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

7022 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

7023 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

7024 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

7025 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

7026 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

7027 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

7028 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

7029 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7030 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7031 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7032 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7033 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7034 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7035 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7036 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7037 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7038 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7039 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7040 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7041 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7042 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7043 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7044 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7045 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7046 
GLAPI
 
APIENTRY
 
glTextuªBuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
);

7047 
GLAPI
 
APIENTRY
 
glMu…iTexBuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

7048 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7049 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° GLuöà*
∑øms
);

7050 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7051 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, GLuöà*
∑øms
);

7052 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7053 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

7054 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7055 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

7056 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

7057 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

7058 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

7059 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

7060 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7061 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7062 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7063 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7064 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîs4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7065 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4iEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

7066 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLöt
 *
∑øms
);

7067 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

7068 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

7069 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° GLuöà*
∑øms
);

7070 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

7071 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 *
∑øms
);

7072 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIuivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà*
∑øms
);

7073 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

7074 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

7075 
GLAPI
 
APIENTRY
 
glGëFlﬂti_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

7076 
GLAPI
 
APIENTRY
 
glGëDoubÀi_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

7077 
GLAPI
 
APIENTRY
 
glGëPoöãri_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, **
∑øms
);

7078 
GLAPI
 
APIENTRY
 
glNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

7079 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7080 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

7081 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7082 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

7083 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîdvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 *
∑øms
);

7084 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîfvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 *
∑øms
);

7085 
GLAPI
 
APIENTRY
 
glGëNamedProgømivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7086 
GLAPI
 
APIENTRY
 
glGëNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

7087 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

7088 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîivEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7089 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7090 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7091 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètusEXT
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

7092 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª1DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7093 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª2DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7094 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª3DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

7095 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

7096 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7097 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠EXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
);

7098 
GLAPI
 
APIENTRY
 
glGíî©eMu…iTexMùm≠EXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
);

7099 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

7100 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rsEXT
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

7101 
GLAPI
 
APIENTRY
 
glFømebuf„rRódBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

7102 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7103 
GLAPI
 
APIENTRY
 
glNamedC›yBuf„rSubD©aEXT
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

7104 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7105 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayîEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

7106 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªFa˚EXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

7107 
GLAPI
 
APIENTRY
 
glTextuªRídîbuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
ªndîbuf„r
);

7108 
GLAPI
 
APIENTRY
 
glMu…iTexRídîbuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

7109 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7110 
GLAPI
 
APIENTRY
 
glVîãxAºayCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7111 
GLAPI
 
APIENTRY
 
glVîãxAºayEdgeFœgOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7112 
GLAPI
 
APIENTRY
 
glVîãxAºayIndexOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7113 
GLAPI
 
APIENTRY
 
glVîãxAºayN‹mÆOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7114 
GLAPI
 
APIENTRY
 
glVîãxAºayTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7115 
GLAPI
 
APIENTRY
 
glVîãxAºayMu…iTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7116 
GLAPI
 
APIENTRY
 
glVîãxAºayFogCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7117 
GLAPI
 
APIENTRY
 
glVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7118 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7119 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7120 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

7121 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

7122 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

7123 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

7124 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

7125 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãrvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, **
∑øm
);

7126 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîi_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

7127 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãri_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, **
∑øm
);

7128 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

7129 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

7130 
GLAPI
 
APIENTRY
 
glNamedBuf„rSt‹ageEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

7131 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

7132 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizeùå
 
off£t
, GLsizeùå 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

7133 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîiEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

7134 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7135 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

7136 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7137 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7138 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7139 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7140 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7141 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7142 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7143 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7144 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7145 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7146 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7147 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7148 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7149 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7150 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7151 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7152 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™geEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

7153 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

7154 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7155 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

7156 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7157 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7158 
GLAPI
 
APIENTRY
 
glVîãxAºayBödVîãxBuf„rEXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

7159 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

7160 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

7161 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

7162 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribBödögEXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

7163 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBödögDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

7164 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7165 
GLAPI
 
APIENTRY
 
glTextuªPageCommômítEXT
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
commô
);

7166 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, GLuöà
divis‹
);

7170 #i‚de‡
GL_EXT_døw_buf„rs2


7171 
	#GL_EXT_døw_buf„rs2
 1

	)

7172 (
APIENTRYP
 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

7173 #ifde‡
GL_GLEXT_PROTOTYPES


7174 
GLAPI
 
APIENTRY
 
glCﬁ‹MaskIndexedEXT
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

7178 #i‚de‡
GL_EXT_døw_ö°™˚d


7179 
	#GL_EXT_døw_ö°™˚d
 1

	)

7180 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

7181 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7182 #ifde‡
GL_GLEXT_PROTOTYPES


7183 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dEXT
 (
GLíum
 
mode
, 
GLöt
 
°¨t
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

7184 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

7188 #i‚de‡
GL_EXT_døw_ønge_ñemíts


7189 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

7190 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

7191 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

7192 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

7193 #ifde‡
GL_GLEXT_PROTOTYPES


7194 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

7198 #i‚de‡
GL_EXT_fog_co‹d


7199 
	#GL_EXT_fog_co‹d
 1

	)

7200 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

7201 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

7202 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

7203 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

7204 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

7205 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

7206 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

7207 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

7208 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

7209 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

7210 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

7211 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

7212 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7213 #ifde‡
GL_GLEXT_PROTOTYPES


7214 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
 
co‹d
);

7215 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *
co‹d
);

7216 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
 
co‹d
);

7217 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *
co‹d
);

7218 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7222 #i‚de‡
GL_EXT_‰amebuf„r_blô


7223 
	#GL_EXT_‰amebuf„r_blô
 1

	)

7224 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

7225 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

7226 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

7227 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

7228 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

7229 #ifde‡
GL_GLEXT_PROTOTYPES


7230 
GLAPI
 
APIENTRY
 
glBlôFømebuf„rEXT
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

7234 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


7235 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

7236 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

7237 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

7238 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

7239 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

7240 #ifde‡
GL_GLEXT_PROTOTYPES


7241 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7245 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


7246 
	#GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 1

	)

7247 
	#GL_SCALED_RESOLVE_FASTEST_EXT
 0x90BA

	)

7248 
	#GL_SCALED_RESOLVE_NICEST_EXT
 0x90BB

	)

7251 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


7252 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

7253 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

7254 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

7255 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

7256 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

7257 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

7258 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

7259 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

7260 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

7261 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

7262 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

7263 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

7264 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

7265 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

7266 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

7267 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

7268 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

7269 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

7270 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

7271 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

7272 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

7273 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

7274 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

7275 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

7276 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

7277 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

7278 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

7279 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

7280 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

7281 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

7282 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

7283 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

7284 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

7285 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

7286 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

7287 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

7288 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

7289 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

7290 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

7291 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

7292 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

7293 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

7294 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

7295 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

7296 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

7297 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

7298 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

7299 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

7300 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

7301 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

7302 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

7303 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

7304 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

7305 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

7306 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

7307 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

7308 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7309 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7310 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

7311 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

7312 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

7313 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

7314 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7315 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7316 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7317 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

7318 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

7319 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7320 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7321 #ifde‡
GL_GLEXT_PROTOTYPES


7322 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
 
ªndîbuf„r
);

7323 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

7324 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

7325 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

7326 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

7327 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7328 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
 
‰amebuf„r
);

7329 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

7330 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

7331 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

7332 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLíum 
èrgë
);

7333 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7334 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7335 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

7336 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

7337 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7338 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
 
èrgë
);

7342 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


7343 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

7344 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

7345 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

7348 #i‚de‡
GL_EXT_geomëry_shadî4


7349 
	#GL_EXT_geomëry_shadî4
 1

	)

7350 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

7351 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

7352 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

7353 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

7354 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

7355 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

7356 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

7357 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

7358 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

7359 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

7360 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

7361 
	#GL_LINES_ADJACENCY_EXT
 0x000A

	)

7362 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0x000B

	)

7363 
	#GL_TRIANGLES_ADJACENCY_EXT
 0x000C

	)

7364 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0x000D

	)

7365 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

7366 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

7367 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

7368 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

7369 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

7370 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

7371 #ifde‡
GL_GLEXT_PROTOTYPES


7372 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

7376 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


7377 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

7378 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7379 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7380 #ifde‡
GL_GLEXT_PROTOTYPES


7381 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7382 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7386 #i‚de‡
GL_EXT_gpu_shadî4


7387 
	#GL_EXT_gpu_shadî4
 1

	)

7388 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
 0x88FD

	)

7389 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

7390 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

7391 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

7392 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

7393 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

7394 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

7395 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

7396 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

7397 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

7398 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

7399 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

7400 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

7401 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

7402 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

7403 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

7404 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

7405 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

7406 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

7407 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

7408 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

7409 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

7410 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

7411 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

7412 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

7413 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

7414 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_EXT
 0x8904

	)

7415 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_EXT
 0x8905

	)

7416 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

7417 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

7418 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

7419 (
APIENTRYP
 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

7420 (
APIENTRYP
 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

7421 (
APIENTRYP
 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

7422 (
APIENTRYP
 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

7423 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7424 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7425 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7426 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7427 #ifde‡
GL_GLEXT_PROTOTYPES


7428 
GLAPI
 
APIENTRY
 
glGëUnif‹muivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

7429 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

7430 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

7431 
GLAPI
 
APIENTRY
 
glUnif‹m1uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

7432 
GLAPI
 
APIENTRY
 
glUnif‹m2uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

7433 
GLAPI
 
APIENTRY
 
glUnif‹m3uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

7434 
GLAPI
 
APIENTRY
 
glUnif‹m4uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

7435 
GLAPI
 
APIENTRY
 
glUnif‹m1uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7436 
GLAPI
 
APIENTRY
 
glUnif‹m2uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7437 
GLAPI
 
APIENTRY
 
glUnif‹m3uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7438 
GLAPI
 
APIENTRY
 
glUnif‹m4uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7442 #i‚de‡
GL_EXT_hi°ogøm


7443 
	#GL_EXT_hi°ogøm
 1

	)

7444 
	#GL_HISTOGRAM_EXT
 0x8024

	)

7445 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

7446 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

7447 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

7448 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

7449 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

7450 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

7451 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

7452 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

7453 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

7454 
	#GL_MINMAX_EXT
 0x802E

	)

7455 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

7456 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

7457 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

7458 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

7459 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7460 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7461 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

7462 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7463 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7464 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

7465 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

7466 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7467 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7468 #ifde‡
GL_GLEXT_PROTOTYPES


7469 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

7470 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7471 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7472 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

7473 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7474 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7475 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

7476 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

7477 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
 
èrgë
);

7478 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
 
èrgë
);

7482 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


7483 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

7484 
	#GL_IUI_V2F_EXT
 0x81AD

	)

7485 
	#GL_IUI_V3F_EXT
 0x81AE

	)

7486 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

7487 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

7488 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

7489 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

7490 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

7491 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

7494 #i‚de‡
GL_EXT_ödex_func


7495 
	#GL_EXT_ödex_func
 1

	)

7496 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

7497 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

7498 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

7499 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

7500 #ifde‡
GL_GLEXT_PROTOTYPES


7501 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

7505 #i‚de‡
GL_EXT_ödex_m©îül


7506 
	#GL_EXT_ödex_m©îül
 1

	)

7507 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

7508 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

7509 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

7510 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

7511 #ifde‡
GL_GLEXT_PROTOTYPES


7512 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

7516 #i‚de‡
GL_EXT_ödex_ãxtuª


7517 
	#GL_EXT_ödex_ãxtuª
 1

	)

7520 #i‚de‡
GL_EXT_light_ãxtuª


7521 
	#GL_EXT_light_ãxtuª
 1

	)

7522 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

7523 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

7524 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

7525 
	#GL_ATTENUATION_EXT
 0x834D

	)

7526 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

7527 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

7528 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

7529 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

7530 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

7531 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

7532 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

7533 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

7534 #ifde‡
GL_GLEXT_PROTOTYPES


7535 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
 
mode
);

7536 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
 
≤ame
);

7537 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

7541 #i‚de‡
GL_EXT_misc_©åibuã


7542 
	#GL_EXT_misc_©åibuã
 1

	)

7545 #i‚de‡
GL_EXT_mu…i_døw_¨øys


7546 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

7547 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

7548 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7549 #ifde‡
GL_GLEXT_PROTOTYPES


7550 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

7551 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
);

7555 #i‚de‡
GL_EXT_mu…ißm∂e


7556 
	#GL_EXT_mu…ißm∂e
 1

	)

7557 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

7558 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

7559 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

7560 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

7561 
	#GL_1PASS_EXT
 0x80A1

	)

7562 
	#GL_2PASS_0_EXT
 0x80A2

	)

7563 
	#GL_2PASS_1_EXT
 0x80A3

	)

7564 
	#GL_4PASS_0_EXT
 0x80A4

	)

7565 
	#GL_4PASS_1_EXT
 0x80A5

	)

7566 
	#GL_4PASS_2_EXT
 0x80A6

	)

7567 
	#GL_4PASS_3_EXT
 0x80A7

	)

7568 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

7569 
	#GL_SAMPLES_EXT
 0x80A9

	)

7570 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

7571 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

7572 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

7573 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

7574 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

7575 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

7576 #ifde‡
GL_GLEXT_PROTOTYPES


7577 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

7578 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
 
∑âîn
);

7582 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


7583 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

7584 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

7585 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

7586 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

7587 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

7590 #i‚de‡
GL_EXT_∑cked_Êﬂt


7591 
	#GL_EXT_∑cked_Êﬂt
 1

	)

7592 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

7593 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

7594 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

7597 #i‚de‡
GL_EXT_∑cked_pixñs


7598 
	#GL_EXT_∑cked_pixñs
 1

	)

7599 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

7600 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

7601 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

7602 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

7603 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

7606 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


7607 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

7608 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

7609 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

7610 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

7611 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

7612 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

7613 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

7614 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

7615 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

7616 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	td©a
);

7617 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7618 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7619 #ifde‡
GL_GLEXT_PROTOTYPES


7620 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

7621 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
d©a
);

7622 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7623 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7627 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


7628 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

7629 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

7630 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

7631 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

7632 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

7635 #i‚de‡
GL_EXT_pixñ_å™sf‹m


7636 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

7637 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

7638 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

7639 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

7640 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

7641 
	#GL_CUBIC_EXT
 0x8334

	)

7642 
	#GL_AVERAGE_EXT
 0x8335

	)

7643 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

7644 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

7645 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

7646 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7647 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7648 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7649 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7650 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7651 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7652 #ifde‡
GL_GLEXT_PROTOTYPES


7653 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

7654 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

7655 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7656 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7657 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7658 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7662 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


7663 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

7666 #i‚de‡
GL_EXT_poöt_∑ømëîs


7667 
	#GL_EXT_poöt_∑ømëîs
 1

	)

7668 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

7669 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

7670 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

7671 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

7672 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7673 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7674 #ifde‡
GL_GLEXT_PROTOTYPES


7675 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

7676 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7680 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


7681 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

7682 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

7683 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

7684 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

7685 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

7686 #ifde‡
GL_GLEXT_PROTOTYPES


7687 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
büs
);

7691 #i‚de‡
GL_EXT_pﬁyg⁄_off£t_˛amp


7692 
	#GL_EXT_pﬁyg⁄_off£t_˛amp
 1

	)

7693 
	#GL_POLYGON_OFFSET_CLAMP_EXT
 0x8E1B

	)

7694 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETCLAMPEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
, GLÊﬂà
	t˛amp
);

7695 #ifde‡
GL_GLEXT_PROTOTYPES


7696 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tCœmpEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
, GLÊﬂà
˛amp
);

7700 #i‚de‡
GL_EXT_po°_dïth_covîage


7701 
	#GL_EXT_po°_dïth_covîage
 1

	)

7704 #i‚de‡
GL_EXT_¥ovokög_vîãx


7705 
	#GL_EXT_¥ovokög_vîãx
 1

	)

7706 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

7707 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

7708 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

7709 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

7710 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

7711 #ifde‡
GL_GLEXT_PROTOTYPES


7712 
GLAPI
 
APIENTRY
 
glProvokögVîãxEXT
 (
GLíum
 
mode
);

7716 #i‚de‡
GL_EXT_ø°î_mu…ißm∂e


7717 
	#GL_EXT_ø°î_mu…ißm∂e
 1

	)

7718 
	#GL_RASTER_MULTISAMPLE_EXT
 0x9327

	)

7719 
	#GL_RASTER_SAMPLES_EXT
 0x9328

	)

7720 
	#GL_MAX_RASTER_SAMPLES_EXT
 0x9329

	)

7721 
	#GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT
 0x932A

	)

7722 
	#GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT
 0x932B

	)

7723 
	#GL_EFFECTIVE_RASTER_SAMPLES_EXT
 0x932C

	)

7724 (
APIENTRYP
 
	tPFNGLRASTERSAMPLESEXTPROC
Ë(
	tGLuöt
 
	tßm∂es
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

7725 #ifde‡
GL_GLEXT_PROTOTYPES


7726 
GLAPI
 
APIENTRY
 
glRa°îSam∂esEXT
 (
GLuöt
 
ßm∂es
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7730 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


7731 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

7732 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

7735 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


7736 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

7737 
	#GL_COLOR_SUM_EXT
 0x8458

	)

7738 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

7739 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

7740 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

7741 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

7742 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

7743 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

7744 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

7745 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

7746 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

7747 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7748 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

7749 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7750 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

7751 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7752 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

7753 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7754 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

7755 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

7756 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

7757 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

7758 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

7759 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

7760 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7761 #ifde‡
GL_GLEXT_PROTOTYPES


7762 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

7763 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *
v
);

7764 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

7765 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

7766 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

7767 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

7768 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

7769 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *
v
);

7770 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

7771 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

7772 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

7773 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *
v
);

7774 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

7775 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *
v
);

7776 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

7777 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *
v
);

7778 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7782 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


7783 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

7784 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

7785 (
APIENTRYP
 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

7786 (
APIENTRYP
 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

7787 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
 *
	t°rög
);

7788 #ifde‡
GL_GLEXT_PROTOTYPES


7789 
GLAPI
 
APIENTRY
 
glU£ShadîProgømEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
¥ogøm
);

7790 
GLAPI
 
APIENTRY
 
glA˘iveProgømEXT
 (
GLuöt
 
¥ogøm
);

7791 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømEXT
 (
GLíum
 
ty≥
, c⁄° 
GLch¨
 *
°rög
);

7795 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


7796 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

7797 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

7798 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

7799 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

7802 #i‚de‡
GL_EXT_shadî_image_lﬂd_f‹m©ãd


7803 
	#GL_EXT_shadî_image_lﬂd_f‹m©ãd
 1

	)

7806 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


7807 
	#GL_EXT_shadî_image_lﬂd_°‹e
 1

	)

7808 
	#GL_MAX_IMAGE_UNITS_EXT
 0x8F38

	)

7809 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
 0x8F39

	)

7810 
	#GL_IMAGE_BINDING_NAME_EXT
 0x8F3A

	)

7811 
	#GL_IMAGE_BINDING_LEVEL_EXT
 0x8F3B

	)

7812 
	#GL_IMAGE_BINDING_LAYERED_EXT
 0x8F3C

	)

7813 
	#GL_IMAGE_BINDING_LAYER_EXT
 0x8F3D

	)

7814 
	#GL_IMAGE_BINDING_ACCESS_EXT
 0x8F3E

	)

7815 
	#GL_IMAGE_1D_EXT
 0x904C

	)

7816 
	#GL_IMAGE_2D_EXT
 0x904D

	)

7817 
	#GL_IMAGE_3D_EXT
 0x904E

	)

7818 
	#GL_IMAGE_2D_RECT_EXT
 0x904F

	)

7819 
	#GL_IMAGE_CUBE_EXT
 0x9050

	)

7820 
	#GL_IMAGE_BUFFER_EXT
 0x9051

	)

7821 
	#GL_IMAGE_1D_ARRAY_EXT
 0x9052

	)

7822 
	#GL_IMAGE_2D_ARRAY_EXT
 0x9053

	)

7823 
	#GL_IMAGE_CUBE_MAP_ARRAY_EXT
 0x9054

	)

7824 
	#GL_IMAGE_2D_MULTISAMPLE_EXT
 0x9055

	)

7825 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9056

	)

7826 
	#GL_INT_IMAGE_1D_EXT
 0x9057

	)

7827 
	#GL_INT_IMAGE_2D_EXT
 0x9058

	)

7828 
	#GL_INT_IMAGE_3D_EXT
 0x9059

	)

7829 
	#GL_INT_IMAGE_2D_RECT_EXT
 0x905A

	)

7830 
	#GL_INT_IMAGE_CUBE_EXT
 0x905B

	)

7831 
	#GL_INT_IMAGE_BUFFER_EXT
 0x905C

	)

7832 
	#GL_INT_IMAGE_1D_ARRAY_EXT
 0x905D

	)

7833 
	#GL_INT_IMAGE_2D_ARRAY_EXT
 0x905E

	)

7834 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x905F

	)

7835 
	#GL_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x9060

	)

7836 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9061

	)

7837 
	#GL_UNSIGNED_INT_IMAGE_1D_EXT
 0x9062

	)

7838 
	#GL_UNSIGNED_INT_IMAGE_2D_EXT
 0x9063

	)

7839 
	#GL_UNSIGNED_INT_IMAGE_3D_EXT
 0x9064

	)

7840 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
 0x9065

	)

7841 
	#GL_UNSIGNED_INT_IMAGE_CUBE_EXT
 0x9066

	)

7842 
	#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
 0x9067

	)

7843 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
 0x9068

	)

7844 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
 0x9069

	)

7845 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x906A

	)

7846 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x906B

	)

7847 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x906C

	)

7848 
	#GL_MAX_IMAGE_SAMPLES_EXT
 0x906D

	)

7849 
	#GL_IMAGE_BINDING_FORMAT_EXT
 0x906E

	)

7850 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
 0x00000001

	)

7851 
	#GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
 0x00000002

	)

7852 
	#GL_UNIFORM_BARRIER_BIT_EXT
 0x00000004

	)

7853 
	#GL_TEXTURE_FETCH_BARRIER_BIT_EXT
 0x00000008

	)

7854 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
 0x00000020

	)

7855 
	#GL_COMMAND_BARRIER_BIT_EXT
 0x00000040

	)

7856 
	#GL_PIXEL_BUFFER_BARRIER_BIT_EXT
 0x00000080

	)

7857 
	#GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
 0x00000100

	)

7858 
	#GL_BUFFER_UPDATE_BARRIER_BIT_EXT
 0x00000200

	)

7859 
	#GL_FRAMEBUFFER_BARRIER_BIT_EXT
 0x00000400

	)

7860 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
 0x00000800

	)

7861 
	#GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
 0x00001000

	)

7862 
	#GL_ALL_BARRIER_BITS_EXT
 0xFFFFFFFF

	)

7863 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLöà
	tf‹m©
);

7864 (
APIENTRYP
 
	tPFNGLMEMORYBARRIEREXTPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

7865 #ifde‡
GL_GLEXT_PROTOTYPES


7866 
GLAPI
 
APIENTRY
 
glBödImageTextuªEXT
 (
GLuöt
 
ödex
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLöà
f‹m©
);

7867 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrEXT
 (
GLbôfõld
 
b¨rõrs
);

7871 #i‚de‡
GL_EXT_shadî_öãgî_mix


7872 
	#GL_EXT_shadî_öãgî_mix
 1

	)

7875 #i‚de‡
GL_EXT_shadow_funcs


7876 
	#GL_EXT_shadow_funcs
 1

	)

7879 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


7880 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

7881 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

7884 #i‚de‡
GL_EXT_•¨£_ãxtuª2


7885 
	#GL_EXT_•¨£_ãxtuª2
 1

	)

7888 #i‚de‡
GL_EXT_°ícû_˛ór_èg


7889 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

7890 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

7891 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

7892 (
APIENTRYP
 
	tPFNGLSTENCILCLEARTAGEXTPROC
Ë(
	tGLsizei
 
	t°ícûTagBôs
, 
	tGLuöt
 
	t°ícûCÀ¨Tag
);

7893 #ifde‡
GL_GLEXT_PROTOTYPES


7894 
GLAPI
 
APIENTRY
 
glSãncûCÀ¨TagEXT
 (
GLsizei
 
°ícûTagBôs
, 
GLuöt
 
°ícûCÀ¨Tag
);

7898 #i‚de‡
GL_EXT_°ícû_two_side


7899 
	#GL_EXT_°ícû_two_side
 1

	)

7900 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

7901 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

7902 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

7903 #ifde‡
GL_GLEXT_PROTOTYPES


7904 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
 
Á˚
);

7908 #i‚de‡
GL_EXT_°ícû_wøp


7909 
	#GL_EXT_°ícû_wøp
 1

	)

7910 
	#GL_INCR_WRAP_EXT
 0x8507

	)

7911 
	#GL_DECR_WRAP_EXT
 0x8508

	)

7914 #i‚de‡
GL_EXT_subãxtuª


7915 
	#GL_EXT_subãxtuª
 1

	)

7916 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7917 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7918 #ifde‡
GL_GLEXT_PROTOTYPES


7919 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7920 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7924 #i‚de‡
GL_EXT_ãxtuª


7925 
	#GL_EXT_ãxtuª
 1

	)

7926 
	#GL_ALPHA4_EXT
 0x803B

	)

7927 
	#GL_ALPHA8_EXT
 0x803C

	)

7928 
	#GL_ALPHA12_EXT
 0x803D

	)

7929 
	#GL_ALPHA16_EXT
 0x803E

	)

7930 
	#GL_LUMINANCE4_EXT
 0x803F

	)

7931 
	#GL_LUMINANCE8_EXT
 0x8040

	)

7932 
	#GL_LUMINANCE12_EXT
 0x8041

	)

7933 
	#GL_LUMINANCE16_EXT
 0x8042

	)

7934 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

7935 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

7936 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

7937 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

7938 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

7939 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

7940 
	#GL_INTENSITY_EXT
 0x8049

	)

7941 
	#GL_INTENSITY4_EXT
 0x804A

	)

7942 
	#GL_INTENSITY8_EXT
 0x804B

	)

7943 
	#GL_INTENSITY12_EXT
 0x804C

	)

7944 
	#GL_INTENSITY16_EXT
 0x804D

	)

7945 
	#GL_RGB2_EXT
 0x804E

	)

7946 
	#GL_RGB4_EXT
 0x804F

	)

7947 
	#GL_RGB5_EXT
 0x8050

	)

7948 
	#GL_RGB8_EXT
 0x8051

	)

7949 
	#GL_RGB10_EXT
 0x8052

	)

7950 
	#GL_RGB12_EXT
 0x8053

	)

7951 
	#GL_RGB16_EXT
 0x8054

	)

7952 
	#GL_RGBA2_EXT
 0x8055

	)

7953 
	#GL_RGBA4_EXT
 0x8056

	)

7954 
	#GL_RGB5_A1_EXT
 0x8057

	)

7955 
	#GL_RGBA8_EXT
 0x8058

	)

7956 
	#GL_RGB10_A2_EXT
 0x8059

	)

7957 
	#GL_RGBA12_EXT
 0x805A

	)

7958 
	#GL_RGBA16_EXT
 0x805B

	)

7959 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

7960 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

7961 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

7962 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

7963 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

7964 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

7965 
	#GL_REPLACE_EXT
 0x8062

	)

7966 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

7967 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

7968 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

7971 #i‚de‡
GL_EXT_ãxtuª3D


7972 
	#GL_EXT_ãxtuª3D
 1

	)

7973 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

7974 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

7975 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

7976 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

7977 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

7978 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

7979 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

7980 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

7981 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

7982 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7983 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7984 #ifde‡
GL_GLEXT_PROTOTYPES


7985 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7986 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7990 #i‚de‡
GL_EXT_ãxtuª_¨øy


7991 
	#GL_EXT_ãxtuª_¨øy
 1

	)

7992 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

7993 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

7994 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

7995 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

7996 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

7997 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

7998 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

7999 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

8000 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

8001 #ifde‡
GL_GLEXT_PROTOTYPES


8002 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

8006 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


8007 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

8008 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

8009 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

8010 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

8011 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

8012 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

8013 (
APIENTRYP
 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

8014 #ifde‡
GL_GLEXT_PROTOTYPES


8015 
GLAPI
 
APIENTRY
 
glTexBuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

8019 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


8020 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

8021 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

8022 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

8023 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

8024 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

8027 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


8028 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

8029 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

8030 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

8031 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

8032 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

8035 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


8036 
	#GL_EXT_ãxtuª_com¥essi⁄_s3tc
 1

	)

8037 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

8038 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

8039 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

8040 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

8043 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


8044 
	#GL_EXT_ãxtuª_cube_m≠
 1

	)

8045 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

8046 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

8047 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

8048 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

8049 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

8050 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

8051 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

8052 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

8053 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

8054 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

8055 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

8056 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

8059 #i‚de‡
GL_EXT_ãxtuª_ív_add


8060 
	#GL_EXT_ãxtuª_ív_add
 1

	)

8063 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


8064 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

8065 
	#GL_COMBINE_EXT
 0x8570

	)

8066 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

8067 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

8068 
	#GL_RGB_SCALE_EXT
 0x8573

	)

8069 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

8070 
	#GL_INTERPOLATE_EXT
 0x8575

	)

8071 
	#GL_CONSTANT_EXT
 0x8576

	)

8072 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

8073 
	#GL_PREVIOUS_EXT
 0x8578

	)

8074 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

8075 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

8076 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

8077 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

8078 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

8079 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

8080 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

8081 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

8082 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

8083 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

8084 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

8085 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

8088 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


8089 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

8090 
	#GL_DOT3_RGB_EXT
 0x8740

	)

8091 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

8094 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


8095 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

8096 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

8097 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

8100 #i‚de‡
GL_EXT_ãxtuª_fûãr_mömax


8101 
	#GL_EXT_ãxtuª_fûãr_mömax
 1

	)

8104 #i‚de‡
GL_EXT_ãxtuª_öãgî


8105 
	#GL_EXT_ãxtuª_öãgî
 1

	)

8106 
	#GL_RGBA32UI_EXT
 0x8D70

	)

8107 
	#GL_RGB32UI_EXT
 0x8D71

	)

8108 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

8109 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

8110 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

8111 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

8112 
	#GL_RGBA16UI_EXT
 0x8D76

	)

8113 
	#GL_RGB16UI_EXT
 0x8D77

	)

8114 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

8115 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

8116 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

8117 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

8118 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

8119 
	#GL_RGB8UI_EXT
 0x8D7D

	)

8120 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

8121 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

8122 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

8123 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

8124 
	#GL_RGBA32I_EXT
 0x8D82

	)

8125 
	#GL_RGB32I_EXT
 0x8D83

	)

8126 
	#GL_ALPHA32I_EXT
 0x8D84

	)

8127 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

8128 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

8129 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

8130 
	#GL_RGBA16I_EXT
 0x8D88

	)

8131 
	#GL_RGB16I_EXT
 0x8D89

	)

8132 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

8133 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

8134 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

8135 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

8136 
	#GL_RGBA8I_EXT
 0x8D8E

	)

8137 
	#GL_RGB8I_EXT
 0x8D8F

	)

8138 
	#GL_ALPHA8I_EXT
 0x8D90

	)

8139 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

8140 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

8141 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

8142 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

8143 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

8144 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

8145 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

8146 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

8147 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

8148 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

8149 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

8150 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

8151 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

8152 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

8153 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8154 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

8155 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8156 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

8157 (
APIENTRYP
 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

8158 (
APIENTRYP
 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

8159 #ifde‡
GL_GLEXT_PROTOTYPES


8160 
GLAPI
 
APIENTRY
 
glTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8161 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

8162 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8163 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

8164 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IiEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
, GLöà
Æpha
);

8165 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IuiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
, GLuöà
Æpha
);

8169 #i‚de‡
GL_EXT_ãxtuª_lod_büs


8170 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

8171 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

8172 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

8173 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

8176 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


8177 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

8178 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

8179 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

8180 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

8183 #i‚de‡
GL_EXT_ãxtuª_obje˘


8184 
	#GL_EXT_ãxtuª_obje˘
 1

	)

8185 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

8186 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

8187 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

8188 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

8189 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

8190 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

8191 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

8192 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

8193 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

8194 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8195 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

8196 #ifde‡
GL_GLEXT_PROTOTYPES


8197 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, GLboﬁó¿*
ªsidí˚s
);

8198 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

8199 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

8200 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

8201 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
 
ãxtuª
);

8202 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GL˛ampf
 *
¥i‹ôõs
);

8206 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


8207 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

8208 
	#GL_PERTURB_EXT
 0x85AE

	)

8209 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

8210 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

8211 #ifde‡
GL_GLEXT_PROTOTYPES


8212 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
 
mode
);

8216 #i‚de‡
GL_EXT_ãxtuª_sRGB


8217 
	#GL_EXT_ãxtuª_sRGB
 1

	)

8218 
	#GL_SRGB_EXT
 0x8C40

	)

8219 
	#GL_SRGB8_EXT
 0x8C41

	)

8220 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

8221 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

8222 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

8223 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

8224 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

8225 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

8226 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

8227 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

8228 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

8229 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

8230 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

8231 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

8232 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

8233 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

8236 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


8237 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

8238 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

8239 
	#GL_DECODE_EXT
 0x8A49

	)

8240 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

8243 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


8244 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

8245 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

8246 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

8247 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

8250 #i‚de‡
GL_EXT_ãxtuª_¢‹m


8251 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

8252 
	#GL_ALPHA_SNORM
 0x9010

	)

8253 
	#GL_LUMINANCE_SNORM
 0x9011

	)

8254 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

8255 
	#GL_INTENSITY_SNORM
 0x9013

	)

8256 
	#GL_ALPHA8_SNORM
 0x9014

	)

8257 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

8258 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

8259 
	#GL_INTENSITY8_SNORM
 0x9017

	)

8260 
	#GL_ALPHA16_SNORM
 0x9018

	)

8261 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

8262 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

8263 
	#GL_INTENSITY16_SNORM
 0x901B

	)

8264 
	#GL_RED_SNORM
 0x8F90

	)

8265 
	#GL_RG_SNORM
 0x8F91

	)

8266 
	#GL_RGB_SNORM
 0x8F92

	)

8267 
	#GL_RGBA_SNORM
 0x8F93

	)

8270 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


8271 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

8272 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

8273 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

8274 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

8275 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

8276 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

8279 #i‚de‡
GL_EXT_timî_quîy


8280 
	#GL_EXT_timî_quîy
 1

	)

8281 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

8282 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

8283 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

8284 #ifde‡
GL_GLEXT_PROTOTYPES


8285 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

8286 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

8290 #i‚de‡
GL_EXT_å™sf‹m_„edback


8291 
	#GL_EXT_å™sf‹m_„edback
 1

	)

8292 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

8293 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

8294 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

8295 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

8296 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

8297 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

8298 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

8299 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

8300 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

8301 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

8302 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

8303 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

8304 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

8305 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

8306 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

8307 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

8308 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

8309 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8310 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

8311 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

8312 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

8313 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

8314 #ifde‡
GL_GLEXT_PROTOTYPES


8315 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackEXT
 (
GLíum
 
¥imôiveMode
);

8316 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackEXT
 ();

8317 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

8318 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

8319 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£EXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

8320 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsEXT
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

8321 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögEXT
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

8325 #i‚de‡
GL_EXT_vîãx_¨øy


8326 
	#GL_EXT_vîãx_¨øy
 1

	)

8327 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

8328 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

8329 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

8330 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

8331 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

8332 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

8333 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

8334 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

8335 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

8336 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

8337 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

8338 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

8339 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

8340 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

8341 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

8342 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

8343 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

8344 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

8345 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

8346 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

8347 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

8348 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

8349 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

8350 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

8351 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

8352 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

8353 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

8354 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

8355 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

8356 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

8357 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

8358 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

8359 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

8360 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8361 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

8362 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

8363 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, **
	t∑øms
);

8364 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8365 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8366 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8367 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8368 #ifde‡
GL_GLEXT_PROTOTYPES


8369 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
 
i
);

8370 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8371 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

8372 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLboﬁón
 *
poöãr
);

8373 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
 
≤ame
, **
∑øms
);

8374 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8375 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8376 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8377 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8381 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


8382 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

8385 #i‚de‡
GL_EXT_vîãx_©åib_64bô


8386 
	#GL_EXT_vîãx_©åib_64bô
 1

	)

8387 
	#GL_DOUBLE_VEC2_EXT
 0x8FFC

	)

8388 
	#GL_DOUBLE_VEC3_EXT
 0x8FFD

	)

8389 
	#GL_DOUBLE_VEC4_EXT
 0x8FFE

	)

8390 
	#GL_DOUBLE_MAT2_EXT
 0x8F46

	)

8391 
	#GL_DOUBLE_MAT3_EXT
 0x8F47

	)

8392 
	#GL_DOUBLE_MAT4_EXT
 0x8F48

	)

8393 
	#GL_DOUBLE_MAT2x3_EXT
 0x8F49

	)

8394 
	#GL_DOUBLE_MAT2x4_EXT
 0x8F4A

	)

8395 
	#GL_DOUBLE_MAT3x2_EXT
 0x8F4B

	)

8396 
	#GL_DOUBLE_MAT3x4_EXT
 0x8F4C

	)

8397 
	#GL_DOUBLE_MAT4x2_EXT
 0x8F4D

	)

8398 
	#GL_DOUBLE_MAT4x3_EXT
 0x8F4E

	)

8399 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

8400 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8401 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8402 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8403 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8404 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8405 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8406 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8407 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

8408 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

8409 #ifde‡
GL_GLEXT_PROTOTYPES


8410 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

8411 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8412 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8413 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8414 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8415 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8416 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8417 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8418 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

8419 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdvEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

8423 #i‚de‡
GL_EXT_vîãx_shadî


8424 
	#GL_EXT_vîãx_shadî
 1

	)

8425 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

8426 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

8427 
	#GL_OP_INDEX_EXT
 0x8782

	)

8428 
	#GL_OP_NEGATE_EXT
 0x8783

	)

8429 
	#GL_OP_DOT3_EXT
 0x8784

	)

8430 
	#GL_OP_DOT4_EXT
 0x8785

	)

8431 
	#GL_OP_MUL_EXT
 0x8786

	)

8432 
	#GL_OP_ADD_EXT
 0x8787

	)

8433 
	#GL_OP_MADD_EXT
 0x8788

	)

8434 
	#GL_OP_FRAC_EXT
 0x8789

	)

8435 
	#GL_OP_MAX_EXT
 0x878A

	)

8436 
	#GL_OP_MIN_EXT
 0x878B

	)

8437 
	#GL_OP_SET_GE_EXT
 0x878C

	)

8438 
	#GL_OP_SET_LT_EXT
 0x878D

	)

8439 
	#GL_OP_CLAMP_EXT
 0x878E

	)

8440 
	#GL_OP_FLOOR_EXT
 0x878F

	)

8441 
	#GL_OP_ROUND_EXT
 0x8790

	)

8442 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

8443 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

8444 
	#GL_OP_POWER_EXT
 0x8793

	)

8445 
	#GL_OP_RECIP_EXT
 0x8794

	)

8446 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

8447 
	#GL_OP_SUB_EXT
 0x8796

	)

8448 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

8449 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

8450 
	#GL_OP_MOV_EXT
 0x8799

	)

8451 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

8452 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

8453 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

8454 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

8455 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

8456 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

8457 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

8458 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

8459 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

8460 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

8461 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

8462 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

8463 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

8464 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

8465 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

8466 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

8467 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

8468 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

8469 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

8470 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

8471 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

8472 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

8473 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

8474 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

8475 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

8476 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

8477 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

8478 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

8479 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

8480 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

8481 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

8482 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

8483 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

8484 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

8485 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

8486 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

8487 
	#GL_SCALAR_EXT
 0x87BE

	)

8488 
	#GL_VECTOR_EXT
 0x87BF

	)

8489 
	#GL_MATRIX_EXT
 0x87C0

	)

8490 
	#GL_VARIANT_EXT
 0x87C1

	)

8491 
	#GL_INVARIANT_EXT
 0x87C2

	)

8492 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

8493 
	#GL_LOCAL_EXT
 0x87C4

	)

8494 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

8495 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

8496 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

8497 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

8498 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

8499 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

8500 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

8501 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

8502 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

8503 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

8504 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

8505 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

8506 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

8507 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

8508 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

8509 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

8510 
	#GL_X_EXT
 0x87D5

	)

8511 
	#GL_Y_EXT
 0x87D6

	)

8512 
	#GL_Z_EXT
 0x87D7

	)

8513 
	#GL_W_EXT
 0x87D8

	)

8514 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

8515 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

8516 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

8517 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

8518 
	#GL_ZERO_EXT
 0x87DD

	)

8519 
	#GL_ONE_EXT
 0x87DE

	)

8520 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

8521 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

8522 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

8523 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

8524 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

8525 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

8526 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

8527 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

8528 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

8529 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

8530 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

8531 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

8532 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

8533 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

8534 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

8535 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

8536 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

8537 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

8538 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

8539 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

8540 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

8541 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

8542 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

8543 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

8544 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

8545 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

8546 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

8547 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

8548 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

8549 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

8550 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

8551 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

8552 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

8553 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

8554 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

8555 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

8556 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

8557 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

8558 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° *
	taddr
);

8559 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

8560 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

8561 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

8562 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

8563 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

8564 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

8565 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

8566 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

8567 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8568 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8569 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8570 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, **
	td©a
);

8571 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8572 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8573 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8574 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8575 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8576 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8577 #ifde‡
GL_GLEXT_PROTOTYPES


8578 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

8579 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

8580 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
 
id
);

8581 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuöà
ønge
);

8582 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
 
id
);

8583 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
);

8584 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
);

8585 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
, GLuöà
¨g3
);

8586 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

8587 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

8588 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

8589 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

8590 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
 
d©©y≥
, GLíum 
°‹agëy≥
, GLíum 
ønge
, GLuöà
comp⁄íts
);

8591 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

8592 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

8593 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
 
id
, c⁄° 
GLbyã
 *
addr
);

8594 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
 
id
, c⁄° 
GLsh‹t
 *
addr
);

8595 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
 
id
, c⁄° 
GLöt
 *
addr
);

8596 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
addr
);

8597 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
 
id
, c⁄° 
GLdoubÀ
 *
addr
);

8598 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
 
id
, c⁄° 
GLubyã
 *
addr
);

8599 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
 
id
, c⁄° 
GLush‹t
 *
addr
);

8600 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
 
id
, c⁄° GLuöà*
addr
);

8601 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, GLuöà
°ride
, c⁄° *
addr
);

8602 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

8603 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

8604 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
 
light
, GLíum 
vÆue
);

8605 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
 
Á˚
, GLíum 
vÆue
);

8606 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
co‹d
, GLíum 
vÆue
);

8607 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
vÆue
);

8608 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
 
vÆue
);

8609 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
 
id
, 
GLíum
 
ˇp
);

8610 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8611 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8612 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8613 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, **
d©a
);

8614 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8615 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8616 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8617 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8618 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8619 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8623 #i‚de‡
GL_EXT_vîãx_weightög


8624 
	#GL_EXT_vîãx_weightög
 1

	)

8625 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 0x0BA3

	)

8626 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

8627 
	#GL_MODELVIEW0_MATRIX_EXT
 0x0BA6

	)

8628 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

8629 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

8630 
	#GL_MODELVIEW0_EXT
 0x1700

	)

8631 
	#GL_MODELVIEW1_EXT
 0x850A

	)

8632 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

8633 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

8634 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

8635 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

8636 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

8637 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

8638 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

8639 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

8640 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

8641 #ifde‡
GL_GLEXT_PROTOTYPES


8642 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
 
weight
);

8643 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *
weight
);

8644 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

8648 #i‚de‡
GL_EXT_wödow_ª˘™gÀs


8649 
	#GL_EXT_wödow_ª˘™gÀs
 1

	)

8650 
	#GL_INCLUSIVE_EXT
 0x8F10

	)

8651 
	#GL_EXCLUSIVE_EXT
 0x8F11

	)

8652 
	#GL_WINDOW_RECTANGLE_EXT
 0x8F12

	)

8653 
	#GL_WINDOW_RECTANGLE_MODE_EXT
 0x8F13

	)

8654 
	#GL_MAX_WINDOW_RECTANGLES_EXT
 0x8F14

	)

8655 
	#GL_NUM_WINDOW_RECTANGLES_EXT
 0x8F15

	)

8656 (
APIENTRYP
 
	tPFNGLWINDOWRECTANGLESEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tbox
);

8657 #ifde‡
GL_GLEXT_PROTOTYPES


8658 
GLAPI
 
APIENTRY
 
glWödowRe˘™gÀsEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
box
);

8662 #i‚de‡
GL_EXT_x11_sync_obje˘


8663 
	#GL_EXT_x11_sync_obje˘
 1

	)

8664 
	#GL_SYNC_X11_FENCE_EXT
 0x90E1

	)

8665 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLIMPORTSYNCEXTPROC
Ë(
	tGLíum
 
	texã∫Æ_sync_ty≥
, 
	tGLöçå
 
	texã∫Æ_sync
, 
	tGLbôfõld
 
	tÊags
);

8666 #ifde‡
GL_GLEXT_PROTOTYPES


8667 
GLAPI
 
GLsync
 
APIENTRY
 
glImp‹tSyncEXT
 (
GLíum
 
exã∫Æ_sync_ty≥
, 
GLöçå
 
exã∫Æ_sync
, 
GLbôfõld
 
Êags
);

8671 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


8672 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

8673 (
APIENTRYP
 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

8674 #ifde‡
GL_GLEXT_PROTOTYPES


8675 
GLAPI
 
APIENTRY
 
glFømeTîmö©‹GREMEDY
 ();

8679 #i‚de‡
GL_GREMEDY_°rög_m¨kî


8680 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

8681 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

8682 #ifde‡
GL_GLEXT_PROTOTYPES


8683 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
 
Àn
, c⁄° *
°rög
);

8687 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


8688 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

8689 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

8690 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

8691 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

8692 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

8695 #i‚de‡
GL_HP_image_å™sf‹m


8696 
	#GL_HP_image_å™sf‹m
 1

	)

8697 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

8698 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

8699 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

8700 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

8701 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

8702 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

8703 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

8704 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

8705 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

8706 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

8707 
	#GL_CUBIC_HP
 0x815F

	)

8708 
	#GL_AVERAGE_HP
 0x8160

	)

8709 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

8710 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

8711 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

8712 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8713 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8714 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8715 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8716 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8717 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8718 #ifde‡
GL_GLEXT_PROTOTYPES


8719 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

8720 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

8721 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8722 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8723 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8724 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8728 #i‚de‡
GL_HP_oc˛usi⁄_ã°


8729 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

8730 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

8731 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

8734 #i‚de‡
GL_HP_ãxtuª_lightög


8735 
	#GL_HP_ãxtuª_lightög
 1

	)

8736 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

8737 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

8738 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

8741 #i‚de‡
GL_IBM_cuŒ_vîãx


8742 
	#GL_IBM_cuŒ_vîãx
 1

	)

8743 
	#GL_CULL_VERTEX_IBM
 103050

	)

8746 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


8747 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

8748 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

8749 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

8750 #ifde‡
GL_GLEXT_PROTOTYPES


8751 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
, GLöà
mode°ride
);

8752 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
, 
GLöt
 
mode°ride
);

8756 #i‚de‡
GL_IBM_ø°îpos_˛ù


8757 
	#GL_IBM_ø°îpos_˛ù
 1

	)

8758 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

8761 #i‚de‡
GL_IBM_°©ic_d©a


8762 
	#GL_IBM_°©ic_d©a
 1

	)

8763 
	#GL_ALL_STATIC_DATA_IBM
 103060

	)

8764 
	#GL_STATIC_VERTEX_ARRAY_IBM
 103061

	)

8765 (
APIENTRYP
 
	tPFNGLFLUSHSTATICDATAIBMPROC
Ë(
	tGLíum
 
	tèrgë
);

8766 #ifde‡
GL_GLEXT_PROTOTYPES


8767 
GLAPI
 
APIENTRY
 
glFlushSèticD©aIBM
 (
GLíum
 
èrgë
);

8771 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


8772 
	#GL_IBM_ãxtuª_múr‹ed_ª≥©
 1

	)

8773 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

8776 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


8777 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

8778 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

8779 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

8780 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

8781 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

8782 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

8783 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

8784 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

8785 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

8786 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

8787 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

8788 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

8789 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

8790 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

8791 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

8792 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

8793 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

8794 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8795 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8796 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
 **
	tpoöãr
, GLöà
	t±r°ride
);

8797 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8798 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8799 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8800 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8801 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8802 #ifde‡
GL_GLEXT_PROTOTYPES


8803 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8804 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8805 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
 
°ride
, c⁄° 
GLboﬁón
 **
poöãr
, GLöà
±r°ride
);

8806 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8807 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8808 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8809 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8810 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8814 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


8815 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

8816 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

8817 #ifde‡
GL_GLEXT_PROTOTYPES


8818 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

8822 #i‚de‡
GL_INGR_cﬁ‹_˛amp


8823 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

8824 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

8825 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

8826 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

8827 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

8828 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

8829 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

8830 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

8831 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

8834 #i‚de‡
GL_INGR_öãæa˚_ªad


8835 
	#GL_INGR_öãæa˚_ªad
 1

	)

8836 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

8839 #i‚de‡
GL_INTEL_c⁄£rv©ive_ø°îiz©i⁄


8840 
	#GL_INTEL_c⁄£rv©ive_ø°îiz©i⁄
 1

	)

8841 
	#GL_CONSERVATIVE_RASTERIZATION_INTEL
 0x83FE

	)

8844 #i‚de‡
GL_INTEL_‰agmít_shadî_‹dîög


8845 
	#GL_INTEL_‰agmít_shadî_‹dîög
 1

	)

8848 #i‚de‡
GL_INTEL_‰amebuf„r_CMAA


8849 
	#GL_INTEL_‰amebuf„r_CMAA
 1

	)

8850 (
APIENTRYP
 
	tPFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC
) ();

8851 #ifde‡
GL_GLEXT_PROTOTYPES


8852 
GLAPI
 
APIENTRY
 
glAµlyFømebuf„rAâachmítCMAAINTEL
 ();

8856 #i‚de‡
GL_INTEL_m≠_ãxtuª


8857 
	#GL_INTEL_m≠_ãxtuª
 1

	)

8858 
	#GL_TEXTURE_MEMORY_LAYOUT_INTEL
 0x83FF

	)

8859 
	#GL_LAYOUT_DEFAULT_INTEL
 0

	)

8860 
	#GL_LAYOUT_LINEAR_INTEL
 1

	)

8861 
	#GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
 2

	)

8862 (
APIENTRYP
 
	tPFNGLSYNCTEXTUREINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8863 (
APIENTRYP
 
	tPFNGLUNMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8864 *(
	tAPIENTRYP
 
	tPFNGLMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLbôfõld
 
	tac˚ss
, GLöà*
	t°ride
, 
	tGLíum
 *
	tœyout
);

8865 #ifde‡
GL_GLEXT_PROTOTYPES


8866 
GLAPI
 
APIENTRY
 
glSyncTextuªINTEL
 (
GLuöt
 
ãxtuª
);

8867 
GLAPI
 
APIENTRY
 
glUnm≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

8868 
GLAPI
 *
APIENTRY
 
glM≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLbôfõld
 
ac˚ss
, GLöà*
°ride
, 
GLíum
 *
œyout
);

8872 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


8873 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

8874 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

8875 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

8876 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

8877 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

8878 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

8879 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8880 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8881 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8882 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8883 #ifde‡
GL_GLEXT_PROTOTYPES


8884 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8885 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
 
ty≥
, c⁄° **
poöãr
);

8886 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8887 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8891 #i‚de‡
GL_INTEL_≥rf‹m™˚_quîy


8892 
	#GL_INTEL_≥rf‹m™˚_quîy
 1

	)

8893 
	#GL_PERFQUERY_SINGLE_CONTEXT_INTEL
 0x00000000

	)

8894 
	#GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
 0x00000001

	)

8895 
	#GL_PERFQUERY_WAIT_INTEL
 0x83FB

	)

8896 
	#GL_PERFQUERY_FLUSH_INTEL
 0x83FA

	)

8897 
	#GL_PERFQUERY_DONOT_FLUSH_INTEL
 0x83F9

	)

8898 
	#GL_PERFQUERY_COUNTER_EVENT_INTEL
 0x94F0

	)

8899 
	#GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
 0x94F1

	)

8900 
	#GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
 0x94F2

	)

8901 
	#GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
 0x94F3

	)

8902 
	#GL_PERFQUERY_COUNTER_RAW_INTEL
 0x94F4

	)

8903 
	#GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
 0x94F5

	)

8904 
	#GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
 0x94F8

	)

8905 
	#GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
 0x94F9

	)

8906 
	#GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
 0x94FA

	)

8907 
	#GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
 0x94FB

	)

8908 
	#GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
 0x94FC

	)

8909 
	#GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
 0x94FD

	)

8910 
	#GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
 0x94FE

	)

8911 
	#GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
 0x94FF

	)

8912 
	#GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
 0x9500

	)

8913 (
APIENTRYP
 
	tPFNGLBEGINPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8914 (
APIENTRYP
 
	tPFNGLCREATEPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà*
	tquîyH™dÀ
);

8915 (
APIENTRYP
 
	tPFNGLDELETEPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8916 (
APIENTRYP
 
	tPFNGLENDPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8917 (
APIENTRYP
 
	tPFNGLGETFIRSTPERFQUERYIDINTELPROC
Ë(
	tGLuöt
 *
	tquîyId
);

8918 (
APIENTRYP
 
	tPFNGLGETNEXTPERFQUERYIDINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà*
	t√xtQuîyId
);

8919 (
APIENTRYP
 
	tPFNGLGETPERFCOUNTERINFOINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà
	tcou¡îId
, GLuöà
	tcou¡îNameLígth
, 
	tGLch¨
 *
	tcou¡îName
, GLuöà
	tcou¡îDescLígth
, GLch¨ *
	tcou¡îDesc
, GLuöà*
	tcou¡îOff£t
, GLuöà*
	tcou¡îD©aSize
, GLuöà*
	tcou¡îTy≥Enum
, GLuöà*
	tcou¡îD©aTy≥Enum
, 
	tGLuöt64
 *
	tøwCou¡îMaxVÆue
);

8920 (
APIENTRYP
 
	tPFNGLGETPERFQUERYDATAINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
, GLuöà
	tÊags
, 
	tGLsizei
 
	td©aSize
, 
	tGLvoid
 *
	td©a
, GLuöà*
	tbyãsWrôãn
);

8921 (
APIENTRYP
 
	tPFNGLGETPERFQUERYIDBYNAMEINTELPROC
Ë(
	tGLch¨
 *
	tquîyName
, 
	tGLuöt
 *
	tquîyId
);

8922 (
APIENTRYP
 
	tPFNGLGETPERFQUERYINFOINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà
	tquîyNameLígth
, 
	tGLch¨
 *
	tquîyName
, GLuöà*
	td©aSize
, GLuöà*
	tnoCou¡îs
, GLuöà*
	tnoIn°™˚s
, GLuöà*
	tˇpsMask
);

8923 #ifde‡
GL_GLEXT_PROTOTYPES


8924 
GLAPI
 
APIENTRY
 
glBegöPîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8925 
GLAPI
 
APIENTRY
 
glCª©ePîfQuîyINTEL
 (
GLuöt
 
quîyId
, GLuöà*
quîyH™dÀ
);

8926 
GLAPI
 
APIENTRY
 
glDñëePîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8927 
GLAPI
 
APIENTRY
 
glEndPîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8928 
GLAPI
 
APIENTRY
 
glGëFú°PîfQuîyIdINTEL
 (
GLuöt
 *
quîyId
);

8929 
GLAPI
 
APIENTRY
 
glGëNextPîfQuîyIdINTEL
 (
GLuöt
 
quîyId
, GLuöà*
√xtQuîyId
);

8930 
GLAPI
 
APIENTRY
 
glGëPîfCou¡îInfoINTEL
 (
GLuöt
 
quîyId
, GLuöà
cou¡îId
, GLuöà
cou¡îNameLígth
, 
GLch¨
 *
cou¡îName
, GLuöà
cou¡îDescLígth
, GLch¨ *
cou¡îDesc
, GLuöà*
cou¡îOff£t
, GLuöà*
cou¡îD©aSize
, GLuöà*
cou¡îTy≥Enum
, GLuöà*
cou¡îD©aTy≥Enum
, 
GLuöt64
 *
øwCou¡îMaxVÆue
);

8931 
GLAPI
 
APIENTRY
 
glGëPîfQuîyD©aINTEL
 (
GLuöt
 
quîyH™dÀ
, GLuöà
Êags
, 
GLsizei
 
d©aSize
, 
GLvoid
 *
d©a
, GLuöà*
byãsWrôãn
);

8932 
GLAPI
 
APIENTRY
 
glGëPîfQuîyIdByNameINTEL
 (
GLch¨
 *
quîyName
, 
GLuöt
 *
quîyId
);

8933 
GLAPI
 
APIENTRY
 
glGëPîfQuîyInfoINTEL
 (
GLuöt
 
quîyId
, GLuöà
quîyNameLígth
, 
GLch¨
 *
quîyName
, GLuöà*
d©aSize
, GLuöà*
noCou¡îs
, GLuöà*
noIn°™˚s
, GLuöà*
ˇpsMask
);

8937 #i‚de‡
GL_MESAX_ãxtuª_°ack


8938 
	#GL_MESAX_ãxtuª_°ack
 1

	)

8939 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

8940 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

8941 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

8942 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

8943 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

8944 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

8947 #i‚de‡
GL_MESA_∑ck_övît


8948 
	#GL_MESA_∑ck_övît
 1

	)

8949 
	#GL_PACK_INVERT_MESA
 0x8758

	)

8952 #i‚de‡
GL_MESA_ªsize_buf„rs


8953 
	#GL_MESA_ªsize_buf„rs
 1

	)

8954 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

8955 #ifde‡
GL_GLEXT_PROTOTYPES


8956 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

8960 #i‚de‡
GL_MESA_wödow_pos


8961 
	#GL_MESA_wödow_pos
 1

	)

8962 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8963 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8964 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

8965 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8966 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

8967 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8968 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

8969 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8970 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8971 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8972 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8973 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8974 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

8975 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8976 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

8977 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8978 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8979 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8980 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

8981 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8982 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8983 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8984 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

8985 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8986 #ifde‡
GL_GLEXT_PROTOTYPES


8987 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8988 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8989 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

8990 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8991 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
 
x
, GLöà
y
);

8992 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *
v
);

8993 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
);

8994 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8995 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8996 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8997 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

8998 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8999 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

9000 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *
v
);

9001 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

9002 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *
v
);

9003 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

9004 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

9005 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9006 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

9007 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9008 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *
v
);

9009 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

9010 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *
v
);

9014 #i‚de‡
GL_MESA_ycb¸_ãxtuª


9015 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

9016 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

9017 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

9018 
	#GL_YCBCR_MESA
 0x8757

	)

9021 #i‚de‡
GL_NVX_c⁄dôi⁄Æ_ªndî


9022 
	#GL_NVX_c⁄dôi⁄Æ_ªndî
 1

	)

9023 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVXPROC
Ë(
	tGLuöt
 
	tid
);

9024 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVXPROC
) ();

9025 #ifde‡
GL_GLEXT_PROTOTYPES


9026 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNVX
 (
GLuöt
 
id
);

9027 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNVX
 ();

9031 #i‚de‡
GL_NVX_gpu_mem‹y_öfo


9032 
	#GL_NVX_gpu_mem‹y_öfo
 1

	)

9033 
	#GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
 0x9047

	)

9034 
	#GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
 0x9048

	)

9035 
	#GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
 0x9049

	)

9036 
	#GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
 0x904A

	)

9037 
	#GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
 0x904B

	)

9040 #i‚de‡
GL_NV_bödÀss_mu…i_døw_ödúe˘


9041 
	#GL_NV_bödÀss_mu…i_døw_ödúe˘
 1

	)

9042 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9043 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9044 #ifde‡
GL_GLEXT_PROTOTYPES


9045 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘BödÀssNV
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9046 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘BödÀssNV
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9050 #i‚de‡
GL_NV_bödÀss_mu…i_døw_ödúe˘_cou¡


9051 
	#GL_NV_bödÀss_mu…i_døw_ödúe˘_cou¡
 1

	)

9052 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	tmaxDøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9053 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	tmaxDøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9054 #ifde‡
GL_GLEXT_PROTOTYPES


9055 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘BödÀssCou¡NV
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
maxDøwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9056 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘BödÀssCou¡NV
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
maxDøwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9060 #i‚de‡
GL_NV_bödÀss_ãxtuª


9061 
	#GL_NV_bödÀss_ãxtuª
 1

	)

9062 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
);

9063 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

9064 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9065 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9066 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

9067 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

9068 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9069 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

9070 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

9071 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

9072 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

9073 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9074 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9075 #ifde‡
GL_GLEXT_PROTOTYPES


9076 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀNV
 (
GLuöt
 
ãxtuª
);

9077 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

9078 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9079 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

9080 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀNV
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

9081 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

9082 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

9083 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

9084 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

9085 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

9086 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

9087 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9088 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9092 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d


9093 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d
 1

	)

9094 
	#GL_BLEND_OVERLAP_NV
 0x9281

	)

9095 
	#GL_BLEND_PREMULTIPLIED_SRC_NV
 0x9280

	)

9096 
	#GL_BLUE_NV
 0x1905

	)

9097 
	#GL_COLORBURN_NV
 0x929A

	)

9098 
	#GL_COLORDODGE_NV
 0x9299

	)

9099 
	#GL_CONJOINT_NV
 0x9284

	)

9100 
	#GL_CONTRAST_NV
 0x92A1

	)

9101 
	#GL_DARKEN_NV
 0x9297

	)

9102 
	#GL_DIFFERENCE_NV
 0x929E

	)

9103 
	#GL_DISJOINT_NV
 0x9283

	)

9104 
	#GL_DST_ATOP_NV
 0x928F

	)

9105 
	#GL_DST_IN_NV
 0x928B

	)

9106 
	#GL_DST_NV
 0x9287

	)

9107 
	#GL_DST_OUT_NV
 0x928D

	)

9108 
	#GL_DST_OVER_NV
 0x9289

	)

9109 
	#GL_EXCLUSION_NV
 0x92A0

	)

9110 
	#GL_GREEN_NV
 0x1904

	)

9111 
	#GL_HARDLIGHT_NV
 0x929B

	)

9112 
	#GL_HARDMIX_NV
 0x92A9

	)

9113 
	#GL_HSL_COLOR_NV
 0x92AF

	)

9114 
	#GL_HSL_HUE_NV
 0x92AD

	)

9115 
	#GL_HSL_LUMINOSITY_NV
 0x92B0

	)

9116 
	#GL_HSL_SATURATION_NV
 0x92AE

	)

9117 
	#GL_INVERT_OVG_NV
 0x92B4

	)

9118 
	#GL_INVERT_RGB_NV
 0x92A3

	)

9119 
	#GL_LIGHTEN_NV
 0x9298

	)

9120 
	#GL_LINEARBURN_NV
 0x92A5

	)

9121 
	#GL_LINEARDODGE_NV
 0x92A4

	)

9122 
	#GL_LINEARLIGHT_NV
 0x92A7

	)

9123 
	#GL_MINUS_CLAMPED_NV
 0x92B3

	)

9124 
	#GL_MINUS_NV
 0x929F

	)

9125 
	#GL_MULTIPLY_NV
 0x9294

	)

9126 
	#GL_OVERLAY_NV
 0x9296

	)

9127 
	#GL_PINLIGHT_NV
 0x92A8

	)

9128 
	#GL_PLUS_CLAMPED_ALPHA_NV
 0x92B2

	)

9129 
	#GL_PLUS_CLAMPED_NV
 0x92B1

	)

9130 
	#GL_PLUS_DARKER_NV
 0x9292

	)

9131 
	#GL_PLUS_NV
 0x9291

	)

9132 
	#GL_RED_NV
 0x1903

	)

9133 
	#GL_SCREEN_NV
 0x9295

	)

9134 
	#GL_SOFTLIGHT_NV
 0x929C

	)

9135 
	#GL_SRC_ATOP_NV
 0x928E

	)

9136 
	#GL_SRC_IN_NV
 0x928A

	)

9137 
	#GL_SRC_NV
 0x9286

	)

9138 
	#GL_SRC_OUT_NV
 0x928C

	)

9139 
	#GL_SRC_OVER_NV
 0x9288

	)

9140 
	#GL_UNCORRELATED_NV
 0x9282

	)

9141 
	#GL_VIVIDLIGHT_NV
 0x92A6

	)

9142 
	#GL_XOR_NV
 0x1506

	)

9143 (
APIENTRYP
 
	tPFNGLBLENDPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

9144 (
APIENTRYP
 
	tPFNGLBLENDBARRIERNVPROC
) ();

9145 #ifde‡
GL_GLEXT_PROTOTYPES


9146 
GLAPI
 
APIENTRY
 
glBÀndP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

9147 
GLAPI
 
APIENTRY
 
glBÀndB¨rõrNV
 ();

9151 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít


9152 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít
 1

	)

9153 
	#GL_BLEND_ADVANCED_COHERENT_NV
 0x9285

	)

9156 #i‚de‡
GL_NV_bÀnd_squ¨e


9157 
	#GL_NV_bÀnd_squ¨e
 1

	)

9160 #i‚de‡
GL_NV_˛ù_•a˚_w_sˇlög


9161 
	#GL_NV_˛ù_•a˚_w_sˇlög
 1

	)

9162 
	#GL_VIEWPORT_POSITION_W_SCALE_NV
 0x937C

	)

9163 
	#GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV
 0x937D

	)

9164 
	#GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV
 0x937E

	)

9165 (
APIENTRYP
 
	tPFNGLVIEWPORTPOSITIONWSCALENVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	txc€ff
, GLÊﬂà
	tyc€ff
);

9166 #ifde‡
GL_GLEXT_PROTOTYPES


9167 
GLAPI
 
APIENTRY
 
glVõwp‹tPosôi⁄WSˇÀNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
xc€ff
, GLÊﬂà
yc€ff
);

9171 #i‚de‡
GL_NV_comm™d_li°


9172 
	#GL_NV_comm™d_li°
 1

	)

9173 
	#GL_TERMINATE_SEQUENCE_COMMAND_NV
 0x0000

	)

9174 
	#GL_NOP_COMMAND_NV
 0x0001

	)

9175 
	#GL_DRAW_ELEMENTS_COMMAND_NV
 0x0002

	)

9176 
	#GL_DRAW_ARRAYS_COMMAND_NV
 0x0003

	)

9177 
	#GL_DRAW_ELEMENTS_STRIP_COMMAND_NV
 0x0004

	)

9178 
	#GL_DRAW_ARRAYS_STRIP_COMMAND_NV
 0x0005

	)

9179 
	#GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV
 0x0006

	)

9180 
	#GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV
 0x0007

	)

9181 
	#GL_ELEMENT_ADDRESS_COMMAND_NV
 0x0008

	)

9182 
	#GL_ATTRIBUTE_ADDRESS_COMMAND_NV
 0x0009

	)

9183 
	#GL_UNIFORM_ADDRESS_COMMAND_NV
 0x000A

	)

9184 
	#GL_BLEND_COLOR_COMMAND_NV
 0x000B

	)

9185 
	#GL_STENCIL_REF_COMMAND_NV
 0x000C

	)

9186 
	#GL_LINE_WIDTH_COMMAND_NV
 0x000D

	)

9187 
	#GL_POLYGON_OFFSET_COMMAND_NV
 0x000E

	)

9188 
	#GL_ALPHA_REF_COMMAND_NV
 0x000F

	)

9189 
	#GL_VIEWPORT_COMMAND_NV
 0x0010

	)

9190 
	#GL_SCISSOR_COMMAND_NV
 0x0011

	)

9191 
	#GL_FRONT_FACE_COMMAND_NV
 0x0012

	)

9192 (
APIENTRYP
 
	tPFNGLCREATESTATESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t°©es
);

9193 (
APIENTRYP
 
	tPFNGLDELETESTATESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t°©es
);

9194 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSTATENVPROC
Ë(
	tGLuöt
 
	t°©e
);

9195 (
APIENTRYP
 
	tPFNGLSTATECAPTURENVPROC
Ë(
	tGLuöt
 
	t°©e
, 
	tGLíum
 
	tmode
);

9196 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETCOMMANDHEADERNVPROC
Ë(
	tGLíum
 
	ttokíID
, 
	tGLuöt
 
	tsize
);

9197 
GLush‹t
 (
	tAPIENTRYP
 
	tPFNGLGETSTAGEINDEXNVPROC
Ë(
	tGLíum
 
	tshadîty≥
);

9198 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
, 
	tGLuöt
 
	tbuf„r
, c⁄° 
	tGLöçå
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, GLuöà
	tcou¡
);

9199 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSADDRESSNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
, c⁄° 
	tGLuöt64
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, 
	tGLuöt
 
	tcou¡
);

9200 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSSTATESNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, c⁄° 
	tGLöçå
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° GLuöà*
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9201 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSSTATESADDRESSNVPROC
Ë(c⁄° 
	tGLuöt64
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° 
	tGLuöt
 *
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9202 (
APIENTRYP
 
	tPFNGLCREATECOMMANDLISTSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tli°s
);

9203 (
APIENTRYP
 
	tPFNGLDELETECOMMANDLISTSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tli°s
);

9204 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISCOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9205 (
APIENTRYP
 
	tPFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC
Ë(
	tGLuöt
 
	tli°
, GLuöà
	t£gmít
, c⁄° **
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° GLuöà*
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9206 (
APIENTRYP
 
	tPFNGLCOMMANDLISTSEGMENTSNVPROC
Ë(
	tGLuöt
 
	tli°
, GLuöà
	t£gmíts
);

9207 (
APIENTRYP
 
	tPFNGLCOMPILECOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9208 (
APIENTRYP
 
	tPFNGLCALLCOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9209 #ifde‡
GL_GLEXT_PROTOTYPES


9210 
GLAPI
 
APIENTRY
 
glCª©eSèãsNV
 (
GLsizei
 
n
, 
GLuöt
 *
°©es
);

9211 
GLAPI
 
APIENTRY
 
glDñëeSèãsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
°©es
);

9212 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSèãNV
 (
GLuöt
 
°©e
);

9213 
GLAPI
 
APIENTRY
 
glSèãC≠tuªNV
 (
GLuöt
 
°©e
, 
GLíum
 
mode
);

9214 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëComm™dHódîNV
 (
GLíum
 
tokíID
, GLuöà
size
);

9215 
GLAPI
 
GLush‹t
 
APIENTRY
 
glGëSègeIndexNV
 (
GLíum
 
shadîty≥
);

9216 
GLAPI
 
APIENTRY
 
glDøwComm™dsNV
 (
GLíum
 
¥imôiveMode
, 
GLuöt
 
buf„r
, c⁄° 
GLöçå
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, GLuöà
cou¡
);

9217 
GLAPI
 
APIENTRY
 
glDøwComm™dsAddªssNV
 (
GLíum
 
¥imôiveMode
, c⁄° 
GLuöt64
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, 
GLuöt
 
cou¡
);

9218 
GLAPI
 
APIENTRY
 
glDøwComm™dsSèãsNV
 (
GLuöt
 
buf„r
, c⁄° 
GLöçå
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° GLuöà*
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9219 
GLAPI
 
APIENTRY
 
glDøwComm™dsSèãsAddªssNV
 (c⁄° 
GLuöt64
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° 
GLuöt
 *
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9220 
GLAPI
 
APIENTRY
 
glCª©eComm™dLi°sNV
 (
GLsizei
 
n
, 
GLuöt
 *
li°s
);

9221 
GLAPI
 
APIENTRY
 
glDñëeComm™dLi°sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
li°s
);

9222 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsComm™dLi°NV
 (
GLuöt
 
li°
);

9223 
GLAPI
 
APIENTRY
 
glLi°DøwComm™dsSèãsClõ¡NV
 (
GLuöt
 
li°
, GLuöà
£gmít
, c⁄° **
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° GLuöà*
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9224 
GLAPI
 
APIENTRY
 
glComm™dLi°SegmítsNV
 (
GLuöt
 
li°
, GLuöà
£gmíts
);

9225 
GLAPI
 
APIENTRY
 
glCompûeComm™dLi°NV
 (
GLuöt
 
li°
);

9226 
GLAPI
 
APIENTRY
 
glCÆlComm™dLi°NV
 (
GLuöt
 
li°
);

9230 #i‚de‡
GL_NV_compuã_¥ogøm5


9231 
	#GL_NV_compuã_¥ogøm5
 1

	)

9232 
	#GL_COMPUTE_PROGRAM_NV
 0x90FB

	)

9233 
	#GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
 0x90FC

	)

9236 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


9237 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

9238 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

9239 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

9240 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

9241 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

9242 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

9243 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

9244 #ifde‡
GL_GLEXT_PROTOTYPES


9245 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNV
 (
GLuöt
 
id
, 
GLíum
 
mode
);

9246 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNV
 ();

9250 #i‚de‡
GL_NV_c⁄£rv©ive_ø°î


9251 
	#GL_NV_c⁄£rv©ive_ø°î
 1

	)

9252 
	#GL_CONSERVATIVE_RASTERIZATION_NV
 0x9346

	)

9253 
	#GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV
 0x9347

	)

9254 
	#GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV
 0x9348

	)

9255 
	#GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV
 0x9349

	)

9256 (
APIENTRYP
 
	tPFNGLSUBPIXELPRECISIONBIASNVPROC
Ë(
	tGLuöt
 
	txbôs
, GLuöà
	tybôs
);

9257 #ifde‡
GL_GLEXT_PROTOTYPES


9258 
GLAPI
 
APIENTRY
 
glSubpixñPªcisi⁄BüsNV
 (
GLuöt
 
xbôs
, GLuöà
ybôs
);

9262 #i‚de‡
GL_NV_c⁄£rv©ive_ø°î_dû©e


9263 
	#GL_NV_c⁄£rv©ive_ø°î_dû©e
 1

	)

9264 
	#GL_CONSERVATIVE_RASTER_DILATE_NV
 0x9379

	)

9265 
	#GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV
 0x937A

	)

9266 
	#GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV
 0x937B

	)

9267 (
APIENTRYP
 
	tPFNGLCONSERVATIVERASTERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

9268 #ifde‡
GL_GLEXT_PROTOTYPES


9269 
GLAPI
 
APIENTRY
 
glC⁄£rv©iveRa°îP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

9273 #i‚de‡
GL_NV_c⁄£rv©ive_ø°î_¥e_¢≠_åüngÀs


9274 
	#GL_NV_c⁄£rv©ive_ø°î_¥e_¢≠_åüngÀs
 1

	)

9275 
	#GL_CONSERVATIVE_RASTER_MODE_NV
 0x954D

	)

9276 
	#GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV
 0x954E

	)

9277 
	#GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV
 0x954F

	)

9278 (
APIENTRYP
 
	tPFNGLCONSERVATIVERASTERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9279 #ifde‡
GL_GLEXT_PROTOTYPES


9280 
GLAPI
 
APIENTRY
 
glC⁄£rv©iveRa°îP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9284 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


9285 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

9286 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

9287 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

9290 #i‚de‡
GL_NV_c›y_image


9291 
	#GL_NV_c›y_image
 1

	)

9292 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

9293 #ifde‡
GL_GLEXT_PROTOTYPES


9294 
GLAPI
 
APIENTRY
 
glC›yImageSubD©aNV
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

9298 #i‚de‡
GL_NV_dìp_ãxtuª3D


9299 
	#GL_NV_dìp_ãxtuª3D
 1

	)

9300 
	#GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
 0x90D0

	)

9301 
	#GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
 0x90D1

	)

9304 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


9305 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

9306 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

9307 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

9308 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

9309 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

9310 (
APIENTRYP
 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

9311 (
APIENTRYP
 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

9312 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

9313 #ifde‡
GL_GLEXT_PROTOTYPES


9314 
GLAPI
 
APIENTRY
 
glDïthR™gedNV
 (
GLdoubÀ
 
zNór
, GLdoubÀ 
zF¨
);

9315 
GLAPI
 
APIENTRY
 
glCÀ¨DïthdNV
 (
GLdoubÀ
 
dïth
);

9316 
GLAPI
 
APIENTRY
 
glDïthBoundsdNV
 (
GLdoubÀ
 
zmö
, GLdoubÀ 
zmax
);

9320 #i‚de‡
GL_NV_dïth_˛amp


9321 
	#GL_NV_dïth_˛amp
 1

	)

9322 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

9325 #i‚de‡
GL_NV_døw_ãxtuª


9326 
	#GL_NV_døw_ãxtuª
 1

	)

9327 (
APIENTRYP
 
	tPFNGLDRAWTEXTURENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
, 
	tGLÊﬂt
 
	tx0
, GLÊﬂà
	ty0
, GLÊﬂà
	tx1
, GLÊﬂà
	ty1
, GLÊﬂà
	tz
, GLÊﬂà
	ts0
, GLÊﬂà
	tt0
, GLÊﬂà
	ts1
, GLÊﬂà
	tt1
);

9328 #ifde‡
GL_GLEXT_PROTOTYPES


9329 
GLAPI
 
APIENTRY
 
glDøwTextuªNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
, 
GLÊﬂt
 
x0
, GLÊﬂà
y0
, GLÊﬂà
x1
, GLÊﬂà
y1
, GLÊﬂà
z
, GLÊﬂà
s0
, GLÊﬂà
t0
, GLÊﬂà
s1
, GLÊﬂà
t1
);

9333 #i‚de‡
GL_NV_evÆu©‹s


9334 
	#GL_NV_evÆu©‹s
 1

	)

9335 
	#GL_EVAL_2D_NV
 0x86C0

	)

9336 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

9337 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

9338 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

9339 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

9340 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

9341 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

9342 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

9343 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

9344 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

9345 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

9346 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

9347 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

9348 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

9349 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

9350 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

9351 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

9352 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

9353 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

9354 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

9355 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

9356 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

9357 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

9358 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

9359 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° *
	tpoöts
);

9360 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9361 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9362 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, *
	tpoöts
);

9363 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9364 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9365 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9366 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9367 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

9368 #ifde‡
GL_GLEXT_PROTOTYPES


9369 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLöt
 
u‹dî
, GLöà
v‹dî
, 
GLboﬁón
 
∑cked
, c⁄° *
poöts
);

9370 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9371 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9372 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLboﬁón
 
∑cked
, *
poöts
);

9373 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9374 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9375 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9376 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9377 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
 
èrgë
, GLíum 
mode
);

9381 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


9382 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

9383 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

9384 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

9385 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

9386 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

9387 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

9388 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

9389 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

9390 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

9391 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

9392 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

9393 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

9394 (
APIENTRYP
 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

9395 (
APIENTRYP
 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

9396 #ifde‡
GL_GLEXT_PROTOTYPES


9397 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efvNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

9398 
GLAPI
 
APIENTRY
 
glSam∂eMaskIndexedNV
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

9399 
GLAPI
 
APIENTRY
 
glTexRídîbuf„rNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

9403 #i‚de‡
GL_NV_„n˚


9404 
	#GL_NV_„n˚
 1

	)

9405 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

9406 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

9407 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

9408 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

9409 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

9410 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9411 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9412 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9413 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9414 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

9415 #ifde‡
GL_GLEXT_PROTOTYPES


9416 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

9417 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

9418 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
 
„n˚
);

9419 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

9420 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9421 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
 
„n˚
);

9422 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

9426 #i‚de‡
GL_NV_fûl_ª˘™gÀ


9427 
	#GL_NV_fûl_ª˘™gÀ
 1

	)

9428 
	#GL_FILL_RECTANGLE_NV
 0x933C

	)

9431 #i‚de‡
GL_NV_Êﬂt_buf„r


9432 
	#GL_NV_Êﬂt_buf„r
 1

	)

9433 
	#GL_FLOAT_R_NV
 0x8880

	)

9434 
	#GL_FLOAT_RG_NV
 0x8881

	)

9435 
	#GL_FLOAT_RGB_NV
 0x8882

	)

9436 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

9437 
	#GL_FLOAT_R16_NV
 0x8884

	)

9438 
	#GL_FLOAT_R32_NV
 0x8885

	)

9439 
	#GL_FLOAT_RG16_NV
 0x8886

	)

9440 
	#GL_FLOAT_RG32_NV
 0x8887

	)

9441 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

9442 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

9443 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

9444 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

9445 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

9446 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

9447 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

9450 #i‚de‡
GL_NV_fog_di°™˚


9451 
	#GL_NV_fog_di°™˚
 1

	)

9452 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

9453 
	#GL_EYE_RADIAL_NV
 0x855B

	)

9454 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

9457 #i‚de‡
GL_NV_‰agmít_covîage_to_cﬁ‹


9458 
	#GL_NV_‰agmít_covîage_to_cﬁ‹
 1

	)

9459 
	#GL_FRAGMENT_COVERAGE_TO_COLOR_NV
 0x92DD

	)

9460 
	#GL_FRAGMENT_COVERAGE_COLOR_NV
 0x92DE

	)

9461 (
APIENTRYP
 
	tPFNGLFRAGMENTCOVERAGECOLORNVPROC
Ë(
	tGLuöt
 
	tcﬁ‹
);

9462 #ifde‡
GL_GLEXT_PROTOTYPES


9463 
GLAPI
 
APIENTRY
 
glFøgmítCovîageCﬁ‹NV
 (
GLuöt
 
cﬁ‹
);

9467 #i‚de‡
GL_NV_‰agmít_¥ogøm


9468 
	#GL_NV_‰agmít_¥ogøm
 1

	)

9469 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

9470 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

9471 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

9472 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

9473 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

9474 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

9475 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9476 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9477 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

9478 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9479 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

9480 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

9481 #ifde‡
GL_GLEXT_PROTOTYPES


9482 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9483 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLÊﬂt
 *
v
);

9484 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

9485 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLdoubÀ
 *
v
);

9486 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
∑øms
);

9487 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 *
∑øms
);

9491 #i‚de‡
GL_NV_‰agmít_¥ogøm2


9492 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

9493 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

9494 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

9495 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

9496 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

9497 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

9500 #i‚de‡
GL_NV_‰agmít_¥ogøm4


9501 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

9504 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


9505 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

9508 #i‚de‡
GL_NV_‰agmít_shadî_öãæock


9509 
	#GL_NV_‰agmít_shadî_öãæock
 1

	)

9512 #i‚de‡
GL_NV_‰amebuf„r_mixed_ßm∂es


9513 
	#GL_NV_‰amebuf„r_mixed_ßm∂es
 1

	)

9514 
	#GL_COVERAGE_MODULATION_TABLE_NV
 0x9331

	)

9515 
	#GL_COLOR_SAMPLES_NV
 0x8E20

	)

9516 
	#GL_DEPTH_SAMPLES_NV
 0x932D

	)

9517 
	#GL_STENCIL_SAMPLES_NV
 0x932E

	)

9518 
	#GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV
 0x932F

	)

9519 
	#GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV
 0x9330

	)

9520 
	#GL_COVERAGE_MODULATION_NV
 0x9332

	)

9521 
	#GL_COVERAGE_MODULATION_TABLE_SIZE_NV
 0x9333

	)

9522 (
APIENTRYP
 
	tPFNGLCOVERAGEMODULATIONTABLENVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9523 (
APIENTRYP
 
	tPFNGLGETCOVERAGEMODULATIONTABLENVPROC
Ë(
	tGLsizei
 
	tbufsize
, 
	tGLÊﬂt
 *
	tv
);

9524 (
APIENTRYP
 
	tPFNGLCOVERAGEMODULATIONNVPROC
Ë(
	tGLíum
 
	tcomp⁄íts
);

9525 #ifde‡
GL_GLEXT_PROTOTYPES


9526 
GLAPI
 
APIENTRY
 
glCovîageModuœti⁄TabÀNV
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
v
);

9527 
GLAPI
 
APIENTRY
 
glGëCovîageModuœti⁄TabÀNV
 (
GLsizei
 
bufsize
, 
GLÊﬂt
 *
v
);

9528 
GLAPI
 
APIENTRY
 
glCovîageModuœti⁄NV
 (
GLíum
 
comp⁄íts
);

9532 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


9533 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

9534 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

9535 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

9536 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

9537 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

9538 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

9539 #ifde‡
GL_GLEXT_PROTOTYPES


9540 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

9544 #i‚de‡
GL_NV_geomëry_¥ogøm4


9545 
	#GL_NV_geomëry_¥ogøm4
 1

	)

9546 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

9547 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

9548 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

9549 (
APIENTRYP
 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

9550 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

9551 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

9552 #ifde‡
GL_GLEXT_PROTOTYPES


9553 
GLAPI
 
APIENTRY
 
glProgømVîãxLimôNV
 (
GLíum
 
èrgë
, 
GLöt
 
limô
);

9554 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

9555 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚EXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

9559 #i‚de‡
GL_NV_geomëry_shadî4


9560 
	#GL_NV_geomëry_shadî4
 1

	)

9563 #i‚de‡
GL_NV_geomëry_shadî_∑s°hrough


9564 
	#GL_NV_geomëry_shadî_∑s°hrough
 1

	)

9567 #i‚de‡
GL_NV_gpu_¥ogøm4


9568 
	#GL_NV_gpu_¥ogøm4
 1

	)

9569 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

9570 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

9571 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

9572 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

9573 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

9574 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

9575 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

9576 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

9577 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

9578 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

9579 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9580 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

9581 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

9582 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9583 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

9584 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

9585 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9586 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

9587 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

9588 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9589 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

9590 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

9591 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

9592 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

9593 #ifde‡
GL_GLEXT_PROTOTYPES


9594 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9595 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

9596 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9597 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

9598 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

9599 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9600 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9601 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

9602 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9603 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

9604 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

9605 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9606 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

9607 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

9608 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

9609 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

9613 #i‚de‡
GL_NV_gpu_¥ogøm5


9614 
	#GL_NV_gpu_¥ogøm5
 1

	)

9615 
	#GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
 0x8E5A

	)

9616 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5B

	)

9617 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5C

	)

9618 
	#GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
 0x8E5D

	)

9619 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5E

	)

9620 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5F

	)

9621 
	#GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
 0x8F44

	)

9622 
	#GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
 0x8F45

	)

9623 (
APIENTRYP
 
	tPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	t∑øms
);

9624 (
APIENTRYP
 
	tPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øm
);

9625 #ifde‡
GL_GLEXT_PROTOTYPES


9626 
GLAPI
 
APIENTRY
 
glProgømSubroutöeP¨amëîsuivNV
 (
GLíum
 
èrgë
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
∑øms
);

9627 
GLAPI
 
APIENTRY
 
glGëProgømSubroutöeP¨amëîuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øm
);

9631 #i‚de‡
GL_NV_gpu_¥ogøm5_mem_exãnded


9632 
	#GL_NV_gpu_¥ogøm5_mem_exãnded
 1

	)

9635 #i‚de‡
GL_NV_gpu_shadî5


9636 
	#GL_NV_gpu_shadî5
 1

	)

9639 #i‚de‡
GL_NV_hÆf_Êﬂt


9640 
	#GL_NV_hÆf_Êﬂt
 1

	)

9641 
	tGLhÆfNV
;

9642 
	#GL_HALF_FLOAT_NV
 0x140B

	)

9643 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

9644 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9645 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

9646 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9647 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

9648 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9649 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

9650 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9651 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

9652 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9653 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

9654 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9655 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

9656 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9657 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

9658 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9659 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

9660 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9661 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

9662 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9663 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

9664 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9665 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

9666 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9667 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

9668 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9669 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

9670 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9671 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

9672 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

9673 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

9674 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9675 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

9676 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

9677 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

9678 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9679 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

9680 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9681 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

9682 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9683 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

9684 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9685 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9686 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9687 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9688 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9689 #ifde‡
GL_GLEXT_PROTOTYPES


9690 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
);

9691 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9692 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

9693 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9694 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

9695 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9696 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
 
nx
, GLhÆfNV 
ny
, GLhÆfNV 
nz
);

9697 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9698 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

9699 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9700 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
, GLhÆfNV 
Æpha
);

9701 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9702 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
 
s
);

9703 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9704 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
);

9705 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9706 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

9707 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9708 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

9709 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9710 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
);

9711 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9712 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
);

9713 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9714 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

9715 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9716 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

9717 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9718 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
 
fog
);

9719 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *
fog
);

9720 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

9721 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9722 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
 
weight
);

9723 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *
weight
);

9724 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
);

9725 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9726 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
);

9727 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9728 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

9729 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9730 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

9731 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9732 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9733 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9734 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9735 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9739 #i‚de‡
GL_NV_öã∫Æf‹m©_ßm∂e_quîy


9740 
	#GL_NV_öã∫Æf‹m©_ßm∂e_quîy
 1

	)

9741 
	#GL_MULTISAMPLES_NV
 0x9371

	)

9742 
	#GL_SUPERSAMPLE_SCALE_X_NV
 0x9372

	)

9743 
	#GL_SUPERSAMPLE_SCALE_Y_NV
 0x9373

	)

9744 
	#GL_CONFORMANT_NV
 0x9374

	)

9745 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATSAMPLEIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	t≤ame
, GLsizeò
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

9746 #ifde‡
GL_GLEXT_PROTOTYPES


9747 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©Sam∂eivNV
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
ßm∂es
, GLíum 
≤ame
, GLsizeò
bufSize
, 
GLöt
 *
∑øms
);

9751 #i‚de‡
GL_NV_light_max_exp⁄ít


9752 
	#GL_NV_light_max_exp⁄ít
 1

	)

9753 
	#GL_MAX_SHININESS_NV
 0x8504

	)

9754 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

9757 #i‚de‡
GL_NV_mu…ißm∂e_covîage


9758 
	#GL_NV_mu…ißm∂e_covîage
 1

	)

9761 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


9762 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

9763 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

9766 #i‚de‡
GL_NV_oc˛usi⁄_quîy


9767 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

9768 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

9769 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

9770 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

9771 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

9772 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

9773 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

9774 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

9775 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

9776 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

9777 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9778 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

9779 #ifde‡
GL_GLEXT_PROTOTYPES


9780 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

9781 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

9782 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

9783 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

9784 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

9785 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9786 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

9790 #i‚de‡
GL_NV_∑cked_dïth_°ícû


9791 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

9792 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

9793 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

9796 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


9797 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

9798 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

9799 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

9800 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

9801 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

9802 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

9803 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9804 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9805 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9806 #ifde‡
GL_GLEXT_PROTOTYPES


9807 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

9808 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9809 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9813 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


9814 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

9817 #i‚de‡
GL_NV_∑th_ªndîög


9818 
	#GL_NV_∑th_ªndîög
 1

	)

9819 
	#GL_PATH_FORMAT_SVG_NV
 0x9070

	)

9820 
	#GL_PATH_FORMAT_PS_NV
 0x9071

	)

9821 
	#GL_STANDARD_FONT_NAME_NV
 0x9072

	)

9822 
	#GL_SYSTEM_FONT_NAME_NV
 0x9073

	)

9823 
	#GL_FILE_NAME_NV
 0x9074

	)

9824 
	#GL_PATH_STROKE_WIDTH_NV
 0x9075

	)

9825 
	#GL_PATH_END_CAPS_NV
 0x9076

	)

9826 
	#GL_PATH_INITIAL_END_CAP_NV
 0x9077

	)

9827 
	#GL_PATH_TERMINAL_END_CAP_NV
 0x9078

	)

9828 
	#GL_PATH_JOIN_STYLE_NV
 0x9079

	)

9829 
	#GL_PATH_MITER_LIMIT_NV
 0x907A

	)

9830 
	#GL_PATH_DASH_CAPS_NV
 0x907B

	)

9831 
	#GL_PATH_INITIAL_DASH_CAP_NV
 0x907C

	)

9832 
	#GL_PATH_TERMINAL_DASH_CAP_NV
 0x907D

	)

9833 
	#GL_PATH_DASH_OFFSET_NV
 0x907E

	)

9834 
	#GL_PATH_CLIENT_LENGTH_NV
 0x907F

	)

9835 
	#GL_PATH_FILL_MODE_NV
 0x9080

	)

9836 
	#GL_PATH_FILL_MASK_NV
 0x9081

	)

9837 
	#GL_PATH_FILL_COVER_MODE_NV
 0x9082

	)

9838 
	#GL_PATH_STROKE_COVER_MODE_NV
 0x9083

	)

9839 
	#GL_PATH_STROKE_MASK_NV
 0x9084

	)

9840 
	#GL_COUNT_UP_NV
 0x9088

	)

9841 
	#GL_COUNT_DOWN_NV
 0x9089

	)

9842 
	#GL_PATH_OBJECT_BOUNDING_BOX_NV
 0x908A

	)

9843 
	#GL_CONVEX_HULL_NV
 0x908B

	)

9844 
	#GL_BOUNDING_BOX_NV
 0x908D

	)

9845 
	#GL_TRANSLATE_X_NV
 0x908E

	)

9846 
	#GL_TRANSLATE_Y_NV
 0x908F

	)

9847 
	#GL_TRANSLATE_2D_NV
 0x9090

	)

9848 
	#GL_TRANSLATE_3D_NV
 0x9091

	)

9849 
	#GL_AFFINE_2D_NV
 0x9092

	)

9850 
	#GL_AFFINE_3D_NV
 0x9094

	)

9851 
	#GL_TRANSPOSE_AFFINE_2D_NV
 0x9096

	)

9852 
	#GL_TRANSPOSE_AFFINE_3D_NV
 0x9098

	)

9853 
	#GL_UTF8_NV
 0x909A

	)

9854 
	#GL_UTF16_NV
 0x909B

	)

9855 
	#GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
 0x909C

	)

9856 
	#GL_PATH_COMMAND_COUNT_NV
 0x909D

	)

9857 
	#GL_PATH_COORD_COUNT_NV
 0x909E

	)

9858 
	#GL_PATH_DASH_ARRAY_COUNT_NV
 0x909F

	)

9859 
	#GL_PATH_COMPUTED_LENGTH_NV
 0x90A0

	)

9860 
	#GL_PATH_FILL_BOUNDING_BOX_NV
 0x90A1

	)

9861 
	#GL_PATH_STROKE_BOUNDING_BOX_NV
 0x90A2

	)

9862 
	#GL_SQUARE_NV
 0x90A3

	)

9863 
	#GL_ROUND_NV
 0x90A4

	)

9864 
	#GL_TRIANGULAR_NV
 0x90A5

	)

9865 
	#GL_BEVEL_NV
 0x90A6

	)

9866 
	#GL_MITER_REVERT_NV
 0x90A7

	)

9867 
	#GL_MITER_TRUNCATE_NV
 0x90A8

	)

9868 
	#GL_SKIP_MISSING_GLYPH_NV
 0x90A9

	)

9869 
	#GL_USE_MISSING_GLYPH_NV
 0x90AA

	)

9870 
	#GL_PATH_ERROR_POSITION_NV
 0x90AB

	)

9871 
	#GL_ACCUM_ADJACENT_PAIRS_NV
 0x90AD

	)

9872 
	#GL_ADJACENT_PAIRS_NV
 0x90AE

	)

9873 
	#GL_FIRST_TO_REST_NV
 0x90AF

	)

9874 
	#GL_PATH_GEN_MODE_NV
 0x90B0

	)

9875 
	#GL_PATH_GEN_COEFF_NV
 0x90B1

	)

9876 
	#GL_PATH_GEN_COMPONENTS_NV
 0x90B3

	)

9877 
	#GL_PATH_STENCIL_FUNC_NV
 0x90B7

	)

9878 
	#GL_PATH_STENCIL_REF_NV
 0x90B8

	)

9879 
	#GL_PATH_STENCIL_VALUE_MASK_NV
 0x90B9

	)

9880 
	#GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
 0x90BD

	)

9881 
	#GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
 0x90BE

	)

9882 
	#GL_PATH_COVER_DEPTH_FUNC_NV
 0x90BF

	)

9883 
	#GL_PATH_DASH_OFFSET_RESET_NV
 0x90B4

	)

9884 
	#GL_MOVE_TO_RESETS_NV
 0x90B5

	)

9885 
	#GL_MOVE_TO_CONTINUES_NV
 0x90B6

	)

9886 
	#GL_CLOSE_PATH_NV
 0x00

	)

9887 
	#GL_MOVE_TO_NV
 0x02

	)

9888 
	#GL_RELATIVE_MOVE_TO_NV
 0x03

	)

9889 
	#GL_LINE_TO_NV
 0x04

	)

9890 
	#GL_RELATIVE_LINE_TO_NV
 0x05

	)

9891 
	#GL_HORIZONTAL_LINE_TO_NV
 0x06

	)

9892 
	#GL_RELATIVE_HORIZONTAL_LINE_TO_NV
 0x07

	)

9893 
	#GL_VERTICAL_LINE_TO_NV
 0x08

	)

9894 
	#GL_RELATIVE_VERTICAL_LINE_TO_NV
 0x09

	)

9895 
	#GL_QUADRATIC_CURVE_TO_NV
 0x0A

	)

9896 
	#GL_RELATIVE_QUADRATIC_CURVE_TO_NV
 0x0B

	)

9897 
	#GL_CUBIC_CURVE_TO_NV
 0x0C

	)

9898 
	#GL_RELATIVE_CUBIC_CURVE_TO_NV
 0x0D

	)

9899 
	#GL_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0E

	)

9900 
	#GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0F

	)

9901 
	#GL_SMOOTH_CUBIC_CURVE_TO_NV
 0x10

	)

9902 
	#GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
 0x11

	)

9903 
	#GL_SMALL_CCW_ARC_TO_NV
 0x12

	)

9904 
	#GL_RELATIVE_SMALL_CCW_ARC_TO_NV
 0x13

	)

9905 
	#GL_SMALL_CW_ARC_TO_NV
 0x14

	)

9906 
	#GL_RELATIVE_SMALL_CW_ARC_TO_NV
 0x15

	)

9907 
	#GL_LARGE_CCW_ARC_TO_NV
 0x16

	)

9908 
	#GL_RELATIVE_LARGE_CCW_ARC_TO_NV
 0x17

	)

9909 
	#GL_LARGE_CW_ARC_TO_NV
 0x18

	)

9910 
	#GL_RELATIVE_LARGE_CW_ARC_TO_NV
 0x19

	)

9911 
	#GL_RESTART_PATH_NV
 0xF0

	)

9912 
	#GL_DUP_FIRST_CUBIC_CURVE_TO_NV
 0xF2

	)

9913 
	#GL_DUP_LAST_CUBIC_CURVE_TO_NV
 0xF4

	)

9914 
	#GL_RECT_NV
 0xF6

	)

9915 
	#GL_CIRCULAR_CCW_ARC_TO_NV
 0xF8

	)

9916 
	#GL_CIRCULAR_CW_ARC_TO_NV
 0xFA

	)

9917 
	#GL_CIRCULAR_TANGENT_ARC_TO_NV
 0xFC

	)

9918 
	#GL_ARC_TO_NV
 0xFE

	)

9919 
	#GL_RELATIVE_ARC_TO_NV
 0xFF

	)

9920 
	#GL_BOLD_BIT_NV
 0x01

	)

9921 
	#GL_ITALIC_BIT_NV
 0x02

	)

9922 
	#GL_GLYPH_WIDTH_BIT_NV
 0x01

	)

9923 
	#GL_GLYPH_HEIGHT_BIT_NV
 0x02

	)

9924 
	#GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
 0x04

	)

9925 
	#GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
 0x08

	)

9926 
	#GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
 0x10

	)

9927 
	#GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
 0x20

	)

9928 
	#GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
 0x40

	)

9929 
	#GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
 0x80

	)

9930 
	#GL_GLYPH_HAS_KERNING_BIT_NV
 0x100

	)

9931 
	#GL_FONT_X_MIN_BOUNDS_BIT_NV
 0x00010000

	)

9932 
	#GL_FONT_Y_MIN_BOUNDS_BIT_NV
 0x00020000

	)

9933 
	#GL_FONT_X_MAX_BOUNDS_BIT_NV
 0x00040000

	)

9934 
	#GL_FONT_Y_MAX_BOUNDS_BIT_NV
 0x00080000

	)

9935 
	#GL_FONT_UNITS_PER_EM_BIT_NV
 0x00100000

	)

9936 
	#GL_FONT_ASCENDER_BIT_NV
 0x00200000

	)

9937 
	#GL_FONT_DESCENDER_BIT_NV
 0x00400000

	)

9938 
	#GL_FONT_HEIGHT_BIT_NV
 0x00800000

	)

9939 
	#GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
 0x01000000

	)

9940 
	#GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
 0x02000000

	)

9941 
	#GL_FONT_UNDERLINE_POSITION_BIT_NV
 0x04000000

	)

9942 
	#GL_FONT_UNDERLINE_THICKNESS_BIT_NV
 0x08000000

	)

9943 
	#GL_FONT_HAS_KERNING_BIT_NV
 0x10000000

	)

9944 
	#GL_ROUNDED_RECT_NV
 0xE8

	)

9945 
	#GL_RELATIVE_ROUNDED_RECT_NV
 0xE9

	)

9946 
	#GL_ROUNDED_RECT2_NV
 0xEA

	)

9947 
	#GL_RELATIVE_ROUNDED_RECT2_NV
 0xEB

	)

9948 
	#GL_ROUNDED_RECT4_NV
 0xEC

	)

9949 
	#GL_RELATIVE_ROUNDED_RECT4_NV
 0xED

	)

9950 
	#GL_ROUNDED_RECT8_NV
 0xEE

	)

9951 
	#GL_RELATIVE_ROUNDED_RECT8_NV
 0xEF

	)

9952 
	#GL_RELATIVE_RECT_NV
 0xF7

	)

9953 
	#GL_FONT_GLYPHS_AVAILABLE_NV
 0x9368

	)

9954 
	#GL_FONT_TARGET_UNAVAILABLE_NV
 0x9369

	)

9955 
	#GL_FONT_UNAVAILABLE_NV
 0x936A

	)

9956 
	#GL_FONT_UNINTELLIGIBLE_NV
 0x936B

	)

9957 
	#GL_CONIC_CURVE_TO_NV
 0x1A

	)

9958 
	#GL_RELATIVE_CONIC_CURVE_TO_NV
 0x1B

	)

9959 
	#GL_FONT_NUM_GLYPH_INDICES_BIT_NV
 0x20000000

	)

9960 
	#GL_STANDARD_FONT_FORMAT_NV
 0x936C

	)

9961 
	#GL_2_BYTES_NV
 0x1407

	)

9962 
	#GL_3_BYTES_NV
 0x1408

	)

9963 
	#GL_4_BYTES_NV
 0x1409

	)

9964 
	#GL_EYE_LINEAR_NV
 0x2400

	)

9965 
	#GL_OBJECT_LINEAR_NV
 0x2401

	)

9966 
	#GL_CONSTANT_NV
 0x8576

	)

9967 
	#GL_PATH_FOG_GEN_MODE_NV
 0x90AC

	)

9968 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

9969 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

9970 
	#GL_PATH_GEN_COLOR_FORMAT_NV
 0x90B2

	)

9971 
	#GL_PATH_PROJECTION_NV
 0x1701

	)

9972 
	#GL_PATH_MODELVIEW_NV
 0x1700

	)

9973 
	#GL_PATH_MODELVIEW_STACK_DEPTH_NV
 0x0BA3

	)

9974 
	#GL_PATH_MODELVIEW_MATRIX_NV
 0x0BA6

	)

9975 
	#GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV
 0x0D36

	)

9976 
	#GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV
 0x84E3

	)

9977 
	#GL_PATH_PROJECTION_STACK_DEPTH_NV
 0x0BA4

	)

9978 
	#GL_PATH_PROJECTION_MATRIX_NV
 0x0BA7

	)

9979 
	#GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV
 0x0D38

	)

9980 
	#GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV
 0x84E4

	)

9981 
	#GL_FRAGMENT_INPUT_NV
 0x936D

	)

9982 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENPATHSNVPROC
Ë(
	tGLsizei
 
	tønge
);

9983 (
APIENTRYP
 
	tPFNGLDELETEPATHSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tønge
);

9984 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
);

9985 (
APIENTRYP
 
	tPFNGLPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9986 (
APIENTRYP
 
	tPFNGLPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9987 (
APIENTRYP
 
	tPFNGLPATHSUBCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tcomm™dSèπ
, GLsizeò
	tcomm™dsToDñëe
, GLsizeò
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9988 (
APIENTRYP
 
	tPFNGLPATHSUBCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tco‹dSèπ
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9989 (
APIENTRYP
 
	tPFNGLPATHSTRINGNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tf‹m©
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	t∑thSåög
);

9990 (
APIENTRYP
 
	tPFNGLPATHGLYPHSNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	tty≥
, c⁄° *
	tch¨codes
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9991 (
APIENTRYP
 
	tPFNGLPATHGLYPHRANGENVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°Glyph
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9992 (
APIENTRYP
 
	tPFNGLWEIGHTPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, 
	tGLsizei
 
	tnumP©hs
, c⁄° GLuöà*
	t∑ths
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

9993 (
APIENTRYP
 
	tPFNGLCOPYPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
);

9994 (
APIENTRYP
 
	tPFNGLINTERPOLATEPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t∑thA
, GLuöà
	t∑thB
, 
	tGLÊﬂt
 
	tweight
);

9995 (
APIENTRYP
 
	tPFNGLTRANSFORMPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
, 
	tGLíum
 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9996 (
APIENTRYP
 
	tPFNGLPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	tvÆue
);

9997 (
APIENTRYP
 
	tPFNGLPATHPARAMETERINVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

9998 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9999 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

10000 (
APIENTRYP
 
	tPFNGLPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tdashCou¡
, c⁄° 
	tGLÊﬂt
 *
	tdashAºay
);

10001 (
APIENTRYP
 
	tPFNGLPATHSTENCILFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

10002 (
APIENTRYP
 
	tPFNGLPATHSTENCILDEPTHOFFSETNVPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

10003 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
);

10004 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
);

10005 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10006 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10007 (
APIENTRYP
 
	tPFNGLPATHCOVERDEPTHFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
);

10008 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

10009 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

10010 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10011 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10012 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

10013 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

10014 (
APIENTRYP
 
	tPFNGLGETPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLubyã
 *
	tcomm™ds
);

10015 (
APIENTRYP
 
	tPFNGLGETPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tco‹ds
);

10016 (
APIENTRYP
 
	tPFNGLGETPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tdashAºay
);

10017 (
APIENTRYP
 
	tPFNGLGETPATHMETRICSNVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

10018 (
APIENTRYP
 
	tPFNGLGETPATHMETRICRANGENVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLuöt
 
	tfú°P©hName
, 
	tGLsizei
 
	tnumP©hs
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

10019 (
APIENTRYP
 
	tPFNGLGETPATHSPACINGNVPROC
Ë(
	tGLíum
 
	t∑thLi°Mode
, 
	tGLsizei
 
	tnumP©hs
, GLíum 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLÊﬂt
 
	tadv™˚SˇÀ
, GLÊﬂà
	tkînögSˇÀ
, GLíum 
	tå™sf‹mTy≥
, GLÊﬂà*
	tªtu∫edS∑cög
);

10020 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, GLuöà
	tmask
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10021 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10022 
GLÊﬂt
 (
	tAPIENTRYP
 
	tPFNGLGETPATHLENGTHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
);

10023 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLPOINTALONGPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
, 
	tGLÊﬂt
 
	tdi°™˚
, GLÊﬂà*
	tx
, GLÊﬂà*
	ty
, GLÊﬂà*
	tèngítX
, GLÊﬂà*
	tèngítY
);

10024 (
APIENTRYP
 
	tPFNGLMATRIXLOAD3X2FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10025 (
APIENTRYP
 
	tPFNGLMATRIXLOAD3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10026 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSE3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10027 (
APIENTRYP
 
	tPFNGLMATRIXMULT3X2FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10028 (
APIENTRYP
 
	tPFNGLMATRIXMULT3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10029 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSE3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10030 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tcovîMode
);

10031 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, 
	tGLíum
 
	tcovîMode
);

10032 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10033 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10034 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHGLYPHINDEXRANGENVPROC
Ë(
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLuöt
 
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
, GLuöà
	tba£AndCou¡
[2]);

10035 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHGLYPHINDEXARRAYNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°GlyphIndex
, 
	tGLsizei
 
	tnumGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

10036 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, 
	tGLsizeùå
 
	tf⁄tSize
, c⁄° *
	tf⁄tD©a
, 
	tGLsizei
 
	tÁ˚Index
, GLuöà
	tfú°GlyphIndex
, GLsizeò
	tnumGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

10037 (
APIENTRYP
 
	tPFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLíum
 
	tgíMode
, GLöà
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

10038 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEFVNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLÊﬂt
 *
	t∑øms
);

10039 (
APIENTRYP
 
	tPFNGLPATHCOLORGENNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	tgíMode
, GLíum 
	tcﬁ‹F‹m©
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

10040 (
APIENTRYP
 
	tPFNGLPATHTEXGENNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	tgíMode
, 
	tGLöt
 
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

10041 (
APIENTRYP
 
	tPFNGLPATHFOGGENNVPROC
Ë(
	tGLíum
 
	tgíMode
);

10042 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENIVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

10043 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENFVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

10044 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENIVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

10045 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENFVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

10046 #ifde‡
GL_GLEXT_PROTOTYPES


10047 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíP©hsNV
 (
GLsizei
 
ønge
);

10048 
GLAPI
 
APIENTRY
 
glDñëeP©hsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
ønge
);

10049 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsP©hNV
 (
GLuöt
 
∑th
);

10050 
GLAPI
 
APIENTRY
 
glP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10051 
GLAPI
 
APIENTRY
 
glP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10052 
GLAPI
 
APIENTRY
 
glP©hSubComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
comm™dSèπ
, GLsizeò
comm™dsToDñëe
, GLsizeò
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10053 
GLAPI
 
APIENTRY
 
glP©hSubCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
co‹dSèπ
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10054 
GLAPI
 
APIENTRY
 
glP©hSåögNV
 (
GLuöt
 
∑th
, 
GLíum
 
f‹m©
, 
GLsizei
 
Àngth
, c⁄° *
∑thSåög
);

10055 
GLAPI
 
APIENTRY
 
glP©hGlyphsNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLsizei
 
numGlyphs
, GLíum 
ty≥
, c⁄° *
ch¨codes
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10056 
GLAPI
 
APIENTRY
 
glP©hGlyphR™geNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°Glyph
, 
GLsizei
 
numGlyphs
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10057 
GLAPI
 
APIENTRY
 
glWeightP©hsNV
 (
GLuöt
 
ªsu…P©h
, 
GLsizei
 
numP©hs
, c⁄° GLuöà*
∑ths
, c⁄° 
GLÊﬂt
 *
weights
);

10058 
GLAPI
 
APIENTRY
 
glC›yP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
);

10059 
GLAPI
 
APIENTRY
 
glI¡îpﬁ©eP©hsNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
∑thA
, GLuöà
∑thB
, 
GLÊﬂt
 
weight
);

10060 
GLAPI
 
APIENTRY
 
glTønsf‹mP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
, 
GLíum
 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10061 
GLAPI
 
APIENTRY
 
glP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
vÆue
);

10062 
GLAPI
 
APIENTRY
 
glP©hP¨amëîiNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

10063 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆue
);

10064 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

10065 
GLAPI
 
APIENTRY
 
glP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLsizei
 
dashCou¡
, c⁄° 
GLÊﬂt
 *
dashAºay
);

10066 
GLAPI
 
APIENTRY
 
glP©hSãncûFuncNV
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

10067 
GLAPI
 
APIENTRY
 
glP©hSãncûDïthOff£tNV
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

10068 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
);

10069 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
);

10070 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10071 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10072 
GLAPI
 
APIENTRY
 
glP©hCovîDïthFuncNV
 (
GLíum
 
func
);

10073 
GLAPI
 
APIENTRY
 
glCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

10074 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

10075 
GLAPI
 
APIENTRY
 
glCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10076 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10077 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 *
vÆue
);

10078 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10079 
GLAPI
 
APIENTRY
 
glGëP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLubyã
 *
comm™ds
);

10080 
GLAPI
 
APIENTRY
 
glGëP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
co‹ds
);

10081 
GLAPI
 
APIENTRY
 
glGëP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
dashAºay
);

10082 
GLAPI
 
APIENTRY
 
glGëP©hMëricsNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

10083 
GLAPI
 
APIENTRY
 
glGëP©hMëricR™geNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLuöt
 
fú°P©hName
, 
GLsizei
 
numP©hs
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

10084 
GLAPI
 
APIENTRY
 
glGëP©hS∑cögNV
 (
GLíum
 
∑thLi°Mode
, 
GLsizei
 
numP©hs
, GLíum 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLÊﬂt
 
adv™˚SˇÀ
, GLÊﬂà
kînögSˇÀ
, GLíum 
å™sf‹mTy≥
, GLÊﬂà*
ªtu∫edS∑cög
);

10085 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInFûlP©hNV
 (
GLuöt
 
∑th
, GLuöà
mask
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10086 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10087 
GLAPI
 
GLÊﬂt
 
APIENTRY
 
glGëP©hLígthNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
);

10088 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glPoötAl⁄gP©hNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
, 
GLÊﬂt
 
di°™˚
, GLÊﬂà*
x
, GLÊﬂà*
y
, GLÊﬂà*
èngítX
, GLÊﬂà*
èngítY
);

10089 
GLAPI
 
APIENTRY
 
glM©rixLﬂd3x2fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10090 
GLAPI
 
APIENTRY
 
glM©rixLﬂd3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10091 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10092 
GLAPI
 
APIENTRY
 
glM©rixMu…3x2fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10093 
GLAPI
 
APIENTRY
 
glM©rixMu…3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10094 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10095 
GLAPI
 
APIENTRY
 
glSãncûThíCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
, GLíum 
covîMode
);

10096 
GLAPI
 
APIENTRY
 
glSãncûThíCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, 
GLíum
 
covîMode
);

10097 
GLAPI
 
APIENTRY
 
glSãncûThíCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10098 
GLAPI
 
APIENTRY
 
glSãncûThíCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10099 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hGlyphIndexR™geNV
 (GLíum 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLuöt
 
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
, GLuöà
ba£AndCou¡
[2]);

10100 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hGlyphIndexAºayNV
 (
GLuöt
 
fú°P©hName
, GLíum 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°GlyphIndex
, 
GLsizei
 
numGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10101 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hMem‹yGlyphIndexAºayNV
 (
GLuöt
 
fú°P©hName
, GLíum 
f⁄tT¨gë
, 
GLsizeùå
 
f⁄tSize
, c⁄° *
f⁄tD©a
, 
GLsizei
 
Á˚Index
, GLuöà
fú°GlyphIndex
, GLsizeò
numGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10102 
GLAPI
 
APIENTRY
 
glProgømP©hFøgmítI≈utGíNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLíum
 
gíMode
, GLöà
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10103 
GLAPI
 
APIENTRY
 
glGëProgømResour˚fvNV
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLÊﬂt
 *
∑øms
);

10104 
GLAPI
 
APIENTRY
 
glP©hCﬁ‹GíNV
 (
GLíum
 
cﬁ‹
, GLíum 
gíMode
, GLíum 
cﬁ‹F‹m©
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10105 
GLAPI
 
APIENTRY
 
glP©hTexGíNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
gíMode
, 
GLöt
 
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10106 
GLAPI
 
APIENTRY
 
glP©hFogGíNV
 (
GLíum
 
gíMode
);

10107 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GíivNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

10108 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GífvNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10109 
GLAPI
 
APIENTRY
 
glGëP©hTexGíivNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

10110 
GLAPI
 
APIENTRY
 
glGëP©hTexGífvNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10114 #i‚de‡
GL_NV_∑th_ªndîög_sh¨ed_edge


10115 
	#GL_NV_∑th_ªndîög_sh¨ed_edge
 1

	)

10116 
	#GL_SHARED_EDGE_NV
 0xC0

	)

10119 #i‚de‡
GL_NV_pixñ_d©a_ønge


10120 
	#GL_NV_pixñ_d©a_ønge
 1

	)

10121 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

10122 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

10123 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

10124 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

10125 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

10126 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

10127 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

10128 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

10129 #ifde‡
GL_GLEXT_PROTOTYPES


10130 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

10131 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
 
èrgë
);

10135 #i‚de‡
GL_NV_poöt_•rôe


10136 
	#GL_NV_poöt_•rôe
 1

	)

10137 
	#GL_POINT_SPRITE_NV
 0x8861

	)

10138 
	#GL_COORD_REPLACE_NV
 0x8862

	)

10139 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

10140 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10141 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10142 #ifde‡
GL_GLEXT_PROTOTYPES


10143 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10144 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10148 #i‚de‡
GL_NV_¥e£¡_video


10149 
	#GL_NV_¥e£¡_video
 1

	)

10150 
	#GL_FRAME_NV
 0x8E26

	)

10151 
	#GL_FIELDS_NV
 0x8E27

	)

10152 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

10153 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

10154 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

10155 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

10156 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

10157 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

10158 (
APIENTRYP
 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10159 (
APIENTRYP
 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

10160 (
APIENTRYP
 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

10161 (
APIENTRYP
 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10162 #ifde‡
GL_GLEXT_PROTOTYPES


10163 
GLAPI
 
APIENTRY
 
glPª£¡FømeKeyedNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLuöà
key0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLuöà
key1
);

10164 
GLAPI
 
APIENTRY
 
glPª£¡FømeDuÆFûlNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLíum 
èrgë2
, GLuöà
fûl2
, GLíum 
èrgë3
, GLuöà
fûl3
);

10165 
GLAPI
 
APIENTRY
 
glGëVideoivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10166 
GLAPI
 
APIENTRY
 
glGëVideouivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

10167 
GLAPI
 
APIENTRY
 
glGëVideoi64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

10168 
GLAPI
 
APIENTRY
 
glGëVideoui64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10172 #i‚de‡
GL_NV_¥imôive_ª°¨t


10173 
	#GL_NV_¥imôive_ª°¨t
 1

	)

10174 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

10175 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

10176 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

10177 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

10178 #ifde‡
GL_GLEXT_PROTOTYPES


10179 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

10180 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
 
ödex
);

10184 #i‚de‡
GL_NV_ªgi°î_comböîs


10185 
	#GL_NV_ªgi°î_comböîs
 1

	)

10186 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

10187 
	#GL_VARIABLE_A_NV
 0x8523

	)

10188 
	#GL_VARIABLE_B_NV
 0x8524

	)

10189 
	#GL_VARIABLE_C_NV
 0x8525

	)

10190 
	#GL_VARIABLE_D_NV
 0x8526

	)

10191 
	#GL_VARIABLE_E_NV
 0x8527

	)

10192 
	#GL_VARIABLE_F_NV
 0x8528

	)

10193 
	#GL_VARIABLE_G_NV
 0x8529

	)

10194 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

10195 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

10196 
	#GL_SPARE0_NV
 0x852E

	)

10197 
	#GL_SPARE1_NV
 0x852F

	)

10198 
	#GL_DISCARD_NV
 0x8530

	)

10199 
	#GL_E_TIMES_F_NV
 0x8531

	)

10200 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

10201 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

10202 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

10203 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

10204 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

10205 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

10206 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

10207 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

10208 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

10209 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

10210 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

10211 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

10212 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

10213 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

10214 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

10215 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

10216 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

10217 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

10218 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

10219 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

10220 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

10221 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

10222 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

10223 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

10224 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

10225 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

10226 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

10227 
	#GL_COMBINER0_NV
 0x8550

	)

10228 
	#GL_COMBINER1_NV
 0x8551

	)

10229 
	#GL_COMBINER2_NV
 0x8552

	)

10230 
	#GL_COMBINER3_NV
 0x8553

	)

10231 
	#GL_COMBINER4_NV
 0x8554

	)

10232 
	#GL_COMBINER5_NV
 0x8555

	)

10233 
	#GL_COMBINER6_NV
 0x8556

	)

10234 
	#GL_COMBINER7_NV
 0x8557

	)

10235 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10236 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10237 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10238 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10239 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

10240 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

10241 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

10242 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10243 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10244 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10245 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10246 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10247 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10248 #ifde‡
GL_GLEXT_PROTOTYPES


10249 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10250 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10251 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10252 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10253 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

10254 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
abOuçut
, GLíum 
cdOuçut
, GLíum 
sumOuçut
, GLíum 
sˇÀ
, GLíum 
büs
, 
GLboﬁón
 
abDŸProdu˘
, GLboﬁó¿
cdDŸProdu˘
, GLboﬁó¿
muxSum
);

10255 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

10256 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10257 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10258 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10259 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10260 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10261 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10265 #i‚de‡
GL_NV_ªgi°î_comböîs2


10266 
	#GL_NV_ªgi°î_comböîs2
 1

	)

10267 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

10268 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10269 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10270 #ifde‡
GL_GLEXT_PROTOTYPES


10271 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10272 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10276 #i‚de‡
GL_NV_robu°√ss_video_mem‹y_purge


10277 
	#GL_NV_robu°√ss_video_mem‹y_purge
 1

	)

10278 
	#GL_PURGED_CONTEXT_RESET_NV
 0x92BB

	)

10281 #i‚de‡
GL_NV_ßm∂e_loˇti⁄s


10282 
	#GL_NV_ßm∂e_loˇti⁄s
 1

	)

10283 
	#GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV
 0x933D

	)

10284 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV
 0x933E

	)

10285 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV
 0x933F

	)

10286 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV
 0x9340

	)

10287 
	#GL_SAMPLE_LOCATION_NV
 0x8E50

	)

10288 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_NV
 0x9341

	)

10289 
	#GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV
 0x9342

	)

10290 
	#GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV
 0x9343

	)

10291 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10292 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, GLuöà
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10293 (
APIENTRYP
 
	tPFNGLRESOLVEDEPTHVALUESNVPROC
) ();

10294 #ifde‡
GL_GLEXT_PROTOTYPES


10295 
GLAPI
 
APIENTRY
 
glFømebuf„rSam∂eLoˇti⁄sfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10296 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rSam∂eLoˇti⁄sfvNV
 (
GLuöt
 
‰amebuf„r
, GLuöà
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10297 
GLAPI
 
APIENTRY
 
glResﬁveDïthVÆuesNV
 ();

10301 #i‚de‡
GL_NV_ßm∂e_mask_ovîride_covîage


10302 
	#GL_NV_ßm∂e_mask_ovîride_covîage
 1

	)

10305 #i‚de‡
GL_NV_shadî_©omic_cou¡îs


10306 
	#GL_NV_shadî_©omic_cou¡îs
 1

	)

10309 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


10310 
	#GL_NV_shadî_©omic_Êﬂt
 1

	)

10313 #i‚de‡
GL_NV_shadî_©omic_Êﬂt64


10314 
	#GL_NV_shadî_©omic_Êﬂt64
 1

	)

10317 #i‚de‡
GL_NV_shadî_©omic_Â16_ve˘‹


10318 
	#GL_NV_shadî_©omic_Â16_ve˘‹
 1

	)

10321 #i‚de‡
GL_NV_shadî_©omic_öt64


10322 
	#GL_NV_shadî_©omic_öt64
 1

	)

10325 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


10326 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

10327 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

10328 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

10329 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

10330 (
APIENTRYP
 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

10331 (
APIENTRYP
 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

10332 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

10333 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

10334 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10335 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10336 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10337 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10338 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
 *
	tªsu…
);

10339 (
APIENTRYP
 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

10340 (
APIENTRYP
 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

10341 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

10342 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

10343 #ifde‡
GL_GLEXT_PROTOTYPES


10344 
GLAPI
 
APIENTRY
 
glMakeBuf„rResidítNV
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

10345 
GLAPI
 
APIENTRY
 
glMakeBuf„rN⁄ResidítNV
 (
GLíum
 
èrgë
);

10346 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rResidítNV
 (
GLíum
 
èrgë
);

10347 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

10348 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rN⁄ResidítNV
 (
GLuöt
 
buf„r
);

10349 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
);

10350 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîui64vNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10351 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîui64vNV
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10352 
GLAPI
 
APIENTRY
 
glGëI¡egîui64vNV
 (
GLíum
 
vÆue
, 
GLuöt64EXT
 *
ªsu…
);

10353 
GLAPI
 
APIENTRY
 
glUnif‹mui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

10354 
GLAPI
 
APIENTRY
 
glUnif‹mui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

10355 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

10356 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

10360 #i‚de‡
GL_NV_shadî_buf„r_°‹e


10361 
	#GL_NV_shadî_buf„r_°‹e
 1

	)

10362 
	#GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
 0x00000010

	)

10365 #i‚de‡
GL_NV_shadî_°‹age_buf„r_obje˘


10366 
	#GL_NV_shadî_°‹age_buf„r_obje˘
 1

	)

10369 #i‚de‡
GL_NV_shadî_thªad_group


10370 
	#GL_NV_shadî_thªad_group
 1

	)

10371 
	#GL_WARP_SIZE_NV
 0x9339

	)

10372 
	#GL_WARPS_PER_SM_NV
 0x933A

	)

10373 
	#GL_SM_COUNT_NV
 0x933B

	)

10376 #i‚de‡
GL_NV_shadî_thªad_shufÊe


10377 
	#GL_NV_shadî_thªad_shufÊe
 1

	)

10380 #i‚de‡
GL_NV_°îeo_võw_ªndîög


10381 
	#GL_NV_°îeo_võw_ªndîög
 1

	)

10384 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


10385 
	#GL_NV_ãs£Œ©i⁄_¥ogøm5
 1

	)

10386 
	#GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
 0x86D8

	)

10387 
	#GL_TESS_CONTROL_PROGRAM_NV
 0x891E

	)

10388 
	#GL_TESS_EVALUATION_PROGRAM_NV
 0x891F

	)

10389 
	#GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
 0x8C74

	)

10390 
	#GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
 0x8C75

	)

10393 #i‚de‡
GL_NV_ãxgí_emboss


10394 
	#GL_NV_ãxgí_emboss
 1

	)

10395 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

10396 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

10397 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

10400 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


10401 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

10402 
	#GL_NORMAL_MAP_NV
 0x8511

	)

10403 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

10406 #i‚de‡
GL_NV_ãxtuª_b¨rõr


10407 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

10408 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

10409 #ifde‡
GL_GLEXT_PROTOTYPES


10410 
GLAPI
 
APIENTRY
 
glTextuªB¨rõrNV
 ();

10414 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


10415 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

10418 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


10419 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

10420 
	#GL_COMBINE4_NV
 0x8503

	)

10421 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

10422 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

10423 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

10424 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

10427 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


10428 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

10429 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

10432 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


10433 
	#GL_NV_ãxtuª_mu…ißm∂e
 1

	)

10434 
	#GL_TEXTURE_COVERAGE_SAMPLES_NV
 0x9045

	)

10435 
	#GL_TEXTURE_COLOR_SAMPLES_NV
 0x9046

	)

10436 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10437 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10438 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10439 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10440 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10441 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10442 #ifde‡
GL_GLEXT_PROTOTYPES


10443 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10444 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10445 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10446 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10447 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10448 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10452 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


10453 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

10454 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

10455 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

10456 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

10457 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

10460 #i‚de‡
GL_NV_ãxtuª_shadî


10461 
	#GL_NV_ãxtuª_shadî
 1

	)

10462 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

10463 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

10464 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

10465 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

10466 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

10467 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

10468 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

10469 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

10470 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

10471 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

10472 
	#GL_CULL_MODES_NV
 0x86E0

	)

10473 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

10474 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

10475 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

10476 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 0x86E1

	)

10477 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 0x86E2

	)

10478 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 0x86E3

	)

10479 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

10480 
	#GL_CONST_EYE_NV
 0x86E5

	)

10481 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

10482 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

10483 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

10484 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

10485 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

10486 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

10487 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

10488 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

10489 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

10490 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

10491 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

10492 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

10493 
	#GL_HILO_NV
 0x86F4

	)

10494 
	#GL_DSDT_NV
 0x86F5

	)

10495 
	#GL_DSDT_MAG_NV
 0x86F6

	)

10496 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

10497 
	#GL_HILO16_NV
 0x86F8

	)

10498 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

10499 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

10500 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

10501 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

10502 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

10503 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

10504 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

10505 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

10506 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

10507 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

10508 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

10509 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

10510 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

10511 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

10512 
	#GL_DSDT8_NV
 0x8709

	)

10513 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

10514 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

10515 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

10516 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

10517 
	#GL_HI_SCALE_NV
 0x870E

	)

10518 
	#GL_LO_SCALE_NV
 0x870F

	)

10519 
	#GL_DS_SCALE_NV
 0x8710

	)

10520 
	#GL_DT_SCALE_NV
 0x8711

	)

10521 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

10522 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

10523 
	#GL_HI_BIAS_NV
 0x8714

	)

10524 
	#GL_LO_BIAS_NV
 0x8715

	)

10525 
	#GL_DS_BIAS_NV
 0x8716

	)

10526 
	#GL_DT_BIAS_NV
 0x8717

	)

10527 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

10528 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

10529 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

10530 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

10531 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

10532 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

10533 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

10534 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

10537 #i‚de‡
GL_NV_ãxtuª_shadî2


10538 
	#GL_NV_ãxtuª_shadî2
 1

	)

10539 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

10542 #i‚de‡
GL_NV_ãxtuª_shadî3


10543 
	#GL_NV_ãxtuª_shadî3
 1

	)

10544 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

10545 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

10546 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

10547 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

10548 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

10549 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

10550 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

10551 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

10552 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

10553 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

10554 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

10555 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

10556 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

10557 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

10558 
	#GL_HILO8_NV
 0x885E

	)

10559 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

10560 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

10563 #i‚de‡
GL_NV_å™sf‹m_„edback


10564 
	#GL_NV_å™sf‹m_„edback
 1

	)

10565 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

10566 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

10567 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

10568 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

10569 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

10570 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

10571 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

10572 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

10573 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

10574 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

10575 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

10576 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

10577 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

10578 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

10579 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

10580 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

10581 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

10582 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

10583 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

10584 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
 0x8C8A

	)

10585 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

10586 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

10587 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

10588 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

10589 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

10590 
	#GL_LAYER_NV
 0x8DAA

	)

10591 
	#GL_NEXT_BUFFER_NV
 -2

	)

10592 
	#GL_SKIP_COMPONENTS4_NV
 -3

	)

10593 
	#GL_SKIP_COMPONENTS3_NV
 -4

	)

10594 
	#GL_SKIP_COMPONENTS2_NV
 -5

	)

10595 
	#GL_SKIP_COMPONENTS1_NV
 -6

	)

10596 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

10597 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

10598 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

10599 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

10600 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

10601 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

10602 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

10603 (
APIENTRYP
 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

10604 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

10605 (
APIENTRYP
 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

10606 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

10607 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, GLsizeò
	tnbuf„rs
, c⁄° GLöà*
	tbuf°ªams
, 
	tGLíum
 
	tbuf„rMode
);

10608 #ifde‡
GL_GLEXT_PROTOTYPES


10609 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackNV
 (
GLíum
 
¥imôiveMode
);

10610 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackNV
 ();

10611 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, 
GLíum
 
buf„rMode
);

10612 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

10613 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

10614 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£NV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

10615 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsNV
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
loˇti⁄s
, 
GLíum
 
buf„rMode
);

10616 
GLAPI
 
APIENTRY
 
glA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

10617 
GLAPI
 
GLöt
 
APIENTRY
 
glGëV¨yögLoˇti⁄NV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

10618 
GLAPI
 
APIENTRY
 
glGëA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

10619 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLöt
 *
loˇti⁄
);

10620 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackSåómAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, GLsizeò
nbuf„rs
, c⁄° GLöà*
buf°ªams
, 
GLíum
 
buf„rMode
);

10624 #i‚de‡
GL_NV_å™sf‹m_„edback2


10625 
	#GL_NV_å™sf‹m_„edback2
 1

	)

10626 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

10627 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

10628 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

10629 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

10630 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

10631 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

10632 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

10633 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

10634 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

10635 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

10636 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

10637 #ifde‡
GL_GLEXT_PROTOTYPES


10638 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdbackNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10639 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

10640 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

10641 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdbackNV
 (
GLuöt
 
id
);

10642 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdbackNV
 ();

10643 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdbackNV
 ();

10644 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackNV
 (
GLíum
 
mode
, 
GLuöt
 
id
);

10648 #i‚de‡
GL_NV_unif‹m_buf„r_unifõd_mem‹y


10649 
	#GL_NV_unif‹m_buf„r_unifõd_mem‹y
 1

	)

10650 
	#GL_UNIFORM_BUFFER_UNIFIED_NV
 0x936E

	)

10651 
	#GL_UNIFORM_BUFFER_ADDRESS_NV
 0x936F

	)

10652 
	#GL_UNIFORM_BUFFER_LENGTH_NV
 0x9370

	)

10655 #i‚de‡
GL_NV_vd∑u_öãr›


10656 
	#GL_NV_vd∑u_öãr›
 1

	)

10657 
GLöçå
 
	tGLvd∑uSurÁ˚NV
;

10658 
	#GL_SURFACE_STATE_NV
 0x86EB

	)

10659 
	#GL_SURFACE_REGISTERED_NV
 0x86FD

	)

10660 
	#GL_SURFACE_MAPPED_NV
 0x8700

	)

10661 
	#GL_WRITE_DISCARD_NV
 0x88BE

	)

10662 (
APIENTRYP
 
	tPFNGLVDPAUINITNVPROC
Ë(c⁄° *
	tvdpDevi˚
, c⁄° *
	tgëProcAddªss
);

10663 (
APIENTRYP
 
	tPFNGLVDPAUFININVPROC
) ();

10664 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTERVIDEOSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

10665 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

10666 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLVDPAUISSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

10667 (
APIENTRYP
 
	tPFNGLVDPAUUNREGISTERSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

10668 (
APIENTRYP
 
	tPFNGLVDPAUGETSURFACEIVNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

10669 (
APIENTRYP
 
	tPFNGLVDPAUSURFACEACCESSNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	tac˚ss
);

10670 (
APIENTRYP
 
	tPFNGLVDPAUMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚s
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

10671 (
APIENTRYP
 
	tPFNGLVDPAUUNMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

10672 #ifde‡
GL_GLEXT_PROTOTYPES


10673 
GLAPI
 
APIENTRY
 
glVDPAUInôNV
 (c⁄° *
vdpDevi˚
, c⁄° *
gëProcAddªss
);

10674 
GLAPI
 
APIENTRY
 
glVDPAUFöiNV
 ();

10675 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îVideoSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

10676 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îOuçutSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

10677 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glVDPAUIsSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

10678 
GLAPI
 
APIENTRY
 
glVDPAUUƒegi°îSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

10679 
GLAPI
 
APIENTRY
 
glVDPAUGëSurÁ˚ivNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

10680 
GLAPI
 
APIENTRY
 
glVDPAUSurÁ˚Ac˚ssNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
ac˚ss
);

10681 
GLAPI
 
APIENTRY
 
glVDPAUM≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚s
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

10682 
GLAPI
 
APIENTRY
 
glVDPAUUnm≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

10686 #i‚de‡
GL_NV_vîãx_¨øy_ønge


10687 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

10688 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

10689 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

10690 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

10691 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

10692 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

10693 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

10694 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

10695 #ifde‡
GL_GLEXT_PROTOTYPES


10696 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

10697 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
 
Àngth
, c⁄° *
poöãr
);

10701 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


10702 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

10703 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

10706 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


10707 
	#GL_NV_vîãx_©åib_öãgî_64bô
 1

	)

10708 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
);

10709 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

10710 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

10711 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

10712 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10713 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10714 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10715 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10716 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

10717 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

10718 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

10719 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

10720 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10721 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10722 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10723 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10724 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

10725 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10726 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10727 #ifde‡
GL_GLEXT_PROTOTYPES


10728 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
);

10729 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

10730 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

10731 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

10732 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10733 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10734 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10735 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10736 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

10737 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

10738 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

10739 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

10740 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10741 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10742 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10743 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10744 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLi64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

10745 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10746 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10750 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


10751 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

10752 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

10753 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

10754 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

10755 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

10756 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

10757 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

10758 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

10759 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

10760 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

10761 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

10762 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

10763 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

10764 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

10765 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

10766 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

10767 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

10768 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

10769 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

10770 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

10771 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

10772 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

10773 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

10774 
	#GL_DRAW_INDIRECT_UNIFIED_NV
 0x8F40

	)

10775 
	#GL_DRAW_INDIRECT_ADDRESS_NV
 0x8F41

	)

10776 
	#GL_DRAW_INDIRECT_LENGTH_NV
 0x8F42

	)

10777 (
APIENTRYP
 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

10778 (
APIENTRYP
 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10779 (
APIENTRYP
 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10780 (
APIENTRYP
 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10781 (
APIENTRYP
 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10782 (
APIENTRYP
 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10783 (
APIENTRYP
 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

10784 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10785 (
APIENTRYP
 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10786 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

10787 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10788 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 *
	tªsu…
);

10789 #ifde‡
GL_GLEXT_PROTOTYPES


10790 
GLAPI
 
APIENTRY
 
glBuf„rAddªssR™geNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 
addªss
, 
GLsizeùå
 
Àngth
);

10791 
GLAPI
 
APIENTRY
 
glVîãxF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10792 
GLAPI
 
APIENTRY
 
glN‹mÆF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10793 
GLAPI
 
APIENTRY
 
glCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10794 
GLAPI
 
APIENTRY
 
glIndexF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10795 
GLAPI
 
APIENTRY
 
glTexCo‹dF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10796 
GLAPI
 
APIENTRY
 
glEdgeFœgF‹m©NV
 (
GLsizei
 
°ride
);

10797 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10798 
GLAPI
 
APIENTRY
 
glFogCo‹dF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10799 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
);

10800 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10801 
GLAPI
 
APIENTRY
 
glGëI¡egîui64i_vNV
 (
GLíum
 
vÆue
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 *
ªsu…
);

10805 #i‚de‡
GL_NV_vîãx_¥ogøm


10806 
	#GL_NV_vîãx_¥ogøm
 1

	)

10807 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

10808 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

10809 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

10810 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

10811 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

10812 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

10813 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

10814 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

10815 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

10816 
	#GL_IDENTITY_NV
 0x862A

	)

10817 
	#GL_INVERSE_NV
 0x862B

	)

10818 
	#GL_TRANSPOSE_NV
 0x862C

	)

10819 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

10820 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

10821 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

10822 
	#GL_MATRIX0_NV
 0x8630

	)

10823 
	#GL_MATRIX1_NV
 0x8631

	)

10824 
	#GL_MATRIX2_NV
 0x8632

	)

10825 
	#GL_MATRIX3_NV
 0x8633

	)

10826 
	#GL_MATRIX4_NV
 0x8634

	)

10827 
	#GL_MATRIX5_NV
 0x8635

	)

10828 
	#GL_MATRIX6_NV
 0x8636

	)

10829 
	#GL_MATRIX7_NV
 0x8637

	)

10830 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

10831 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

10832 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

10833 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

10834 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

10835 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

10836 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

10837 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

10838 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

10839 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

10840 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

10841 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

10842 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

10843 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

10844 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

10845 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

10846 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

10847 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

10848 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

10849 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

10850 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

10851 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

10852 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

10853 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

10854 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

10855 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

10856 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

10857 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

10858 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

10859 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

10860 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

10861 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

10862 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

10863 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

10864 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

10865 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

10866 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

10867 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

10868 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

10869 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

10870 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

10871 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

10872 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

10873 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

10874 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

10875 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

10876 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

10877 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

10878 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

10879 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

10880 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

10881 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

10882 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

10883 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

10884 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

10885 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

10886 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

10887 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

10888 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

10889 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

10890 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

10891 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

10892 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10893 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10894 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

10895 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10896 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10897 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10898 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

10899 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10900 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10901 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10902 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10903 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

10904 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

10905 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

10906 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10907 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10908 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10909 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10910 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10911 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10912 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10913 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

10914 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

10915 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

10916 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10917 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

10918 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10919 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

10920 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10921 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10922 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10923 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10924 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10925 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10926 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10927 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10928 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10929 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10930 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10931 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10932 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10933 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10934 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10935 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10936 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10937 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10938 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10939 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

10940 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

10941 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10942 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10943 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10944 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10945 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10946 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10947 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10948 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10949 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10950 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10951 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10952 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10953 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

10954 #ifde‡
GL_GLEXT_PROTOTYPES


10955 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
, GLboﬁó¿*
ªsidí˚s
);

10956 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10957 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10958 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
∑øms
);

10959 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

10960 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10961 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10962 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10963 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLubyã
 *
¥ogøm
);

10964 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10965 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10966 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10967 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10968 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

10969 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
 
id
);

10970 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
¥ogøm
);

10971 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10972 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10973 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10974 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10975 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10976 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10977 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10978 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
m©rix
, GLíum 
å™sf‹m
);

10979 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
 
ödex
, 
GLöt
 
fsize
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

10980 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

10981 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10982 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

10983 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10984 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

10985 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10986 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10987 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10988 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10989 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10990 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

10991 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10992 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10993 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10994 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10995 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10996 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10997 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10998 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10999 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

11000 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

11001 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

11002 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

11003 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

11004 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

11005 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

11006 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11007 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11008 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11009 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11010 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11011 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11012 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11013 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11014 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11015 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11016 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11017 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11018 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLubyã
 *
v
);

11022 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


11023 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

11026 #i‚de‡
GL_NV_vîãx_¥ogøm2


11027 
	#GL_NV_vîãx_¥ogøm2
 1

	)

11030 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


11031 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

11034 #i‚de‡
GL_NV_vîãx_¥ogøm3


11035 
	#GL_NV_vîãx_¥ogøm3
 1

	)

11038 #i‚de‡
GL_NV_vîãx_¥ogøm4


11039 
	#GL_NV_vîãx_¥ogøm4
 1

	)

11040 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

11041 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

11042 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

11043 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

11044 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11045 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

11046 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

11047 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

11048 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11049 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11050 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11051 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11052 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11053 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11054 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11055 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11056 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11057 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

11058 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

11059 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

11060 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

11061 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

11062 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11063 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

11064 #ifde‡
GL_GLEXT_PROTOTYPES


11065 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

11066 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

11067 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

11068 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11069 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
);

11070 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

11071 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

11072 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11073 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11074 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11075 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11076 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11077 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11078 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11079 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11080 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11081 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

11082 
GLAPI
 
APIENTRY
 
glVîãxAâribI4svEXT
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

11083 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

11084 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

11085 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

11086 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11087 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

11091 #i‚de‡
GL_NV_video_ˇ±uª


11092 
	#GL_NV_video_ˇ±uª
 1

	)

11093 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

11094 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

11095 
	#GL_FIELD_UPPER_NV
 0x9022

	)

11096 
	#GL_FIELD_LOWER_NV
 0x9023

	)

11097 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

11098 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

11099 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

11100 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

11101 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

11102 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

11103 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

11104 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

11105 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

11106 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

11107 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

11108 
	#GL_SUCCESS_NV
 0x902F

	)

11109 
	#GL_FAILURE_NV
 0x9030

	)

11110 
	#GL_YCBYCR8_422_NV
 0x9031

	)

11111 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

11112 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

11113 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

11114 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

11115 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

11116 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

11117 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

11118 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

11119 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

11120 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

11121 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

11122 (
APIENTRYP
 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

11123 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

11124 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

11125 (
APIENTRYP
 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

11126 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11127 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11128 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11129 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

11130 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà*
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

11131 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11132 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11133 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

11134 #ifde‡
GL_GLEXT_PROTOTYPES


11135 
GLAPI
 
APIENTRY
 
glBegöVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

11136 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómBuf„rNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, 
GLöçåARB
 
off£t
);

11137 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómTextuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, GLíum 
èrgë
, GLuöà
ãxtuª
);

11138 
GLAPI
 
APIENTRY
 
glEndVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

11139 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11140 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11141 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11142 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

11143 
GLAPI
 
GLíum
 
APIENTRY
 
glVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà*
£quí˚_num
, 
GLuöt64EXT
 *
ˇ±uª_time
);

11144 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11145 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11146 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

11150 #i‚de‡
GL_NV_võwp‹t_¨øy2


11151 
	#GL_NV_võwp‹t_¨øy2
 1

	)

11154 #i‚de‡
GL_NV_võwp‹t_swizzÀ


11155 
	#GL_NV_võwp‹t_swizzÀ
 1

	)

11156 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV
 0x9350

	)

11157 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV
 0x9351

	)

11158 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV
 0x9352

	)

11159 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV
 0x9353

	)

11160 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV
 0x9354

	)

11161 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV
 0x9355

	)

11162 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV
 0x9356

	)

11163 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV
 0x9357

	)

11164 
	#GL_VIEWPORT_SWIZZLE_X_NV
 0x9358

	)

11165 
	#GL_VIEWPORT_SWIZZLE_Y_NV
 0x9359

	)

11166 
	#GL_VIEWPORT_SWIZZLE_Z_NV
 0x935A

	)

11167 
	#GL_VIEWPORT_SWIZZLE_W_NV
 0x935B

	)

11168 (
APIENTRYP
 
	tPFNGLVIEWPORTSWIZZLENVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tswizzÀx
, GLíum 
	tswizzÀy
, GLíum 
	tswizzÀz
, GLíum 
	tswizzÀw
);

11169 #ifde‡
GL_GLEXT_PROTOTYPES


11170 
GLAPI
 
APIENTRY
 
glVõwp‹tSwizzÀNV
 (
GLuöt
 
ödex
, 
GLíum
 
swizzÀx
, GLíum 
swizzÀy
, GLíum 
swizzÀz
, GLíum 
swizzÀw
);

11174 #i‚de‡
GL_OML_öãæa˚


11175 
	#GL_OML_öãæa˚
 1

	)

11176 
	#GL_INTERLACE_OML
 0x8980

	)

11177 
	#GL_INTERLACE_READ_OML
 0x8981

	)

11180 #i‚de‡
GL_OML_ªßm∂e


11181 
	#GL_OML_ªßm∂e
 1

	)

11182 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

11183 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

11184 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

11185 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

11186 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

11187 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

11190 #i‚de‡
GL_OML_subßm∂e


11191 
	#GL_OML_subßm∂e
 1

	)

11192 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

11193 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

11196 #i‚de‡
GL_OVR_mu…ivõw


11197 
	#GL_OVR_mu…ivõw
 1

	)

11198 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR
 0x9630

	)

11199 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR
 0x9632

	)

11200 
	#GL_MAX_VIEWS_OVR
 0x9631

	)

11201 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tba£VõwIndex
, 
	tGLsizei
 
	tnumVõws
);

11202 #ifde‡
GL_GLEXT_PROTOTYPES


11203 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªMu…ivõwOVR
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
ba£VõwIndex
, 
GLsizei
 
numVõws
);

11207 #i‚de‡
GL_OVR_mu…ivõw2


11208 
	#GL_OVR_mu…ivõw2
 1

	)

11211 #i‚de‡
GL_PGI_misc_höts


11212 
	#GL_PGI_misc_höts
 1

	)

11213 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

11214 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

11215 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

11216 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

11217 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

11218 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

11219 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

11220 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

11221 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

11222 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

11223 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

11224 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

11225 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

11226 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

11227 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

11228 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

11229 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

11230 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

11231 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

11232 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

11233 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

11234 #ifde‡
GL_GLEXT_PROTOTYPES


11235 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
 
èrgë
, 
GLöt
 
mode
);

11239 #i‚de‡
GL_PGI_vîãx_höts


11240 
	#GL_PGI_vîãx_höts
 1

	)

11241 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

11242 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

11243 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

11244 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

11245 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

11246 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

11247 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

11248 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

11249 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

11250 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

11251 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

11252 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

11253 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

11254 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

11255 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

11256 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

11257 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

11258 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

11259 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

11260 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

11261 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

11262 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

11265 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


11266 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

11267 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

11268 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

11271 #i‚de‡
GL_S3_s3tc


11272 
	#GL_S3_s3tc
 1

	)

11273 
	#GL_RGB_S3TC
 0x83A0

	)

11274 
	#GL_RGB4_S3TC
 0x83A1

	)

11275 
	#GL_RGBA_S3TC
 0x83A2

	)

11276 
	#GL_RGBA4_S3TC
 0x83A3

	)

11277 
	#GL_RGBA_DXT5_S3TC
 0x83A4

	)

11278 
	#GL_RGBA4_DXT5_S3TC
 0x83A5

	)

11281 #i‚de‡
GL_SGIS_dëaû_ãxtuª


11282 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

11283 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

11284 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

11285 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

11286 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

11287 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

11288 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

11289 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

11290 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

11291 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11292 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

11293 #ifde‡
GL_GLEXT_PROTOTYPES


11294 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11295 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

11299 #i‚de‡
GL_SGIS_fog_fun˘i⁄


11300 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

11301 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

11302 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

11303 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

11304 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11305 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

11306 #ifde‡
GL_GLEXT_PROTOTYPES


11307 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11308 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *
poöts
);

11312 #i‚de‡
GL_SGIS_gíî©e_mùm≠


11313 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

11314 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

11315 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

11318 #i‚de‡
GL_SGIS_mu…ißm∂e


11319 
	#GL_SGIS_mu…ißm∂e
 1

	)

11320 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

11321 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

11322 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

11323 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

11324 
	#GL_1PASS_SGIS
 0x80A1

	)

11325 
	#GL_2PASS_0_SGIS
 0x80A2

	)

11326 
	#GL_2PASS_1_SGIS
 0x80A3

	)

11327 
	#GL_4PASS_0_SGIS
 0x80A4

	)

11328 
	#GL_4PASS_1_SGIS
 0x80A5

	)

11329 
	#GL_4PASS_2_SGIS
 0x80A6

	)

11330 
	#GL_4PASS_3_SGIS
 0x80A7

	)

11331 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

11332 
	#GL_SAMPLES_SGIS
 0x80A9

	)

11333 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

11334 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

11335 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

11336 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

11337 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

11338 #ifde‡
GL_GLEXT_PROTOTYPES


11339 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

11340 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
 
∑âîn
);

11344 #i‚de‡
GL_SGIS_pixñ_ãxtuª


11345 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

11346 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

11347 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

11348 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

11349 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

11350 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11351 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11352 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11353 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11354 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11355 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11356 #ifde‡
GL_GLEXT_PROTOTYPES


11357 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11358 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11359 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11360 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11361 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11362 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11366 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


11367 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

11368 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

11369 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

11370 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

11371 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

11372 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

11373 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

11374 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

11375 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

11378 #i‚de‡
GL_SGIS_poöt_∑ømëîs


11379 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

11380 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

11381 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

11382 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

11383 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

11384 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11385 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11386 #ifde‡
GL_GLEXT_PROTOTYPES


11387 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11388 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11392 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


11393 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

11394 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

11395 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

11396 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

11397 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

11398 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11399 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

11400 #ifde‡
GL_GLEXT_PROTOTYPES


11401 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11402 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

11406 #i‚de‡
GL_SGIS_ãxtuª4D


11407 
	#GL_SGIS_ãxtuª4D
 1

	)

11408 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

11409 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

11410 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

11411 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

11412 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

11413 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

11414 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

11415 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

11416 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

11417 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

11418 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

11419 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

11420 #ifde‡
GL_GLEXT_PROTOTYPES


11421 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

11422 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
woff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

11426 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


11427 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

11428 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

11431 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


11432 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

11433 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

11434 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

11435 #ifde‡
GL_GLEXT_PROTOTYPES


11436 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

11440 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


11441 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

11442 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

11445 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


11446 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

11447 
	#GL_FILTER4_SGIS
 0x8146

	)

11448 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

11449 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

11450 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

11451 #ifde‡
GL_GLEXT_PROTOTYPES


11452 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLÊﬂt
 *
weights
);

11453 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
weights
);

11457 #i‚de‡
GL_SGIS_ãxtuª_lod


11458 
	#GL_SGIS_ãxtuª_lod
 1

	)

11459 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

11460 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

11461 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

11462 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

11465 #i‚de‡
GL_SGIS_ãxtuª_£À˘


11466 
	#GL_SGIS_ãxtuª_£À˘
 1

	)

11467 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

11468 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

11469 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

11470 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

11471 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

11472 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

11473 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

11474 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

11475 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

11476 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

11477 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

11478 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

11479 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

11480 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

11481 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

11482 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

11483 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

11484 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

11485 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

11486 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

11487 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

11488 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

11491 #i‚de‡
GL_SGIX_async


11492 
	#GL_SGIX_async
 1

	)

11493 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

11494 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

11495 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

11496 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

11497 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

11498 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

11499 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

11500 #ifde‡
GL_GLEXT_PROTOTYPES


11501 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

11502 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

11503 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

11504 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
 
ønge
);

11505 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
 
m¨kî
, 
GLsizei
 
ønge
);

11506 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

11510 #i‚de‡
GL_SGIX_async_hi°ogøm


11511 
	#GL_SGIX_async_hi°ogøm
 1

	)

11512 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

11513 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

11516 #i‚de‡
GL_SGIX_async_pixñ


11517 
	#GL_SGIX_async_pixñ
 1

	)

11518 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

11519 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

11520 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

11521 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

11522 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

11523 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

11526 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


11527 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

11528 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

11529 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

11532 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


11533 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

11534 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

11537 #i‚de‡
GL_SGIX_˛ùm≠


11538 
	#GL_SGIX_˛ùm≠
 1

	)

11539 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

11540 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

11541 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

11542 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

11543 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

11544 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

11545 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

11546 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

11547 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

11548 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

11549 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

11550 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

11553 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


11554 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

11555 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

11558 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


11559 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

11562 #i‚de‡
GL_SGIX_dïth_ãxtuª


11563 
	#GL_SGIX_dïth_ãxtuª
 1

	)

11564 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

11565 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

11566 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

11569 #i‚de‡
GL_SGIX_Êush_ø°î


11570 
	#GL_SGIX_Êush_ø°î
 1

	)

11571 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

11572 #ifde‡
GL_GLEXT_PROTOTYPES


11573 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

11577 #i‚de‡
GL_SGIX_fog_off£t


11578 
	#GL_SGIX_fog_off£t
 1

	)

11579 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

11580 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

11583 #i‚de‡
GL_SGIX_‰agmít_lightög


11584 
	#GL_SGIX_‰agmít_lightög
 1

	)

11585 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

11586 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

11587 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

11588 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

11589 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

11590 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

11591 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

11592 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

11593 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

11594 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

11595 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

11596 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

11597 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

11598 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

11599 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

11600 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

11601 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

11602 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

11603 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

11604 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

11605 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

11606 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11607 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11608 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11609 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11610 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11611 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11612 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11613 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11614 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11615 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11616 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11617 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11618 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11619 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11620 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11621 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11622 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11623 #ifde‡
GL_GLEXT_PROTOTYPES


11624 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
 
Á˚
, GLíum 
mode
);

11625 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11626 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11627 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11628 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11629 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11630 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11631 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11632 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11633 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11634 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11635 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11636 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11637 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11638 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11639 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11640 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11641 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11645 #i‚de‡
GL_SGIX_‰amezoom


11646 
	#GL_SGIX_‰amezoom
 1

	)

11647 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

11648 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

11649 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

11650 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

11651 #ifde‡
GL_GLEXT_PROTOTYPES


11652 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
 
Á˘‹
);

11656 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


11657 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

11658 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° *
	t∑øms
);

11659 #ifde‡
GL_GLEXT_PROTOTYPES


11660 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
 
≤ame
, c⁄° *
∑øms
);

11664 #i‚de‡
GL_SGIX_ö°rumíts


11665 
	#GL_SGIX_ö°rumíts
 1

	)

11666 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

11667 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

11668 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

11669 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

11670 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

11671 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

11672 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

11673 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

11674 #ifde‡
GL_GLEXT_PROTOTYPES


11675 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

11676 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
 
size
, 
GLöt
 *
buf„r
);

11677 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLöà*
m¨kî_p
);

11678 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
 
m¨kî
);

11679 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

11680 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
 
m¨kî
);

11684 #i‚de‡
GL_SGIX_öãæa˚


11685 
	#GL_SGIX_öãæa˚
 1

	)

11686 
	#GL_INTERLACE_SGIX
 0x8094

	)

11689 #i‚de‡
GL_SGIX_ú_ö°rumít1


11690 
	#GL_SGIX_ú_ö°rumít1
 1

	)

11691 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

11694 #i‚de‡
GL_SGIX_li°_¥i‹ôy


11695 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

11696 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

11697 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11698 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11699 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11700 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11701 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11702 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11703 #ifde‡
GL_GLEXT_PROTOTYPES


11704 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11705 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11706 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11707 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11708 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11709 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11713 #i‚de‡
GL_SGIX_pixñ_ãxtuª


11714 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

11715 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

11716 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

11717 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

11718 #ifde‡
GL_GLEXT_PROTOTYPES


11719 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
 
mode
);

11723 #i‚de‡
GL_SGIX_pixñ_tûes


11724 
	#GL_SGIX_pixñ_tûes
 1

	)

11725 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

11726 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

11727 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

11728 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

11729 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

11730 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

11731 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

11732 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

11735 #i‚de‡
GL_SGIX_pﬁynomül_ffd


11736 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

11737 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

11738 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

11739 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

11740 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

11741 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

11742 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

11743 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

11744 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

11745 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

11746 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

11747 #ifde‡
GL_GLEXT_PROTOTYPES


11748 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLdoubÀ 
w1
, GLdoubÀ 
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLdoubÀ *
poöts
);

11749 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLÊﬂà
w1
, GLÊﬂà
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLÊﬂà*
poöts
);

11750 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
 
mask
);

11751 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
 
mask
);

11755 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


11756 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

11757 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

11758 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

11759 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

11760 #ifde‡
GL_GLEXT_PROTOTYPES


11761 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *
equ©i⁄
);

11765 #i‚de‡
GL_SGIX_ªßm∂e


11766 
	#GL_SGIX_ªßm∂e
 1

	)

11767 
	#GL_PACK_RESAMPLE_SGIX
 0x842E

	)

11768 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842F

	)

11769 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x8433

	)

11770 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x8434

	)

11771 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

11774 #i‚de‡
GL_SGIX_sˇÀbüs_höt


11775 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

11776 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

11779 #i‚de‡
GL_SGIX_shadow


11780 
	#GL_SGIX_shadow
 1

	)

11781 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

11782 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

11783 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

11784 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

11787 #i‚de‡
GL_SGIX_shadow_ambõ¡


11788 
	#GL_SGIX_shadow_ambõ¡
 1

	)

11789 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

11792 #i‚de‡
GL_SGIX_•rôe


11793 
	#GL_SGIX_•rôe
 1

	)

11794 
	#GL_SPRITE_SGIX
 0x8148

	)

11795 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

11796 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

11797 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

11798 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

11799 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

11800 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

11801 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11802 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11803 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11804 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11805 #ifde‡
GL_GLEXT_PROTOTYPES


11806 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11807 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11808 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11809 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11813 #i‚de‡
GL_SGIX_subßm∂e


11814 
	#GL_SGIX_subßm∂e
 1

	)

11815 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

11816 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

11817 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

11818 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

11819 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

11822 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


11823 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

11824 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

11825 #ifde‡
GL_GLEXT_PROTOTYPES


11826 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

11830 #i‚de‡
GL_SGIX_ãxtuª_add_ív


11831 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

11832 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

11835 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


11836 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

11837 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

11838 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

11839 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

11842 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


11843 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

11844 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

11845 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

11846 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

11849 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


11850 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

11851 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

11854 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


11855 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

11856 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

11857 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

11858 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

11859 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

11862 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


11863 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

11864 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

11865 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

11868 #i‚de‡
GL_SGIX_y¸cb


11869 
	#GL_SGIX_y¸cb
 1

	)

11870 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

11871 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

11874 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


11875 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

11878 #i‚de‡
GL_SGIX_y¸cba


11879 
	#GL_SGIX_y¸cba
 1

	)

11880 
	#GL_YCRCB_SGIX
 0x8318

	)

11881 
	#GL_YCRCBA_SGIX
 0x8319

	)

11884 #i‚de‡
GL_SGI_cﬁ‹_m©rix


11885 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

11886 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

11887 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

11888 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

11889 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

11890 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

11891 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

11892 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

11893 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

11894 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

11895 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

11896 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

11899 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


11900 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

11901 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

11902 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

11903 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

11904 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

11905 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

11906 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

11907 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

11908 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

11909 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

11910 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

11911 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

11912 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

11913 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

11914 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

11915 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

11916 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

11917 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

11918 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11919 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11920 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

11921 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

11922 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11923 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11924 #ifde‡
GL_GLEXT_PROTOTYPES


11925 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

11926 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11927 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11928 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

11929 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

11930 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11931 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11935 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


11936 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

11937 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

11938 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

11941 #i‚de‡
GL_SUNX_c⁄°™t_d©a


11942 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

11943 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

11944 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

11945 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

11946 #ifde‡
GL_GLEXT_PROTOTYPES


11947 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

11951 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


11952 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

11953 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

11956 #i‚de‡
GL_SUN_globÆ_Æpha


11957 
	#GL_SUN_globÆ_Æpha
 1

	)

11958 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

11959 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

11960 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

11961 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

11962 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

11963 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

11964 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

11965 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

11966 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

11967 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

11968 #ifde‡
GL_GLEXT_PROTOTYPES


11969 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
 
Á˘‹
);

11970 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
 
Á˘‹
);

11971 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
 
Á˘‹
);

11972 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
 
Á˘‹
);

11973 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
 
Á˘‹
);

11974 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
 
Á˘‹
);

11975 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
 
Á˘‹
);

11976 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
 
Á˘‹
);

11980 #i‚de‡
GL_SUN_mesh_¨øy


11981 
	#GL_SUN_mesh_¨øy
 1

	)

11982 
	#GL_QUAD_MESH_SUN
 0x8614

	)

11983 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

11984 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

11985 #ifde‡
GL_GLEXT_PROTOTYPES


11986 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
width
);

11990 #i‚de‡
GL_SUN_¶i˚_accum


11991 
	#GL_SUN_¶i˚_accum
 1

	)

11992 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

11995 #i‚de‡
GL_SUN_åüngÀ_li°


11996 
	#GL_SUN_åüngÀ_li°
 1

	)

11997 
	#GL_RESTART_SUN
 0x0001

	)

11998 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

11999 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

12000 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

12001 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

12002 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

12003 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

12004 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

12005 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

12006 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

12007 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

12008 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

12009 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

12010 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

12011 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

12012 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

12013 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

12014 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

12015 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

12016 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

12017 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

12018 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

12019 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

12020 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° **
	tpoöãr
);

12021 #ifde‡
GL_GLEXT_PROTOTYPES


12022 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
 
code
);

12023 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
 
code
);

12024 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
 
code
);

12025 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *
code
);

12026 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *
code
);

12027 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *
code
);

12028 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° **
poöãr
);

12032 #i‚de‡
GL_SUN_vîãx


12033 
	#GL_SUN_vîãx
 1

	)

12034 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12035 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12036 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12037 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12038 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12039 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

12040 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12041 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

12042 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12043 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12044 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12045 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

12046 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

12047 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

12048 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12049 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

12050 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12051 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

12052 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12053 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12054 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12055 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12056 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

12057 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12058 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12059 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12060 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12061 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12062 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12063 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

12064 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12065 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

12066 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12067 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12068 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12069 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

12070 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12071 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12072 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12073 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12074 #ifde‡
GL_GLEXT_PROTOTYPES


12075 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

12076 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

12077 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12078 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

12079 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12080 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

12081 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12082 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

12083 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12084 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12085 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12086 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12087 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

12088 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12089 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12090 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° 
GLubyã
 *
c
, c⁄° GLÊﬂà*
v
);

12091 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12092 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
v
);

12093 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12094 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12095 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12096 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12097 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

12098 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12099 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12100 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
v
);

12101 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
 
rc
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12102 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

12103 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12104 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

12105 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12106 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

12107 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12108 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12109 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12110 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12111 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12112 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12113 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12114 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12118 #i‚de‡
GL_WIN_ph⁄g_shadög


12119 
	#GL_WIN_ph⁄g_shadög
 1

	)

12120 
	#GL_PHONG_WIN
 0x80EA

	)

12121 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

12124 #i‚de‡
GL_WIN_•ecuœr_fog


12125 
	#GL_WIN_•ecuœr_fog
 1

	)

12126 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

12129 #ifde‡
__˝lu•lus


	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

56 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

57 
	~<sys/iß_defs.h
>

60 #i‡
deföed
 (
_LP64
Ë|| deföed(
__LP64__
) || \

61 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

62 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

63 
deföed
(
__•¨c64__
) || \

64 
deföed
(
__s390x__
) || \

65 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

66 
	$deföed
(
__powîpc64__
)

67 #i‡!
	`deföed
(
__ILP32__
)

68 
	#LONG64


	)

86 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

87 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

94 
	#B32


	)

95 
	#B16


	)

96 #ifde‡
LONG64


97 
	tINT64
;

98 
	tINT32
;

100 
	tINT32
;

102 
	tINT16
;

104 sig√d 
	tINT8
;

106 #ifde‡
LONG64


107 
	tCARD64
;

108 
	tCARD32
;

110 
	tCARD64
;

111 
	tCARD32
;

113 
	tCARD16
;

114 
	tCARD8
;

116 
CARD32
 
	tBITS32
;

117 
CARD16
 
	tBITS16
;

119 
CARD8
 
	tBYTE
;

120 
CARD8
 
	tBOOL
;

126 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

127 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

128 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

129 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

130 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

131 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

132 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

133 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

134 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

140 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/X11/Xprotostr.h

1 #i‚de‡
XPROTOSTRUCTS_H


2 
	#XPROTOSTRUCTS_H


	)

50 
	~<X11/Xmd.h
>

54 
	s_xSegmít
 {

55 
INT16
 
x1
 
	mB16
, 
y1
 B16, 
x2
 B16, 
y2
 B16;

56 } 
	txSegmít
;

60 
	s_xPoöt
 {

61 
INT16
 
x
 
	mB16
, 
y
 B16;

62 } 
	txPoöt
;

64 
	s_xRe˘™gÀ
 {

65 
INT16
 
x
 
	mB16
, 
y
 B16;

66 
CARD16
 
width
 
	mB16
, 
height
 B16;

67 } 
	txRe˘™gÀ
;

71 
	s_xArc
 {

72 
INT16
 
x
 
	mB16
, 
y
 B16;

73 
CARD16
 
width
 
	mB16
, 
height
 B16;

74 
INT16
 
™gÀ1
 
	mB16
, 
™gÀ2
 B16;

75 } 
	txArc
;

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 24

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/jmorecfg.h

27 
	#MAX_COMPONENTS
 10

	)

44 #i‡
BITS_IN_JSAMPLE
 == 8

49 #ifde‡
HAVE_UNSIGNED_CHAR


51 
	tJSAMPLE
;

52 
	#GETJSAMPLE
(
vÆue
Ë((Ë(vÆue))

	)

56 
	tJSAMPLE
;

57 #ifde‡
__CHAR_UNSIGNED__


58 
	#GETJSAMPLE
(
vÆue
Ë((Ë(vÆue))

	)

60 
	#GETJSAMPLE
(
vÆue
Ë((Ë(vÆueË& 0xFF)

	)

65 
	#MAXJSAMPLE
 255

	)

66 
	#CENTERJSAMPLE
 128

	)

71 #i‡
BITS_IN_JSAMPLE
 == 12

76 
	tJSAMPLE
;

77 
	#GETJSAMPLE
(
vÆue
Ë((Ë(vÆue))

	)

79 
	#MAXJSAMPLE
 4095

	)

80 
	#CENTERJSAMPLE
 2048

	)

91 
	tJCOEF
;

100 #ifde‡
HAVE_UNSIGNED_CHAR


102 
	tJOCTET
;

103 
	#GETJOCTET
(
vÆue
Ë(vÆue)

	)

107 
	tJOCTET
;

108 #ifde‡
__CHAR_UNSIGNED__


109 
	#GETJOCTET
(
vÆue
Ë(vÆue)

	)

111 
	#GETJOCTET
(
vÆue
Ë((vÆueË& 0xFF)

	)

126 #ifde‡
HAVE_UNSIGNED_CHAR


127 
	tUINT8
;

129 #ifde‡
__CHAR_UNSIGNED__


130 
	tUINT8
;

132 
	tUINT8
;

138 #ifde‡
HAVE_UNSIGNED_SHORT


139 
	tUINT16
;

141 
	tUINT16
;

146 #i‚de‡
XMD_H


147 
	tINT16
;

175 #i‚de‡
XMD_H


176 #i‚de‡
_BASETSD_H_


177 #i‚de‡
_BASETSD_H


178 #i‚de‡
QGLOBAL_H


179 
	tINT32
;

194 
	tJDIMENSION
;

196 
	#JPEG_MAX_DIMENSION
 65500L

	)

207 
	#METHODDEF
(
ty≥
Ë
	)
type

209 
	#LOCAL
(
ty≥
Ë
	)
type

211 
	#GLOBAL
(
ty≥
Ë
	)
type

213 
	#EXTERN
(
ty≥
Ë
	)
type

223 
	#JMETHOD
(
ty≥
,
mëhod«me
,
¨gli°
Ë
	`ty≥
 (*mëhod«meË
	)
arglist

230 #unde‡
FAR


231 
	#FAR


	)

241 #i‚de‡
HAVE_BOOLEAN


242 
	tboﬁón
;

244 #i‚de‡
FALSE


245 
	#FALSE
 0

	)

247 #i‚de‡
TRUE


248 
	#TRUE
 1

	)

259 #ifde‡
JPEG_INTERNALS


260 
	#JPEG_INTERNAL_OPTIONS


	)

263 #ifde‡
JPEG_INTERNAL_OPTIONS


276 
	#DCT_ISLOW_SUPPORTED


	)

277 
	#DCT_IFAST_SUPPORTED


	)

278 
	#DCT_FLOAT_SUPPORTED


	)

282 
	#C_MULTISCAN_FILES_SUPPORTED


	)

283 
	#C_PROGRESSIVE_SUPPORTED


	)

284 
	#ENTROPY_OPT_SUPPORTED


	)

293 
	#INPUT_SMOOTHING_SUPPORTED


	)

297 
	#D_MULTISCAN_FILES_SUPPORTED


	)

298 
	#D_PROGRESSIVE_SUPPORTED


	)

299 
	#SAVE_MARKERS_SUPPORTED


	)

300 
	#BLOCK_SMOOTHING_SUPPORTED


	)

301 
	#IDCT_SCALING_SUPPORTED


	)

302 #unde‡
UPSAMPLE_SCALING_SUPPORTED


303 
	#UPSAMPLE_MERGING_SUPPORTED


	)

304 
	#QUANT_1PASS_SUPPORTED


	)

305 
	#QUANT_2PASS_SUPPORTED


	)

331 
	#RGB_RED
 0

	)

332 
	#RGB_GREEN
 1

	)

333 
	#RGB_BLUE
 2

	)

334 
	#RGB_PIXELSIZE
 3

	)

336 
	#JPEG_NUMCS
 17

	)

338 
	#EXT_RGB_RED
 0

	)

339 
	#EXT_RGB_GREEN
 1

	)

340 
	#EXT_RGB_BLUE
 2

	)

341 
	#EXT_RGB_PIXELSIZE
 3

	)

343 
	#EXT_RGBX_RED
 0

	)

344 
	#EXT_RGBX_GREEN
 1

	)

345 
	#EXT_RGBX_BLUE
 2

	)

346 
	#EXT_RGBX_PIXELSIZE
 4

	)

348 
	#EXT_BGR_RED
 2

	)

349 
	#EXT_BGR_GREEN
 1

	)

350 
	#EXT_BGR_BLUE
 0

	)

351 
	#EXT_BGR_PIXELSIZE
 3

	)

353 
	#EXT_BGRX_RED
 2

	)

354 
	#EXT_BGRX_GREEN
 1

	)

355 
	#EXT_BGRX_BLUE
 0

	)

356 
	#EXT_BGRX_PIXELSIZE
 4

	)

358 
	#EXT_XBGR_RED
 3

	)

359 
	#EXT_XBGR_GREEN
 2

	)

360 
	#EXT_XBGR_BLUE
 1

	)

361 
	#EXT_XBGR_PIXELSIZE
 4

	)

363 
	#EXT_XRGB_RED
 1

	)

364 
	#EXT_XRGB_GREEN
 2

	)

365 
	#EXT_XRGB_BLUE
 3

	)

366 
	#EXT_XRGB_PIXELSIZE
 4

	)

368 c⁄° 
	grgb_ªd
[
JPEG_NUMCS
] = {

369 -1, -1, 
RGB_RED
, -1, -1, -1, 
EXT_RGB_RED
, 
EXT_RGBX_RED
,

370 
EXT_BGR_RED
, 
EXT_BGRX_RED
, 
EXT_XBGR_RED
, 
EXT_XRGB_RED
,

371 
EXT_RGBX_RED
, 
EXT_BGRX_RED
, 
EXT_XBGR_RED
, 
EXT_XRGB_RED
,

375 c⁄° 
	grgb_gªí
[
JPEG_NUMCS
] = {

376 -1, -1, 
RGB_GREEN
, -1, -1, -1, 
EXT_RGB_GREEN
, 
EXT_RGBX_GREEN
,

377 
EXT_BGR_GREEN
, 
EXT_BGRX_GREEN
, 
EXT_XBGR_GREEN
, 
EXT_XRGB_GREEN
,

378 
EXT_RGBX_GREEN
, 
EXT_BGRX_GREEN
, 
EXT_XBGR_GREEN
, 
EXT_XRGB_GREEN
,

382 c⁄° 
	grgb_blue
[
JPEG_NUMCS
] = {

383 -1, -1, 
RGB_BLUE
, -1, -1, -1, 
EXT_RGB_BLUE
, 
EXT_RGBX_BLUE
,

384 
EXT_BGR_BLUE
, 
EXT_BGRX_BLUE
, 
EXT_XBGR_BLUE
, 
EXT_XRGB_BLUE
,

385 
EXT_RGBX_BLUE
, 
EXT_BGRX_BLUE
, 
EXT_XBGR_BLUE
, 
EXT_XRGB_BLUE
,

389 c⁄° 
	grgb_pixñsize
[
JPEG_NUMCS
] = {

390 -1, -1, 
RGB_PIXELSIZE
, -1, -1, -1, 
EXT_RGB_PIXELSIZE
, 
EXT_RGBX_PIXELSIZE
,

391 
EXT_BGR_PIXELSIZE
, 
EXT_BGRX_PIXELSIZE
, 
EXT_XBGR_PIXELSIZE
, 
EXT_XRGB_PIXELSIZE
,

392 
EXT_RGBX_PIXELSIZE
, 
EXT_BGRX_PIXELSIZE
, 
EXT_XBGR_PIXELSIZE
, 
EXT_XRGB_PIXELSIZE
,

403 #i‚de‡
MULTIPLIER


404 #i‚de‡
WITH_SIMD


405 
	#MULTIPLIER
 

	)

407 
	#MULTIPLIER
 

	)

417 #i‚de‡
FAST_FLOAT


418 
	#FAST_FLOAT
 

	)

	@/usr/include/jpegint.h

22 
	mJBUF_PASS_THRU
,

24 
	mJBUF_SAVE_SOURCE
,

25 
	mJBUF_CRANK_DEST
,

26 
	mJBUF_SAVE_AND_PASS


27 } 
	tJ_BUF_MODE
;

30 
	#CSTATE_START
 100

	)

31 
	#CSTATE_SCANNING
 101

	)

32 
	#CSTATE_RAW_OK
 102

	)

33 
	#CSTATE_WRCOEFS
 103

	)

34 
	#DSTATE_START
 200

	)

35 
	#DSTATE_INHEADER
 201

	)

36 
	#DSTATE_READY
 202

	)

37 
	#DSTATE_PRELOAD
 203

	)

38 
	#DSTATE_PRESCAN
 204

	)

39 
	#DSTATE_SCANNING
 205

	)

40 
	#DSTATE_RAW_OK
 206

	)

41 
	#DSTATE_BUFIMAGE
 207

	)

42 
	#DSTATE_BUFPOST
 208

	)

43 
	#DSTATE_RDCOEFS
 209

	)

44 
	#DSTATE_STOPPING
 210

	)

48 
	tJLONG
;

56 
	#LEFT_SHIFT
(
a
, 
b
Ë((
JLONG
)(()◊Ë<< (b)))

	)

62 
	sj≥g_comp_ma°î
 {

63 (*
	m¥ï¨e_f‹_∑ss
Ë(
j_com¥ess_±r
 
	mcöfo
);

64 (*
	m∑ss_°¨tup
Ë(
j_com¥ess_±r
 
	mcöfo
);

65 (*
	mföish_∑ss
Ë(
j_com¥ess_±r
 
	mcöfo
);

68 
boﬁón
 
	mˇŒ_∑ss_°¨tup
;

69 
boﬁón
 
	mis_œ°_∑ss
;

73 
	sj≥g_c_maö_c⁄åﬁÀr
 {

74 (*
	m°¨t_∑ss
Ë(
j_com¥ess_±r
 
	mcöfo
, 
J_BUF_MODE
 
	m∑ss_mode
);

75 (*
	m¥o˚ss_d©a
Ë(
j_com¥ess_±r
 
	mcöfo
, 
JSAMPARRAY
 
	möput_buf
,

76 
JDIMENSION
 *
	mö_row_˘r
, JDIMENSION 
	mö_rows_avaû
);

80 
	sj≥g_c_¥ï_c⁄åﬁÀr
 {

81 (*
	m°¨t_∑ss
Ë(
j_com¥ess_±r
 
	mcöfo
, 
J_BUF_MODE
 
	m∑ss_mode
);

82 (*
	m¥e_¥o˚ss_d©a
Ë(
j_com¥ess_±r
 
	mcöfo
, 
JSAMPARRAY
 
	möput_buf
,

83 
JDIMENSION
 *
	mö_row_˘r
, JDIMENSION 
	mö_rows_avaû
,

84 
JSAMPIMAGE
 
	mouçut_buf
,

85 
JDIMENSION
 *
	mout_row_group_˘r
,

86 
JDIMENSION
 
	mout_row_groups_avaû
);

90 
	sj≥g_c_c€f_c⁄åﬁÀr
 {

91 (*
	m°¨t_∑ss
Ë(
j_com¥ess_±r
 
	mcöfo
, 
J_BUF_MODE
 
	m∑ss_mode
);

92 
boﬁón
 (*
com¥ess_d©a
Ë(
j_com¥ess_±r
 
	mcöfo
, 
JSAMPIMAGE
 
	möput_buf
);

96 
	sj≥g_cﬁ‹_c⁄vîãr
 {

97 (*
	m°¨t_∑ss
Ë(
j_com¥ess_±r
 
	mcöfo
);

98 (*
	mcﬁ‹_c⁄vît
Ë(
j_com¥ess_±r
 
	mcöfo
, 
JSAMPARRAY
 
	möput_buf
,

99 
JSAMPIMAGE
 
	mouçut_buf
, 
JDIMENSION
 
	mouçut_row
,

100 
	mnum_rows
);

104 
	sj≥g_downßm∂î
 {

105 (*
	m°¨t_∑ss
Ë(
j_com¥ess_±r
 
	mcöfo
);

106 (*
	mdownßm∂e
Ë(
j_com¥ess_±r
 
	mcöfo
, 
JSAMPIMAGE
 
	möput_buf
,

107 
JDIMENSION
 
	mö_row_ödex
, 
JSAMPIMAGE
 
	mouçut_buf
,

108 
JDIMENSION
 
	mout_row_group_ödex
);

110 
boﬁón
 
	m√ed_c⁄ãxt_rows
;

114 
	sj≥g_f‹w¨d_d˘
 {

115 (*
	m°¨t_∑ss
Ë(
j_com¥ess_±r
 
	mcöfo
);

117 (*
	mf‹w¨d_DCT
Ë(
j_com¥ess_±r
 
	mcöfo
, 
j≥g_comp⁄ít_öfo
 *
	mcomµå
,

118 
JSAMPARRAY
 
	mßm∂e_d©a
, 
JBLOCKROW
 
	mc€f_blocks
,

119 
JDIMENSION
 
	m°¨t_row
, JDIMENSION 
	m°¨t_cﬁ
,

120 
JDIMENSION
 
	mnum_blocks
);

124 
	sj≥g_íå›y_ícodî
 {

125 (*
	m°¨t_∑ss
Ë(
j_com¥ess_±r
 
	mcöfo
, 
boﬁón
 
	mg©hî_°©i°ics
);

126 
boﬁón
 (*
ícode_mcu
Ë(
j_com¥ess_±r
 
	mcöfo
, 
JBLOCKROW
 *
	mMCU_d©a
);

127 (*
	mföish_∑ss
Ë(
j_com¥ess_±r
 
	mcöfo
);

131 
	sj≥g_m¨kî_wrôî
 {

132 (*
	mwrôe_fûe_hódî
Ë(
j_com¥ess_±r
 
	mcöfo
);

133 (*
	mwrôe_‰ame_hódî
Ë(
j_com¥ess_±r
 
	mcöfo
);

134 (*
	mwrôe_sˇn_hódî
Ë(
j_com¥ess_±r
 
	mcöfo
);

135 (*
	mwrôe_fûe_åaûî
Ë(
j_com¥ess_±r
 
	mcöfo
);

136 (*
	mwrôe_èbÀs_⁄ly
Ë(
j_com¥ess_±r
 
	mcöfo
);

139 (*
	mwrôe_m¨kî_hódî
Ë(
j_com¥ess_±r
 
	mcöfo
, 
	mm¨kî
,

140 
	md©Æí
);

141 (*
	mwrôe_m¨kî_byã
Ë(
j_com¥ess_±r
 
	mcöfo
, 
	mvÆ
);

148 
	sj≥g_decomp_ma°î
 {

149 (*
	m¥ï¨e_f‹_ouçut_∑ss
Ë(
j_decom¥ess_±r
 
	mcöfo
);

150 (*
	mföish_ouçut_∑ss
Ë(
j_decom¥ess_±r
 
	mcöfo
);

153 
boﬁón
 
	mis_dummy_∑ss
;

156 
JDIMENSION
 
	mfú°_iMCU_cﬁ
;

157 
JDIMENSION
 
	mœ°_iMCU_cﬁ
;

158 
JDIMENSION
 
	mfú°_MCU_cﬁ
[
MAX_COMPONENTS
];

159 
JDIMENSION
 
	mœ°_MCU_cﬁ
[
MAX_COMPONENTS
];

160 
boﬁón
 
	mjöô_upßm∂î_no_Æloc
;

164 
	sj≥g_öput_c⁄åﬁÀr
 {

165 (*
	mc⁄sume_öput
Ë(
j_decom¥ess_±r
 
	mcöfo
);

166 (*
	mª£t_öput_c⁄åﬁÀr
Ë(
j_decom¥ess_±r
 
	mcöfo
);

167 (*
	m°¨t_öput_∑ss
Ë(
j_decom¥ess_±r
 
	mcöfo
);

168 (*
	mföish_öput_∑ss
Ë(
j_decom¥ess_±r
 
	mcöfo
);

171 
boﬁón
 
	mhas_mu…ùÀ_sˇns
;

172 
boﬁón
 
	meoi_ªached
;

176 
	sj≥g_d_maö_c⁄åﬁÀr
 {

177 (*
	m°¨t_∑ss
Ë(
j_decom¥ess_±r
 
	mcöfo
, 
J_BUF_MODE
 
	m∑ss_mode
);

178 (*
	m¥o˚ss_d©a
Ë(
j_decom¥ess_±r
 
	mcöfo
, 
JSAMPARRAY
 
	mouçut_buf
,

179 
JDIMENSION
 *
	mout_row_˘r
, JDIMENSION 
	mout_rows_avaû
);

183 
	sj≥g_d_c€f_c⁄åﬁÀr
 {

184 (*
	m°¨t_öput_∑ss
Ë(
j_decom¥ess_±r
 
	mcöfo
);

185 (*
	mc⁄sume_d©a
Ë(
j_decom¥ess_±r
 
	mcöfo
);

186 (*
	m°¨t_ouçut_∑ss
Ë(
j_decom¥ess_±r
 
	mcöfo
);

187 (*
	mdecom¥ess_d©a
Ë(
j_decom¥ess_±r
 
	mcöfo
, 
JSAMPIMAGE
 
	mouçut_buf
);

189 
jvút_b¨øy_±r
 *
	mc€f_¨øys
;

193 
	sj≥g_d_po°_c⁄åﬁÀr
 {

194 (*
	m°¨t_∑ss
Ë(
j_decom¥ess_±r
 
	mcöfo
, 
J_BUF_MODE
 
	m∑ss_mode
);

195 (*
	mpo°_¥o˚ss_d©a
Ë(
j_decom¥ess_±r
 
	mcöfo
, 
JSAMPIMAGE
 
	möput_buf
,

196 
JDIMENSION
 *
	mö_row_group_˘r
,

197 
JDIMENSION
 
	mö_row_groups_avaû
,

198 
JSAMPARRAY
 
	mouçut_buf
, 
JDIMENSION
 *
	mout_row_˘r
,

199 
JDIMENSION
 
	mout_rows_avaû
);

203 
	sj≥g_m¨kî_ªadî
 {

204 (*
	mª£t_m¨kî_ªadî
Ë(
j_decom¥ess_±r
 
	mcöfo
);

209 (*
	mªad_m¨kîs
Ë(
j_decom¥ess_±r
 
	mcöfo
);

211 
j≥g_m¨kî_∑r£r_mëhod
 
	mªad_ª°¨t_m¨kî
;

216 
boﬁón
 
	mßw_SOI
;

217 
boﬁón
 
	mßw_SOF
;

218 
	m√xt_ª°¨t_num
;

219 
	mdisˇrded_byãs
;

223 
	sj≥g_íå›y_decodî
 {

224 (*
	m°¨t_∑ss
Ë(
j_decom¥ess_±r
 
	mcöfo
);

225 
boﬁón
 (*
decode_mcu
Ë(
j_decom¥ess_±r
 
	mcöfo
, 
JBLOCKROW
 *
	mMCU_d©a
);

229 
boﬁón
 
	mösufficõ¡_d©a
;

233 (*
	tövî£_DCT_mëhod_±r
Ë(
	tj_decom¥ess_±r
 
	tcöfo
,

234 
	tj≥g_comp⁄ít_öfo
 *
	tcomµå
,

235 
	tJCOEFPTR
 
	tc€f_block
,

236 
	tJSAMPARRAY
 
	touçut_buf
,

237 
	tJDIMENSION
 
	touçut_cﬁ
);

239 
	sj≥g_övî£_d˘
 {

240 (*
°¨t_∑ss
Ë(
j_decom¥ess_±r
 
cöfo
);

242 
övî£_DCT_mëhod_±r
 
övî£_DCT
[
MAX_COMPONENTS
];

246 
	sj≥g_upßm∂î
 {

247 (*
°¨t_∑ss
Ë(
j_decom¥ess_±r
 
cöfo
);

248 (*
upßm∂e
Ë(
j_decom¥ess_±r
 
cöfo
, 
JSAMPIMAGE
 
öput_buf
,

249 
JDIMENSION
 *
ö_row_group_˘r
,

250 
JDIMENSION
 
ö_row_groups_avaû
, 
JSAMPARRAY
 
ouçut_buf
,

251 
JDIMENSION
 *
out_row_˘r
, JDIMENSION 
out_rows_avaû
);

253 
boﬁón
 
√ed_c⁄ãxt_rows
;

257 
	sj≥g_cﬁ‹_dec⁄vîãr
 {

258 (*
°¨t_∑ss
Ë(
j_decom¥ess_±r
 
cöfo
);

259 (*
cﬁ‹_c⁄vît
Ë(
j_decom¥ess_±r
 
cöfo
, 
JSAMPIMAGE
 
öput_buf
,

260 
JDIMENSION
 
öput_row
, 
JSAMPARRAY
 
ouçut_buf
,

261 
num_rows
);

265 
	sj≥g_cﬁ‹_qu™tizî
 {

266 (*
°¨t_∑ss
Ë(
j_decom¥ess_±r
 
cöfo
, 
boﬁón
 
is_¥e_sˇn
);

267 (*
cﬁ‹_qu™tize
Ë(
j_decom¥ess_±r
 
cöfo
, 
JSAMPARRAY
 
öput_buf
,

268 
JSAMPARRAY
 
ouçut_buf
, 
num_rows
);

269 (*
föish_∑ss
Ë(
j_decom¥ess_±r
 
cöfo
);

270 (*
√w_cﬁ‹_m≠
Ë(
j_decom¥ess_±r
 
cöfo
);

276 #unde‡
MAX


277 
	#MAX
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

278 #unde‡
MIN


279 
	#MIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

292 #ifde‡
RIGHT_SHIFT_IS_UNSIGNED


293 
	#SHIFT_TEMPS
 
JLONG
 
shi·_ãmp
;

	)

294 
	#RIGHT_SHIFT
(
x
,
sh·
) \

295 ((
shi·_ãmp
 = (
x
)) < 0 ? \

296 (
shi·_ãmp
 >> (
sh·
)Ë| ((~((
JLONG
) 0)) << (32-(shft))) : \

297 (
shi·_ãmp
 >> (
sh·
)))

	)

299 
	#SHIFT_TEMPS


	)

300 
	#RIGHT_SHIFT
(
x
,
sh·
Ë((xË>> (sh·))

	)

305 
	$EXTERN
(Ë
	`jöô_com¥ess_ma°î
 (
j_com¥ess_±r
 
cöfo
);

306 
	$EXTERN
(Ë
	`jöô_c_ma°î_c⁄åﬁ
 (
j_com¥ess_±r
 
cöfo
,

307 
boﬁón
 
å™scode_⁄ly
);

308 
	$EXTERN
(Ë
	`jöô_c_maö_c⁄åﬁÀr
 (
j_com¥ess_±r
 
cöfo
,

309 
boﬁón
 
√ed_fuŒ_buf„r
);

310 
	$EXTERN
(Ë
	`jöô_c_¥ï_c⁄åﬁÀr
 (
j_com¥ess_±r
 
cöfo
,

311 
boﬁón
 
√ed_fuŒ_buf„r
);

312 
	$EXTERN
(Ë
	`jöô_c_c€f_c⁄åﬁÀr
 (
j_com¥ess_±r
 
cöfo
,

313 
boﬁón
 
√ed_fuŒ_buf„r
);

314 
	$EXTERN
(Ë
	`jöô_cﬁ‹_c⁄vîãr
 (
j_com¥ess_±r
 
cöfo
);

315 
	$EXTERN
(Ë
	`jöô_downßm∂î
 (
j_com¥ess_±r
 
cöfo
);

316 
	$EXTERN
(Ë
	`jöô_f‹w¨d_d˘
 (
j_com¥ess_±r
 
cöfo
);

317 
	$EXTERN
(Ë
	`jöô_huff_ícodî
 (
j_com¥ess_±r
 
cöfo
);

318 
	$EXTERN
(Ë
	`jöô_phuff_ícodî
 (
j_com¥ess_±r
 
cöfo
);

319 
	$EXTERN
(Ë
	`jöô_¨ôh_ícodî
 (
j_com¥ess_±r
 
cöfo
);

320 
	$EXTERN
(Ë
	`jöô_m¨kî_wrôî
 (
j_com¥ess_±r
 
cöfo
);

322 
	$EXTERN
(Ë
	`jöô_ma°î_decom¥ess
 (
j_decom¥ess_±r
 
cöfo
);

323 
	$EXTERN
(Ë
	`jöô_d_maö_c⁄åﬁÀr
 (
j_decom¥ess_±r
 
cöfo
,

324 
boﬁón
 
√ed_fuŒ_buf„r
);

325 
	$EXTERN
(Ë
	`jöô_d_c€f_c⁄åﬁÀr
 (
j_decom¥ess_±r
 
cöfo
,

326 
boﬁón
 
√ed_fuŒ_buf„r
);

327 
	$EXTERN
(Ë
	`jöô_d_po°_c⁄åﬁÀr
 (
j_decom¥ess_±r
 
cöfo
,

328 
boﬁón
 
√ed_fuŒ_buf„r
);

329 
	$EXTERN
(Ë
	`jöô_öput_c⁄åﬁÀr
 (
j_decom¥ess_±r
 
cöfo
);

330 
	$EXTERN
(Ë
	`jöô_m¨kî_ªadî
 (
j_decom¥ess_±r
 
cöfo
);

331 
	$EXTERN
(Ë
	`jöô_huff_decodî
 (
j_decom¥ess_±r
 
cöfo
);

332 
	$EXTERN
(Ë
	`jöô_phuff_decodî
 (
j_decom¥ess_±r
 
cöfo
);

333 
	$EXTERN
(Ë
	`jöô_¨ôh_decodî
 (
j_decom¥ess_±r
 
cöfo
);

334 
	$EXTERN
(Ë
	`jöô_övî£_d˘
 (
j_decom¥ess_±r
 
cöfo
);

335 
	$EXTERN
(Ë
	`jöô_upßm∂î
 (
j_decom¥ess_±r
 
cöfo
);

336 
	$EXTERN
(Ë
	`jöô_cﬁ‹_dec⁄vîãr
 (
j_decom¥ess_±r
 
cöfo
);

337 
	$EXTERN
(Ë
	`jöô_1∑ss_qu™tizî
 (
j_decom¥ess_±r
 
cöfo
);

338 
	$EXTERN
(Ë
	`jöô_2∑ss_qu™tizî
 (
j_decom¥ess_±r
 
cöfo
);

339 
	$EXTERN
(Ë
	`jöô_mîged_upßm∂î
 (
j_decom¥ess_±r
 
cöfo
);

341 
	$EXTERN
(Ë
	`jöô_mem‹y_mgr
 (
j_comm⁄_±r
 
cöfo
);

344 
	$EXTERN
(Ë
	`jdiv_round_up
 (
a
, 
b
);

345 
	$EXTERN
(Ë
	`jround_up
 (
a
, 
b
);

346 
	$EXTERN
(Ë
	`jc›y_ßm∂e_rows
 (
JSAMPARRAY
 
öput_¨øy
, 
sour˚_row
,

347 
JSAMPARRAY
 
ouçut_¨øy
, 
de°_row
,

348 
num_rows
, 
JDIMENSION
 
num_cﬁs
);

349 
	$EXTERN
(Ë
	`jc›y_block_row
 (
JBLOCKROW
 
öput_row
, JBLOCKROW 
ouçut_row
,

350 
JDIMENSION
 
num_blocks
);

351 
	$EXTERN
(Ë
	`jzîo_Ár
 (*
èrgë
, 
size_t
 
byã°ozîo
);

354 c⁄° 
j≥g_zigzag_‹dî
[];

356 c⁄° 
j≥g_«tuøl_‹dî
[];

359 c⁄° 
JLONG
 
j≥g_¨ôab
[];

363 #ifde‡
INCOMPLETE_TYPES_BROKEN


364 #i‚de‡
AM_MEMORY_MANAGER


365 
	sjvút_ßºay_c⁄åﬁ
 { 
dummy
; };

366 
	sjvút_b¨øy_c⁄åﬁ
 { 
dummy
; };

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/lzma/base.h

15 #i‚de‡
LZMA_H_INTERNAL


16 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

29 
	tlzma_boﬁ
;

45 
	mLZMA_RESERVED_ENUM
 = 0

46 } 
	tlzma_ª£rved_íum
;

58 
	mLZMA_OK
 = 0,

63 
	mLZMA_STREAM_END
 = 1,

75 
	mLZMA_NO_CHECK
 = 2,

90 
	mLZMA_UNSUPPORTED_CHECK
 = 3,

115 
	mLZMA_GET_CHECK
 = 4,

128 
	mLZMA_MEM_ERROR
 = 5,

140 
	mLZMA_MEMLIMIT_ERROR
 = 6,

150 
	mLZMA_FORMAT_ERROR
 = 7,

160 
	mLZMA_OPTIONS_ERROR
 = 8,

172 
	mLZMA_DATA_ERROR
 = 9,

191 
	mLZMA_BUF_ERROR
 = 10,

218 
	mLZMA_PROG_ERROR
 = 11,

237 } 
	tlzma_ªt
;

251 
	mLZMA_RUN
 = 0,

265 
	mLZMA_SYNC_FLUSH
 = 1,

290 
	mLZMA_FULL_FLUSH
 = 2,

305 
	mLZMA_FULL_BARRIER
 = 4,

328 
	mLZMA_FINISH
 = 3

345 } 
	tlzma_a˘i⁄
;

407 *(
LZMA_API_CALL
 *
	mÆloc
)(*
	m›aque
, 
size_t
 
	mnmemb
, size_à
	msize
);

421 (
LZMA_API_CALL
 *
	m‰ì
)(*
	m›aque
, *
	m±r
);

432 *
	m›aque
;

434 } 
	tlzma_Æloˇt‹
;

442 
lzma_öã∫Æ_s
 
	tlzma_öã∫Æ
;

486 c⁄° 
uöt8_t
 *
	m√xt_ö
;

487 
size_t
 
	mavaû_ö
;

488 
uöt64_t
 
	mtŸÆ_ö
;

490 
uöt8_t
 *
	m√xt_out
;

491 
size_t
 
	mavaû_out
;

492 
uöt64_t
 
	mtŸÆ_out
;

502 c⁄° 
lzma_Æloˇt‹
 *
	mÆloˇt‹
;

505 
lzma_öã∫Æ
 *
	möã∫Æ
;

513 *
	mª£rved_±r1
;

514 *
	mª£rved_±r2
;

515 *
	mª£rved_±r3
;

516 *
	mª£rved_±r4
;

517 
uöt64_t
 
	mª£rved_öt1
;

518 
uöt64_t
 
	mª£rved_öt2
;

519 
size_t
 
	mª£rved_öt3
;

520 
size_t
 
	mª£rved_öt4
;

521 
lzma_ª£rved_íum
 
	mª£rved_íum1
;

522 
lzma_ª£rved_íum
 
	mª£rved_íum2
;

524 } 
	tlzma_°ªam
;

545 
	#LZMA_STREAM_INIT
 \

546 { 
NULL
, 0, 0, NULL, 0, 0, NULL, NULL, \

547 
NULL
, NULL, NULL, NULL, 0, 0, 0, 0, \

548 
LZMA_RESERVED_ENUM
, LZMA_RESERVED_ENUM }

	)

563 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_code
(
lzma_°ªam
 *
°rm
, 
lzma_a˘i⁄
 
a˘i⁄
)

564 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

580 
	$LZMA_API
(Ë
	$lzma_íd
(
lzma_°ªam
 *
°rm
Ë
lzma_nŸhrow
;

598 
	$LZMA_API
(Ë
	$lzma_gë_¥ogªss
(
lzma_°ªam
 *
°rm
,

599 
uöt64_t
 *
¥ogªss_ö
, uöt64_à*
¥ogªss_out
Ë
lzma_nŸhrow
;

624 
	$LZMA_API
(
uöt64_t
Ë
	$lzma_memußge
(c⁄° 
lzma_°ªam
 *
°rm
)

625 
lzma_nŸhrow
 
lzma_©å_puª
;

637 
	$LZMA_API
(
uöt64_t
Ë
	$lzma_memlimô_gë
(c⁄° 
lzma_°ªam
 *
°rm
)

638 
lzma_nŸhrow
 
lzma_©å_puª
;

653 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_memlimô_£t
(

654 
lzma_°ªam
 *
°rm
, 
uöt64_t
 
memlimô
Ë
lzma_nŸhrow
;

	@/usr/include/lzma/bcj.h

15 #i‚de‡
LZMA_H_INTERNAL


16 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

22 
	#LZMA_FILTER_X86
 
	`LZMA_VLI_C
(0x04)

	)

27 
	#LZMA_FILTER_POWERPC
 
	`LZMA_VLI_C
(0x05)

	)

32 
	#LZMA_FILTER_IA64
 
	`LZMA_VLI_C
(0x06)

	)

37 
	#LZMA_FILTER_ARM
 
	`LZMA_VLI_C
(0x07)

	)

42 
	#LZMA_FILTER_ARMTHUMB
 
	`LZMA_VLI_C
(0x08)

	)

47 
	#LZMA_FILTER_SPARC
 
	`LZMA_VLI_C
(0x09)

	)

88 
uöt32_t
 
	m°¨t_off£t
;

90 } 
	tlzma_›ti⁄s_bcj
;

	@/usr/include/lzma/block.h

15 #i‚de‡
LZMA_H_INTERNAL


16 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

52 
uöt32_t
 
	mvîsi⁄
;

72 
uöt32_t
 
	mhódî_size
;

73 
	#LZMA_BLOCK_HEADER_SIZE_MIN
 8

	)

74 
	#LZMA_BLOCK_HEADER_SIZE_MAX
 1024

	)

93 
lzma_check
 
	mcheck
;

148 
lzma_vli
 
	mcom¥es£d_size
;

172 
lzma_vli
 
	muncom¥es£d_size
;

200 
lzma_fûãr
 *
	mfûãrs
;

217 
uöt8_t
 
	møw_check
[
LZMA_CHECK_SIZE_MAX
];

226 *
	mª£rved_±r1
;

227 *
	mª£rved_±r2
;

228 *
	mª£rved_±r3
;

229 
uöt32_t
 
	mª£rved_öt1
;

230 
uöt32_t
 
	mª£rved_öt2
;

231 
lzma_vli
 
	mª£rved_öt3
;

232 
lzma_vli
 
	mª£rved_öt4
;

233 
lzma_vli
 
	mª£rved_öt5
;

234 
lzma_vli
 
	mª£rved_öt6
;

235 
lzma_vli
 
	mª£rved_öt7
;

236 
lzma_vli
 
	mª£rved_öt8
;

237 
lzma_ª£rved_íum
 
	mª£rved_íum1
;

238 
lzma_ª£rved_íum
 
	mª£rved_íum2
;

239 
lzma_ª£rved_íum
 
	mª£rved_íum3
;

240 
lzma_ª£rved_íum
 
	mª£rved_íum4
;

261 
lzma_boﬁ
 
	mign‹e_check
;

263 
lzma_boﬁ
 
	mª£rved_boﬁ2
;

264 
lzma_boﬁ
 
	mª£rved_boﬁ3
;

265 
lzma_boﬁ
 
	mª£rved_boﬁ4
;

266 
lzma_boﬁ
 
	mª£rved_boﬁ5
;

267 
lzma_boﬁ
 
	mª£rved_boﬁ6
;

268 
lzma_boﬁ
 
	mª£rved_boﬁ7
;

269 
lzma_boﬁ
 
	mª£rved_boﬁ8
;

271 } 
	tlzma_block
;

285 
	#lzma_block_hódî_size_decode
(
b
Ë(((
uöt32_t
)(bË+ 1Ë* 4)

	)

309 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_block_hódî_size
(
lzma_block
 *
block
)

310 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

331 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_block_hódî_ícode
(

332 c⁄° 
lzma_block
 *
block
, 
uöt8_t
 *
out
)

333 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

376 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_block_hódî_decode
(
lzma_block
 *
block
,

377 c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
, c⁄° 
uöt8_t
 *
ö
)

378 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

408 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_block_com¥es£d_size
(

409 
lzma_block
 *
block
, 
lzma_vli
 
u≈added_size
)

410 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

424 
	$LZMA_API
(
lzma_vli
Ë
	$lzma_block_u≈added_size
(c⁄° 
lzma_block
 *
block
)

425 
lzma_nŸhrow
 
lzma_©å_puª
;

437 
	$LZMA_API
(
lzma_vli
Ë
	$lzma_block_tŸÆ_size
(c⁄° 
lzma_block
 *
block
)

438 
lzma_nŸhrow
 
lzma_©å_puª
;

455 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_block_ícodî
(

456 
lzma_°ªam
 *
°rm
, 
lzma_block
 *
block
)

457 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

473 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_block_decodî
(

474 
lzma_°ªam
 *
°rm
, 
lzma_block
 *
block
)

475 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

484 
	$LZMA_API
(
size_t
Ë
	$lzma_block_buf„r_bound
(
size_t
 
uncom¥es£d_size
)

485 
lzma_nŸhrow
;

525 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_block_buf„r_ícode
(

526 
lzma_block
 *
block
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
,

527 c⁄° 
uöt8_t
 *
ö
, 
size_t
 
ö_size
,

528 
uöt8_t
 *
out
, 
size_t
 *
out_pos
, size_à
out_size
)

529 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

544 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_block_uncomp_ícode
(
lzma_block
 *
block
,

545 c⁄° 
uöt8_t
 *
ö
, 
size_t
 
ö_size
,

546 
uöt8_t
 *
out
, 
size_t
 *
out_pos
, size_à
out_size
)

547 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

577 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_block_buf„r_decode
(

578 
lzma_block
 *
block
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
,

579 c⁄° 
uöt8_t
 *
ö
, 
size_t
 *
ö_pos
, size_à
ö_size
,

580 
uöt8_t
 *
out
, 
size_t
 *
out_pos
, size_à
out_size
)

581 
lzma_nŸhrow
;

	@/usr/include/lzma/check.h

15 #i‚de‡
LZMA_H_INTERNAL


16 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

28 
	mLZMA_CHECK_NONE
 = 0,

35 
	mLZMA_CHECK_CRC32
 = 1,

42 
	mLZMA_CHECK_CRC64
 = 4,

49 
	mLZMA_CHECK_SHA256
 = 10

55 } 
	tlzma_check
;

68 
	#LZMA_CHECK_ID_MAX
 15

	)

81 
	$LZMA_API
(
lzma_boﬁ
Ë
	$lzma_check_is_suµ‹ãd
(
lzma_check
 
check
)

82 
lzma_nŸhrow
 
lzma_©å_c⁄°
;

95 
	$LZMA_API
(
uöt32_t
Ë
	$lzma_check_size
(
lzma_check
 
check
)

96 
lzma_nŸhrow
 
lzma_©å_c⁄°
;

102 
	#LZMA_CHECK_SIZE_MAX
 64

	)

119 
	$LZMA_API
(
uöt32_t
Ë
	$lzma_¸c32
(

120 c⁄° 
uöt8_t
 *
buf
, 
size_t
 
size
, 
uöt32_t
 
¸c
)

121 
lzma_nŸhrow
 
lzma_©å_puª
;

131 
	$LZMA_API
(
uöt64_t
Ë
	$lzma_¸c64
(

132 c⁄° 
uöt8_t
 *
buf
, 
size_t
 
size
, 
uöt64_t
 
¸c
)

133 
lzma_nŸhrow
 
lzma_©å_puª
;

149 
	$LZMA_API
(
lzma_check
Ë
	$lzma_gë_check
(c⁄° 
lzma_°ªam
 *
°rm
)

150 
lzma_nŸhrow
;

	@/usr/include/lzma/container.h

15 #i‚de‡
LZMA_H_INTERNAL


16 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

31 
	#LZMA_PRESET_DEFAULT
 
	`UINT32_C
(6)

	)

40 
	#LZMA_PRESET_LEVEL_MASK
 
	`UINT32_C
(0x1F)

	)

60 
	#LZMA_PRESET_EXTREME
 (
	`UINT32_C
(1Ë<< 31)

	)

74 
uöt32_t
 
	mÊags
;

79 
uöt32_t
 
	mthªads
;

104 
uöt64_t
 
	mblock_size
;

135 
uöt32_t
 
	mtimeout
;

143 
uöt32_t
 
	m¥e£t
;

151 c⁄° 
lzma_fûãr
 *
	mfûãrs
;

160 
lzma_check
 
	mcheck
;

169 
lzma_ª£rved_íum
 
	mª£rved_íum1
;

170 
lzma_ª£rved_íum
 
	mª£rved_íum2
;

171 
lzma_ª£rved_íum
 
	mª£rved_íum3
;

172 
uöt32_t
 
	mª£rved_öt1
;

173 
uöt32_t
 
	mª£rved_öt2
;

174 
uöt32_t
 
	mª£rved_öt3
;

175 
uöt32_t
 
	mª£rved_öt4
;

176 
uöt64_t
 
	mª£rved_öt5
;

177 
uöt64_t
 
	mª£rved_öt6
;

178 
uöt64_t
 
	mª£rved_öt7
;

179 
uöt64_t
 
	mª£rved_öt8
;

180 *
	mª£rved_±r1
;

181 *
	mª£rved_±r2
;

182 *
	mª£rved_±r3
;

183 *
	mª£rved_±r4
;

185 } 
	tlzma_mt
;

199 
	$LZMA_API
(
uöt64_t
Ë
	$lzma_ósy_ícodî_memußge
(
uöt32_t
 
¥e£t
)

200 
lzma_nŸhrow
 
lzma_©å_puª
;

215 
	$LZMA_API
(
uöt64_t
Ë
	$lzma_ósy_decodî_memußge
(
uöt32_t
 
¥e£t
)

216 
lzma_nŸhrow
 
lzma_©å_puª
;

258 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ósy_ícodî
(

259 
lzma_°ªam
 *
°rm
, 
uöt32_t
 
¥e£t
, 
lzma_check
 
check
)

260 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

291 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ósy_buf„r_ícode
(

292 
uöt32_t
 
¥e£t
, 
lzma_check
 
check
,

293 c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
,

294 c⁄° 
uöt8_t
 *
ö
, 
size_t
 
ö_size
,

295 
uöt8_t
 *
out
, 
size_t
 *
out_pos
, size_à
out_size
Ë
lzma_nŸhrow
;

314 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_°ªam_ícodî
(
lzma_°ªam
 *
°rm
,

315 c⁄° 
lzma_fûãr
 *
fûãrs
, 
lzma_check
 
check
)

316 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

334 
	$LZMA_API
(
uöt64_t
Ë
	$lzma_°ªam_ícodî_mt_memußge
(

335 c⁄° 
lzma_mt
 *
›ti⁄s
Ë
lzma_nŸhrow
 
lzma_©å_puª
;

357 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_°ªam_ícodî_mt
(

358 
lzma_°ªam
 *
°rm
, c⁄° 
lzma_mt
 *
›ti⁄s
)

359 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

382 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_Æ⁄e_ícodî
(

383 
lzma_°ªam
 *
°rm
, c⁄° 
lzma_›ti⁄s_lzma
 *
›ti⁄s
)

384 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

409 
	$LZMA_API
(
size_t
Ë
	$lzma_°ªam_buf„r_bound
(
size_t
 
uncom¥es£d_size
)

410 
lzma_nŸhrow
;

439 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_°ªam_buf„r_ícode
(

440 
lzma_fûãr
 *
fûãrs
, 
lzma_check
 
check
,

441 c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
,

442 c⁄° 
uöt8_t
 *
ö
, 
size_t
 
ö_size
,

443 
uöt8_t
 *
out
, 
size_t
 *
out_pos
, size_à
out_size
)

444 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

457 
	#LZMA_TELL_NO_CHECK
 
	`UINT32_C
(0x01)

	)

466 
	#LZMA_TELL_UNSUPPORTED_CHECK
 
	`UINT32_C
(0x02)

	)

474 
	#LZMA_TELL_ANY_CHECK
 
	`UINT32_C
(0x04)

	)

498 
	#LZMA_IGNORE_CHECK
 
	`UINT32_C
(0x10)

	)

515 
	#LZMA_CONCATENATED
 
	`UINT32_C
(0x08)

	)

533 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_°ªam_decodî
(

534 
lzma_°ªam
 *
°rm
, 
uöt64_t
 
memlimô
, 
uöt32_t
 
Êags
)

535 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

555 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_auto_decodî
(

556 
lzma_°ªam
 *
°rm
, 
uöt64_t
 
memlimô
, 
uöt32_t
 
Êags
)

557 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

571 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_Æ⁄e_decodî
(

572 
lzma_°ªam
 *
°rm
, 
uöt64_t
 
memlimô
)

573 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

614 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_°ªam_buf„r_decode
(

615 
uöt64_t
 *
memlimô
, 
uöt32_t
 
Êags
,

616 c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
,

617 c⁄° 
uöt8_t
 *
ö
, 
size_t
 *
ö_pos
, size_à
ö_size
,

618 
uöt8_t
 *
out
, 
size_t
 *
out_pos
, size_à
out_size
)

619 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

	@/usr/include/lzma/delta.h

15 #i‚de‡
LZMA_H_INTERNAL


16 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

25 
	#LZMA_FILTER_DELTA
 
	`LZMA_VLI_C
(0x03)

	)

36 
	mLZMA_DELTA_TYPE_BYTE


37 } 
	tlzma_dñè_ty≥
;

47 
lzma_dñè_ty≥
 
	mty≥
;

59 
uöt32_t
 
	mdi°
;

60 
	#LZMA_DELTA_DIST_MIN
 1

	)

61 
	#LZMA_DELTA_DIST_MAX
 256

	)

70 
uöt32_t
 
	mª£rved_öt1
;

71 
uöt32_t
 
	mª£rved_öt2
;

72 
uöt32_t
 
	mª£rved_öt3
;

73 
uöt32_t
 
	mª£rved_öt4
;

74 *
	mª£rved_±r1
;

75 *
	mª£rved_±r2
;

77 } 
	tlzma_›ti⁄s_dñè
;

	@/usr/include/lzma/filter.h

15 #i‚de‡
LZMA_H_INTERNAL


16 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

26 
	#LZMA_FILTERS_MAX
 4

	)

54 
lzma_vli
 
	mid
;

63 *
	m›ti⁄s
;

65 } 
	tlzma_fûãr
;

78 
	$LZMA_API
(
lzma_boﬁ
Ë
	$lzma_fûãr_ícodî_is_suµ‹ãd
(
lzma_vli
 
id
)

79 
lzma_nŸhrow
 
lzma_©å_c⁄°
;

88 
	$LZMA_API
(
lzma_boﬁ
Ë
	$lzma_fûãr_decodî_is_suµ‹ãd
(
lzma_vli
 
id
)

89 
lzma_nŸhrow
 
lzma_©å_c⁄°
;

119 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_fûãrs_c›y
(

120 c⁄° 
lzma_fûãr
 *
§c
,Üzma_fûã∏*
de°
,

121 c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
Ë
lzma_nŸhrow
;

139 
	$LZMA_API
(
uöt64_t
Ë
	$lzma_øw_ícodî_memußge
(c⁄° 
lzma_fûãr
 *
fûãrs
)

140 
lzma_nŸhrow
 
lzma_©å_puª
;

158 
	$LZMA_API
(
uöt64_t
Ë
	$lzma_øw_decodî_memußge
(c⁄° 
lzma_fûãr
 *
fûãrs
)

159 
lzma_nŸhrow
 
lzma_©å_puª
;

179 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_øw_ícodî
(

180 
lzma_°ªam
 *
°rm
, c⁄° 
lzma_fûãr
 *
fûãrs
)

181 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

197 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_øw_decodî
(

198 
lzma_°ªam
 *
°rm
, c⁄° 
lzma_fûãr
 *
fûãrs
)

199 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

228 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_fûãrs_upd©e
(

229 
lzma_°ªam
 *
°rm
, c⁄° 
lzma_fûãr
 *
fûãrs
Ë
lzma_nŸhrow
;

259 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_øw_buf„r_ícode
(

260 c⁄° 
lzma_fûãr
 *
fûãrs
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
,

261 c⁄° 
uöt8_t
 *
ö
, 
size_t
 
ö_size
, uöt8_à*
out
,

262 
size_t
 *
out_pos
, size_à
out_size
Ë
lzma_nŸhrow
;

283 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_øw_buf„r_decode
(

284 c⁄° 
lzma_fûãr
 *
fûãrs
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
,

285 c⁄° 
uöt8_t
 *
ö
, 
size_t
 *
ö_pos
, size_à
ö_size
,

286 
uöt8_t
 *
out
, 
size_t
 *
out_pos
, size_à
out_size
Ë
lzma_nŸhrow
;

308 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_¥›îtõs_size
(

309 
uöt32_t
 *
size
, c⁄° 
lzma_fûãr
 *
fûãr
Ë
lzma_nŸhrow
;

334 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_¥›îtõs_ícode
(

335 c⁄° 
lzma_fûãr
 *
fûãr
, 
uöt8_t
 *
¥›s
Ë
lzma_nŸhrow
;

359 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_¥›îtõs_decode
(

360 
lzma_fûãr
 *
fûãr
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
,

361 c⁄° 
uöt8_t
 *
¥›s
, 
size_t
 
¥›s_size
Ë
lzma_nŸhrow
;

383 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_fûãr_Êags_size
(

384 
uöt32_t
 *
size
, c⁄° 
lzma_fûãr
 *
fûãr
)

385 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

406 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_fûãr_Êags_ícode
(c⁄° 
lzma_fûãr
 *
fûãr
,

407 
uöt8_t
 *
out
, 
size_t
 *
out_pos
, size_à
out_size
)

408 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

422 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_fûãr_Êags_decode
(

423 
lzma_fûãr
 *
fûãr
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
,

424 c⁄° 
uöt8_t
 *
ö
, 
size_t
 *
ö_pos
, size_à
ö_size
)

425 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

	@/usr/include/lzma/hardware.h

32 #i‚de‡
LZMA_H_INTERNAL


33 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

50 
	$LZMA_API
(
uöt64_t
Ë
	$lzma_physmem
(Ë
lzma_nŸhrow
;

64 
	$LZMA_API
(
uöt32_t
Ë
	$lzma_˝uthªads
(Ë
lzma_nŸhrow
;

	@/usr/include/lzma/index.h

15 #i‚de‡
LZMA_H_INTERNAL


16 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

37 
lzma_ödex_s
 
	tlzma_ödex
;

51 c⁄° 
lzma_°ªam_Êags
 *
	mÊags
;

53 c⁄° *
	mª£rved_±r1
;

54 c⁄° *
	mª£rved_±r2
;

55 c⁄° *
	mª£rved_±r3
;

62 
lzma_vli
 
	mnumbî
;

70 
lzma_vli
 
	mblock_cou¡
;

78 
lzma_vli
 
	mcom¥es£d_off£t
;

86 
lzma_vli
 
	muncom¥es£d_off£t
;

94 
lzma_vli
 
	mcom¥es£d_size
;

99 
lzma_vli
 
	muncom¥es£d_size
;

108 
lzma_vli
 
	m∑ddög
;

110 
lzma_vli
 
	mª£rved_vli1
;

111 
lzma_vli
 
	mª£rved_vli2
;

112 
lzma_vli
 
	mª£rved_vli3
;

113 
lzma_vli
 
	mª£rved_vli4
;

114 } 
	m°ªam
;

122 
lzma_vli
 
	mnumbî_ö_fûe
;

132 
lzma_vli
 
	mcom¥es£d_fûe_off£t
;

147 
lzma_vli
 
	muncom¥es£d_fûe_off£t
;

154 
lzma_vli
 
	mnumbî_ö_°ªam
;

162 
lzma_vli
 
	mcom¥es£d_°ªam_off£t
;

170 
lzma_vli
 
	muncom¥es£d_°ªam_off£t
;

179 
lzma_vli
 
	muncom¥es£d_size
;

188 
lzma_vli
 
	mu≈added_size
;

197 
lzma_vli
 
	mtŸÆ_size
;

199 
lzma_vli
 
	mª£rved_vli1
;

200 
lzma_vli
 
	mª£rved_vli2
;

201 
lzma_vli
 
	mª£rved_vli3
;

202 
lzma_vli
 
	mª£rved_vli4
;

204 c⁄° *
	mª£rved_±r1
;

205 c⁄° *
	mª£rved_±r2
;

206 c⁄° *
	mª£rved_±r3
;

207 c⁄° *
	mª£rved_±r4
;

208 } 
	mblock
;

216 c⁄° *
	mp
;

217 
size_t
 
	ms
;

218 
lzma_vli
 
	mv
;

219 } 
	möã∫Æ
[6];

220 } 
	tlzma_ödex_ôî
;

227 
	mLZMA_INDEX_ITER_ANY
 = 0,

238 
	mLZMA_INDEX_ITER_STREAM
 = 1,

249 
	mLZMA_INDEX_ITER_BLOCK
 = 2,

260 
	mLZMA_INDEX_ITER_NONEMPTY_BLOCK
 = 3

268 } 
	tlzma_ödex_ôî_mode
;

286 
	$LZMA_API
(
uöt64_t
Ë
	$lzma_ödex_memußge
(

287 
lzma_vli
 
°ªams
,Üzma_vlò
blocks
Ë
lzma_nŸhrow
;

296 
	$LZMA_API
(
uöt64_t
Ë
	$lzma_ödex_memu£d
(c⁄° 
lzma_ödex
 *
i
)

297 
lzma_nŸhrow
;

306 
	$LZMA_API
(
lzma_ödex
 *Ë
	$lzma_ödex_öô
(c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
)

307 
lzma_nŸhrow
;

315 
	$LZMA_API
(Ë
	$lzma_ödex_íd
(

316 
lzma_ödex
 *
i
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
Ë
lzma_nŸhrow
;

343 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ödex_≠≥nd
(

344 
lzma_ödex
 *
i
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
,

345 
lzma_vli
 
u≈added_size
,Üzma_vlò
uncom¥es£d_size
)

346 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

365 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ödex_°ªam_Êags
(

366 
lzma_ödex
 *
i
, c⁄° 
lzma_°ªam_Êags
 *
°ªam_Êags
)

367 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

380 
	$LZMA_API
(
uöt32_t
Ë
	$lzma_ödex_checks
(c⁄° 
lzma_ödex
 *
i
)

381 
lzma_nŸhrow
 
lzma_©å_puª
;

397 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ödex_°ªam_∑ddög
(

398 
lzma_ödex
 *
i
, 
lzma_vli
 
°ªam_∑ddög
)

399 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

405 
	$LZMA_API
(
lzma_vli
Ë
	$lzma_ödex_°ªam_cou¡
(c⁄° 
lzma_ödex
 *
i
)

406 
lzma_nŸhrow
 
lzma_©å_puª
;

415 
	$LZMA_API
(
lzma_vli
Ë
	$lzma_ödex_block_cou¡
(c⁄° 
lzma_ödex
 *
i
)

416 
lzma_nŸhrow
 
lzma_©å_puª
;

424 
	$LZMA_API
(
lzma_vli
Ë
	$lzma_ödex_size
(c⁄° 
lzma_ödex
 *
i
)

425 
lzma_nŸhrow
 
lzma_©å_puª
;

435 
	$LZMA_API
(
lzma_vli
Ë
	$lzma_ödex_°ªam_size
(c⁄° 
lzma_ödex
 *
i
)

436 
lzma_nŸhrow
 
lzma_©å_puª
;

445 
	$LZMA_API
(
lzma_vli
Ë
	$lzma_ödex_tŸÆ_size
(c⁄° 
lzma_ödex
 *
i
)

446 
lzma_nŸhrow
 
lzma_©å_puª
;

457 
	$LZMA_API
(
lzma_vli
Ë
	$lzma_ödex_fûe_size
(c⁄° 
lzma_ödex
 *
i
)

458 
lzma_nŸhrow
 
lzma_©å_puª
;

464 
	$LZMA_API
(
lzma_vli
Ë
	$lzma_ödex_uncom¥es£d_size
(c⁄° 
lzma_ödex
 *
i
)

465 
lzma_nŸhrow
 
lzma_©å_puª
;

487 
	$LZMA_API
(Ë
	$lzma_ödex_ôî_öô
(

488 
lzma_ödex_ôî
 *
ôî
, c⁄° 
lzma_ödex
 *
i
Ë
lzma_nŸhrow
;

497 
	$LZMA_API
(Ë
	$lzma_ödex_ôî_ªwöd
(
lzma_ödex_ôî
 *
ôî
)

498 
lzma_nŸhrow
;

514 
	$LZMA_API
(
lzma_boﬁ
Ë
	$lzma_ödex_ôî_√xt
(

515 
lzma_ödex_ôî
 *
ôî
, 
lzma_ödex_ôî_mode
 
mode
)

516 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

542 
	$LZMA_API
(
lzma_boﬁ
Ë
	$lzma_ödex_ôî_loˇã
(

543 
lzma_ödex_ôî
 *
ôî
, 
lzma_vli
 
èrgë
Ë
lzma_nŸhrow
;

567 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ödex_ˇt
(
lzma_ödex
 *
de°
,Üzma_ödex *
§c
,

568 c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
)

569 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

577 
	$LZMA_API
(
lzma_ödex
 *Ë
	$lzma_ödex_dup
(

578 c⁄° 
lzma_ödex
 *
i
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
)

579 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

596 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ödex_ícodî
(

597 
lzma_°ªam
 *
°rm
, c⁄° 
lzma_ödex
 *
i
)

598 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

624 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ödex_decodî
(

625 
lzma_°ªam
 *
°rm
, 
lzma_ödex
 **
i
, 
uöt64_t
 
memlimô
)

626 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

648 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ödex_buf„r_ícode
(c⁄° 
lzma_ödex
 *
i
,

649 
uöt8_t
 *
out
, 
size_t
 *
out_pos
, size_à
out_size
Ë
lzma_nŸhrow
;

679 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ödex_buf„r_decode
(
lzma_ödex
 **
i
,

680 
uöt64_t
 *
memlimô
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
,

681 c⁄° 
uöt8_t
 *
ö
, 
size_t
 *
ö_pos
, size_à
ö_size
)

682 
lzma_nŸhrow
;

	@/usr/include/lzma/index_hash.h

18 #i‚de‡
LZMA_H_INTERNAL


19 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

25 
lzma_ödex_hash_s
 
	tlzma_ödex_hash
;

39 
	$LZMA_API
(
lzma_ödex_hash
 *Ë
	$lzma_ödex_hash_öô
(

40 
lzma_ödex_hash
 *
ödex_hash
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
)

41 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

47 
	$LZMA_API
(Ë
	$lzma_ödex_hash_íd
(

48 
lzma_ödex_hash
 *
ödex_hash
, c⁄° 
lzma_Æloˇt‹
 *
Æloˇt‹
)

49 
lzma_nŸhrow
;

65 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ödex_hash_≠≥nd
(
lzma_ödex_hash
 *
ödex_hash
,

66 
lzma_vli
 
u≈added_size
,Üzma_vlò
uncom¥es£d_size
)

67 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

95 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_ödex_hash_decode
(
lzma_ödex_hash
 *
ödex_hash
,

96 c⁄° 
uöt8_t
 *
ö
, 
size_t
 *
ö_pos
, size_à
ö_size
)

97 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

105 
	$LZMA_API
(
lzma_vli
Ë
	$lzma_ödex_hash_size
(

106 c⁄° 
lzma_ödex_hash
 *
ödex_hash
)

107 
lzma_nŸhrow
 
lzma_©å_puª
;

	@/usr/include/lzma/lzma12.h

15 #i‚de‡
LZMA_H_INTERNAL


16 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

30 
	#LZMA_FILTER_LZMA1
 
	`LZMA_VLI_C
(0x4000000000000001)

	)

40 
	#LZMA_FILTER_LZMA2
 
	`LZMA_VLI_C
(0x21)

	)

59 
	mLZMA_MF_HC3
 = 0x03,

70 
	mLZMA_MF_HC4
 = 0x04,

81 
	mLZMA_MF_BT2
 = 0x12,

90 
	mLZMA_MF_BT3
 = 0x13,

101 
	mLZMA_MF_BT4
 = 0x14

111 } 
	tlzma_m©ch_födî
;

128 
	$LZMA_API
(
lzma_boﬁ
Ë
	$lzma_mf_is_suµ‹ãd
(
lzma_m©ch_födî
 
m©ch_födî
)

129 
lzma_nŸhrow
 
lzma_©å_c⁄°
;

139 
LZMA_MODE_FAST
 = 1,

147 
LZMA_MODE_NORMAL
 = 2

155 } 
	tlzma_mode
;

170 
	$LZMA_API
(
lzma_boﬁ
Ë
	$lzma_mode_is_suµ‹ãd
(
lzma_mode
 
mode
)

171 
lzma_nŸhrow
 
lzma_©å_c⁄°
;

217 
uöt32_t
 
di˘_size
;

218 
	#LZMA_DICT_SIZE_MIN
 
	`UINT32_C
(4096)

	)

219 
	#LZMA_DICT_SIZE_DEFAULT
 (
	`UINT32_C
(1Ë<< 23)

	)

240 c⁄° 
uöt8_t
 *
¥e£t_di˘
;

254 
uöt32_t
 
¥e£t_di˘_size
;

281 
uöt32_t
 
lc
;

282 
	#LZMA_LCLP_MIN
 0

	)

283 
	#LZMA_LCLP_MAX
 4

	)

284 
	#LZMA_LC_DEFAULT
 3

	)

293 
uöt32_t
 
Õ
;

294 
	#LZMA_LP_DEFAULT
 0

	)

316 
uöt32_t
 
pb
;

317 
	#LZMA_PB_MIN
 0

	)

318 
	#LZMA_PB_MAX
 4

	)

319 
	#LZMA_PB_DEFAULT
 2

	)

322 
lzma_mode
 
mode
;

342 
uöt32_t
 
ni˚_Àn
;

345 
lzma_m©ch_födî
 
mf
;

375 
uöt32_t
 
dïth
;

384 
uöt32_t
 
ª£rved_öt1
;

385 
uöt32_t
 
ª£rved_öt2
;

386 
uöt32_t
 
ª£rved_öt3
;

387 
uöt32_t
 
ª£rved_öt4
;

388 
uöt32_t
 
ª£rved_öt5
;

389 
uöt32_t
 
ª£rved_öt6
;

390 
uöt32_t
 
ª£rved_öt7
;

391 
uöt32_t
 
ª£rved_öt8
;

392 
lzma_ª£rved_íum
 
ª£rved_íum1
;

393 
lzma_ª£rved_íum
 
ª£rved_íum2
;

394 
lzma_ª£rved_íum
 
ª£rved_íum3
;

395 
lzma_ª£rved_íum
 
ª£rved_íum4
;

396 *
ª£rved_±r1
;

397 *
ª£rved_±r2
;

399 } 
	tlzma_›ti⁄s_lzma
;

419 
	$LZMA_API
(
lzma_boﬁ
Ë
	$lzma_lzma_¥e£t
(

420 
lzma_›ti⁄s_lzma
 *
›ti⁄s
, 
uöt32_t
 
¥e£t
Ë
lzma_nŸhrow
;

	@/usr/include/lzma/stream_flags.h

15 #i‚de‡
LZMA_H_INTERNAL


16 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

27 
	#LZMA_STREAM_HEADER_SIZE
 12

	)

51 
uöt32_t
 
	mvîsi⁄
;

69 
lzma_vli
 
	mbackw¨d_size
;

70 
	#LZMA_BACKWARD_SIZE_MIN
 4

	)

71 
	#LZMA_BACKWARD_SIZE_MAX
 (
	`LZMA_VLI_C
(1Ë<< 34)

	)

79 
lzma_check
 
	mcheck
;

90 
lzma_ª£rved_íum
 
	mª£rved_íum1
;

91 
lzma_ª£rved_íum
 
	mª£rved_íum2
;

92 
lzma_ª£rved_íum
 
	mª£rved_íum3
;

93 
lzma_ª£rved_íum
 
	mª£rved_íum4
;

94 
lzma_boﬁ
 
	mª£rved_boﬁ1
;

95 
lzma_boﬁ
 
	mª£rved_boﬁ2
;

96 
lzma_boﬁ
 
	mª£rved_boﬁ3
;

97 
lzma_boﬁ
 
	mª£rved_boﬁ4
;

98 
lzma_boﬁ
 
	mª£rved_boﬁ5
;

99 
lzma_boﬁ
 
	mª£rved_boﬁ6
;

100 
lzma_boﬁ
 
	mª£rved_boﬁ7
;

101 
lzma_boﬁ
 
	mª£rved_boﬁ8
;

102 
uöt32_t
 
	mª£rved_öt1
;

103 
uöt32_t
 
	mª£rved_öt2
;

105 } 
	tlzma_°ªam_Êags
;

122 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_°ªam_hódî_ícode
(

123 c⁄° 
lzma_°ªam_Êags
 *
›ti⁄s
, 
uöt8_t
 *
out
)

124 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

139 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_°ªam_foŸî_ícode
(

140 c⁄° 
lzma_°ªam_Êags
 *
›ti⁄s
, 
uöt8_t
 *
out
)

141 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

174 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_°ªam_hódî_decode
(

175 
lzma_°ªam_Êags
 *
›ti⁄s
, c⁄° 
uöt8_t
 *
ö
)

176 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

201 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_°ªam_foŸî_decode
(

202 
lzma_°ªam_Êags
 *
›ti⁄s
, c⁄° 
uöt8_t
 *
ö
)

203 
lzma_nŸhrow
 
lzma_©å_w¨n_unu£d_ªsu…
;

221 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_°ªam_Êags_com∑ª
(

222 c⁄° 
lzma_°ªam_Êags
 *
a
, c⁄°Üzma_°ªam_Êag†*
b
)

223 
lzma_nŸhrow
 
lzma_©å_puª
;

	@/usr/include/lzma/version.h

15 #i‚de‡
LZMA_H_INTERNAL


16 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

23 
	#LZMA_VERSION_MAJOR
 5

	)

24 
	#LZMA_VERSION_MINOR
 2

	)

25 
	#LZMA_VERSION_PATCH
 2

	)

26 
	#LZMA_VERSION_STABILITY
 
LZMA_VERSION_STABILITY_STABLE


	)

28 #i‚de‡
LZMA_VERSION_COMMIT


29 
	#LZMA_VERSION_COMMIT
 ""

	)

36 
	#LZMA_VERSION_STABILITY_ALPHA
 0

	)

37 
	#LZMA_VERSION_STABILITY_BETA
 1

	)

38 
	#LZMA_VERSION_STABILITY_STABLE
 2

	)

57 
	#LZMA_VERSION
 (
LZMA_VERSION_MAJOR
 * 
	`UINT32_C
(10000000) \

58 + 
LZMA_VERSION_MINOR
 * 
	`UINT32_C
(10000) \

59 + 
LZMA_VERSION_PATCH
 * 
	`UINT32_C
(10) \

60 + 
LZMA_VERSION_STABILITY
)

	)

66 #i‡
LZMA_VERSION_STABILITY
 =
LZMA_VERSION_STABILITY_ALPHA


67 
	#LZMA_VERSION_STABILITY_STRING
 "Æpha"

	)

68 #ñi‡
LZMA_VERSION_STABILITY
 =
LZMA_VERSION_STABILITY_BETA


69 
	#LZMA_VERSION_STABILITY_STRING
 "bëa"

	)

70 #ñi‡
LZMA_VERSION_STABILITY
 =
LZMA_VERSION_STABILITY_STABLE


71 
	#LZMA_VERSION_STABILITY_STRING
 ""

	)

73 #îr‹ 
Inc‹ª˘
 
LZMA_VERSION_STABILITY


76 
	#LZMA_VERSION_STRING_C_
(
maj‹
, 
mö‹
, 
∑tch
, 
°abûôy
, 
commô
) \

77 #maj‹ "." #mö‹ "." #∑tch 
°abûôy
 
commô


	)

79 
	#LZMA_VERSION_STRING_C
(
maj‹
, 
mö‹
, 
∑tch
, 
°abûôy
, 
commô
) \

80 
	`LZMA_VERSION_STRING_C_
(
maj‹
, 
mö‹
, 
∑tch
, 
°abûôy
, 
commô
)

	)

92 
	#LZMA_VERSION_STRING
 
	`LZMA_VERSION_STRING_C
( \

93 
LZMA_VERSION_MAJOR
, 
LZMA_VERSION_MINOR
, \

94 
LZMA_VERSION_PATCH
, 
LZMA_VERSION_STABILITY_STRING
, \

95 
LZMA_VERSION_COMMIT
)

	)

99 #i‚de‡
LZMA_H_INTERNAL_RC


108 
	$LZMA_API
(
uöt32_t
Ë
	$lzma_vîsi⁄_numbî
()

109 
lzma_nŸhrow
 
lzma_©å_c⁄°
;

118 
	$LZMA_API
(c⁄° *Ë
	$lzma_vîsi⁄_°rög
()

119 
lzma_nŸhrow
 
lzma_©å_c⁄°
;

	@/usr/include/lzma/vli.h

26 #i‚de‡
LZMA_H_INTERNAL


27 #îr‹ 
Nevî
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
. 
U£
 <
lzma
.
h
> 
ö°ód
.

34 
	#LZMA_VLI_MAX
 (
UINT64_MAX
 / 2)

	)

39 
	#LZMA_VLI_UNKNOWN
 
UINT64_MAX


	)

44 
	#LZMA_VLI_BYTES_MAX
 9

	)

49 
	#LZMA_VLI_C
(
n
Ë
	`UINT64_C
“)

	)

63 
uöt64_t
 
	tlzma_vli
;

75 
	#lzma_vli_is_vÆid
(
vli
) \

76 ((
vli
Ë<
LZMA_VLI_MAX
 || (vliË=
LZMA_VLI_UNKNOWN
)

	)

115 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_vli_ícode
(
lzma_vli
 
vli
, 
size_t
 *
vli_pos
,

116 
uöt8_t
 *
out
, 
size_t
 *
out_pos
, size_à
out_size
Ë
lzma_nŸhrow
;

154 
	$LZMA_API
(
lzma_ªt
Ë
	$lzma_vli_decode
(
lzma_vli
 *
vli
, 
size_t
 *
vli_pos
,

155 c⁄° 
uöt8_t
 *
ö
, 
size_t
 *
ö_pos
, size_à
ö_size
)

156 
lzma_nŸhrow
;

165 
	$LZMA_API
(
uöt32_t
Ë
	$lzma_vli_size
(
lzma_vli
 
vli
)

166 
lzma_nŸhrow
 
lzma_©å_puª
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 #i‚de‡
Z_SOLO


33 
	#com¥ess
 
z_com¥ess


	)

34 
	#com¥ess2
 
z_com¥ess2


	)

35 
	#com¥essBound
 
z_com¥essBound


	)

37 
	#¸c32
 
z_¸c32


	)

38 
	#¸c32_comböe
 
z_¸c32_comböe


	)

39 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

40 
	#deÊ©e
 
z_deÊ©e


	)

41 
	#deÊ©eBound
 
z_deÊ©eBound


	)

42 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

43 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

44 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

45 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

46 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

47 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

48 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

49 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

50 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

51 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

52 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

53 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

54 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

55 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

56 #i‚de‡
Z_SOLO


57 
	#gz_îr‹
 
z_gz_îr‹


	)

58 
	#gz_ötmax
 
z_gz_ötmax


	)

59 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

60 
	#gzbuf„r
 
z_gzbuf„r


	)

61 
	#gz˛óªº
 
z_gz˛óªº


	)

62 
	#gz˛o£
 
z_gz˛o£


	)

63 
	#gz˛o£_r
 
z_gz˛o£_r


	)

64 
	#gz˛o£_w
 
z_gz˛o£_w


	)

65 
	#gzdúe˘
 
z_gzdúe˘


	)

66 
	#gzd›í
 
z_gzd›í


	)

67 
	#gzeof
 
z_gzeof


	)

68 
	#gzîr‹
 
z_gzîr‹


	)

69 
	#gzÊush
 
z_gzÊush


	)

70 
	#gzgëc
 
z_gzgëc


	)

71 
	#gzgëc_
 
z_gzgëc_


	)

72 
	#gzgës
 
z_gzgës


	)

73 
	#gzoff£t
 
z_gzoff£t


	)

74 
	#gzoff£t64
 
z_gzoff£t64


	)

75 
	#gz›í
 
z_gz›í


	)

76 
	#gz›í64
 
z_gz›í64


	)

77 #ifde‡
_WIN32


78 
	#gz›í_w
 
z_gz›í_w


	)

80 
	#gz¥ötf
 
z_gz¥ötf


	)

81 
	#gzv¥ötf
 
z_gzv¥ötf


	)

82 
	#gzputc
 
z_gzputc


	)

83 
	#gzputs
 
z_gzputs


	)

84 
	#gzªad
 
z_gzªad


	)

85 
	#gzªwöd
 
z_gzªwöd


	)

86 
	#gz£ek
 
z_gz£ek


	)

87 
	#gz£ek64
 
z_gz£ek64


	)

88 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

89 
	#gzãŒ
 
z_gzãŒ


	)

90 
	#gzãŒ64
 
z_gzãŒ64


	)

91 
	#gzungëc
 
z_gzungëc


	)

92 
	#gzwrôe
 
z_gzwrôe


	)

94 
	#öÊ©e
 
z_öÊ©e


	)

95 
	#öÊ©eBack
 
z_öÊ©eBack


	)

96 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

97 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

98 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

99 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

100 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

101 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

102 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

103 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

104 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

105 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

106 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

107 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

108 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

109 
	#öÊ©eSync
 
z_öÊ©eSync


	)

110 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

111 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

112 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

113 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

114 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

115 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

116 #i‚de‡
Z_SOLO


117 
	#uncom¥ess
 
z_uncom¥ess


	)

119 
	#zEº‹
 
z_zEº‹


	)

120 #i‚de‡
Z_SOLO


121 
	#zˇŒoc
 
z_zˇŒoc


	)

122 
	#zc‰ì
 
z_zc‰ì


	)

124 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

125 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

128 
	#Byã
 
z_Byã


	)

129 
	#Byãf
 
z_Byãf


	)

130 
	#Æloc_func
 
z_Æloc_func


	)

131 
	#ch¨f
 
z_ch¨f


	)

132 
	#‰ì_func
 
z_‰ì_func


	)

133 #i‚de‡
Z_SOLO


134 
	#gzFûe
 
z_gzFûe


	)

136 
	#gz_hódî
 
z_gz_hódî


	)

137 
	#gz_hódîp
 
z_gz_hódîp


	)

138 
	#ö_func
 
z_ö_func


	)

139 
	#ötf
 
z_ötf


	)

140 
	#out_func
 
z_out_func


	)

141 
	#uI¡
 
z_uI¡


	)

142 
	#uI¡f
 
z_uI¡f


	)

143 
	#uL⁄g
 
z_uL⁄g


	)

144 
	#uL⁄gf
 
z_uL⁄gf


	)

145 
	#voidp
 
z_voidp


	)

146 
	#voidpc
 
z_voidpc


	)

147 
	#voidpf
 
z_voidpf


	)

150 
	#gz_hódî_s
 
z_gz_hódî_s


	)

151 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

155 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

156 
	#MSDOS


	)

158 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

159 
	#OS2


	)

161 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

162 
	#WINDOWS


	)

164 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

165 #i‚de‡
WIN32


166 
	#WIN32


	)

169 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

170 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

171 #i‚de‡
SYS16BIT


172 
	#SYS16BIT


	)

181 #ifde‡
SYS16BIT


182 
	#MAXSEG_64K


	)

184 #ifde‡
MSDOS


185 
	#UNALIGNED_OK


	)

188 #ifde‡
__STDC_VERSION__


189 #i‚de‡
STDC


190 
	#STDC


	)

192 #i‡
__STDC_VERSION__
 >= 199901L

193 #i‚de‡
STDC99


194 
	#STDC99


	)

198 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

199 
	#STDC


	)

201 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

202 
	#STDC


	)

204 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

205 
	#STDC


	)

207 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

208 
	#STDC


	)

211 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

212 
	#STDC


	)

215 #i‚de‡
STDC


217 c⁄°

	)

221 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

222 
	#z_c⁄°
 c⁄°

	)

224 
	#z_c⁄°


	)

228 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

229 
	#NO_DUMMY_DECL


	)

233 #i‚de‡
MAX_MEM_LEVEL


234 #ifde‡
MAXSEG_64K


235 
	#MAX_MEM_LEVEL
 8

	)

237 
	#MAX_MEM_LEVEL
 9

	)

246 #i‚de‡
MAX_WBITS


247 
	#MAX_WBITS
 15

	)

265 #i‚de‡
OF


266 #ifde‡
STDC


267 
	#OF
(
¨gs
Ë
	)
args

269 
	#OF
(
¨gs
Ë()

	)

273 #i‚de‡
Z_ARG


274 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

275 
	#Z_ARG
(
¨gs
Ë
	)
args

277 
	#Z_ARG
(
¨gs
Ë()

	)

287 #ifde‡
SYS16BIT


288 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

290 
	#SMALL_MEDIUM


	)

291 #ifde‡
_MSC_VER


292 
	#FAR
 
_Ár


	)

294 
	#FAR
 
Ár


	)

297 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

299 
	#SMALL_MEDIUM


	)

300 #ifde‡
__BORLANDC__


301 
	#FAR
 
_Ár


	)

303 
	#FAR
 
Ár


	)

308 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

312 #ifde‡
ZLIB_DLL


313 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

314 #ifde‡
ZLIB_INTERNAL


315 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

317 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

325 #ifde‡
ZLIB_WINAPI


326 #ifde‡
FAR


327 #unde‡
FAR


329 
	~<wödows.h
>

332 
	#ZEXPORT
 
WINAPI


	)

333 #ifde‡
WIN32


334 
	#ZEXPORTVA
 
WINAPIV


	)

336 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

341 #i‡
deföed
 (
__BEOS__
)

342 #ifde‡
ZLIB_DLL


343 #ifde‡
ZLIB_INTERNAL


344 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

345 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

347 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

353 #i‚de‡
ZEXTERN


354 
	#ZEXTERN
 

	)

356 #i‚de‡
ZEXPORT


357 
	#ZEXPORT


	)

359 #i‚de‡
ZEXPORTVA


360 
	#ZEXPORTVA


	)

363 #i‚de‡
FAR


364 
	#FAR


	)

367 #i‡!
deföed
(
__MACTYPES__
)

368 
	tByã
;

370 
	tuI¡
;

371 
	tuL⁄g
;

373 #ifde‡
SMALL_MEDIUM


375 
	#Byãf
 
Byã
 
FAR


	)

377 
Byã
 
	tFAR
 
	tByãf
;

379 
	tFAR
 
	tch¨f
;

380 
	tFAR
 
	tötf
;

381 
uI¡
 
	tFAR
 
	tuI¡f
;

382 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

384 #ifde‡
STDC


385 c⁄° *
	tvoidpc
;

386 
	tFAR
 *
	tvoidpf
;

387 *
	tvoidp
;

389 
Byã
 c⁄° *
	tvoidpc
;

390 
Byã
 
	tFAR
 *
	tvoidpf
;

391 
Byã
 *
	tvoidp
;

394 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

395 
	~<limôs.h
>

396 #i‡(
UINT_MAX
 == 0xffffffffUL)

397 
	#Z_U4
 

	)

398 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

399 
	#Z_U4
 

	)

400 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

401 
	#Z_U4
 

	)

405 #ifde‡
Z_U4


406 
Z_U4
 
	tz_¸c_t
;

408 
	tz_¸c_t
;

412 
	#Z_HAVE_UNISTD_H


	)

416 
	#Z_HAVE_STDARG_H


	)

419 #ifde‡
STDC


420 #i‚de‡
Z_SOLO


421 
	~<sys/ty≥s.h
>

425 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

426 #i‚de‡
Z_SOLO


427 
	~<°d¨g.h
>

431 #ifde‡
_WIN32


432 #i‚de‡
Z_SOLO


433 
	~<°ddef.h
>

443 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

444 #unde‡
_LARGEFILE64_SOURCE


447 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

448 
	#Z_HAVE_UNISTD_H


	)

450 #i‚de‡
Z_SOLO


451 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

452 
	~<uni°d.h
>

453 #ifde‡
VMS


454 
	~<unixio.h
>

456 #i‚de‡
z_off_t


457 
	#z_off_t
 
off_t


	)

462 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

463 
	#Z_LFS64


	)

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

467 
	#Z_LARGE64


	)

470 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

471 
	#Z_WANT64


	)

474 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

475 
	#SEEK_SET
 0

	)

476 
	#SEEK_CUR
 1

	)

477 
	#SEEK_END
 2

	)

480 #i‚de‡
z_off_t


481 
	#z_off_t
 

	)

484 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

485 
	#z_off64_t
 
off64_t


	)

487 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

488 
	#z_off64_t
 
__öt64


	)

490 
	#z_off64_t
 
z_off_t


	)

495 #i‡
deföed
(
__MVS__
)

496 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

497 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

498 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

499 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

500 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

501 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

502 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

503 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

504 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

505 #¥agm®
m≠
(
com¥essBound
,"CMBND")

506 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

507 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

508 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

57 
	#__STDC_ISO_10646__
 201605L

	)

60 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
[0];

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
187
4009
contrib/addtiffo/addtiffo.c
contrib/addtiffo/tif_overview.c
contrib/addtiffo/tif_ovrcache.c
contrib/addtiffo/tif_ovrcache.h
contrib/dbs/tiff-bi.c
contrib/dbs/tiff-grayscale.c
contrib/dbs/tiff-palette.c
contrib/dbs/tiff-rgb.c
contrib/dbs/xtiff/patchlevel.h
contrib/dbs/xtiff/xtiff.c
contrib/dbs/xtiff/xtifficon.h
contrib/iptcutil/iptcutil.c
contrib/mfs/mfs_file.c
contrib/pds/tif_imageiter.c
contrib/pds/tif_imageiter.h
contrib/pds/tif_pdsdirread.c
contrib/pds/tif_pdsdirwrite.c
contrib/ras/ras2tif.c
contrib/ras/tif2ras.c
contrib/stream/tiffstream.cpp
contrib/stream/tiffstream.h
contrib/tags/listtif.c
contrib/tags/maketif.c
contrib/tags/xtif_dir.c
contrib/tags/xtiffio.h
contrib/tags/xtiffiop.h
contrib/win_dib/Tiffile.cpp
contrib/win_dib/tiff2dib.c
libtiff/mkg3states.c
libtiff/t4.h
libtiff/tif_aux.c
libtiff/tif_close.c
libtiff/tif_codec.c
libtiff/tif_color.c
libtiff/tif_compress.c
libtiff/tif_config.h
libtiff/tif_config.vc.h
libtiff/tif_config.wince.h
libtiff/tif_dir.c
libtiff/tif_dir.h
libtiff/tif_dirinfo.c
libtiff/tif_dirread.c
libtiff/tif_dirwrite.c
libtiff/tif_dumpmode.c
libtiff/tif_error.c
libtiff/tif_extension.c
libtiff/tif_fax3.c
libtiff/tif_fax3.h
libtiff/tif_fax3sm.c
libtiff/tif_flush.c
libtiff/tif_getimage.c
libtiff/tif_jbig.c
libtiff/tif_jpeg.c
libtiff/tif_jpeg_12.c
libtiff/tif_luv.c
libtiff/tif_lzma.c
libtiff/tif_lzw.c
libtiff/tif_next.c
libtiff/tif_ojpeg.c
libtiff/tif_open.c
libtiff/tif_packbits.c
libtiff/tif_pixarlog.c
libtiff/tif_predict.c
libtiff/tif_predict.h
libtiff/tif_print.c
libtiff/tif_read.c
libtiff/tif_stream.cxx
libtiff/tif_strip.c
libtiff/tif_swab.c
libtiff/tif_thunder.c
libtiff/tif_tile.c
libtiff/tif_unix.c
libtiff/tif_version.c
libtiff/tif_warning.c
libtiff/tif_win32.c
libtiff/tif_write.c
libtiff/tif_zip.c
libtiff/tiff.h
libtiff/tiffconf.h
libtiff/tiffconf.vc.h
libtiff/tiffconf.wince.h
libtiff/tiffio.h
libtiff/tiffio.hxx
libtiff/tiffiop.h
libtiff/tiffvers.h
libtiff/uvcode.h
port/dummy.c
port/getopt.c
port/lfind.c
port/libport.h
port/strcasecmp.c
port/strtoul.c
port/strtoull.c
test/ascii_tag.c
test/check_tag.c
test/long_tag.c
test/rewrite_tag.c
test/short_tag.c
test/strip.c
test/strip_rw.c
test/test_arrays.c
test/test_arrays.h
test/tifftest.h
tools/bmp2tiff.c
tools/fax2ps.c
tools/fax2tiff.c
tools/gif2tiff.c
tools/pal2rgb.c
tools/ppm2tiff.c
tools/ras2tiff.c
tools/rasterfile.h
tools/raw2tiff.c
tools/rgb2ycbcr.c
tools/sgi2tiff.c
tools/sgisv.c
tools/thumbnail.c
tools/tiff2bw.c
tools/tiff2pdf.c
tools/tiff2ps.c
tools/tiff2rgba.c
tools/tiffcmp.c
tools/tiffcp.c
tools/tiffcrop.c
tools/tiffdither.c
tools/tiffdump.c
tools/tiffgt.c
tools/tiffinfo.c
tools/tiffmedian.c
tools/tiffset.c
tools/tiffsplit.c
tools/ycbcr.c
/usr/include/GL/gl.h
/usr/include/X11/Xatom.h
/usr/include/X11/Xproto.h
/usr/include/X11/cursorfont.h
/usr/include/X11/keysymdef.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/jerror.h
/usr/include/jpeglib.h
/usr/include/limits.h
/usr/include/lzma.h
/usr/include/math.h
/usr/include/search.h
/usr/include/setjmp.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/GL/glext.h
/usr/include/X11/Xmd.h
/usr/include/X11/Xprotostr.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/jmorecfg.h
/usr/include/jpegint.h
/usr/include/libio.h
/usr/include/lzma/base.h
/usr/include/lzma/bcj.h
/usr/include/lzma/block.h
/usr/include/lzma/check.h
/usr/include/lzma/container.h
/usr/include/lzma/delta.h
/usr/include/lzma/filter.h
/usr/include/lzma/hardware.h
/usr/include/lzma/index.h
/usr/include/lzma/index_hash.h
/usr/include/lzma/lzma12.h
/usr/include/lzma/stream_flags.h
/usr/include/lzma/version.h
/usr/include/lzma/vli.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
