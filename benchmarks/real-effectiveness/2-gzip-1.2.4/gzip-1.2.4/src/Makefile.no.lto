
#
# Those are the compilations options for having the best performance
#
# If NATIVE is defined, the native gcc compiler is used. The same otimization options are used
# 
OPTS    := -g -O2 
OPTS    += -fomit-frame-pointer -fno-exceptions -fno-strict-aliasing -finline-limit=1800 
#OPTS    += -frename-registers -finline-functions -funroll-loops
#OPTS    += -freduce-all-givs -fmove-all-movables -fgcse -fgcse-lm -fgcse-sm 

CFLAGS= $(OPTS)
CC    = /root/llvm/build/bin/clang

PROBERLIB=-rdynamic /root/llvm/Prober/libprober.so

OBJS	= bits.o deflate.o gzip.o getopt.o inflate.o lzw.o \
	  crypt.c trees.o unlzh.o unlzw.o unpack.o unzip.o util.o zip.o
LLVM_OBJS	= bits.bc deflate.bc gzip.bc getopt.bc inflate.bc lzw.bc \
	  crypt.c trees.bc unlzh.bc unlzw.bc unpack.bc unzip.bc util.bc zip.bc


.PHONY: gzip

all: gzip

gzip: $(OBJS)
	#$(CC) $(MOPTS) -o $@ $^ $(MLOPTS) $(DOUBLELIB)
	$(CC) $(MOPTS) -o $@ $^ $(MLOPTS) $(PROBERLIB)

.c.o:
	$(CC) $(CFLAGS) $(INCLS) $(DECLS) -c $<


clean:
	rm -rf *.s *.o *.c.t* ttt.* ttt
